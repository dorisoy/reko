// fn0C00_0000
// Mem0:Global memory
// fp:Temporary
// eax:Register eax
// ds:Register ds
// si:Register si
// ax:Register ax
// return address size: 2
void fn0C00_0000()
fn0C00_0000_entry:		// pred:
	// succ:  l0C00_0000
l0C00_0000:		// pred: fn0C00_0000_entry
	eax = eax + eax * 0x00000004
	store(Mem0[ds:0x02FC:word32]) = eax
	eax = Mem0[ds:si:word32]
	si = si + 0x0004
	store(Mem0[ds:0x0300:word32]) = eax
	eax = Mem0[ds:si:word32]
	si = si + 0x0004
	store(Mem0[ds:0x0304:word32]) = eax
	ax = Mem0[ds:si:word16]
	si = si + 0x0002
	store(Mem0[ds:0x0308:word16]) = ax
	ax = Mem0[ds:si:word16]
	si = si + 0x0002
	store(Mem0[ds:0x030A:word16]) = ax
	call fn0C00_0026 (depth: 2;)
	return
	// succ:  fn0C00_0000_exit
fn0C00_0000_exit:		// pred: l0C00_0000
	// succ: 
// fn0C00_0026
// Mem0:Global memory
// fp:Temporary
// ds:Register ds
// cx:Register cx
// al:Register al
// di:Register di
// v6:Temporary
// SCZO:Flags
// es:Register es
// Z:Flags
// return address size: 2
void fn0C00_0026()
fn0C00_0026_entry:		// pred:
	// succ:  l0C00_0026
l0C00_0026:		// pred: fn0C00_0026_entry
	cx = Mem0[ds:0x0400:word16]
	al = 0x00
	di = Mem0[ds:0x0402:word16]
	// succ:  l0C00_0030
l0C00_0030:		// pred: l0C00_0026 l0C00_0030_rep
	branch cx == 0x0000 l0C00_0030_rep
	// succ:  l0C00_0032 l0C00_0030_rep
l0C00_0032:		// pred: l0C00_0030 l0C00_0030_rep
	store(Mem0[ds:0x0404:word16]) = di
	return
	// succ:  fn0C00_0026_exit
fn0C00_0026_exit:		// pred: l0C00_0032
	// succ: 
l0C00_0030_rep:		// pred: l0C00_0030
	cx = cx - 0x0001
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 0x0001
	branch Test(EQ,Z) l0C00_0030
	// succ:  l0C00_0032 l0C00_0030
