// fn0C00_0000
// Mem0:Global memory
// fp:Temporary
// ds:Register ds
// si:Register si
// cx:Register cx
// SZO:Flags
// al:Register al
// ah:Register ah
// SCZO:Flags
// Z:Flags
// ax:Register ax
// es:Register es
// di:Register di
// return address size: 2
void fn0C00_0000()
fn0C00_0000_entry:		// pred:
	// succ:  l0C00_0000
l0C00_0000:		// pred: fn0C00_0000_entry
	si = Mem0[ds:0x0100:word16]
	cx = Mem0[ds:si:word16]
	si = si + 0x0001
	si = si + 0x0001
	SZO = cond(si)
	// succ:  l0C00_0008
l0C00_0008:		// pred: l0C00_0000 l0C00_000B_loop l0C00_0008
	al = Mem0[ds:si:byte]
	si = si + 0x0001
	SCZO = cond(al - ah)
	cx = cx - 0x0001
	branch Test(NE,Z) l0C00_0008
	// succ:  l0C00_000B_loop l0C00_0008
l0C00_000B_loop:		// pred: l0C00_0008
	branch cx == 0x0000 l0C00_0008
	// succ:  l0C00_000D l0C00_0008
l0C00_000D:		// pred: l0C00_000B_loop
	si = Mem0[ds:0x0100:word16]
	ax = Mem0[ds:si:word16]
	si = si + 0x0002
	al = 0x00
	SCZO = cond(al)
	// succ:  l0C00_0014
l0C00_0014:		// pred: l0C00_000D l0C00_0014
	store(Mem0[es:di:byte]) = al
	di = di + 0x0001
	cx = cx - 0x0001
	Z = cond(cx)
	branch Test(NE,Z) l0C00_0014
	// succ:  l0C00_0017 l0C00_0014
l0C00_0017:		// pred: l0C00_0014
	return
	// succ:  fn0C00_0000_exit
fn0C00_0000_exit:		// pred: l0C00_0017
	// succ: 
