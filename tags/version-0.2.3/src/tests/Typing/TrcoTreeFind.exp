// TreeFindMock
void TreeFindMock()
TreeFindMock_entry:		// block 0, pred:
	// succ:  1
seek:		// block 1, pred: 0 7
	branch t == 0x00000000 found
	// succ:  2 5
l1:		// block 2, pred: 1
	word32 vv_7 = Mem0[t + 0x00000000:word32]
	branch v == vv_7 found
	// succ:  3 5
l2:		// block 3, pred: 2
	branch v < vv_7 lt
	// succ:  7 4
lt:		// block 4, pred: 3
	t = Mem0[t + 0x00000004:word32]
	// succ:  5
found:		// block 5, pred: 1 2 4
	return t
	// succ:  6
TreeFindMock_exit:		// block 6, pred: 5
	// succ: 
l3:		// block 7, pred: 3
	t = Mem0[t + 0x00000008:word32]
	// succ:  1

T_2 (in t : word32)
	trait_primitive(word32)
	trait_equal(T_3)
	trait_primitive(word32)
	trait_mem(T_8, 0)
	trait_primitive(word32)
	trait_mem(T_14, 4)
	trait_primitive(word32)
	trait_equal(T_14)
	trait_primitive(word32)
	trait_primitive(word32)
	trait_mem(T_17, 8)
	trait_primitive(word32)
	trait_equal(T_17)
T_3 (in 0x00000000 : word32)
	trait_primitive(word32)
T_4 (in t == 0x00000000 : bool)
	trait_primitive(bool)
T_5 (in vv_7 : word32)
	trait_primitive(word32)
	trait_equal(T_8)
	trait_primitive(word32)
	trait_primitive(word32)
	trait_primitive(int32)
T_6 (in 0x00000000 : word32)
	trait_primitive(word32)
T_7 (in t + 0x00000000 : word32)
	trait_primitive(word32)
T_8 (in Mem0[t + 0x00000000:word32] : word32)
	trait_primitive(word32)
T_9 (in v : word32)
	trait_primitive(word32)
	trait_equal(T_5)
	trait_primitive(word32)
	trait_equal(T_5)
	trait_primitive(int32)
T_10 (in v == vv_7 : bool)
	trait_primitive(bool)
T_11 (in v < vv_7 : bool)
	trait_primitive(bool)
T_12 (in 0x00000004 : word32)
	trait_primitive(word32)
T_13 (in t + 0x00000004 : word32)
	trait_primitive(word32)
T_14 (in Mem0[t + 0x00000004:word32] : word32)
	trait_primitive(word32)
T_15 (in 0x00000008 : word32)
	trait_primitive(word32)
T_16 (in t + 0x00000008 : word32)
	trait_primitive(word32)
T_17 (in Mem0[t + 0x00000008:word32] : word32)
	trait_primitive(word32)
