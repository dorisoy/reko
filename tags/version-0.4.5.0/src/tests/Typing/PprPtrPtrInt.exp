// PtrPtrIntMock
// Return size: 0
void PtrPtrIntMock()
PtrPtrIntMock_entry:
	// succ:  l1
l1:
	r2 = Mem0[r1:word32]
	r3 = Mem0[r2:word32]
	Mem0[0x00010000:word32] = r3
	Mem0[0x00010004:word32] = r1
	return r3
	// succ:  PtrPtrIntMock_exit
PtrPtrIntMock_exit:

// Equivalence classes ////////////
Eq_1: (struct "Globals" (10000 word32 dw10000) (10004 (ptr Eq_2) ptr10004))
	globals_t (in globals : (ptr (struct "Globals")))
Eq_2: (struct (0 (ptr Eq_3) ptr0000))
	T_2 (in r1 : word32)
	T_10 (in Mem0[0x00010004:word32] : word32)
Eq_3: (struct (0 word32 dw0000))
	T_3 (in Mem0[r1:word32] : word32)
	T_4 (in r2 : word32)
Eq_7: (struct (0 word32 dw0000))
	T_7 (in 0x00010000 : word32)
Eq_9: (struct (0 (ptr Eq_2) ptr0000))
	T_9 (in 0x00010004 : word32)
// Type Variables ////////////
globals_t: (in globals : (ptr (struct "Globals")))
  Class: Eq_1
  DataType: (ptr Eq_1)
  OrigDataType: (ptr (struct "Globals"))
T_2: (in r1 : word32)
  Class: Eq_2
  DataType: (ptr Eq_2)
  OrigDataType: (ptr (struct (0 T_3 t0000)))
T_3: (in Mem0[r1:word32] : word32)
  Class: Eq_3
  DataType: (ptr Eq_3)
  OrigDataType: word32
T_4: (in r2 : word32)
  Class: Eq_3
  DataType: (ptr Eq_3)
  OrigDataType: (ptr (struct (0 T_5 t0000)))
T_5: (in Mem0[r2:word32] : word32)
  Class: Eq_5
  DataType: word32
  OrigDataType: word32
T_6: (in r3 : word32)
  Class: Eq_5
  DataType: word32
  OrigDataType: word32
T_7: (in 0x00010000 : word32)
  Class: Eq_7
  DataType: (ptr Eq_7)
  OrigDataType: (ptr (struct (0 T_8 t0000)))
T_8: (in Mem0[0x00010000:word32] : word32)
  Class: Eq_5
  DataType: word32
  OrigDataType: word32
T_9: (in 0x00010004 : word32)
  Class: Eq_9
  DataType: (ptr Eq_9)
  OrigDataType: (ptr (struct (0 T_10 t0000)))
T_10: (in Mem0[0x00010004:word32] : word32)
  Class: Eq_2
  DataType: (ptr Eq_2)
  OrigDataType: word32
