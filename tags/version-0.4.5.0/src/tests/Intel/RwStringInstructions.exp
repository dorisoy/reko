// fn0C00_0000
// Return size: 2
// Mem0:Global memory
// fp:fp
// sp:sp
// eax:eax
// ds:ds
// si:si
// ax:ax
// return address size: 2
void fn0C00_0000()
fn0C00_0000_entry:
	// succ:  l0C00_0000
l0C00_0000:
	sp = fp
	eax = eax + eax * 0x00000004
	Mem0[ds:0x02FC:word32] = eax
	eax = Mem0[ds:si:word32]
	si = si + 0x0004
	Mem0[ds:0x0300:word32] = eax
	eax = Mem0[ds:si:word32]
	si = si + 0x0004
	Mem0[ds:0x0304:word32] = eax
	ax = Mem0[ds:si:word16]
	si = si + 0x0002
	Mem0[ds:0x0308:word16] = ax
	ax = Mem0[ds:si:word16]
	si = si + 0x0002
	Mem0[ds:0x030A:word16] = ax
	call fn0C00_0026 (retsize: 2;)
	return
	// succ:  fn0C00_0000_exit
fn0C00_0000_exit:
// fn0C00_0026
// Return size: 2
// Mem0:Global memory
// fp:fp
// sp:sp
// cx:cx
// ds:ds
// al:al
// di:di
// SCZO:Flags
// es:es
// Z:Flags
// return address size: 2
void fn0C00_0026()
fn0C00_0026_entry:
	// succ:  l0C00_0026
l0C00_0026:
	sp = fp
	cx = Mem0[ds:0x0400:word16]
	al = 0x00
	di = Mem0[ds:0x0402:word16]
	// succ:  l0C00_0030
l0C00_0030:
	branch cx == 0x0000 l0C00_0032
	// succ:  l0C00_0030_1 l0C00_0032
l0C00_0030_1:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(NE,Z) l0C00_0030
	// succ:  l0C00_0032 l0C00_0030
l0C00_0032:
	Mem0[ds:0x0404:word16] = di
	return
	// succ:  fn0C00_0026_exit
fn0C00_0026_exit:
