void fn0C00_0000(Register word16 dx)
// MayUse:  dx
// LiveOut:
// Trashed: SCZO ax dx al dl ah dh
// Preserved: sp
// fn0C00_0000
// Return size: 0
// Mem0:Global memory
// fp:fp
// sp:sp
// dx:dx
// ax:ax
// return address size: 2
void fn0C00_0000(word16 dx)
fn0C00_0000_entry:
	// succ:  l0C00_0000
l0C00_0000:
	sp = fp
	ax = fn0C00_0004(dx, out dx)
	return
	// succ:  fn0C00_0000_exit
fn0C00_0000_exit:
Register word16 fn0C00_0004(Register word16 dx, Register out ptr16 dxOut)
// MayUse:  dx
// LiveOut: ax dx
// Trashed: SCZO ax dx al dl ah dh
// Preserved: sp
// fn0C00_0004
// Return size: 0
// Mem0:Global memory
// fp:fp
// sp:sp
// dx:dx
// SCZO:Flags
// Z:Flags
// SZO:Flags
// ax:ax
// dxOut:Out:dx
// return address size: 2
word16 fn0C00_0004(word16 dx, ptr16 dxOut)
fn0C00_0004_entry:
	// succ:  l0C00_0004
l0C00_0004:
	sp = fp
	SCZO = cond(dx - 0x001E)
	branch Test(NE,Z) l0C00_000F
	// succ:  l0C00_0009 l0C00_000F
l0C00_0009:
	dx = fn0C00_0013(dx)
	goto l0C00_0010
	// succ:  l0C00_0010
l0C00_000F:
	dx = dx - 0x0001
	SZO = cond(dx)
	// succ:  l0C00_0010
l0C00_0010:
	ax = dx
	return ax
	// succ:  fn0C00_0004_exit
fn0C00_0004_exit:
	use dx (=> dxOut)
Register word16 fn0C00_0013(Register word16 dx)
// MayUse:  dx
// LiveOut: dx
// Trashed: SCZO ax dx al dl ah dh
// Preserved: sp
// fn0C00_0013
// Return size: 0
// Mem0:Global memory
// fp:fp
// sp:sp
// dx:dx
// SCZO:Flags
// SO:Flags
// SZO:Flags
// ax:ax
// return address size: 2
word16 fn0C00_0013(word16 dx)
fn0C00_0013_entry:
	// succ:  l0C00_0013
l0C00_0013:
	sp = fp
	SCZO = cond(dx - 0x0014)
	branch Test(LT,SO) l0C00_001F
	// succ:  l0C00_0018 l0C00_001F
l0C00_0018:
	dx = dx - 0x0001
	SZO = cond(dx)
	ax = fn0C00_0004(dx, out dx)
	goto l0C00_0025
	// succ:  l0C00_0025
l0C00_001F:
	dx = dx - 0x000A
	SCZO = cond(dx)
	ax = fn0C00_0004(dx, out dx)
	// succ:  l0C00_0025
l0C00_0025:
	ax = ax + 0x0001
	SZO = cond(ax)
	return dx
	// succ:  fn0C00_0013_exit
fn0C00_0013_exit:
