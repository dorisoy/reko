Mem0: Mem0:Global memory (aliases: 0), def: {def Mem0}
edx: edx:Register (aliases: 1), def: {def edx}, uses: {Mem7[7960:I4] = edx}{eax_9 = edx}
cl: cl:Register (aliases: 2), def: {def cl}, uses: {Mem8[7964:I1] = cl}
eax: eax:Register (aliases: 3), def: {def eax}
SZO: SZO:Flags (aliases: 4), def: {def SZO}
C: C:Flags (aliases: 5), def: {def C}
si: si:Register (aliases: 6), def: {def si}, uses: {Mem13[si + 00C8:I4] = eax_10}
Mem7: orig: Mem0, def: {Mem7[7960:I4] = edx}
Mem8: orig: Mem0, def: {Mem8[7964:I1] = cl}
eax_9: orig: eax, def: {eax_9 = edx}, uses: {eax_10 = -eax_9}
eax_10: orig: eax, def: {eax_10 = -eax_9}, uses: {SZO_11 = cond(eax_10)}{C_12 = eax_10 == 00000000}{Mem13[si + 00C8:I4] = eax_10}
SZO_11: orig: SZO, def: {SZO_11 = cond(eax_10)}
C_12: orig: C, def: {C_12 = eax_10 == 00000000}
Mem13: orig: Mem0, def: {Mem13[si + 00C8:I4] = eax_10}
// fn0C00_0000
void fn0C00_0000()
fn0C00_0000_entry:		// block 0, pred:
	def Mem0
	def edx
	def cl
	def eax
	def SZO
	def C
	def si
	// succ:  1
l0C00_0000:		// block 1, pred: 0
	Mem7[7960:I4] = edx
	Mem8[7964:I1] = cl
	eax_9 = edx
	eax_10 = -eax_9
	SZO_11 = cond(eax_10)
	C_12 = eax_10 == 00000000
	Mem13[si + 00C8:I4] = eax_10
	return
	// succ:  2
fn0C00_0000_exit:		// block 2, pred: 1
	// succ: 
Values:
	C: <C>
	cl: <cl>
	cond(eax_10): <SZO_11>
	eax: <eax>
	eax_10 == 00000000: <C_12>
	eax_10: <store(Mem13[si + 00C8:I4])>
	-edx: <eax_10>
	edx: <edx>
	Mem0: <Mem0>
	si: <si>
	SZO: <SZO>
Identifiers:
	Mem0: <Mem0>
	edx: <edx>
	cl: <cl>
	eax: <eax>
	SZO: <SZO>
	C: <C>
	si: <si>
	Mem7: <edx>
	Mem8: <cl>
	eax_9: <edx>
	eax_10: <eax_10>
	SZO_11: <SZO_11>
	C_12: <C_12>
	Mem13: <store(Mem13[si + 00C8:I4])>

