void fn0C00_0000(Register selector ds)
// MayUse:  ds
// LiveOut:
// Trashed: SCZO ax cx dx al cl dl ah ch dh
// Preserved:
// fn0C00_0000
// Mem0:Global memory
// fp:Temporary
// cx:Register cx
// ax:Register ax
// ds:Register ds
// return address size: 2
void fn0C00_0000(selector ds)
fn0C00_0000_entry:		// pred:
	// succ:  l0C00_0000
l0C00_0000:		// pred: fn0C00_0000_entry
	cx = 0x0005
	ax = fn0C00_000B(cx)
	Mem0[ds:0x0064:word16] = ax
	return
	// succ:  fn0C00_0000_exit
fn0C00_0000_exit:		// pred: l0C00_0000
	// succ: 
Register word16 fn0C00_000B(Register word16 cx)
// MayUse:  cx
// LiveOut: ax
// Trashed: SCZO ax cx dx al cl dl ah ch dh
// Preserved: si
// fn0C00_000B
// Mem0:Global memory
// fp:Temporary
// si:Register si
// wLoc04:Local -0004
// cx:Register cx
// SCZO:Flags
// SZO:Flags
// ax:Register ax
// dx:Register dx
// dx_ax:Sequence dx:ax
// return address size: 2
word16 fn0C00_000B(word16 cx)
fn0C00_000B_entry:		// pred:
	// succ:  l0C00_000B
l0C00_000B:		// pred: fn0C00_000B_entry
	wLoc04 = si
	SCZO = cond(cx - 0x0001)
	branch Test(LE,SZO) l0C00_001C
	// succ:  l0C00_0011 l0C00_001C
l0C00_0011:		// pred: l0C00_000B
	si = cx
	cx = cx - 0x0001
	ax = fn0C00_000B(cx)
	dx_ax = si *s ax
	SCZO = cond(dx_ax)
	// succ:  l0C00_001F
l0C00_001F:		// pred: l0C00_001C l0C00_0011
	si = wLoc04
	return ax
	// succ:  fn0C00_000B_exit
fn0C00_000B_exit:		// pred: l0C00_001F
	// succ: 
l0C00_001C:		// pred: l0C00_000B
	ax = 0x0001
	// succ:  l0C00_001F
