// fn0C00_0000 /////////////////////
	LiveOut:  
	MayUseIn:  ds
	BypassIn: 
	Trashed:   ax si al ah
	Preserved: sp
// fn0C00_0000
void fn0C00_0000()
fn0C00_0000_entry:
	// DataOut: ds
	// DataOut (flags):
	// SymbolicIn: sp:fp
l0C00_0000:
	si = 0x1234
	call fn0C00_000B (retsize: 2;depth: 2)
	Mem0[ds:0x5431:word16] = ax
	return
// DataOut:
// DataOut (flags):
// SymbolicIn: sp:fp
fn0C00_0000_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn: sp:fp si:0x1234 ax:<invalid>

// fn0C00_000B /////////////////////
	LiveOut:   ax ds
	MayUseIn:  si ds
	BypassIn: 
	Trashed:   ax al ah
	Preserved: sp si
// fn0C00_000B
void fn0C00_000B()
fn0C00_000B_entry:		// pred:
	// succ:  l0C00_000B
// DataOut: si ds
l0C00_000B:		// pred: fn0C00_000B_entry
	wLoc04 = si
	call fn0C00_0011 (depth: 4;)
	si = wLoc04
	return
	// succ:  fn0C00_000B_exit
// DataOut: ax ds
fn0C00_000B_exit:		// pred: l0C00_000B
	// succ: 
// DataOut: ax ds
// fn0C00_0011 /////////////////////
	LiveOut:   ax ds
	MayUseIn:  si ds
	BypassIn: 
	Trashed:   ax al ah
	Preserved:
// fn0C00_0011
void fn0C00_0011()
fn0C00_0011_entry:		// pred:
	// succ:  l0C00_0011
// DataOut: si ds
l0C00_0011:		// pred: fn0C00_0011_entry
	ax = Mem0[ds:si + 0x0004:word16]
	return
	// succ:  fn0C00_0011_exit
// DataOut: ax ds
fn0C00_0011_exit:		// pred: l0C00_0011
	// succ: 
// DataOut: ax ds
