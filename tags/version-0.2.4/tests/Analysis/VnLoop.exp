Mem0: Mem0:Global memory, def: {def Mem0}, uses: {Mem12 = PHI(Mem0, Mem18)}
fp: fp:Temporary, def: {def fp}
ax: ax:Register, def: {def ax}, uses: {loc02_9 = ax}{ax_11 = PHI(ax, ax_16)}
loc02: loc02:Local -0002 (temp), def: {def loc02}
SCZO: SCZO:Flags, def: {def SCZO}
bx: bx:Register, def: {def bx}, uses: {SCZO_13 = cond(ax_11 - bx)}
SO: SO:Flags, def: {def SO}
si: si:Register, def: {def si}, uses: {si_10 = PHI(si, si_15)}
v8: v8:Temporary, def: {def v8}
loc02_9: orig: loc02, def: {loc02_9 = ax}, uses: {ax_21 = loc02_9}
si_10: orig: si, def: {si_10 = PHI(si, si_15)}
ax_11: orig: ax, def: {ax_11 = PHI(ax, ax_16)}, uses: {SCZO_13 = cond(ax_11 - bx)}
Mem12: orig: Mem0, def: {Mem12 = PHI(Mem0, Mem18)}, uses: {si_15 = Mem12[0x0302:word16]}{ax_16 = Mem12[si_15 + 0x0004:word16]}{v8_17 = Mem12[si_15 + 0x0006:word16] + ax_16}
SCZO_13: orig: SCZO, def: {SCZO_13 = cond(ax_11 - bx)}, uses: {SO_14 = SCZO_13 (alias)}
SO_14: orig: SO, def: {SO_14 = SCZO_13 (alias)}, uses: {branch Test(LT,SO_14)}
si_15: orig: si, def: {si_15 = Mem12[0x0302:word16]}, uses: {ax_16 = Mem12[si_15 + 0x0004:word16]}{v8_17 = Mem12[si_15 + 0x0006:word16] + ax_16}{Mem18[si_15 + 0x0006:word16] = v8_17}{si_10 = PHI(si, si_15)}
ax_16: orig: ax, def: {ax_16 = Mem12[si_15 + 0x0004:word16]}, uses: {v8_17 = Mem12[si_15 + 0x0006:word16] + ax_16}{ax_11 = PHI(ax, ax_16)}
v8_17: orig: v8, def: {v8_17 = Mem12[si_15 + 0x0006:word16] + ax_16}, uses: {Mem18[si_15 + 0x0006:word16] = v8_17}{SCZO_19 = cond(v8_17)}
Mem18: orig: Mem0, def: {Mem18[si_15 + 0x0006:word16] = v8_17}, uses: {Mem12 = PHI(Mem0, Mem18)}
SCZO_19: orig: SCZO, def: {SCZO_19 = cond(v8_17)}, uses: {SO_20 = SCZO_19 (alias)}
SO_20: orig: SO, def: {SO_20 = SCZO_19 (alias)}
ax_21: orig: ax, def: {ax_21 = loc02_9}
// fn0C00_0000
void fn0C00_0000()
fn0C00_0000_entry:		// block 0, pred:
	def Mem0
	def fp
	def ax
	def loc02
	def SCZO
	def bx
	def SO
	def si
	def v8
	// succ:  1
l0C00_0000:		// block 1, pred: 0
	loc02_9 = ax
	// succ:  2
l0C00_000E:		// block 2, pred: 1 3
	si_10 = PHI(si, si_15)
	ax_11 = PHI(ax, ax_16)
	Mem12 = PHI(Mem0, Mem18)
	SCZO_13 = cond(ax_11 - bx)
	SO_14 = SCZO_13 (alias)
	branch Test(LT,SO_14)
	// succ:  4 3
l0C00_0004:		// block 3, pred: 2
	si_15 = Mem12[0x0302:word16]
	ax_16 = Mem12[si_15 + 0x0004:word16]
	v8_17 = Mem12[si_15 + 0x0006:word16] + ax_16
	Mem18[si_15 + 0x0006:word16] = v8_17
	SCZO_19 = cond(v8_17)
	SO_20 = SCZO_19 (alias)
	// succ:  2
l0C00_0012:		// block 4, pred: 2
	ax_21 = loc02_9
	return
	// succ:  5
fn0C00_0000_exit:		// block 5, pred: 4
	// succ: 
Values:
	any: <Mem12>
	ax: <ax>
	bx: <bx>
	cond(ax_11 - bx): <SCZO_13>
	cond(v8_17): <SCZO_19>
	fp: <fp>
	loc02: <loc02>
	Mem0: <Mem0>
	PHI(ax, ax_16): <ax_11>
	PHI(si, si_15): <si_10>
	SCZO: <SCZO>
	SCZO_13: <SO_14>
	SCZO_19: <SO_20>
	si: <si>
	SO: <SO>
	store(Mem12[0x0302:word16]): <si_15>
	store(Mem12[si_15 + 0x0004:word16]): <ax_16>
	store(Mem12[si_15 + 0x0006:word16]) + ax_16: <v8_17>
	v8: <v8>
Identifiers:
	Mem0: <Mem0>
	fp: <fp>
	ax: <ax>
	loc02: <loc02>
	SCZO: <SCZO>
	bx: <bx>
	SO: <SO>
	si: <si>
	v8: <v8>
	loc02_9: <ax>
	si_10: <si_10>
	ax_11: <ax_11>
	Mem12: <Mem12>
	SCZO_13: <SCZO_13>
	SO_14: <SO_14>
	si_15: <si_15>
	ax_16: <ax_16>
	v8_17: <v8_17>
	Mem18: <Mem12>
	SCZO_19: <SCZO_19>
	SO_20: <SO_20>
	ax_21: <ax>
