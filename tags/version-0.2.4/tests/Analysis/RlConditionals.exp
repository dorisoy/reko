// fn0C00_0000 /////////////////////
	LiveOut:  
	MayUseIn:  bp ss ds
	BypassIn: 
	Trashed:   SCZO ax bp al ah
	Preserved:
// fn0C00_0000
void fn0C00_0000()
fn0C00_0000_entry:		// pred:
	// succ:  l0C00_0000
// DataOut: bp ss ds
l0C00_0000:		// pred: fn0C00_0000_entry
	ax = Mem0[ds:0x0100:word16]
	SCZO = cond(Mem0[ds:0x0102:word16] - ax)
	branch Test(EQ,Z) l0C00_000F
	// succ:  l0C00_000A l0C00_000F
// DataOut: bp ss ds
l0C00_000A:		// pred: l0C00_0000
	Mem0[ds:0x0F00:byte] = 0x01
	// succ:  l0C00_000F
// DataOut: bp ss ds
l0C00_000F:		// pred: l0C00_0000 l0C00_000A
	ax = Mem0[ds:0x0104:word16]
	v6 = Mem0[ds:0x0106:word16] - ax
	Mem0[ds:0x0106:word16] = v6
	SCZO = cond(v6)
	branch Test(LE,SZO) l0C00_001E
	// succ:  l0C00_0019 l0C00_001E
// DataOut: bp ss ds
l0C00_0019:		// pred: l0C00_000F
	Mem0[ds:0x0F01:byte] = 0x01
	// succ:  l0C00_001E
// DataOut: bp ss ds
l0C00_001E:		// pred: l0C00_000F l0C00_0019
	ax = Mem0[ds:0x0106:word16]
	ax = ax & Mem0[ds:0x0108:word16]
	SCZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0C00_002D
	// succ:  l0C00_0028 l0C00_002D
// DataOut: bp ss ds
l0C00_0028:		// pred: l0C00_001E
	Mem0[ds:0x0F02:byte] = 0x01
	// succ:  l0C00_002D
// DataOut: bp ss ds
l0C00_002D:		// pred: l0C00_001E l0C00_0028
	ax = Mem0[ds:0x010A:word16]
	SCZO = cond(ax - Mem0[ds:0x010C:word16])
	C = !C
	branch Test(ULT,C) l0C00_003D
	// succ:  l0C00_0038 l0C00_003D
// DataOut: bp ss ds
l0C00_0038:		// pred: l0C00_002D
	Mem0[ds:0x0F03:byte] = 0x01
	// succ:  l0C00_003D
// DataOut: bp ss ds
l0C00_003D:		// pred: l0C00_002D l0C00_0038
	wLoc04 = 0x0003
	call fn0C00_0069 (depth: 4;)
	branch Test(UGE,C) l0C00_0049
	// succ:  l0C00_0044 l0C00_0049
// DataOut: bp ss ds
l0C00_0044:		// pred: l0C00_003D
	Mem0[ds:0x0F04:byte] = 0x01
	// succ:  l0C00_0049
// DataOut: bp ss ds
l0C00_0049:		// pred: l0C00_003D l0C00_0044
	SCZO = cond(Mem0[ds:0x010E:word16] & 0x01FF)
	C = false
	branch Test(EQ,Z) l0C00_0056
	// succ:  l0C00_0051 l0C00_0056
// DataOut: bp ss ds
l0C00_0051:		// pred: l0C00_0049
	Mem0[ds:0x0F05:byte] = 0x01
	// succ:  l0C00_0056
// DataOut: bp ss ds
l0C00_0056:		// pred: l0C00_0049 l0C00_0051
	bp = bp - 0x0010
	SCZO = cond(bp)
	branch Test(LT,SO) l0C00_005F
	// succ:  l0C00_005B l0C00_005F
// DataOut: bp ss ds
l0C00_005B:		// pred: l0C00_0056
	Mem0[ss:bp + 0x0006:byte] = 0x01
	// succ:  l0C00_005F
// DataOut: bp ds
l0C00_005F:		// pred: l0C00_0056 l0C00_005B
	bp = bp + bp
	SCZO = cond(bp)
	branch Test(NO,O) l0C00_0068
	// succ:  l0C00_0063 l0C00_0068
// DataOut: ds
l0C00_0063:		// pred: l0C00_005F
	Mem0[ds:0x0F07:byte] = 0x01
	// succ:  l0C00_0068
// DataOut:
l0C00_0068:		// pred: l0C00_005F l0C00_0063
	return
	// succ:  fn0C00_0000_exit
// DataOut:
fn0C00_0000_exit:		// pred: l0C00_0068
	// succ: 
// DataOut:
// fn0C00_0069 /////////////////////
	LiveOut:   C ss ds
	MayUseIn: 
	BypassIn: 
	Trashed:   SCZO
	Preserved: bp
// fn0C00_0069
void fn0C00_0069()
fn0C00_0069_entry:		// pred:
	// succ:  l0C00_0069
// DataOut: ss ds
// LocalsOut: Stack +0000(16)

l0C00_0069:		// pred: fn0C00_0069_entry
	wLoc04 = bp
	SCZO = cond(wArg00 - 0x0000)
	bp = wLoc04
	return
	// succ:  fn0C00_0069_exit
// DataOut: ss ds// DataOut (flags): C

fn0C00_0069_exit:		// pred: l0C00_0069
	// succ: 
// DataOut: ss ds// DataOut (flags): C

