void fn0C00_0000(Register selector ds)
// MayUse:  ds
// LiveOut:
// Trashed: SCZO ax bx si di al bl ah bh
// Preserved:
// fn0C00_0000
// Mem0:Global memory
// fp:Temporary
// ds:Register ds
// di:Register di
// si:Register si
// ax:Register ax
// bx:Register bx
// return address size: 2
void fn0C00_0000(selector ds)
fn0C00_0000_entry:		// pred:
	// succ:  l0C00_0000
l0C00_0000:		// pred: fn0C00_0000_entry
	di = Mem0[ds:0x0100:word16]
	si = Mem0[ds:di:word16]
	ax = fn0C00_0026(si, ds)
	Mem0[ds:di + 0x0002:word16] = ax
	bx = Mem0[ds:0x0102:word16]
	si = Mem0[ds:bx + 0x0004:word16]
	ax = fn0C00_0026(si, ds)
	Mem0[ds:bx + 0x0008:word16] = ax
	di = Mem0[ds:0x0104:word16]
	si = Mem0[ds:di:word16]
	ax = fn0C00_0033(si, ds)
	Mem0[ds:di + 0x0002:word16] = ax
	return
	// succ:  fn0C00_0000_exit
fn0C00_0000_exit:		// pred: l0C00_0000
	// succ: 
Register word16 fn0C00_0026(Register word16 si, Register selector ds)
// MayUse:  si ds
// LiveOut: ax
// Trashed: SCZO ax al ah
// Preserved: di
// fn0C00_0026
// Mem0:Global memory
// fp:Temporary
// di:Register di
// wLoc04:Local -0004
// ds:Register ds
// v5:Temporary
// SZO:Flags
// si:Register si
// ax:Register ax
// return address size: 2
word16 fn0C00_0026(word16 si, selector ds)
fn0C00_0026_entry:		// pred:
	// succ:  l0C00_0026
l0C00_0026:		// pred: fn0C00_0026_entry
	wLoc04 = di
	di = Mem0[ds:0x0104:word16]
	v5 = Mem0[ds:di + 0x0030:word16] + 0x0001
	Mem0[ds:di + 0x0030:word16] = v5
	SZO = cond(v5)
	ax = fn0C00_0033(si, ds)
	di = wLoc04
	return ax
	// succ:  fn0C00_0026_exit
fn0C00_0026_exit:		// pred: l0C00_0026
	// succ: 
Register word16 fn0C00_0033(Register word16 si, Register selector ds)
// MayUse:  si ds
// LiveOut: ax
// Trashed: SCZO ax al ah
// Preserved:
// fn0C00_0033
// Mem0:Global memory
// fp:Temporary
// si:Register si
// ds:Register ds
// ax:Register ax
// SCZO:Flags
// return address size: 2
word16 fn0C00_0033(word16 si, selector ds)
fn0C00_0033_entry:		// pred:
	// succ:  l0C00_0033
l0C00_0033:		// pred: fn0C00_0033_entry
	ax = Mem0[ds:si:word16]
	ax = ax + ax
	SCZO = cond(ax)
	return ax
	// succ:  fn0C00_0033_exit
fn0C00_0033_exit:		// pred: l0C00_0033
	// succ: 
