// fn0C00_0000 /////////////////////
	LiveOut:  
	MayUseIn:  eax si es ds
	BypassIn: 
	Trashed:   eax ax cx si di al cl ah ch
	Preserved: sp
// fn0C00_0000
void fn0C00_0000()
fn0C00_0000_entry:
// DataOut: eax si es ds
// DataOut (flags): 
// SymbolicIn: sp:fp
l0C00_0000:
	eax = eax + eax * 0x00000004
	Mem0[ds:0x02FC:word32] = eax
	eax = Mem0[ds:si:word32]
	si = si + 0x0004
	Mem0[ds:0x0300:word32] = eax
	eax = Mem0[ds:si:word32]
	si = si + 0x0004
	Mem0[ds:0x0304:word32] = eax
	ax = Mem0[ds:si:word16]
	si = si + 0x0002
	Mem0[ds:0x0308:word16] = ax
	ax = Mem0[ds:si:word16]
	si = si + 0x0002
	Mem0[ds:0x030A:word16] = ax
	call fn0C00_0026 (retsize: 2; depth: 2)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

fn0C00_0000_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp eax:<invalid> si:si + 0x000C ax:<invalid> cx:<invalid> di:<invalid> al:0x00

// fn0C00_0026 /////////////////////
	LiveOut:  
	MayUseIn:  es ds
	BypassIn: 
	Trashed:   ax cx di al cl ch
	Preserved: sp
// fn0C00_0026
void fn0C00_0026()
fn0C00_0026_entry:
// DataOut: es ds
// DataOut (flags): 
// SymbolicIn: sp:fp
l0C00_0026:
	cx = Mem0[ds:0x0400:word16]
	al = 0x00
	di = Mem0[ds:0x0402:word16]
// DataOut: cx di al es ds
// DataOut (flags): 
// SymbolicIn: sp:fp

l0C00_0030:
	branch cx == 0x0000 l0C00_0032
// DataOut: cx di al es ds
// DataOut (flags): 
// SymbolicIn: sp:fp cx:<invalid> al:0x00 di:<invalid>

l0C00_0030_1:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(NE,Z) l0C00_0030
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp cx:<invalid> al:0x00 di:<invalid>
l0C00_0032:
	Mem0[ds:0x0404:word16] = di
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp cx:<invalid> al:0x00 di:<invalid>

fn0C00_0026_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp cx:<invalid> al:0x00 di:<invalid>

