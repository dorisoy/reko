// SegmentedMemoryPointerMock2
void SegmentedMemoryPointerMock2()
SegmentedMemoryPointerMock2_entry:
	// succ:  l1
l1:
	ax = (ds->*bx).w0000;
	ax = (ds->*bx).w0004;
	// succ: 
SegmentedMemoryPointerMock2_exit:

// Equivalence classes ////////////
Eq_2: (segment "Eq_2")
	T_2 (in ds : selector)
Eq_3: (struct "Eq_3" (0 word16 w0000) (4 word16 w0004))
	T_3 (in bx : word16)
// Type Variables ////////////
Globals: (in globals : ptr32)
  Class: Eq_1
  DataType: Eq_1
  OrigDataType: 
T_2: (in ds : selector)
  Class: Eq_2
  DataType: (ptr Eq_2)
  OrigDataType: (ptr (segment))
T_3: (in bx : word16)
  Class: Eq_3
  DataType: (memptr (ptr Eq_2) Eq_3)
  OrigDataType: (memptr T_2 (struct (0 T_6 t0000) (4 T_10 t0004)))
T_4: (in 0x0000 : word16)
  Class: Eq_4
  DataType: word16
  OrigDataType: word16
T_5: (in bx + 0x0000 : word16)
  Class: Eq_5
  DataType: word16
  OrigDataType: word16
T_6: (in Mem0[ds:bx + 0x0000:word16] : word16)
  Class: Eq_6
  DataType: word16
  OrigDataType: word16
T_7: (in ax : word16)
  Class: Eq_6
  DataType: word16
  OrigDataType: word16
T_8: (in 0x0004 : word16)
  Class: Eq_8
  DataType: word16
  OrigDataType: word16
T_9: (in bx + 0x0004 : word16)
  Class: Eq_9
  DataType: word16
  OrigDataType: word16
T_10: (in Mem0[ds:bx + 0x0004:word16] : word16)
  Class: Eq_6
  DataType: word16
  OrigDataType: word16
