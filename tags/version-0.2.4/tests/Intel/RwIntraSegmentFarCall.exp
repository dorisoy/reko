// fn0C00_0000
// Mem0:Global memory
// fp:Temporary
// sp:sp
// ss:ss
// SCZO:Flags
// return address size: 2
void fn0C00_0000()
fn0C00_0000_entry:
	// succ:  l0C00_0000
l0C00_0000:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = 0x0D00
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = 0x0300
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = 0x0001
	sp = sp - 0x0002
	call fn0C00_0020 (retsize: 2;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = 0x0D00
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = 0x0304
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = 0x0002
	call fn0C00_002E (retsize: 4;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	return
	// succ:  fn0C00_0000_exit
fn0C00_0000_exit:
// fn0C00_0020
// Mem0:Global memory
// fp:Temporary
// sp:sp
// bp:bp
// ss:ss
// es:es
// bx:bx
// es_bx:Sequence es:bx
// ax:ax
// v9:Temporary
// SCZO:Flags
// return address size: 4
void fn0C00_0020()
fn0C00_0020_entry:
	// succ:  l0C00_0020
l0C00_0020:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	es_bx = Mem0[ss:bp + 0x0006:ptr32]
	ax = Mem0[ss:bp + 0x000A:word16]
	v9 = Mem0[es:bx:word16] + ax
	Mem0[es:bx:word16] = v9
	SCZO = cond(v9)
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	return
	// succ:  fn0C00_0020_exit
fn0C00_0020_exit:
// fn0C00_002E
// Mem0:Global memory
// fp:Temporary
// sp:sp
// bp:bp
// ss:ss
// es:es
// bx:bx
// es_bx:Sequence es:bx
// ax:ax
// v9:Temporary
// SCZO:Flags
// return address size: 4
void fn0C00_002E()
fn0C00_002E_entry:
	// succ:  l0C00_002E
l0C00_002E:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	es_bx = Mem0[ss:bp + 0x0006:ptr32]
	ax = Mem0[ss:bp + 0x000A:word16]
	v9 = Mem0[es:bx:word16] - ax
	Mem0[es:bx:word16] = v9
	SCZO = cond(v9)
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	return
	// succ:  fn0C00_002E_exit
fn0C00_002E_exit:
