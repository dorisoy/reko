// fn0C00_0000
// Mem0:Global memory
// fp:Temporary
// sp:sp
// bp:bp
// ss:ss
// si:si
// dx:dx
// al:al
// v8:Temporary
// bx:bx
// C:Flags
// v11:Temporary
// cx:cx
// SZO:Flags
// es:es
// di:di
// ds:ds
// ax:ax
// Z:Flags
// eax:eax
// ecx:ecx
// return address size: 2
void fn0C00_0000()
fn0C00_0000_entry:
	// succ:  l0C00_0000
l0C00_0000:
	si = bp + 0x000C
	__outb(dx, al)
	v8 = (bx & 0x0001 << 0x01) != 0x0000
	bx = __ror(bx, 0x01)
	C = v8
	v11 = (cx & 0x0001 << 0x01) != 0x0000
	cx = __rcr(cx, 0x01, C)
	C = v11
	dx = dx + 0x0001
	SZO = cond(dx)
	al = __inb(dx)
	Mem0[es:di:byte] = al
	di = di + 0x0001
	C = __bt(Mem0[ds:0x3000:word16], ax)
	C = __bt(cx, ax)
	C = __bt(cx, 0x02)
	Z = Mem0[ds:si:word16] == 0x0000
	cx = __bsr(Mem0[ds:si:word16])
	Z = eax == 0x00000000
	ecx = __bsr(eax)
	return
	// succ:  fn0C00_0000_exit
fn0C00_0000_exit:
