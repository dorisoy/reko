<?xml version="1.0" encoding="utf-8"?>
<library xmlns="http://schemata.jklnet.org/Decompiler">
<typedef name="size_t">
<uint32 />
</typedef>
<typedef name="wchar_t"><uint16 /></typedef>
<enum name="SA_YesNoMaybe"><item name="SA_No" value="0x0fff0001" /><item name="SA_Maybe" value="0x0fff0010" /><item name="SA_Yes" value="0x0fff0100" /></enum>
typedef enum SA_YesNoMaybe SA_YesNoMaybe;
<enum name="SA_AccessType"><item name="SA_NoAccess" value="0"/><item name="SA_Read" value="1"/><item name="SA_Write" value="2"/><item name="SA_ReadWrite" value="3"/></enum>
typedef enum SA_AccessType SA_AccessType;
[source_annotation_attribute( SA_Parameter )] struct PreAttribute {
<field name="Deref"><uint32 /></field>
<field name="Valid"><SA_YesNoMaybe /></field>
<field name="Null"><SA_YesNoMaybe /></field>
<field name="Tainted"><SA_YesNoMaybe /></field>
<field name="Access"><SA_AccessType /></field>
<field name="ValidElementsConst"><size_t /></field>
<field name="ValidBytesConst"><size_t /></field>
<field name="ValidElements"><ptr const="true"><wchar_t /></ptr></field>
<field name="ValidBytes"><ptr const="true"><wchar_t /></ptr></field>
<field name="ValidElementsLength"><ptr const="true"><wchar_t /></ptr></field>
<field name="ValidBytesLength"><ptr const="true"><wchar_t /></ptr></field>
<field name="WritableElementsConst"><size_t /></field>
<field name="WritableBytesConst"><size_t /></field>
<field name="WritableElements"><ptr const="true"><wchar_t /></ptr></field>
<field name="WritableBytes"><ptr const="true"><wchar_t /></ptr></field>
<field name="WritableElementsLength"><ptr const="true"><wchar_t /></ptr></field>
<field name="WritableBytesLength"><ptr const="true"><wchar_t /></ptr></field>
<field name="ElementSizeConst"><size_t /></field>
<field name="ElementSize"><ptr const="true"><wchar_t /></ptr></field>
<field name="NullTerminated"><SA_YesNoMaybe /></field>
<field name="Condition"><ptr const="true"><wchar_t /></ptr></field>
};
[source_annotation_attribute( SA_Parameter|SA_ReturnValue )] 
struct PostAttribute {
<field name="Deref"><uint32 /></field>
<field name="Valid"><SA_YesNoMaybe /></field>
<field name="Null"><SA_YesNoMaybe /></field>
<field name="Tainted"><SA_YesNoMaybe /></field>
<field name="Access"><SA_AccessType /></field>
<field name="ValidElementsConst"><size_t /></field>
<field name="ValidBytesConst"><size_t /></field>
<field name="ValidElements"><ptr const="true"><wchar_t /></ptr></field>
<field name="ValidBytes"><ptr const="true"><wchar_t /></ptr></field>
<field name="ValidElementsLength"><ptr const="true"><wchar_t /></ptr></field>
<field name="ValidBytesLength"><ptr const="true"><wchar_t /></ptr></field>
<field name="WritableElementsConst"><size_t /></field>
<field name="WritableBytesConst"><size_t /></field>
<field name="WritableElements"><ptr const="true"><wchar_t /></ptr></field>
<field name="WritableBytes"><ptr const="true"><wchar_t /></ptr></field>
<field name="WritableElementsLength"><ptr const="true"><wchar_t /></ptr></field>
<field name="WritableBytesLength"><ptr const="true"><wchar_t /></ptr></field>
<field name="ElementSizeConst"><size_t /></field>
<field name="ElementSize"><ptr const="true"><wchar_t /></ptr></field>
<field name="NullTerminated"><SA_YesNoMaybe /></field>
<field name="MustCheck"><SA_YesNoMaybe /></field>
<field name="Condition"><ptr const="true"><wchar_t /></ptr></field>
};
[source_annotation_attribute( SA_Parameter )] 
struct FormatStringAttribute {
<field name="Style"><ptr const="true"><wchar_t /></ptr></field>
<field name="UnformattedAlternative"><ptr const="true"><wchar_t /></ptr></field>
};
[source_annotation_attribute( SA_ReturnValue )] struct InvalidCheckAttribute {
<field name="Value"><long /></field>
};
[source_annotation_attribute( SA_Method )] struct SuccessAttribute {
<field name="Condition"><ptr const="true"><wchar_t /></ptr></field>
};
[source_annotation_attribute( SA_Parameter )] struct PreBoundAttribute {
<field name="Deref"><uint32 /></field>
};
[source_annotation_attribute( SA_Parameter|SA_ReturnValue )] struct PostBoundAttribute {
<field name="Deref"><uint32 /></field>
};
[source_annotation_attribute( SA_Parameter )] struct PreRangeAttribute {
<field name="Deref"><uint32 /></field>
<field name="MinVal"><ptr const="true"><char /></ptr></field>
<field name="MaxVal"><ptr const="true"><char /></ptr></field>
};
[source_annotation_attribute( SA_Parameter|SA_ReturnValue )]
struct PostRangeAttribute {
<field name="Deref"><uint32 /></field>
<field name="MinVal"><ptr const="true"><char /></ptr></field>
<field name="MaxVal"><ptr const="true"><char /></ptr></field>
};
<typedef name="SA_Pre"><struct name="PreAttribute" /></typedef>
<typedef name="PreAttribute"><struct name="PreAttribute" /></typedef>
<typedef name="SA_Post"><struct name="PostAttribute" /></typedef>
<typedef name="PostAttribute"><struct name="PostAttribute" /></typedef>
<typedef name="SA_FormatString">
<struct name="FormatStringAttribute"/> </typedef>
<typedef name="SA_InvalidCheck"><struct name="InvalidCheckAttribute" /></typedef>
<typedef name="SA_Success"><struct name="SuccessAttribute" /></typedef>
<typedef name="SA_PreBound"><struct name="PreBoundAttribute" /></typedef>
<typedef name="SA_PostBound"><struct name="PostBoundAttribute" /></typedef>
<typedef name="SA_PreRange"><struct name="PreRangeAttribute" /></typedef>
<typedef name="SA_PostRange"><struct name="PostRangeAttribute" /></typedef>
<typedef name="uintptr_t"><uint32 __w64="true"/></typedef>
<typedef name="va_list"><ptr><char /></ptr></typedef>
<typedef name="rsize_t"><size_t /></typedef>
<typedef name="intptr_t"><int32 __w64="true"/></typedef>
<typedef name="ptrdiff_t"><int32 __w64="true"/></typedef>
<typedef name="wint_t"><uint16 /></typedef>
<typedef name="wctype_t"><uint16 /></typedef>
<typedef name="errno_t"><int32 /></typedef>
<typedef name="__time32_t"><long __w64="true"/></typedef>
<typedef name="__time64_t"><__int64 /></typedef>
<typedef name="time_t"><__time64_t /></typedef>
<procedure name="_invalid_parameter_noinfo"><signature convention="__cdecl" /></procedure>
__declspec(noreturn) void __cdecl _invalid_parameter_noinfo_noreturn();
__declspec(noreturn) void __cdecl _invoke_watson( const wchar_t *, const wchar_t *, const wchar_t *, uint32, uintptr_t);
<struct name="threadlocaleinfostruct"/>
<struct name="threadmbcinfostruct"/>
<typedef name="pthreadlocinfo"><ptr><threadlocaleinfostruct /></ptr></typedef>
<typedef name="pthreadmbcinfo"><ptr><threadmbcinfostruct /></ptr></typedef>
<struct name="__lc_time_data" />
typedef struct localeinfo_struct {
<field name="locinfo"><pthreadlocinfo /></field>
<field name="mbcinfo"><pthreadmbcinfo /></field>
} _locale_tstruct, *_locale_t;
typedef struct tagLC_ID {
<field name="wLanguage"><uint16 /></field>
<field name="wCountry"><uint16 /></field>
<field name="wCodePage"><uint16 /></field>
} LC_ID, *LPLC_ID;
typedef struct threadlocaleinfostruct {
<field name="refcount"><int32 /></field>
<field name="lc_codepage"><uint32 /></field>
<field name="lc_collate_cp"><uint32 /></field>
<field name="lc_handle"><arr length="6"><uint32 /></arr></field>
<field name="lc_id"><arr length="6"><LC_ID /></arr></field>
struct {
<field name="locale"><ptr><char /></ptr></field>
<field name="wlocale"><ptr><wchar_t /></ptr></field>
<field name="refcount"><ptr><int32 /></ptr></field>
<field name="wrefcount"><ptr><int32 /></ptr></field>
} lc_category[6];
<field name="lc_clike"><int32 /></field>
<field name="mb_cur_max"><int32 /></field>
<field name="lconv_intl_refcount"><ptr><int32 /></ptr></field>
<field name="lconv_num_refcount"><ptr><int32 /></ptr></field>
<field name="lconv_mon_refcount"><ptr><int32 /></ptr></field>
struct lconv * lconv;
<field name="ctype1_refcount"><ptr><int32 /></ptr></field>
<field name="ctype1"><ptr><uint16 /></ptr></field>
<field name="pctype"><ptr const="true"><uint16 /></ptr></field>
<field name="pclmap"><ptr const="true"><byte /></ptr></field>
<field name="pcumap"><ptr const="true"><byte /></ptr></field>
struct __lc_time_data * lc_time_curr;
} threadlocinfo;
typedef enum _EXCEPTION_DISPOSITION {
ExceptionContinueExecution, ExceptionContinueSearch, ExceptionNestedException, ExceptionCollidedUnwind } EXCEPTION_DISPOSITION;
<struct name="_EXCEPTION_RECORD" />
<struct name="_CONTEXT" />
EXCEPTION_DISPOSITION __cdecl _except_handler(struct _EXCEPTION_RECORD *_ExceptionRecord, void * _EstablisherFrame, struct _CONTEXT *_ContextRecord, void * _DispatcherContext );
uint32 __cdecl _exception_code();
void * __cdecl _exception_info();
int32 __cdecl _abnormal_termination();
<typedef name="ULONG"><uint32 /></typedef>
<typedef name="PULONG"><ptr><ULONG /></ptr></typedef>
<typedef name="USHORT"><uint16 /></typedef>
<typedef name="PUSHORT"><ptr><USHORT /></ptr></typedef>
<typedef name="UCHAR"><byte /></typedef> 
<typedef name="PUCHAR"><ptr><UCHAR /></ptr></typedef>
<typedef name="PSZ"><ptr><char /></ptr></typedef>
<typedef name="DWORD"><uint32 /></typedef>
<typedef name="BOOL"><int32 /></typedef>
<typedef name="BYTE"><byte /></typedef>
<typedef name="WORD"><uint16 /></typedef>
<typedef name="FLOAT"><float /></typedef>
<typedef name="PFLOAT"><ptr><FLOAT /></ptr></typedef>
<typedef name="PBOOL"><ptr><BOOL /></ptr></typedef>
<typedef name="LPBOOL"><ptr><BOOL /></ptr></typedef>
<typedef name="PBYTE"><ptr><BYTE /></ptr></typedef>
<typedef name="LPBYTE"><ptr><BYTE /></ptr></typedef>
<typedef name="PINT"><ptr><int32 /></ptr></typedef>
<typedef name="LPINT"><ptr><int32 /></ptr></typedef>
<typedef name="PWORD"><ptr><WORD /></ptr></typedef>
<typedef name="LPWORD"><ptr><WORD /></ptr></typedef>
<typedef name="LPLONG"><ptr><long /></ptr></typedef>
<typedef name="PDWORD"><ptr><DWORD /></ptr></typedef>
<typedef name="LPDWORD"><ptr><DWORD /></ptr></typedef>
<typedef name="LPVOID"><ptr><void /></ptr></typedef>
<typedef name="LPCVOID"><ptr const="true"><void /></ptr></typedef>
<typedef name="INT"><int32 /></typedef>
<typedef name="UINT"><uint32 /></typedef>
<typedef name="PUINT"><ptr><uint32 /></ptr></typedef>
<procedure name="__pctype_func"><signature convention="__cdecl"><return><ptr><uint16/></ptr></return></signature></procedure>
<data name="_pctype"><ptr const="true"><uint16 /></ptr></data>
<data name="_wctype"><arr const="true"><uint16 /></arr></data>
<procedure name="__pwctype_func"><signature convention="__cdecl"><return><ptr><wctype_t/></ptr></return></signature></procedure>
<data name="_pwctype"><ptr const="true"><wctype_t /></ptr></data>
int32 __cdecl _isctype( int32 _C, int32 _Type);
int32 __cdecl _isctype_l( int32 _C, int32 _Type, _locale_t _Locale);
int32 __cdecl isalpha( int32 _C);
int32 __cdecl _isalpha_l( int32 _C, _locale_t _Locale);
int32 __cdecl isupper( int32 _C);
int32 __cdecl _isupper_l( int32 _C, _locale_t _Locale);
int32 __cdecl islower( int32 _C);
int32 __cdecl _islower_l( int32 _C, _locale_t _Locale);
int32 __cdecl isdigit( int32 _C);
int32 __cdecl _isdigit_l( int32 _C, _locale_t _Locale);
int32 __cdecl isxdigit( int32 _C);
int32 __cdecl _isxdigit_l( int32 _C, _locale_t _Locale);
int32 __cdecl isspace( int32 _C);
int32 __cdecl _isspace_l( int32 _C, _locale_t _Locale);
int32 __cdecl ispunct( int32 _C);
int32 __cdecl _ispunct_l( int32 _C, _locale_t _Locale);
int32 __cdecl isalnum( int32 _C);
int32 __cdecl _isalnum_l( int32 _C, _locale_t _Locale);
int32 __cdecl isprint( int32 _C);
int32 __cdecl _isprint_l( int32 _C, _locale_t _Locale);
int32 __cdecl isgraph( int32 _C);
int32 __cdecl _isgraph_l( int32 _C, _locale_t _Locale);
int32 __cdecl iscntrl( int32 _C);
int32 __cdecl _iscntrl_l( int32 _C, _locale_t _Locale);
int32 __cdecl toupper( int32 _C);
int32 __cdecl tolower( int32 _C);
int32 __cdecl _tolower( int32 _C);
int32 __cdecl _tolower_l( int32 _C, _locale_t _Locale);
int32 __cdecl _toupper( int32 _C);
int32 __cdecl _toupper_l( int32 _C, _locale_t _Locale);
int32 __cdecl __isascii( int32 _C);
int32 __cdecl __toascii( int32 _C);
int32 __cdecl __iscsymf( int32 _C);
int32 __cdecl __iscsym( int32 _C);
int32 __cdecl iswalpha( wint_t _C);
int32 __cdecl _iswalpha_l( wint_t _C, _locale_t _Locale);
int32 __cdecl iswupper( wint_t _C);
int32 __cdecl _iswupper_l( wint_t _C, _locale_t _Locale);
int32 __cdecl iswlower( wint_t _C);
int32 __cdecl _iswlower_l( wint_t _C, _locale_t _Locale);
int32 __cdecl iswdigit( wint_t _C);
int32 __cdecl _iswdigit_l( wint_t _C, _locale_t _Locale);
int32 __cdecl iswxdigit( wint_t _C);
int32 __cdecl _iswxdigit_l( wint_t _C, _locale_t _Locale);
int32 __cdecl iswspace( wint_t _C);
int32 __cdecl _iswspace_l( wint_t _C, _locale_t _Locale);
int32 __cdecl iswpunct( wint_t _C);
int32 __cdecl _iswpunct_l( wint_t _C, _locale_t _Locale);
int32 __cdecl iswalnum( wint_t _C);
int32 __cdecl _iswalnum_l( wint_t _C, _locale_t _Locale);
int32 __cdecl iswprint( wint_t _C);
int32 __cdecl _iswprint_l( wint_t _C, _locale_t _Locale);
int32 __cdecl iswgraph( wint_t _C);
int32 __cdecl _iswgraph_l( wint_t _C, _locale_t _Locale);
int32 __cdecl iswcntrl( wint_t _C);
int32 __cdecl _iswcntrl_l( wint_t _C, _locale_t _Locale);
int32 __cdecl iswascii( wint_t _C);
int32 __cdecl isleadbyte( int32 _C);
int32 __cdecl _isleadbyte_l( int32 _C, _locale_t _Locale);
wint_t __cdecl towupper( wint_t _C);
wint_t __cdecl _towupper_l( wint_t _C, _locale_t _Locale);
wint_t __cdecl towlower( wint_t _C);
wint_t __cdecl _towlower_l( wint_t _C, _locale_t _Locale);
int32 __cdecl iswctype( wint_t _C, wctype_t _Type);
int32 __cdecl _iswctype_l( wint_t _C, wctype_t _Type, _locale_t _Locale);
int32 __cdecl __iswcsymf( wint_t _C);
int32 __cdecl _iswcsymf_l( wint_t _C, _locale_t _Locale);
int32 __cdecl __iswcsym( wint_t _C);
int32 __cdecl _iswcsym_l( wint_t _C, _locale_t _Locale);
int32 __cdecl is_wctype( wint_t _C, wctype_t _Type);
extern int32 __mb_cur_max;
int32 __cdecl ___mb_cur_max_func();
int32 __cdecl ___mb_cur_max_l_func(_locale_t);
<typedef name="POINTER_64_INT"><uint32 /></typedef>
typedef int8 INT8, *PINT8;
typedef int16 INT16, *PINT16;
typedef int32 INT32, *PINT32;
typedef int64 INT64, *PINT64;
<typedef name="UINT8"><byte /></typedef>
typedef byte *PUINT8;
<typedef name="UINT16"><uint16 /></typedef>
<typedef name="PUINT16"><ptr><uint16 /></ptr></typedef>
<typedef name="UINT32"><uint32 /></typedef>
typedef uint32 *PUINT32;
typedef uint64 UINT64, *PUINT64;
typedef int32 LONG32, *PLONG32;
<typedef name="ULONG32"><uint32 /></typedef>
typedef uint32 *PULONG32;
<typedef name="DWORD32"><uint32 /></typedef>
typedef uint32 *PDWORD32;
<typedef name="INT_PTR"><int32 __w64="true"/></typedef>
<typedef name="PINT_PTR"><ptr><int32 __w64="true"/></ptr></typedef>
<typedef name="UINT_PTR"><uint32 __w64="true"/></typedef>
<typedef name="PUINT_PTR"><ptr><uint32 __w64="true"/></ptr></typedef>
<typedef name="LONG_PTR"><long __w64="true"/></typedef>
<typedef name="PLONG_PTR"><ptr><long __w64="true"/></ptr></typedef>
<typedef name="ULONG_PTR"><uint32 __w64="true"/></typedef>
<typedef name="PULONG_PTR"><ptr><uint32 __w64="true"/></ptr></typedef>
<typedef name="UHALF_PTR"><uint16 /></typedef>
<typedef name="PUHALF_PTR"><ptr><uint16 /></ptr></typedef>
<typedef name="HALF_PTR"><short /></typedef>
<typedef name="PHALF_PTR"><ptr><short /></ptr></typedef>
<typedef name="SHANDLE_PTR"><long __w64="true"/></typedef>
<typedef name="HANDLE_PTR"><uint32 __w64="true"/></typedef>
<typedef name="SIZE_T"><ULONG_PTR /></typedef>
<typedef name="PSIZE_T"><ptr><ULONG_PTR /></ptr></typedef>
<typedef name="SSIZE_T"><LONG_PTR /></typedef>
<typedef name="PSSIZE_T"><ptr><LONG_PTR /></ptr></typedef>
<typedef name="DWORD_PTR"><ULONG_PTR /></typedef>
<typedef name="PDWORD_PTR"><ptr><ULONG_PTR /></ptr></typedef>
<typedef name="LONG64"><__int64 /></typedef>
<typedef name="PLONG64"><ptr><__int64 /></ptr></typedef>
typedef uint64 ULONG64, *PULONG64;
typedef uint64 DWORD64, *PDWORD64;
<typedef name="KAFFINITY"><ULONG_PTR /></typedef>
<typedef name="PKAFFINITY"><ptr><KAFFINITY /></ptr></typedef>
<typedef name="PVOID"><ptr><void /></ptr></typedef>
typedef void * __ptr64 PVOID64;
<typedef name="CHAR"><char /></typedef>
<typedef name="SHORT"><short /></typedef>
<typedef name="LONG"><long /></typedef>
<typedef name="INT"><int32 /></typedef>
<typedef name="WCHAR"><wchar_t /></typedef>
typedef WCHAR *PWCHAR, *LPWCH, *PWCH;
typedef const WCHAR *LPCWCH, *PCWCH;
typedef WCHAR *NWPSTR, *LPWSTR, *PWSTR;
<typedef name="PZPWSTR"><ptr><PWSTR /></ptr></typedef>
<typedef name="PCZPWSTR"><ptr const="true"><PWSTR /></ptr></typedef>
typedef WCHAR *LPUWSTR, *PUWSTR;
typedef const WCHAR *LPCWSTR, *PCWSTR;
<typedef name="PZPCWSTR"><ptr><PCWSTR /></ptr></typedef>
typedef const WCHAR *LPCUWSTR, *PCUWSTR;
<typedef name="PZZWSTR"><ptr><WCHAR /></ptr></typedef>
<typedef name="PCZZWSTR"><ptr const="true"><WCHAR /></ptr></typedef>
<typedef name="PUZZWSTR"><ptr><WCHAR /></ptr></typedef>
<typedef name="PCUZZWSTR"><ptr const="true"><WCHAR /></ptr></typedef>
<typedef name="PNZWCH"><ptr><WCHAR /></ptr></typedef>
<typedef name="PCNZWCH"><ptr const="true"><WCHAR /></ptr></typedef>
<typedef name="PUNZWCH"><ptr><WCHAR /></ptr></typedef>
<typedef name="PCUNZWCH"><ptr const="true"><WCHAR /></ptr></typedef>
typedef const WCHAR *LPCWCHAR, *PCWCHAR;
typedef const WCHAR *LPCUWCHAR, *PCUWCHAR;
<typedef name="UCSCHAR"><uint32 /></typedef>
<typedef name="PUCSCHAR"><ptr><UCSCHAR /></ptr></typedef>
<typedef name="PCUCSCHAR"><ptr const="true"><UCSCHAR /></ptr></typedef>
<typedef name="PUCSSTR"><ptr><UCSCHAR /></ptr></typedef>
<typedef name="PUUCSSTR"><ptr><UCSCHAR /></ptr></typedef>
<typedef name="PCUCSSTR"><ptr const="true"><UCSCHAR /></ptr></typedef>
<typedef name="PCUUCSSTR"><ptr const="true"><UCSCHAR /></ptr></typedef>
<typedef name="PUUCSCHAR"><ptr><UCSCHAR /></ptr></typedef>
<typedef name="PCUUCSCHAR"><ptr const="true"><UCSCHAR /></ptr></typedef>
typedef CHAR *PCHAR, *LPCH, *PCH;
typedef const CHAR *LPCCH, *PCCH;
typedef CHAR *NPSTR, *LPSTR, *PSTR;
<typedef name="PZPSTR"><ptr><PSTR /></ptr></typedef>
<typedef name="PCZPSTR"><ptr const="true"><PSTR /></ptr></typedef>
typedef const CHAR *LPCSTR, *PCSTR;
<typedef name="PZPCSTR"><ptr><PCSTR /></ptr></typedef>
<typedef name="PZZSTR"><ptr><CHAR /></ptr></typedef>
<typedef name="PCZZSTR"><ptr const="true"><CHAR /></ptr></typedef>
<typedef name="PNZCH"><ptr><CHAR /></ptr></typedef>
<typedef name="PCNZCH"><ptr const="true"><CHAR /></ptr></typedef>
<typedef name="TCHAR"><char /></typedef>
<typedef name="PTCHAR"><ptr><char /></ptr></typedef>
typedef byte TBYTE, *PTBYTE ;
<typedef name="LPTCH"><LPCH /></typedef>
<typedef name="PTCH"><LPCH /></typedef>
<typedef name="LPCTCH"><LPCCH /></typedef>
<typedef name="PCTCH"><LPCCH /></typedef>
<typedef name="PTSTR"><LPSTR /></typedef>
<typedef name="LPTSTR"><LPSTR /></typedef>
<typedef name="PUTSTR"><LPSTR /></typedef>
<typedef name="LPUTSTR"><LPSTR /></typedef>
<typedef name="PCTSTR"><LPCSTR /></typedef>
<typedef name="LPCTSTR"><LPCSTR /></typedef>
<typedef name="PCUTSTR"><LPCSTR /></typedef>
<typedef name="LPCUTSTR"><LPCSTR /></typedef>
<typedef name="PZZTSTR"><PZZSTR /></typedef>
<typedef name="PUZZTSTR"><PZZSTR /></typedef>
<typedef name="PCZZTSTR"><PCZZSTR /></typedef>
<typedef name="PCUZZTSTR"><PCZZSTR /></typedef>
<typedef name="PNZTCH"><PNZCH /></typedef>
<typedef name="PUNZTCH"><PNZCH /></typedef>
<typedef name="PCNZTCH"><PCNZCH /></typedef>
<typedef name="PCUNZTCH"><PCNZCH /></typedef>
<typedef name="PSHORT"><ptr><SHORT /></ptr></typedef>
<typedef name="PLONG"><ptr><LONG /></ptr></typedef>
typedef struct _PROCESSOR_NUMBER {
<field name="Group"><WORD /></field>
<field name="Number"><BYTE /></field>
<field name="Reserved"><BYTE /></field>
} PROCESSOR_NUMBER, *PPROCESSOR_NUMBER;
typedef struct _GROUP_AFFINITY {
<field name="Mask"><KAFFINITY /></field>
<field name="Group"><WORD /></field>
<field name="Reserved"><arr length="3"><WORD /></arr></field>
} GROUP_AFFINITY, *PGROUP_AFFINITY;
<typedef name="HANDLE"><ptr><void /></ptr></typedef>
<typedef name="PHANDLE"><ptr><HANDLE /></ptr></typedef>
<typedef name="FCHAR"><BYTE /></typedef>
<typedef name="FSHORT"><WORD /></typedef>
<typedef name="FLONG"><DWORD /></typedef>
<typedef name="HRESULT"><long /></typedef>
<typedef name="CCHAR"><char /></typedef>
<typedef name="LCID"><DWORD /></typedef>
<typedef name="PLCID"><PDWORD /></typedef>
<typedef name="LANGID"><WORD /></typedef>
typedef struct _FLOAT128 {
<field name="LowPart"><__int64 /></field>
<field name="HighPart"><__int64 /></field>
} FLOAT128;
<typedef name="PFLOAT128"><ptr><FLOAT128 /></ptr></typedef>
<typedef name="LONGLONG"><__int64 /></typedef>
<typedef name="ULONGLONG"><uint64 /></typedef>
<typedef name="PLONGLONG"><ptr><LONGLONG /></ptr></typedef>
<typedef name="PULONGLONG"><ptr><ULONGLONG /></ptr></typedef>
<typedef name="USN"><LONGLONG /></typedef>
typedef union _LARGE_INTEGER {
struct {
<field name="LowPart"><DWORD /></field>
<field name="HighPart"><LONG /></field>
} ;
struct {
<field name="LowPart"><DWORD /></field>
<field name="HighPart"><LONG /></field>
} u;
<field name="QuadPart"><LONGLONG /></field>
} LARGE_INTEGER;
<typedef name="PLARGE_INTEGER"><ptr><LARGE_INTEGER /></ptr></typedef>
typedef union _ULARGE_INTEGER {
struct {
<field name="LowPart"><DWORD /></field>
<field name="HighPart"><DWORD /></field>
} ;
struct {
<field name="LowPart"><DWORD /></field>
<field name="HighPart"><DWORD /></field>
} u;
<field name="QuadPart"><ULONGLONG /></field>
} ULARGE_INTEGER;
<typedef name="PULARGE_INTEGER"><ptr><ULARGE_INTEGER /></ptr></typedef>
typedef struct _LUID {
<field name="LowPart"><DWORD /></field>
<field name="HighPart"><LONG /></field>
} LUID, *PLUID;
<typedef name="DWORDLONG"><ULONGLONG /></typedef>
<typedef name="PDWORDLONG"><ptr><DWORDLONG /></ptr></typedef>
ULONGLONG __stdcall Int64ShllMod32(ULONGLONG Value, DWORD ShiftCount );
LONGLONG __stdcall Int64ShraMod32(LONGLONG Value, DWORD ShiftCount );
ULONGLONG __stdcall Int64ShrlMod32(ULONGLONG Value, DWORD ShiftCount );
__inline ULONGLONG __stdcall Int64ShllMod32(ULONGLONG Value, DWORD ShiftCount ) {
__asm {
mov ecx, ShiftCount mov eax, dword ptr [Value] mov edx, dword ptr [Value+4] shld edx, eax, cl shl eax, cl } } __inline LONGLONG __stdcall Int64ShraMod32(LONGLONG Value, DWORD ShiftCount ) {
__asm {
mov ecx, ShiftCount mov eax, dword ptr [Value] mov edx, dword ptr [Value+4] shrd eax, edx, cl sar edx, cl } } __inline ULONGLONG __stdcall Int64ShrlMod32(ULONGLONG Value, DWORD ShiftCount ) {
__asm {
mov ecx, ShiftCount mov eax, dword ptr [Value] mov edx, dword ptr [Value+4] shrd eax, edx, cl shr edx, cl } } uint32 __cdecl _rotl(uint32 Value, int32 Shift );
uint64 __cdecl _rotl64(uint64 Value, int32 Shift );
uint32 __cdecl _rotr(uint32 Value, int32 Shift );
uint64 __cdecl _rotr64(uint64 Value, int32 Shift );
<typedef name="BOOLEAN"><BYTE /></typedef>
<typedef name="PBOOLEAN"><ptr><BOOLEAN /></ptr></typedef>
typedef struct _LIST_ENTRY {
struct _LIST_ENTRY *Flink;
struct _LIST_ENTRY *Blink;
} LIST_ENTRY, *PLIST_ENTRY, * PRLIST_ENTRY;
typedef struct _SINGLE_LIST_ENTRY {
struct _SINGLE_LIST_ENTRY *Next;
} SINGLE_LIST_ENTRY, *PSINGLE_LIST_ENTRY;
typedef struct LIST_ENTRY32 {
<field name="Flink"><DWORD /></field>
<field name="Blink"><DWORD /></field>
} LIST_ENTRY32;
<typedef name="PLIST_ENTRY32"><ptr><LIST_ENTRY32 /></ptr></typedef>
typedef struct LIST_ENTRY64 {
<field name="Flink"><ULONGLONG /></field>
<field name="Blink"><ULONGLONG /></field>
} LIST_ENTRY64;
<typedef name="PLIST_ENTRY64"><ptr><LIST_ENTRY64 /></ptr></typedef>
typedef struct _GUID {
<field name="Data1"><uint32 /></field>
<field name="Data2"><uint16 /></field>
<field name="Data3"><uint16 /></field>
<field name="Data4"><arr length=" 8 "><byte /></arr></field>
} GUID;
<typedef name="LPGUID"><ptr><GUID /></ptr></typedef>
<typedef name="LPCGUID"><ptr const="true"><GUID /></ptr></typedef>
<typedef name="IID"><GUID /></typedef>
<typedef name="LPIID"><ptr><IID /></ptr></typedef>
<typedef name="CLSID"><GUID /></typedef>
<typedef name="LPCLSID"><ptr><CLSID /></ptr></typedef>
<typedef name="FMTID"><GUID /></typedef>
<typedef name="LPFMTID"><ptr><FMTID /></ptr></typedef>
void * __cdecl _memccpy( void * _Dst, const void * _Src, int32 _Val, size_t _MaxCount);
void * __cdecl memchr( const void * _Buf, int32 _Val, size_t _MaxCount);
int32 __cdecl _memicmp( const void * _Buf1, const void * _Buf2, size_t _Size);
int32 __cdecl _memicmp_l( const void * _Buf1, const void * _Buf2, size_t _Size, _locale_t _Locale);
int32 __cdecl memcmp( const void * _Buf1, const void * _Buf2, size_t _Size);
void * __cdecl memcpy( void * _Dst, const void * _Src, size_t _Size);
errno_t __cdecl memcpy_s( void * _Dst, rsize_t _DstSize, const void * _Src, rsize_t _MaxCount);
void * __cdecl memset( void * _Dst, int32 _Val, size_t _Size);
void * __cdecl memccpy( void * _Dst, const void * _Src, int32 _Val, size_t _Size);
int32 __cdecl memicmp( const void * _Buf1, const void * _Buf2, size_t _Size);
errno_t __cdecl _strset_s( char * _Dst, size_t _DstSize, int32 _Value);
char * __cdecl _strset( char *_Dest, int32 _Value);
errno_t __cdecl strcpy_s( char * _Dst, rsize_t _SizeInBytes, const char * _Src);
char * __cdecl strcpy( char *_Dest, const char * _Source);
errno_t __cdecl strcat_s( char * _Dst, rsize_t _SizeInBytes, const char * _Src);
char * __cdecl strcat( char *_Dest, const char * _Source);
int32 __cdecl strcmp( const char * _Str1, const char * _Str2);
size_t __cdecl strlen( const char * _Str);
size_t __cdecl strnlen( const char * _Str, size_t _MaxCount);
static __inline size_t __cdecl strnlen_s( const char * _Str, size_t _MaxCount) {
return (_Str==0) ? 0 : strnlen(_Str, _MaxCount);
} errno_t __cdecl memmove_s( void * _Dst, rsize_t _DstSize, const void * _Src, rsize_t _MaxCount);
void * __cdecl memmove( void * _Dst, const void * _Src, size_t _Size);
char * __cdecl _strdup( const char * _Src);
char * __cdecl strchr( const char * _Str, int32 _Val);
int32 __cdecl _stricmp( const char * _Str1, const char * _Str2);
int32 __cdecl _strcmpi( const char * _Str1, const char * _Str2);
int32 __cdecl _stricmp_l( const char * _Str1, const char * _Str2, _locale_t _Locale);
int32 __cdecl strcoll( const char * _Str1, const char * _Str2);
int32 __cdecl _strcoll_l( const char * _Str1, const char * _Str2, _locale_t _Locale);
int32 __cdecl _stricoll( const char * _Str1, const char * _Str2);
int32 __cdecl _stricoll_l( const char * _Str1, const char * _Str2, _locale_t _Locale);
int32 __cdecl _strncoll(const char * _Str1, const char * _Str2, size_t _MaxCount);
int32 __cdecl _strncoll_l( const char * _Str1, const char * _Str2, size_t _MaxCount, _locale_t _Locale);
int32 __cdecl _strnicoll(const char * _Str1, const char * _Str2, size_t _MaxCount);
int32 __cdecl _strnicoll_l( const char * _Str1, const char * _Str2, size_t _MaxCount, _locale_t _Locale);
size_t __cdecl strcspn( const char * _Str, const char * _Control);
char * __cdecl _strerror( const char * _ErrMsg);
errno_t __cdecl _strerror_s( char * _Buf, size_t _SizeInBytes, const char * _ErrMsg);
char * __cdecl strerror( int32);
errno_t __cdecl strerror_s( char * _Buf, size_t _SizeInBytes, int32 _ErrNum);
errno_t __cdecl _strlwr_s( char * _Str, size_t _Size);
char * __cdecl _strlwr( char *_String);
errno_t __cdecl _strlwr_s_l( char * _Str, size_t _Size, _locale_t _Locale);
char * __cdecl _strlwr_l( char *_String, _locale_t _Locale);
errno_t __cdecl strncat_s( char * _Dst, rsize_t _SizeInBytes, const char * _Src, rsize_t _MaxCount);
char * __cdecl strncat( char *_Dest, const char * _Source, size_t _Count);
int32 __cdecl strncmp( const char * _Str1, const char * _Str2, size_t _MaxCount);
int32 __cdecl _strnicmp( const char * _Str1, const char * _Str2, size_t _MaxCount);
int32 __cdecl _strnicmp_l( const char * _Str1, const char * _Str2, size_t _MaxCount, _locale_t _Locale);
errno_t __cdecl strncpy_s( char * _Dst, rsize_t _SizeInBytes, const char * _Src, rsize_t _MaxCount);
char * __cdecl strncpy( char *_Dest, const char * _Source, size_t _Count);
errno_t __cdecl _strnset_s( char * _Str, size_t _SizeInBytes, int32 _Val, size_t _MaxCount);
char * __cdecl _strnset( char *_Dest, int32 _Val, size_t _Count);
char * __cdecl strpbrk( const char * _Str, const char * _Control);
char * __cdecl strrchr( const char * _Str, int32 _Ch);
char * __cdecl _strrev( char * _Str);
size_t __cdecl strspn( const char * _Str, const char * _Control);
char * __cdecl strstr( const char * _Str, const char * _SubStr);
char * __cdecl strtok( char * _Str, const char * _Delim);
char * __cdecl strtok_s( char * _Str, const char * _Delim, char ** _Context);
errno_t __cdecl _strupr_s( char * _Str, size_t _Size);
char * __cdecl _strupr( char *_String);
errno_t __cdecl _strupr_s_l( char * _Str, size_t _Size, _locale_t _Locale);
char * __cdecl _strupr_l( char *_String, _locale_t _Locale);
size_t __cdecl strxfrm(char * _Dst, const char * _Src, size_t _MaxCount);
size_t __cdecl _strxfrm_l( char * _Dst, const char * _Src, size_t _MaxCount, _locale_t _Locale);
char * __cdecl strdup( const char * _Src);
int32 __cdecl strcmpi( const char * _Str1, const char * _Str2);
int32 __cdecl stricmp( const char * _Str1, const char * _Str2);
char * __cdecl strlwr( char * _Str);
int32 __cdecl strnicmp( const char * _Str1, const char * _Str, size_t _MaxCount);
char * __cdecl strnset( char * _Str, int32 _Val, size_t _MaxCount);
char * __cdecl strrev( char * _Str);
char * __cdecl strset( char * _Str, int32 _Val);
char * __cdecl strupr( char * _Str);
wchar_t * __cdecl _wcsdup( const wchar_t * _Str);
errno_t __cdecl wcscat_s( wchar_t * _Dst, rsize_t _SizeInWords, const wchar_t * _Src);
wchar_t * __cdecl wcscat( wchar_t *_Dest, const wchar_t * _Source);
wchar_t * __cdecl wcschr( const wchar_t * _Str, wchar_t _Ch);
int32 __cdecl wcscmp( const wchar_t * _Str1, const wchar_t * _Str2);
errno_t __cdecl wcscpy_s( wchar_t * _Dst, rsize_t _SizeInWords, const wchar_t * _Src);
wchar_t * __cdecl wcscpy( wchar_t *_Dest, const wchar_t * _Source);
size_t __cdecl wcscspn( const wchar_t * _Str, const wchar_t * _Control);
size_t __cdecl wcslen( const wchar_t * _Str);
size_t __cdecl wcsnlen( const wchar_t * _Src, size_t _MaxCount);
static __inline size_t __cdecl wcsnlen_s( const wchar_t * _Src, size_t _MaxCount) {
return (_Src == ((void *)0)) ? 0 : wcsnlen(_Src, _MaxCount);
} errno_t __cdecl wcsncat_s( wchar_t * _Dst, rsize_t _SizeInWords, const wchar_t * _Src, rsize_t _MaxCount);
wchar_t * __cdecl wcsncat( wchar_t *_Dest, const wchar_t * _Source, size_t _Count);
int32 __cdecl wcsncmp( const wchar_t * _Str1, const wchar_t * _Str2, size_t _MaxCount);
errno_t __cdecl wcsncpy_s( wchar_t * _Dst, rsize_t _SizeInWords, const wchar_t * _Src, rsize_t _MaxCount);
wchar_t * __cdecl wcsncpy( wchar_t *_Dest, const wchar_t * _Source, size_t _Count);
wchar_t * __cdecl wcspbrk( const wchar_t * _Str, const wchar_t * _Control);
wchar_t * __cdecl wcsrchr( const wchar_t * _Str, wchar_t _Ch);
size_t __cdecl wcsspn( const wchar_t * _Str, const wchar_t * _Control);
wchar_t * __cdecl wcsstr( const wchar_t * _Str, const wchar_t * _SubStr);
wchar_t * __cdecl wcstok( wchar_t * _Str, const wchar_t * _Delim);
wchar_t * __cdecl wcstok_s( wchar_t * _Str, const wchar_t * _Delim, wchar_t ** _Context);
wchar_t * __cdecl _wcserror( int32 _ErrNum);
errno_t __cdecl _wcserror_s( wchar_t * _Buf, size_t _SizeInWords, int32 _ErrNum);
wchar_t * __cdecl __wcserror( const wchar_t * _Str);
errno_t __cdecl __wcserror_s( wchar_t * _Buffer, size_t _SizeInWords, const wchar_t * _ErrMsg);
int32 __cdecl _wcsicmp( const wchar_t * _Str1, const wchar_t * _Str2);
int32 __cdecl _wcsicmp_l( const wchar_t * _Str1, const wchar_t * _Str2, _locale_t _Locale);
int32 __cdecl _wcsnicmp( const wchar_t * _Str1, const wchar_t * _Str2, size_t _MaxCount);
int32 __cdecl _wcsnicmp_l( const wchar_t * _Str1, const wchar_t * _Str2, size_t _MaxCount, _locale_t _Locale);
errno_t __cdecl _wcsnset_s( wchar_t * _Dst, size_t _SizeInWords, wchar_t _Val, size_t _MaxCount);
wchar_t * __cdecl _wcsnset( wchar_t *_Str, wchar_t _Val, size_t _MaxCount);
wchar_t * __cdecl _wcsrev( wchar_t * _Str);
errno_t __cdecl _wcsset_s( wchar_t * _Dst, size_t _SizeInWords, wchar_t _Value);
wchar_t * __cdecl _wcsset( wchar_t *_Str, wchar_t _Val);
errno_t __cdecl _wcslwr_s( wchar_t * _Str, size_t _SizeInWords);
wchar_t * __cdecl _wcslwr( wchar_t *_String);
errno_t __cdecl _wcslwr_s_l( wchar_t * _Str, size_t _SizeInWords, _locale_t _Locale);
wchar_t * __cdecl _wcslwr_l( wchar_t *_String, _locale_t _Locale);
errno_t __cdecl _wcsupr_s( wchar_t * _Str, size_t _Size);
wchar_t * __cdecl _wcsupr( wchar_t *_String);
errno_t __cdecl _wcsupr_s_l( wchar_t * _Str, size_t _Size, _locale_t _Locale);
wchar_t * __cdecl _wcsupr_l( wchar_t *_String, _locale_t _Locale);
size_t __cdecl wcsxfrm( wchar_t * _Dst, const wchar_t * _Src, size_t _MaxCount);
size_t __cdecl _wcsxfrm_l( wchar_t * _Dst, const wchar_t *_Src, size_t _MaxCount, _locale_t _Locale);
int32 __cdecl wcscoll( const wchar_t * _Str1, const wchar_t * _Str2);
int32 __cdecl _wcscoll_l( const wchar_t * _Str1, const wchar_t * _Str2, _locale_t _Locale);
int32 __cdecl _wcsicoll( const wchar_t * _Str1, const wchar_t * _Str2);
int32 __cdecl _wcsicoll_l( const wchar_t * _Str1, const wchar_t *_Str2, _locale_t _Locale);
int32 __cdecl _wcsncoll( const wchar_t * _Str1, const wchar_t * _Str2, size_t _MaxCount);
int32 __cdecl _wcsncoll_l( const wchar_t * _Str1, const wchar_t * _Str2, size_t _MaxCount, _locale_t _Locale);
int32 __cdecl _wcsnicoll( const wchar_t * _Str1, const wchar_t * _Str2, size_t _MaxCount);
int32 __cdecl _wcsnicoll_l( const wchar_t * _Str1, const wchar_t * _Str2, size_t _MaxCount, _locale_t _Locale);
wchar_t * __cdecl wcsdup( const wchar_t * _Str);
int32 __cdecl wcsicmp( const wchar_t * _Str1, const wchar_t * _Str2);
int32 __cdecl wcsnicmp( const wchar_t * _Str1, const wchar_t * _Str2, size_t _MaxCount);
wchar_t * __cdecl wcsnset( wchar_t * _Str, wchar_t _Val, size_t _MaxCount);
wchar_t * __cdecl wcsrev( wchar_t * _Str);
wchar_t * __cdecl wcsset( wchar_t * _Str, wchar_t _Val);
wchar_t * __cdecl wcslwr( wchar_t * _Str);
wchar_t * __cdecl wcsupr( wchar_t * _Str);
int32 __cdecl wcsicoll( const wchar_t * _Str1, const wchar_t * _Str2);
typedef struct _OBJECTID {
<field name="Lineage"><GUID /></field>
<field name="Uniquifier"><DWORD /></field>
} OBJECTID;
typedef EXCEPTION_DISPOSITION __stdcall EXCEPTION_ROUTINE(struct _EXCEPTION_RECORD *ExceptionRecord, PVOID EstablisherFrame, struct _CONTEXT *ContextRecord, PVOID DispatcherContext );
<typedef name="PEXCEPTION_ROUTINE"><ptr><EXCEPTION_ROUTINE /></ptr></typedef>
<typedef name="KSPIN_LOCK"><ULONG_PTR /></typedef>
<typedef name="PKSPIN_LOCK"><ptr><KSPIN_LOCK /></ptr></typedef>
typedef struct __declspec(align(16)) _M128A {
<field name="Low"><ULONGLONG /></field>
<field name="High"><LONGLONG /></field>
} M128A, *PM128A;
typedef struct __declspec(align(16)) _XSAVE_FORMAT {
<field name="ControlWord"><WORD /></field>
<field name="StatusWord"><WORD /></field>
<field name="TagWord"><BYTE /></field>
<field name="Reserved1"><BYTE /></field>
<field name="ErrorOpcode"><WORD /></field>
<field name="ErrorOffset"><DWORD /></field>
<field name="ErrorSelector"><WORD /></field>
<field name="Reserved2"><WORD /></field>
<field name="DataOffset"><DWORD /></field>
<field name="DataSelector"><WORD /></field>
<field name="Reserved3"><WORD /></field>
<field name="MxCsr"><DWORD /></field>
<field name="MxCsr_Mask"><DWORD /></field>
<field name="FloatRegisters"><arr length="8"><M128A /></arr></field>
<field name="XmmRegisters"><arr length="8"><M128A /></arr></field>
<field name="Reserved4"><arr length="192"><BYTE /></arr></field>
<field name="StackControl"><arr length="7"><DWORD /></arr></field>
<field name="Cr0NpxState"><DWORD /></field>
} XSAVE_FORMAT, *PXSAVE_FORMAT;
typedef struct __declspec(align(8)) _XSAVE_AREA_HEADER {
<field name="Mask"><DWORD64 /></field>
<field name="Reserved"><arr length="7"><DWORD64 /></arr></field>
} XSAVE_AREA_HEADER, *PXSAVE_AREA_HEADER;
typedef struct __declspec(align(16)) _XSAVE_AREA {
<field name="LegacyState"><XSAVE_FORMAT /></field>
<field name="Header"><XSAVE_AREA_HEADER /></field>
} XSAVE_AREA, *PXSAVE_AREA;
typedef struct _XSTATE_CONTEXT {
<field name="Mask"><DWORD64 /></field>
<field name="Length"><DWORD /></field>
<field name="Reserved1"><DWORD /></field>
<field name="Area"><PXSAVE_AREA /></field>
<field name="Reserved2"><DWORD /></field>
<field name="Buffer"><PVOID /></field>
<field name="Reserved3"><DWORD /></field>
} XSTATE_CONTEXT, *PXSTATE_CONTEXT;
typedef struct _CONTEXT_CHUNK {
<field name="Offset"><LONG /></field>
<field name="Length"><DWORD /></field>
} CONTEXT_CHUNK, *PCONTEXT_CHUNK;
typedef struct _CONTEXT_EX {
<field name="All"><CONTEXT_CHUNK /></field>
<field name="Legacy"><CONTEXT_CHUNK /></field>
<field name="XState"><CONTEXT_CHUNK /></field>
} CONTEXT_EX, *PCONTEXT_EX;
typedef char __C_ASSERT__[((sizeof(XSAVE_FORMAT) & (64 - 1)) == 0)?1:-1];
typedef char __C_ASSERT__[((((LONG)(LONG_PTR)&(((XSAVE_AREA *)0)->Header)) & (64 - 1)) == 0)?1:-1];
typedef char __C_ASSERT__[(sizeof(XSAVE_AREA) == 512 + 64)?1:-1];
BOOLEAN _bittest(LONG const *Base, LONG Offset );
BOOLEAN _bittestandcomplement(LONG *Base, LONG Offset );
BOOLEAN _bittestandset(LONG *Base, LONG Offset );
BOOLEAN _bittestandreset(LONG *Base, LONG Offset );
BOOLEAN _interlockedbittestandset(LONG volatile *Base, LONG Offset );
BOOLEAN _interlockedbittestandreset(LONG volatile *Base, LONG Offset );
BOOLEAN _BitScanForward(DWORD *Index, DWORD Mask );
BOOLEAN _BitScanReverse(DWORD *Index, DWORD Mask );
SHORT _InterlockedAnd16(SHORT volatile *Destination, SHORT Value );
SHORT _InterlockedCompareExchange16(SHORT volatile *Destination, SHORT ExChange, SHORT Comperand );
SHORT _InterlockedOr16(SHORT volatile *Destination, SHORT Value );
__forceinline BOOLEAN InterlockedBitTestAndComplement(LONG volatile *Base, LONG Bit ) {
__asm {
mov eax, Bit mov ecx, Base lock btc [ecx], eax setc al };
} BYTE __readfsbyte(DWORD Offset );
WORD __readfsword(DWORD Offset );
DWORD __readfsdword(DWORD Offset );
void __writefsbyte(DWORD Offset, BYTE Data );
void __writefsword(DWORD Offset, WORD Data );
void __writefsdword(DWORD Offset, DWORD Data );
void __incfsbyte(DWORD Offset );
void __addfsbyte(DWORD Offset, BYTE Value );
void __incfsword(DWORD Offset );
void __addfsword(DWORD Offset, WORD Value );
void __incfsdword(DWORD Offset );
void __addfsdword(DWORD Offset, DWORD Value );
void _mm_pause(void );
__forceinline void MemoryBarrier(void ) {
<field name="Barrier"><LONG /></field>
__asm {
xchg Barrier, eax } } DWORD64 __readpmc(DWORD Counter );
DWORD64 __rdtsc(void );
void __int2c(void );
__forceinline void DbgRaiseAssertionFailure(void ) {
__int2c();
} __inline PVOID GetFiberData( void ) { return *(PVOID *) (ULONG_PTR) __readfsdword (0x10);
__inline PVOID GetCurrentFiber( void ) { return (PVOID) (ULONG_PTR) __readfsdword (0x10);
typedef struct _FLOATING_SAVE_AREA {
<field name="ControlWord"><DWORD /></field>
<field name="StatusWord"><DWORD /></field>
<field name="TagWord"><DWORD /></field>
<field name="ErrorOffset"><DWORD /></field>
<field name="ErrorSelector"><DWORD /></field>
<field name="DataOffset"><DWORD /></field>
<field name="DataSelector"><DWORD /></field>
<field name="RegisterArea"><arr length="80"><BYTE /></arr></field>
<field name="Cr0NpxState"><DWORD /></field>
} FLOATING_SAVE_AREA;
<typedef name="PFLOATING_SAVE_AREA"><ptr><FLOATING_SAVE_AREA /></ptr></typedef>
typedef char __C_ASSERT__[(sizeof(XSAVE_FORMAT) == 512)?1:-1];
typedef struct _CONTEXT {
<field name="ContextFlags"><DWORD /></field>
<field name="Dr0"><DWORD /></field>
<field name="Dr1"><DWORD /></field>
<field name="Dr2"><DWORD /></field>
<field name="Dr3"><DWORD /></field>
<field name="Dr6"><DWORD /></field>
<field name="Dr7"><DWORD /></field>
<field name="FloatSave"><FLOATING_SAVE_AREA /></field>
<field name="SegGs"><DWORD /></field>
<field name="SegFs"><DWORD /></field>
<field name="SegEs"><DWORD /></field>
<field name="SegDs"><DWORD /></field>
<field name="Edi"><DWORD /></field>
<field name="Esi"><DWORD /></field>
<field name="Ebx"><DWORD /></field>
<field name="Edx"><DWORD /></field>
<field name="Ecx"><DWORD /></field>
<field name="Eax"><DWORD /></field>
<field name="Ebp"><DWORD /></field>
<field name="Eip"><DWORD /></field>
<field name="SegCs"><DWORD /></field>
<field name="EFlags"><DWORD /></field>
<field name="Esp"><DWORD /></field>
<field name="SegSs"><DWORD /></field>
<field name="ExtendedRegisters"><arr length="512"><BYTE /></arr></field>
} CONTEXT;
<typedef name="PCONTEXT"><ptr><CONTEXT /></ptr></typedef>
typedef struct _LDT_ENTRY {
<field name="LimitLow"><WORD /></field>
<field name="BaseLow"><WORD /></field>
union {
struct {
<field name="BaseMid"><BYTE /></field>
<field name="Flags1"><BYTE /></field>
<field name="Flags2"><BYTE /></field>
<field name="BaseHi"><BYTE /></field>
} Bytes;
struct {
<bitfield name="BaseMid" bits="8"><DWORD /></bitfield>
<bitfield name="Type" bits="5"><DWORD /></bitfield>
<bitfield name="Dpl" bits="2"><DWORD /></bitfield>
<bitfield name="Pres" bits="1"><DWORD /></bitfield>
<bitfield name="LimitHi" bits="4"><DWORD /></bitfield>
<bitfield name="Sys" bits="1"><DWORD /></bitfield>
<bitfield name="Reserved_0" bits="1"><DWORD /></bitfield>
<bitfield name="Default_Big" bits="1"><DWORD /></bitfield>
<bitfield name="Granularity" bits="1"><DWORD /></bitfield>
<bitfield name="BaseHi" bits="8"><DWORD /></bitfield>
} Bits;
} HighWord;
} LDT_ENTRY, *PLDT_ENTRY;
typedef struct _WOW64_FLOATING_SAVE_AREA {
<field name="ControlWord"><DWORD /></field>
<field name="StatusWord"><DWORD /></field>
<field name="TagWord"><DWORD /></field>
<field name="ErrorOffset"><DWORD /></field>
<field name="ErrorSelector"><DWORD /></field>
<field name="DataOffset"><DWORD /></field>
<field name="DataSelector"><DWORD /></field>
<field name="RegisterArea"><arr length="80"><BYTE /></arr></field>
<field name="Cr0NpxState"><DWORD /></field>
} WOW64_FLOATING_SAVE_AREA;
<typedef name="PWOW64_FLOATING_SAVE_AREA"><ptr><WOW64_FLOATING_SAVE_AREA /></ptr></typedef>
typedef struct _WOW64_CONTEXT {
<field name="ContextFlags"><DWORD /></field>
<field name="Dr0"><DWORD /></field>
<field name="Dr1"><DWORD /></field>
<field name="Dr2"><DWORD /></field>
<field name="Dr3"><DWORD /></field>
<field name="Dr6"><DWORD /></field>
<field name="Dr7"><DWORD /></field>
<field name="FloatSave"><WOW64_FLOATING_SAVE_AREA /></field>
<field name="SegGs"><DWORD /></field>
<field name="SegFs"><DWORD /></field>
<field name="SegEs"><DWORD /></field>
<field name="SegDs"><DWORD /></field>
<field name="Edi"><DWORD /></field>
<field name="Esi"><DWORD /></field>
<field name="Ebx"><DWORD /></field>
<field name="Edx"><DWORD /></field>
<field name="Ecx"><DWORD /></field>
<field name="Eax"><DWORD /></field>
<field name="Ebp"><DWORD /></field>
<field name="Eip"><DWORD /></field>
<field name="SegCs"><DWORD /></field>
<field name="EFlags"><DWORD /></field>
<field name="Esp"><DWORD /></field>
<field name="SegSs"><DWORD /></field>
<field name="ExtendedRegisters"><arr length="512"><BYTE /></arr></field>
} WOW64_CONTEXT;
<typedef name="PWOW64_CONTEXT"><ptr><WOW64_CONTEXT /></ptr></typedef>
typedef struct _WOW64_LDT_ENTRY {
<field name="LimitLow"><WORD /></field>
<field name="BaseLow"><WORD /></field>
union {
struct {
<field name="BaseMid"><BYTE /></field>
<field name="Flags1"><BYTE /></field>
<field name="Flags2"><BYTE /></field>
<field name="BaseHi"><BYTE /></field>
} Bytes;
struct {
<bitfield name="BaseMid" bits="8"><DWORD /></bitfield>
<bitfield name="Type" bits="5"><DWORD /></bitfield>
<bitfield name="Dpl" bits="2"><DWORD /></bitfield>
<bitfield name="Pres" bits="1"><DWORD /></bitfield>
<bitfield name="LimitHi" bits="4"><DWORD /></bitfield>
<bitfield name="Sys" bits="1"><DWORD /></bitfield>
<bitfield name="Reserved_0" bits="1"><DWORD /></bitfield>
<bitfield name="Default_Big" bits="1"><DWORD /></bitfield>
<bitfield name="Granularity" bits="1"><DWORD /></bitfield>
<bitfield name="BaseHi" bits="8"><DWORD /></bitfield>
} Bits;
} HighWord;
} WOW64_LDT_ENTRY, *PWOW64_LDT_ENTRY;
typedef struct _WOW64_DESCRIPTOR_TABLE_ENTRY {
<field name="Selector"><DWORD /></field>
<field name="Descriptor"><WOW64_LDT_ENTRY /></field>
} WOW64_DESCRIPTOR_TABLE_ENTRY, *PWOW64_DESCRIPTOR_TABLE_ENTRY;
typedef struct _EXCEPTION_RECORD {
<field name="ExceptionCode"><DWORD /></field>
<field name="ExceptionFlags"><DWORD /></field>
struct _EXCEPTION_RECORD *ExceptionRecord;
<field name="ExceptionAddress"><PVOID /></field>
<field name="NumberParameters"><DWORD /></field>
<field name="ExceptionInformation"><arr length="15"><ULONG_PTR /></arr></field>
} EXCEPTION_RECORD;
<typedef name="PEXCEPTION_RECORD"><ptr><EXCEPTION_RECORD /></ptr></typedef>
typedef struct _EXCEPTION_RECORD32 {
<field name="ExceptionCode"><DWORD /></field>
<field name="ExceptionFlags"><DWORD /></field>
<field name="ExceptionRecord"><DWORD /></field>
<field name="ExceptionAddress"><DWORD /></field>
<field name="NumberParameters"><DWORD /></field>
<field name="ExceptionInformation"><arr length="15"><DWORD /></arr></field>
} EXCEPTION_RECORD32, *PEXCEPTION_RECORD32;
typedef struct _EXCEPTION_RECORD64 {
<field name="ExceptionCode"><DWORD /></field>
<field name="ExceptionFlags"><DWORD /></field>
<field name="ExceptionRecord"><DWORD64 /></field>
<field name="ExceptionAddress"><DWORD64 /></field>
<field name="NumberParameters"><DWORD /></field>
<field name="__unusedAlignment"><DWORD /></field>
<field name="ExceptionInformation"><arr length="15"><DWORD64 /></arr></field>
} EXCEPTION_RECORD64, *PEXCEPTION_RECORD64;
typedef struct _EXCEPTION_POINTERS {
<field name="ExceptionRecord"><PEXCEPTION_RECORD /></field>
<field name="ContextRecord"><PCONTEXT /></field>
} EXCEPTION_POINTERS, *PEXCEPTION_POINTERS;

void __stdcall RtlUnwind(PVOID TargetFrame, PVOID TargetIp, PEXCEPTION_RECORD ExceptionRecord, PVOID ReturnValue );
<typedef name="PACCESS_TOKEN"><PVOID /></typedef> <typedef name="PSECURITY_DESCRIPTOR"><PVOID /></typedef> <typedef name="PSID"><PVOID /></typedef> <typedef name="ACCESS_MASK"><DWORD /></typedef>
<typedef name="PACCESS_MASK"><ptr><ACCESS_MASK /></ptr></typedef>
typedef struct _GENERIC_MAPPING {
<field name="GenericRead"><ACCESS_MASK /></field>
<field name="GenericWrite"><ACCESS_MASK /></field>
<field name="GenericExecute"><ACCESS_MASK /></field>
<field name="GenericAll"><ACCESS_MASK /></field>
} GENERIC_MAPPING;
<typedef name="PGENERIC_MAPPING"><ptr><GENERIC_MAPPING /></ptr></typedef>
typedef struct _LUID_AND_ATTRIBUTES {
<field name="Luid"><LUID /></field>
<field name="Attributes"><DWORD /></field>
} LUID_AND_ATTRIBUTES, * PLUID_AND_ATTRIBUTES;
typedef LUID_AND_ATTRIBUTES LUID_AND_ATTRIBUTES_ARRAY[1];
<typedef name="PLUID_AND_ATTRIBUTES_ARRAY"><ptr><LUID_AND_ATTRIBUTES_ARRAY /></ptr></typedef>
typedef struct _SID_IDENTIFIER_AUTHORITY {
<field name="Value"><arr length="6"><BYTE /></arr></field>
} SID_IDENTIFIER_AUTHORITY, *PSID_IDENTIFIER_AUTHORITY;
typedef struct _SID {
<field name="Revision"><BYTE /></field>
<field name="SubAuthorityCount"><BYTE /></field>
<field name="IdentifierAuthority"><SID_IDENTIFIER_AUTHORITY /></field>
<field name="SubAuthority"><arr length="1"><DWORD /></arr></field>
} SID, *PISID;
typedef enum _SID_NAME_USE {
SidTypeUser = 1, SidTypeGroup, SidTypeDomain, SidTypeAlias, SidTypeWellKnownGroup, SidTypeDeletedAccount, SidTypeInvalid, SidTypeUnknown, SidTypeComputer, SidTypeLabel } SID_NAME_USE, *PSID_NAME_USE;
typedef struct _SID_AND_ATTRIBUTES {
<field name="Sid"><PSID /></field>
<field name="Attributes"><DWORD /></field>
} SID_AND_ATTRIBUTES, * PSID_AND_ATTRIBUTES;
typedef SID_AND_ATTRIBUTES SID_AND_ATTRIBUTES_ARRAY[1];
<typedef name="PSID_AND_ATTRIBUTES_ARRAY"><ptr><SID_AND_ATTRIBUTES_ARRAY /></ptr></typedef>
<typedef name="SID_HASH_ENTRY"><ULONG_PTR /></typedef>
<typedef name="PSID_HASH_ENTRY"><ptr><ULONG_PTR /></ptr></typedef>
typedef struct _SID_AND_ATTRIBUTES_HASH {
<field name="SidCount"><DWORD /></field>
<field name="SidAttr"><PSID_AND_ATTRIBUTES /></field>
<field name="Hash"><arr length="32"><SID_HASH_ENTRY /></arr></field>
} SID_AND_ATTRIBUTES_HASH, *PSID_AND_ATTRIBUTES_HASH;
typedef enum {
WinNullSid = 0, WinWorldSid = 1, WinLocalSid = 2, WinCreatorOwnerSid = 3, WinCreatorGroupSid = 4, WinCreatorOwnerServerSid = 5, WinCreatorGroupServerSid = 6, WinNtAuthoritySid = 7, WinDialupSid = 8, WinNetworkSid = 9, WinBatchSid = 10, WinInteractiveSid = 11, WinServiceSid = 12, WinAnonymousSid = 13, WinProxySid = 14, WinEnterpriseControllersSid = 15, WinSelfSid = 16, WinAuthenticatedUserSid = 17, WinRestrictedCodeSid = 18, WinTerminalServerSid = 19, WinRemoteLogonIdSid = 20, WinLogonIdsSid = 21, WinLocalSystemSid = 22, WinLocalServiceSid = 23, WinNetworkServiceSid = 24, WinBuiltinDomainSid = 25, WinBuiltinAdministratorsSid = 26, WinBuiltinUsersSid = 27, WinBuiltinGuestsSid = 28, WinBuiltinPowerUsersSid = 29, WinBuiltinAccountOperatorsSid = 30, WinBuiltinSystemOperatorsSid = 31, WinBuiltinPrintOperatorsSid = 32, WinBuiltinBackupOperatorsSid = 33, WinBuiltinReplicatorSid = 34, WinBuiltinPreWindows2000CompatibleAccessSid = 35, WinBuiltinRemoteDesktopUsersSid = 36, WinBuiltinNetworkConfigurationOperatorsSid = 37, WinAccountAdministratorSid = 38, WinAccountGuestSid = 39, WinAccountKrbtgtSid = 40, WinAccountDomainAdminsSid = 41, WinAccountDomainUsersSid = 42, WinAccountDomainGuestsSid = 43, WinAccountComputersSid = 44, WinAccountControllersSid = 45, WinAccountCertAdminsSid = 46, WinAccountSchemaAdminsSid = 47, WinAccountEnterpriseAdminsSid = 48, WinAccountPolicyAdminsSid = 49, WinAccountRasAndIasServersSid = 50, WinNTLMAuthenticationSid = 51, WinDigestAuthenticationSid = 52, WinSChannelAuthenticationSid = 53, WinThisOrganizationSid = 54, WinOtherOrganizationSid = 55, WinBuiltinIncomingForestTrustBuildersSid = 56, WinBuiltinPerfMonitoringUsersSid = 57, WinBuiltinPerfLoggingUsersSid = 58, WinBuiltinAuthorizationAccessSid = 59, WinBuiltinTerminalServerLicenseServersSid = 60, WinBuiltinDCOMUsersSid = 61, WinBuiltinIUsersSid = 62, WinIUserSid = 63, WinBuiltinCryptoOperatorsSid = 64, WinUntrustedLabelSid = 65, WinLowLabelSid = 66, WinMediumLabelSid = 67, WinHighLabelSid = 68, WinSystemLabelSid = 69, WinWriteRestrictedCodeSid = 70, WinCreatorOwnerRightsSid = 71, WinCacheablePrincipalsGroupSid = 72, WinNonCacheablePrincipalsGroupSid = 73, WinEnterpriseReadonlyControllersSid = 74, WinAccountReadonlyControllersSid = 75, WinBuiltinEventLogReadersGroup = 76, WinNewEnterpriseReadonlyControllersSid = 77, WinBuiltinCertSvcDComAccessGroup = 78, WinMediumPlusLabelSid = 79, WinLocalLogonSid = 80, WinConsoleLogonSid = 81, WinThisOrganizationCertificateSid = 82, } WELL_KNOWN_SID_TYPE;
typedef struct _ACL {
<field name="AclRevision"><BYTE /></field>
<field name="Sbz1"><BYTE /></field>
<field name="AclSize"><WORD /></field>
<field name="AceCount"><WORD /></field>
<field name="Sbz2"><WORD /></field>
} ACL;
<typedef name="PACL"><ptr><ACL /></ptr></typedef>
typedef struct _ACE_HEADER {
<field name="AceType"><BYTE /></field>
<field name="AceFlags"><BYTE /></field>
<field name="AceSize"><WORD /></field>
} ACE_HEADER;
<typedef name="PACE_HEADER"><ptr><ACE_HEADER /></ptr></typedef>
typedef struct _ACCESS_ALLOWED_ACE {
<field name="Header"><ACE_HEADER /></field>
<field name="Mask"><ACCESS_MASK /></field>
<field name="SidStart"><DWORD /></field>
} ACCESS_ALLOWED_ACE;
<typedef name="PACCESS_ALLOWED_ACE"><ptr><ACCESS_ALLOWED_ACE /></ptr></typedef>
typedef struct _ACCESS_DENIED_ACE {
<field name="Header"><ACE_HEADER /></field>
<field name="Mask"><ACCESS_MASK /></field>
<field name="SidStart"><DWORD /></field>
} ACCESS_DENIED_ACE;
<typedef name="PACCESS_DENIED_ACE"><ptr><ACCESS_DENIED_ACE /></ptr></typedef>
typedef struct _SYSTEM_AUDIT_ACE {
<field name="Header"><ACE_HEADER /></field>
<field name="Mask"><ACCESS_MASK /></field>
<field name="SidStart"><DWORD /></field>
} SYSTEM_AUDIT_ACE;
<typedef name="PSYSTEM_AUDIT_ACE"><ptr><SYSTEM_AUDIT_ACE /></ptr></typedef>
typedef struct _SYSTEM_ALARM_ACE {
<field name="Header"><ACE_HEADER /></field>
<field name="Mask"><ACCESS_MASK /></field>
<field name="SidStart"><DWORD /></field>
} SYSTEM_ALARM_ACE;
<typedef name="PSYSTEM_ALARM_ACE"><ptr><SYSTEM_ALARM_ACE /></ptr></typedef>
typedef struct _SYSTEM_MANDATORY_LABEL_ACE {
<field name="Header"><ACE_HEADER /></field>
<field name="Mask"><ACCESS_MASK /></field>
<field name="SidStart"><DWORD /></field>
} SYSTEM_MANDATORY_LABEL_ACE, *PSYSTEM_MANDATORY_LABEL_ACE;
typedef struct _ACCESS_ALLOWED_OBJECT_ACE {
<field name="Header"><ACE_HEADER /></field>
<field name="Mask"><ACCESS_MASK /></field>
<field name="Flags"><DWORD /></field>
<field name="ObjectType"><GUID /></field>
<field name="InheritedObjectType"><GUID /></field>
<field name="SidStart"><DWORD /></field>
} ACCESS_ALLOWED_OBJECT_ACE, *PACCESS_ALLOWED_OBJECT_ACE;
typedef struct _ACCESS_DENIED_OBJECT_ACE {
<field name="Header"><ACE_HEADER /></field>
<field name="Mask"><ACCESS_MASK /></field>
<field name="Flags"><DWORD /></field>
<field name="ObjectType"><GUID /></field>
<field name="InheritedObjectType"><GUID /></field>
<field name="SidStart"><DWORD /></field>
} ACCESS_DENIED_OBJECT_ACE, *PACCESS_DENIED_OBJECT_ACE;
typedef struct _SYSTEM_AUDIT_OBJECT_ACE {
<field name="Header"><ACE_HEADER /></field>
<field name="Mask"><ACCESS_MASK /></field>
<field name="Flags"><DWORD /></field>
<field name="ObjectType"><GUID /></field>
<field name="InheritedObjectType"><GUID /></field>
<field name="SidStart"><DWORD /></field>
} SYSTEM_AUDIT_OBJECT_ACE, *PSYSTEM_AUDIT_OBJECT_ACE;
typedef struct _SYSTEM_ALARM_OBJECT_ACE {
<field name="Header"><ACE_HEADER /></field>
<field name="Mask"><ACCESS_MASK /></field>
<field name="Flags"><DWORD /></field>
<field name="ObjectType"><GUID /></field>
<field name="InheritedObjectType"><GUID /></field>
<field name="SidStart"><DWORD /></field>
} SYSTEM_ALARM_OBJECT_ACE, *PSYSTEM_ALARM_OBJECT_ACE;
typedef struct _ACCESS_ALLOWED_CALLBACK_ACE {
<field name="Header"><ACE_HEADER /></field>
<field name="Mask"><ACCESS_MASK /></field>
<field name="SidStart"><DWORD /></field>
} ACCESS_ALLOWED_CALLBACK_ACE, *PACCESS_ALLOWED_CALLBACK_ACE;
typedef struct _ACCESS_DENIED_CALLBACK_ACE {
<field name="Header"><ACE_HEADER /></field>
<field name="Mask"><ACCESS_MASK /></field>
<field name="SidStart"><DWORD /></field>
} ACCESS_DENIED_CALLBACK_ACE, *PACCESS_DENIED_CALLBACK_ACE;
typedef struct _SYSTEM_AUDIT_CALLBACK_ACE {
<field name="Header"><ACE_HEADER /></field>
<field name="Mask"><ACCESS_MASK /></field>
<field name="SidStart"><DWORD /></field>
} SYSTEM_AUDIT_CALLBACK_ACE, *PSYSTEM_AUDIT_CALLBACK_ACE;
typedef struct _SYSTEM_ALARM_CALLBACK_ACE {
<field name="Header"><ACE_HEADER /></field>
<field name="Mask"><ACCESS_MASK /></field>
<field name="SidStart"><DWORD /></field>
} SYSTEM_ALARM_CALLBACK_ACE, *PSYSTEM_ALARM_CALLBACK_ACE;
typedef struct _ACCESS_ALLOWED_CALLBACK_OBJECT_ACE {
<field name="Header"><ACE_HEADER /></field>
<field name="Mask"><ACCESS_MASK /></field>
<field name="Flags"><DWORD /></field>
<field name="ObjectType"><GUID /></field>
<field name="InheritedObjectType"><GUID /></field>
<field name="SidStart"><DWORD /></field>
} ACCESS_ALLOWED_CALLBACK_OBJECT_ACE, *PACCESS_ALLOWED_CALLBACK_OBJECT_ACE;
typedef struct _ACCESS_DENIED_CALLBACK_OBJECT_ACE {
<field name="Header"><ACE_HEADER /></field>
<field name="Mask"><ACCESS_MASK /></field>
<field name="Flags"><DWORD /></field>
<field name="ObjectType"><GUID /></field>
<field name="InheritedObjectType"><GUID /></field>
<field name="SidStart"><DWORD /></field>
} ACCESS_DENIED_CALLBACK_OBJECT_ACE, *PACCESS_DENIED_CALLBACK_OBJECT_ACE;
typedef struct _SYSTEM_AUDIT_CALLBACK_OBJECT_ACE {
<field name="Header"><ACE_HEADER /></field>
<field name="Mask"><ACCESS_MASK /></field>
<field name="Flags"><DWORD /></field>
<field name="ObjectType"><GUID /></field>
<field name="InheritedObjectType"><GUID /></field>
<field name="SidStart"><DWORD /></field>
} SYSTEM_AUDIT_CALLBACK_OBJECT_ACE, *PSYSTEM_AUDIT_CALLBACK_OBJECT_ACE;
typedef struct _SYSTEM_ALARM_CALLBACK_OBJECT_ACE {
<field name="Header"><ACE_HEADER /></field>
<field name="Mask"><ACCESS_MASK /></field>
<field name="Flags"><DWORD /></field>
<field name="ObjectType"><GUID /></field>
<field name="InheritedObjectType"><GUID /></field>
<field name="SidStart"><DWORD /></field>
} SYSTEM_ALARM_CALLBACK_OBJECT_ACE, *PSYSTEM_ALARM_CALLBACK_OBJECT_ACE;
typedef enum _ACL_INFORMATION_CLASS {
AclRevisionInformation = 1, AclSizeInformation } ACL_INFORMATION_CLASS;
typedef struct _ACL_REVISION_INFORMATION {
<field name="AclRevision"><DWORD /></field>
} ACL_REVISION_INFORMATION;
<typedef name="PACL_REVISION_INFORMATION"><ptr><ACL_REVISION_INFORMATION /></ptr></typedef>
typedef struct _ACL_SIZE_INFORMATION {
<field name="AceCount"><DWORD /></field>
<field name="AclBytesInUse"><DWORD /></field>
<field name="AclBytesFree"><DWORD /></field>
} ACL_SIZE_INFORMATION;
<typedef name="PACL_SIZE_INFORMATION"><ptr><ACL_SIZE_INFORMATION /></ptr></typedef>
<typedef name="SECURITY_DESCRIPTOR_CONTROL"><WORD /></typedef>
<typedef name="PSECURITY_DESCRIPTOR_CONTROL"><ptr><WORD /></ptr></typedef>
typedef struct _SECURITY_DESCRIPTOR_RELATIVE {
<field name="Revision"><BYTE /></field>
<field name="Sbz1"><BYTE /></field>
<field name="Control"><SECURITY_DESCRIPTOR_CONTROL /></field>
<field name="Owner"><DWORD /></field>
<field name="Group"><DWORD /></field>
<field name="Sacl"><DWORD /></field>
<field name="Dacl"><DWORD /></field>
} SECURITY_DESCRIPTOR_RELATIVE, *PISECURITY_DESCRIPTOR_RELATIVE;
typedef struct _SECURITY_DESCRIPTOR {
<field name="Revision"><BYTE /></field>
<field name="Sbz1"><BYTE /></field>
<field name="Control"><SECURITY_DESCRIPTOR_CONTROL /></field>
<field name="Owner"><PSID /></field>
<field name="Group"><PSID /></field>
<field name="Sacl"><PACL /></field>
<field name="Dacl"><PACL /></field>
} SECURITY_DESCRIPTOR, *PISECURITY_DESCRIPTOR;
typedef struct _OBJECT_TYPE_LIST {
<field name="Level"><WORD /></field>
<field name="Sbz"><WORD /></field>
<field name="ObjectType"><ptr><GUID /></ptr></field>
} OBJECT_TYPE_LIST, *POBJECT_TYPE_LIST;
typedef enum _AUDIT_EVENT_TYPE {
AuditEventObjectAccess, AuditEventDirectoryServiceAccess } AUDIT_EVENT_TYPE, *PAUDIT_EVENT_TYPE;
typedef struct _PRIVILEGE_SET {
<field name="PrivilegeCount"><DWORD /></field>
<field name="Control"><DWORD /></field>
<field name="Privilege"><arr length="1"><LUID_AND_ATTRIBUTES /></arr></field>
} PRIVILEGE_SET, * PPRIVILEGE_SET;
typedef enum _ACCESS_REASON_TYPE{
AccessReasonNone = 0x00000000, AccessReasonAllowedAce = 0x00010000, AccessReasonDeniedAce = 0x00020000, AccessReasonAllowedParentAce = 0x00030000, AccessReasonDeniedParentAce = 0x00040000, AccessReasonMissingPrivilege = 0x00100000, AccessReasonFromPrivilege = 0x00200000, AccessReasonIntegrityLevel = 0x00300000, AccessReasonOwnership = 0x00400000, AccessReasonNullDacl = 0x00500000, AccessReasonEmptyDacl = 0x00600000, AccessReasonNoSD = 0x00700000, AccessReasonNoGrant = 0x00800000 } ACCESS_REASON_TYPE;
<typedef name="ACCESS_REASON"><DWORD /></typedef>
typedef struct _ACCESS_REASONS{
<field name="Data"><arr length="32"><ACCESS_REASON /></arr></field>
} ACCESS_REASONS, *PACCESS_REASONS;
typedef struct _SE_SECURITY_DESCRIPTOR {
<field name="Size"><DWORD /></field>
<field name="Flags"><DWORD /></field>
<field name="SecurityDescriptor"><PSECURITY_DESCRIPTOR /></field>
} SE_SECURITY_DESCRIPTOR, *PSE_SECURITY_DESCRIPTOR;
typedef struct _SE_ACCESS_REQUEST {
<field name="Size"><DWORD /></field>
<field name="SeSecurityDescriptor"><PSE_SECURITY_DESCRIPTOR /></field>
<field name="DesiredAccess"><ACCESS_MASK /></field>
<field name="PreviouslyGrantedAccess"><ACCESS_MASK /></field>
<field name="PrincipalSelfSid"><PSID /></field>
<field name="GenericMapping"><PGENERIC_MAPPING /></field>
<field name="ObjectTypeListCount"><DWORD /></field>
<field name="ObjectTypeList"><POBJECT_TYPE_LIST /></field>
} SE_ACCESS_REQUEST, *PSE_ACCESS_REQUEST;
typedef struct _SE_ACCESS_REPLY {
<field name="Size"><DWORD /></field>
<field name="ResultListCount"><DWORD /></field>
<field name="GrantedAccess"><PACCESS_MASK /></field>
<field name="AccessStatus"><PDWORD /></field>
<field name="AccessReason"><PACCESS_REASONS /></field>
<field name="Privileges"><ptr><PPRIVILEGE_SET /></ptr></field>
} SE_ACCESS_REPLY, *PSE_ACCESS_REPLY;
typedef enum _SECURITY_IMPERSONATION_LEVEL {
SecurityAnonymous, SecurityIdentification, SecurityImpersonation, SecurityDelegation } SECURITY_IMPERSONATION_LEVEL, * PSECURITY_IMPERSONATION_LEVEL;
typedef enum _TOKEN_TYPE {
TokenPrimary = 1, TokenImpersonation } TOKEN_TYPE;
<typedef name="PTOKEN_TYPE"><ptr><TOKEN_TYPE /></ptr></typedef>
typedef enum _TOKEN_ELEVATION_TYPE {
TokenElevationTypeDefault = 1, TokenElevationTypeFull, TokenElevationTypeLimited, } TOKEN_ELEVATION_TYPE, *PTOKEN_ELEVATION_TYPE;
typedef enum _TOKEN_INFORMATION_CLASS {
TokenUser = 1, TokenGroups, TokenPrivileges, TokenOwner, TokenPrimaryGroup, TokenDefaultDacl, TokenSource, TokenType, TokenImpersonationLevel, TokenStatistics, TokenRestrictedSids, TokenSessionId, TokenGroupsAndPrivileges, TokenSessionReference, TokenSandBoxInert, TokenAuditPolicy, TokenOrigin, TokenElevationType, TokenLinkedToken, TokenElevation, TokenHasRestrictions, TokenAccessInformation, TokenVirtualizationAllowed, TokenVirtualizationEnabled, TokenIntegrityLevel, TokenUIAccess, TokenMandatoryPolicy, TokenLogonSid, MaxTokenInfoClass } TOKEN_INFORMATION_CLASS, *PTOKEN_INFORMATION_CLASS;
typedef struct _TOKEN_USER {
<field name="User"><SID_AND_ATTRIBUTES /></field>
} TOKEN_USER, *PTOKEN_USER;
typedef struct _TOKEN_GROUPS {
<field name="GroupCount"><DWORD /></field>
<field name="Groups"><arr length="1"><SID_AND_ATTRIBUTES /></arr></field>
} TOKEN_GROUPS, *PTOKEN_GROUPS;
typedef struct _TOKEN_PRIVILEGES {
<field name="PrivilegeCount"><DWORD /></field>
<field name="Privileges"><arr length="1"><LUID_AND_ATTRIBUTES /></arr></field>
} TOKEN_PRIVILEGES, *PTOKEN_PRIVILEGES;
typedef struct _TOKEN_OWNER {
<field name="Owner"><PSID /></field>
} TOKEN_OWNER, *PTOKEN_OWNER;
typedef struct _TOKEN_PRIMARY_GROUP {
<field name="PrimaryGroup"><PSID /></field>
} TOKEN_PRIMARY_GROUP, *PTOKEN_PRIMARY_GROUP;
typedef struct _TOKEN_DEFAULT_DACL {
<field name="DefaultDacl"><PACL /></field>
} TOKEN_DEFAULT_DACL, *PTOKEN_DEFAULT_DACL;
typedef struct _TOKEN_GROUPS_AND_PRIVILEGES {
<field name="SidCount"><DWORD /></field>
<field name="SidLength"><DWORD /></field>
<field name="Sids"><PSID_AND_ATTRIBUTES /></field>
<field name="RestrictedSidCount"><DWORD /></field>
<field name="RestrictedSidLength"><DWORD /></field>
<field name="RestrictedSids"><PSID_AND_ATTRIBUTES /></field>
<field name="PrivilegeCount"><DWORD /></field>
<field name="PrivilegeLength"><DWORD /></field>
<field name="Privileges"><PLUID_AND_ATTRIBUTES /></field>
<field name="AuthenticationId"><LUID /></field>
} TOKEN_GROUPS_AND_PRIVILEGES, *PTOKEN_GROUPS_AND_PRIVILEGES;
typedef struct _TOKEN_LINKED_TOKEN {
<field name="LinkedToken"><HANDLE /></field>
} TOKEN_LINKED_TOKEN, *PTOKEN_LINKED_TOKEN;
typedef struct _TOKEN_ELEVATION {
<field name="TokenIsElevated"><DWORD /></field>
} TOKEN_ELEVATION, *PTOKEN_ELEVATION;
typedef struct _TOKEN_MANDATORY_LABEL {
<field name="Label"><SID_AND_ATTRIBUTES /></field>
} TOKEN_MANDATORY_LABEL, *PTOKEN_MANDATORY_LABEL;
typedef struct _TOKEN_MANDATORY_POLICY {
<field name="Policy"><DWORD /></field>
} TOKEN_MANDATORY_POLICY, *PTOKEN_MANDATORY_POLICY;
typedef struct _TOKEN_ACCESS_INFORMATION {
<field name="SidHash"><PSID_AND_ATTRIBUTES_HASH /></field>
<field name="RestrictedSidHash"><PSID_AND_ATTRIBUTES_HASH /></field>
<field name="Privileges"><PTOKEN_PRIVILEGES /></field>
<field name="AuthenticationId"><LUID /></field>
<field name="TokenType"><TOKEN_TYPE /></field>
<field name="ImpersonationLevel"><SECURITY_IMPERSONATION_LEVEL /></field>
<field name="MandatoryPolicy"><TOKEN_MANDATORY_POLICY /></field>
<field name="Flags"><DWORD /></field>
} TOKEN_ACCESS_INFORMATION, *PTOKEN_ACCESS_INFORMATION;
typedef struct _TOKEN_AUDIT_POLICY {
<field name="PerUserPolicy"><arr length="(((53)) >> 1) + 1"><BYTE /></arr></field>
} TOKEN_AUDIT_POLICY, *PTOKEN_AUDIT_POLICY;
typedef struct _TOKEN_SOURCE {
<field name="SourceName"><arr length="8"><CHAR /></arr></field>
<field name="SourceIdentifier"><LUID /></field>
} TOKEN_SOURCE, *PTOKEN_SOURCE;
typedef struct _TOKEN_STATISTICS {
<field name="TokenId"><LUID /></field>
<field name="AuthenticationId"><LUID /></field>
<field name="ExpirationTime"><LARGE_INTEGER /></field>
<field name="TokenType"><TOKEN_TYPE /></field>
<field name="ImpersonationLevel"><SECURITY_IMPERSONATION_LEVEL /></field>
<field name="DynamicCharged"><DWORD /></field>
<field name="DynamicAvailable"><DWORD /></field>
<field name="GroupCount"><DWORD /></field>
<field name="PrivilegeCount"><DWORD /></field>
<field name="ModifiedId"><LUID /></field>
} TOKEN_STATISTICS, *PTOKEN_STATISTICS;
typedef struct _TOKEN_CONTROL {
<field name="TokenId"><LUID /></field>
<field name="AuthenticationId"><LUID /></field>
<field name="ModifiedId"><LUID /></field>
<field name="TokenSource"><TOKEN_SOURCE /></field>
} TOKEN_CONTROL, *PTOKEN_CONTROL;
typedef struct _TOKEN_ORIGIN {
LUID OriginatingLogonSession ;
} TOKEN_ORIGIN, * PTOKEN_ORIGIN ;
typedef enum _MANDATORY_LEVEL {
MandatoryLevelUntrusted = 0, MandatoryLevelLow, MandatoryLevelMedium, MandatoryLevelHigh, MandatoryLevelSystem, MandatoryLevelSecureProcess, MandatoryLevelCount } MANDATORY_LEVEL, *PMANDATORY_LEVEL;
<typedef name="SECURITY_CONTEXT_TRACKING_MODE"><BOOLEAN /></typedef>
<typedef name="PSECURITY_CONTEXT_TRACKING_MODE"><ptr><BOOLEAN /></ptr></typedef>
typedef struct _SECURITY_QUALITY_OF_SERVICE {
<field name="Length"><DWORD /></field>
<field name="ImpersonationLevel"><SECURITY_IMPERSONATION_LEVEL /></field>
<field name="ContextTrackingMode"><SECURITY_CONTEXT_TRACKING_MODE /></field>
<field name="EffectiveOnly"><BOOLEAN /></field>
} SECURITY_QUALITY_OF_SERVICE, * PSECURITY_QUALITY_OF_SERVICE;
typedef struct _SE_IMPERSONATION_STATE {
<field name="Token"><PACCESS_TOKEN /></field>
<field name="CopyOnOpen"><BOOLEAN /></field>
<field name="EffectiveOnly"><BOOLEAN /></field>
<field name="Level"><SECURITY_IMPERSONATION_LEVEL /></field>
} SE_IMPERSONATION_STATE, *PSE_IMPERSONATION_STATE;
<typedef name="SECURITY_INFORMATION"><DWORD /></typedef>
<typedef name="PSECURITY_INFORMATION"><ptr><DWORD /></ptr></typedef>
typedef struct _JOB_SET_ARRAY {
<field name="JobHandle"><HANDLE /></field>
<field name="MemberLevel"><DWORD /></field>
<field name="Flags"><DWORD /></field>
} JOB_SET_ARRAY, *PJOB_SET_ARRAY;
typedef struct _NT_TIB {
struct _EXCEPTION_REGISTRATION_RECORD *ExceptionList;
<field name="StackBase"><PVOID /></field>
<field name="StackLimit"><PVOID /></field>
<field name="SubSystemTib"><PVOID /></field>
union {
<field name="FiberData"><PVOID /></field>
<field name="Version"><DWORD /></field>
};
<field name="ArbitraryUserPointer"><PVOID /></field>
struct _NT_TIB *Self;
} NT_TIB;
<typedef name="PNT_TIB"><ptr><NT_TIB /></ptr></typedef>
typedef struct _NT_TIB32 {
<field name="ExceptionList"><DWORD /></field>
<field name="StackBase"><DWORD /></field>
<field name="StackLimit"><DWORD /></field>
<field name="SubSystemTib"><DWORD /></field>
union {
<field name="FiberData"><DWORD /></field>
<field name="Version"><DWORD /></field>
};
<field name="ArbitraryUserPointer"><DWORD /></field>
<field name="Self"><DWORD /></field>
} NT_TIB32, *PNT_TIB32;
typedef struct _NT_TIB64 {
<field name="ExceptionList"><DWORD64 /></field>
<field name="StackBase"><DWORD64 /></field>
<field name="StackLimit"><DWORD64 /></field>
<field name="SubSystemTib"><DWORD64 /></field>
union {
<field name="FiberData"><DWORD64 /></field>
<field name="Version"><DWORD /></field>
};
<field name="ArbitraryUserPointer"><DWORD64 /></field>
<field name="Self"><DWORD64 /></field>
} NT_TIB64, *PNT_TIB64;
typedef struct _UMS_CREATE_THREAD_ATTRIBUTES { DWORD UmsVersion;
<field name="UmsContext"><PVOID /></field>
<field name="UmsCompletionList"><PVOID /></field>
} UMS_CREATE_THREAD_ATTRIBUTES, *PUMS_CREATE_THREAD_ATTRIBUTES;
typedef struct _QUOTA_LIMITS {
<field name="PagedPoolLimit"><SIZE_T /></field>
<field name="NonPagedPoolLimit"><SIZE_T /></field>
<field name="MinimumWorkingSetSize"><SIZE_T /></field>
<field name="MaximumWorkingSetSize"><SIZE_T /></field>
<field name="PagefileLimit"><SIZE_T /></field>
<field name="TimeLimit"><LARGE_INTEGER /></field>
} QUOTA_LIMITS, *PQUOTA_LIMITS;
typedef union _RATE_QUOTA_LIMIT {
<field name="RateData"><DWORD /></field>
struct {
<bitfield name="RatePercent" bits="7"><DWORD /></bitfield>
<bitfield name="Reserved0" bits="25"><DWORD /></bitfield>
} ;
} RATE_QUOTA_LIMIT, *PRATE_QUOTA_LIMIT;
typedef struct _QUOTA_LIMITS_EX {
<field name="PagedPoolLimit"><SIZE_T /></field>
<field name="NonPagedPoolLimit"><SIZE_T /></field>
<field name="MinimumWorkingSetSize"><SIZE_T /></field>
<field name="MaximumWorkingSetSize"><SIZE_T /></field>
<field name="PagefileLimit"><SIZE_T /></field>
<field name="TimeLimit"><LARGE_INTEGER /></field>
<field name="WorkingSetLimit"><SIZE_T /></field>
<field name="Reserved2"><SIZE_T /></field>
<field name="Reserved3"><SIZE_T /></field>
<field name="Reserved4"><SIZE_T /></field>
<field name="Flags"><DWORD /></field>
<field name="CpuRateLimit"><RATE_QUOTA_LIMIT /></field>
} QUOTA_LIMITS_EX, *PQUOTA_LIMITS_EX;
typedef struct _IO_COUNTERS {
<field name="ReadOperationCount"><ULONGLONG /></field>
<field name="WriteOperationCount"><ULONGLONG /></field>
<field name="OtherOperationCount"><ULONGLONG /></field>
<field name="ReadTransferCount"><ULONGLONG /></field>
<field name="WriteTransferCount"><ULONGLONG /></field>
<field name="OtherTransferCount"><ULONGLONG /></field>
} IO_COUNTERS;
<typedef name="PIO_COUNTERS"><ptr><IO_COUNTERS /></ptr></typedef>
typedef enum _HARDWARE_COUNTER_TYPE {
PMCCounter, MaxHardwareCounterType } HARDWARE_COUNTER_TYPE, *PHARDWARE_COUNTER_TYPE;
typedef struct _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION {
<field name="TotalUserTime"><LARGE_INTEGER /></field>
<field name="TotalKernelTime"><LARGE_INTEGER /></field>
<field name="ThisPeriodTotalUserTime"><LARGE_INTEGER /></field>
<field name="ThisPeriodTotalKernelTime"><LARGE_INTEGER /></field>
<field name="TotalPageFaultCount"><DWORD /></field>
<field name="TotalProcesses"><DWORD /></field>
<field name="ActiveProcesses"><DWORD /></field>
<field name="TotalTerminatedProcesses"><DWORD /></field>
} JOBOBJECT_BASIC_ACCOUNTING_INFORMATION, *PJOBOBJECT_BASIC_ACCOUNTING_INFORMATION;
typedef struct _JOBOBJECT_BASIC_LIMIT_INFORMATION {
<field name="PerProcessUserTimeLimit"><LARGE_INTEGER /></field>
<field name="PerJobUserTimeLimit"><LARGE_INTEGER /></field>
<field name="LimitFlags"><DWORD /></field>
<field name="MinimumWorkingSetSize"><SIZE_T /></field>
<field name="MaximumWorkingSetSize"><SIZE_T /></field>
<field name="ActiveProcessLimit"><DWORD /></field>
<field name="Affinity"><ULONG_PTR /></field>
<field name="PriorityClass"><DWORD /></field>
<field name="SchedulingClass"><DWORD /></field>
} JOBOBJECT_BASIC_LIMIT_INFORMATION, *PJOBOBJECT_BASIC_LIMIT_INFORMATION;
typedef struct _JOBOBJECT_EXTENDED_LIMIT_INFORMATION {
<field name="BasicLimitInformation"><JOBOBJECT_BASIC_LIMIT_INFORMATION /></field>
<field name="IoInfo"><IO_COUNTERS /></field>
<field name="ProcessMemoryLimit"><SIZE_T /></field>
<field name="JobMemoryLimit"><SIZE_T /></field>
<field name="PeakProcessMemoryUsed"><SIZE_T /></field>
<field name="PeakJobMemoryUsed"><SIZE_T /></field>
} JOBOBJECT_EXTENDED_LIMIT_INFORMATION, *PJOBOBJECT_EXTENDED_LIMIT_INFORMATION;
typedef struct _JOBOBJECT_BASIC_PROCESS_ID_LIST {
<field name="NumberOfAssignedProcesses"><DWORD /></field>
<field name="NumberOfProcessIdsInList"><DWORD /></field>
<field name="ProcessIdList"><arr length="1"><ULONG_PTR /></arr></field>
} JOBOBJECT_BASIC_PROCESS_ID_LIST, *PJOBOBJECT_BASIC_PROCESS_ID_LIST;
typedef struct _JOBOBJECT_BASIC_UI_RESTRICTIONS {
<field name="UIRestrictionsClass"><DWORD /></field>
} JOBOBJECT_BASIC_UI_RESTRICTIONS, *PJOBOBJECT_BASIC_UI_RESTRICTIONS;
typedef struct _JOBOBJECT_SECURITY_LIMIT_INFORMATION {
DWORD SecurityLimitFlags ;
HANDLE JobToken ;
PTOKEN_GROUPS SidsToDisable ;
PTOKEN_PRIVILEGES PrivilegesToDelete ;
PTOKEN_GROUPS RestrictedSids ;
} JOBOBJECT_SECURITY_LIMIT_INFORMATION, *PJOBOBJECT_SECURITY_LIMIT_INFORMATION ;
typedef struct _JOBOBJECT_END_OF_JOB_TIME_INFORMATION {
<field name="EndOfJobTimeAction"><DWORD /></field>
} JOBOBJECT_END_OF_JOB_TIME_INFORMATION, *PJOBOBJECT_END_OF_JOB_TIME_INFORMATION;
typedef struct _JOBOBJECT_ASSOCIATE_COMPLETION_PORT {
<field name="CompletionKey"><PVOID /></field>
<field name="CompletionPort"><HANDLE /></field>
} JOBOBJECT_ASSOCIATE_COMPLETION_PORT, *PJOBOBJECT_ASSOCIATE_COMPLETION_PORT;
typedef struct _JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION {
<field name="BasicInfo"><JOBOBJECT_BASIC_ACCOUNTING_INFORMATION /></field>
<field name="IoInfo"><IO_COUNTERS /></field>
} JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION, *PJOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION;
typedef struct _JOBOBJECT_JOBSET_INFORMATION {
<field name="MemberLevel"><DWORD /></field>
} JOBOBJECT_JOBSET_INFORMATION, *PJOBOBJECT_JOBSET_INFORMATION;
typedef enum _JOBOBJECTINFOCLASS {
JobObjectBasicAccountingInformation = 1, JobObjectBasicLimitInformation, JobObjectBasicProcessIdList, JobObjectBasicUIRestrictions, JobObjectSecurityLimitInformation, JobObjectEndOfJobTimeInformation, JobObjectAssociateCompletionPortInformation, JobObjectBasicAndIoAccountingInformation, JobObjectExtendedLimitInformation, JobObjectJobSetInformation, JobObjectGroupInformation, MaxJobObjectInfoClass } JOBOBJECTINFOCLASS;
typedef enum _LOGICAL_PROCESSOR_RELATIONSHIP {
RelationProcessorCore, RelationNumaNode, RelationCache, RelationProcessorPackage, RelationGroup, RelationAll = 0xffff } LOGICAL_PROCESSOR_RELATIONSHIP;
typedef enum _PROCESSOR_CACHE_TYPE {
CacheUnified, CacheInstruction, CacheData, CacheTrace } PROCESSOR_CACHE_TYPE;
typedef struct _CACHE_DESCRIPTOR {
<field name="Level"><BYTE /></field>
<field name="Associativity"><BYTE /></field>
<field name="LineSize"><WORD /></field>
<field name="Size"><DWORD /></field>
<field name="Type"><PROCESSOR_CACHE_TYPE /></field>
} CACHE_DESCRIPTOR, *PCACHE_DESCRIPTOR;
typedef struct _SYSTEM_LOGICAL_PROCESSOR_INFORMATION {
<field name="ProcessorMask"><ULONG_PTR /></field>
<field name="Relationship"><LOGICAL_PROCESSOR_RELATIONSHIP /></field>
union {
struct {
<field name="Flags"><BYTE /></field>
} ProcessorCore;
struct {
<field name="NodeNumber"><DWORD /></field>
} NumaNode;
<field name="Cache"><CACHE_DESCRIPTOR /></field>
<field name="Reserved"><arr length="2"><ULONGLONG /></arr></field>
} ;
} SYSTEM_LOGICAL_PROCESSOR_INFORMATION, *PSYSTEM_LOGICAL_PROCESSOR_INFORMATION;
typedef struct _PROCESSOR_RELATIONSHIP {
<field name="Flags"><BYTE /></field>
<field name="Reserved"><arr length="21"><BYTE /></arr></field>
<field name="GroupCount"><WORD /></field>
<field name="GroupMask"><arr length="1"><GROUP_AFFINITY /></arr></field>
} PROCESSOR_RELATIONSHIP, *PPROCESSOR_RELATIONSHIP;
typedef struct _NUMA_NODE_RELATIONSHIP {
<field name="NodeNumber"><DWORD /></field>
<field name="Reserved"><arr length="20"><BYTE /></arr></field>
<field name="GroupMask"><GROUP_AFFINITY /></field>
} NUMA_NODE_RELATIONSHIP, *PNUMA_NODE_RELATIONSHIP;
typedef struct _CACHE_RELATIONSHIP {
<field name="Level"><BYTE /></field>
<field name="Associativity"><BYTE /></field>
<field name="LineSize"><WORD /></field>
<field name="CacheSize"><DWORD /></field>
<field name="Type"><PROCESSOR_CACHE_TYPE /></field>
<field name="Reserved"><arr length="20"><BYTE /></arr></field>
<field name="GroupMask"><GROUP_AFFINITY /></field>
} CACHE_RELATIONSHIP, *PCACHE_RELATIONSHIP;
typedef struct _PROCESSOR_GROUP_INFO {
<field name="MaximumProcessorCount"><BYTE /></field>
<field name="ActiveProcessorCount"><BYTE /></field>
<field name="Reserved"><arr length="38"><BYTE /></arr></field>
<field name="ActiveProcessorMask"><KAFFINITY /></field>
} PROCESSOR_GROUP_INFO, *PPROCESSOR_GROUP_INFO;
typedef struct _GROUP_RELATIONSHIP {
<field name="MaximumGroupCount"><WORD /></field>
<field name="ActiveGroupCount"><WORD /></field>
<field name="Reserved"><arr length="20"><BYTE /></arr></field>
<field name="GroupInfo"><arr length="1"><PROCESSOR_GROUP_INFO /></arr></field>
} GROUP_RELATIONSHIP, *PGROUP_RELATIONSHIP;
struct _SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX {
<field name="Relationship"><LOGICAL_PROCESSOR_RELATIONSHIP /></field>
<field name="Size"><DWORD /></field>
union {
<field name="Processor"><PROCESSOR_RELATIONSHIP /></field>
<field name="NumaNode"><NUMA_NODE_RELATIONSHIP /></field>
<field name="Cache"><CACHE_RELATIONSHIP /></field>
<field name="Group"><GROUP_RELATIONSHIP /></field>
} ;
};
typedef struct _SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX, *PSYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX;
typedef struct _SYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION {
<field name="CycleTime"><DWORD64 /></field>
} SYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION, *PSYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION;
typedef struct _XSTATE_FEATURE {
<field name="Offset"><DWORD /></field>
<field name="Size"><DWORD /></field>
} XSTATE_FEATURE, *PXSTATE_FEATURE;
typedef struct _XSTATE_CONFIGURATION {
<field name="EnabledFeatures"><DWORD64 /></field>
<field name="Size"><DWORD /></field>
<bitfield name="OptimizedSave" bits="1"><DWORD /></bitfield>
<field name="Features"><arr length="64"><XSTATE_FEATURE /></arr></field>
} XSTATE_CONFIGURATION, *PXSTATE_CONFIGURATION;
typedef struct _MEMORY_BASIC_INFORMATION {
<field name="BaseAddress"><PVOID /></field>
<field name="AllocationBase"><PVOID /></field>
<field name="AllocationProtect"><DWORD /></field>
<field name="RegionSize"><SIZE_T /></field>
<field name="State"><DWORD /></field>
<field name="Protect"><DWORD /></field>
<field name="Type"><DWORD /></field>
} MEMORY_BASIC_INFORMATION, *PMEMORY_BASIC_INFORMATION;
typedef struct _MEMORY_BASIC_INFORMATION32 {
<field name="BaseAddress"><DWORD /></field>
<field name="AllocationBase"><DWORD /></field>
<field name="AllocationProtect"><DWORD /></field>
<field name="RegionSize"><DWORD /></field>
<field name="State"><DWORD /></field>
<field name="Protect"><DWORD /></field>
<field name="Type"><DWORD /></field>
} MEMORY_BASIC_INFORMATION32, *PMEMORY_BASIC_INFORMATION32;
typedef struct __declspec(align(16)) _MEMORY_BASIC_INFORMATION64 {
<field name="BaseAddress"><ULONGLONG /></field>
<field name="AllocationBase"><ULONGLONG /></field>
<field name="AllocationProtect"><DWORD /></field>
<field name="__alignment1"><DWORD /></field>
<field name="RegionSize"><ULONGLONG /></field>
<field name="State"><DWORD /></field>
<field name="Protect"><DWORD /></field>
<field name="Type"><DWORD /></field>
<field name="__alignment2"><DWORD /></field>
} MEMORY_BASIC_INFORMATION64, *PMEMORY_BASIC_INFORMATION64;
typedef struct _FILE_NOTIFY_INFORMATION {
<field name="NextEntryOffset"><DWORD /></field>
<field name="Action"><DWORD /></field>
<field name="FileNameLength"><DWORD /></field>
<field name="FileName"><arr length="1"><WCHAR /></arr></field>
} FILE_NOTIFY_INFORMATION, *PFILE_NOTIFY_INFORMATION;
typedef union _FILE_SEGMENT_ELEMENT {
<field name="Buffer"><PVOID64 /></field>
<field name="Alignment"><ULONGLONG /></field>
}FILE_SEGMENT_ELEMENT, *PFILE_SEGMENT_ELEMENT;
typedef struct _REPARSE_GUID_DATA_BUFFER {
<field name="ReparseTag"><DWORD /></field>
<field name="ReparseDataLength"><WORD /></field>
<field name="Reserved"><WORD /></field>
<field name="ReparseGuid"><GUID /></field>
struct {
<field name="DataBuffer"><arr length="1"><BYTE /></arr></field>
} GenericReparseBuffer;
} REPARSE_GUID_DATA_BUFFER, *PREPARSE_GUID_DATA_BUFFER;
extern const GUID GUID_MAX_POWER_SAVINGS;
extern const GUID GUID_MIN_POWER_SAVINGS;
extern const GUID GUID_TYPICAL_POWER_SAVINGS;
extern const GUID NO_SUBGROUP_GUID;
extern const GUID ALL_POWERSCHEMES_GUID;
extern const GUID GUID_POWERSCHEME_PERSONALITY;
extern const GUID GUID_ACTIVE_POWERSCHEME;
extern const GUID GUID_VIDEO_SUBGROUP;
extern const GUID GUID_VIDEO_POWERDOWN_TIMEOUT;
extern const GUID GUID_VIDEO_ANNOYANCE_TIMEOUT;
extern const GUID GUID_VIDEO_ADAPTIVE_PERCENT_INCREASE;
extern const GUID GUID_VIDEO_DIM_TIMEOUT;
extern const GUID GUID_VIDEO_ADAPTIVE_POWERDOWN;
extern const GUID GUID_MONITOR_POWER_ON;
extern const GUID GUID_DEVICE_POWER_POLICY_VIDEO_BRIGHTNESS;
extern const GUID GUID_DEVICE_POWER_POLICY_VIDEO_DIM_BRIGHTNESS;
extern const GUID GUID_VIDEO_CURRENT_MONITOR_BRIGHTNESS;
extern const GUID GUID_VIDEO_ADAPTIVE_DISPLAY_BRIGHTNESS;
extern const GUID GUID_SESSION_DISPLAY_STATE;
extern const GUID GUID_CONSOLE_DISPLAY_STATE;
extern const GUID GUID_ALLOW_DISPLAY_REQUIRED;
extern const GUID GUID_DISK_SUBGROUP;
extern const GUID GUID_DISK_POWERDOWN_TIMEOUT;
extern const GUID GUID_DISK_BURST_IGNORE_THRESHOLD;
extern const GUID GUID_DISK_ADAPTIVE_POWERDOWN;
extern const GUID GUID_SLEEP_SUBGROUP;
extern const GUID GUID_SLEEP_IDLE_THRESHOLD;
extern const GUID GUID_STANDBY_TIMEOUT;
extern const GUID GUID_UNATTEND_SLEEP_TIMEOUT;
extern const GUID GUID_HIBERNATE_TIMEOUT;
extern const GUID GUID_HIBERNATE_FASTS4_POLICY;
extern const GUID GUID_CRITICAL_POWER_TRANSITION;
extern const GUID GUID_SYSTEM_AWAYMODE;
extern const GUID GUID_ALLOW_AWAYMODE;
extern const GUID GUID_ALLOW_STANDBY_STATES;
extern const GUID GUID_ALLOW_RTC_WAKE;
extern const GUID GUID_ALLOW_SYSTEM_REQUIRED;
extern const GUID GUID_SYSTEM_BUTTON_SUBGROUP;
extern const GUID GUID_POWERBUTTON_ACTION;
extern const GUID GUID_POWERBUTTON_ACTION_FLAGS;
extern const GUID GUID_SLEEPBUTTON_ACTION;
extern const GUID GUID_SLEEPBUTTON_ACTION_FLAGS;
extern const GUID GUID_USERINTERFACEBUTTON_ACTION;
extern const GUID GUID_LIDCLOSE_ACTION;
extern const GUID GUID_LIDCLOSE_ACTION_FLAGS;
extern const GUID GUID_LIDOPEN_POWERSTATE;
extern const GUID GUID_BATTERY_SUBGROUP;
extern const GUID GUID_BATTERY_DISCHARGE_ACTION_0;
extern const GUID GUID_BATTERY_DISCHARGE_LEVEL_0;
extern const GUID GUID_BATTERY_DISCHARGE_FLAGS_0;
extern const GUID GUID_BATTERY_DISCHARGE_ACTION_1;
extern const GUID GUID_BATTERY_DISCHARGE_LEVEL_1;
extern const GUID GUID_BATTERY_DISCHARGE_FLAGS_1;
extern const GUID GUID_BATTERY_DISCHARGE_ACTION_2;
extern const GUID GUID_BATTERY_DISCHARGE_LEVEL_2;
extern const GUID GUID_BATTERY_DISCHARGE_FLAGS_2;
extern const GUID GUID_BATTERY_DISCHARGE_ACTION_3;
extern const GUID GUID_BATTERY_DISCHARGE_LEVEL_3;
extern const GUID GUID_BATTERY_DISCHARGE_FLAGS_3;
extern const GUID GUID_PROCESSOR_SETTINGS_SUBGROUP;
extern const GUID GUID_PROCESSOR_THROTTLE_POLICY;
extern const GUID GUID_PROCESSOR_THROTTLE_MAXIMUM;
extern const GUID GUID_PROCESSOR_THROTTLE_MINIMUM;
extern const GUID GUID_PROCESSOR_ALLOW_THROTTLING;
extern const GUID GUID_PROCESSOR_IDLESTATE_POLICY;
extern const GUID GUID_PROCESSOR_PERFSTATE_POLICY;
extern const GUID GUID_PROCESSOR_PERF_INCREASE_THRESHOLD;
extern const GUID GUID_PROCESSOR_PERF_DECREASE_THRESHOLD;
extern const GUID GUID_PROCESSOR_PERF_INCREASE_POLICY;
extern const GUID GUID_PROCESSOR_PERF_DECREASE_POLICY;
extern const GUID GUID_PROCESSOR_PERF_INCREASE_TIME;
extern const GUID GUID_PROCESSOR_PERF_DECREASE_TIME;
extern const GUID GUID_PROCESSOR_PERF_TIME_CHECK;
extern const GUID GUID_PROCESSOR_PERF_BOOST_POLICY;
extern const GUID GUID_PROCESSOR_IDLE_ALLOW_SCALING;
extern const GUID GUID_PROCESSOR_IDLE_DISABLE;
extern const GUID GUID_PROCESSOR_IDLE_TIME_CHECK;
extern const GUID GUID_PROCESSOR_IDLE_DEMOTE_THRESHOLD;
extern const GUID GUID_PROCESSOR_IDLE_PROMOTE_THRESHOLD;
extern const GUID GUID_PROCESSOR_CORE_PARKING_INCREASE_THRESHOLD;
extern const GUID GUID_PROCESSOR_CORE_PARKING_DECREASE_THRESHOLD;
extern const GUID GUID_PROCESSOR_CORE_PARKING_INCREASE_POLICY;
extern const GUID GUID_PROCESSOR_CORE_PARKING_DECREASE_POLICY;
extern const GUID GUID_PROCESSOR_CORE_PARKING_MAX_CORES;
extern const GUID GUID_PROCESSOR_CORE_PARKING_MIN_CORES;
extern const GUID GUID_PROCESSOR_CORE_PARKING_INCREASE_TIME;
extern const GUID GUID_PROCESSOR_CORE_PARKING_DECREASE_TIME;
extern const GUID GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_DECREASE_FACTOR;
extern const GUID GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_THRESHOLD;
extern const GUID GUID_PROCESSOR_CORE_PARKING_AFFINITY_WEIGHTING;
extern const GUID GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_DECREASE_FACTOR;
extern const GUID GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_THRESHOLD;
extern const GUID GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_WEIGHTING;
extern const GUID GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_THRESHOLD;
extern const GUID GUID_PROCESSOR_PARKING_CORE_OVERRIDE;
extern const GUID GUID_PROCESSOR_PARKING_PERF_STATE;
extern const GUID GUID_PROCESSOR_PERF_HISTORY;
extern const GUID GUID_SYSTEM_COOLING_POLICY;
extern const GUID GUID_LOCK_CONSOLE_ON_WAKE;
extern const GUID GUID_DEVICE_IDLE_POLICY;
extern const GUID GUID_ACDC_POWER_SOURCE;
extern const GUID GUID_LIDSWITCH_STATE_CHANGE;
extern const GUID GUID_BATTERY_PERCENTAGE_REMAINING;
extern const GUID GUID_IDLE_BACKGROUND_TASK;
extern const GUID GUID_BACKGROUND_TASK_NOTIFICATION;
extern const GUID GUID_APPLAUNCH_BUTTON;
extern const GUID GUID_PCIEXPRESS_SETTINGS_SUBGROUP;
extern const GUID GUID_PCIEXPRESS_ASPM_POLICY;
extern const GUID GUID_ENABLE_SWITCH_FORCED_SHUTDOWN;
typedef enum _SYSTEM_POWER_STATE {
PowerSystemUnspecified = 0, PowerSystemWorking = 1, PowerSystemSleeping1 = 2, PowerSystemSleeping2 = 3, PowerSystemSleeping3 = 4, PowerSystemHibernate = 5, PowerSystemShutdown = 6, PowerSystemMaximum = 7 } SYSTEM_POWER_STATE, *PSYSTEM_POWER_STATE;
typedef enum {
PowerActionNone = 0, PowerActionReserved, PowerActionSleep, PowerActionHibernate, PowerActionShutdown, PowerActionShutdownReset, PowerActionShutdownOff, PowerActionWarmEject } POWER_ACTION, *PPOWER_ACTION;
typedef enum _DEVICE_POWER_STATE {
PowerDeviceUnspecified = 0, PowerDeviceD0, PowerDeviceD1, PowerDeviceD2, PowerDeviceD3, PowerDeviceMaximum } DEVICE_POWER_STATE, *PDEVICE_POWER_STATE;
typedef enum _MONITOR_DISPLAY_STATE {
PowerMonitorOff = 0, PowerMonitorOn, PowerMonitorDim } MONITOR_DISPLAY_STATE, *PMONITOR_DISPLAY_STATE;
<typedef name="EXECUTION_STATE"><DWORD /></typedef>
<typedef name="PEXECUTION_STATE"><ptr><DWORD /></ptr></typedef>
typedef enum {
LT_DONT_CARE, LT_LOWEST_LATENCY } LATENCY_TIME;
typedef enum _POWER_REQUEST_TYPE {
PowerRequestDisplayRequired, PowerRequestSystemRequired, PowerRequestAwayModeRequired } POWER_REQUEST_TYPE, *PPOWER_REQUEST_TYPE;
typedef struct CM_Power_Data_s {
<field name="PD_Size"><DWORD /></field>
<field name="PD_MostRecentPowerState"><DEVICE_POWER_STATE /></field>
<field name="PD_Capabilities"><DWORD /></field>
<field name="PD_D1Latency"><DWORD /></field>
<field name="PD_D2Latency"><DWORD /></field>
<field name="PD_D3Latency"><DWORD /></field>
<field name="PD_PowerStateMapping"><arr length="7"><DEVICE_POWER_STATE /></arr></field>
<field name="PD_DeepestSystemWake"><SYSTEM_POWER_STATE /></field>
} CM_POWER_DATA, *PCM_POWER_DATA;
typedef enum {
SystemPowerPolicyAc, SystemPowerPolicyDc, VerifySystemPolicyAc, VerifySystemPolicyDc, SystemPowerCapabilities, SystemBatteryState, SystemPowerStateHandler, ProcessorStateHandler, SystemPowerPolicyCurrent, AdministratorPowerPolicy, SystemReserveHiberFile, ProcessorInformation, SystemPowerInformation, ProcessorStateHandler2, LastWakeTime, LastSleepTime, SystemExecutionState, SystemPowerStateNotifyHandler, ProcessorPowerPolicyAc, ProcessorPowerPolicyDc, VerifyProcessorPowerPolicyAc, VerifyProcessorPowerPolicyDc, ProcessorPowerPolicyCurrent, SystemPowerStateLogging, SystemPowerLoggingEntry, SetPowerSettingValue, NotifyUserPowerSetting, PowerInformationLevelUnused0, PowerInformationLevelUnused1, SystemVideoState, TraceApplicationPowerMessage, TraceApplicationPowerMessageEnd, ProcessorPerfStates, ProcessorIdleStates, ProcessorCap, SystemWakeSource, SystemHiberFileInformation, TraceServicePowerMessage, ProcessorLoad, PowerShutdownNotification, MonitorCapabilities, SessionPowerInit, SessionDisplayState, PowerRequestCreate, PowerRequestAction, GetPowerRequestList, ProcessorInformationEx, NotifyUserModeLegacyPowerEvent, GroupPark, ProcessorIdleDomains, WakeTimerList, SystemHiberFileSize, PowerInformationLevelMaximum } POWER_INFORMATION_LEVEL;
typedef enum {
PoAc, PoDc, PoHot, PoConditionMaximum } SYSTEM_POWER_CONDITION;
typedef struct {
<field name="Version"><DWORD /></field>
<field name="Guid"><GUID /></field>
<field name="PowerCondition"><SYSTEM_POWER_CONDITION /></field>
<field name="DataLength"><DWORD /></field>
<field name="Data"><arr length="1"><BYTE /></arr></field>
} SET_POWER_SETTING_VALUE, *PSET_POWER_SETTING_VALUE;
typedef struct {
<field name="Guid"><GUID /></field>
} NOTIFY_USER_POWER_SETTING, *PNOTIFY_USER_POWER_SETTING;
typedef struct _APPLICATIONLAUNCH_SETTING_VALUE {
<field name="ActivationTime"><LARGE_INTEGER /></field>
<field name="Flags"><DWORD /></field>
<field name="ButtonInstanceID"><DWORD /></field>
} APPLICATIONLAUNCH_SETTING_VALUE, *PAPPLICATIONLAUNCH_SETTING_VALUE;
typedef enum {
PlatformRoleUnspecified = 0, PlatformRoleDesktop, PlatformRoleMobile, PlatformRoleWorkstation, PlatformRoleEnterpriseServer, PlatformRoleSOHOServer, PlatformRoleAppliancePC, PlatformRolePerformanceServer, PlatformRoleMaximum } POWER_PLATFORM_ROLE;
typedef struct {
<field name="Granularity"><DWORD /></field>
<field name="Capacity"><DWORD /></field>
} BATTERY_REPORTING_SCALE, *PBATTERY_REPORTING_SCALE;
typedef struct {
<field name="Frequency"><DWORD /></field>
<field name="Flags"><DWORD /></field>
<field name="PercentFrequency"><DWORD /></field>
} PPM_WMI_LEGACY_PERFSTATE, *PPPM_WMI_LEGACY_PERFSTATE;
typedef struct {
<field name="Latency"><DWORD /></field>
<field name="Power"><DWORD /></field>
<field name="TimeCheck"><DWORD /></field>
<field name="PromotePercent"><BYTE /></field>
<field name="DemotePercent"><BYTE /></field>
<field name="StateType"><BYTE /></field>
<field name="Reserved"><BYTE /></field>
<field name="StateFlags"><DWORD /></field>
<field name="Context"><DWORD /></field>
<field name="IdleHandler"><DWORD /></field>
<field name="Reserved1"><DWORD /></field>
} PPM_WMI_IDLE_STATE, *PPPM_WMI_IDLE_STATE;
typedef struct {
<field name="Type"><DWORD /></field>
<field name="Count"><DWORD /></field>
<field name="TargetState"><DWORD /></field>
<field name="OldState"><DWORD /></field>
<field name="TargetProcessors"><DWORD64 /></field>
<field name="State"><arr length="1"><PPM_WMI_IDLE_STATE /></arr></field>
} PPM_WMI_IDLE_STATES, *PPPM_WMI_IDLE_STATES;
typedef struct {
<field name="Type"><DWORD /></field>
<field name="Count"><DWORD /></field>
<field name="TargetState"><DWORD /></field>
<field name="OldState"><DWORD /></field>
<field name="TargetProcessors"><PVOID /></field>
<field name="State"><arr length="1"><PPM_WMI_IDLE_STATE /></arr></field>
} PPM_WMI_IDLE_STATES_EX, *PPPM_WMI_IDLE_STATES_EX;
typedef struct {
<field name="Frequency"><DWORD /></field>
<field name="Power"><DWORD /></field>
<field name="PercentFrequency"><BYTE /></field>
<field name="IncreaseLevel"><BYTE /></field>
<field name="DecreaseLevel"><BYTE /></field>
<field name="Type"><BYTE /></field>
<field name="IncreaseTime"><DWORD /></field>
<field name="DecreaseTime"><DWORD /></field>
<field name="Control"><DWORD64 /></field>
<field name="Status"><DWORD64 /></field>
<field name="HitCount"><DWORD /></field>
<field name="Reserved1"><DWORD /></field>
<field name="Reserved2"><DWORD64 /></field>
<field name="Reserved3"><DWORD64 /></field>
} PPM_WMI_PERF_STATE, *PPPM_WMI_PERF_STATE;
typedef struct {
<field name="Count"><DWORD /></field>
<field name="MaxFrequency"><DWORD /></field>
<field name="CurrentState"><DWORD /></field>
<field name="MaxPerfState"><DWORD /></field>
<field name="MinPerfState"><DWORD /></field>
<field name="LowestPerfState"><DWORD /></field>
<field name="ThermalConstraint"><DWORD /></field>
<field name="BusyAdjThreshold"><BYTE /></field>
<field name="PolicyType"><BYTE /></field>
<field name="Type"><BYTE /></field>
<field name="Reserved"><BYTE /></field>
<field name="TimerInterval"><DWORD /></field>
<field name="TargetProcessors"><DWORD64 /></field>
<field name="PStateHandler"><DWORD /></field>
<field name="PStateContext"><DWORD /></field>
<field name="TStateHandler"><DWORD /></field>
<field name="TStateContext"><DWORD /></field>
<field name="FeedbackHandler"><DWORD /></field>
<field name="Reserved1"><DWORD /></field>
<field name="Reserved2"><DWORD64 /></field>
<field name="State"><arr length="1"><PPM_WMI_PERF_STATE /></arr></field>
} PPM_WMI_PERF_STATES, *PPPM_WMI_PERF_STATES;
typedef struct {
<field name="Count"><DWORD /></field>
<field name="MaxFrequency"><DWORD /></field>
<field name="CurrentState"><DWORD /></field>
<field name="MaxPerfState"><DWORD /></field>
<field name="MinPerfState"><DWORD /></field>
<field name="LowestPerfState"><DWORD /></field>
<field name="ThermalConstraint"><DWORD /></field>
<field name="BusyAdjThreshold"><BYTE /></field>
<field name="PolicyType"><BYTE /></field>
<field name="Type"><BYTE /></field>
<field name="Reserved"><BYTE /></field>
<field name="TimerInterval"><DWORD /></field>
<field name="TargetProcessors"><PVOID /></field>
<field name="PStateHandler"><DWORD /></field>
<field name="PStateContext"><DWORD /></field>
<field name="TStateHandler"><DWORD /></field>
<field name="TStateContext"><DWORD /></field>
<field name="FeedbackHandler"><DWORD /></field>
<field name="Reserved1"><DWORD /></field>
<field name="Reserved2"><DWORD64 /></field>
<field name="State"><arr length="1"><PPM_WMI_PERF_STATE /></arr></field>
} PPM_WMI_PERF_STATES_EX, *PPPM_WMI_PERF_STATES_EX;
typedef struct {
<field name="IdleTransitions"><DWORD /></field>
<field name="FailedTransitions"><DWORD /></field>
<field name="InvalidBucketIndex"><DWORD /></field>
<field name="TotalTime"><DWORD64 /></field>
<field name="IdleTimeBuckets"><arr length="6"><DWORD /></arr></field>
} PPM_IDLE_STATE_ACCOUNTING, *PPPM_IDLE_STATE_ACCOUNTING;
typedef struct {
<field name="StateCount"><DWORD /></field>
<field name="TotalTransitions"><DWORD /></field>
<field name="ResetCount"><DWORD /></field>
<field name="StartTime"><DWORD64 /></field>
<field name="State"><arr length="1"><PPM_IDLE_STATE_ACCOUNTING /></arr></field>
} PPM_IDLE_ACCOUNTING, *PPPM_IDLE_ACCOUNTING;
typedef struct {
<field name="TotalTimeUs"><DWORD64 /></field>
<field name="MinTimeUs"><DWORD /></field>
<field name="MaxTimeUs"><DWORD /></field>
<field name="Count"><DWORD /></field>
} PPM_IDLE_STATE_BUCKET_EX, *PPPM_IDLE_STATE_BUCKET_EX;
typedef struct {
<field name="TotalTime"><DWORD64 /></field>
<field name="IdleTransitions"><DWORD /></field>
<field name="FailedTransitions"><DWORD /></field>
<field name="InvalidBucketIndex"><DWORD /></field>
<field name="MinTimeUs"><DWORD /></field>
<field name="MaxTimeUs"><DWORD /></field>
<field name="IdleTimeBuckets"><arr length="16"><PPM_IDLE_STATE_BUCKET_EX /></arr></field>
} PPM_IDLE_STATE_ACCOUNTING_EX, *PPPM_IDLE_STATE_ACCOUNTING_EX;
typedef struct {
<field name="StateCount"><DWORD /></field>
<field name="TotalTransitions"><DWORD /></field>
<field name="ResetCount"><DWORD /></field>
<field name="StartTime"><DWORD64 /></field>
<field name="State"><arr length="1"><PPM_IDLE_STATE_ACCOUNTING_EX /></arr></field>
} PPM_IDLE_ACCOUNTING_EX, *PPPM_IDLE_ACCOUNTING_EX;
extern const GUID PPM_PERFSTATE_CHANGE_GUID;
extern const GUID PPM_PERFSTATE_DOMAIN_CHANGE_GUID;
extern const GUID PPM_IDLESTATE_CHANGE_GUID;
extern const GUID PPM_PERFSTATES_DATA_GUID;
extern const GUID PPM_IDLESTATES_DATA_GUID;
extern const GUID PPM_IDLE_ACCOUNTING_GUID;
extern const GUID PPM_IDLE_ACCOUNTING_EX_GUID;
extern const GUID PPM_THERMALCONSTRAINT_GUID;
extern const GUID PPM_PERFMON_PERFSTATE_GUID;
extern const GUID PPM_THERMAL_POLICY_CHANGE_GUID;
typedef struct {
<field name="State"><DWORD /></field>
<field name="Status"><DWORD /></field>
<field name="Latency"><DWORD /></field>
<field name="Speed"><DWORD /></field>
<field name="Processor"><DWORD /></field>
} PPM_PERFSTATE_EVENT, *PPPM_PERFSTATE_EVENT;
typedef struct {
<field name="State"><DWORD /></field>
<field name="Latency"><DWORD /></field>
<field name="Speed"><DWORD /></field>
<field name="Processors"><DWORD64 /></field>
} PPM_PERFSTATE_DOMAIN_EVENT, *PPPM_PERFSTATE_DOMAIN_EVENT;
typedef struct {
<field name="NewState"><DWORD /></field>
<field name="OldState"><DWORD /></field>
<field name="Processors"><DWORD64 /></field>
} PPM_IDLESTATE_EVENT, *PPPM_IDLESTATE_EVENT;
typedef struct {
<field name="ThermalConstraint"><DWORD /></field>
<field name="Processors"><DWORD64 /></field>
} PPM_THERMALCHANGE_EVENT, *PPPM_THERMALCHANGE_EVENT;
typedef struct {
<field name="Mode"><BYTE /></field>
<field name="Processors"><DWORD64 /></field>
} PPM_THERMAL_POLICY_EVENT, *PPPM_THERMAL_POLICY_EVENT;
typedef struct {
<field name="Action"><POWER_ACTION /></field>
<field name="Flags"><DWORD /></field>
<field name="EventCode"><DWORD /></field>
} POWER_ACTION_POLICY, *PPOWER_ACTION_POLICY;
typedef struct {
<field name="Enable"><BOOLEAN /></field>
<field name="Spare"><arr length="3"><BYTE /></arr></field>
<field name="BatteryLevel"><DWORD /></field>
<field name="PowerPolicy"><POWER_ACTION_POLICY /></field>
<field name="MinSystemState"><SYSTEM_POWER_STATE /></field>
} SYSTEM_POWER_LEVEL, *PSYSTEM_POWER_LEVEL;
typedef struct _SYSTEM_POWER_POLICY {
<field name="Revision"><DWORD /></field>
<field name="PowerButton"><POWER_ACTION_POLICY /></field>
<field name="SleepButton"><POWER_ACTION_POLICY /></field>
<field name="LidClose"><POWER_ACTION_POLICY /></field>
<field name="LidOpenWake"><SYSTEM_POWER_STATE /></field>
<field name="Reserved"><DWORD /></field>
<field name="Idle"><POWER_ACTION_POLICY /></field>
<field name="IdleTimeout"><DWORD /></field>
<field name="IdleSensitivity"><BYTE /></field>
<field name="DynamicThrottle"><BYTE /></field>
<field name="Spare2"><arr length="2"><BYTE /></arr></field>
<field name="MinSleep"><SYSTEM_POWER_STATE /></field>
<field name="MaxSleep"><SYSTEM_POWER_STATE /></field>
<field name="ReducedLatencySleep"><SYSTEM_POWER_STATE /></field>
<field name="WinLogonFlags"><DWORD /></field>
<field name="Spare3"><DWORD /></field>
<field name="DozeS4Timeout"><DWORD /></field>
<field name="BroadcastCapacityResolution"><DWORD /></field>
<field name="DischargePolicy"><arr length="4"><SYSTEM_POWER_LEVEL /></arr></field>
<field name="VideoTimeout"><DWORD /></field>
<field name="VideoDimDisplay"><BOOLEAN /></field>
<field name="VideoReserved"><arr length="3"><DWORD /></arr></field>
<field name="SpindownTimeout"><DWORD /></field>
<field name="OptimizeForPower"><BOOLEAN /></field>
<field name="FanThrottleTolerance"><BYTE /></field>
<field name="ForcedThrottle"><BYTE /></field>
<field name="MinThrottle"><BYTE /></field>
<field name="OverThrottled"><POWER_ACTION_POLICY /></field>
} SYSTEM_POWER_POLICY, *PSYSTEM_POWER_POLICY;
typedef struct {
<field name="TimeCheck"><DWORD /></field>
<field name="DemotePercent"><BYTE /></field>
<field name="PromotePercent"><BYTE /></field>
<field name="Spare"><arr length="2"><BYTE /></arr></field>
} PROCESSOR_IDLESTATE_INFO, *PPROCESSOR_IDLESTATE_INFO;
typedef struct {
<field name="Revision"><WORD /></field>
union {
WORD AsWORD ;
struct {
<bitfield name="AllowScaling" bits="1"><WORD /></bitfield>
<bitfield name="Disabled" bits="1"><WORD /></bitfield>
<bitfield name="Reserved" bits="14"><WORD /></bitfield>
} ;
} Flags;
<field name="PolicyCount"><DWORD /></field>
<field name="Policy"><arr length="0x3"><PROCESSOR_IDLESTATE_INFO /></arr></field>
} PROCESSOR_IDLESTATE_POLICY, *PPROCESSOR_IDLESTATE_POLICY;
typedef struct _PROCESSOR_POWER_POLICY_INFO {
<field name="TimeCheck"><DWORD /></field>
<field name="DemoteLimit"><DWORD /></field>
<field name="PromoteLimit"><DWORD /></field>
<field name="DemotePercent"><BYTE /></field>
<field name="PromotePercent"><BYTE /></field>
<field name="Spare"><arr length="2"><BYTE /></arr></field>
<bitfield name="AllowDemotion" bits="1"><DWORD /></bitfield>
<bitfield name="AllowPromotion" bits="1"><DWORD /></bitfield>
<bitfield name="Reserved" bits="30"><DWORD /></bitfield>
} PROCESSOR_POWER_POLICY_INFO, *PPROCESSOR_POWER_POLICY_INFO;
typedef struct _PROCESSOR_POWER_POLICY {
<field name="Revision"><DWORD /></field>
<field name="DynamicThrottle"><BYTE /></field>
<field name="Spare"><arr length="3"><BYTE /></arr></field>
<bitfield name="DisableCStates" bits="1"><DWORD /></bitfield>
<bitfield name="Reserved" bits="31"><DWORD /></bitfield>
<field name="PolicyCount"><DWORD /></field>
<field name="Policy"><arr length="3"><PROCESSOR_POWER_POLICY_INFO /></arr></field>
} PROCESSOR_POWER_POLICY, *PPROCESSOR_POWER_POLICY;
typedef struct {
<field name="Revision"><DWORD /></field>
<field name="MaxThrottle"><BYTE /></field>
<field name="MinThrottle"><BYTE /></field>
<field name="BusyAdjThreshold"><BYTE /></field>
union {
<field name="Spare"><BYTE /></field>
union {
BYTE AsBYTE ;
struct {
<bitfield name="NoDomainAccounting" bits="1"><BYTE /></bitfield>
<bitfield name="IncreasePolicy" bits="2"><BYTE /></bitfield>
<bitfield name="DecreasePolicy" bits="2"><BYTE /></bitfield>
<bitfield name="Reserved" bits="3"><BYTE /></bitfield>
} ;
} Flags;
} ;
<field name="TimeCheck"><DWORD /></field>
<field name="IncreaseTime"><DWORD /></field>
<field name="DecreaseTime"><DWORD /></field>
<field name="IncreasePercent"><DWORD /></field>
<field name="DecreasePercent"><DWORD /></field>
} PROCESSOR_PERFSTATE_POLICY, *PPROCESSOR_PERFSTATE_POLICY;
typedef struct _ADMINISTRATOR_POWER_POLICY {
<field name="MinSleep"><SYSTEM_POWER_STATE /></field>
<field name="MaxSleep"><SYSTEM_POWER_STATE /></field>
<field name="MinVideoTimeout"><DWORD /></field>
<field name="MaxVideoTimeout"><DWORD /></field>
<field name="MinSpindownTimeout"><DWORD /></field>
<field name="MaxSpindownTimeout"><DWORD /></field>
} ADMINISTRATOR_POWER_POLICY, *PADMINISTRATOR_POWER_POLICY;
typedef struct {
<field name="PowerButtonPresent"><BOOLEAN /></field>
<field name="SleepButtonPresent"><BOOLEAN /></field>
<field name="LidPresent"><BOOLEAN /></field>
<field name="SystemS1"><BOOLEAN /></field>
<field name="SystemS2"><BOOLEAN /></field>
<field name="SystemS3"><BOOLEAN /></field>
<field name="SystemS4"><BOOLEAN /></field>
<field name="SystemS5"><BOOLEAN /></field>
<field name="HiberFilePresent"><BOOLEAN /></field>
<field name="FullWake"><BOOLEAN /></field>
<field name="VideoDimPresent"><BOOLEAN /></field>
<field name="ApmPresent"><BOOLEAN /></field>
<field name="UpsPresent"><BOOLEAN /></field>
<field name="ThermalControl"><BOOLEAN /></field>
<field name="ProcessorThrottle"><BOOLEAN /></field>
<field name="ProcessorMinThrottle"><BYTE /></field>
<field name="ProcessorMaxThrottle"><BYTE /></field>
<field name="FastSystemS4"><BOOLEAN /></field>
<field name="spare2"><arr length="3"><BYTE /></arr></field>
<field name="DiskSpinDown"><BOOLEAN /></field>
<field name="spare3"><arr length="8"><BYTE /></arr></field>
<field name="SystemBatteriesPresent"><BOOLEAN /></field>
<field name="BatteriesAreShortTerm"><BOOLEAN /></field>
<field name="BatteryScale"><arr length="3"><BATTERY_REPORTING_SCALE /></arr></field>
<field name="AcOnLineWake"><SYSTEM_POWER_STATE /></field>
<field name="SoftLidWake"><SYSTEM_POWER_STATE /></field>
<field name="RtcWake"><SYSTEM_POWER_STATE /></field>
<field name="MinDeviceWakeState"><SYSTEM_POWER_STATE /></field>
<field name="DefaultLowLatencyWake"><SYSTEM_POWER_STATE /></field>
} SYSTEM_POWER_CAPABILITIES, *PSYSTEM_POWER_CAPABILITIES;
typedef struct {
<field name="AcOnLine"><BOOLEAN /></field>
<field name="BatteryPresent"><BOOLEAN /></field>
<field name="Charging"><BOOLEAN /></field>
<field name="Discharging"><BOOLEAN /></field>
<field name="Spare1"><arr length="4"><BOOLEAN /></arr></field>
<field name="MaxCapacity"><DWORD /></field>
<field name="RemainingCapacity"><DWORD /></field>
<field name="Rate"><DWORD /></field>
<field name="EstimatedTime"><DWORD /></field>
<field name="DefaultAlert1"><DWORD /></field>
<field name="DefaultAlert2"><DWORD /></field>
} SYSTEM_BATTERY_STATE, *PSYSTEM_BATTERY_STATE;
typedef struct _IMAGE_DOS_HEADER { WORD e_magic;
<field name="e_cblp"><WORD /></field>
<field name="e_cp"><WORD /></field>
<field name="e_crlc"><WORD /></field>
<field name="e_cparhdr"><WORD /></field>
<field name="e_minalloc"><WORD /></field>
<field name="e_maxalloc"><WORD /></field>
<field name="e_ss"><WORD /></field>
<field name="e_sp"><WORD /></field>
<field name="e_csum"><WORD /></field>
<field name="e_ip"><WORD /></field>
<field name="e_cs"><WORD /></field>
<field name="e_lfarlc"><WORD /></field>
<field name="e_ovno"><WORD /></field>
<field name="e_res"><arr length="4"><WORD /></arr></field>
<field name="e_oemid"><WORD /></field>
<field name="e_oeminfo"><WORD /></field>
<field name="e_res2"><arr length="10"><WORD /></arr></field>
<field name="e_lfanew"><LONG /></field>
} IMAGE_DOS_HEADER, *PIMAGE_DOS_HEADER;
typedef struct _IMAGE_OS2_HEADER { WORD ne_magic;
<field name="ne_ver"><CHAR /></field>
<field name="ne_rev"><CHAR /></field>
<field name="ne_enttab"><WORD /></field>
<field name="ne_cbenttab"><WORD /></field>
<field name="ne_crc"><LONG /></field>
<field name="ne_flags"><WORD /></field>
<field name="ne_autodata"><WORD /></field>
<field name="ne_heap"><WORD /></field>
<field name="ne_stack"><WORD /></field>
<field name="ne_csip"><LONG /></field>
<field name="ne_sssp"><LONG /></field>
<field name="ne_cseg"><WORD /></field>
<field name="ne_cmod"><WORD /></field>
<field name="ne_cbnrestab"><WORD /></field>
<field name="ne_segtab"><WORD /></field>
<field name="ne_rsrctab"><WORD /></field>
<field name="ne_restab"><WORD /></field>
<field name="ne_modtab"><WORD /></field>
<field name="ne_imptab"><WORD /></field>
<field name="ne_nrestab"><LONG /></field>
<field name="ne_cmovent"><WORD /></field>
<field name="ne_align"><WORD /></field>
<field name="ne_cres"><WORD /></field>
<field name="ne_exetyp"><BYTE /></field>
<field name="ne_flagsothers"><BYTE /></field>
<field name="ne_pretthunks"><WORD /></field>
<field name="ne_psegrefbytes"><WORD /></field>
<field name="ne_swaparea"><WORD /></field>
<field name="ne_expver"><WORD /></field>
} IMAGE_OS2_HEADER, *PIMAGE_OS2_HEADER;
typedef struct _IMAGE_VXD_HEADER { WORD e32_magic;
<field name="e32_border"><BYTE /></field>
<field name="e32_worder"><BYTE /></field>
<field name="e32_level"><DWORD /></field>
<field name="e32_cpu"><WORD /></field>
<field name="e32_os"><WORD /></field>
<field name="e32_ver"><DWORD /></field>
<field name="e32_mflags"><DWORD /></field>
<field name="e32_mpages"><DWORD /></field>
<field name="e32_startobj"><DWORD /></field>
<field name="e32_eip"><DWORD /></field>
<field name="e32_stackobj"><DWORD /></field>
<field name="e32_esp"><DWORD /></field>
<field name="e32_pagesize"><DWORD /></field>
<field name="e32_lastpagesize"><DWORD /></field>
<field name="e32_fixupsize"><DWORD /></field>
<field name="e32_fixupsum"><DWORD /></field>
<field name="e32_ldrsize"><DWORD /></field>
<field name="e32_ldrsum"><DWORD /></field>
<field name="e32_objtab"><DWORD /></field>
<field name="e32_objcnt"><DWORD /></field>
<field name="e32_objmap"><DWORD /></field>
<field name="e32_itermap"><DWORD /></field>
<field name="e32_rsrctab"><DWORD /></field>
<field name="e32_rsrccnt"><DWORD /></field>
<field name="e32_restab"><DWORD /></field>
<field name="e32_enttab"><DWORD /></field>
<field name="e32_dirtab"><DWORD /></field>
<field name="e32_dircnt"><DWORD /></field>
<field name="e32_fpagetab"><DWORD /></field>
<field name="e32_frectab"><DWORD /></field>
<field name="e32_impmod"><DWORD /></field>
<field name="e32_impmodcnt"><DWORD /></field>
<field name="e32_impproc"><DWORD /></field>
<field name="e32_pagesum"><DWORD /></field>
<field name="e32_datapage"><DWORD /></field>
<field name="e32_preload"><DWORD /></field>
<field name="e32_nrestab"><DWORD /></field>
<field name="e32_cbnrestab"><DWORD /></field>
<field name="e32_nressum"><DWORD /></field>
<field name="e32_autodata"><DWORD /></field>
<field name="e32_debuginfo"><DWORD /></field>
<field name="e32_debuglen"><DWORD /></field>
<field name="e32_instpreload"><DWORD /></field>
<field name="e32_instdemand"><DWORD /></field>
<field name="e32_heapsize"><DWORD /></field>
<field name="e32_res3"><arr length="12"><BYTE /></arr></field>
<field name="e32_winresoff"><DWORD /></field>
<field name="e32_winreslen"><DWORD /></field>
<field name="e32_devid"><WORD /></field>
<field name="e32_ddkver"><WORD /></field>
} IMAGE_VXD_HEADER, *PIMAGE_VXD_HEADER;
typedef struct _IMAGE_FILE_HEADER {
<field name="Machine"><WORD /></field>
<field name="NumberOfSections"><WORD /></field>
<field name="TimeDateStamp"><DWORD /></field>
<field name="PointerToSymbolTable"><DWORD /></field>
<field name="NumberOfSymbols"><DWORD /></field>
<field name="SizeOfOptionalHeader"><WORD /></field>
<field name="Characteristics"><WORD /></field>
} IMAGE_FILE_HEADER, *PIMAGE_FILE_HEADER;
typedef struct _IMAGE_DATA_DIRECTORY {
<field name="VirtualAddress"><DWORD /></field>
<field name="Size"><DWORD /></field>
} IMAGE_DATA_DIRECTORY, *PIMAGE_DATA_DIRECTORY;
typedef struct _IMAGE_OPTIONAL_HEADER {
<field name="Magic"><WORD /></field>
<field name="MajorLinkerVersion"><BYTE /></field>
<field name="MinorLinkerVersion"><BYTE /></field>
<field name="SizeOfCode"><DWORD /></field>
<field name="SizeOfInitializedData"><DWORD /></field>
<field name="SizeOfUninitializedData"><DWORD /></field>
<field name="AddressOfEntryPoint"><DWORD /></field>
<field name="BaseOfCode"><DWORD /></field>
<field name="BaseOfData"><DWORD /></field>
<field name="ImageBase"><DWORD /></field>
<field name="SectionAlignment"><DWORD /></field>
<field name="FileAlignment"><DWORD /></field>
<field name="MajorOperatingSystemVersion"><WORD /></field>
<field name="MinorOperatingSystemVersion"><WORD /></field>
<field name="MajorImageVersion"><WORD /></field>
<field name="MinorImageVersion"><WORD /></field>
<field name="MajorSubsystemVersion"><WORD /></field>
<field name="MinorSubsystemVersion"><WORD /></field>
<field name="Win32VersionValue"><DWORD /></field>
<field name="SizeOfImage"><DWORD /></field>
<field name="SizeOfHeaders"><DWORD /></field>
<field name="CheckSum"><DWORD /></field>
<field name="Subsystem"><WORD /></field>
<field name="DllCharacteristics"><WORD /></field>
<field name="SizeOfStackReserve"><DWORD /></field>
<field name="SizeOfStackCommit"><DWORD /></field>
<field name="SizeOfHeapReserve"><DWORD /></field>
<field name="SizeOfHeapCommit"><DWORD /></field>
<field name="LoaderFlags"><DWORD /></field>
<field name="NumberOfRvaAndSizes"><DWORD /></field>
<field name="DataDirectory"><arr length="16"><IMAGE_DATA_DIRECTORY /></arr></field>
} IMAGE_OPTIONAL_HEADER32, *PIMAGE_OPTIONAL_HEADER32;
typedef struct _IMAGE_ROM_OPTIONAL_HEADER {
<field name="Magic"><WORD /></field>
<field name="MajorLinkerVersion"><BYTE /></field>
<field name="MinorLinkerVersion"><BYTE /></field>
<field name="SizeOfCode"><DWORD /></field>
<field name="SizeOfInitializedData"><DWORD /></field>
<field name="SizeOfUninitializedData"><DWORD /></field>
<field name="AddressOfEntryPoint"><DWORD /></field>
<field name="BaseOfCode"><DWORD /></field>
<field name="BaseOfData"><DWORD /></field>
<field name="BaseOfBss"><DWORD /></field>
<field name="GprMask"><DWORD /></field>
<field name="CprMask"><arr length="4"><DWORD /></arr></field>
<field name="GpValue"><DWORD /></field>
} IMAGE_ROM_OPTIONAL_HEADER, *PIMAGE_ROM_OPTIONAL_HEADER;
typedef struct _IMAGE_OPTIONAL_HEADER64 {
<field name="Magic"><WORD /></field>
<field name="MajorLinkerVersion"><BYTE /></field>
<field name="MinorLinkerVersion"><BYTE /></field>
<field name="SizeOfCode"><DWORD /></field>
<field name="SizeOfInitializedData"><DWORD /></field>
<field name="SizeOfUninitializedData"><DWORD /></field>
<field name="AddressOfEntryPoint"><DWORD /></field>
<field name="BaseOfCode"><DWORD /></field>
<field name="ImageBase"><ULONGLONG /></field>
<field name="SectionAlignment"><DWORD /></field>
<field name="FileAlignment"><DWORD /></field>
<field name="MajorOperatingSystemVersion"><WORD /></field>
<field name="MinorOperatingSystemVersion"><WORD /></field>
<field name="MajorImageVersion"><WORD /></field>
<field name="MinorImageVersion"><WORD /></field>
<field name="MajorSubsystemVersion"><WORD /></field>
<field name="MinorSubsystemVersion"><WORD /></field>
<field name="Win32VersionValue"><DWORD /></field>
<field name="SizeOfImage"><DWORD /></field>
<field name="SizeOfHeaders"><DWORD /></field>
<field name="CheckSum"><DWORD /></field>
<field name="Subsystem"><WORD /></field>
<field name="DllCharacteristics"><WORD /></field>
<field name="SizeOfStackReserve"><ULONGLONG /></field>
<field name="SizeOfStackCommit"><ULONGLONG /></field>
<field name="SizeOfHeapReserve"><ULONGLONG /></field>
<field name="SizeOfHeapCommit"><ULONGLONG /></field>
<field name="LoaderFlags"><DWORD /></field>
<field name="NumberOfRvaAndSizes"><DWORD /></field>
<field name="DataDirectory"><arr length="16"><IMAGE_DATA_DIRECTORY /></arr></field>
} IMAGE_OPTIONAL_HEADER64, *PIMAGE_OPTIONAL_HEADER64;
<typedef name="IMAGE_OPTIONAL_HEADER"><IMAGE_OPTIONAL_HEADER32 /></typedef>
<typedef name="PIMAGE_OPTIONAL_HEADER"><PIMAGE_OPTIONAL_HEADER32 /></typedef>
typedef struct _IMAGE_NT_HEADERS64 {
<field name="Signature"><DWORD /></field>
<field name="FileHeader"><IMAGE_FILE_HEADER /></field>
<field name="OptionalHeader"><IMAGE_OPTIONAL_HEADER64 /></field>
} IMAGE_NT_HEADERS64, *PIMAGE_NT_HEADERS64;
typedef struct _IMAGE_NT_HEADERS {
<field name="Signature"><DWORD /></field>
<field name="FileHeader"><IMAGE_FILE_HEADER /></field>
<field name="OptionalHeader"><IMAGE_OPTIONAL_HEADER32 /></field>
} IMAGE_NT_HEADERS32, *PIMAGE_NT_HEADERS32;
typedef struct _IMAGE_ROM_HEADERS {
<field name="FileHeader"><IMAGE_FILE_HEADER /></field>
<field name="OptionalHeader"><IMAGE_ROM_OPTIONAL_HEADER /></field>
} IMAGE_ROM_HEADERS, *PIMAGE_ROM_HEADERS;
<typedef name="IMAGE_NT_HEADERS"><IMAGE_NT_HEADERS32 /></typedef>
<typedef name="PIMAGE_NT_HEADERS"><PIMAGE_NT_HEADERS32 /></typedef>
typedef struct ANON_OBJECT_HEADER {
<field name="Sig1"><WORD /></field>
<field name="Sig2"><WORD /></field>
<field name="Version"><WORD /></field>
<field name="Machine"><WORD /></field>
<field name="TimeDateStamp"><DWORD /></field>
<field name="ClassID"><CLSID /></field>
<field name="SizeOfData"><DWORD /></field>
} ANON_OBJECT_HEADER;
typedef struct ANON_OBJECT_HEADER_V2 {
<field name="Sig1"><WORD /></field>
<field name="Sig2"><WORD /></field>
<field name="Version"><WORD /></field>
<field name="Machine"><WORD /></field>
<field name="TimeDateStamp"><DWORD /></field>
<field name="ClassID"><CLSID /></field>
<field name="SizeOfData"><DWORD /></field>
<field name="Flags"><DWORD /></field>
<field name="MetaDataSize"><DWORD /></field>
<field name="MetaDataOffset"><DWORD /></field>
} ANON_OBJECT_HEADER_V2;
typedef struct ANON_OBJECT_HEADER_BIGOBJ {
<field name="Sig1"><WORD /></field>
<field name="Sig2"><WORD /></field>
<field name="Version"><WORD /></field>
<field name="Machine"><WORD /></field>
<field name="TimeDateStamp"><DWORD /></field>
<field name="ClassID"><CLSID /></field>
<field name="SizeOfData"><DWORD /></field>
<field name="Flags"><DWORD /></field>
<field name="MetaDataSize"><DWORD /></field>
<field name="MetaDataOffset"><DWORD /></field>
<field name="NumberOfSections"><DWORD /></field>
<field name="PointerToSymbolTable"><DWORD /></field>
<field name="NumberOfSymbols"><DWORD /></field>
} ANON_OBJECT_HEADER_BIGOBJ;
typedef struct _IMAGE_SECTION_HEADER {
<field name="Name"><arr length="8"><BYTE /></arr></field>
union {
<field name="PhysicalAddress"><DWORD /></field>
<field name="VirtualSize"><DWORD /></field>
} Misc;
<field name="VirtualAddress"><DWORD /></field>
<field name="SizeOfRawData"><DWORD /></field>
<field name="PointerToRawData"><DWORD /></field>
<field name="PointerToRelocations"><DWORD /></field>
<field name="PointerToLinenumbers"><DWORD /></field>
<field name="NumberOfRelocations"><WORD /></field>
<field name="NumberOfLinenumbers"><WORD /></field>
<field name="Characteristics"><DWORD /></field>
} IMAGE_SECTION_HEADER, *PIMAGE_SECTION_HEADER;
typedef struct _IMAGE_SYMBOL {
union {
<field name="ShortName"><arr length="8"><BYTE /></arr></field>
struct {
<field name="Short"><DWORD /></field>
<field name="Long"><DWORD /></field>
} Name;
<field name="LongName"><arr length="2"><DWORD /></arr></field>
} N;
<field name="Value"><DWORD /></field>
<field name="SectionNumber"><SHORT /></field>
<field name="Type"><WORD /></field>
<field name="StorageClass"><BYTE /></field>
<field name="NumberOfAuxSymbols"><BYTE /></field>
} IMAGE_SYMBOL;
<typedef name="PIMAGE_SYMBOL"><ptr><IMAGE_SYMBOL /></ptr></typedef>
typedef struct _IMAGE_SYMBOL_EX {
union {
<field name="ShortName"><arr length="8"><BYTE /></arr></field>
struct {
<field name="Short"><DWORD /></field>
<field name="Long"><DWORD /></field>
} Name;
<field name="LongName"><arr length="2"><DWORD /></arr></field>
} N;
<field name="Value"><DWORD /></field>
<field name="SectionNumber"><LONG /></field>
<field name="Type"><WORD /></field>
<field name="StorageClass"><BYTE /></field>
<field name="NumberOfAuxSymbols"><BYTE /></field>
} IMAGE_SYMBOL_EX;
<typedef name="PIMAGE_SYMBOL_EX"><ptr><IMAGE_SYMBOL_EX /></ptr></typedef>
typedef struct IMAGE_AUX_SYMBOL_TOKEN_DEF {
<field name="bAuxType"><BYTE /></field>
<field name="bReserved"><BYTE /></field>
<field name="SymbolTableIndex"><DWORD /></field>
<field name="rgbReserved"><arr length="12"><BYTE /></arr></field>
} IMAGE_AUX_SYMBOL_TOKEN_DEF;
<typedef name="PIMAGE_AUX_SYMBOL_TOKEN_DEF"><ptr><IMAGE_AUX_SYMBOL_TOKEN_DEF /></ptr></typedef>
typedef union _IMAGE_AUX_SYMBOL {
struct {
<field name="TagIndex"><DWORD /></field>
union {
struct {
<field name="Linenumber"><WORD /></field>
<field name="Size"><WORD /></field>
} LnSz;
<field name="TotalSize"><DWORD /></field>
} Misc;
union {
struct { DWORD PointerToLinenumber;
<field name="PointerToNextFunction"><DWORD /></field>
} Function;
struct { WORD Dimension[4];
} Array;
} FcnAry;
<field name="TvIndex"><WORD /></field>
} Sym;
struct {
<field name="Name"><arr length="18"><BYTE /></arr></field>
} File;
struct {
<field name="Length"><DWORD /></field>
<field name="NumberOfRelocations"><WORD /></field>
<field name="NumberOfLinenumbers"><WORD /></field>
<field name="CheckSum"><DWORD /></field>
<field name="Number"><SHORT /></field>
<field name="Selection"><BYTE /></field>
<field name="bReserved"><BYTE /></field>
<field name="HighNumber"><SHORT /></field>
} Section;
<field name="TokenDef"><IMAGE_AUX_SYMBOL_TOKEN_DEF /></field>
struct {
<field name="crc"><DWORD /></field>
<field name="rgbReserved"><arr length="14"><BYTE /></arr></field>
} CRC;
} IMAGE_AUX_SYMBOL;
<typedef name="PIMAGE_AUX_SYMBOL"><ptr><IMAGE_AUX_SYMBOL /></ptr></typedef>
typedef union _IMAGE_AUX_SYMBOL_EX {
struct {
<field name="WeakDefaultSymIndex"><DWORD /></field>
<field name="WeakSearchType"><DWORD /></field>
<field name="rgbReserved"><arr length="12"><BYTE /></arr></field>
} Sym;
struct {
<field name="Name"><arr length="sizeof(IMAGE_SYMBOL_EX)"><BYTE /></arr></field>
} File;
struct {
<field name="Length"><DWORD /></field>
<field name="NumberOfRelocations"><WORD /></field>
<field name="NumberOfLinenumbers"><WORD /></field>
<field name="CheckSum"><DWORD /></field>
<field name="Number"><SHORT /></field>
<field name="Selection"><BYTE /></field>
<field name="bReserved"><BYTE /></field>
<field name="HighNumber"><SHORT /></field>
<field name="rgbReserved"><arr length="2"><BYTE /></arr></field>
} Section;
struct{ IMAGE_AUX_SYMBOL_TOKEN_DEF TokenDef;
<field name="rgbReserved"><arr length="2"><BYTE /></arr></field>
};
struct {
<field name="crc"><DWORD /></field>
<field name="rgbReserved"><arr length="16"><BYTE /></arr></field>
} CRC;
} IMAGE_AUX_SYMBOL_EX;
<typedef name="PIMAGE_AUX_SYMBOL_EX"><ptr><IMAGE_AUX_SYMBOL_EX /></ptr></typedef>
typedef enum IMAGE_AUX_SYMBOL_TYPE {
IMAGE_AUX_SYMBOL_TYPE_TOKEN_DEF = 1, } IMAGE_AUX_SYMBOL_TYPE;
typedef struct _IMAGE_RELOCATION {
union {
<field name="VirtualAddress"><DWORD /></field>
<field name="RelocCount"><DWORD /></field>
} ;
<field name="SymbolTableIndex"><DWORD /></field>
<field name="Type"><WORD /></field>
} IMAGE_RELOCATION;
<typedef name="PIMAGE_RELOCATION"><ptr><IMAGE_RELOCATION /></ptr></typedef>
typedef struct _IMAGE_LINENUMBER {
union {
<field name="SymbolTableIndex"><DWORD /></field>
<field name="VirtualAddress"><DWORD /></field>
} Type;
<field name="Linenumber"><WORD /></field>
} IMAGE_LINENUMBER;
<typedef name="PIMAGE_LINENUMBER"><ptr><IMAGE_LINENUMBER /></ptr></typedef>
typedef struct _IMAGE_BASE_RELOCATION {
<field name="VirtualAddress"><DWORD /></field>
<field name="SizeOfBlock"><DWORD /></field>
} IMAGE_BASE_RELOCATION;
<typedef name="PIMAGE_BASE_RELOCATION"><ptr><IMAGE_BASE_RELOCATION /></ptr></typedef>
typedef struct _IMAGE_ARCHIVE_MEMBER_HEADER {
<field name="Name"><arr length="16"><BYTE /></arr></field>
<field name="Date"><arr length="12"><BYTE /></arr></field>
<field name="UserID"><arr length="6"><BYTE /></arr></field>
<field name="GroupID"><arr length="6"><BYTE /></arr></field>
<field name="Mode"><arr length="8"><BYTE /></arr></field>
<field name="Size"><arr length="10"><BYTE /></arr></field>
<field name="EndHeader"><arr length="2"><BYTE /></arr></field>
} IMAGE_ARCHIVE_MEMBER_HEADER, *PIMAGE_ARCHIVE_MEMBER_HEADER;
typedef struct _IMAGE_EXPORT_DIRECTORY {
<field name="Characteristics"><DWORD /></field>
<field name="TimeDateStamp"><DWORD /></field>
<field name="MajorVersion"><WORD /></field>
<field name="MinorVersion"><WORD /></field>
<field name="Name"><DWORD /></field>
<field name="Base"><DWORD /></field>
<field name="NumberOfFunctions"><DWORD /></field>
<field name="NumberOfNames"><DWORD /></field>
<field name="AddressOfFunctions"><DWORD /></field>
<field name="AddressOfNames"><DWORD /></field>
<field name="AddressOfNameOrdinals"><DWORD /></field>
} IMAGE_EXPORT_DIRECTORY, *PIMAGE_EXPORT_DIRECTORY;
typedef struct _IMAGE_IMPORT_BY_NAME {
<field name="Hint"><WORD /></field>
<field name="Name"><arr length="1"><BYTE /></arr></field>
} IMAGE_IMPORT_BY_NAME, *PIMAGE_IMPORT_BY_NAME;
typedef struct _IMAGE_THUNK_DATA64 {
union {
<field name="ForwarderString"><ULONGLONG /></field>
<field name="Function"><ULONGLONG /></field>
<field name="Ordinal"><ULONGLONG /></field>
<field name="AddressOfData"><ULONGLONG /></field>
} u1;
} IMAGE_THUNK_DATA64;
<typedef name="PIMAGE_THUNK_DATA64"><ptr><IMAGE_THUNK_DATA64 /></ptr></typedef>
typedef struct _IMAGE_THUNK_DATA32 {
union {
<field name="ForwarderString"><DWORD /></field>
<field name="Function"><DWORD /></field>
<field name="Ordinal"><DWORD /></field>
<field name="AddressOfData"><DWORD /></field>
} u1;
} IMAGE_THUNK_DATA32;
<typedef name="PIMAGE_THUNK_DATA32"><ptr><IMAGE_THUNK_DATA32 /></ptr></typedef>
typedef void (__stdcall *PIMAGE_TLS_CALLBACK)(PVOID DllHandle, DWORD Reason, PVOID Reserved );
typedef struct _IMAGE_TLS_DIRECTORY64 {
<field name="StartAddressOfRawData"><ULONGLONG /></field>
<field name="EndAddressOfRawData"><ULONGLONG /></field>
<field name="AddressOfIndex"><ULONGLONG /></field>
<field name="AddressOfCallBacks"><ULONGLONG /></field>
<field name="SizeOfZeroFill"><DWORD /></field>
<field name="Characteristics"><DWORD /></field>
} IMAGE_TLS_DIRECTORY64;
<typedef name="PIMAGE_TLS_DIRECTORY64"><ptr><IMAGE_TLS_DIRECTORY64 /></ptr></typedef>
typedef struct _IMAGE_TLS_DIRECTORY32 {
<field name="StartAddressOfRawData"><DWORD /></field>
<field name="EndAddressOfRawData"><DWORD /></field>
<field name="AddressOfIndex"><DWORD /></field>
<field name="AddressOfCallBacks"><DWORD /></field>
<field name="SizeOfZeroFill"><DWORD /></field>
<field name="Characteristics"><DWORD /></field>
} IMAGE_TLS_DIRECTORY32;
<typedef name="PIMAGE_TLS_DIRECTORY32"><ptr><IMAGE_TLS_DIRECTORY32 /></ptr></typedef>
<typedef name="IMAGE_THUNK_DATA"><IMAGE_THUNK_DATA32 /></typedef>
<typedef name="PIMAGE_THUNK_DATA"><PIMAGE_THUNK_DATA32 /></typedef>
<typedef name="IMAGE_TLS_DIRECTORY"><IMAGE_TLS_DIRECTORY32 /></typedef>
<typedef name="PIMAGE_TLS_DIRECTORY"><PIMAGE_TLS_DIRECTORY32 /></typedef>
typedef struct _IMAGE_IMPORT_DESCRIPTOR {
union {
<field name="Characteristics"><DWORD /></field>
<field name="OriginalFirstThunk"><DWORD /></field>
} ;
<field name="TimeDateStamp"><DWORD /></field>
<field name="ForwarderChain"><DWORD /></field>
<field name="Name"><DWORD /></field>
<field name="FirstThunk"><DWORD /></field>
} IMAGE_IMPORT_DESCRIPTOR;
<typedef name="PIMAGE_IMPORT_DESCRIPTOR"><ptr><IMAGE_IMPORT_DESCRIPTOR /></ptr></typedef>
typedef struct _IMAGE_BOUND_IMPORT_DESCRIPTOR {
<field name="TimeDateStamp"><DWORD /></field>
<field name="OffsetModuleName"><WORD /></field>
<field name="NumberOfModuleForwarderRefs"><WORD /></field>
} IMAGE_BOUND_IMPORT_DESCRIPTOR, *PIMAGE_BOUND_IMPORT_DESCRIPTOR;
typedef struct _IMAGE_BOUND_FORWARDER_REF {
<field name="TimeDateStamp"><DWORD /></field>
<field name="OffsetModuleName"><WORD /></field>
<field name="Reserved"><WORD /></field>
} IMAGE_BOUND_FORWARDER_REF, *PIMAGE_BOUND_FORWARDER_REF;
typedef struct _IMAGE_RESOURCE_DIRECTORY {
<field name="Characteristics"><DWORD /></field>
<field name="TimeDateStamp"><DWORD /></field>
<field name="MajorVersion"><WORD /></field>
<field name="MinorVersion"><WORD /></field>
<field name="NumberOfNamedEntries"><WORD /></field>
<field name="NumberOfIdEntries"><WORD /></field>
} IMAGE_RESOURCE_DIRECTORY, *PIMAGE_RESOURCE_DIRECTORY;
typedef struct _IMAGE_RESOURCE_DIRECTORY_ENTRY {
union {
struct {
<bitfield name="NameOffset" bits="31"><DWORD /></bitfield>
<bitfield name="NameIsString" bits="1"><DWORD /></bitfield>
} ;
<field name="Name"><DWORD /></field>
<field name="Id"><WORD /></field>
} ;
union {
<field name="OffsetToData"><DWORD /></field>
struct {
<bitfield name="OffsetToDirectory" bits="31"><DWORD /></bitfield>
<bitfield name="DataIsDirectory" bits="1"><DWORD /></bitfield>
} ;
} ;
} IMAGE_RESOURCE_DIRECTORY_ENTRY, *PIMAGE_RESOURCE_DIRECTORY_ENTRY;
typedef struct _IMAGE_RESOURCE_DIRECTORY_STRING {
<field name="Length"><WORD /></field>
<field name="NameString"><arr length=" 1 "><CHAR /></arr></field>
} IMAGE_RESOURCE_DIRECTORY_STRING, *PIMAGE_RESOURCE_DIRECTORY_STRING;
typedef struct _IMAGE_RESOURCE_DIR_STRING_U {
<field name="Length"><WORD /></field>
<field name="NameString"><arr length=" 1 "><WCHAR /></arr></field>
} IMAGE_RESOURCE_DIR_STRING_U, *PIMAGE_RESOURCE_DIR_STRING_U;
typedef struct _IMAGE_RESOURCE_DATA_ENTRY {
<field name="OffsetToData"><DWORD /></field>
<field name="Size"><DWORD /></field>
<field name="CodePage"><DWORD /></field>
<field name="Reserved"><DWORD /></field>
} IMAGE_RESOURCE_DATA_ENTRY, *PIMAGE_RESOURCE_DATA_ENTRY;
typedef struct {
<field name="Size"><DWORD /></field>
<field name="TimeDateStamp"><DWORD /></field>
<field name="MajorVersion"><WORD /></field>
<field name="MinorVersion"><WORD /></field>
<field name="GlobalFlagsClear"><DWORD /></field>
<field name="GlobalFlagsSet"><DWORD /></field>
<field name="CriticalSectionDefaultTimeout"><DWORD /></field>
<field name="DeCommitFreeBlockThreshold"><DWORD /></field>
<field name="DeCommitTotalFreeThreshold"><DWORD /></field>
<field name="LockPrefixTable"><DWORD /></field>
<field name="MaximumAllocationSize"><DWORD /></field>
<field name="VirtualMemoryThreshold"><DWORD /></field>
<field name="ProcessHeapFlags"><DWORD /></field>
<field name="ProcessAffinityMask"><DWORD /></field>
<field name="CSDVersion"><WORD /></field>
<field name="Reserved1"><WORD /></field>
<field name="EditList"><DWORD /></field>
<field name="SecurityCookie"><DWORD /></field>
<field name="SEHandlerTable"><DWORD /></field>
<field name="SEHandlerCount"><DWORD /></field>
} IMAGE_LOAD_CONFIG_DIRECTORY32, *PIMAGE_LOAD_CONFIG_DIRECTORY32;
typedef struct {
<field name="Size"><DWORD /></field>
<field name="TimeDateStamp"><DWORD /></field>
<field name="MajorVersion"><WORD /></field>
<field name="MinorVersion"><WORD /></field>
<field name="GlobalFlagsClear"><DWORD /></field>
<field name="GlobalFlagsSet"><DWORD /></field>
<field name="CriticalSectionDefaultTimeout"><DWORD /></field>
<field name="DeCommitFreeBlockThreshold"><ULONGLONG /></field>
<field name="DeCommitTotalFreeThreshold"><ULONGLONG /></field>
<field name="LockPrefixTable"><ULONGLONG /></field>
<field name="MaximumAllocationSize"><ULONGLONG /></field>
<field name="VirtualMemoryThreshold"><ULONGLONG /></field>
<field name="ProcessAffinityMask"><ULONGLONG /></field>
<field name="ProcessHeapFlags"><DWORD /></field>
<field name="CSDVersion"><WORD /></field>
<field name="Reserved1"><WORD /></field>
<field name="EditList"><ULONGLONG /></field>
<field name="SecurityCookie"><ULONGLONG /></field>
<field name="SEHandlerTable"><ULONGLONG /></field>
<field name="SEHandlerCount"><ULONGLONG /></field>
} IMAGE_LOAD_CONFIG_DIRECTORY64, *PIMAGE_LOAD_CONFIG_DIRECTORY64;
<typedef name="IMAGE_LOAD_CONFIG_DIRECTORY"><IMAGE_LOAD_CONFIG_DIRECTORY32 /></typedef>
<typedef name="PIMAGE_LOAD_CONFIG_DIRECTORY"><PIMAGE_LOAD_CONFIG_DIRECTORY32 /></typedef>
typedef struct _IMAGE_CE_RUNTIME_FUNCTION_ENTRY {
<field name="FuncStart"><DWORD /></field>
<bitfield name="PrologLen" bits="8"><DWORD /></bitfield>
<bitfield name="FuncLen" bits="22"><DWORD /></bitfield>
<bitfield name="ThirtyTwoBit" bits="1"><DWORD /></bitfield>
<bitfield name="ExceptionFlag" bits="1"><DWORD /></bitfield>
} IMAGE_CE_RUNTIME_FUNCTION_ENTRY, * PIMAGE_CE_RUNTIME_FUNCTION_ENTRY;
typedef struct _IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY {
<field name="BeginAddress"><ULONGLONG /></field>
<field name="EndAddress"><ULONGLONG /></field>
<field name="ExceptionHandler"><ULONGLONG /></field>
<field name="HandlerData"><ULONGLONG /></field>
<field name="PrologEndAddress"><ULONGLONG /></field>
} IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY, *PIMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY;
typedef struct _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY {
<field name="BeginAddress"><DWORD /></field>
<field name="EndAddress"><DWORD /></field>
<field name="ExceptionHandler"><DWORD /></field>
<field name="HandlerData"><DWORD /></field>
<field name="PrologEndAddress"><DWORD /></field>
} IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY, *PIMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY;
typedef struct _IMAGE_RUNTIME_FUNCTION_ENTRY {
<field name="BeginAddress"><DWORD /></field>
<field name="EndAddress"><DWORD /></field>
<field name="UnwindInfoAddress"><DWORD /></field>
} _IMAGE_RUNTIME_FUNCTION_ENTRY, *_PIMAGE_RUNTIME_FUNCTION_ENTRY;
<typedef name="IMAGE_IA64_RUNTIME_FUNCTION_ENTRY"><_IMAGE_RUNTIME_FUNCTION_ENTRY /></typedef>
<typedef name="PIMAGE_IA64_RUNTIME_FUNCTION_ENTRY"><_PIMAGE_RUNTIME_FUNCTION_ENTRY /></typedef>
<typedef name="IMAGE_RUNTIME_FUNCTION_ENTRY"><_IMAGE_RUNTIME_FUNCTION_ENTRY /></typedef>
<typedef name="PIMAGE_RUNTIME_FUNCTION_ENTRY"><_PIMAGE_RUNTIME_FUNCTION_ENTRY /></typedef>
typedef struct _IMAGE_DEBUG_DIRECTORY {
<field name="Characteristics"><DWORD /></field>
<field name="TimeDateStamp"><DWORD /></field>
<field name="MajorVersion"><WORD /></field>
<field name="MinorVersion"><WORD /></field>
<field name="Type"><DWORD /></field>
<field name="SizeOfData"><DWORD /></field>
<field name="AddressOfRawData"><DWORD /></field>
<field name="PointerToRawData"><DWORD /></field>
} IMAGE_DEBUG_DIRECTORY, *PIMAGE_DEBUG_DIRECTORY;
typedef struct _IMAGE_COFF_SYMBOLS_HEADER {
<field name="NumberOfSymbols"><DWORD /></field>
<field name="LvaToFirstSymbol"><DWORD /></field>
<field name="NumberOfLinenumbers"><DWORD /></field>
<field name="LvaToFirstLinenumber"><DWORD /></field>
<field name="RvaToFirstByteOfCode"><DWORD /></field>
<field name="RvaToLastByteOfCode"><DWORD /></field>
<field name="RvaToFirstByteOfData"><DWORD /></field>
<field name="RvaToLastByteOfData"><DWORD /></field>
} IMAGE_COFF_SYMBOLS_HEADER, *PIMAGE_COFF_SYMBOLS_HEADER;
typedef struct _FPO_DATA {
<field name="ulOffStart"><DWORD /></field>
<field name="cbProcSize"><DWORD /></field>
<field name="cdwLocals"><DWORD /></field>
<field name="cdwParams"><WORD /></field>
<bitfield name="cbProlog" bits="8"><WORD /></bitfield>
<bitfield name="cbRegs" bits="3"><WORD /></bitfield>
<bitfield name="fHasSEH" bits="1"><WORD /></bitfield>
<bitfield name="fUseBP" bits="1"><WORD /></bitfield>
<bitfield name="reserved" bits="1"><WORD /></bitfield>
<bitfield name="cbFrame" bits="2"><WORD /></bitfield>
} FPO_DATA, *PFPO_DATA;
typedef struct _IMAGE_DEBUG_MISC {
<field name="DataType"><DWORD /></field>
<field name="Length"><DWORD /></field>
<field name="Unicode"><BOOLEAN /></field>
<field name="Reserved"><arr length=" 3 "><BYTE /></arr></field>
<field name="Data"><arr length=" 1 "><BYTE /></arr></field>
} IMAGE_DEBUG_MISC, *PIMAGE_DEBUG_MISC;
typedef struct _IMAGE_FUNCTION_ENTRY {
<field name="StartingAddress"><DWORD /></field>
<field name="EndingAddress"><DWORD /></field>
<field name="EndOfPrologue"><DWORD /></field>
} IMAGE_FUNCTION_ENTRY, *PIMAGE_FUNCTION_ENTRY;
typedef struct _IMAGE_FUNCTION_ENTRY64 {
<field name="StartingAddress"><ULONGLONG /></field>
<field name="EndingAddress"><ULONGLONG /></field>
union {
<field name="EndOfPrologue"><ULONGLONG /></field>
<field name="UnwindInfoAddress"><ULONGLONG /></field>
} ;
} IMAGE_FUNCTION_ENTRY64, *PIMAGE_FUNCTION_ENTRY64;
typedef struct _IMAGE_SEPARATE_DEBUG_HEADER {
<field name="Signature"><WORD /></field>
<field name="Flags"><WORD /></field>
<field name="Machine"><WORD /></field>
<field name="Characteristics"><WORD /></field>
<field name="TimeDateStamp"><DWORD /></field>
<field name="CheckSum"><DWORD /></field>
<field name="ImageBase"><DWORD /></field>
<field name="SizeOfImage"><DWORD /></field>
<field name="NumberOfSections"><DWORD /></field>
<field name="ExportedNamesSize"><DWORD /></field>
<field name="DebugDirectorySize"><DWORD /></field>
<field name="SectionAlignment"><DWORD /></field>
<field name="Reserved"><arr length="2"><DWORD /></arr></field>
} IMAGE_SEPARATE_DEBUG_HEADER, *PIMAGE_SEPARATE_DEBUG_HEADER;
typedef struct _NON_PAGED_DEBUG_INFO {
<field name="Signature"><WORD /></field>
<field name="Flags"><WORD /></field>
<field name="Size"><DWORD /></field>
<field name="Machine"><WORD /></field>
<field name="Characteristics"><WORD /></field>
<field name="TimeDateStamp"><DWORD /></field>
<field name="CheckSum"><DWORD /></field>
<field name="SizeOfImage"><DWORD /></field>
<field name="ImageBase"><ULONGLONG /></field>
} NON_PAGED_DEBUG_INFO, *PNON_PAGED_DEBUG_INFO;
typedef struct _ImageArchitectureHeader {
<bitfield name="AmaskValue" bits="1"><uint32 /></bitfield>
int32 :7;
<bitfield name="AmaskShift" bits="8"><uint32 /></bitfield>
int32 :16;
<field name="FirstEntryRVA"><DWORD /></field>
} IMAGE_ARCHITECTURE_HEADER, *PIMAGE_ARCHITECTURE_HEADER;
typedef struct _ImageArchitectureEntry {
<field name="FixupInstRVA"><DWORD /></field>
<field name="NewInst"><DWORD /></field>
} IMAGE_ARCHITECTURE_ENTRY, *PIMAGE_ARCHITECTURE_ENTRY;
typedef struct IMPORT_OBJECT_HEADER {
<field name="Sig1"><WORD /></field>
<field name="Sig2"><WORD /></field>
<field name="Version"><WORD /></field>
<field name="Machine"><WORD /></field>
<field name="TimeDateStamp"><DWORD /></field>
<field name="SizeOfData"><DWORD /></field>
union {
<field name="Ordinal"><WORD /></field>
<field name="Hint"><WORD /></field>
} ;
<bitfield name="Type" bits="2"><WORD /></bitfield>
<bitfield name="NameType" bits="3"><WORD /></bitfield>
<bitfield name="Reserved" bits="11"><WORD /></bitfield>
} IMPORT_OBJECT_HEADER;
typedef enum IMPORT_OBJECT_TYPE {
IMPORT_OBJECT_CODE = 0, IMPORT_OBJECT_DATA = 1, IMPORT_OBJECT_CONST = 2, } IMPORT_OBJECT_TYPE;
typedef enum IMPORT_OBJECT_NAME_TYPE {
IMPORT_OBJECT_ORDINAL = 0, IMPORT_OBJECT_NAME = 1, IMPORT_OBJECT_NAME_NO_PREFIX = 2, IMPORT_OBJECT_NAME_UNDECORATE = 3, } IMPORT_OBJECT_NAME_TYPE;
typedef enum ReplacesCorHdrNumericDefines {
COMIMAGE_FLAGS_ILONLY =0x00000001, COMIMAGE_FLAGS_32BITREQUIRED =0x00000002, COMIMAGE_FLAGS_IL_LIBRARY =0x00000004, COMIMAGE_FLAGS_STRONGNAMESIGNED =0x00000008, COMIMAGE_FLAGS_NATIVE_ENTRYPOINT =0x00000010, COMIMAGE_FLAGS_TRACKDEBUGDATA =0x00010000, COR_VERSION_MAJOR_V2 =2, COR_VERSION_MAJOR =COR_VERSION_MAJOR_V2, COR_VERSION_MINOR =0, COR_DELETED_NAME_LENGTH =8, COR_VTABLEGAP_NAME_LENGTH =8, NATIVE_TYPE_MAX_CB =1, COR_ILMETHOD_SECT_SMALL_MAX_DATASIZE=0xFF, IMAGE_COR_MIH_METHODRVA =0x01, IMAGE_COR_MIH_EHRVA =0x02, IMAGE_COR_MIH_BASICBLOCK =0x08, COR_VTABLE_32BIT =0x01, COR_VTABLE_64BIT =0x02, COR_VTABLE_FROM_UNMANAGED =0x04, COR_VTABLE_FROM_UNMANAGED_RETAIN_APPDOMAIN =0x08, COR_VTABLE_CALL_MOST_DERIVED =0x10, IMAGE_COR_EATJ_THUNK_SIZE =32, MAX_CLASS_NAME =1024, MAX_PACKAGE_NAME =1024, } ReplacesCorHdrNumericDefines;
typedef struct IMAGE_COR20_HEADER {
<field name="cb"><DWORD /></field>
<field name="MajorRuntimeVersion"><WORD /></field>
<field name="MinorRuntimeVersion"><WORD /></field>
<field name="MetaData"><IMAGE_DATA_DIRECTORY /></field>
<field name="Flags"><DWORD /></field>
union {
<field name="EntryPointToken"><DWORD /></field>
<field name="EntryPointRVA"><DWORD /></field>
} ;
<field name="Resources"><IMAGE_DATA_DIRECTORY /></field>
<field name="StrongNameSignature"><IMAGE_DATA_DIRECTORY /></field>
<field name="CodeManagerTable"><IMAGE_DATA_DIRECTORY /></field>
<field name="VTableFixups"><IMAGE_DATA_DIRECTORY /></field>
<field name="ExportAddressTableJumps"><IMAGE_DATA_DIRECTORY /></field>
<field name="ManagedNativeHeader"><IMAGE_DATA_DIRECTORY /></field>
} IMAGE_COR20_HEADER, *PIMAGE_COR20_HEADER;
<typedef name="SLIST_ENTRY32"><SINGLE_LIST_ENTRY /></typedef>
<typedef name="PSLIST_ENTRY32"><ptr><SINGLE_LIST_ENTRY /></ptr></typedef>
typedef union _SLIST_HEADER {
<field name="Alignment"><ULONGLONG /></field>
struct {
<field name="Next"><SINGLE_LIST_ENTRY /></field>
<field name="Depth"><WORD /></field>
<field name="Sequence"><WORD /></field>
} ;
} SLIST_HEADER, *PSLIST_HEADER;
<typedef name="SLIST_HEADER32"><SLIST_HEADER /></typedef>
<typedef name="PSLIST_HEADER32"><ptr><SLIST_HEADER /></ptr></typedef>

void __stdcall RtlInitializeSListHead(PSLIST_HEADER ListHead );

PSINGLE_LIST_ENTRY __stdcall RtlFirstEntrySList(const SLIST_HEADER *ListHead );

PSINGLE_LIST_ENTRY __stdcall RtlInterlockedPopEntrySList(PSLIST_HEADER ListHead );

PSINGLE_LIST_ENTRY __stdcall RtlInterlockedPushEntrySList(PSLIST_HEADER ListHead, PSINGLE_LIST_ENTRY ListEntry );

PSINGLE_LIST_ENTRY __stdcall RtlInterlockedFlushSList(PSLIST_HEADER ListHead );

WORD __stdcall RtlQueryDepthSList(PSLIST_HEADER ListHead );
typedef union _RTL_RUN_ONCE { PVOID Ptr;
} RTL_RUN_ONCE, *PRTL_RUN_ONCE;
typedef DWORD __stdcall RTL_RUN_ONCE_INIT_FN(PRTL_RUN_ONCE RunOnce, PVOID Parameter, PVOID *Context );
<typedef name="PRTL_RUN_ONCE_INIT_FN"><ptr><RTL_RUN_ONCE_INIT_FN /></ptr></typedef>

void __stdcall RtlRunOnceInitialize(PRTL_RUN_ONCE RunOnce );

DWORD __stdcall RtlRunOnceExecuteOnce(PRTL_RUN_ONCE RunOnce, PRTL_RUN_ONCE_INIT_FN InitFn, PVOID Parameter, PVOID *Context );

DWORD __stdcall RtlRunOnceBeginInitialize(PRTL_RUN_ONCE RunOnce, DWORD Flags, PVOID *Context );

DWORD __stdcall RtlRunOnceComplete(PRTL_RUN_ONCE RunOnce, DWORD Flags, PVOID Context );
WORD __stdcall RtlCaptureStackBackTrace( DWORD FramesToSkip, DWORD FramesToCapture, PVOID *BackTrace, PDWORD BackTraceHash );

void __stdcall RtlCaptureContext(PCONTEXT ContextRecord );

SIZE_T __stdcall RtlCompareMemory(const void *Source1, const void *Source2, SIZE_T Length );
__forceinline PVOID RtlSecureZeroMemory( PVOID ptr, SIZE_T cnt ) {
volatile char *vptr = (volatile char *)ptr;
while (cnt) {
*vptr = 0;
vptr++;
cnt--;
} return ptr;
} typedef struct _MESSAGE_RESOURCE_ENTRY {
<field name="Length"><WORD /></field>
<field name="Flags"><WORD /></field>
<field name="Text"><arr length=" 1 "><BYTE /></arr></field>
} MESSAGE_RESOURCE_ENTRY, *PMESSAGE_RESOURCE_ENTRY;
typedef struct _MESSAGE_RESOURCE_BLOCK {
<field name="LowId"><DWORD /></field>
<field name="HighId"><DWORD /></field>
<field name="OffsetToEntries"><DWORD /></field>
} MESSAGE_RESOURCE_BLOCK, *PMESSAGE_RESOURCE_BLOCK;
typedef struct _MESSAGE_RESOURCE_DATA {
<field name="NumberOfBlocks"><DWORD /></field>
<field name="Blocks"><arr length=" 1 "><MESSAGE_RESOURCE_BLOCK /></arr></field>
} MESSAGE_RESOURCE_DATA, *PMESSAGE_RESOURCE_DATA;

PVOID __stdcall RtlPcToFileHeader( PVOID PcValue, PVOID *BaseOfImage );
typedef struct _OSVERSIONINFOA {
<field name="dwOSVersionInfoSize"><DWORD /></field>
<field name="dwMajorVersion"><DWORD /></field>
<field name="dwMinorVersion"><DWORD /></field>
<field name="dwBuildNumber"><DWORD /></field>
<field name="dwPlatformId"><DWORD /></field>
<field name="szCSDVersion"><arr length=" 128 "><CHAR /></arr></field>
} OSVERSIONINFOA, *POSVERSIONINFOA, *LPOSVERSIONINFOA;
typedef struct _OSVERSIONINFOW {
<field name="dwOSVersionInfoSize"><DWORD /></field>
<field name="dwMajorVersion"><DWORD /></field>
<field name="dwMinorVersion"><DWORD /></field>
<field name="dwBuildNumber"><DWORD /></field>
<field name="dwPlatformId"><DWORD /></field>
<field name="szCSDVersion"><arr length=" 128 "><WCHAR /></arr></field>
} OSVERSIONINFOW, *POSVERSIONINFOW, *LPOSVERSIONINFOW, RTL_OSVERSIONINFOW, *PRTL_OSVERSIONINFOW;
<typedef name="OSVERSIONINFO"><OSVERSIONINFOA /></typedef>
<typedef name="POSVERSIONINFO"><POSVERSIONINFOA /></typedef>
<typedef name="LPOSVERSIONINFO"><LPOSVERSIONINFOA /></typedef>
typedef struct _OSVERSIONINFOEXA {
<field name="dwOSVersionInfoSize"><DWORD /></field>
<field name="dwMajorVersion"><DWORD /></field>
<field name="dwMinorVersion"><DWORD /></field>
<field name="dwBuildNumber"><DWORD /></field>
<field name="dwPlatformId"><DWORD /></field>
<field name="szCSDVersion"><arr length=" 128 "><CHAR /></arr></field>
<field name="wServicePackMajor"><WORD /></field>
<field name="wServicePackMinor"><WORD /></field>
<field name="wSuiteMask"><WORD /></field>
<field name="wProductType"><BYTE /></field>
<field name="wReserved"><BYTE /></field>
} OSVERSIONINFOEXA, *POSVERSIONINFOEXA, *LPOSVERSIONINFOEXA;
typedef struct _OSVERSIONINFOEXW {
<field name="dwOSVersionInfoSize"><DWORD /></field>
<field name="dwMajorVersion"><DWORD /></field>
<field name="dwMinorVersion"><DWORD /></field>
<field name="dwBuildNumber"><DWORD /></field>
<field name="dwPlatformId"><DWORD /></field>
<field name="szCSDVersion"><arr length=" 128 "><WCHAR /></arr></field>
<field name="wServicePackMajor"><WORD /></field>
<field name="wServicePackMinor"><WORD /></field>
<field name="wSuiteMask"><WORD /></field>
<field name="wProductType"><BYTE /></field>
<field name="wReserved"><BYTE /></field>
} OSVERSIONINFOEXW, *POSVERSIONINFOEXW, *LPOSVERSIONINFOEXW, RTL_OSVERSIONINFOEXW, *PRTL_OSVERSIONINFOEXW;
<typedef name="OSVERSIONINFOEX"><OSVERSIONINFOEXA /></typedef>
<typedef name="POSVERSIONINFOEX"><POSVERSIONINFOEXA /></typedef>
<typedef name="LPOSVERSIONINFOEX"><LPOSVERSIONINFOEXA /></typedef>

ULONGLONG __stdcall VerSetConditionMask( ULONGLONG ConditionMask, DWORD TypeMask, BYTE Condition );

BOOLEAN __stdcall RtlGetProductInfo( DWORD OSMajorVersion, DWORD OSMinorVersion, DWORD SpMajorVersion, DWORD SpMinorVersion, PDWORD ReturnedProductType );
typedef enum _RTL_UMS_THREAD_INFO_CLASS {
UmsThreadInvalidInfoClass = 0, UmsThreadUserContext, UmsThreadPriority, UmsThreadAffinity, UmsThreadTeb, UmsThreadIsSuspended, UmsThreadIsTerminated, UmsThreadMaxInfoClass } RTL_UMS_THREAD_INFO_CLASS, *PRTL_UMS_THREAD_INFO_CLASS;
typedef enum _RTL_UMS_SCHEDULER_REASON {
UmsSchedulerStartup = 0, UmsSchedulerThreadBlocked, UmsSchedulerThreadYield, } RTL_UMS_SCHEDULER_REASON, *PRTL_UMS_SCHEDULER_REASON;
typedef void __stdcall RTL_UMS_SCHEDULER_ENTRY_POINT( RTL_UMS_SCHEDULER_REASON Reason, ULONG_PTR ActivationPayload, PVOID SchedulerParam );
<typedef name="PRTL_UMS_SCHEDULER_ENTRY_POINT"><ptr><RTL_UMS_SCHEDULER_ENTRY_POINT /></ptr></typedef>

DWORD __stdcall RtlCopyExtendedContext(PCONTEXT_EX Destination, DWORD ContextFlags, PCONTEXT_EX Source );

DWORD __stdcall RtlInitializeExtendedContext(PVOID Context, DWORD ContextFlags, PCONTEXT_EX* ContextEx );

DWORD64 __stdcall RtlGetEnabledExtendedFeatures(DWORD64 FeatureMask );

DWORD __stdcall RtlGetExtendedContextLength(DWORD ContextFlags, PDWORD ContextLength );

DWORD64 __stdcall RtlGetExtendedFeaturesMask(PCONTEXT_EX ContextEx );

PVOID __stdcall RtlLocateExtendedFeature(PCONTEXT_EX ContextEx, DWORD FeatureId, PDWORD Length );

PCONTEXT __stdcall RtlLocateLegacyContext(PCONTEXT_EX ContextEx, PDWORD Length );

void __stdcall RtlSetExtendedFeaturesMask(PCONTEXT_EX ContextEx, DWORD64 FeatureMask );
typedef struct _RTL_CRITICAL_SECTION_DEBUG {
<field name="Type"><WORD /></field>
<field name="CreatorBackTraceIndex"><WORD /></field>
struct _RTL_CRITICAL_SECTION *CriticalSection;
<field name="ProcessLocksList"><LIST_ENTRY /></field>
<field name="EntryCount"><DWORD /></field>
<field name="ContentionCount"><DWORD /></field>
<field name="Flags"><DWORD /></field>
<field name="CreatorBackTraceIndexHigh"><WORD /></field>
WORD SpareWORD ;
} RTL_CRITICAL_SECTION_DEBUG, *PRTL_CRITICAL_SECTION_DEBUG, RTL_RESOURCE_DEBUG, *PRTL_RESOURCE_DEBUG;
typedef struct _RTL_CRITICAL_SECTION {
<field name="DebugInfo"><PRTL_CRITICAL_SECTION_DEBUG /></field>
<field name="LockCount"><LONG /></field>
<field name="RecursionCount"><LONG /></field>
<field name="OwningThread"><HANDLE /></field>
<field name="LockSemaphore"><HANDLE /></field>
<field name="SpinCount"><ULONG_PTR /></field>
} RTL_CRITICAL_SECTION, *PRTL_CRITICAL_SECTION;
typedef struct _RTL_SRWLOCK { PVOID Ptr;
} RTL_SRWLOCK, *PRTL_SRWLOCK;
typedef struct _RTL_CONDITION_VARIABLE { PVOID Ptr;
} RTL_CONDITION_VARIABLE, *PRTL_CONDITION_VARIABLE;
typedef void (__stdcall *PAPCFUNC)( ULONG_PTR Parameter );
typedef LONG (__stdcall *PVECTORED_EXCEPTION_HANDLER)( struct _EXCEPTION_POINTERS *ExceptionInfo );
typedef enum _HEAP_INFORMATION_CLASS {
HeapCompatibilityInformation, HeapEnableTerminationOnCorruption } HEAP_INFORMATION_CLASS;
typedef void (__stdcall * WAITORTIMERCALLBACKFUNC) (PVOID, BOOLEAN );
typedef void (__stdcall * WORKERCALLBACKFUNC) (PVOID );
typedef void (__stdcall * APC_CALLBACK_FUNCTION) (DWORD, PVOID, PVOID);
typedef void (__stdcall *PFLS_CALLBACK_FUNCTION)(PVOID lpFlsData );
typedef BOOLEAN (__stdcall *PSECURE_MEMORY_CACHE_CALLBACK)(PVOID Addr, SIZE_T Range );
typedef enum _ACTIVATION_CONTEXT_INFO_CLASS {
ActivationContextBasicInformation = 1, ActivationContextDetailedInformation = 2, AssemblyDetailedInformationInActivationContext = 3, FileInformationInAssemblyOfAssemblyInActivationContext = 4, RunlevelInformationInActivationContext = 5, CompatibilityInformationInActivationContext = 6, ActivationContextManifestResourceName = 7, MaxActivationContextInfoClass, AssemblyDetailedInformationInActivationContxt = 3, FileInformationInAssemblyOfAssemblyInActivationContxt = 4 } ACTIVATION_CONTEXT_INFO_CLASS;
typedef struct _ACTIVATION_CONTEXT_QUERY_INDEX {
<field name="ulAssemblyIndex"><DWORD /></field>
<field name="ulFileIndexInAssembly"><DWORD /></field>
} ACTIVATION_CONTEXT_QUERY_INDEX, * PACTIVATION_CONTEXT_QUERY_INDEX;
typedef const struct _ACTIVATION_CONTEXT_QUERY_INDEX * PCACTIVATION_CONTEXT_QUERY_INDEX;
typedef struct _ASSEMBLY_FILE_DETAILED_INFORMATION {
<field name="ulFlags"><DWORD /></field>
<field name="ulFilenameLength"><DWORD /></field>
<field name="ulPathLength"><DWORD /></field>
<field name="lpFileName"><PCWSTR /></field>
<field name="lpFilePath"><PCWSTR /></field>
} ASSEMBLY_FILE_DETAILED_INFORMATION, *PASSEMBLY_FILE_DETAILED_INFORMATION;
<typedef name="PCASSEMBLY_FILE_DETAILED_INFORMATION"><ptr const="true"><ASSEMBLY_FILE_DETAILED_INFORMATION /></ptr></typedef>
typedef struct _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION {
<field name="ulFlags"><DWORD /></field>
<field name="ulEncodedAssemblyIdentityLength"><DWORD /></field>
<field name="ulManifestPathType"><DWORD /></field>
<field name="ulManifestPathLength"><DWORD /></field>
<field name="liManifestLastWriteTime"><LARGE_INTEGER /></field>
<field name="ulPolicyPathType"><DWORD /></field>
<field name="ulPolicyPathLength"><DWORD /></field>
<field name="liPolicyLastWriteTime"><LARGE_INTEGER /></field>
<field name="ulMetadataSatelliteRosterIndex"><DWORD /></field>
<field name="ulManifestVersionMajor"><DWORD /></field>
<field name="ulManifestVersionMinor"><DWORD /></field>
<field name="ulPolicyVersionMajor"><DWORD /></field>
<field name="ulPolicyVersionMinor"><DWORD /></field>
<field name="ulAssemblyDirectoryNameLength"><DWORD /></field>
<field name="lpAssemblyEncodedAssemblyIdentity"><PCWSTR /></field>
<field name="lpAssemblyManifestPath"><PCWSTR /></field>
<field name="lpAssemblyPolicyPath"><PCWSTR /></field>
<field name="lpAssemblyDirectoryName"><PCWSTR /></field>
<field name="ulFileCount"><DWORD /></field>
} ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION, * PACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION;
typedef const struct _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION * PCACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION ;
typedef enum {
ACTCTX_RUN_LEVEL_UNSPECIFIED = 0, ACTCTX_RUN_LEVEL_AS_INVOKER, ACTCTX_RUN_LEVEL_HIGHEST_AVAILABLE, ACTCTX_RUN_LEVEL_REQUIRE_ADMIN, ACTCTX_RUN_LEVEL_NUMBERS } ACTCTX_REQUESTED_RUN_LEVEL;
typedef struct _ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION {
<field name="ulFlags"><DWORD /></field>
<field name="RunLevel"><ACTCTX_REQUESTED_RUN_LEVEL /></field>
<field name="UiAccess"><DWORD /></field>
} ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION, * PACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION;
typedef const struct _ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION * PCACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION ;
typedef enum {
ACTCTX_COMPATIBILITY_ELEMENT_TYPE_UNKNOWN = 0, ACTCTX_COMPATIBILITY_ELEMENT_TYPE_OS, ACTCTX_COMPATIBILITY_ELEMENT_TYPE_MITIGATION } ACTCTX_COMPATIBILITY_ELEMENT_TYPE;
typedef struct _COMPATIBILITY_CONTEXT_ELEMENT {
<field name="Id"><GUID /></field>
<field name="Type"><ACTCTX_COMPATIBILITY_ELEMENT_TYPE /></field>
} COMPATIBILITY_CONTEXT_ELEMENT, *PCOMPATIBILITY_CONTEXT_ELEMENT;
typedef const struct _COMPATIBILITY_CONTEXT_ELEMENT *PCCOMPATIBILITY_CONTEXT_ELEMENT;
typedef struct _ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION {
<field name="ElementCount"><DWORD /></field>
COMPATIBILITY_CONTEXT_ELEMENT Elements[];
} ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION, * PACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION;
typedef const struct _ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION * PCACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION;
typedef struct _SUPPORTED_OS_INFO {
<field name="OsCount"><WORD /></field>
<field name="MitigationExist"><WORD /></field>
<field name="OsList"><arr length="(4)"><WORD /></arr></field>
} SUPPORTED_OS_INFO, *PSUPPORTED_OS_INFO;
typedef struct _ACTIVATION_CONTEXT_DETAILED_INFORMATION {
<field name="dwFlags"><DWORD /></field>
<field name="ulFormatVersion"><DWORD /></field>
<field name="ulAssemblyCount"><DWORD /></field>
<field name="ulRootManifestPathType"><DWORD /></field>
<field name="ulRootManifestPathChars"><DWORD /></field>
<field name="ulRootConfigurationPathType"><DWORD /></field>
<field name="ulRootConfigurationPathChars"><DWORD /></field>
<field name="ulAppDirPathType"><DWORD /></field>
<field name="ulAppDirPathChars"><DWORD /></field>
<field name="lpRootManifestPath"><PCWSTR /></field>
<field name="lpRootConfigurationPath"><PCWSTR /></field>
<field name="lpAppDirPath"><PCWSTR /></field>
} ACTIVATION_CONTEXT_DETAILED_INFORMATION, *PACTIVATION_CONTEXT_DETAILED_INFORMATION;
typedef const struct _ACTIVATION_CONTEXT_DETAILED_INFORMATION *PCACTIVATION_CONTEXT_DETAILED_INFORMATION;
typedef struct _HARDWARE_COUNTER_DATA {
<field name="Type"><HARDWARE_COUNTER_TYPE /></field>
<field name="Reserved"><DWORD /></field>
<field name="Value"><DWORD64 /></field>
} HARDWARE_COUNTER_DATA, *PHARDWARE_COUNTER_DATA;
typedef struct _PERFORMANCE_DATA {
<field name="Size"><WORD /></field>
<field name="Version"><BYTE /></field>
<field name="HwCountersCount"><BYTE /></field>
<field name="ContextSwitchCount"><DWORD /></field>
<field name="WaitReasonBitMap"><DWORD64 /></field>
<field name="CycleTime"><DWORD64 /></field>
<field name="RetryCount"><DWORD /></field>
<field name="Reserved"><DWORD /></field>
<field name="HwCounters"><arr length="16"><HARDWARE_COUNTER_DATA /></arr></field>
} PERFORMANCE_DATA, *PPERFORMANCE_DATA;
typedef struct _EVENTLOGRECORD {
<field name="Length"><DWORD /></field>
<field name="Reserved"><DWORD /></field>
<field name="RecordNumber"><DWORD /></field>
<field name="TimeGenerated"><DWORD /></field>
<field name="TimeWritten"><DWORD /></field>
<field name="EventID"><DWORD /></field>
<field name="EventType"><WORD /></field>
<field name="NumStrings"><WORD /></field>
<field name="EventCategory"><WORD /></field>
<field name="ReservedFlags"><WORD /></field>
<field name="ClosingRecordNumber"><DWORD /></field>
<field name="StringOffset"><DWORD /></field>
<field name="UserSidLength"><DWORD /></field>
<field name="UserSidOffset"><DWORD /></field>
<field name="DataLength"><DWORD /></field>
<field name="DataOffset"><DWORD /></field>
} EVENTLOGRECORD, *PEVENTLOGRECORD;
<struct name="_EVENTSFORLOGFILE" />
typedef struct _EVENTSFORLOGFILE EVENTSFORLOGFILE, *PEVENTSFORLOGFILE;
<struct name="_PACKEDEVENTINFO" />
typedef struct _PACKEDEVENTINFO PACKEDEVENTINFO, *PPACKEDEVENTINFO;
struct _EVENTSFORLOGFILE {
<field name="ulSize"><DWORD /></field>
<field name="szLogicalLogFile"><arr length="256"><WCHAR /></arr></field>
<field name="ulNumRecords"><DWORD /></field>
EVENTLOGRECORD pEventLogRecords[];
};
struct _PACKEDEVENTINFO {
<field name="ulSize"><DWORD /></field>
<field name="ulNumEventsForLogFile"><DWORD /></field>
DWORD ulOffsets[];
};
typedef enum _CM_SERVICE_NODE_TYPE {
DriverType = 0x00000001, FileSystemType = 0x00000002, Win32ServiceOwnProcess = 0x00000010, Win32ServiceShareProcess = 0x00000020, AdapterType = 0x00000004, RecognizerType = 0x00000008 } SERVICE_NODE_TYPE;
typedef enum _CM_SERVICE_LOAD_TYPE {
BootLoad = 0x00000000, SystemLoad = 0x00000001, AutoLoad = 0x00000002, DemandLoad = 0x00000003, DisableLoad = 0x00000004 } SERVICE_LOAD_TYPE;
typedef enum _CM_ERROR_CONTROL_TYPE {
IgnoreError = 0x00000000, NormalError = 0x00000001, SevereError = 0x00000002, CriticalError = 0x00000003 } SERVICE_ERROR_TYPE;
typedef struct _TAPE_ERASE {
<field name="Type"><DWORD /></field>
<field name="Immediate"><BOOLEAN /></field>
} TAPE_ERASE, *PTAPE_ERASE;
typedef struct _TAPE_PREPARE {
<field name="Operation"><DWORD /></field>
<field name="Immediate"><BOOLEAN /></field>
} TAPE_PREPARE, *PTAPE_PREPARE;
typedef struct _TAPE_WRITE_MARKS {
<field name="Type"><DWORD /></field>
<field name="Count"><DWORD /></field>
<field name="Immediate"><BOOLEAN /></field>
} TAPE_WRITE_MARKS, *PTAPE_WRITE_MARKS;
typedef struct _TAPE_GET_POSITION {
<field name="Type"><DWORD /></field>
<field name="Partition"><DWORD /></field>
<field name="Offset"><LARGE_INTEGER /></field>
} TAPE_GET_POSITION, *PTAPE_GET_POSITION;
typedef struct _TAPE_SET_POSITION {
<field name="Method"><DWORD /></field>
<field name="Partition"><DWORD /></field>
<field name="Offset"><LARGE_INTEGER /></field>
<field name="Immediate"><BOOLEAN /></field>
} TAPE_SET_POSITION, *PTAPE_SET_POSITION;
typedef struct _TAPE_GET_DRIVE_PARAMETERS {
<field name="ECC"><BOOLEAN /></field>
<field name="Compression"><BOOLEAN /></field>
<field name="DataPadding"><BOOLEAN /></field>
<field name="ReportSetmarks"><BOOLEAN /></field>
<field name="DefaultBlockSize"><DWORD /></field>
<field name="MaximumBlockSize"><DWORD /></field>
<field name="MinimumBlockSize"><DWORD /></field>
<field name="MaximumPartitionCount"><DWORD /></field>
<field name="FeaturesLow"><DWORD /></field>
<field name="FeaturesHigh"><DWORD /></field>
<field name="EOTWarningZoneSize"><DWORD /></field>
} TAPE_GET_DRIVE_PARAMETERS, *PTAPE_GET_DRIVE_PARAMETERS;
typedef struct _TAPE_SET_DRIVE_PARAMETERS {
<field name="ECC"><BOOLEAN /></field>
<field name="Compression"><BOOLEAN /></field>
<field name="DataPadding"><BOOLEAN /></field>
<field name="ReportSetmarks"><BOOLEAN /></field>
<field name="EOTWarningZoneSize"><DWORD /></field>
} TAPE_SET_DRIVE_PARAMETERS, *PTAPE_SET_DRIVE_PARAMETERS;
typedef struct _TAPE_GET_MEDIA_PARAMETERS {
<field name="Capacity"><LARGE_INTEGER /></field>
<field name="Remaining"><LARGE_INTEGER /></field>
<field name="BlockSize"><DWORD /></field>
<field name="PartitionCount"><DWORD /></field>
<field name="WriteProtected"><BOOLEAN /></field>
} TAPE_GET_MEDIA_PARAMETERS, *PTAPE_GET_MEDIA_PARAMETERS;
typedef struct _TAPE_SET_MEDIA_PARAMETERS {
<field name="BlockSize"><DWORD /></field>
} TAPE_SET_MEDIA_PARAMETERS, *PTAPE_SET_MEDIA_PARAMETERS;
typedef struct _TAPE_CREATE_PARTITION {
<field name="Method"><DWORD /></field>
<field name="Count"><DWORD /></field>
<field name="Size"><DWORD /></field>
} TAPE_CREATE_PARTITION, *PTAPE_CREATE_PARTITION;
typedef struct _TAPE_WMI_OPERATIONS {
<field name="Method"><DWORD /></field>
<field name="DataBufferSize"><DWORD /></field>
<field name="DataBuffer"><PVOID /></field>
} TAPE_WMI_OPERATIONS, *PTAPE_WMI_OPERATIONS;
typedef enum _TAPE_DRIVE_PROBLEM_TYPE {
TapeDriveProblemNone, TapeDriveReadWriteWarning, TapeDriveReadWriteError, TapeDriveReadWarning, TapeDriveWriteWarning, TapeDriveReadError, TapeDriveWriteError, TapeDriveHardwareError, TapeDriveUnsupportedMedia, TapeDriveScsiConnectionError, TapeDriveTimetoClean, TapeDriveCleanDriveNow, TapeDriveMediaLifeExpired, TapeDriveSnappedTape } TAPE_DRIVE_PROBLEM_TYPE;
<typedef name="UOW"><GUID /></typedef>
<typedef name="PUOW"><ptr><GUID /></ptr></typedef>
<typedef name="CRM_PROTOCOL_ID"><GUID /></typedef>
<typedef name="PCRM_PROTOCOL_ID"><ptr><GUID /></ptr></typedef>
<typedef name="NOTIFICATION_MASK"><ULONG /></typedef>
typedef struct _TRANSACTION_NOTIFICATION {
<field name="TransactionKey"><PVOID /></field>
<field name="TransactionNotification"><ULONG /></field>
<field name="TmVirtualClock"><LARGE_INTEGER /></field>
<field name="ArgumentLength"><ULONG /></field>
} TRANSACTION_NOTIFICATION, *PTRANSACTION_NOTIFICATION;
typedef struct _TRANSACTION_NOTIFICATION_RECOVERY_ARGUMENT {
<field name="EnlistmentId"><GUID /></field>
<field name="UOW"><UOW /></field>
} TRANSACTION_NOTIFICATION_RECOVERY_ARGUMENT, *PTRANSACTION_NOTIFICATION_RECOVERY_ARGUMENT;
typedef struct _TRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT {
<field name="TmIdentity"><GUID /></field>
<field name="Flags"><ULONG /></field>
} TRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT, *PTRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT;
<typedef name="SAVEPOINT_ID"><ULONG /></typedef>
<typedef name="PSAVEPOINT_ID"><ptr><ULONG /></ptr></typedef>
typedef struct _TRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT {
<field name="SavepointId"><SAVEPOINT_ID /></field>
} TRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT, *PTRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT;
typedef struct _TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT {
<field name="PropagationCookie"><ULONG /></field>
<field name="UOW"><GUID /></field>
<field name="TmIdentity"><GUID /></field>
<field name="BufferLength"><ULONG /></field>
} TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT, *PTRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT;
typedef struct _TRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT {
<field name="MarshalCookie"><ULONG /></field>
<field name="UOW"><GUID /></field>
} TRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT, *PTRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT;
<typedef name="TRANSACTION_NOTIFICATION_PROMOTE_ARGUMENT"><TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT /></typedef>
<typedef name="PTRANSACTION_NOTIFICATION_PROMOTE_ARGUMENT"><ptr><TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT /></ptr></typedef>
typedef struct _KCRM_MARSHAL_HEADER {
<field name="VersionMajor"><ULONG /></field>
<field name="VersionMinor"><ULONG /></field>
<field name="NumProtocols"><ULONG /></field>
<field name="Unused"><ULONG /></field>
} KCRM_MARSHAL_HEADER, *PKCRM_MARSHAL_HEADER, * PRKCRM_MARSHAL_HEADER;
typedef struct _KCRM_TRANSACTION_BLOB {
<field name="UOW"><UOW /></field>
<field name="TmIdentity"><GUID /></field>
<field name="IsolationLevel"><ULONG /></field>
<field name="IsolationFlags"><ULONG /></field>
<field name="Timeout"><ULONG /></field>
<field name="Description"><arr length="64"><WCHAR /></arr></field>
} KCRM_TRANSACTION_BLOB, *PKCRM_TRANSACTION_BLOB, * PRKCRM_TRANSACTION_BLOB;
typedef struct _KCRM_PROTOCOL_BLOB {
<field name="ProtocolId"><CRM_PROTOCOL_ID /></field>
<field name="StaticInfoLength"><ULONG /></field>
<field name="TransactionIdInfoLength"><ULONG /></field>
<field name="Unused1"><ULONG /></field>
<field name="Unused2"><ULONG /></field>
} KCRM_PROTOCOL_BLOB, *PKCRM_PROTOCOL_BLOB, * PRKCRM_PROTOCOL_BLOB;
typedef enum _TRANSACTION_OUTCOME {
TransactionOutcomeUndetermined = 1, TransactionOutcomeCommitted, TransactionOutcomeAborted, } TRANSACTION_OUTCOME;
typedef enum _TRANSACTION_STATE {
TransactionStateNormal = 1, TransactionStateIndoubt, TransactionStateCommittedNotify, } TRANSACTION_STATE;
typedef struct _TRANSACTION_BASIC_INFORMATION {
<field name="TransactionId"><GUID /></field>
<field name="State"><DWORD /></field>
<field name="Outcome"><DWORD /></field>
} TRANSACTION_BASIC_INFORMATION, *PTRANSACTION_BASIC_INFORMATION;
typedef struct _TRANSACTIONMANAGER_BASIC_INFORMATION {
<field name="TmIdentity"><GUID /></field>
<field name="VirtualClock"><LARGE_INTEGER /></field>
} TRANSACTIONMANAGER_BASIC_INFORMATION, *PTRANSACTIONMANAGER_BASIC_INFORMATION;
typedef struct _TRANSACTIONMANAGER_LOG_INFORMATION {
<field name="LogIdentity"><GUID /></field>
} TRANSACTIONMANAGER_LOG_INFORMATION, *PTRANSACTIONMANAGER_LOG_INFORMATION;
typedef struct _TRANSACTIONMANAGER_LOGPATH_INFORMATION {
<field name="LogPathLength"><DWORD /></field>
<field name="LogPath"><arr length="1"><WCHAR /></arr></field>
} TRANSACTIONMANAGER_LOGPATH_INFORMATION, *PTRANSACTIONMANAGER_LOGPATH_INFORMATION;
typedef struct _TRANSACTIONMANAGER_RECOVERY_INFORMATION {
<field name="LastRecoveredLsn"><ULONGLONG /></field>
} TRANSACTIONMANAGER_RECOVERY_INFORMATION, *PTRANSACTIONMANAGER_RECOVERY_INFORMATION;
typedef struct _TRANSACTIONMANAGER_OLDEST_INFORMATION {
<field name="OldestTransactionGuid"><GUID /></field>
} TRANSACTIONMANAGER_OLDEST_INFORMATION, *PTRANSACTIONMANAGER_OLDEST_INFORMATION;
typedef struct _TRANSACTION_PROPERTIES_INFORMATION {
<field name="IsolationLevel"><DWORD /></field>
<field name="IsolationFlags"><DWORD /></field>
<field name="Timeout"><LARGE_INTEGER /></field>
<field name="Outcome"><DWORD /></field>
<field name="DescriptionLength"><DWORD /></field>
<field name="Description"><arr length="1"><WCHAR /></arr></field>
} TRANSACTION_PROPERTIES_INFORMATION, *PTRANSACTION_PROPERTIES_INFORMATION;
typedef struct _TRANSACTION_BIND_INFORMATION {
<field name="TmHandle"><HANDLE /></field>
} TRANSACTION_BIND_INFORMATION, *PTRANSACTION_BIND_INFORMATION;
typedef struct _TRANSACTION_ENLISTMENT_PAIR {
<field name="EnlistmentId"><GUID /></field>
<field name="ResourceManagerId"><GUID /></field>
} TRANSACTION_ENLISTMENT_PAIR, *PTRANSACTION_ENLISTMENT_PAIR;
typedef struct _TRANSACTION_ENLISTMENTS_INFORMATION {
<field name="NumberOfEnlistments"><DWORD /></field>
<field name="EnlistmentPair"><arr length="1"><TRANSACTION_ENLISTMENT_PAIR /></arr></field>
} TRANSACTION_ENLISTMENTS_INFORMATION, *PTRANSACTION_ENLISTMENTS_INFORMATION;
typedef struct _TRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION {
<field name="SuperiorEnlistmentPair"><TRANSACTION_ENLISTMENT_PAIR /></field>
} TRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION, *PTRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION;
typedef struct _RESOURCEMANAGER_BASIC_INFORMATION {
<field name="ResourceManagerId"><GUID /></field>
<field name="DescriptionLength"><DWORD /></field>
<field name="Description"><arr length="1"><WCHAR /></arr></field>
} RESOURCEMANAGER_BASIC_INFORMATION, *PRESOURCEMANAGER_BASIC_INFORMATION;
typedef struct _RESOURCEMANAGER_COMPLETION_INFORMATION {
<field name="IoCompletionPortHandle"><HANDLE /></field>
<field name="CompletionKey"><ULONG_PTR /></field>
} RESOURCEMANAGER_COMPLETION_INFORMATION, *PRESOURCEMANAGER_COMPLETION_INFORMATION;
typedef enum _TRANSACTION_INFORMATION_CLASS {
TransactionBasicInformation, TransactionPropertiesInformation, TransactionEnlistmentInformation, TransactionSuperiorEnlistmentInformation, TransactionBindInformation, TransactionDTCPrivateInformation , } TRANSACTION_INFORMATION_CLASS;
typedef enum _TRANSACTIONMANAGER_INFORMATION_CLASS {
TransactionManagerBasicInformation, TransactionManagerLogInformation, TransactionManagerLogPathInformation, TransactionManagerRecoveryInformation = 4, TransactionManagerOnlineProbeInformation = 3, TransactionManagerOldestTransactionInformation = 5 } TRANSACTIONMANAGER_INFORMATION_CLASS;
typedef enum _RESOURCEMANAGER_INFORMATION_CLASS {
ResourceManagerBasicInformation, ResourceManagerCompletionInformation, } RESOURCEMANAGER_INFORMATION_CLASS;
typedef struct _ENLISTMENT_BASIC_INFORMATION {
<field name="EnlistmentId"><GUID /></field>
<field name="TransactionId"><GUID /></field>
<field name="ResourceManagerId"><GUID /></field>
} ENLISTMENT_BASIC_INFORMATION, *PENLISTMENT_BASIC_INFORMATION;
typedef struct _ENLISTMENT_CRM_INFORMATION {
<field name="CrmTransactionManagerId"><GUID /></field>
<field name="CrmResourceManagerId"><GUID /></field>
<field name="CrmEnlistmentId"><GUID /></field>
} ENLISTMENT_CRM_INFORMATION, *PENLISTMENT_CRM_INFORMATION;
typedef enum _ENLISTMENT_INFORMATION_CLASS {
EnlistmentBasicInformation, EnlistmentRecoveryInformation, EnlistmentCrmInformation } ENLISTMENT_INFORMATION_CLASS;
typedef struct _TRANSACTION_LIST_ENTRY {
<field name="UOW"><UOW /></field>
} TRANSACTION_LIST_ENTRY, *PTRANSACTION_LIST_ENTRY;
typedef struct _TRANSACTION_LIST_INFORMATION {
<field name="NumberOfTransactions"><DWORD /></field>
<field name="TransactionInformation"><arr length="1"><TRANSACTION_LIST_ENTRY /></arr></field>
} TRANSACTION_LIST_INFORMATION, *PTRANSACTION_LIST_INFORMATION;
typedef enum _KTMOBJECT_TYPE {
KTMOBJECT_TRANSACTION, KTMOBJECT_TRANSACTION_MANAGER, KTMOBJECT_RESOURCE_MANAGER, KTMOBJECT_ENLISTMENT, KTMOBJECT_INVALID } KTMOBJECT_TYPE, *PKTMOBJECT_TYPE;
typedef struct _KTMOBJECT_CURSOR {
<field name="LastQuery"><GUID /></field>
<field name="ObjectIdCount"><DWORD /></field>
<field name="ObjectIds"><arr length="1"><GUID /></arr></field>
} KTMOBJECT_CURSOR, *PKTMOBJECT_CURSOR;
<typedef name="TP_VERSION"><DWORD /></typedef>
<typedef name="PTP_VERSION"><ptr><DWORD /></ptr></typedef> typedef struct _TP_CALLBACK_INSTANCE TP_CALLBACK_INSTANCE, *PTP_CALLBACK_INSTANCE;
typedef void (__stdcall *PTP_SIMPLE_CALLBACK)( PTP_CALLBACK_INSTANCE Instance, PVOID Context );
typedef struct _TP_POOL TP_POOL, *PTP_POOL;
typedef enum _TP_CALLBACK_PRIORITY {
TP_CALLBACK_PRIORITY_HIGH, TP_CALLBACK_PRIORITY_NORMAL, TP_CALLBACK_PRIORITY_LOW, TP_CALLBACK_PRIORITY_INVALID } TP_CALLBACK_PRIORITY;
typedef struct _TP_POOL_STACK_INFORMATION {
<field name="StackReserve"><SIZE_T /></field>
<field name="StackCommit"><SIZE_T /></field>
}TP_POOL_STACK_INFORMATION, *PTP_POOL_STACK_INFORMATION;
typedef struct _TP_CLEANUP_GROUP TP_CLEANUP_GROUP, *PTP_CLEANUP_GROUP;
typedef void (__stdcall *PTP_CLEANUP_GROUP_CANCEL_CALLBACK)( PVOID ObjectContext, PVOID CleanupContext );
typedef struct _TP_CALLBACK_ENVIRON_V3 {
<field name="Version"><TP_VERSION /></field>
<field name="Pool"><PTP_POOL /></field>
<field name="CleanupGroup"><PTP_CLEANUP_GROUP /></field>
<field name="CleanupGroupCancelCallback"><PTP_CLEANUP_GROUP_CANCEL_CALLBACK /></field>
<field name="RaceDll"><PVOID /></field>
struct _ACTIVATION_CONTEXT *ActivationContext;
<field name="FinalizationCallback"><PTP_SIMPLE_CALLBACK /></field>
union {
<field name="Flags"><DWORD /></field>
struct {
<bitfield name="LongFunction" bits="1"><DWORD /></bitfield>
<bitfield name="Persistent" bits="1"><DWORD /></bitfield>
<bitfield name="Private" bits="30"><DWORD /></bitfield>
} s;
} u;
<field name="CallbackPriority"><TP_CALLBACK_PRIORITY /></field>
<field name="Size"><DWORD /></field>
} TP_CALLBACK_ENVIRON_V3;
<typedef name="TP_CALLBACK_ENVIRON"><TP_CALLBACK_ENVIRON_V3 /></typedef>
<typedef name="PTP_CALLBACK_ENVIRON"><ptr><TP_CALLBACK_ENVIRON_V3 /></ptr></typedef>
__forceinline void TpInitializeCallbackEnviron( PTP_CALLBACK_ENVIRON CallbackEnviron ) {
CallbackEnviron->Version = 3;
CallbackEnviron->Pool = ((void *)0);
CallbackEnviron->CleanupGroup = ((void *)0);
CallbackEnviron->CleanupGroupCancelCallback = ((void *)0);
CallbackEnviron->RaceDll = ((void *)0);
CallbackEnviron->ActivationContext = ((void *)0);
CallbackEnviron->FinalizationCallback = ((void *)0);
CallbackEnviron->u.Flags = 0;
CallbackEnviron->CallbackPriority = TP_CALLBACK_PRIORITY_NORMAL;
CallbackEnviron->Size = sizeof(TP_CALLBACK_ENVIRON);
} __forceinline void TpSetCallbackThreadpool( PTP_CALLBACK_ENVIRON CallbackEnviron, PTP_POOL Pool ) {
CallbackEnviron->Pool = Pool;
} __forceinline void TpSetCallbackCleanupGroup( PTP_CALLBACK_ENVIRON CallbackEnviron, PTP_CLEANUP_GROUP CleanupGroup, PTP_CLEANUP_GROUP_CANCEL_CALLBACK CleanupGroupCancelCallback ) {
CallbackEnviron->CleanupGroup = CleanupGroup;
CallbackEnviron->CleanupGroupCancelCallback = CleanupGroupCancelCallback;
} __forceinline void TpSetCallbackActivationContext( PTP_CALLBACK_ENVIRON CallbackEnviron, struct _ACTIVATION_CONTEXT *ActivationContext ) {
CallbackEnviron->ActivationContext = ActivationContext;
} __forceinline void TpSetCallbackNoActivationContext( PTP_CALLBACK_ENVIRON CallbackEnviron ) {
CallbackEnviron->ActivationContext = (struct _ACTIVATION_CONTEXT *)(LONG_PTR) -1;
} __forceinline void TpSetCallbackLongFunction( PTP_CALLBACK_ENVIRON CallbackEnviron ) {
CallbackEnviron->u.s.LongFunction = 1;
} __forceinline void TpSetCallbackRaceWithDll( PTP_CALLBACK_ENVIRON CallbackEnviron, PVOID DllHandle ) {
CallbackEnviron->RaceDll = DllHandle;
} __forceinline void TpSetCallbackFinalizationCallback( PTP_CALLBACK_ENVIRON CallbackEnviron, PTP_SIMPLE_CALLBACK FinalizationCallback ) {
CallbackEnviron->FinalizationCallback = FinalizationCallback;
} __forceinline void TpSetCallbackPriority( PTP_CALLBACK_ENVIRON CallbackEnviron, TP_CALLBACK_PRIORITY Priority ) {
CallbackEnviron->CallbackPriority = Priority;
} __forceinline void TpSetCallbackPersistent( PTP_CALLBACK_ENVIRON CallbackEnviron ) {
CallbackEnviron->u.s.Persistent = 1;
} __forceinline void TpDestroyCallbackEnviron( PTP_CALLBACK_ENVIRON CallbackEnviron ) {
(CallbackEnviron);
} typedef struct _TP_WORK TP_WORK, *PTP_WORK;
typedef void (__stdcall *PTP_WORK_CALLBACK)( PTP_CALLBACK_INSTANCE Instance, PVOID Context, PTP_WORK Work );
typedef struct _TP_TIMER TP_TIMER, *PTP_TIMER;
typedef void (__stdcall *PTP_TIMER_CALLBACK)( PTP_CALLBACK_INSTANCE Instance, PVOID Context, PTP_TIMER Timer );
<typedef name="TP_WAIT_RESULT"><DWORD /></typedef>
typedef struct _TP_WAIT TP_WAIT, *PTP_WAIT;
typedef void (__stdcall *PTP_WAIT_CALLBACK)( PTP_CALLBACK_INSTANCE Instance, PVOID Context, PTP_WAIT Wait, TP_WAIT_RESULT WaitResult );
typedef struct _TP_IO TP_IO, *PTP_IO;
__inline struct _TEB * NtCurrentTeb( void ) { return (struct _TEB *) (ULONG_PTR) __readfsdword (0x18);
} <typedef name="WPARAM"><UINT_PTR /></typedef>
<typedef name="LPARAM"><LONG_PTR /></typedef>
<typedef name="LRESULT"><LONG_PTR /></typedef>
struct HWND__{int32 unused;
;
typedef struct HWND__ *HWND;
struct HHOOK__{int32 unused;
;
typedef struct HHOOK__ *HHOOK;
<typedef name="ATOM"><WORD /></typedef>
<typedef name="SPHANDLE"><ptr><HANDLE /></ptr></typedef>
<typedef name="LPHANDLE"><ptr><HANDLE /></ptr></typedef>
<typedef name="HGLOBAL"><HANDLE /></typedef>
<typedef name="HLOCAL"><HANDLE /></typedef>
<typedef name="GLOBALHANDLE"><HANDLE /></typedef>
<typedef name="LOCALHANDLE"><HANDLE /></typedef>
typedef int32(__stdcall *FARPROC)();
typedef int32(__stdcall *NEARPROC)();
typedef int32 (__stdcall *PROC)();
<typedef name="HGDIOBJ"><ptr><void /></ptr></typedef>
struct HKEY__{int32 unused;
;
typedef struct HKEY__ *HKEY;
<typedef name="PHKEY"><ptr><HKEY /></ptr></typedef>
struct HACCEL__{int32 unused;
;
typedef struct HACCEL__ *HACCEL;
struct HBITMAP__{int32 unused;
;
typedef struct HBITMAP__ *HBITMAP;
struct HBRUSH__{int32 unused;
;
typedef struct HBRUSH__ *HBRUSH;
struct HCOLORSPACE__{int32 unused;
;
typedef struct HCOLORSPACE__ *HCOLORSPACE;
struct HDC__{int32 unused;
;
typedef struct HDC__ *HDC;
struct HGLRC__{int32 unused;
;
typedef struct HGLRC__ *HGLRC;
struct HDESK__{int32 unused;
;
typedef struct HDESK__ *HDESK;
struct HENHMETAFILE__{int32 unused;
;
typedef struct HENHMETAFILE__ *HENHMETAFILE;
struct HFONT__{int32 unused;
;
typedef struct HFONT__ *HFONT;
struct HICON__{int32 unused;
;
typedef struct HICON__ *HICON;
struct HMENU__{int32 unused;
;
typedef struct HMENU__ *HMENU;
struct HMETAFILE__{int32 unused;
;
typedef struct HMETAFILE__ *HMETAFILE;
struct HINSTANCE__{int32 unused;
;
typedef struct HINSTANCE__ *HINSTANCE;
<typedef name="HMODULE"><HINSTANCE /></typedef> struct HPALETTE__{int32 unused;
;
typedef struct HPALETTE__ *HPALETTE;
struct HPEN__{int32 unused;
;
typedef struct HPEN__ *HPEN;
struct HRGN__{int32 unused;
;
typedef struct HRGN__ *HRGN;
struct HRSRC__{int32 unused;
;
typedef struct HRSRC__ *HRSRC;
struct HSPRITE__{int32 unused;
;
typedef struct HSPRITE__ *HSPRITE;
struct HLSURF__{int32 unused;
;
typedef struct HLSURF__ *HLSURF;
struct HSTR__{int32 unused;
;
typedef struct HSTR__ *HSTR;
struct HTASK__{int32 unused;
;
typedef struct HTASK__ *HTASK;
struct HWINSTA__{int32 unused;
;
typedef struct HWINSTA__ *HWINSTA;
struct HKL__{int32 unused;
;
typedef struct HKL__ *HKL;
struct HWINEVENTHOOK__{int32 unused;
;
typedef struct HWINEVENTHOOK__ *HWINEVENTHOOK;
struct HMONITOR__{int32 unused;
;
typedef struct HMONITOR__ *HMONITOR;
struct HUMPD__{int32 unused;
;
typedef struct HUMPD__ *HUMPD;
<typedef name="HFILE"><int32 /></typedef>
<typedef name="HCURSOR"><HICON /></typedef> <typedef name="COLORREF"><DWORD /></typedef>
<typedef name="LPCOLORREF"><ptr><DWORD /></ptr></typedef>
typedef struct tagRECT {
<field name="left"><LONG /></field>
<field name="top"><LONG /></field>
<field name="right"><LONG /></field>
<field name="bottom"><LONG /></field>
} RECT, *PRECT, *NPRECT, *LPRECT;
<typedef name="LPCRECT"><ptr const="true"><RECT /></ptr></typedef>
typedef struct _RECTL {
<field name="left"><LONG /></field>
<field name="top"><LONG /></field>
<field name="right"><LONG /></field>
<field name="bottom"><LONG /></field>
} RECTL, *PRECTL, *LPRECTL;
<typedef name="LPCRECTL"><ptr const="true"><RECTL /></ptr></typedef>
typedef struct tagPOINT {
<field name="x"><LONG /></field>
<field name="y"><LONG /></field>
} POINT, *PPOINT, *NPPOINT, *LPPOINT;
typedef struct _POINTL {
<field name="x"><LONG /></field>
<field name="y"><LONG /></field>
} POINTL, *PPOINTL;
typedef struct tagSIZE {
<field name="cx"><LONG /></field>
<field name="cy"><LONG /></field>
} SIZE, *PSIZE, *LPSIZE;
<typedef name="SIZEL"><SIZE /></typedef>
typedef SIZE *PSIZEL, *LPSIZEL;
typedef struct tagPOINTS {
<field name="x"><SHORT /></field>
<field name="y"><SHORT /></field>
} POINTS, *PPOINTS, *LPPOINTS;
typedef struct _FILETIME {
<field name="dwLowDateTime"><DWORD /></field>
<field name="dwHighDateTime"><DWORD /></field>
} FILETIME, *PFILETIME, *LPFILETIME;
typedef struct _OVERLAPPED {
<field name="Internal"><ULONG_PTR /></field>
<field name="InternalHigh"><ULONG_PTR /></field>
union {
struct {
<field name="Offset"><DWORD /></field>
<field name="OffsetHigh"><DWORD /></field>
} ;
<field name="Pointer"><PVOID /></field>
} ;
<field name="hEvent"><HANDLE /></field>
} OVERLAPPED, *LPOVERLAPPED;
typedef struct _OVERLAPPED_ENTRY {
<field name="lpCompletionKey"><ULONG_PTR /></field>
<field name="lpOverlapped"><LPOVERLAPPED /></field>
<field name="Internal"><ULONG_PTR /></field>
<field name="dwNumberOfBytesTransferred"><DWORD /></field>
} OVERLAPPED_ENTRY, *LPOVERLAPPED_ENTRY;
typedef struct _SECURITY_ATTRIBUTES {
<field name="nLength"><DWORD /></field>
<field name="lpSecurityDescriptor"><LPVOID /></field>
<field name="bInheritHandle"><BOOL /></field>
} SECURITY_ATTRIBUTES, *PSECURITY_ATTRIBUTES, *LPSECURITY_ATTRIBUTES;
typedef struct _PROCESS_INFORMATION {
<field name="hProcess"><HANDLE /></field>
<field name="hThread"><HANDLE /></field>
<field name="dwProcessId"><DWORD /></field>
<field name="dwThreadId"><DWORD /></field>
} PROCESS_INFORMATION, *PPROCESS_INFORMATION, *LPPROCESS_INFORMATION;
typedef struct _SYSTEMTIME {
<field name="wYear"><WORD /></field>
<field name="wMonth"><WORD /></field>
<field name="wDayOfWeek"><WORD /></field>
<field name="wDay"><WORD /></field>
<field name="wHour"><WORD /></field>
<field name="wMinute"><WORD /></field>
<field name="wSecond"><WORD /></field>
<field name="wMilliseconds"><WORD /></field>
} SYSTEMTIME, *PSYSTEMTIME, *LPSYSTEMTIME;
typedef DWORD (__stdcall *PTHREAD_START_ROUTINE)( LPVOID lpThreadParameter );
<typedef name="LPTHREAD_START_ROUTINE"><PTHREAD_START_ROUTINE /></typedef>
typedef void (__stdcall *PFIBER_START_ROUTINE)( LPVOID lpFiberParameter );
<typedef name="LPFIBER_START_ROUTINE"><PFIBER_START_ROUTINE /></typedef>
<typedef name="CRITICAL_SECTION"><RTL_CRITICAL_SECTION /></typedef>
<typedef name="PCRITICAL_SECTION"><PRTL_CRITICAL_SECTION /></typedef>
<typedef name="LPCRITICAL_SECTION"><PRTL_CRITICAL_SECTION /></typedef>
<typedef name="CRITICAL_SECTION_DEBUG"><RTL_CRITICAL_SECTION_DEBUG /></typedef>
<typedef name="PCRITICAL_SECTION_DEBUG"><PRTL_CRITICAL_SECTION_DEBUG /></typedef>
<typedef name="LPCRITICAL_SECTION_DEBUG"><PRTL_CRITICAL_SECTION_DEBUG /></typedef>
<typedef name="INIT_ONCE"><RTL_RUN_ONCE /></typedef>
<typedef name="PINIT_ONCE"><PRTL_RUN_ONCE /></typedef>
<typedef name="LPINIT_ONCE"><PRTL_RUN_ONCE /></typedef>
typedef BOOL (__stdcall *PINIT_ONCE_FN)(PINIT_ONCE InitOnce, PVOID Parameter, PVOID *Context );

void __stdcall InitOnceInitialize(PINIT_ONCE InitOnce );

BOOL __stdcall InitOnceExecuteOnce(PINIT_ONCE InitOnce, PINIT_ONCE_FN InitFn, PVOID Parameter, LPVOID *Context );

BOOL __stdcall InitOnceBeginInitialize(LPINIT_ONCE lpInitOnce, DWORD dwFlags, PBOOL fPending, LPVOID *lpContext );

BOOL __stdcall InitOnceComplete(LPINIT_ONCE lpInitOnce, DWORD dwFlags, LPVOID lpContext );
<typedef name="SRWLOCK"><RTL_SRWLOCK /></typedef>
<typedef name="PSRWLOCK"><ptr><RTL_SRWLOCK /></ptr></typedef>

void __stdcall InitializeSRWLock(PSRWLOCK SRWLock );

void __stdcall ReleaseSRWLockExclusive(PSRWLOCK SRWLock );

void __stdcall ReleaseSRWLockShared(PSRWLOCK SRWLock );

void __stdcall AcquireSRWLockExclusive(PSRWLOCK SRWLock );

void __stdcall AcquireSRWLockShared(PSRWLOCK SRWLock );

BOOLEAN __stdcall TryAcquireSRWLockExclusive(PSRWLOCK SRWLock );

BOOLEAN __stdcall TryAcquireSRWLockShared(PSRWLOCK SRWLock );
<typedef name="CONDITION_VARIABLE"><RTL_CONDITION_VARIABLE /></typedef>
<typedef name="PCONDITION_VARIABLE"><ptr><RTL_CONDITION_VARIABLE /></ptr></typedef>

void __stdcall InitializeConditionVariable(PCONDITION_VARIABLE ConditionVariable );

void __stdcall WakeConditionVariable(PCONDITION_VARIABLE ConditionVariable );

void __stdcall WakeAllConditionVariable(PCONDITION_VARIABLE ConditionVariable );

BOOL __stdcall SleepConditionVariableCS(PCONDITION_VARIABLE ConditionVariable, PCRITICAL_SECTION CriticalSection, DWORD dwMilliseconds );

BOOL __stdcall SleepConditionVariableSRW(PCONDITION_VARIABLE ConditionVariable, PSRWLOCK SRWLock, DWORD dwMilliseconds, ULONG Flags );

PVOID __stdcall EncodePointer(PVOID Ptr );

PVOID __stdcall DecodePointer(PVOID Ptr );

PVOID __stdcall EncodeSystemPointer(PVOID Ptr );

PVOID __stdcall DecodeSystemPointer(PVOID Ptr );
<typedef name="LPLDT_ENTRY"><PLDT_ENTRY /></typedef>
typedef struct _COMMPROP {
<field name="wPacketLength"><WORD /></field>
<field name="wPacketVersion"><WORD /></field>
<field name="dwServiceMask"><DWORD /></field>
<field name="dwReserved1"><DWORD /></field>
<field name="dwMaxTxQueue"><DWORD /></field>
<field name="dwMaxRxQueue"><DWORD /></field>
<field name="dwMaxBaud"><DWORD /></field>
<field name="dwProvSubType"><DWORD /></field>
<field name="dwProvCapabilities"><DWORD /></field>
<field name="dwSettableParams"><DWORD /></field>
<field name="dwSettableBaud"><DWORD /></field>
<field name="wSettableData"><WORD /></field>
<field name="wSettableStopParity"><WORD /></field>
<field name="dwCurrentTxQueue"><DWORD /></field>
<field name="dwCurrentRxQueue"><DWORD /></field>
<field name="dwProvSpec1"><DWORD /></field>
<field name="dwProvSpec2"><DWORD /></field>
<field name="wcProvChar"><arr length="1"><WCHAR /></arr></field>
} COMMPROP, *LPCOMMPROP;
typedef struct _COMSTAT {
<bitfield name="fCtsHold" bits="1"><DWORD /></bitfield>
<bitfield name="fDsrHold" bits="1"><DWORD /></bitfield>
<bitfield name="fRlsdHold" bits="1"><DWORD /></bitfield>
<bitfield name="fXoffHold" bits="1"><DWORD /></bitfield>
<bitfield name="fXoffSent" bits="1"><DWORD /></bitfield>
<bitfield name="fEof" bits="1"><DWORD /></bitfield>
<bitfield name="fTxim" bits="1"><DWORD /></bitfield>
<bitfield name="fReserved" bits="25"><DWORD /></bitfield>
<field name="cbInQue"><DWORD /></field>
<field name="cbOutQue"><DWORD /></field>
} COMSTAT, *LPCOMSTAT;
typedef struct _DCB {
<field name="DCBlength"><DWORD /></field>
<field name="BaudRate"><DWORD /></field>
<bitfield name="fBinary" bits="1"><DWORD /></bitfield>
<bitfield name="fParity" bits="1"><DWORD /></bitfield>
<bitfield name="fOutxCtsFlow" bits="1"><DWORD /></bitfield>
<bitfield name="fOutxDsrFlow" bits="1"><DWORD /></bitfield>
<bitfield name="fDtrControl" bits="2"><DWORD /></bitfield>
<bitfield name="fDsrSensitivity" bits="1"><DWORD /></bitfield>
<bitfield name="fTXContinueOnXoff" bits="1"><DWORD /></bitfield>
<bitfield name="fOutX" bits="1"><DWORD /></bitfield>
<bitfield name="fInX" bits="1"><DWORD /></bitfield>
<bitfield name="fErrorChar" bits="1"><DWORD /></bitfield>
<bitfield name="fNull" bits="1"><DWORD /></bitfield>
<bitfield name="fRtsControl" bits="2"><DWORD /></bitfield>
<bitfield name="fAbortOnError" bits="1"><DWORD /></bitfield>
<bitfield name="fDummy2" bits="17"><DWORD /></bitfield>
<field name="wReserved"><WORD /></field>
<field name="XonLim"><WORD /></field>
<field name="XoffLim"><WORD /></field>
<field name="ByteSize"><BYTE /></field>
<field name="Parity"><BYTE /></field>
<field name="StopBits"><BYTE /></field>
<field name="XonChar"><char /></field>
<field name="XoffChar"><char /></field>
<field name="ErrorChar"><char /></field>
<field name="EofChar"><char /></field>
<field name="EvtChar"><char /></field>
<field name="wReserved1"><WORD /></field>
} DCB, *LPDCB;
typedef struct _COMMTIMEOUTS {
<field name="ReadIntervalTimeout"><DWORD /></field>
<field name="ReadTotalTimeoutMultiplier"><DWORD /></field>
<field name="ReadTotalTimeoutConstant"><DWORD /></field>
<field name="WriteTotalTimeoutMultiplier"><DWORD /></field>
<field name="WriteTotalTimeoutConstant"><DWORD /></field>
} COMMTIMEOUTS, *LPCOMMTIMEOUTS;
typedef struct _COMMCONFIG {
<field name="dwSize"><DWORD /></field>
<field name="wVersion"><WORD /></field>
<field name="wReserved"><WORD /></field>
<field name="dcb"><DCB /></field>
<field name="dwProviderSubType"><DWORD /></field>
<field name="dwProviderOffset"><DWORD /></field>
<field name="dwProviderSize"><DWORD /></field>
<field name="wcProviderData"><arr length="1"><WCHAR /></arr></field>
} COMMCONFIG, *LPCOMMCONFIG;
typedef struct _SYSTEM_INFO {
union {
<field name="dwOemId"><DWORD /></field>
struct {
<field name="wProcessorArchitecture"><WORD /></field>
<field name="wReserved"><WORD /></field>
} ;
} ;
<field name="dwPageSize"><DWORD /></field>
<field name="lpMinimumApplicationAddress"><LPVOID /></field>
<field name="lpMaximumApplicationAddress"><LPVOID /></field>
<field name="dwActiveProcessorMask"><DWORD_PTR /></field>
<field name="dwNumberOfProcessors"><DWORD /></field>
<field name="dwProcessorType"><DWORD /></field>
<field name="dwAllocationGranularity"><DWORD /></field>
<field name="wProcessorLevel"><WORD /></field>
<field name="wProcessorRevision"><WORD /></field>
} SYSTEM_INFO, *LPSYSTEM_INFO;
typedef struct _MEMORYSTATUS {
<field name="dwLength"><DWORD /></field>
<field name="dwMemoryLoad"><DWORD /></field>
<field name="dwTotalPhys"><SIZE_T /></field>
<field name="dwAvailPhys"><SIZE_T /></field>
<field name="dwTotalPageFile"><SIZE_T /></field>
<field name="dwAvailPageFile"><SIZE_T /></field>
<field name="dwTotalVirtual"><SIZE_T /></field>
<field name="dwAvailVirtual"><SIZE_T /></field>
} MEMORYSTATUS, *LPMEMORYSTATUS;
typedef struct _EXCEPTION_DEBUG_INFO {
<field name="ExceptionRecord"><EXCEPTION_RECORD /></field>
<field name="dwFirstChance"><DWORD /></field>
} EXCEPTION_DEBUG_INFO, *LPEXCEPTION_DEBUG_INFO;
typedef struct _CREATE_THREAD_DEBUG_INFO {
<field name="hThread"><HANDLE /></field>
<field name="lpThreadLocalBase"><LPVOID /></field>
<field name="lpStartAddress"><LPTHREAD_START_ROUTINE /></field>
} CREATE_THREAD_DEBUG_INFO, *LPCREATE_THREAD_DEBUG_INFO;
typedef struct _CREATE_PROCESS_DEBUG_INFO {
<field name="hFile"><HANDLE /></field>
<field name="hProcess"><HANDLE /></field>
<field name="hThread"><HANDLE /></field>
<field name="lpBaseOfImage"><LPVOID /></field>
<field name="dwDebugInfoFileOffset"><DWORD /></field>
<field name="nDebugInfoSize"><DWORD /></field>
<field name="lpThreadLocalBase"><LPVOID /></field>
<field name="lpStartAddress"><LPTHREAD_START_ROUTINE /></field>
<field name="lpImageName"><LPVOID /></field>
<field name="fUnicode"><WORD /></field>
} CREATE_PROCESS_DEBUG_INFO, *LPCREATE_PROCESS_DEBUG_INFO;
typedef struct _EXIT_THREAD_DEBUG_INFO {
<field name="dwExitCode"><DWORD /></field>
} EXIT_THREAD_DEBUG_INFO, *LPEXIT_THREAD_DEBUG_INFO;
typedef struct _EXIT_PROCESS_DEBUG_INFO {
<field name="dwExitCode"><DWORD /></field>
} EXIT_PROCESS_DEBUG_INFO, *LPEXIT_PROCESS_DEBUG_INFO;
typedef struct _LOAD_DLL_DEBUG_INFO {
<field name="hFile"><HANDLE /></field>
<field name="lpBaseOfDll"><LPVOID /></field>
<field name="dwDebugInfoFileOffset"><DWORD /></field>
<field name="nDebugInfoSize"><DWORD /></field>
<field name="lpImageName"><LPVOID /></field>
<field name="fUnicode"><WORD /></field>
} LOAD_DLL_DEBUG_INFO, *LPLOAD_DLL_DEBUG_INFO;
typedef struct _UNLOAD_DLL_DEBUG_INFO {
<field name="lpBaseOfDll"><LPVOID /></field>
} UNLOAD_DLL_DEBUG_INFO, *LPUNLOAD_DLL_DEBUG_INFO;
typedef struct _OUTPUT_DEBUG_STRING_INFO {
<field name="lpDebugStringData"><LPSTR /></field>
<field name="fUnicode"><WORD /></field>
<field name="nDebugStringLength"><WORD /></field>
} OUTPUT_DEBUG_STRING_INFO, *LPOUTPUT_DEBUG_STRING_INFO;
typedef struct _RIP_INFO {
<field name="dwError"><DWORD /></field>
<field name="dwType"><DWORD /></field>
} RIP_INFO, *LPRIP_INFO;
typedef struct _DEBUG_EVENT {
<field name="dwDebugEventCode"><DWORD /></field>
<field name="dwProcessId"><DWORD /></field>
<field name="dwThreadId"><DWORD /></field>
union {
<field name="Exception"><EXCEPTION_DEBUG_INFO /></field>
<field name="CreateThread"><CREATE_THREAD_DEBUG_INFO /></field>
<field name="CreateProcessInfo"><CREATE_PROCESS_DEBUG_INFO /></field>
<field name="ExitThread"><EXIT_THREAD_DEBUG_INFO /></field>
<field name="ExitProcess"><EXIT_PROCESS_DEBUG_INFO /></field>
<field name="LoadDll"><LOAD_DLL_DEBUG_INFO /></field>
<field name="UnloadDll"><UNLOAD_DLL_DEBUG_INFO /></field>
<field name="DebugString"><OUTPUT_DEBUG_STRING_INFO /></field>
<field name="RipInfo"><RIP_INFO /></field>
} u;
} DEBUG_EVENT, *LPDEBUG_EVENT;
typedef struct _JIT_DEBUG_INFO {
<field name="dwSize"><DWORD /></field>
<field name="dwProcessorArchitecture"><DWORD /></field>
<field name="dwThreadID"><DWORD /></field>
<field name="dwReserved0"><DWORD /></field>
<field name="lpExceptionAddress"><ULONG64 /></field>
<field name="lpExceptionRecord"><ULONG64 /></field>
<field name="lpContextRecord"><ULONG64 /></field>
} JIT_DEBUG_INFO, *LPJIT_DEBUG_INFO;
<typedef name="JIT_DEBUG_INFO32"><JIT_DEBUG_INFO /></typedef>
<typedef name="LPJIT_DEBUG_INFO32"><ptr><JIT_DEBUG_INFO /></ptr></typedef>
<typedef name="JIT_DEBUG_INFO64"><JIT_DEBUG_INFO /></typedef>
<typedef name="LPJIT_DEBUG_INFO64"><ptr><JIT_DEBUG_INFO /></ptr></typedef>
<typedef name="LPCONTEXT"><PCONTEXT /></typedef>
<typedef name="LPEXCEPTION_RECORD"><PEXCEPTION_RECORD /></typedef>
<typedef name="LPEXCEPTION_POINTERS"><PEXCEPTION_POINTERS /></typedef>
typedef struct _OFSTRUCT {
<field name="cBytes"><BYTE /></field>
<field name="fFixedDisk"><BYTE /></field>
<field name="nErrCode"><WORD /></field>
<field name="Reserved1"><WORD /></field>
<field name="Reserved2"><WORD /></field>
<field name="szPathName"><arr length="128"><CHAR /></arr></field>
} OFSTRUCT, *LPOFSTRUCT, *POFSTRUCT;

LONG __stdcall InterlockedIncrement(LONG volatile *lpAddend );

LONG __stdcall InterlockedDecrement(LONG volatile *lpAddend );

LONG __stdcall InterlockedExchange(LONG volatile *Target, LONG Value );

LONG __stdcall InterlockedExchangeAdd(LONG volatile *Addend, LONG Value );

LONG __stdcall InterlockedCompareExchange(LONG volatile *Destination, LONG Exchange, LONG Comperand );

LONGLONG __stdcall InterlockedCompareExchange64(LONGLONG volatile *Destination, LONGLONG Exchange, LONGLONG Comperand );
void __stdcall InitializeSListHead(PSLIST_HEADER ListHead );

PSINGLE_LIST_ENTRY __stdcall InterlockedPopEntrySList(PSLIST_HEADER ListHead );

PSINGLE_LIST_ENTRY __stdcall InterlockedPushEntrySList(PSLIST_HEADER ListHead, PSINGLE_LIST_ENTRY ListEntry );

PSINGLE_LIST_ENTRY __stdcall InterlockedFlushSList(PSLIST_HEADER ListHead );

USHORT __stdcall QueryDepthSList(PSLIST_HEADER ListHead );

BOOL __stdcall FreeResource( HGLOBAL hResData );

LPVOID __stdcall LockResource( HGLOBAL hResData );
int32 __stdcall WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int32 nShowCmd );
int32 __stdcall wWinMain( HINSTANCE hInstance, HINSTANCE hPrevInstance, LPWSTR lpCmdLine, int32 nShowCmd );

BOOL __stdcall FreeLibrary(HMODULE hLibModule );

__declspec(noreturn) void __stdcall FreeLibraryAndExitThread(HMODULE hLibModule, DWORD dwExitCode );

BOOL __stdcall DisableThreadLibraryCalls(HMODULE hLibModule );

FARPROC __stdcall GetProcAddress(HMODULE hModule, LPCSTR lpProcName );

DWORD __stdcall GetVersion(void );

HGLOBAL __stdcall GlobalAlloc(UINT uFlags, SIZE_T dwBytes );

HGLOBAL __stdcall GlobalReAlloc(HGLOBAL hMem, SIZE_T dwBytes, UINT uFlags );

SIZE_T __stdcall GlobalSize(HGLOBAL hMem );

UINT __stdcall GlobalFlags(HGLOBAL hMem );

LPVOID __stdcall GlobalLock(HGLOBAL hMem );

HGLOBAL __stdcall GlobalHandle(LPCVOID pMem );

BOOL __stdcall GlobalUnlock( HGLOBAL hMem );

HGLOBAL __stdcall GlobalFree( HGLOBAL hMem );

SIZE_T __stdcall GlobalCompact( DWORD dwMinFree );

void __stdcall GlobalFix( HGLOBAL hMem );

void __stdcall GlobalUnfix( HGLOBAL hMem );

LPVOID __stdcall GlobalWire( HGLOBAL hMem );

BOOL __stdcall GlobalUnWire( HGLOBAL hMem );

void __stdcall GlobalMemoryStatus( LPMEMORYSTATUS lpBuffer );
typedef struct _MEMORYSTATUSEX {
<field name="dwLength"><DWORD /></field>
<field name="dwMemoryLoad"><DWORD /></field>
<field name="ullTotalPhys"><DWORDLONG /></field>
<field name="ullAvailPhys"><DWORDLONG /></field>
<field name="ullTotalPageFile"><DWORDLONG /></field>
<field name="ullAvailPageFile"><DWORDLONG /></field>
<field name="ullTotalVirtual"><DWORDLONG /></field>
<field name="ullAvailVirtual"><DWORDLONG /></field>
<field name="ullAvailExtendedVirtual"><DWORDLONG /></field>
} MEMORYSTATUSEX, *LPMEMORYSTATUSEX;

BOOL __stdcall GlobalMemoryStatusEx( LPMEMORYSTATUSEX lpBuffer );

HLOCAL __stdcall LocalAlloc( UINT uFlags, SIZE_T uBytes );

HLOCAL __stdcall LocalReAlloc( HLOCAL hMem, SIZE_T uBytes, UINT uFlags );

LPVOID __stdcall LocalLock( HLOCAL hMem );

HLOCAL __stdcall LocalHandle( LPCVOID pMem );

BOOL __stdcall LocalUnlock( HLOCAL hMem );

SIZE_T __stdcall LocalSize( HLOCAL hMem );

UINT __stdcall LocalFlags( HLOCAL hMem );

HLOCAL __stdcall LocalFree( HLOCAL hMem );

SIZE_T __stdcall LocalShrink( HLOCAL hMem, UINT cbNewSize );

SIZE_T __stdcall LocalCompact( UINT uMinFree );

BOOL __stdcall FlushInstructionCache( HANDLE hProcess, LPCVOID lpBaseAddress, SIZE_T dwSize );

void __stdcall FlushProcessWriteBuffers( void );

BOOL __stdcall QueryThreadCycleTime(HANDLE ThreadHandle, PULONG64 CycleTime );

BOOL __stdcall QueryProcessCycleTime(HANDLE ProcessHandle, PULONG64 CycleTime );

BOOL __stdcall QueryIdleProcessorCycleTime(PULONG BufferLength, PULONG64 ProcessorIdleCycleTime );

BOOL __stdcall QueryIdleProcessorCycleTimeEx(USHORT Group, PULONG BufferLength, PULONG64 ProcessorIdleCycleTime );

BOOL __stdcall QueryUnbiasedInterruptTime(PULONGLONG UnbiasedTime );

BOOL __stdcall GetProcessorSystemCycleTime(USHORT Group, PSYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION Buffer, PDWORD ReturnedLength );

LPVOID __stdcall VirtualAlloc( LPVOID lpAddress, SIZE_T dwSize, DWORD flAllocationType, DWORD flProtect );

BOOL __stdcall VirtualFree( LPVOID lpAddress, SIZE_T dwSize, DWORD dwFreeType );

BOOL __stdcall VirtualProtect( LPVOID lpAddress, SIZE_T dwSize, DWORD flNewProtect, PDWORD lpflOldProtect );

SIZE_T __stdcall VirtualQuery( LPCVOID lpAddress, PMEMORY_BASIC_INFORMATION lpBuffer, SIZE_T dwLength );

LPVOID __stdcall VirtualAllocEx( HANDLE hProcess, LPVOID lpAddress, SIZE_T dwSize, DWORD flAllocationType, DWORD flProtect );

LPVOID __stdcall VirtualAllocExNuma( HANDLE hProcess, LPVOID lpAddress, SIZE_T dwSize, DWORD flAllocationType, DWORD flProtect, DWORD nndPreferred );

UINT __stdcall GetWriteWatch( DWORD dwFlags, PVOID lpBaseAddress, SIZE_T dwRegionSize, PVOID *lpAddresses, ULONG_PTR *lpdwCount, PULONG lpdwGranularity );

UINT __stdcall ResetWriteWatch( LPVOID lpBaseAddress, SIZE_T dwRegionSize );

SIZE_T __stdcall GetLargePageMinimum( void );

UINT __stdcall EnumSystemFirmwareTables( DWORD FirmwareTableProviderSignature, PVOID pFirmwareTableEnumBuffer, DWORD BufferSize );

UINT __stdcall GetSystemFirmwareTable( DWORD FirmwareTableProviderSignature, DWORD FirmwareTableID, PVOID pFirmwareTableBuffer, DWORD BufferSize );

BOOL __stdcall GetPhysicallyInstalledSystemMemory( PULONGLONG TotalMemoryInKilobytes );

BOOL __stdcall VirtualFreeEx( HANDLE hProcess, LPVOID lpAddress, SIZE_T dwSize, DWORD dwFreeType );

BOOL __stdcall VirtualProtectEx( HANDLE hProcess, LPVOID lpAddress, SIZE_T dwSize, DWORD flNewProtect, PDWORD lpflOldProtect );

SIZE_T __stdcall VirtualQueryEx( HANDLE hProcess, LPCVOID lpAddress, PMEMORY_BASIC_INFORMATION lpBuffer, SIZE_T dwLength );

HANDLE __stdcall HeapCreate( DWORD flOptions, SIZE_T dwInitialSize, SIZE_T dwMaximumSize );

BOOL __stdcall HeapDestroy( HANDLE hHeap );

LPVOID __stdcall HeapAlloc( HANDLE hHeap, DWORD dwFlags, SIZE_T dwBytes );

LPVOID __stdcall HeapReAlloc( HANDLE hHeap, DWORD dwFlags, LPVOID lpMem, SIZE_T dwBytes );

BOOL __stdcall HeapFree( HANDLE hHeap, DWORD dwFlags, LPVOID lpMem );

SIZE_T __stdcall HeapSize( HANDLE hHeap, DWORD dwFlags, LPCVOID lpMem );

BOOL __stdcall HeapValidate( HANDLE hHeap, DWORD dwFlags, LPCVOID lpMem );

SIZE_T __stdcall HeapCompact( HANDLE hHeap, DWORD dwFlags );

HANDLE __stdcall GetProcessHeap( void );

DWORD __stdcall GetProcessHeaps( DWORD NumberOfHeaps, PHANDLE ProcessHeaps );
typedef struct _PROCESS_HEAP_ENTRY {
<field name="lpData"><PVOID /></field>
<field name="cbData"><DWORD /></field>
<field name="cbOverhead"><BYTE /></field>
<field name="iRegionIndex"><BYTE /></field>
<field name="wFlags"><WORD /></field>
union {
struct {
<field name="hMem"><HANDLE /></field>
<field name="dwReserved"><arr length=" 3 "><DWORD /></arr></field>
} Block;
struct {
<field name="dwCommittedSize"><DWORD /></field>
<field name="dwUnCommittedSize"><DWORD /></field>
<field name="lpFirstBlock"><LPVOID /></field>
<field name="lpLastBlock"><LPVOID /></field>
} Region;
} ;
} PROCESS_HEAP_ENTRY, *LPPROCESS_HEAP_ENTRY, *PPROCESS_HEAP_ENTRY;

BOOL __stdcall HeapLock( HANDLE hHeap );

BOOL __stdcall HeapUnlock( HANDLE hHeap );

BOOL __stdcall HeapWalk( HANDLE hHeap, LPPROCESS_HEAP_ENTRY lpEntry );

BOOL __stdcall HeapSetInformation(HANDLE HeapHandle, HEAP_INFORMATION_CLASS HeapInformationClass, PVOID HeapInformation, SIZE_T HeapInformationLength );

BOOL __stdcall HeapQueryInformation(HANDLE HeapHandle, HEAP_INFORMATION_CLASS HeapInformationClass, PVOID HeapInformation, SIZE_T HeapInformationLength, PSIZE_T ReturnLength );

BOOL __stdcall GetBinaryTypeA( LPCSTR lpApplicationName, LPDWORD lpBinaryType );

BOOL __stdcall GetBinaryTypeW( LPCWSTR lpApplicationName, LPDWORD lpBinaryType );

DWORD __stdcall GetShortPathNameA( LPCSTR lpszLongPath, LPSTR lpszShortPath, DWORD cchBuffer );

DWORD __stdcall GetShortPathNameW( LPCWSTR lpszLongPath, LPWSTR lpszShortPath, DWORD cchBuffer );

DWORD __stdcall GetLongPathNameA( LPCSTR lpszShortPath, LPSTR lpszLongPath, DWORD cchBuffer );

DWORD __stdcall GetLongPathNameW( LPCWSTR lpszShortPath, LPWSTR lpszLongPath, DWORD cchBuffer );

DWORD __stdcall GetLongPathNameTransactedA( LPCSTR lpszShortPath, LPSTR lpszLongPath, DWORD cchBuffer, HANDLE hTransaction );

DWORD __stdcall GetLongPathNameTransactedW( LPCWSTR lpszShortPath, LPWSTR lpszLongPath, DWORD cchBuffer, HANDLE hTransaction );

BOOL __stdcall GetProcessAffinityMask( HANDLE hProcess, PDWORD_PTR lpProcessAffinityMask, PDWORD_PTR lpSystemAffinityMask );

BOOL __stdcall SetProcessAffinityMask( HANDLE hProcess, DWORD_PTR dwProcessAffinityMask );
BOOL __stdcall GetProcessGroupAffinity( HANDLE hProcess, PUSHORT GroupCount, PUSHORT GroupArray );

BOOL __stdcall GetProcessHandleCount( HANDLE hProcess, PDWORD pdwHandleCount );

BOOL __stdcall GetProcessTimes( HANDLE hProcess, LPFILETIME lpCreationTime, LPFILETIME lpExitTime, LPFILETIME lpKernelTime, LPFILETIME lpUserTime );

BOOL __stdcall GetProcessIoCounters( HANDLE hProcess, PIO_COUNTERS lpIoCounters );

BOOL __stdcall GetProcessWorkingSetSize( HANDLE hProcess, PSIZE_T lpMinimumWorkingSetSize, PSIZE_T lpMaximumWorkingSetSize );

BOOL __stdcall GetProcessWorkingSetSizeEx( HANDLE hProcess, PSIZE_T lpMinimumWorkingSetSize, PSIZE_T lpMaximumWorkingSetSize, PDWORD Flags );

BOOL __stdcall SetProcessWorkingSetSize( HANDLE hProcess, SIZE_T dwMinimumWorkingSetSize, SIZE_T dwMaximumWorkingSetSize );

BOOL __stdcall SetProcessWorkingSetSizeEx( HANDLE hProcess, SIZE_T dwMinimumWorkingSetSize, SIZE_T dwMaximumWorkingSetSize, DWORD Flags );

BOOL __stdcall SetProcessAffinityUpdateMode( HANDLE hProcess, DWORD dwFlags );

BOOL __stdcall QueryProcessAffinityUpdateMode( HANDLE hProcess, LPDWORD lpdwFlags );

HANDLE __stdcall OpenProcess( DWORD dwDesiredAccess, BOOL bInheritHandle, DWORD dwProcessId );

HANDLE __stdcall GetCurrentProcess( void );

DWORD __stdcall GetCurrentProcessId( void );

__declspec(noreturn) void __stdcall ExitProcess( UINT uExitCode );

BOOL __stdcall TerminateProcess( HANDLE hProcess, UINT uExitCode );

BOOL __stdcall GetExitCodeProcess( HANDLE hProcess, LPDWORD lpExitCode );

void __stdcall FatalExit( int32 ExitCode );

LPCH __stdcall GetEnvironmentStrings( void );

LPWCH __stdcall GetEnvironmentStringsW( void );

BOOL __stdcall SetEnvironmentStringsA( LPCH NewEnvironment );

BOOL __stdcall SetEnvironmentStringsW( LPWCH NewEnvironment );

BOOL __stdcall FreeEnvironmentStringsA( LPCH );

BOOL __stdcall FreeEnvironmentStringsW( LPWCH );

void __stdcall RaiseException( DWORD dwExceptionCode, DWORD dwExceptionFlags, DWORD nNumberOfArguments, const ULONG_PTR *lpArguments );

void __stdcall RaiseFailFastException( PEXCEPTION_RECORD pExceptionRecord, PCONTEXT pContextRecord, DWORD dwFlags );

LONG __stdcall UnhandledExceptionFilter( struct _EXCEPTION_POINTERS *ExceptionInfo );
typedef LONG (__stdcall *PTOP_LEVEL_EXCEPTION_FILTER)( struct _EXCEPTION_POINTERS *ExceptionInfo );
<typedef name="LPTOP_LEVEL_EXCEPTION_FILTER"><PTOP_LEVEL_EXCEPTION_FILTER /></typedef>

LPTOP_LEVEL_EXCEPTION_FILTER __stdcall SetUnhandledExceptionFilter( LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter );

LPVOID __stdcall CreateFiber( SIZE_T dwStackSize, LPFIBER_START_ROUTINE lpStartAddress, LPVOID lpParameter );

LPVOID __stdcall CreateFiberEx( SIZE_T dwStackCommitSize, SIZE_T dwStackReserveSize, DWORD dwFlags, LPFIBER_START_ROUTINE lpStartAddress, LPVOID lpParameter );

void __stdcall DeleteFiber( LPVOID lpFiber );

LPVOID __stdcall ConvertThreadToFiber( LPVOID lpParameter );

LPVOID __stdcall ConvertThreadToFiberEx( LPVOID lpParameter, DWORD dwFlags );

BOOL __stdcall ConvertFiberToThread( void );

BOOL __stdcall IsThreadAFiber( void );

void __stdcall SwitchToFiber( LPVOID lpFiber );

BOOL __stdcall SwitchToThread( void );
<typedef name="PUMS_CONTEXT"><ptr><void /></ptr></typedef>
<typedef name="PUMS_COMPLETION_LIST"><ptr><void /></ptr></typedef>
typedef enum _RTL_UMS_THREAD_INFO_CLASS UMS_THREAD_INFO_CLASS, *PUMS_THREAD_INFO_CLASS;
typedef enum _RTL_UMS_SCHEDULER_REASON UMS_SCHEDULER_REASON;
<typedef name="PUMS_SCHEDULER_ENTRY_POINT"><PRTL_UMS_SCHEDULER_ENTRY_POINT /></typedef>
typedef struct _UMS_SCHEDULER_STARTUP_INFO {
<field name="UmsVersion"><ULONG /></field>
<field name="CompletionList"><PUMS_COMPLETION_LIST /></field>
<field name="SchedulerProc"><PUMS_SCHEDULER_ENTRY_POINT /></field>
<field name="SchedulerParam"><PVOID /></field>
} UMS_SCHEDULER_STARTUP_INFO, *PUMS_SCHEDULER_STARTUP_INFO;

BOOL __stdcall CreateUmsCompletionList( PUMS_COMPLETION_LIST* UmsCompletionList );

BOOL __stdcall DequeueUmsCompletionListItems( PUMS_COMPLETION_LIST UmsCompletionList, DWORD WaitTimeOut, PUMS_CONTEXT* UmsThreadList );

BOOL __stdcall GetUmsCompletionListEvent( PUMS_COMPLETION_LIST UmsCompletionList, PHANDLE UmsCompletionEvent );

BOOL __stdcall ExecuteUmsThread( PUMS_CONTEXT UmsThread );

BOOL __stdcall UmsThreadYield( PVOID SchedulerParam );

BOOL __stdcall DeleteUmsCompletionList( PUMS_COMPLETION_LIST UmsCompletionList );

PUMS_CONTEXT __stdcall GetCurrentUmsThread( void );

PUMS_CONTEXT __stdcall GetNextUmsListItem( PUMS_CONTEXT UmsContext );

BOOL __stdcall QueryUmsThreadInformation( PUMS_CONTEXT UmsThread, UMS_THREAD_INFO_CLASS UmsThreadInfoClass, PVOID UmsThreadInformation, ULONG UmsThreadInformationLength, PULONG ReturnLength );

BOOL __stdcall SetUmsThreadInformation( PUMS_CONTEXT UmsThread, UMS_THREAD_INFO_CLASS UmsThreadInfoClass, PVOID UmsThreadInformation, ULONG UmsThreadInformationLength );

BOOL __stdcall DeleteUmsThreadContext( PUMS_CONTEXT UmsThread );

BOOL __stdcall CreateUmsThreadContext( PUMS_CONTEXT *lpUmsThread );

BOOL __stdcall EnterUmsSchedulingMode( PUMS_SCHEDULER_STARTUP_INFO SchedulerStartupInfo );
typedef struct _PROC_THREAD_ATTRIBUTE_LIST *PPROC_THREAD_ATTRIBUTE_LIST, *LPPROC_THREAD_ATTRIBUTE_LIST;

HANDLE __stdcall CreateThread( LPSECURITY_ATTRIBUTES lpThreadAttributes, SIZE_T dwStackSize, LPTHREAD_START_ROUTINE lpStartAddress, LPVOID lpParameter, DWORD dwCreationFlags, LPDWORD lpThreadId );

HANDLE __stdcall CreateRemoteThread( HANDLE hProcess, LPSECURITY_ATTRIBUTES lpThreadAttributes, SIZE_T dwStackSize, LPTHREAD_START_ROUTINE lpStartAddress, LPVOID lpParameter, DWORD dwCreationFlags, LPDWORD lpThreadId );

HANDLE __stdcall CreateRemoteThreadEx( HANDLE hProcess, LPSECURITY_ATTRIBUTES lpThreadAttributes, SIZE_T dwStackSize, LPTHREAD_START_ROUTINE lpStartAddress, LPVOID lpParameter, DWORD dwCreationFlags, LPPROC_THREAD_ATTRIBUTE_LIST lpAttributeList, LPDWORD lpThreadId );

HANDLE __stdcall GetCurrentThread( void );

DWORD __stdcall GetCurrentThreadId( void );

BOOL __stdcall SetThreadStackGuarantee(PULONG StackSizeInBytes );

DWORD __stdcall GetProcessIdOfThread( HANDLE Thread );

DWORD __stdcall GetThreadId( HANDLE Thread );

DWORD __stdcall GetProcessId( HANDLE Process );

DWORD __stdcall GetCurrentProcessorNumber( void );

void __stdcall GetCurrentProcessorNumberEx( PPROCESSOR_NUMBER ProcNumber );

BOOL __stdcall GetThreadGroupAffinity( HANDLE hThread, PGROUP_AFFINITY GroupAffinity );

DWORD_PTR __stdcall SetThreadAffinityMask( HANDLE hThread, DWORD_PTR dwThreadAffinityMask );

BOOL __stdcall SetThreadGroupAffinity( HANDLE hThread, const GROUP_AFFINITY *GroupAffinity, PGROUP_AFFINITY PreviousGroupAffinity );

BOOL __stdcall SetThreadIdealProcessorEx(HANDLE hThread, PPROCESSOR_NUMBER lpIdealProcessor, PPROCESSOR_NUMBER lpPreviousIdealProcessor );

BOOL __stdcall GetThreadIdealProcessorEx(HANDLE hThread, PPROCESSOR_NUMBER lpIdealProcessor );

DWORD __stdcall SetThreadIdealProcessor( HANDLE hThread, DWORD dwIdealProcessor );

BOOL __stdcall SetProcessDEPPolicy( DWORD dwFlags );

BOOL __stdcall GetProcessDEPPolicy( HANDLE hProcess, LPDWORD lpFlags, PBOOL lpPermanent );

BOOL __stdcall SetProcessPriorityBoost( HANDLE hProcess, BOOL bDisablePriorityBoost );

BOOL __stdcall GetProcessPriorityBoost( HANDLE hProcess, PBOOL pDisablePriorityBoost );

BOOL __stdcall RequestWakeupLatency( LATENCY_TIME latency );

BOOL __stdcall IsSystemResumeAutomatic( void );

HANDLE __stdcall OpenThread( DWORD dwDesiredAccess, BOOL bInheritHandle, DWORD dwThreadId );

BOOL __stdcall SetThreadPriority( HANDLE hThread, int32 nPriority );

BOOL __stdcall SetThreadPriorityBoost( HANDLE hThread, BOOL bDisablePriorityBoost );

BOOL __stdcall GetThreadPriorityBoost( HANDLE hThread, PBOOL pDisablePriorityBoost );

int32 __stdcall GetThreadPriority( HANDLE hThread );

BOOL __stdcall GetThreadTimes( HANDLE hThread, LPFILETIME lpCreationTime, LPFILETIME lpExitTime, LPFILETIME lpKernelTime, LPFILETIME lpUserTime );

BOOL __stdcall GetThreadIOPendingFlag( HANDLE hThread, PBOOL lpIOIsPending );

__declspec(noreturn) void __stdcall ExitThread( DWORD dwExitCode );

BOOL __stdcall TerminateThread( HANDLE hThread, DWORD dwExitCode );

BOOL __stdcall GetExitCodeThread( HANDLE hThread, LPDWORD lpExitCode );

BOOL __stdcall GetThreadSelectorEntry( HANDLE hThread, DWORD dwSelector, LPLDT_ENTRY lpSelectorEntry );

EXECUTION_STATE __stdcall SetThreadExecutionState( EXECUTION_STATE esFlags );
typedef struct _REASON_CONTEXT {
<field name="Version"><ULONG /></field>
<field name="Flags"><DWORD /></field>
union {
struct {
<field name="LocalizedReasonModule"><HMODULE /></field>
<field name="LocalizedReasonId"><ULONG /></field>
<field name="ReasonStringCount"><ULONG /></field>
<field name="ReasonStrings"><ptr><LPWSTR /></ptr></field>
} Detailed;
<field name="SimpleReasonString"><LPWSTR /></field>
} Reason;
} REASON_CONTEXT, *PREASON_CONTEXT;
<typedef name="POWER_REQUEST_CONTEXT"><REASON_CONTEXT /></typedef>
typedef REASON_CONTEXT *PPOWER_REQUEST_CONTEXT, *LPPOWER_REQUEST_CONTEXT;

HANDLE __stdcall PowerCreateRequest(PREASON_CONTEXT Context );

BOOL __stdcall PowerSetRequest(HANDLE PowerRequest, POWER_REQUEST_TYPE RequestType );

BOOL __stdcall PowerClearRequest(HANDLE PowerRequest, POWER_REQUEST_TYPE RequestType );

DWORD __stdcall GetLastError( void );

void __stdcall SetLastError( DWORD dwErrCode );

BOOL __stdcall GetOverlappedResult( HANDLE hFile, LPOVERLAPPED lpOverlapped, LPDWORD lpNumberOfBytesTransferred, BOOL bWait );

HANDLE __stdcall CreateIoCompletionPort( HANDLE FileHandle, HANDLE ExistingCompletionPort, ULONG_PTR CompletionKey, DWORD NumberOfConcurrentThreads );

BOOL __stdcall GetQueuedCompletionStatus( HANDLE CompletionPort, LPDWORD lpNumberOfBytesTransferred, PULONG_PTR lpCompletionKey, LPOVERLAPPED *lpOverlapped, DWORD dwMilliseconds );

BOOL __stdcall GetQueuedCompletionStatusEx( HANDLE CompletionPort, LPOVERLAPPED_ENTRY lpCompletionPortEntries, ULONG ulCount, PULONG ulNumEntriesRemoved, DWORD dwMilliseconds, BOOL fAlertable );

BOOL __stdcall PostQueuedCompletionStatus( HANDLE CompletionPort, DWORD dwNumberOfBytesTransferred, ULONG_PTR dwCompletionKey, LPOVERLAPPED lpOverlapped );

BOOL __stdcall SetFileCompletionNotificationModes( HANDLE FileHandle, UCHAR Flags );

BOOL __stdcall SetFileIoOverlappedRange( HANDLE FileHandle, PUCHAR OverlappedRangeStart, ULONG Length );

UINT __stdcall GetErrorMode( void );

UINT __stdcall SetErrorMode( UINT uMode );

DWORD __stdcall GetThreadErrorMode( void );

BOOL __stdcall SetThreadErrorMode( DWORD dwNewMode, LPDWORD lpOldMode );

BOOL __stdcall ReadProcessMemory( HANDLE hProcess, LPCVOID lpBaseAddress, LPVOID lpBuffer, SIZE_T nSize, SIZE_T * lpNumberOfBytesRead );

BOOL __stdcall WriteProcessMemory( HANDLE hProcess, LPVOID lpBaseAddress, LPCVOID lpBuffer, SIZE_T nSize, SIZE_T * lpNumberOfBytesWritten );

BOOL __stdcall GetThreadContext( HANDLE hThread, LPCONTEXT lpContext );

BOOL __stdcall SetThreadContext( HANDLE hThread, const CONTEXT *lpContext );

BOOL __stdcall Wow64GetThreadContext( HANDLE hThread, PWOW64_CONTEXT lpContext );

BOOL __stdcall Wow64GetThreadSelectorEntry( HANDLE hThread, DWORD dwSelector, PWOW64_LDT_ENTRY lpSelectorEntry );

BOOL __stdcall Wow64SetThreadContext( HANDLE hThread, const WOW64_CONTEXT *lpContext );

DWORD __stdcall SuspendThread( HANDLE hThread );

DWORD __stdcall Wow64SuspendThread( HANDLE hThread );

DWORD __stdcall ResumeThread( HANDLE hThread );

DWORD __stdcall QueueUserAPC( PAPCFUNC pfnAPC, HANDLE hThread, ULONG_PTR dwData );

BOOL __stdcall IsDebuggerPresent( void );

BOOL __stdcall CheckRemoteDebuggerPresent( HANDLE hProcess, PBOOL pbDebuggerPresent );

void __stdcall DebugBreak( void );

BOOL __stdcall WaitForDebugEvent( LPDEBUG_EVENT lpDebugEvent, DWORD dwMilliseconds );

BOOL __stdcall ContinueDebugEvent( DWORD dwProcessId, DWORD dwThreadId, DWORD dwContinueStatus );

BOOL __stdcall DebugActiveProcess( DWORD dwProcessId );

BOOL __stdcall DebugActiveProcessStop( DWORD dwProcessId );

BOOL __stdcall DebugSetProcessKillOnExit( BOOL KillOnExit );

BOOL __stdcall DebugBreakProcess(HANDLE Process );

void __stdcall InitializeCriticalSection( LPCRITICAL_SECTION lpCriticalSection );

void __stdcall EnterCriticalSection( LPCRITICAL_SECTION lpCriticalSection );

void __stdcall LeaveCriticalSection( LPCRITICAL_SECTION lpCriticalSection );

BOOL __stdcall InitializeCriticalSectionAndSpinCount( LPCRITICAL_SECTION lpCriticalSection, DWORD dwSpinCount );

BOOL __stdcall InitializeCriticalSectionEx( LPCRITICAL_SECTION lpCriticalSection, DWORD dwSpinCount, DWORD Flags );

DWORD __stdcall SetCriticalSectionSpinCount( LPCRITICAL_SECTION lpCriticalSection, DWORD dwSpinCount );

BOOL __stdcall TryEnterCriticalSection( LPCRITICAL_SECTION lpCriticalSection );

void __stdcall DeleteCriticalSection( LPCRITICAL_SECTION lpCriticalSection );

BOOL __stdcall SetEvent( HANDLE hEvent );

BOOL __stdcall ResetEvent( HANDLE hEvent );

BOOL __stdcall PulseEvent( HANDLE hEvent );

BOOL __stdcall ReleaseSemaphore( HANDLE hSemaphore, LONG lReleaseCount, LPLONG lpPreviousCount );

BOOL __stdcall ReleaseMutex( HANDLE hMutex );

DWORD __stdcall WaitForSingleObject( HANDLE hHandle, DWORD dwMilliseconds );

DWORD __stdcall WaitForMultipleObjects( DWORD nCount, const HANDLE *lpHandles, BOOL bWaitAll, DWORD dwMilliseconds );

void __stdcall Sleep( DWORD dwMilliseconds );

HGLOBAL __stdcall LoadResource( HMODULE hModule, HRSRC hResInfo );

DWORD __stdcall SizeofResource( HMODULE hModule, HRSRC hResInfo );

ATOM __stdcall GlobalDeleteAtom( ATOM nAtom );

BOOL __stdcall InitAtomTable( DWORD nSize );

ATOM __stdcall DeleteAtom( ATOM nAtom );

UINT __stdcall SetHandleCount( UINT uNumber );

DWORD __stdcall GetLogicalDrives( void );

BOOL __stdcall LockFile( HANDLE hFile, DWORD dwFileOffsetLow, DWORD dwFileOffsetHigh, DWORD nNumberOfBytesToLockLow, DWORD nNumberOfBytesToLockHigh );

BOOL __stdcall UnlockFile( HANDLE hFile, DWORD dwFileOffsetLow, DWORD dwFileOffsetHigh, DWORD nNumberOfBytesToUnlockLow, DWORD nNumberOfBytesToUnlockHigh );

BOOL __stdcall LockFileEx( HANDLE hFile, DWORD dwFlags, DWORD dwReserved, DWORD nNumberOfBytesToLockLow, DWORD nNumberOfBytesToLockHigh, LPOVERLAPPED lpOverlapped );

BOOL __stdcall UnlockFileEx( HANDLE hFile, DWORD dwReserved, DWORD nNumberOfBytesToUnlockLow, DWORD nNumberOfBytesToUnlockHigh, LPOVERLAPPED lpOverlapped );
typedef struct _BY_HANDLE_FILE_INFORMATION {
<field name="dwFileAttributes"><DWORD /></field>
<field name="ftCreationTime"><FILETIME /></field>
<field name="ftLastAccessTime"><FILETIME /></field>
<field name="ftLastWriteTime"><FILETIME /></field>
<field name="dwVolumeSerialNumber"><DWORD /></field>
<field name="nFileSizeHigh"><DWORD /></field>
<field name="nFileSizeLow"><DWORD /></field>
<field name="nNumberOfLinks"><DWORD /></field>
<field name="nFileIndexHigh"><DWORD /></field>
<field name="nFileIndexLow"><DWORD /></field>
} BY_HANDLE_FILE_INFORMATION, *PBY_HANDLE_FILE_INFORMATION, *LPBY_HANDLE_FILE_INFORMATION;

BOOL __stdcall GetFileInformationByHandle( HANDLE hFile, LPBY_HANDLE_FILE_INFORMATION lpFileInformation );

DWORD __stdcall GetFileType( HANDLE hFile );

DWORD __stdcall GetFileSize( HANDLE hFile, LPDWORD lpFileSizeHigh );

BOOL __stdcall GetFileSizeEx( HANDLE hFile, PLARGE_INTEGER lpFileSize );

HANDLE __stdcall GetStdHandle( DWORD nStdHandle );

BOOL __stdcall SetStdHandle( DWORD nStdHandle, HANDLE hHandle );

BOOL __stdcall SetStdHandleEx( DWORD nStdHandle, HANDLE hHandle, PHANDLE phPrevValue );

BOOL __stdcall WriteFile( HANDLE hFile, LPCVOID lpBuffer, DWORD nNumberOfBytesToWrite, LPDWORD lpNumberOfBytesWritten, LPOVERLAPPED lpOverlapped );

BOOL __stdcall ReadFile( HANDLE hFile, LPVOID lpBuffer, DWORD nNumberOfBytesToRead, LPDWORD lpNumberOfBytesRead, LPOVERLAPPED lpOverlapped );

BOOL __stdcall FlushFileBuffers( HANDLE hFile );

BOOL __stdcall DeviceIoControl( HANDLE hDevice, DWORD dwIoControlCode, LPVOID lpInBuffer, DWORD nInBufferSize, LPVOID lpOutBuffer, DWORD nOutBufferSize, LPDWORD lpBytesReturned, LPOVERLAPPED lpOverlapped );

BOOL __stdcall RequestDeviceWakeup( HANDLE hDevice );

BOOL __stdcall CancelDeviceWakeupRequest( HANDLE hDevice );

BOOL __stdcall GetDevicePowerState( HANDLE hDevice, BOOL *pfOn );

BOOL __stdcall SetMessageWaitingIndicator( HANDLE hMsgIndicator, ULONG ulMsgCount );

BOOL __stdcall SetEndOfFile( HANDLE hFile );

DWORD __stdcall SetFilePointer( HANDLE hFile, LONG lDistanceToMove, PLONG lpDistanceToMoveHigh, DWORD dwMoveMethod );

BOOL __stdcall SetFilePointerEx( HANDLE hFile, LARGE_INTEGER liDistanceToMove, PLARGE_INTEGER lpNewFilePointer, DWORD dwMoveMethod );

BOOL __stdcall FindClose( HANDLE hFindFile );

BOOL __stdcall GetFileTime( HANDLE hFile, LPFILETIME lpCreationTime, LPFILETIME lpLastAccessTime, LPFILETIME lpLastWriteTime );

BOOL __stdcall SetFileTime( HANDLE hFile, const FILETIME *lpCreationTime, const FILETIME *lpLastAccessTime, const FILETIME *lpLastWriteTime );

BOOL __stdcall SetFileValidData( HANDLE hFile, LONGLONG ValidDataLength );

BOOL __stdcall SetFileShortNameA( HANDLE hFile, LPCSTR lpShortName );

BOOL __stdcall SetFileShortNameW( HANDLE hFile, LPCWSTR lpShortName );

BOOL __stdcall CloseHandle( HANDLE hObject );

BOOL __stdcall DuplicateHandle( HANDLE hSourceProcessHandle, HANDLE hSourceHandle, HANDLE hTargetProcessHandle, LPHANDLE lpTargetHandle, DWORD dwDesiredAccess, BOOL bInheritHandle, DWORD dwOptions );

BOOL __stdcall GetHandleInformation( HANDLE hObject, LPDWORD lpdwFlags );

BOOL __stdcall SetHandleInformation( HANDLE hObject, DWORD dwMask, DWORD dwFlags );

DWORD __stdcall LoadModule( LPCSTR lpModuleName, LPVOID lpParameterBlock );

UINT __stdcall WinExec( LPCSTR lpCmdLine, UINT uCmdShow );

BOOL __stdcall ClearCommBreak( HANDLE hFile );

BOOL __stdcall ClearCommError( HANDLE hFile, LPDWORD lpErrors, LPCOMSTAT lpStat );

BOOL __stdcall SetupComm( HANDLE hFile, DWORD dwInQueue, DWORD dwOutQueue );

BOOL __stdcall EscapeCommFunction( HANDLE hFile, DWORD dwFunc );

BOOL __stdcall GetCommConfig( HANDLE hCommDev, LPCOMMCONFIG lpCC, LPDWORD lpdwSize );

BOOL __stdcall GetCommMask( HANDLE hFile, LPDWORD lpEvtMask );

BOOL __stdcall GetCommProperties( HANDLE hFile, LPCOMMPROP lpCommProp );

BOOL __stdcall GetCommModemStatus( HANDLE hFile, LPDWORD lpModemStat );

BOOL __stdcall GetCommState( HANDLE hFile, LPDCB lpDCB );

BOOL __stdcall GetCommTimeouts( HANDLE hFile, LPCOMMTIMEOUTS lpCommTimeouts );

BOOL __stdcall PurgeComm( HANDLE hFile, DWORD dwFlags );

BOOL __stdcall SetCommBreak( HANDLE hFile );

BOOL __stdcall SetCommConfig( HANDLE hCommDev, LPCOMMCONFIG lpCC, DWORD dwSize );

BOOL __stdcall SetCommMask( HANDLE hFile, DWORD dwEvtMask );

BOOL __stdcall SetCommState( HANDLE hFile, LPDCB lpDCB );

BOOL __stdcall SetCommTimeouts( HANDLE hFile, LPCOMMTIMEOUTS lpCommTimeouts );

BOOL __stdcall TransmitCommChar( HANDLE hFile, char cChar );

BOOL __stdcall WaitCommEvent( HANDLE hFile, LPDWORD lpEvtMask, LPOVERLAPPED lpOverlapped );

DWORD __stdcall SetTapePosition( HANDLE hDevice, DWORD dwPositionMethod, DWORD dwPartition, DWORD dwOffsetLow, DWORD dwOffsetHigh, BOOL bImmediate );

DWORD __stdcall GetTapePosition( HANDLE hDevice, DWORD dwPositionType, LPDWORD lpdwPartition, LPDWORD lpdwOffsetLow, LPDWORD lpdwOffsetHigh );

DWORD __stdcall PrepareTape( HANDLE hDevice, DWORD dwOperation, BOOL bImmediate );

DWORD __stdcall EraseTape( HANDLE hDevice, DWORD dwEraseType, BOOL bImmediate );

DWORD __stdcall CreateTapePartition( HANDLE hDevice, DWORD dwPartitionMethod, DWORD dwCount, DWORD dwSize );

DWORD __stdcall WriteTapemark( HANDLE hDevice, DWORD dwTapemarkType, DWORD dwTapemarkCount, BOOL bImmediate );

DWORD __stdcall GetTapeStatus( HANDLE hDevice );

DWORD __stdcall GetTapeParameters( HANDLE hDevice, DWORD dwOperation, LPDWORD lpdwSize, LPVOID lpTapeInformation );

DWORD __stdcall SetTapeParameters( HANDLE hDevice, DWORD dwOperation, LPVOID lpTapeInformation );

BOOL __stdcall Beep( DWORD dwFreq, DWORD dwDuration );

int32 __stdcall MulDiv( int32 nNumber, int32 nNumerator, int32 nDenominator );

void __stdcall GetSystemTime( LPSYSTEMTIME lpSystemTime );

void __stdcall GetSystemTimeAsFileTime( LPFILETIME lpSystemTimeAsFileTime );

BOOL __stdcall SetSystemTime( const SYSTEMTIME *lpSystemTime );

void __stdcall GetLocalTime( LPSYSTEMTIME lpSystemTime );

BOOL __stdcall SetLocalTime( const SYSTEMTIME *lpSystemTime );

void __stdcall GetSystemInfo( LPSYSTEM_INFO lpSystemInfo );
typedef enum _DEP_SYSTEM_POLICY_TYPE {
DEPPolicyAlwaysOff = 0, DEPPolicyAlwaysOn, DEPPolicyOptIn, DEPPolicyOptOut, DEPTotalPolicyCount } DEP_SYSTEM_POLICY_TYPE;

DEP_SYSTEM_POLICY_TYPE __stdcall GetSystemDEPPolicy( void );

BOOL __stdcall SetSystemFileCacheSize(SIZE_T MinimumFileCacheSize, SIZE_T MaximumFileCacheSize, DWORD Flags );

BOOL __stdcall GetSystemFileCacheSize(PSIZE_T lpMinimumFileCacheSize, PSIZE_T lpMaximumFileCacheSize, PDWORD lpFlags );

BOOL __stdcall GetSystemRegistryQuota( PDWORD pdwQuotaAllowed, PDWORD pdwQuotaUsed );
BOOL __stdcall GetSystemTimes( LPFILETIME lpIdleTime, LPFILETIME lpKernelTime, LPFILETIME lpUserTime );

void __stdcall GetNativeSystemInfo( LPSYSTEM_INFO lpSystemInfo );

BOOL __stdcall IsProcessorFeaturePresent( DWORD ProcessorFeature );
typedef struct _TIME_ZONE_INFORMATION {
<field name="Bias"><LONG /></field>
<field name="StandardName"><arr length=" 32 "><WCHAR /></arr></field>
<field name="StandardDate"><SYSTEMTIME /></field>
<field name="StandardBias"><LONG /></field>
<field name="DaylightName"><arr length=" 32 "><WCHAR /></arr></field>
<field name="DaylightDate"><SYSTEMTIME /></field>
<field name="DaylightBias"><LONG /></field>
} TIME_ZONE_INFORMATION, *PTIME_ZONE_INFORMATION, *LPTIME_ZONE_INFORMATION;
typedef struct _TIME_DYNAMIC_ZONE_INFORMATION {
<field name="Bias"><LONG /></field>
<field name="StandardName"><arr length=" 32 "><WCHAR /></arr></field>
<field name="StandardDate"><SYSTEMTIME /></field>
<field name="StandardBias"><LONG /></field>
<field name="DaylightName"><arr length=" 32 "><WCHAR /></arr></field>
<field name="DaylightDate"><SYSTEMTIME /></field>
<field name="DaylightBias"><LONG /></field>
<field name="TimeZoneKeyName"><arr length=" 128 "><WCHAR /></arr></field>
<field name="DynamicDaylightTimeDisabled"><BOOLEAN /></field>
} DYNAMIC_TIME_ZONE_INFORMATION, *PDYNAMIC_TIME_ZONE_INFORMATION;

BOOL __stdcall SystemTimeToTzSpecificLocalTime( const TIME_ZONE_INFORMATION *lpTimeZoneInformation, const SYSTEMTIME *lpUniversalTime, LPSYSTEMTIME lpLocalTime );

BOOL __stdcall TzSpecificLocalTimeToSystemTime( const TIME_ZONE_INFORMATION *lpTimeZoneInformation, const SYSTEMTIME *lpLocalTime, LPSYSTEMTIME lpUniversalTime );
BOOL __stdcall GetTimeZoneInformationForYear( USHORT wYear, PDYNAMIC_TIME_ZONE_INFORMATION pdtzi, LPTIME_ZONE_INFORMATION ptzi );

DWORD __stdcall GetTimeZoneInformation( LPTIME_ZONE_INFORMATION lpTimeZoneInformation );

BOOL __stdcall SetTimeZoneInformation( const TIME_ZONE_INFORMATION *lpTimeZoneInformation );

DWORD __stdcall GetDynamicTimeZoneInformation( PDYNAMIC_TIME_ZONE_INFORMATION pTimeZoneInformation );

BOOL __stdcall SetDynamicTimeZoneInformation( const DYNAMIC_TIME_ZONE_INFORMATION *lpTimeZoneInformation );

BOOL __stdcall SystemTimeToFileTime( const SYSTEMTIME *lpSystemTime, LPFILETIME lpFileTime );

BOOL __stdcall FileTimeToLocalFileTime( const FILETIME *lpFileTime, LPFILETIME lpLocalFileTime );

BOOL __stdcall LocalFileTimeToFileTime( const FILETIME *lpLocalFileTime, LPFILETIME lpFileTime );

BOOL __stdcall FileTimeToSystemTime( const FILETIME *lpFileTime, LPSYSTEMTIME lpSystemTime );

LONG __stdcall CompareFileTime( const FILETIME *lpFileTime1, const FILETIME *lpFileTime2 );

BOOL __stdcall FileTimeToDosDateTime( const FILETIME *lpFileTime, LPWORD lpFatDate, LPWORD lpFatTime );

BOOL __stdcall DosDateTimeToFileTime( WORD wFatDate, WORD wFatTime, LPFILETIME lpFileTime );

DWORD __stdcall GetTickCount( void );

ULONGLONG __stdcall GetTickCount64( void );

BOOL __stdcall SetSystemTimeAdjustment( DWORD dwTimeAdjustment, BOOL bTimeAdjustmentDisabled );

BOOL __stdcall GetSystemTimeAdjustment( PDWORD lpTimeAdjustment, PDWORD lpTimeIncrement, PBOOL lpTimeAdjustmentDisabled );

DWORD __stdcall FormatMessageA( DWORD dwFlags, LPCVOID lpSource, DWORD dwMessageId, DWORD dwLanguageId, LPSTR lpBuffer, DWORD nSize, va_list *Arguments );

DWORD __stdcall FormatMessageW( DWORD dwFlags, LPCVOID lpSource, DWORD dwMessageId, DWORD dwLanguageId, LPWSTR lpBuffer, DWORD nSize, va_list *Arguments );

BOOL __stdcall CreatePipe( PHANDLE hReadPipe, PHANDLE hWritePipe, LPSECURITY_ATTRIBUTES lpPipeAttributes, DWORD nSize );

BOOL __stdcall ConnectNamedPipe( HANDLE hNamedPipe, LPOVERLAPPED lpOverlapped );

BOOL __stdcall DisconnectNamedPipe( HANDLE hNamedPipe );

BOOL __stdcall SetNamedPipeHandleState( HANDLE hNamedPipe, LPDWORD lpMode, LPDWORD lpMaxCollectionCount, LPDWORD lpCollectDataTimeout );

BOOL __stdcall GetNamedPipeInfo( HANDLE hNamedPipe, LPDWORD lpFlags, LPDWORD lpOutBufferSize, LPDWORD lpInBufferSize, LPDWORD lpMaxInstances );

BOOL __stdcall PeekNamedPipe( HANDLE hNamedPipe, LPVOID lpBuffer, DWORD nBufferSize, LPDWORD lpBytesRead, LPDWORD lpTotalBytesAvail, LPDWORD lpBytesLeftThisMessage );

BOOL __stdcall TransactNamedPipe( HANDLE hNamedPipe, LPVOID lpInBuffer, DWORD nInBufferSize, LPVOID lpOutBuffer, DWORD nOutBufferSize, LPDWORD lpBytesRead, LPOVERLAPPED lpOverlapped );

HANDLE __stdcall CreateMailslotA( LPCSTR lpName, DWORD nMaxMessageSize, DWORD lReadTimeout, LPSECURITY_ATTRIBUTES lpSecurityAttributes );

HANDLE __stdcall CreateMailslotW( LPCWSTR lpName, DWORD nMaxMessageSize, DWORD lReadTimeout, LPSECURITY_ATTRIBUTES lpSecurityAttributes );

BOOL __stdcall GetMailslotInfo( HANDLE hMailslot, LPDWORD lpMaxMessageSize, LPDWORD lpNextSize, LPDWORD lpMessageCount, LPDWORD lpReadTimeout );

BOOL __stdcall SetMailslotInfo( HANDLE hMailslot, DWORD lReadTimeout );

LPVOID __stdcall MapViewOfFile( HANDLE hFileMappingObject, DWORD dwDesiredAccess, DWORD dwFileOffsetHigh, DWORD dwFileOffsetLow, SIZE_T dwNumberOfBytesToMap );

BOOL __stdcall FlushViewOfFile( LPCVOID lpBaseAddress, SIZE_T dwNumberOfBytesToFlush );

BOOL __stdcall UnmapViewOfFile( LPCVOID lpBaseAddress );

BOOL __stdcall EncryptFileA( LPCSTR lpFileName );

BOOL __stdcall EncryptFileW( LPCWSTR lpFileName );

BOOL __stdcall DecryptFileA( LPCSTR lpFileName, DWORD dwReserved );

BOOL __stdcall DecryptFileW( LPCWSTR lpFileName, DWORD dwReserved );

BOOL __stdcall FileEncryptionStatusA( LPCSTR lpFileName, LPDWORD lpStatus );

BOOL __stdcall FileEncryptionStatusW( LPCWSTR lpFileName, LPDWORD lpStatus );
typedef DWORD (__stdcall *PFE_EXPORT_FUNC)( PBYTE pbData, PVOID pvCallbackContext, ULONG ulLength );
typedef DWORD (__stdcall *PFE_IMPORT_FUNC)( PBYTE pbData, PVOID pvCallbackContext, PULONG ulLength );

DWORD __stdcall OpenEncryptedFileRawA( LPCSTR lpFileName, ULONG ulFlags, PVOID *pvContext );

DWORD __stdcall OpenEncryptedFileRawW( LPCWSTR lpFileName, ULONG ulFlags, PVOID *pvContext );

DWORD __stdcall ReadEncryptedFileRaw( PFE_EXPORT_FUNC pfExportCallback, PVOID pvCallbackContext, PVOID pvContext );

DWORD __stdcall WriteEncryptedFileRaw( PFE_IMPORT_FUNC pfImportCallback, PVOID pvCallbackContext, PVOID pvContext );

void __stdcall CloseEncryptedFileRaw( PVOID pvContext );

int32 __stdcall lstrcmpA( LPCSTR lpString1, LPCSTR lpString2 );

int32 __stdcall lstrcmpW( LPCWSTR lpString1, LPCWSTR lpString2 );

int32 __stdcall lstrcmpiA( LPCSTR lpString1, LPCSTR lpString2 );

int32 __stdcall lstrcmpiW( LPCWSTR lpString1, LPCWSTR lpString2 );

LPSTR __stdcall lstrcpynA( LPSTR lpString1, LPCSTR lpString2, int32 iMaxLength );

LPWSTR __stdcall lstrcpynW( LPWSTR lpString1, LPCWSTR lpString2, int32 iMaxLength );

LPSTR __stdcall lstrcpyA( LPSTR lpString1, LPCSTR lpString2 );

LPWSTR __stdcall lstrcpyW( LPWSTR lpString1, LPCWSTR lpString2 );

LPSTR __stdcall lstrcatA( LPSTR lpString1, LPCSTR lpString2 );

LPWSTR __stdcall lstrcatW( LPWSTR lpString1, LPCWSTR lpString2 );

int32 __stdcall lstrlenA( LPCSTR lpString );

int32 __stdcall lstrlenW( LPCWSTR lpString );

HFILE __stdcall OpenFile( LPCSTR lpFileName, LPOFSTRUCT lpReOpenBuff, UINT uStyle );

HFILE __stdcall _lopen( LPCSTR lpPathName, int32 iReadWrite );

HFILE __stdcall _lcreat( LPCSTR lpPathName, int32 iAttribute );

UINT __stdcall _lread( HFILE hFile, LPVOID lpBuffer, UINT uBytes );

UINT __stdcall _lwrite( HFILE hFile, LPCCH lpBuffer, UINT uBytes );

long __stdcall _hread( HFILE hFile, LPVOID lpBuffer, long lBytes );

long __stdcall _hwrite( HFILE hFile, LPCCH lpBuffer, long lBytes );

HFILE __stdcall _lclose( HFILE hFile );

LONG __stdcall _llseek( HFILE hFile, LONG lOffset, int32 iOrigin );

BOOL __stdcall IsTextUnicode( const void* lpv, int32 iSize, LPINT lpiResult );

DWORD __stdcall FlsAlloc( PFLS_CALLBACK_FUNCTION lpCallback );

PVOID __stdcall FlsGetValue( DWORD dwFlsIndex );

BOOL __stdcall FlsSetValue( DWORD dwFlsIndex, PVOID lpFlsData );

BOOL __stdcall FlsFree( DWORD dwFlsIndex );

DWORD __stdcall TlsAlloc( void );

LPVOID __stdcall TlsGetValue( DWORD dwTlsIndex );

BOOL __stdcall TlsSetValue( DWORD dwTlsIndex, LPVOID lpTlsValue );

BOOL __stdcall TlsFree( DWORD dwTlsIndex );
typedef void (__stdcall *LPOVERLAPPED_COMPLETION_ROUTINE)( DWORD dwErrorCode, DWORD dwNumberOfBytesTransfered, LPOVERLAPPED lpOverlapped );

DWORD __stdcall SleepEx( DWORD dwMilliseconds, BOOL bAlertable );

DWORD __stdcall WaitForSingleObjectEx( HANDLE hHandle, DWORD dwMilliseconds, BOOL bAlertable );

DWORD __stdcall WaitForMultipleObjectsEx( DWORD nCount, const HANDLE *lpHandles, BOOL bWaitAll, DWORD dwMilliseconds, BOOL bAlertable );

DWORD __stdcall SignalObjectAndWait( HANDLE hObjectToSignal, HANDLE hObjectToWaitOn, DWORD dwMilliseconds, BOOL bAlertable );

BOOL __stdcall ReadFileEx( HANDLE hFile, LPVOID lpBuffer, DWORD nNumberOfBytesToRead, LPOVERLAPPED lpOverlapped, LPOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine );

BOOL __stdcall WriteFileEx( HANDLE hFile, LPCVOID lpBuffer, DWORD nNumberOfBytesToWrite, LPOVERLAPPED lpOverlapped, LPOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine );

BOOL __stdcall BackupRead( HANDLE hFile, LPBYTE lpBuffer, DWORD nNumberOfBytesToRead, LPDWORD lpNumberOfBytesRead, BOOL bAbort, BOOL bProcessSecurity, LPVOID *lpContext );

BOOL __stdcall BackupSeek( HANDLE hFile, DWORD dwLowBytesToSeek, DWORD dwHighBytesToSeek, LPDWORD lpdwLowByteSeeked, LPDWORD lpdwHighByteSeeked, LPVOID *lpContext );

BOOL __stdcall BackupWrite( HANDLE hFile, LPBYTE lpBuffer, DWORD nNumberOfBytesToWrite, LPDWORD lpNumberOfBytesWritten, BOOL bAbort, BOOL bProcessSecurity, LPVOID *lpContext );
typedef struct _WIN32_STREAM_ID {
DWORD dwStreamId ;
DWORD dwStreamAttributes ;
LARGE_INTEGER Size ;
DWORD dwStreamNameSize ;
WCHAR cStreamName[ 1 ] ;
} WIN32_STREAM_ID, *LPWIN32_STREAM_ID ;

BOOL __stdcall ReadFileScatter( HANDLE hFile, FILE_SEGMENT_ELEMENT aSegmentArray[], DWORD nNumberOfBytesToRead, LPDWORD lpReserved, LPOVERLAPPED lpOverlapped );

BOOL __stdcall WriteFileGather( HANDLE hFile, FILE_SEGMENT_ELEMENT aSegmentArray[], DWORD nNumberOfBytesToWrite, LPDWORD lpReserved, LPOVERLAPPED lpOverlapped );
typedef struct _STARTUPINFOA {
<field name="cb"><DWORD /></field>
<field name="lpReserved"><LPSTR /></field>
<field name="lpDesktop"><LPSTR /></field>
<field name="lpTitle"><LPSTR /></field>
<field name="dwX"><DWORD /></field>
<field name="dwY"><DWORD /></field>
<field name="dwXSize"><DWORD /></field>
<field name="dwYSize"><DWORD /></field>
<field name="dwXCountChars"><DWORD /></field>
<field name="dwYCountChars"><DWORD /></field>
<field name="dwFillAttribute"><DWORD /></field>
<field name="dwFlags"><DWORD /></field>
<field name="wShowWindow"><WORD /></field>
<field name="cbReserved2"><WORD /></field>
<field name="lpReserved2"><LPBYTE /></field>
<field name="hStdInput"><HANDLE /></field>
<field name="hStdOutput"><HANDLE /></field>
<field name="hStdError"><HANDLE /></field>
} STARTUPINFOA, *LPSTARTUPINFOA;
typedef struct _STARTUPINFOW {
<field name="cb"><DWORD /></field>
<field name="lpReserved"><LPWSTR /></field>
<field name="lpDesktop"><LPWSTR /></field>
<field name="lpTitle"><LPWSTR /></field>
<field name="dwX"><DWORD /></field>
<field name="dwY"><DWORD /></field>
<field name="dwXSize"><DWORD /></field>
<field name="dwYSize"><DWORD /></field>
<field name="dwXCountChars"><DWORD /></field>
<field name="dwYCountChars"><DWORD /></field>
<field name="dwFillAttribute"><DWORD /></field>
<field name="dwFlags"><DWORD /></field>
<field name="wShowWindow"><WORD /></field>
<field name="cbReserved2"><WORD /></field>
<field name="lpReserved2"><LPBYTE /></field>
<field name="hStdInput"><HANDLE /></field>
<field name="hStdOutput"><HANDLE /></field>
<field name="hStdError"><HANDLE /></field>
} STARTUPINFOW, *LPSTARTUPINFOW;
<typedef name="STARTUPINFO"><STARTUPINFOA /></typedef>
<typedef name="LPSTARTUPINFO"><LPSTARTUPINFOA /></typedef>
typedef struct _STARTUPINFOEXA {
<field name="StartupInfo"><STARTUPINFOA /></field>
<field name="lpAttributeList"><LPPROC_THREAD_ATTRIBUTE_LIST /></field>
} STARTUPINFOEXA, *LPSTARTUPINFOEXA;
typedef struct _STARTUPINFOEXW {
<field name="StartupInfo"><STARTUPINFOW /></field>
<field name="lpAttributeList"><LPPROC_THREAD_ATTRIBUTE_LIST /></field>
} STARTUPINFOEXW, *LPSTARTUPINFOEXW;
<typedef name="STARTUPINFOEX"><STARTUPINFOEXA /></typedef>
<typedef name="LPSTARTUPINFOEX"><LPSTARTUPINFOEXA /></typedef>
typedef struct _WIN32_FIND_DATAA {
<field name="dwFileAttributes"><DWORD /></field>
<field name="ftCreationTime"><FILETIME /></field>
<field name="ftLastAccessTime"><FILETIME /></field>
<field name="ftLastWriteTime"><FILETIME /></field>
<field name="nFileSizeHigh"><DWORD /></field>
<field name="nFileSizeLow"><DWORD /></field>
<field name="dwReserved0"><DWORD /></field>
<field name="dwReserved1"><DWORD /></field>
<field name="cFileName"><arr length=" 260 "><CHAR /></arr></field>
<field name="cAlternateFileName"><arr length=" 14 "><CHAR /></arr></field>
} WIN32_FIND_DATAA, *PWIN32_FIND_DATAA, *LPWIN32_FIND_DATAA;
typedef struct _WIN32_FIND_DATAW {
<field name="dwFileAttributes"><DWORD /></field>
<field name="ftCreationTime"><FILETIME /></field>
<field name="ftLastAccessTime"><FILETIME /></field>
<field name="ftLastWriteTime"><FILETIME /></field>
<field name="nFileSizeHigh"><DWORD /></field>
<field name="nFileSizeLow"><DWORD /></field>
<field name="dwReserved0"><DWORD /></field>
<field name="dwReserved1"><DWORD /></field>
<field name="cFileName"><arr length=" 260 "><WCHAR /></arr></field>
<field name="cAlternateFileName"><arr length=" 14 "><WCHAR /></arr></field>
} WIN32_FIND_DATAW, *PWIN32_FIND_DATAW, *LPWIN32_FIND_DATAW;
<typedef name="WIN32_FIND_DATA"><WIN32_FIND_DATAA /></typedef>
<typedef name="PWIN32_FIND_DATA"><PWIN32_FIND_DATAA /></typedef>
<typedef name="LPWIN32_FIND_DATA"><LPWIN32_FIND_DATAA /></typedef>
typedef struct _WIN32_FILE_ATTRIBUTE_DATA {
<field name="dwFileAttributes"><DWORD /></field>
<field name="ftCreationTime"><FILETIME /></field>
<field name="ftLastAccessTime"><FILETIME /></field>
<field name="ftLastWriteTime"><FILETIME /></field>
<field name="nFileSizeHigh"><DWORD /></field>
<field name="nFileSizeLow"><DWORD /></field>
} WIN32_FILE_ATTRIBUTE_DATA, *LPWIN32_FILE_ATTRIBUTE_DATA;

HANDLE __stdcall CreateMutexA( LPSECURITY_ATTRIBUTES lpMutexAttributes, BOOL bInitialOwner, LPCSTR lpName );

HANDLE __stdcall CreateMutexW( LPSECURITY_ATTRIBUTES lpMutexAttributes, BOOL bInitialOwner, LPCWSTR lpName );

HANDLE __stdcall OpenMutexA( DWORD dwDesiredAccess, BOOL bInheritHandle, LPCSTR lpName );

HANDLE __stdcall OpenMutexW( DWORD dwDesiredAccess, BOOL bInheritHandle, LPCWSTR lpName );

HANDLE __stdcall CreateEventA( LPSECURITY_ATTRIBUTES lpEventAttributes, BOOL bManualReset, BOOL bInitialState, LPCSTR lpName );

HANDLE __stdcall CreateEventW( LPSECURITY_ATTRIBUTES lpEventAttributes, BOOL bManualReset, BOOL bInitialState, LPCWSTR lpName );

HANDLE __stdcall OpenEventA( DWORD dwDesiredAccess, BOOL bInheritHandle, LPCSTR lpName );

HANDLE __stdcall OpenEventW( DWORD dwDesiredAccess, BOOL bInheritHandle, LPCWSTR lpName );

HANDLE __stdcall CreateSemaphoreA( LPSECURITY_ATTRIBUTES lpSemaphoreAttributes, LONG lInitialCount, LONG lMaximumCount, LPCSTR lpName );

HANDLE __stdcall CreateSemaphoreW( LPSECURITY_ATTRIBUTES lpSemaphoreAttributes, LONG lInitialCount, LONG lMaximumCount, LPCWSTR lpName );

HANDLE __stdcall OpenSemaphoreA( DWORD dwDesiredAccess, BOOL bInheritHandle, LPCSTR lpName );

HANDLE __stdcall OpenSemaphoreW( DWORD dwDesiredAccess, BOOL bInheritHandle, LPCWSTR lpName );
typedef void (__stdcall *PTIMERAPCROUTINE)( LPVOID lpArgToCompletionRoutine, DWORD dwTimerLowValue, DWORD dwTimerHighValue );

HANDLE __stdcall CreateWaitableTimerA( LPSECURITY_ATTRIBUTES lpTimerAttributes, BOOL bManualReset, LPCSTR lpTimerName );

HANDLE __stdcall CreateWaitableTimerW( LPSECURITY_ATTRIBUTES lpTimerAttributes, BOOL bManualReset, LPCWSTR lpTimerName );

HANDLE __stdcall OpenWaitableTimerA( DWORD dwDesiredAccess, BOOL bInheritHandle, LPCSTR lpTimerName );

HANDLE __stdcall OpenWaitableTimerW( DWORD dwDesiredAccess, BOOL bInheritHandle, LPCWSTR lpTimerName );
BOOL __stdcall SetWaitableTimerEx( HANDLE hTimer, const LARGE_INTEGER *lpDueTime, LONG lPeriod, PTIMERAPCROUTINE pfnCompletionRoutine, LPVOID lpArgToCompletionRoutine, PREASON_CONTEXT WakeContext, ULONG TolerableDelay );

BOOL __stdcall SetWaitableTimer( HANDLE hTimer, const LARGE_INTEGER *lpDueTime, LONG lPeriod, PTIMERAPCROUTINE pfnCompletionRoutine, LPVOID lpArgToCompletionRoutine, BOOL fResume );

BOOL __stdcall CancelWaitableTimer( HANDLE hTimer );

HANDLE __stdcall CreateMutexExA( LPSECURITY_ATTRIBUTES lpMutexAttributes, LPCSTR lpName, DWORD dwFlags, DWORD dwDesiredAccess );

HANDLE __stdcall CreateMutexExW( LPSECURITY_ATTRIBUTES lpMutexAttributes, LPCWSTR lpName, DWORD dwFlags, DWORD dwDesiredAccess );

HANDLE __stdcall CreateEventExA( LPSECURITY_ATTRIBUTES lpEventAttributes, LPCSTR lpName, DWORD dwFlags, DWORD dwDesiredAccess );

HANDLE __stdcall CreateEventExW( LPSECURITY_ATTRIBUTES lpEventAttributes, LPCWSTR lpName, DWORD dwFlags, DWORD dwDesiredAccess );

HANDLE __stdcall CreateSemaphoreExA( LPSECURITY_ATTRIBUTES lpSemaphoreAttributes, LONG lInitialCount, LONG lMaximumCount, LPCSTR lpName, DWORD dwFlags, DWORD dwDesiredAccess );

HANDLE __stdcall CreateSemaphoreExW( LPSECURITY_ATTRIBUTES lpSemaphoreAttributes, LONG lInitialCount, LONG lMaximumCount, LPCWSTR lpName, DWORD dwFlags, DWORD dwDesiredAccess );

HANDLE __stdcall CreateWaitableTimerExA( LPSECURITY_ATTRIBUTES lpTimerAttributes, LPCSTR lpTimerName, DWORD dwFlags, DWORD dwDesiredAccess );

HANDLE __stdcall CreateWaitableTimerExW( LPSECURITY_ATTRIBUTES lpTimerAttributes, LPCWSTR lpTimerName, DWORD dwFlags, DWORD dwDesiredAccess );

HANDLE __stdcall CreateFileMappingA( HANDLE hFile, LPSECURITY_ATTRIBUTES lpFileMappingAttributes, DWORD flProtect, DWORD dwMaximumSizeHigh, DWORD dwMaximumSizeLow, LPCSTR lpName );

HANDLE __stdcall CreateFileMappingW( HANDLE hFile, LPSECURITY_ATTRIBUTES lpFileMappingAttributes, DWORD flProtect, DWORD dwMaximumSizeHigh, DWORD dwMaximumSizeLow, LPCWSTR lpName );

HANDLE __stdcall CreateFileMappingNumaA( HANDLE hFile, LPSECURITY_ATTRIBUTES lpFileMappingAttributes, DWORD flProtect, DWORD dwMaximumSizeHigh, DWORD dwMaximumSizeLow, LPCSTR lpName, DWORD nndPreferred );

HANDLE __stdcall CreateFileMappingNumaW( HANDLE hFile, LPSECURITY_ATTRIBUTES lpFileMappingAttributes, DWORD flProtect, DWORD dwMaximumSizeHigh, DWORD dwMaximumSizeLow, LPCWSTR lpName, DWORD nndPreferred );

HANDLE __stdcall OpenFileMappingA( DWORD dwDesiredAccess, BOOL bInheritHandle, LPCSTR lpName );

HANDLE __stdcall OpenFileMappingW( DWORD dwDesiredAccess, BOOL bInheritHandle, LPCWSTR lpName );

DWORD __stdcall GetLogicalDriveStringsA( DWORD nBufferLength, LPSTR lpBuffer );

DWORD __stdcall GetLogicalDriveStringsW( DWORD nBufferLength, LPWSTR lpBuffer );
typedef enum _MEMORY_RESOURCE_NOTIFICATION_TYPE {
LowMemoryResourceNotification, HighMemoryResourceNotification } MEMORY_RESOURCE_NOTIFICATION_TYPE;

HANDLE __stdcall CreateMemoryResourceNotification( MEMORY_RESOURCE_NOTIFICATION_TYPE NotificationType );

BOOL __stdcall QueryMemoryResourceNotification( HANDLE ResourceNotificationHandle, PBOOL ResourceState );

HMODULE __stdcall LoadLibraryA( LPCSTR lpLibFileName );

HMODULE __stdcall LoadLibraryW( LPCWSTR lpLibFileName );

HMODULE __stdcall LoadLibraryExA( LPCSTR lpLibFileName, HANDLE hFile, DWORD dwFlags );

HMODULE __stdcall LoadLibraryExW( LPCWSTR lpLibFileName, HANDLE hFile, DWORD dwFlags );

DWORD __stdcall GetModuleFileNameA( HMODULE hModule, LPSTR lpFilename, DWORD nSize );

DWORD __stdcall GetModuleFileNameW( HMODULE hModule, LPWSTR lpFilename, DWORD nSize );

HMODULE __stdcall GetModuleHandleA( LPCSTR lpModuleName );

HMODULE __stdcall GetModuleHandleW( LPCWSTR lpModuleName );
typedef BOOL (__stdcall* PGET_MODULE_HANDLE_EXA)( DWORD dwFlags, LPCSTR lpModuleName, HMODULE* phModule );
typedef BOOL (__stdcall* PGET_MODULE_HANDLE_EXW)( DWORD dwFlags, LPCWSTR lpModuleName, HMODULE* phModule );

BOOL __stdcall GetModuleHandleExA( DWORD dwFlags, LPCSTR lpModuleName, HMODULE* phModule );

BOOL __stdcall GetModuleHandleExW( DWORD dwFlags, LPCWSTR lpModuleName, HMODULE* phModule );

BOOL __stdcall NeedCurrentDirectoryForExePathA( LPCSTR ExeName );

BOOL __stdcall NeedCurrentDirectoryForExePathW( LPCWSTR ExeName );

BOOL __stdcall QueryFullProcessImageNameA( HANDLE hProcess, DWORD dwFlags, LPSTR lpExeName, PDWORD lpdwSize );

BOOL __stdcall QueryFullProcessImageNameW( HANDLE hProcess, DWORD dwFlags, LPWSTR lpExeName, PDWORD lpdwSize );
typedef enum _PROC_THREAD_ATTRIBUTE_NUM {
ProcThreadAttributeParentProcess = 0, ProcThreadAttributeExtendedFlags, ProcThreadAttributeHandleList, ProcThreadAttributeGroupAffinity, ProcThreadAttributePreferredNode, ProcThreadAttributeIdealProcessor, ProcThreadAttributeUmsThread, ProcThreadAttributeMitigationPolicy, ProcThreadAttributeMax } PROC_THREAD_ATTRIBUTE_NUM;

BOOL __stdcall InitializeProcThreadAttributeList( LPPROC_THREAD_ATTRIBUTE_LIST lpAttributeList, DWORD dwAttributeCount, DWORD dwFlags, PSIZE_T lpSize );

void __stdcall DeleteProcThreadAttributeList( LPPROC_THREAD_ATTRIBUTE_LIST lpAttributeList );

BOOL __stdcall UpdateProcThreadAttribute( LPPROC_THREAD_ATTRIBUTE_LIST lpAttributeList, DWORD dwFlags, DWORD_PTR Attribute, PVOID lpValue, SIZE_T cbSize, PVOID lpPreviousValue, PSIZE_T lpReturnSize );

BOOL __stdcall CreateProcessA( LPCSTR lpApplicationName, LPSTR lpCommandLine, LPSECURITY_ATTRIBUTES lpProcessAttributes, LPSECURITY_ATTRIBUTES lpThreadAttributes, BOOL bInheritHandles, DWORD dwCreationFlags, LPVOID lpEnvironment, LPCSTR lpCurrentDirectory, LPSTARTUPINFOA lpStartupInfo, LPPROCESS_INFORMATION lpProcessInformation );

BOOL __stdcall CreateProcessW( LPCWSTR lpApplicationName, LPWSTR lpCommandLine, LPSECURITY_ATTRIBUTES lpProcessAttributes, LPSECURITY_ATTRIBUTES lpThreadAttributes, BOOL bInheritHandles, DWORD dwCreationFlags, LPVOID lpEnvironment, LPCWSTR lpCurrentDirectory, LPSTARTUPINFOW lpStartupInfo, LPPROCESS_INFORMATION lpProcessInformation );

BOOL __stdcall SetProcessShutdownParameters( DWORD dwLevel, DWORD dwFlags );

BOOL __stdcall GetProcessShutdownParameters( LPDWORD lpdwLevel, LPDWORD lpdwFlags );

DWORD __stdcall GetProcessVersion( DWORD ProcessId );

void __stdcall FatalAppExitA( UINT uAction, LPCSTR lpMessageText );

void __stdcall FatalAppExitW( UINT uAction, LPCWSTR lpMessageText );

void __stdcall GetStartupInfoA( LPSTARTUPINFOA lpStartupInfo );

void __stdcall GetStartupInfoW( LPSTARTUPINFOW lpStartupInfo );

LPSTR __stdcall GetCommandLineA( void );

LPWSTR __stdcall GetCommandLineW( void );

DWORD __stdcall GetEnvironmentVariableA( LPCSTR lpName, LPSTR lpBuffer, DWORD nSize );

DWORD __stdcall GetEnvironmentVariableW( LPCWSTR lpName, LPWSTR lpBuffer, DWORD nSize );

BOOL __stdcall SetEnvironmentVariableA( LPCSTR lpName, LPCSTR lpValue );

BOOL __stdcall SetEnvironmentVariableW( LPCWSTR lpName, LPCWSTR lpValue );

DWORD __stdcall ExpandEnvironmentStringsA( LPCSTR lpSrc, LPSTR lpDst, DWORD nSize );

DWORD __stdcall ExpandEnvironmentStringsW( LPCWSTR lpSrc, LPWSTR lpDst, DWORD nSize );

DWORD __stdcall GetFirmwareEnvironmentVariableA( LPCSTR lpName, LPCSTR lpGuid, PVOID pBuffer, DWORD nSize );

DWORD __stdcall GetFirmwareEnvironmentVariableW( LPCWSTR lpName, LPCWSTR lpGuid, PVOID pBuffer, DWORD nSize );

BOOL __stdcall SetFirmwareEnvironmentVariableA( LPCSTR lpName, LPCSTR lpGuid, PVOID pValue, DWORD nSize );

BOOL __stdcall SetFirmwareEnvironmentVariableW( LPCWSTR lpName, LPCWSTR lpGuid, PVOID pValue, DWORD nSize );

void __stdcall OutputDebugStringA( LPCSTR lpOutputString );

void __stdcall OutputDebugStringW( LPCWSTR lpOutputString );

HRSRC __stdcall FindResourceA( HMODULE hModule, LPCSTR lpName, LPCSTR lpType );

HRSRC __stdcall FindResourceW( HMODULE hModule, LPCWSTR lpName, LPCWSTR lpType );

HRSRC __stdcall FindResourceExA( HMODULE hModule, LPCSTR lpType, LPCSTR lpName, WORD wLanguage );

HRSRC __stdcall FindResourceExW( HMODULE hModule, LPCWSTR lpType, LPCWSTR lpName, WORD wLanguage );
typedef BOOL (__stdcall* ENUMRESTYPEPROCA)( HMODULE hModule, LPSTR lpType, LONG_PTR lParam);
typedef BOOL (__stdcall* ENUMRESTYPEPROCW)( HMODULE hModule, LPWSTR lpType, LONG_PTR lParam);
typedef BOOL (__stdcall* ENUMRESNAMEPROCA)( HMODULE hModule, LPCSTR lpType, LPSTR lpName, LONG_PTR lParam);
typedef BOOL (__stdcall* ENUMRESNAMEPROCW)( HMODULE hModule, LPCWSTR lpType, LPWSTR lpName, LONG_PTR lParam);
typedef BOOL (__stdcall* ENUMRESLANGPROCA)( HMODULE hModule, LPCSTR lpType, LPCSTR lpName, WORD wLanguage, LONG_PTR lParam);
typedef BOOL (__stdcall* ENUMRESLANGPROCW)( HMODULE hModule, LPCWSTR lpType, LPCWSTR lpName, WORD wLanguage, LONG_PTR lParam);

BOOL __stdcall EnumResourceTypesA( HMODULE hModule, ENUMRESTYPEPROCA lpEnumFunc, LONG_PTR lParam );

BOOL __stdcall EnumResourceTypesW( HMODULE hModule, ENUMRESTYPEPROCW lpEnumFunc, LONG_PTR lParam );

BOOL __stdcall EnumResourceNamesA( HMODULE hModule, LPCSTR lpType, ENUMRESNAMEPROCA lpEnumFunc, LONG_PTR lParam );

BOOL __stdcall EnumResourceNamesW( HMODULE hModule, LPCWSTR lpType, ENUMRESNAMEPROCW lpEnumFunc, LONG_PTR lParam );

BOOL __stdcall EnumResourceLanguagesA( HMODULE hModule, LPCSTR lpType, LPCSTR lpName, ENUMRESLANGPROCA lpEnumFunc, LONG_PTR lParam );

BOOL __stdcall EnumResourceLanguagesW( HMODULE hModule, LPCWSTR lpType, LPCWSTR lpName, ENUMRESLANGPROCW lpEnumFunc, LONG_PTR lParam );

BOOL __stdcall EnumResourceTypesExA( HMODULE hModule, ENUMRESTYPEPROCA lpEnumFunc, LONG_PTR lParam, DWORD dwFlags, LANGID LangId );

BOOL __stdcall EnumResourceTypesExW( HMODULE hModule, ENUMRESTYPEPROCW lpEnumFunc, LONG_PTR lParam, DWORD dwFlags, LANGID LangId );

BOOL __stdcall EnumResourceNamesExA( HMODULE hModule, LPCSTR lpType, ENUMRESNAMEPROCA lpEnumFunc, LONG_PTR lParam, DWORD dwFlags, LANGID LangId );

BOOL __stdcall EnumResourceNamesExW( HMODULE hModule, LPCWSTR lpType, ENUMRESNAMEPROCW lpEnumFunc, LONG_PTR lParam, DWORD dwFlags, LANGID LangId );

BOOL __stdcall EnumResourceLanguagesExA( HMODULE hModule, LPCSTR lpType, LPCSTR lpName, ENUMRESLANGPROCA lpEnumFunc, LONG_PTR lParam, DWORD dwFlags, LANGID LangId );

BOOL __stdcall EnumResourceLanguagesExW( HMODULE hModule, LPCWSTR lpType, LPCWSTR lpName, ENUMRESLANGPROCW lpEnumFunc, LONG_PTR lParam, DWORD dwFlags, LANGID LangId );

HANDLE __stdcall BeginUpdateResourceA( LPCSTR pFileName, BOOL bDeleteExistingResources );

HANDLE __stdcall BeginUpdateResourceW( LPCWSTR pFileName, BOOL bDeleteExistingResources );

BOOL __stdcall UpdateResourceA( HANDLE hUpdate, LPCSTR lpType, LPCSTR lpName, WORD wLanguage, LPVOID lpData, DWORD cb );

BOOL __stdcall UpdateResourceW( HANDLE hUpdate, LPCWSTR lpType, LPCWSTR lpName, WORD wLanguage, LPVOID lpData, DWORD cb );

BOOL __stdcall EndUpdateResourceA( HANDLE hUpdate, BOOL fDiscard );

BOOL __stdcall EndUpdateResourceW( HANDLE hUpdate, BOOL fDiscard );

ATOM __stdcall GlobalAddAtomA( LPCSTR lpString );

ATOM __stdcall GlobalAddAtomW( LPCWSTR lpString );

ATOM __stdcall GlobalFindAtomA( LPCSTR lpString );

ATOM __stdcall GlobalFindAtomW( LPCWSTR lpString );

UINT __stdcall GlobalGetAtomNameA( ATOM nAtom, LPSTR lpBuffer, int32 nSize );

UINT __stdcall GlobalGetAtomNameW( ATOM nAtom, LPWSTR lpBuffer, int32 nSize );

ATOM __stdcall AddAtomA( LPCSTR lpString );

ATOM __stdcall AddAtomW( LPCWSTR lpString );

ATOM __stdcall FindAtomA( LPCSTR lpString );

ATOM __stdcall FindAtomW( LPCWSTR lpString );

UINT __stdcall GetAtomNameA( ATOM nAtom, LPSTR lpBuffer, int32 nSize );

UINT __stdcall GetAtomNameW( ATOM nAtom, LPWSTR lpBuffer, int32 nSize );

UINT __stdcall GetProfileIntA( LPCSTR lpAppName, LPCSTR lpKeyName, INT nDefault );

UINT __stdcall GetProfileIntW( LPCWSTR lpAppName, LPCWSTR lpKeyName, INT nDefault );

DWORD __stdcall GetProfileStringA( LPCSTR lpAppName, LPCSTR lpKeyName, LPCSTR lpDefault, LPSTR lpReturnedString, DWORD nSize );

DWORD __stdcall GetProfileStringW( LPCWSTR lpAppName, LPCWSTR lpKeyName, LPCWSTR lpDefault, LPWSTR lpReturnedString, DWORD nSize );

BOOL __stdcall WriteProfileStringA( LPCSTR lpAppName, LPCSTR lpKeyName, LPCSTR lpString );

BOOL __stdcall WriteProfileStringW( LPCWSTR lpAppName, LPCWSTR lpKeyName, LPCWSTR lpString );

DWORD __stdcall GetProfileSectionA( LPCSTR lpAppName, LPSTR lpReturnedString, DWORD nSize );

DWORD __stdcall GetProfileSectionW( LPCWSTR lpAppName, LPWSTR lpReturnedString, DWORD nSize );

BOOL __stdcall WriteProfileSectionA( LPCSTR lpAppName, LPCSTR lpString );

BOOL __stdcall WriteProfileSectionW( LPCWSTR lpAppName, LPCWSTR lpString );

UINT __stdcall GetPrivateProfileIntA( LPCSTR lpAppName, LPCSTR lpKeyName, INT nDefault, LPCSTR lpFileName );

UINT __stdcall GetPrivateProfileIntW( LPCWSTR lpAppName, LPCWSTR lpKeyName, INT nDefault, LPCWSTR lpFileName );

DWORD __stdcall GetPrivateProfileStringA( LPCSTR lpAppName, LPCSTR lpKeyName, LPCSTR lpDefault, LPSTR lpReturnedString, DWORD nSize, LPCSTR lpFileName );

DWORD __stdcall GetPrivateProfileStringW( LPCWSTR lpAppName, LPCWSTR lpKeyName, LPCWSTR lpDefault, LPWSTR lpReturnedString, DWORD nSize, LPCWSTR lpFileName );

BOOL __stdcall WritePrivateProfileStringA( LPCSTR lpAppName, LPCSTR lpKeyName, LPCSTR lpString, LPCSTR lpFileName );

BOOL __stdcall WritePrivateProfileStringW( LPCWSTR lpAppName, LPCWSTR lpKeyName, LPCWSTR lpString, LPCWSTR lpFileName );

DWORD __stdcall GetPrivateProfileSectionA( LPCSTR lpAppName, LPSTR lpReturnedString, DWORD nSize, LPCSTR lpFileName );

DWORD __stdcall GetPrivateProfileSectionW( LPCWSTR lpAppName, LPWSTR lpReturnedString, DWORD nSize, LPCWSTR lpFileName );

BOOL __stdcall WritePrivateProfileSectionA( LPCSTR lpAppName, LPCSTR lpString, LPCSTR lpFileName );

BOOL __stdcall WritePrivateProfileSectionW( LPCWSTR lpAppName, LPCWSTR lpString, LPCWSTR lpFileName );

DWORD __stdcall GetPrivateProfileSectionNamesA( LPSTR lpszReturnBuffer, DWORD nSize, LPCSTR lpFileName );

DWORD __stdcall GetPrivateProfileSectionNamesW( LPWSTR lpszReturnBuffer, DWORD nSize, LPCWSTR lpFileName );

BOOL __stdcall GetPrivateProfileStructA( LPCSTR lpszSection, LPCSTR lpszKey, LPVOID lpStruct, UINT uSizeStruct, LPCSTR szFile );

BOOL __stdcall GetPrivateProfileStructW( LPCWSTR lpszSection, LPCWSTR lpszKey, LPVOID lpStruct, UINT uSizeStruct, LPCWSTR szFile );

BOOL __stdcall WritePrivateProfileStructA( LPCSTR lpszSection, LPCSTR lpszKey, LPVOID lpStruct, UINT uSizeStruct, LPCSTR szFile );

BOOL __stdcall WritePrivateProfileStructW( LPCWSTR lpszSection, LPCWSTR lpszKey, LPVOID lpStruct, UINT uSizeStruct, LPCWSTR szFile );

UINT __stdcall GetDriveTypeA( LPCSTR lpRootPathName );

UINT __stdcall GetDriveTypeW( LPCWSTR lpRootPathName );

UINT __stdcall GetSystemDirectoryA( LPSTR lpBuffer, UINT uSize );

UINT __stdcall GetSystemDirectoryW( LPWSTR lpBuffer, UINT uSize );

DWORD __stdcall GetTempPathA( DWORD nBufferLength, LPSTR lpBuffer );

DWORD __stdcall GetTempPathW( DWORD nBufferLength, LPWSTR lpBuffer );

UINT __stdcall GetTempFileNameA( LPCSTR lpPathName, LPCSTR lpPrefixString, UINT uUnique, LPSTR lpTempFileName );

UINT __stdcall GetTempFileNameW( LPCWSTR lpPathName, LPCWSTR lpPrefixString, UINT uUnique, LPWSTR lpTempFileName );

UINT __stdcall GetWindowsDirectoryA( LPSTR lpBuffer, UINT uSize );

UINT __stdcall GetWindowsDirectoryW( LPWSTR lpBuffer, UINT uSize );

UINT __stdcall GetSystemWindowsDirectoryA( LPSTR lpBuffer, UINT uSize );

UINT __stdcall GetSystemWindowsDirectoryW( LPWSTR lpBuffer, UINT uSize );

UINT __stdcall GetSystemWow64DirectoryA( LPSTR lpBuffer, UINT uSize );

UINT __stdcall GetSystemWow64DirectoryW( LPWSTR lpBuffer, UINT uSize );

BOOLEAN __stdcall Wow64EnableWow64FsRedirection(BOOLEAN Wow64FsEnableRedirection );

BOOL __stdcall Wow64DisableWow64FsRedirection(PVOID *OldValue );

BOOL __stdcall Wow64RevertWow64FsRedirection(PVOID OlValue );
typedef UINT (__stdcall* PGET_SYSTEM_WOW64_DIRECTORY_A)( LPSTR lpBuffer, UINT uSize);
typedef UINT (__stdcall* PGET_SYSTEM_WOW64_DIRECTORY_W)( LPWSTR lpBuffer, UINT uSize);

BOOL __stdcall SetCurrentDirectoryA( LPCSTR lpPathName );

BOOL __stdcall SetCurrentDirectoryW( LPCWSTR lpPathName );

DWORD __stdcall GetCurrentDirectoryA( DWORD nBufferLength, LPSTR lpBuffer );

DWORD __stdcall GetCurrentDirectoryW( DWORD nBufferLength, LPWSTR lpBuffer );

BOOL __stdcall SetDllDirectoryA( LPCSTR lpPathName );

BOOL __stdcall SetDllDirectoryW( LPCWSTR lpPathName );

DWORD __stdcall GetDllDirectoryA( DWORD nBufferLength, LPSTR lpBuffer );

DWORD __stdcall GetDllDirectoryW( DWORD nBufferLength, LPWSTR lpBuffer );

BOOL __stdcall SetSearchPathMode(DWORD Flags );

BOOL __stdcall GetDiskFreeSpaceA( LPCSTR lpRootPathName, LPDWORD lpSectorsPerCluster, LPDWORD lpBytesPerSector, LPDWORD lpNumberOfFreeClusters, LPDWORD lpTotalNumberOfClusters );

BOOL __stdcall GetDiskFreeSpaceW( LPCWSTR lpRootPathName, LPDWORD lpSectorsPerCluster, LPDWORD lpBytesPerSector, LPDWORD lpNumberOfFreeClusters, LPDWORD lpTotalNumberOfClusters );

BOOL __stdcall GetDiskFreeSpaceExA( LPCSTR lpDirectoryName, PULARGE_INTEGER lpFreeBytesAvailableToCaller, PULARGE_INTEGER lpTotalNumberOfBytes, PULARGE_INTEGER lpTotalNumberOfFreeBytes );

BOOL __stdcall GetDiskFreeSpaceExW( LPCWSTR lpDirectoryName, PULARGE_INTEGER lpFreeBytesAvailableToCaller, PULARGE_INTEGER lpTotalNumberOfBytes, PULARGE_INTEGER lpTotalNumberOfFreeBytes );

BOOL __stdcall CreateDirectoryA( LPCSTR lpPathName, LPSECURITY_ATTRIBUTES lpSecurityAttributes );

BOOL __stdcall CreateDirectoryW( LPCWSTR lpPathName, LPSECURITY_ATTRIBUTES lpSecurityAttributes );

BOOL __stdcall CreateDirectoryExA( LPCSTR lpTemplateDirectory, LPCSTR lpNewDirectory, LPSECURITY_ATTRIBUTES lpSecurityAttributes );

BOOL __stdcall CreateDirectoryExW( LPCWSTR lpTemplateDirectory, LPCWSTR lpNewDirectory, LPSECURITY_ATTRIBUTES lpSecurityAttributes );

BOOL __stdcall CreateDirectoryTransactedA( LPCSTR lpTemplateDirectory, LPCSTR lpNewDirectory, LPSECURITY_ATTRIBUTES lpSecurityAttributes, HANDLE hTransaction );

BOOL __stdcall CreateDirectoryTransactedW( LPCWSTR lpTemplateDirectory, LPCWSTR lpNewDirectory, LPSECURITY_ATTRIBUTES lpSecurityAttributes, HANDLE hTransaction );

BOOL __stdcall RemoveDirectoryA( LPCSTR lpPathName );

BOOL __stdcall RemoveDirectoryW( LPCWSTR lpPathName );

BOOL __stdcall RemoveDirectoryTransactedA( LPCSTR lpPathName, HANDLE hTransaction );

BOOL __stdcall RemoveDirectoryTransactedW( LPCWSTR lpPathName, HANDLE hTransaction );

DWORD __stdcall GetFullPathNameA( LPCSTR lpFileName, DWORD nBufferLength, LPSTR lpBuffer, LPSTR *lpFilePart );

DWORD __stdcall GetFullPathNameW( LPCWSTR lpFileName, DWORD nBufferLength, LPWSTR lpBuffer, LPWSTR *lpFilePart );

DWORD __stdcall GetFullPathNameTransactedA( LPCSTR lpFileName, DWORD nBufferLength, LPSTR lpBuffer, LPSTR *lpFilePart, HANDLE hTransaction );

DWORD __stdcall GetFullPathNameTransactedW( LPCWSTR lpFileName, DWORD nBufferLength, LPWSTR lpBuffer, LPWSTR *lpFilePart, HANDLE hTransaction );

BOOL __stdcall DefineDosDeviceA( DWORD dwFlags, LPCSTR lpDeviceName, LPCSTR lpTargetPath );

BOOL __stdcall DefineDosDeviceW( DWORD dwFlags, LPCWSTR lpDeviceName, LPCWSTR lpTargetPath );

DWORD __stdcall QueryDosDeviceA( LPCSTR lpDeviceName, LPSTR lpTargetPath, DWORD ucchMax );

DWORD __stdcall QueryDosDeviceW( LPCWSTR lpDeviceName, LPWSTR lpTargetPath, DWORD ucchMax );

HANDLE __stdcall CreateFileA( LPCSTR lpFileName, DWORD dwDesiredAccess, DWORD dwShareMode, LPSECURITY_ATTRIBUTES lpSecurityAttributes, DWORD dwCreationDisposition, DWORD dwFlagsAndAttributes, HANDLE hTemplateFile );

HANDLE __stdcall CreateFileW( LPCWSTR lpFileName, DWORD dwDesiredAccess, DWORD dwShareMode, LPSECURITY_ATTRIBUTES lpSecurityAttributes, DWORD dwCreationDisposition, DWORD dwFlagsAndAttributes, HANDLE hTemplateFile );

HANDLE __stdcall CreateFileTransactedA( LPCSTR lpFileName, DWORD dwDesiredAccess, DWORD dwShareMode, LPSECURITY_ATTRIBUTES lpSecurityAttributes, DWORD dwCreationDisposition, DWORD dwFlagsAndAttributes, HANDLE hTemplateFile, HANDLE hTransaction, PUSHORT pusMiniVersion, PVOID lpExtendedParameter );

HANDLE __stdcall CreateFileTransactedW( LPCWSTR lpFileName, DWORD dwDesiredAccess, DWORD dwShareMode, LPSECURITY_ATTRIBUTES lpSecurityAttributes, DWORD dwCreationDisposition, DWORD dwFlagsAndAttributes, HANDLE hTemplateFile, HANDLE hTransaction, PUSHORT pusMiniVersion, PVOID lpExtendedParameter );

HANDLE __stdcall ReOpenFile( HANDLE hOriginalFile, DWORD dwDesiredAccess, DWORD dwShareMode, DWORD dwFlagsAndAttributes );

BOOL __stdcall SetFileAttributesA( LPCSTR lpFileName, DWORD dwFileAttributes );

BOOL __stdcall SetFileAttributesW( LPCWSTR lpFileName, DWORD dwFileAttributes );

DWORD __stdcall GetFileAttributesA( LPCSTR lpFileName );

DWORD __stdcall GetFileAttributesW( LPCWSTR lpFileName );

BOOL __stdcall SetFileAttributesTransactedA( LPCSTR lpFileName, DWORD dwFileAttributes, HANDLE hTransaction );

BOOL __stdcall SetFileAttributesTransactedW( LPCWSTR lpFileName, DWORD dwFileAttributes, HANDLE hTransaction );
typedef enum _GET_FILEEX_INFO_LEVELS {
GetFileExInfoStandard, GetFileExMaxInfoLevel } GET_FILEEX_INFO_LEVELS;

BOOL __stdcall GetFileAttributesTransactedA( LPCSTR lpFileName, GET_FILEEX_INFO_LEVELS fInfoLevelId, LPVOID lpFileInformation, HANDLE hTransaction );

BOOL __stdcall GetFileAttributesTransactedW( LPCWSTR lpFileName, GET_FILEEX_INFO_LEVELS fInfoLevelId, LPVOID lpFileInformation, HANDLE hTransaction );

BOOL __stdcall GetFileAttributesExA( LPCSTR lpFileName, GET_FILEEX_INFO_LEVELS fInfoLevelId, LPVOID lpFileInformation );

BOOL __stdcall GetFileAttributesExW( LPCWSTR lpFileName, GET_FILEEX_INFO_LEVELS fInfoLevelId, LPVOID lpFileInformation );

DWORD __stdcall GetCompressedFileSizeA( LPCSTR lpFileName, LPDWORD lpFileSizeHigh );

DWORD __stdcall GetCompressedFileSizeW( LPCWSTR lpFileName, LPDWORD lpFileSizeHigh );

DWORD __stdcall GetCompressedFileSizeTransactedA( LPCSTR lpFileName, LPDWORD lpFileSizeHigh, HANDLE hTransaction );

DWORD __stdcall GetCompressedFileSizeTransactedW( LPCWSTR lpFileName, LPDWORD lpFileSizeHigh, HANDLE hTransaction );

BOOL __stdcall DeleteFileA( LPCSTR lpFileName );

BOOL __stdcall DeleteFileW( LPCWSTR lpFileName );

BOOL __stdcall DeleteFileTransactedA( LPCSTR lpFileName, HANDLE hTransaction );

BOOL __stdcall DeleteFileTransactedW( LPCWSTR lpFileName, HANDLE hTransaction );

BOOL __stdcall CheckNameLegalDOS8Dot3A( LPCSTR lpName, LPSTR lpOemName, DWORD OemNameSize, PBOOL pbNameContainsSpaces, PBOOL pbNameLegal );

BOOL __stdcall CheckNameLegalDOS8Dot3W( LPCWSTR lpName, LPSTR lpOemName, DWORD OemNameSize, PBOOL pbNameContainsSpaces, PBOOL pbNameLegal );
typedef enum _FINDEX_INFO_LEVELS {
FindExInfoStandard, FindExInfoBasic, FindExInfoMaxInfoLevel } FINDEX_INFO_LEVELS;
typedef enum _FINDEX_SEARCH_OPS {
FindExSearchNameMatch, FindExSearchLimitToDirectories, FindExSearchLimitToDevices, FindExSearchMaxSearchOp } FINDEX_SEARCH_OPS;

HANDLE __stdcall FindFirstFileExA( LPCSTR lpFileName, FINDEX_INFO_LEVELS fInfoLevelId, LPVOID lpFindFileData, FINDEX_SEARCH_OPS fSearchOp, LPVOID lpSearchFilter, DWORD dwAdditionalFlags );

HANDLE __stdcall FindFirstFileExW( LPCWSTR lpFileName, FINDEX_INFO_LEVELS fInfoLevelId, LPVOID lpFindFileData, FINDEX_SEARCH_OPS fSearchOp, LPVOID lpSearchFilter, DWORD dwAdditionalFlags );

HANDLE __stdcall FindFirstFileTransactedA( LPCSTR lpFileName, FINDEX_INFO_LEVELS fInfoLevelId, LPVOID lpFindFileData, FINDEX_SEARCH_OPS fSearchOp, LPVOID lpSearchFilter, DWORD dwAdditionalFlags, HANDLE hTransaction );

HANDLE __stdcall FindFirstFileTransactedW( LPCWSTR lpFileName, FINDEX_INFO_LEVELS fInfoLevelId, LPVOID lpFindFileData, FINDEX_SEARCH_OPS fSearchOp, LPVOID lpSearchFilter, DWORD dwAdditionalFlags, HANDLE hTransaction );

HANDLE __stdcall FindFirstFileA( LPCSTR lpFileName, LPWIN32_FIND_DATAA lpFindFileData );

HANDLE __stdcall FindFirstFileW( LPCWSTR lpFileName, LPWIN32_FIND_DATAW lpFindFileData );

BOOL __stdcall FindNextFileA( HANDLE hFindFile, LPWIN32_FIND_DATAA lpFindFileData );

BOOL __stdcall FindNextFileW( HANDLE hFindFile, LPWIN32_FIND_DATAW lpFindFileData );

DWORD __stdcall SearchPathA( LPCSTR lpPath, LPCSTR lpFileName, LPCSTR lpExtension, DWORD nBufferLength, LPSTR lpBuffer, LPSTR *lpFilePart );

DWORD __stdcall SearchPathW( LPCWSTR lpPath, LPCWSTR lpFileName, LPCWSTR lpExtension, DWORD nBufferLength, LPWSTR lpBuffer, LPWSTR *lpFilePart );

BOOL __stdcall CopyFileA( LPCSTR lpExistingFileName, LPCSTR lpNewFileName, BOOL bFailIfExists );

BOOL __stdcall CopyFileW( LPCWSTR lpExistingFileName, LPCWSTR lpNewFileName, BOOL bFailIfExists );
typedef DWORD (__stdcall *LPPROGRESS_ROUTINE)( LARGE_INTEGER TotalFileSize, LARGE_INTEGER TotalBytesTransferred, LARGE_INTEGER StreamSize, LARGE_INTEGER StreamBytesTransferred, DWORD dwStreamNumber, DWORD dwCallbackReason, HANDLE hSourceFile, HANDLE hDestinationFile, LPVOID lpData );

BOOL __stdcall CopyFileExA( LPCSTR lpExistingFileName, LPCSTR lpNewFileName, LPPROGRESS_ROUTINE lpProgressRoutine, LPVOID lpData, LPBOOL pbCancel, DWORD dwCopyFlags );

BOOL __stdcall CopyFileExW( LPCWSTR lpExistingFileName, LPCWSTR lpNewFileName, LPPROGRESS_ROUTINE lpProgressRoutine, LPVOID lpData, LPBOOL pbCancel, DWORD dwCopyFlags );

BOOL __stdcall CopyFileTransactedA( LPCSTR lpExistingFileName, LPCSTR lpNewFileName, LPPROGRESS_ROUTINE lpProgressRoutine, LPVOID lpData, LPBOOL pbCancel, DWORD dwCopyFlags, HANDLE hTransaction );

BOOL __stdcall CopyFileTransactedW( LPCWSTR lpExistingFileName, LPCWSTR lpNewFileName, LPPROGRESS_ROUTINE lpProgressRoutine, LPVOID lpData, LPBOOL pbCancel, DWORD dwCopyFlags, HANDLE hTransaction );

BOOL __stdcall MoveFileA( LPCSTR lpExistingFileName, LPCSTR lpNewFileName );

BOOL __stdcall MoveFileW( LPCWSTR lpExistingFileName, LPCWSTR lpNewFileName );

BOOL __stdcall MoveFileExA( LPCSTR lpExistingFileName, LPCSTR lpNewFileName, DWORD dwFlags );

BOOL __stdcall MoveFileExW( LPCWSTR lpExistingFileName, LPCWSTR lpNewFileName, DWORD dwFlags );

BOOL __stdcall MoveFileWithProgressA( LPCSTR lpExistingFileName, LPCSTR lpNewFileName, LPPROGRESS_ROUTINE lpProgressRoutine, LPVOID lpData, DWORD dwFlags );

BOOL __stdcall MoveFileWithProgressW( LPCWSTR lpExistingFileName, LPCWSTR lpNewFileName, LPPROGRESS_ROUTINE lpProgressRoutine, LPVOID lpData, DWORD dwFlags );

BOOL __stdcall MoveFileTransactedA( LPCSTR lpExistingFileName, LPCSTR lpNewFileName, LPPROGRESS_ROUTINE lpProgressRoutine, LPVOID lpData, DWORD dwFlags, HANDLE hTransaction );

BOOL __stdcall MoveFileTransactedW( LPCWSTR lpExistingFileName, LPCWSTR lpNewFileName, LPPROGRESS_ROUTINE lpProgressRoutine, LPVOID lpData, DWORD dwFlags, HANDLE hTransaction );

BOOL __stdcall ReplaceFileA( LPCSTR lpReplacedFileName, LPCSTR lpReplacementFileName, LPCSTR lpBackupFileName, DWORD dwReplaceFlags, LPVOID lpExclude, LPVOID lpReserved );

BOOL __stdcall ReplaceFileW( LPCWSTR lpReplacedFileName, LPCWSTR lpReplacementFileName, LPCWSTR lpBackupFileName, DWORD dwReplaceFlags, LPVOID lpExclude, LPVOID lpReserved );

BOOL __stdcall CreateHardLinkA( LPCSTR lpFileName, LPCSTR lpExistingFileName, LPSECURITY_ATTRIBUTES lpSecurityAttributes );

BOOL __stdcall CreateHardLinkW( LPCWSTR lpFileName, LPCWSTR lpExistingFileName, LPSECURITY_ATTRIBUTES lpSecurityAttributes );

BOOL __stdcall CreateHardLinkTransactedA( LPCSTR lpFileName, LPCSTR lpExistingFileName, LPSECURITY_ATTRIBUTES lpSecurityAttributes, HANDLE hTransaction );

BOOL __stdcall CreateHardLinkTransactedW( LPCWSTR lpFileName, LPCWSTR lpExistingFileName, LPSECURITY_ATTRIBUTES lpSecurityAttributes, HANDLE hTransaction );
typedef enum _STREAM_INFO_LEVELS {
FindStreamInfoStandard, FindStreamInfoMaxInfoLevel } STREAM_INFO_LEVELS;
typedef struct _WIN32_FIND_STREAM_DATA {
<field name="StreamSize"><LARGE_INTEGER /></field>
<field name="cStreamName"><arr length=" 260 + 36 "><WCHAR /></arr></field>
} WIN32_FIND_STREAM_DATA, *PWIN32_FIND_STREAM_DATA;

HANDLE __stdcall FindFirstStreamW( LPCWSTR lpFileName, STREAM_INFO_LEVELS InfoLevel, LPVOID lpFindStreamData, DWORD dwFlags );

HANDLE __stdcall FindFirstStreamTransactedW(LPCWSTR lpFileName, STREAM_INFO_LEVELS InfoLevel, LPVOID lpFindStreamData, DWORD dwFlags, HANDLE hTransaction );

BOOL __stdcall FindNextStreamW( HANDLE hFindStream, LPVOID lpFindStreamData );

HANDLE __stdcall FindFirstFileNameW(LPCWSTR lpFileName, DWORD dwFlags, LPDWORD StringLength, PWCHAR LinkName );

BOOL __stdcall FindNextFileNameW(HANDLE hFindStream, LPDWORD StringLength, PWCHAR LinkName );

HANDLE __stdcall FindFirstFileNameTransactedW(LPCWSTR lpFileName, DWORD dwFlags, LPDWORD StringLength, PWCHAR LinkName, HANDLE hTransaction );

HANDLE __stdcall CreateNamedPipeA( LPCSTR lpName, DWORD dwOpenMode, DWORD dwPipeMode, DWORD nMaxInstances, DWORD nOutBufferSize, DWORD nInBufferSize, DWORD nDefaultTimeOut, LPSECURITY_ATTRIBUTES lpSecurityAttributes );

HANDLE __stdcall CreateNamedPipeW( LPCWSTR lpName, DWORD dwOpenMode, DWORD dwPipeMode, DWORD nMaxInstances, DWORD nOutBufferSize, DWORD nInBufferSize, DWORD nDefaultTimeOut, LPSECURITY_ATTRIBUTES lpSecurityAttributes );

BOOL __stdcall GetNamedPipeHandleStateA( HANDLE hNamedPipe, LPDWORD lpState, LPDWORD lpCurInstances, LPDWORD lpMaxCollectionCount, LPDWORD lpCollectDataTimeout, LPSTR lpUserName, DWORD nMaxUserNameSize );

BOOL __stdcall GetNamedPipeHandleStateW( HANDLE hNamedPipe, LPDWORD lpState, LPDWORD lpCurInstances, LPDWORD lpMaxCollectionCount, LPDWORD lpCollectDataTimeout, LPWSTR lpUserName, DWORD nMaxUserNameSize );

BOOL __stdcall CallNamedPipeA( LPCSTR lpNamedPipeName, LPVOID lpInBuffer, DWORD nInBufferSize, LPVOID lpOutBuffer, DWORD nOutBufferSize, LPDWORD lpBytesRead, DWORD nTimeOut );

BOOL __stdcall CallNamedPipeW( LPCWSTR lpNamedPipeName, LPVOID lpInBuffer, DWORD nInBufferSize, LPVOID lpOutBuffer, DWORD nOutBufferSize, LPDWORD lpBytesRead, DWORD nTimeOut );

BOOL __stdcall WaitNamedPipeA( LPCSTR lpNamedPipeName, DWORD nTimeOut );

BOOL __stdcall WaitNamedPipeW( LPCWSTR lpNamedPipeName, DWORD nTimeOut );
typedef enum {
PipeAttribute, PipeConnectionAttribute, PipeHandleAttribute } PIPE_ATTRIBUTE_TYPE;

BOOL __stdcall GetNamedPipeAttribute( HANDLE Pipe, PIPE_ATTRIBUTE_TYPE AttributeType, PSTR AttributeName, PVOID AttributeValue, PSIZE_T AttributeValueLength );

BOOL __stdcall SetNamedPipeAttribute( HANDLE Pipe, PIPE_ATTRIBUTE_TYPE AttributeType, PSTR AttributeName, PVOID AttributeValue, SIZE_T AttributeValueLength );

BOOL __stdcall GetNamedPipeClientComputerNameA( HANDLE Pipe, LPSTR ClientComputerName, ULONG ClientComputerNameLength );

BOOL __stdcall GetNamedPipeClientComputerNameW( HANDLE Pipe, LPWSTR ClientComputerName, ULONG ClientComputerNameLength );

BOOL __stdcall GetNamedPipeClientProcessId( HANDLE Pipe, PULONG ClientProcessId );

BOOL __stdcall GetNamedPipeClientSessionId( HANDLE Pipe, PULONG ClientSessionId );

BOOL __stdcall GetNamedPipeServerProcessId( HANDLE Pipe, PULONG ServerProcessId );

BOOL __stdcall GetNamedPipeServerSessionId( HANDLE Pipe, PULONG ServerSessionId );

BOOL __stdcall SetVolumeLabelA( LPCSTR lpRootPathName, LPCSTR lpVolumeName );

BOOL __stdcall SetVolumeLabelW( LPCWSTR lpRootPathName, LPCWSTR lpVolumeName );

void __stdcall SetFileApisToOEM( void );

void __stdcall SetFileApisToANSI( void );

BOOL __stdcall AreFileApisANSI( void );

BOOL __stdcall GetVolumeInformationA( LPCSTR lpRootPathName, LPSTR lpVolumeNameBuffer, DWORD nVolumeNameSize, LPDWORD lpVolumeSerialNumber, LPDWORD lpMaximumComponentLength, LPDWORD lpFileSystemFlags, LPSTR lpFileSystemNameBuffer, DWORD nFileSystemNameSize );

BOOL __stdcall GetVolumeInformationW( LPCWSTR lpRootPathName, LPWSTR lpVolumeNameBuffer, DWORD nVolumeNameSize, LPDWORD lpVolumeSerialNumber, LPDWORD lpMaximumComponentLength, LPDWORD lpFileSystemFlags, LPWSTR lpFileSystemNameBuffer, DWORD nFileSystemNameSize );

BOOL __stdcall GetVolumeInformationByHandleW( HANDLE hFile, LPWSTR lpVolumeNameBuffer, DWORD nVolumeNameSize, LPDWORD lpVolumeSerialNumber, LPDWORD lpMaximumComponentLength, LPDWORD lpFileSystemFlags, LPWSTR lpFileSystemNameBuffer, DWORD nFileSystemNameSize );

BOOL __stdcall CancelSynchronousIo( HANDLE hThread );

BOOL __stdcall CancelIoEx( HANDLE hFile, LPOVERLAPPED lpOverlapped );

BOOL __stdcall CancelIo( HANDLE hFile );

BOOL __stdcall SetFileBandwidthReservation( HANDLE hFile, DWORD nPeriodMilliseconds, DWORD nBytesPerPeriod, BOOL bDiscardable, LPDWORD lpTransferSize, LPDWORD lpNumOutstandingRequests );

BOOL __stdcall GetFileBandwidthReservation( HANDLE hFile, LPDWORD lpPeriodMilliseconds, LPDWORD lpBytesPerPeriod, LPBOOL pDiscardable, LPDWORD lpTransferSize, LPDWORD lpNumOutstandingRequests );

BOOL __stdcall ClearEventLogA(HANDLE hEventLog, LPCSTR lpBackupFileName );

BOOL __stdcall ClearEventLogW(HANDLE hEventLog, LPCWSTR lpBackupFileName );

BOOL __stdcall BackupEventLogA(HANDLE hEventLog, LPCSTR lpBackupFileName );

BOOL __stdcall BackupEventLogW(HANDLE hEventLog, LPCWSTR lpBackupFileName );

BOOL __stdcall CloseEventLog(HANDLE hEventLog );

BOOL __stdcall DeregisterEventSource(HANDLE hEventLog );

BOOL __stdcall NotifyChangeEventLog( HANDLE hEventLog, HANDLE hEvent );

BOOL __stdcall GetNumberOfEventLogRecords(HANDLE hEventLog, PDWORD NumberOfRecords );

BOOL __stdcall GetOldestEventLogRecord(HANDLE hEventLog, PDWORD OldestRecord );

HANDLE __stdcall OpenEventLogA(LPCSTR lpUNCServerName, LPCSTR lpSourceName );

HANDLE __stdcall OpenEventLogW(LPCWSTR lpUNCServerName, LPCWSTR lpSourceName );

HANDLE __stdcall RegisterEventSourceA(LPCSTR lpUNCServerName, LPCSTR lpSourceName );

HANDLE __stdcall RegisterEventSourceW(LPCWSTR lpUNCServerName, LPCWSTR lpSourceName );

HANDLE __stdcall OpenBackupEventLogA(LPCSTR lpUNCServerName, LPCSTR lpFileName );

HANDLE __stdcall OpenBackupEventLogW(LPCWSTR lpUNCServerName, LPCWSTR lpFileName );

BOOL __stdcall ReadEventLogA(HANDLE hEventLog, DWORD dwReadFlags, DWORD dwRecordOffset, LPVOID lpBuffer, DWORD nNumberOfBytesToRead, DWORD *pnBytesRead, DWORD *pnMinNumberOfBytesNeeded );

BOOL __stdcall ReadEventLogW(HANDLE hEventLog, DWORD dwReadFlags, DWORD dwRecordOffset, LPVOID lpBuffer, DWORD nNumberOfBytesToRead, DWORD *pnBytesRead, DWORD *pnMinNumberOfBytesNeeded );

BOOL __stdcall ReportEventA(HANDLE hEventLog, WORD wType, WORD wCategory, DWORD dwEventID, PSID lpUserSid, WORD wNumStrings, DWORD dwDataSize, LPCSTR *lpStrings, LPVOID lpRawData );

BOOL __stdcall ReportEventW(HANDLE hEventLog, WORD wType, WORD wCategory, DWORD dwEventID, PSID lpUserSid, WORD wNumStrings, DWORD dwDataSize, LPCWSTR *lpStrings, LPVOID lpRawData );
typedef struct _EVENTLOG_FULL_INFORMATION {
<field name="dwFull"><DWORD /></field>
} EVENTLOG_FULL_INFORMATION, *LPEVENTLOG_FULL_INFORMATION;

BOOL __stdcall GetEventLogInformation(HANDLE hEventLog, DWORD dwInfoLevel, LPVOID lpBuffer, DWORD cbBufSize, LPDWORD pcbBytesNeeded );

BOOL __stdcall DuplicateToken( HANDLE ExistingTokenHandle, SECURITY_IMPERSONATION_LEVEL ImpersonationLevel, PHANDLE DuplicateTokenHandle );

BOOL __stdcall GetKernelObjectSecurity(HANDLE Handle, SECURITY_INFORMATION RequestedInformation, PSECURITY_DESCRIPTOR pSecurityDescriptor, DWORD nLength, LPDWORD lpnLengthNeeded );

BOOL __stdcall ImpersonateNamedPipeClient( HANDLE hNamedPipe );

BOOL __stdcall ImpersonateSelf( SECURITY_IMPERSONATION_LEVEL ImpersonationLevel );

BOOL __stdcall RevertToSelf(void );

BOOL __stdcall SetThreadToken(PHANDLE Thread, HANDLE Token );

BOOL __stdcall AccessCheck(PSECURITY_DESCRIPTOR pSecurityDescriptor, HANDLE ClientToken, DWORD DesiredAccess, PGENERIC_MAPPING GenericMapping, PPRIVILEGE_SET PrivilegeSet, LPDWORD PrivilegeSetLength, LPDWORD GrantedAccess, LPBOOL AccessStatus );

BOOL __stdcall AccessCheckByType(PSECURITY_DESCRIPTOR pSecurityDescriptor, PSID PrincipalSelfSid, HANDLE ClientToken, DWORD DesiredAccess, POBJECT_TYPE_LIST ObjectTypeList, DWORD ObjectTypeListLength, PGENERIC_MAPPING GenericMapping, PPRIVILEGE_SET PrivilegeSet, LPDWORD PrivilegeSetLength, LPDWORD GrantedAccess, LPBOOL AccessStatus );

BOOL __stdcall AccessCheckByTypeResultList(PSECURITY_DESCRIPTOR pSecurityDescriptor, PSID PrincipalSelfSid, HANDLE ClientToken, DWORD DesiredAccess, POBJECT_TYPE_LIST ObjectTypeList, DWORD ObjectTypeListLength, PGENERIC_MAPPING GenericMapping, PPRIVILEGE_SET PrivilegeSet, LPDWORD PrivilegeSetLength, LPDWORD GrantedAccessList, LPDWORD AccessStatusList );

BOOL __stdcall OpenProcessToken(HANDLE ProcessHandle, DWORD DesiredAccess, PHANDLE TokenHandle );

BOOL __stdcall OpenThreadToken(HANDLE ThreadHandle, DWORD DesiredAccess, BOOL OpenAsSelf, PHANDLE TokenHandle );

BOOL __stdcall GetTokenInformation(HANDLE TokenHandle, TOKEN_INFORMATION_CLASS TokenInformationClass, LPVOID TokenInformation, DWORD TokenInformationLength, PDWORD ReturnLength );

BOOL __stdcall SetTokenInformation(HANDLE TokenHandle, TOKEN_INFORMATION_CLASS TokenInformationClass, LPVOID TokenInformation, DWORD TokenInformationLength );

BOOL __stdcall AdjustTokenPrivileges(HANDLE TokenHandle, BOOL DisableAllPrivileges, PTOKEN_PRIVILEGES NewState, DWORD BufferLength, PTOKEN_PRIVILEGES PreviousState, PDWORD ReturnLength );

BOOL __stdcall AdjustTokenGroups(HANDLE TokenHandle, BOOL ResetToDefault, PTOKEN_GROUPS NewState, DWORD BufferLength, PTOKEN_GROUPS PreviousState, PDWORD ReturnLength );

BOOL __stdcall PrivilegeCheck(HANDLE ClientToken, PPRIVILEGE_SET RequiredPrivileges, LPBOOL pfResult );

BOOL __stdcall AccessCheckAndAuditAlarmA(LPCSTR SubsystemName, LPVOID HandleId, LPSTR ObjectTypeName, LPSTR ObjectName, PSECURITY_DESCRIPTOR SecurityDescriptor, DWORD DesiredAccess, PGENERIC_MAPPING GenericMapping, BOOL ObjectCreation, LPDWORD GrantedAccess, LPBOOL AccessStatus, LPBOOL pfGenerateOnClose );

BOOL __stdcall AccessCheckAndAuditAlarmW(LPCWSTR SubsystemName, LPVOID HandleId, LPWSTR ObjectTypeName, LPWSTR ObjectName, PSECURITY_DESCRIPTOR SecurityDescriptor, DWORD DesiredAccess, PGENERIC_MAPPING GenericMapping, BOOL ObjectCreation, LPDWORD GrantedAccess, LPBOOL AccessStatus, LPBOOL pfGenerateOnClose );

BOOL __stdcall AccessCheckByTypeAndAuditAlarmA(LPCSTR SubsystemName, LPVOID HandleId, LPCSTR ObjectTypeName, LPCSTR ObjectName, PSECURITY_DESCRIPTOR SecurityDescriptor, PSID PrincipalSelfSid, DWORD DesiredAccess, AUDIT_EVENT_TYPE AuditType, DWORD Flags, POBJECT_TYPE_LIST ObjectTypeList, DWORD ObjectTypeListLength, PGENERIC_MAPPING GenericMapping, BOOL ObjectCreation, LPDWORD GrantedAccess, LPBOOL AccessStatus, LPBOOL pfGenerateOnClose );

BOOL __stdcall AccessCheckByTypeAndAuditAlarmW(LPCWSTR SubsystemName, LPVOID HandleId, LPCWSTR ObjectTypeName, LPCWSTR ObjectName, PSECURITY_DESCRIPTOR SecurityDescriptor, PSID PrincipalSelfSid, DWORD DesiredAccess, AUDIT_EVENT_TYPE AuditType, DWORD Flags, POBJECT_TYPE_LIST ObjectTypeList, DWORD ObjectTypeListLength, PGENERIC_MAPPING GenericMapping, BOOL ObjectCreation, LPDWORD GrantedAccess, LPBOOL AccessStatus, LPBOOL pfGenerateOnClose );

BOOL __stdcall AccessCheckByTypeResultListAndAuditAlarmA(LPCSTR SubsystemName, LPVOID HandleId, LPCSTR ObjectTypeName, LPCSTR ObjectName, PSECURITY_DESCRIPTOR SecurityDescriptor, PSID PrincipalSelfSid, DWORD DesiredAccess, AUDIT_EVENT_TYPE AuditType, DWORD Flags, POBJECT_TYPE_LIST ObjectTypeList, DWORD ObjectTypeListLength, PGENERIC_MAPPING GenericMapping, BOOL ObjectCreation, LPDWORD GrantedAccess, LPDWORD AccessStatusList, LPBOOL pfGenerateOnClose );

BOOL __stdcall AccessCheckByTypeResultListAndAuditAlarmW(LPCWSTR SubsystemName, LPVOID HandleId, LPCWSTR ObjectTypeName, LPCWSTR ObjectName, PSECURITY_DESCRIPTOR SecurityDescriptor, PSID PrincipalSelfSid, DWORD DesiredAccess, AUDIT_EVENT_TYPE AuditType, DWORD Flags, POBJECT_TYPE_LIST ObjectTypeList, DWORD ObjectTypeListLength, PGENERIC_MAPPING GenericMapping, BOOL ObjectCreation, LPDWORD GrantedAccess, LPDWORD AccessStatusList, LPBOOL pfGenerateOnClose );

BOOL __stdcall AccessCheckByTypeResultListAndAuditAlarmByHandleA(LPCSTR SubsystemName, LPVOID HandleId, HANDLE ClientToken, LPCSTR ObjectTypeName, LPCSTR ObjectName, PSECURITY_DESCRIPTOR SecurityDescriptor, PSID PrincipalSelfSid, DWORD DesiredAccess, AUDIT_EVENT_TYPE AuditType, DWORD Flags, POBJECT_TYPE_LIST ObjectTypeList, DWORD ObjectTypeListLength, PGENERIC_MAPPING GenericMapping, BOOL ObjectCreation, LPDWORD GrantedAccess, LPDWORD AccessStatusList, LPBOOL pfGenerateOnClose );

BOOL __stdcall AccessCheckByTypeResultListAndAuditAlarmByHandleW(LPCWSTR SubsystemName, LPVOID HandleId, HANDLE ClientToken, LPCWSTR ObjectTypeName, LPCWSTR ObjectName, PSECURITY_DESCRIPTOR SecurityDescriptor, PSID PrincipalSelfSid, DWORD DesiredAccess, AUDIT_EVENT_TYPE AuditType, DWORD Flags, POBJECT_TYPE_LIST ObjectTypeList, DWORD ObjectTypeListLength, PGENERIC_MAPPING GenericMapping, BOOL ObjectCreation, LPDWORD GrantedAccess, LPDWORD AccessStatusList, LPBOOL pfGenerateOnClose );

BOOL __stdcall ObjectOpenAuditAlarmA(LPCSTR SubsystemName, LPVOID HandleId, LPSTR ObjectTypeName, LPSTR ObjectName, PSECURITY_DESCRIPTOR pSecurityDescriptor, HANDLE ClientToken, DWORD DesiredAccess, DWORD GrantedAccess, PPRIVILEGE_SET Privileges, BOOL ObjectCreation, BOOL AccessGranted, LPBOOL GenerateOnClose );

BOOL __stdcall ObjectOpenAuditAlarmW(LPCWSTR SubsystemName, LPVOID HandleId, LPWSTR ObjectTypeName, LPWSTR ObjectName, PSECURITY_DESCRIPTOR pSecurityDescriptor, HANDLE ClientToken, DWORD DesiredAccess, DWORD GrantedAccess, PPRIVILEGE_SET Privileges, BOOL ObjectCreation, BOOL AccessGranted, LPBOOL GenerateOnClose );

BOOL __stdcall ObjectPrivilegeAuditAlarmA(LPCSTR SubsystemName, LPVOID HandleId, HANDLE ClientToken, DWORD DesiredAccess, PPRIVILEGE_SET Privileges, BOOL AccessGranted );

BOOL __stdcall ObjectPrivilegeAuditAlarmW(LPCWSTR SubsystemName, LPVOID HandleId, HANDLE ClientToken, DWORD DesiredAccess, PPRIVILEGE_SET Privileges, BOOL AccessGranted );

BOOL __stdcall ObjectCloseAuditAlarmA(LPCSTR SubsystemName, LPVOID HandleId, BOOL GenerateOnClose );

BOOL __stdcall ObjectCloseAuditAlarmW(LPCWSTR SubsystemName, LPVOID HandleId, BOOL GenerateOnClose );

BOOL __stdcall ObjectDeleteAuditAlarmA(LPCSTR SubsystemName, LPVOID HandleId, BOOL GenerateOnClose );

BOOL __stdcall ObjectDeleteAuditAlarmW(LPCWSTR SubsystemName, LPVOID HandleId, BOOL GenerateOnClose );

BOOL __stdcall PrivilegedServiceAuditAlarmA(LPCSTR SubsystemName, LPCSTR ServiceName, HANDLE ClientToken, PPRIVILEGE_SET Privileges, BOOL AccessGranted );

BOOL __stdcall PrivilegedServiceAuditAlarmW(LPCWSTR SubsystemName, LPCWSTR ServiceName, HANDLE ClientToken, PPRIVILEGE_SET Privileges, BOOL AccessGranted );

BOOL __stdcall IsWellKnownSid(PSID pSid, WELL_KNOWN_SID_TYPE WellKnownSidType );

BOOL __stdcall CreateWellKnownSid( WELL_KNOWN_SID_TYPE WellKnownSidType, PSID DomainSid, PSID pSid, DWORD *cbSid );

BOOL __stdcall EqualDomainSid( PSID pSid1, PSID pSid2, BOOL *pfEqual );

BOOL __stdcall GetWindowsAccountDomainSid( PSID pSid, PSID pDomainSid, DWORD* cbDomainSid );

BOOL __stdcall IsValidSid(PSID pSid );

BOOL __stdcall EqualSid(PSID pSid1, PSID pSid2 );

BOOL __stdcall EqualPrefixSid(PSID pSid1, PSID pSid2 );

DWORD __stdcall GetSidLengthRequired(UCHAR nSubAuthorityCount );

BOOL __stdcall AllocateAndInitializeSid(PSID_IDENTIFIER_AUTHORITY pIdentifierAuthority, BYTE nSubAuthorityCount, DWORD nSubAuthority0, DWORD nSubAuthority1, DWORD nSubAuthority2, DWORD nSubAuthority3, DWORD nSubAuthority4, DWORD nSubAuthority5, DWORD nSubAuthority6, DWORD nSubAuthority7, PSID *pSid );

PVOID __stdcall FreeSid( PSID pSid );

BOOL __stdcall InitializeSid(PSID Sid, PSID_IDENTIFIER_AUTHORITY pIdentifierAuthority, BYTE nSubAuthorityCount );

PSID_IDENTIFIER_AUTHORITY __stdcall GetSidIdentifierAuthority(PSID pSid );

PDWORD __stdcall GetSidSubAuthority(PSID pSid, DWORD nSubAuthority );

PUCHAR __stdcall GetSidSubAuthorityCount(PSID pSid );

DWORD __stdcall GetLengthSid(PSID pSid );

BOOL __stdcall CopySid(DWORD nDestinationSidLength, PSID pDestinationSid, PSID pSourceSid );

BOOL __stdcall AreAllAccessesGranted(DWORD GrantedAccess, DWORD DesiredAccess );

BOOL __stdcall AreAnyAccessesGranted(DWORD GrantedAccess, DWORD DesiredAccess );

void __stdcall MapGenericMask(PDWORD AccessMask, PGENERIC_MAPPING GenericMapping );

BOOL __stdcall IsValidAcl(PACL pAcl );

BOOL __stdcall InitializeAcl(PACL pAcl, DWORD nAclLength, DWORD dwAclRevision );

BOOL __stdcall GetAclInformation(PACL pAcl, LPVOID pAclInformation, DWORD nAclInformationLength, ACL_INFORMATION_CLASS dwAclInformationClass );

BOOL __stdcall SetAclInformation(PACL pAcl, LPVOID pAclInformation, DWORD nAclInformationLength, ACL_INFORMATION_CLASS dwAclInformationClass );

BOOL __stdcall AddAce(PACL pAcl, DWORD dwAceRevision, DWORD dwStartingAceIndex, LPVOID pAceList, DWORD nAceListLength );

BOOL __stdcall DeleteAce(PACL pAcl, DWORD dwAceIndex );

BOOL __stdcall GetAce(PACL pAcl, DWORD dwAceIndex, LPVOID *pAce );

BOOL __stdcall AddAccessAllowedAce(PACL pAcl, DWORD dwAceRevision, DWORD AccessMask, PSID pSid );

BOOL __stdcall AddAccessAllowedAceEx(PACL pAcl, DWORD dwAceRevision, DWORD AceFlags, DWORD AccessMask, PSID pSid );

BOOL __stdcall AddMandatoryAce(PACL pAcl, DWORD dwAceRevision, DWORD AceFlags, DWORD MandatoryPolicy, PSID pLabelSid );

BOOL __stdcall AddConditionalAce(PACL pAcl, DWORD dwAceRevision, DWORD AceFlags, UCHAR AceType, DWORD AccessMask, PSID pSid, PWCHAR ConditionStr, DWORD *ReturnLength );

BOOL __stdcall AddAccessDeniedAce(PACL pAcl, DWORD dwAceRevision, DWORD AccessMask, PSID pSid );

BOOL __stdcall AddAccessDeniedAceEx(PACL pAcl, DWORD dwAceRevision, DWORD AceFlags, DWORD AccessMask, PSID pSid );

BOOL __stdcall AddAuditAccessAce( PACL pAcl, DWORD dwAceRevision, DWORD dwAccessMask, PSID pSid, BOOL bAuditSuccess, BOOL bAuditFailure );

BOOL __stdcall AddAuditAccessAceEx( PACL pAcl, DWORD dwAceRevision, DWORD AceFlags, DWORD dwAccessMask, PSID pSid, BOOL bAuditSuccess, BOOL bAuditFailure );

BOOL __stdcall AddAccessAllowedObjectAce(PACL pAcl, DWORD dwAceRevision, DWORD AceFlags, DWORD AccessMask, GUID *ObjectTypeGuid, GUID *InheritedObjectTypeGuid, PSID pSid );

BOOL __stdcall AddAccessDeniedObjectAce(PACL pAcl, DWORD dwAceRevision, DWORD AceFlags, DWORD AccessMask, GUID *ObjectTypeGuid, GUID *InheritedObjectTypeGuid, PSID pSid );

BOOL __stdcall AddAuditAccessObjectAce(PACL pAcl, DWORD dwAceRevision, DWORD AceFlags, DWORD AccessMask, GUID *ObjectTypeGuid, GUID *InheritedObjectTypeGuid, PSID pSid, BOOL bAuditSuccess, BOOL bAuditFailure );

BOOL __stdcall FindFirstFreeAce(PACL pAcl, LPVOID *pAce );

BOOL __stdcall InitializeSecurityDescriptor(PSECURITY_DESCRIPTOR pSecurityDescriptor, DWORD dwRevision );

BOOL __stdcall IsValidSecurityDescriptor(PSECURITY_DESCRIPTOR pSecurityDescriptor );

BOOL __stdcall IsValidRelativeSecurityDescriptor(PSECURITY_DESCRIPTOR pSecurityDescriptor, ULONG SecurityDescriptorLength, SECURITY_INFORMATION RequiredInformation );

DWORD __stdcall GetSecurityDescriptorLength(PSECURITY_DESCRIPTOR pSecurityDescriptor );

BOOL __stdcall GetSecurityDescriptorControl(PSECURITY_DESCRIPTOR pSecurityDescriptor, PSECURITY_DESCRIPTOR_CONTROL pControl, LPDWORD lpdwRevision );

BOOL __stdcall SetSecurityDescriptorControl(PSECURITY_DESCRIPTOR pSecurityDescriptor, SECURITY_DESCRIPTOR_CONTROL ControlBitsOfInterest, SECURITY_DESCRIPTOR_CONTROL ControlBitsToSet );

BOOL __stdcall SetSecurityDescriptorDacl(PSECURITY_DESCRIPTOR pSecurityDescriptor, BOOL bDaclPresent, PACL pDacl, BOOL bDaclDefaulted );

BOOL __stdcall GetSecurityDescriptorDacl(PSECURITY_DESCRIPTOR pSecurityDescriptor, LPBOOL lpbDaclPresent, PACL *pDacl, LPBOOL lpbDaclDefaulted );

BOOL __stdcall SetSecurityDescriptorSacl(PSECURITY_DESCRIPTOR pSecurityDescriptor, BOOL bSaclPresent, PACL pSacl, BOOL bSaclDefaulted );

BOOL __stdcall GetSecurityDescriptorSacl(PSECURITY_DESCRIPTOR pSecurityDescriptor, LPBOOL lpbSaclPresent, PACL *pSacl, LPBOOL lpbSaclDefaulted );

BOOL __stdcall SetSecurityDescriptorOwner(PSECURITY_DESCRIPTOR pSecurityDescriptor, PSID pOwner, BOOL bOwnerDefaulted );

BOOL __stdcall GetSecurityDescriptorOwner(PSECURITY_DESCRIPTOR pSecurityDescriptor, PSID *pOwner, LPBOOL lpbOwnerDefaulted );

BOOL __stdcall SetSecurityDescriptorGroup(PSECURITY_DESCRIPTOR pSecurityDescriptor, PSID pGroup, BOOL bGroupDefaulted );

BOOL __stdcall GetSecurityDescriptorGroup(PSECURITY_DESCRIPTOR pSecurityDescriptor, PSID *pGroup, LPBOOL lpbGroupDefaulted );

DWORD __stdcall SetSecurityDescriptorRMControl( PSECURITY_DESCRIPTOR SecurityDescriptor, PUCHAR RMControl );

DWORD __stdcall GetSecurityDescriptorRMControl( PSECURITY_DESCRIPTOR SecurityDescriptor, PUCHAR RMControl );

BOOL __stdcall CreatePrivateObjectSecurity(PSECURITY_DESCRIPTOR ParentDescriptor, PSECURITY_DESCRIPTOR CreatorDescriptor, PSECURITY_DESCRIPTOR * NewDescriptor, BOOL IsDirectoryObject, HANDLE Token, PGENERIC_MAPPING GenericMapping );

BOOL __stdcall ConvertToAutoInheritPrivateObjectSecurity( PSECURITY_DESCRIPTOR ParentDescriptor, PSECURITY_DESCRIPTOR CurrentSecurityDescriptor, PSECURITY_DESCRIPTOR *NewSecurityDescriptor, GUID *ObjectType, BOOLEAN IsDirectoryObject, PGENERIC_MAPPING GenericMapping );

BOOL __stdcall CreatePrivateObjectSecurityEx(PSECURITY_DESCRIPTOR ParentDescriptor, PSECURITY_DESCRIPTOR CreatorDescriptor, PSECURITY_DESCRIPTOR * NewDescriptor, GUID *ObjectType, BOOL IsContainerObject, ULONG AutoInheritFlags, HANDLE Token, PGENERIC_MAPPING GenericMapping );

BOOL __stdcall CreatePrivateObjectSecurityWithMultipleInheritance(PSECURITY_DESCRIPTOR ParentDescriptor, PSECURITY_DESCRIPTOR CreatorDescriptor, PSECURITY_DESCRIPTOR * NewDescriptor, GUID **ObjectTypes, ULONG GuidCount, BOOL IsContainerObject, ULONG AutoInheritFlags, HANDLE Token, PGENERIC_MAPPING GenericMapping );

BOOL __stdcall SetPrivateObjectSecurity(SECURITY_INFORMATION SecurityInformation, PSECURITY_DESCRIPTOR ModificationDescriptor, PSECURITY_DESCRIPTOR *ObjectsSecurityDescriptor, PGENERIC_MAPPING GenericMapping, HANDLE Token );

BOOL __stdcall SetPrivateObjectSecurityEx(SECURITY_INFORMATION SecurityInformation, PSECURITY_DESCRIPTOR ModificationDescriptor, PSECURITY_DESCRIPTOR *ObjectsSecurityDescriptor, ULONG AutoInheritFlags, PGENERIC_MAPPING GenericMapping, HANDLE Token );

BOOL __stdcall GetPrivateObjectSecurity(PSECURITY_DESCRIPTOR ObjectDescriptor, SECURITY_INFORMATION SecurityInformation, PSECURITY_DESCRIPTOR ResultantDescriptor, DWORD DescriptorLength, PDWORD ReturnLength );

BOOL __stdcall DestroyPrivateObjectSecurity(PSECURITY_DESCRIPTOR * ObjectDescriptor );

BOOL __stdcall MakeSelfRelativeSD(PSECURITY_DESCRIPTOR pAbsoluteSecurityDescriptor, PSECURITY_DESCRIPTOR pSelfRelativeSecurityDescriptor, LPDWORD lpdwBufferLength );

BOOL __stdcall MakeAbsoluteSD(PSECURITY_DESCRIPTOR pSelfRelativeSecurityDescriptor, PSECURITY_DESCRIPTOR pAbsoluteSecurityDescriptor, LPDWORD lpdwAbsoluteSecurityDescriptorSize, PACL pDacl, LPDWORD lpdwDaclSize, PACL pSacl, LPDWORD lpdwSaclSize, PSID pOwner, LPDWORD lpdwOwnerSize, PSID pPrimaryGroup, LPDWORD lpdwPrimaryGroupSize );

BOOL __stdcall MakeAbsoluteSD2(PSECURITY_DESCRIPTOR pSelfRelativeSecurityDescriptor, LPDWORD lpdwBufferSize );

void __stdcall QuerySecurityAccessMask( SECURITY_INFORMATION SecurityInformation, LPDWORD DesiredAccess );

void __stdcall SetSecurityAccessMask( SECURITY_INFORMATION SecurityInformation, LPDWORD DesiredAccess );

BOOL __stdcall SetFileSecurityA(LPCSTR lpFileName, SECURITY_INFORMATION SecurityInformation, PSECURITY_DESCRIPTOR pSecurityDescriptor );

BOOL __stdcall SetFileSecurityW(LPCWSTR lpFileName, SECURITY_INFORMATION SecurityInformation, PSECURITY_DESCRIPTOR pSecurityDescriptor );

BOOL __stdcall GetFileSecurityA(LPCSTR lpFileName, SECURITY_INFORMATION RequestedInformation, PSECURITY_DESCRIPTOR pSecurityDescriptor, DWORD nLength, LPDWORD lpnLengthNeeded );

BOOL __stdcall GetFileSecurityW(LPCWSTR lpFileName, SECURITY_INFORMATION RequestedInformation, PSECURITY_DESCRIPTOR pSecurityDescriptor, DWORD nLength, LPDWORD lpnLengthNeeded );

BOOL __stdcall SetKernelObjectSecurity(HANDLE Handle, SECURITY_INFORMATION SecurityInformation, PSECURITY_DESCRIPTOR SecurityDescriptor );

HANDLE __stdcall FindFirstChangeNotificationA( LPCSTR lpPathName, BOOL bWatchSubtree, DWORD dwNotifyFilter );

HANDLE __stdcall FindFirstChangeNotificationW( LPCWSTR lpPathName, BOOL bWatchSubtree, DWORD dwNotifyFilter );

BOOL __stdcall FindNextChangeNotification( HANDLE hChangeHandle );

BOOL __stdcall FindCloseChangeNotification( HANDLE hChangeHandle );

BOOL __stdcall ReadDirectoryChangesW( HANDLE hDirectory, LPVOID lpBuffer, DWORD nBufferLength, BOOL bWatchSubtree, DWORD dwNotifyFilter, LPDWORD lpBytesReturned, LPOVERLAPPED lpOverlapped, LPOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine );

BOOL __stdcall VirtualLock( LPVOID lpAddress, SIZE_T dwSize );

BOOL __stdcall VirtualUnlock( LPVOID lpAddress, SIZE_T dwSize );

LPVOID __stdcall MapViewOfFileEx( HANDLE hFileMappingObject, DWORD dwDesiredAccess, DWORD dwFileOffsetHigh, DWORD dwFileOffsetLow, SIZE_T dwNumberOfBytesToMap, LPVOID lpBaseAddress );

LPVOID __stdcall MapViewOfFileExNuma( HANDLE hFileMappingObject, DWORD dwDesiredAccess, DWORD dwFileOffsetHigh, DWORD dwFileOffsetLow, SIZE_T dwNumberOfBytesToMap, LPVOID lpBaseAddress, DWORD nndPreferred );

BOOL __stdcall SetPriorityClass( HANDLE hProcess, DWORD dwPriorityClass );

DWORD __stdcall GetPriorityClass( HANDLE hProcess );

BOOL __stdcall IsBadReadPtr( const void *lp, UINT_PTR ucb );

BOOL __stdcall IsBadWritePtr( LPVOID lp, UINT_PTR ucb );

BOOL __stdcall IsBadHugeReadPtr( const void *lp, UINT_PTR ucb );

BOOL __stdcall IsBadHugeWritePtr( LPVOID lp, UINT_PTR ucb );

BOOL __stdcall IsBadCodePtr( FARPROC lpfn );

BOOL __stdcall IsBadStringPtrA( LPCSTR lpsz, UINT_PTR ucchMax );

BOOL __stdcall IsBadStringPtrW( LPCWSTR lpsz, UINT_PTR ucchMax );

BOOL __stdcall LookupAccountSidA( LPCSTR lpSystemName, PSID Sid, LPSTR Name, LPDWORD cchName, LPSTR ReferencedDomainName, LPDWORD cchReferencedDomainName, PSID_NAME_USE peUse );

BOOL __stdcall LookupAccountSidW( LPCWSTR lpSystemName, PSID Sid, LPWSTR Name, LPDWORD cchName, LPWSTR ReferencedDomainName, LPDWORD cchReferencedDomainName, PSID_NAME_USE peUse );

BOOL __stdcall LookupAccountSidLocalA( PSID Sid, LPSTR Name, LPDWORD cchName, LPSTR ReferencedDomainName, LPDWORD cchReferencedDomainName, PSID_NAME_USE peUse );

BOOL __stdcall LookupAccountSidLocalW( PSID Sid, LPWSTR Name, LPDWORD cchName, LPWSTR ReferencedDomainName, LPDWORD cchReferencedDomainName, PSID_NAME_USE peUse );

BOOL __stdcall LookupAccountNameA( LPCSTR lpSystemName, LPCSTR lpAccountName, PSID Sid, LPDWORD cbSid, LPSTR ReferencedDomainName, LPDWORD cchReferencedDomainName, PSID_NAME_USE peUse );

BOOL __stdcall LookupAccountNameW( LPCWSTR lpSystemName, LPCWSTR lpAccountName, PSID Sid, LPDWORD cbSid, LPWSTR ReferencedDomainName, LPDWORD cchReferencedDomainName, PSID_NAME_USE peUse );

BOOL __stdcall LookupAccountNameLocalA( LPCSTR lpAccountName, PSID Sid, LPDWORD cbSid, LPSTR ReferencedDomainName, LPDWORD cchReferencedDomainName, PSID_NAME_USE peUse );

BOOL __stdcall LookupAccountNameLocalW( LPCWSTR lpAccountName, PSID Sid, LPDWORD cbSid, LPWSTR ReferencedDomainName, LPDWORD cchReferencedDomainName, PSID_NAME_USE peUse );

BOOL __stdcall LookupPrivilegeValueA( LPCSTR lpSystemName, LPCSTR lpName, PLUID lpLuid );

BOOL __stdcall LookupPrivilegeValueW( LPCWSTR lpSystemName, LPCWSTR lpName, PLUID lpLuid );

BOOL __stdcall LookupPrivilegeNameA( LPCSTR lpSystemName, PLUID lpLuid, LPSTR lpName, LPDWORD cchName );

BOOL __stdcall LookupPrivilegeNameW( LPCWSTR lpSystemName, PLUID lpLuid, LPWSTR lpName, LPDWORD cchName );

BOOL __stdcall LookupPrivilegeDisplayNameA( LPCSTR lpSystemName, LPCSTR lpName, LPSTR lpDisplayName, LPDWORD cchDisplayName, LPDWORD lpLanguageId );

BOOL __stdcall LookupPrivilegeDisplayNameW( LPCWSTR lpSystemName, LPCWSTR lpName, LPWSTR lpDisplayName, LPDWORD cchDisplayName, LPDWORD lpLanguageId );

BOOL __stdcall AllocateLocallyUniqueId( PLUID Luid );

BOOL __stdcall BuildCommDCBA( LPCSTR lpDef, LPDCB lpDCB );

BOOL __stdcall BuildCommDCBW( LPCWSTR lpDef, LPDCB lpDCB );

BOOL __stdcall BuildCommDCBAndTimeoutsA( LPCSTR lpDef, LPDCB lpDCB, LPCOMMTIMEOUTS lpCommTimeouts );

BOOL __stdcall BuildCommDCBAndTimeoutsW( LPCWSTR lpDef, LPDCB lpDCB, LPCOMMTIMEOUTS lpCommTimeouts );

BOOL __stdcall CommConfigDialogA( LPCSTR lpszName, HWND hWnd, LPCOMMCONFIG lpCC );

BOOL __stdcall CommConfigDialogW( LPCWSTR lpszName, HWND hWnd, LPCOMMCONFIG lpCC );

BOOL __stdcall GetDefaultCommConfigA( LPCSTR lpszName, LPCOMMCONFIG lpCC, LPDWORD lpdwSize );

BOOL __stdcall GetDefaultCommConfigW( LPCWSTR lpszName, LPCOMMCONFIG lpCC, LPDWORD lpdwSize );

BOOL __stdcall SetDefaultCommConfigA( LPCSTR lpszName, LPCOMMCONFIG lpCC, DWORD dwSize );

BOOL __stdcall SetDefaultCommConfigW( LPCWSTR lpszName, LPCOMMCONFIG lpCC, DWORD dwSize );

BOOL __stdcall GetComputerNameA(LPSTR lpBuffer, LPDWORD nSize );

BOOL __stdcall GetComputerNameW(LPWSTR lpBuffer, LPDWORD nSize );

BOOL __stdcall SetComputerNameA(LPCSTR lpComputerName );

BOOL __stdcall SetComputerNameW(LPCWSTR lpComputerName );
typedef enum _COMPUTER_NAME_FORMAT {
ComputerNameNetBIOS, ComputerNameDnsHostname, ComputerNameDnsDomain, ComputerNameDnsFullyQualified, ComputerNamePhysicalNetBIOS, ComputerNamePhysicalDnsHostname, ComputerNamePhysicalDnsDomain, ComputerNamePhysicalDnsFullyQualified, ComputerNameMax } COMPUTER_NAME_FORMAT ;

BOOL __stdcall GetComputerNameExA(COMPUTER_NAME_FORMAT NameType, LPSTR lpBuffer, LPDWORD nSize );

BOOL __stdcall GetComputerNameExW(COMPUTER_NAME_FORMAT NameType, LPWSTR lpBuffer, LPDWORD nSize );

BOOL __stdcall SetComputerNameExA(COMPUTER_NAME_FORMAT NameType, LPCSTR lpBuffer );

BOOL __stdcall SetComputerNameExW(COMPUTER_NAME_FORMAT NameType, LPCWSTR lpBuffer );

BOOL __stdcall DnsHostnameToComputerNameA(LPCSTR Hostname, LPSTR ComputerName, LPDWORD nSize );

BOOL __stdcall DnsHostnameToComputerNameW(LPCWSTR Hostname, LPWSTR ComputerName, LPDWORD nSize );

BOOL __stdcall GetUserNameA(LPSTR lpBuffer, LPDWORD pcbBuffer );

BOOL __stdcall GetUserNameW(LPWSTR lpBuffer, LPDWORD pcbBuffer );

BOOL __stdcall LogonUserA(LPCSTR lpszUsername, LPCSTR lpszDomain, LPCSTR lpszPassword, DWORD dwLogonType, DWORD dwLogonProvider, PHANDLE phToken );

BOOL __stdcall LogonUserW(LPCWSTR lpszUsername, LPCWSTR lpszDomain, LPCWSTR lpszPassword, DWORD dwLogonType, DWORD dwLogonProvider, PHANDLE phToken );

BOOL __stdcall LogonUserExA(LPCSTR lpszUsername, LPCSTR lpszDomain, LPCSTR lpszPassword, DWORD dwLogonType, DWORD dwLogonProvider, PHANDLE phToken, PSID *ppLogonSid, PVOID *ppProfileBuffer, LPDWORD pdwProfileLength, PQUOTA_LIMITS pQuotaLimits );

BOOL __stdcall LogonUserExW(LPCWSTR lpszUsername, LPCWSTR lpszDomain, LPCWSTR lpszPassword, DWORD dwLogonType, DWORD dwLogonProvider, PHANDLE phToken, PSID *ppLogonSid, PVOID *ppProfileBuffer, LPDWORD pdwProfileLength, PQUOTA_LIMITS pQuotaLimits );

BOOL __stdcall ImpersonateLoggedOnUser( HANDLE hToken );

BOOL __stdcall CreateProcessAsUserA(HANDLE hToken, LPCSTR lpApplicationName, LPSTR lpCommandLine, LPSECURITY_ATTRIBUTES lpProcessAttributes, LPSECURITY_ATTRIBUTES lpThreadAttributes, BOOL bInheritHandles, DWORD dwCreationFlags, LPVOID lpEnvironment, LPCSTR lpCurrentDirectory, LPSTARTUPINFOA lpStartupInfo, LPPROCESS_INFORMATION lpProcessInformation );

BOOL __stdcall CreateProcessAsUserW(HANDLE hToken, LPCWSTR lpApplicationName, LPWSTR lpCommandLine, LPSECURITY_ATTRIBUTES lpProcessAttributes, LPSECURITY_ATTRIBUTES lpThreadAttributes, BOOL bInheritHandles, DWORD dwCreationFlags, LPVOID lpEnvironment, LPCWSTR lpCurrentDirectory, LPSTARTUPINFOW lpStartupInfo, LPPROCESS_INFORMATION lpProcessInformation );

BOOL __stdcall CreateProcessWithLogonW( LPCWSTR lpUsername, LPCWSTR lpDomain, LPCWSTR lpPassword, DWORD dwLogonFlags, LPCWSTR lpApplicationName, LPWSTR lpCommandLine, DWORD dwCreationFlags, LPVOID lpEnvironment, LPCWSTR lpCurrentDirectory, LPSTARTUPINFOW lpStartupInfo, LPPROCESS_INFORMATION lpProcessInformation );

BOOL __stdcall CreateProcessWithTokenW( HANDLE hToken, DWORD dwLogonFlags, LPCWSTR lpApplicationName, LPWSTR lpCommandLine, DWORD dwCreationFlags, LPVOID lpEnvironment, LPCWSTR lpCurrentDirectory, LPSTARTUPINFOW lpStartupInfo, LPPROCESS_INFORMATION lpProcessInformation );

BOOL __stdcall ImpersonateAnonymousToken( HANDLE ThreadHandle );

BOOL __stdcall DuplicateTokenEx( HANDLE hExistingToken, DWORD dwDesiredAccess, LPSECURITY_ATTRIBUTES lpTokenAttributes, SECURITY_IMPERSONATION_LEVEL ImpersonationLevel, TOKEN_TYPE TokenType, PHANDLE phNewToken);

BOOL __stdcall CreateRestrictedToken( HANDLE ExistingTokenHandle, DWORD Flags, DWORD DisableSidCount, PSID_AND_ATTRIBUTES SidsToDisable, DWORD DeletePrivilegeCount, PLUID_AND_ATTRIBUTES PrivilegesToDelete, DWORD RestrictedSidCount, PSID_AND_ATTRIBUTES SidsToRestrict, PHANDLE NewTokenHandle );

BOOL __stdcall IsTokenRestricted( HANDLE TokenHandle );

BOOL __stdcall IsTokenUntrusted( HANDLE TokenHandle );

BOOL __stdcall CheckTokenMembership( HANDLE TokenHandle, PSID SidToCheck, PBOOL IsMember );
typedef WAITORTIMERCALLBACKFUNC WAITORTIMERCALLBACK ;

BOOL __stdcall RegisterWaitForSingleObject( PHANDLE phNewWaitObject, HANDLE hObject, WAITORTIMERCALLBACK Callback, PVOID Context, ULONG dwMilliseconds, ULONG dwFlags );

HANDLE __stdcall RegisterWaitForSingleObjectEx( HANDLE hObject, WAITORTIMERCALLBACK Callback, PVOID Context, ULONG dwMilliseconds, ULONG dwFlags );

BOOL __stdcall UnregisterWait( HANDLE WaitHandle );

BOOL __stdcall UnregisterWaitEx( HANDLE WaitHandle, HANDLE CompletionEvent );

BOOL __stdcall QueueUserWorkItem( LPTHREAD_START_ROUTINE Function, PVOID Context, ULONG Flags );

BOOL __stdcall BindIoCompletionCallback(HANDLE FileHandle, LPOVERLAPPED_COMPLETION_ROUTINE Function, ULONG Flags );

HANDLE __stdcall CreateTimerQueue( void );

BOOL __stdcall CreateTimerQueueTimer( PHANDLE phNewTimer, HANDLE TimerQueue, WAITORTIMERCALLBACK Callback, PVOID Parameter, DWORD DueTime, DWORD Period, ULONG Flags ) ;

BOOL __stdcall ChangeTimerQueueTimer( HANDLE TimerQueue, HANDLE Timer, ULONG DueTime, ULONG Period );

BOOL __stdcall DeleteTimerQueueTimer( HANDLE TimerQueue, HANDLE Timer, HANDLE CompletionEvent );

BOOL __stdcall DeleteTimerQueueEx( HANDLE TimerQueue, HANDLE CompletionEvent );

HANDLE __stdcall SetTimerQueueTimer( HANDLE TimerQueue, WAITORTIMERCALLBACK Callback, PVOID Parameter, DWORD DueTime, DWORD Period, BOOL PreferIo );

BOOL __stdcall CancelTimerQueueTimer( HANDLE TimerQueue, HANDLE Timer );

BOOL __stdcall DeleteTimerQueue( HANDLE TimerQueue );
typedef void (__stdcall *PTP_WIN32_IO_CALLBACK)( PTP_CALLBACK_INSTANCE Instance, PVOID Context, PVOID Overlapped, ULONG IoResult, ULONG_PTR NumberOfBytesTransferred, PTP_IO Io );

PTP_POOL __stdcall CreateThreadpool( PVOID reserved );

void __stdcall SetThreadpoolThreadMaximum( PTP_POOL ptpp, DWORD cthrdMost );

BOOL __stdcall SetThreadpoolThreadMinimum( PTP_POOL ptpp, DWORD cthrdMic );

BOOL __stdcall SetThreadpoolStackInformation( PTP_POOL ptpp, PTP_POOL_STACK_INFORMATION ptpsi );

BOOL __stdcall QueryThreadpoolStackInformation( PTP_POOL ptpp, PTP_POOL_STACK_INFORMATION ptpsi );

void __stdcall CloseThreadpool( PTP_POOL ptpp );

PTP_CLEANUP_GROUP __stdcall CreateThreadpoolCleanupGroup( void );

void __stdcall CloseThreadpoolCleanupGroupMembers( PTP_CLEANUP_GROUP ptpcg, BOOL fCancelPendingCallbacks, PVOID pvCleanupContext );

void __stdcall CloseThreadpoolCleanupGroup( PTP_CLEANUP_GROUP ptpcg );
void __stdcall SetEventWhenCallbackReturns( PTP_CALLBACK_INSTANCE pci, HANDLE evt );

void __stdcall ReleaseSemaphoreWhenCallbackReturns( PTP_CALLBACK_INSTANCE pci, HANDLE sem, DWORD crel );

void __stdcall ReleaseMutexWhenCallbackReturns( PTP_CALLBACK_INSTANCE pci, HANDLE mut );

void __stdcall LeaveCriticalSectionWhenCallbackReturns( PTP_CALLBACK_INSTANCE pci, PCRITICAL_SECTION pcs );

void __stdcall FreeLibraryWhenCallbackReturns( PTP_CALLBACK_INSTANCE pci, HMODULE mod );

BOOL __stdcall CallbackMayRunLong( PTP_CALLBACK_INSTANCE pci );

void __stdcall DisassociateCurrentThreadFromCallback( PTP_CALLBACK_INSTANCE pci );

BOOL __stdcall TrySubmitThreadpoolCallback( PTP_SIMPLE_CALLBACK pfns, PVOID pv, PTP_CALLBACK_ENVIRON pcbe );

PTP_WORK __stdcall CreateThreadpoolWork( PTP_WORK_CALLBACK pfnwk, PVOID pv, PTP_CALLBACK_ENVIRON pcbe );

void __stdcall SubmitThreadpoolWork( PTP_WORK pwk );

void __stdcall WaitForThreadpoolWorkCallbacks( PTP_WORK pwk, BOOL fCancelPendingCallbacks );

void __stdcall CloseThreadpoolWork( PTP_WORK pwk );

PTP_TIMER __stdcall CreateThreadpoolTimer( PTP_TIMER_CALLBACK pfnti, PVOID pv, PTP_CALLBACK_ENVIRON pcbe );

void __stdcall SetThreadpoolTimer( PTP_TIMER pti, PFILETIME pftDueTime, DWORD msPeriod, DWORD msWindowLength );

BOOL __stdcall IsThreadpoolTimerSet( PTP_TIMER pti );

void __stdcall WaitForThreadpoolTimerCallbacks( PTP_TIMER pti, BOOL fCancelPendingCallbacks );

void __stdcall CloseThreadpoolTimer( PTP_TIMER pti );

PTP_WAIT __stdcall CreateThreadpoolWait( PTP_WAIT_CALLBACK pfnwa, PVOID pv, PTP_CALLBACK_ENVIRON pcbe );

void __stdcall SetThreadpoolWait( PTP_WAIT pwa, HANDLE h, PFILETIME pftTimeout );

void __stdcall WaitForThreadpoolWaitCallbacks( PTP_WAIT pwa, BOOL fCancelPendingCallbacks );

void __stdcall CloseThreadpoolWait( PTP_WAIT pwa );

PTP_IO __stdcall CreateThreadpoolIo( HANDLE fl, PTP_WIN32_IO_CALLBACK pfnio, PVOID pv, PTP_CALLBACK_ENVIRON pcbe );

void __stdcall StartThreadpoolIo( PTP_IO pio );

void __stdcall CancelThreadpoolIo( PTP_IO pio );

void __stdcall WaitForThreadpoolIoCallbacks( PTP_IO pio, BOOL fCancelPendingCallbacks );

void __stdcall CloseThreadpoolIo( PTP_IO pio );

HANDLE __stdcall CreatePrivateNamespaceA( LPSECURITY_ATTRIBUTES lpPrivateNamespaceAttributes, LPVOID lpBoundaryDescriptor, LPCSTR lpAliasPrefix );

HANDLE __stdcall CreatePrivateNamespaceW( LPSECURITY_ATTRIBUTES lpPrivateNamespaceAttributes, LPVOID lpBoundaryDescriptor, LPCWSTR lpAliasPrefix );

HANDLE __stdcall OpenPrivateNamespaceA( LPVOID lpBoundaryDescriptor, LPCSTR lpAliasPrefix );

HANDLE __stdcall OpenPrivateNamespaceW( LPVOID lpBoundaryDescriptor, LPCWSTR lpAliasPrefix );

BOOLEAN __stdcall ClosePrivateNamespace( HANDLE Handle, ULONG Flags );

HANDLE __stdcall CreateBoundaryDescriptorA( LPCSTR Name, ULONG Flags );

HANDLE __stdcall CreateBoundaryDescriptorW( LPCWSTR Name, ULONG Flags );

BOOL __stdcall AddSIDToBoundaryDescriptor( HANDLE * BoundaryDescriptor, PSID RequiredSid );

BOOL __stdcall AddIntegrityLabelToBoundaryDescriptor( HANDLE * BoundaryDescriptor, PSID IntegrityLabel );

void __stdcall DeleteBoundaryDescriptor( HANDLE BoundaryDescriptor );
typedef struct tagHW_PROFILE_INFOA {
<field name="dwDockInfo"><DWORD /></field>
<field name="szHwProfileGuid"><arr length="39"><CHAR /></arr></field>
<field name="szHwProfileName"><arr length="80"><CHAR /></arr></field>
} HW_PROFILE_INFOA, *LPHW_PROFILE_INFOA;
typedef struct tagHW_PROFILE_INFOW {
<field name="dwDockInfo"><DWORD /></field>
<field name="szHwProfileGuid"><arr length="39"><WCHAR /></arr></field>
<field name="szHwProfileName"><arr length="80"><WCHAR /></arr></field>
} HW_PROFILE_INFOW, *LPHW_PROFILE_INFOW;
<typedef name="HW_PROFILE_INFO"><HW_PROFILE_INFOA /></typedef>
<typedef name="LPHW_PROFILE_INFO"><LPHW_PROFILE_INFOA /></typedef>

BOOL __stdcall GetCurrentHwProfileA(LPHW_PROFILE_INFOA lpHwProfileInfo );

BOOL __stdcall GetCurrentHwProfileW(LPHW_PROFILE_INFOW lpHwProfileInfo );

BOOL __stdcall QueryPerformanceCounter( LARGE_INTEGER *lpPerformanceCount );

BOOL __stdcall QueryPerformanceFrequency( LARGE_INTEGER *lpFrequency );

BOOL __stdcall GetVersionExA( LPOSVERSIONINFOA lpVersionInformation );

BOOL __stdcall GetVersionExW( LPOSVERSIONINFOW lpVersionInformation );

BOOL __stdcall VerifyVersionInfoA( LPOSVERSIONINFOEXA lpVersionInformation, DWORD dwTypeMask, DWORDLONG dwlConditionMask );

BOOL __stdcall VerifyVersionInfoW( LPOSVERSIONINFOEXW lpVersionInformation, DWORD dwTypeMask, DWORDLONG dwlConditionMask );

BOOL __stdcall GetProductInfo( DWORD dwOSMajorVersion, DWORD dwOSMinorVersion, DWORD dwSpMajorVersion, DWORD dwSpMinorVersion, PDWORD pdwReturnedProductType );
__forceinline HRESULT HRESULT_FROM_WIN32(uint32 x) { return (HRESULT)(x) <= 0 ? (HRESULT)(x) : (HRESULT) (((x) & 0x0000FFFF) | (7 << 16) | 0x80000000);
typedef struct _SYSTEM_POWER_STATUS {
<field name="ACLineStatus"><BYTE /></field>
<field name="BatteryFlag"><BYTE /></field>
<field name="BatteryLifePercent"><BYTE /></field>
<field name="Reserved1"><BYTE /></field>
<field name="BatteryLifeTime"><DWORD /></field>
<field name="BatteryFullLifeTime"><DWORD /></field>
} SYSTEM_POWER_STATUS, *LPSYSTEM_POWER_STATUS;

BOOL __stdcall GetSystemPowerStatus( LPSYSTEM_POWER_STATUS lpSystemPowerStatus );

BOOL __stdcall SetSystemPowerState( BOOL fSuspend, BOOL fForce );

BOOL __stdcall AllocateUserPhysicalPages( HANDLE hProcess, PULONG_PTR NumberOfPages, PULONG_PTR PageArray );

BOOL __stdcall AllocateUserPhysicalPagesNuma( HANDLE hProcess, PULONG_PTR NumberOfPages, PULONG_PTR PageArray, DWORD nndPreferred );

BOOL __stdcall FreeUserPhysicalPages( HANDLE hProcess, PULONG_PTR NumberOfPages, PULONG_PTR PageArray );

BOOL __stdcall MapUserPhysicalPages( PVOID VirtualAddress, ULONG_PTR NumberOfPages, PULONG_PTR PageArray );

BOOL __stdcall MapUserPhysicalPagesScatter( PVOID *VirtualAddresses, ULONG_PTR NumberOfPages, PULONG_PTR PageArray );

HANDLE __stdcall CreateJobObjectA( LPSECURITY_ATTRIBUTES lpJobAttributes, LPCSTR lpName );

HANDLE __stdcall CreateJobObjectW( LPSECURITY_ATTRIBUTES lpJobAttributes, LPCWSTR lpName );

HANDLE __stdcall OpenJobObjectA( DWORD dwDesiredAccess, BOOL bInheritHandle, LPCSTR lpName );

HANDLE __stdcall OpenJobObjectW( DWORD dwDesiredAccess, BOOL bInheritHandle, LPCWSTR lpName );

BOOL __stdcall AssignProcessToJobObject( HANDLE hJob, HANDLE hProcess );

BOOL __stdcall TerminateJobObject( HANDLE hJob, UINT uExitCode );

BOOL __stdcall QueryInformationJobObject( HANDLE hJob, JOBOBJECTINFOCLASS JobObjectInformationClass, LPVOID lpJobObjectInformation, DWORD cbJobObjectInformationLength, LPDWORD lpReturnLength );

BOOL __stdcall SetInformationJobObject( HANDLE hJob, JOBOBJECTINFOCLASS JobObjectInformationClass, LPVOID lpJobObjectInformation, DWORD cbJobObjectInformationLength );

BOOL __stdcall IsProcessInJob(HANDLE ProcessHandle, HANDLE JobHandle, PBOOL Result );

BOOL __stdcall CreateJobSet(ULONG NumJob, PJOB_SET_ARRAY UserJobSet, ULONG Flags);

PVOID __stdcall AddVectoredExceptionHandler(ULONG First, PVECTORED_EXCEPTION_HANDLER Handler );

ULONG __stdcall RemoveVectoredExceptionHandler(PVOID Handle );

PVOID __stdcall AddVectoredContinueHandler(ULONG First, PVECTORED_EXCEPTION_HANDLER Handler );

ULONG __stdcall RemoveVectoredContinueHandler(PVOID Handle );

HANDLE __stdcall FindFirstVolumeA( LPSTR lpszVolumeName, DWORD cchBufferLength );

HANDLE __stdcall FindFirstVolumeW( LPWSTR lpszVolumeName, DWORD cchBufferLength );

BOOL __stdcall FindNextVolumeA( HANDLE hFindVolume, LPSTR lpszVolumeName, DWORD cchBufferLength );

BOOL __stdcall FindNextVolumeW( HANDLE hFindVolume, LPWSTR lpszVolumeName, DWORD cchBufferLength );

BOOL __stdcall FindVolumeClose( HANDLE hFindVolume );

HANDLE __stdcall FindFirstVolumeMountPointA( LPCSTR lpszRootPathName, LPSTR lpszVolumeMountPoint, DWORD cchBufferLength );

HANDLE __stdcall FindFirstVolumeMountPointW( LPCWSTR lpszRootPathName, LPWSTR lpszVolumeMountPoint, DWORD cchBufferLength );

BOOL __stdcall FindNextVolumeMountPointA( HANDLE hFindVolumeMountPoint, LPSTR lpszVolumeMountPoint, DWORD cchBufferLength );

BOOL __stdcall FindNextVolumeMountPointW( HANDLE hFindVolumeMountPoint, LPWSTR lpszVolumeMountPoint, DWORD cchBufferLength );

BOOL __stdcall FindVolumeMountPointClose( HANDLE hFindVolumeMountPoint );

BOOL __stdcall SetVolumeMountPointA( LPCSTR lpszVolumeMountPoint, LPCSTR lpszVolumeName );

BOOL __stdcall SetVolumeMountPointW( LPCWSTR lpszVolumeMountPoint, LPCWSTR lpszVolumeName );

BOOL __stdcall DeleteVolumeMountPointA( LPCSTR lpszVolumeMountPoint );

BOOL __stdcall DeleteVolumeMountPointW( LPCWSTR lpszVolumeMountPoint );

BOOL __stdcall GetVolumeNameForVolumeMountPointA( LPCSTR lpszVolumeMountPoint, LPSTR lpszVolumeName, DWORD cchBufferLength );

BOOL __stdcall GetVolumeNameForVolumeMountPointW( LPCWSTR lpszVolumeMountPoint, LPWSTR lpszVolumeName, DWORD cchBufferLength );

BOOL __stdcall GetVolumePathNameA( LPCSTR lpszFileName, LPSTR lpszVolumePathName, DWORD cchBufferLength );

BOOL __stdcall GetVolumePathNameW( LPCWSTR lpszFileName, LPWSTR lpszVolumePathName, DWORD cchBufferLength );

BOOL __stdcall GetVolumePathNamesForVolumeNameA( LPCSTR lpszVolumeName, LPCH lpszVolumePathNames, DWORD cchBufferLength, PDWORD lpcchReturnLength );

BOOL __stdcall GetVolumePathNamesForVolumeNameW( LPCWSTR lpszVolumeName, LPWCH lpszVolumePathNames, DWORD cchBufferLength, PDWORD lpcchReturnLength );
typedef struct tagACTCTXA {
<field name="cbSize"><ULONG /></field>
<field name="dwFlags"><DWORD /></field>
<field name="lpSource"><LPCSTR /></field>
<field name="wProcessorArchitecture"><USHORT /></field>
<field name="wLangId"><LANGID /></field>
<field name="lpAssemblyDirectory"><LPCSTR /></field>
<field name="lpResourceName"><LPCSTR /></field>
<field name="lpApplicationName"><LPCSTR /></field>
<field name="hModule"><HMODULE /></field>
} ACTCTXA, *PACTCTXA;
typedef struct tagACTCTXW {
<field name="cbSize"><ULONG /></field>
<field name="dwFlags"><DWORD /></field>
<field name="lpSource"><LPCWSTR /></field>
<field name="wProcessorArchitecture"><USHORT /></field>
<field name="wLangId"><LANGID /></field>
<field name="lpAssemblyDirectory"><LPCWSTR /></field>
<field name="lpResourceName"><LPCWSTR /></field>
<field name="lpApplicationName"><LPCWSTR /></field>
<field name="hModule"><HMODULE /></field>
} ACTCTXW, *PACTCTXW;
<typedef name="ACTCTX"><ACTCTXA /></typedef>
<typedef name="PACTCTX"><PACTCTXA /></typedef>
<typedef name="PCACTCTXA"><ptr const="true"><ACTCTXA /></ptr></typedef>
<typedef name="PCACTCTXW"><ptr const="true"><ACTCTXW /></ptr></typedef>
<typedef name="PCACTCTX"><PCACTCTXA /></typedef>

HANDLE __stdcall CreateActCtxA( PCACTCTXA pActCtx );

HANDLE __stdcall CreateActCtxW( PCACTCTXW pActCtx );

void __stdcall AddRefActCtx( HANDLE hActCtx );

void __stdcall ReleaseActCtx( HANDLE hActCtx );

BOOL __stdcall ZombifyActCtx( HANDLE hActCtx );

BOOL __stdcall ActivateActCtx( HANDLE hActCtx, ULONG_PTR *lpCookie );

BOOL __stdcall DeactivateActCtx( DWORD dwFlags, ULONG_PTR ulCookie );

BOOL __stdcall GetCurrentActCtx( HANDLE *lphActCtx);
typedef struct tagACTCTX_SECTION_KEYED_DATA_2600 {
<field name="cbSize"><ULONG /></field>
<field name="ulDataFormatVersion"><ULONG /></field>
<field name="lpData"><PVOID /></field>
<field name="ulLength"><ULONG /></field>
<field name="lpSectionGlobalData"><PVOID /></field>
<field name="ulSectionGlobalDataLength"><ULONG /></field>
<field name="lpSectionBase"><PVOID /></field>
<field name="ulSectionTotalLength"><ULONG /></field>
<field name="hActCtx"><HANDLE /></field>
<field name="ulAssemblyRosterIndex"><ULONG /></field>
} ACTCTX_SECTION_KEYED_DATA_2600, *PACTCTX_SECTION_KEYED_DATA_2600;
<typedef name="PCACTCTX_SECTION_KEYED_DATA_2600"><ptr const="true"><ACTCTX_SECTION_KEYED_DATA_2600 /></ptr></typedef>
typedef struct tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA {
<field name="lpInformation"><PVOID /></field>
<field name="lpSectionBase"><PVOID /></field>
<field name="ulSectionLength"><ULONG /></field>
<field name="lpSectionGlobalDataBase"><PVOID /></field>
<field name="ulSectionGlobalDataLength"><ULONG /></field>
} ACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA, *PACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA;
<typedef name="PCACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA"><ptr const="true"><ACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA /></ptr></typedef>
typedef struct tagACTCTX_SECTION_KEYED_DATA {
<field name="cbSize"><ULONG /></field>
<field name="ulDataFormatVersion"><ULONG /></field>
<field name="lpData"><PVOID /></field>
<field name="ulLength"><ULONG /></field>
<field name="lpSectionGlobalData"><PVOID /></field>
<field name="ulSectionGlobalDataLength"><ULONG /></field>
<field name="lpSectionBase"><PVOID /></field>
<field name="ulSectionTotalLength"><ULONG /></field>
<field name="hActCtx"><HANDLE /></field>
<field name="ulAssemblyRosterIndex"><ULONG /></field>
<field name="ulFlags"><ULONG /></field>
<field name="AssemblyMetadata"><ACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA /></field>
} ACTCTX_SECTION_KEYED_DATA, *PACTCTX_SECTION_KEYED_DATA;
<typedef name="PCACTCTX_SECTION_KEYED_DATA"><ptr const="true"><ACTCTX_SECTION_KEYED_DATA /></ptr></typedef>

BOOL __stdcall FindActCtxSectionStringA( DWORD dwFlags, const GUID *lpExtensionGuid, ULONG ulSectionId, LPCSTR lpStringToFind, PACTCTX_SECTION_KEYED_DATA ReturnedData );

BOOL __stdcall FindActCtxSectionStringW( DWORD dwFlags, const GUID *lpExtensionGuid, ULONG ulSectionId, LPCWSTR lpStringToFind, PACTCTX_SECTION_KEYED_DATA ReturnedData );

BOOL __stdcall FindActCtxSectionGuid( DWORD dwFlags, const GUID *lpExtensionGuid, ULONG ulSectionId, const GUID *lpGuidToFind, PACTCTX_SECTION_KEYED_DATA ReturnedData );
typedef struct _ACTIVATION_CONTEXT_BASIC_INFORMATION {
<field name="hActCtx"><HANDLE /></field>
<field name="dwFlags"><DWORD /></field>
} ACTIVATION_CONTEXT_BASIC_INFORMATION, *PACTIVATION_CONTEXT_BASIC_INFORMATION;
typedef const struct _ACTIVATION_CONTEXT_BASIC_INFORMATION *PCACTIVATION_CONTEXT_BASIC_INFORMATION;

BOOL __stdcall QueryActCtxW( DWORD dwFlags, HANDLE hActCtx, PVOID pvSubInstance, ULONG ulInfoClass, PVOID pvBuffer, SIZE_T cbBuffer, SIZE_T *pcbWrittenOrRequired );
typedef BOOL (__stdcall * PQUERYACTCTXW_FUNC)( DWORD dwFlags, HANDLE hActCtx, PVOID pvSubInstance, ULONG ulInfoClass, PVOID pvBuffer, SIZE_T cbBuffer, SIZE_T *pcbWrittenOrRequired );

BOOL __stdcall ProcessIdToSessionId( DWORD dwProcessId, DWORD *pSessionId );

DWORD __stdcall WTSGetActiveConsoleSessionId( void );

BOOL __stdcall IsWow64Process( HANDLE hProcess, PBOOL Wow64Process );

BOOL __stdcall GetLogicalProcessorInformation( PSYSTEM_LOGICAL_PROCESSOR_INFORMATION Buffer, PDWORD ReturnedLength );

BOOL __stdcall GetLogicalProcessorInformationEx( LOGICAL_PROCESSOR_RELATIONSHIP RelationshipType, PSYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX Buffer, PDWORD ReturnedLength );

WORD __stdcall GetActiveProcessorGroupCount( void );

WORD __stdcall GetMaximumProcessorGroupCount( void );

DWORD __stdcall GetActiveProcessorCount( WORD GroupNumber );

DWORD __stdcall GetMaximumProcessorCount( WORD GroupNumber );

BOOL __stdcall GetNumaHighestNodeNumber( PULONG HighestNodeNumber );

BOOL __stdcall GetNumaProcessorNode( UCHAR Processor, PUCHAR NodeNumber );

BOOL __stdcall GetNumaNodeNumberFromHandle( HANDLE hFile, PUSHORT NodeNumber );

BOOL __stdcall GetNumaProcessorNodeEx( PPROCESSOR_NUMBER Processor, PUSHORT NodeNumber );

BOOL __stdcall GetNumaNodeProcessorMask( UCHAR Node, PULONGLONG ProcessorMask );

BOOL __stdcall GetNumaNodeProcessorMaskEx( USHORT Node, PGROUP_AFFINITY ProcessorMask );

BOOL __stdcall GetNumaAvailableMemoryNode( UCHAR Node, PULONGLONG AvailableBytes );

BOOL __stdcall GetNumaAvailableMemoryNodeEx( USHORT Node, PULONGLONG AvailableBytes );

BOOL __stdcall GetNumaProximityNode( ULONG ProximityId, PUCHAR NodeNumber );

BOOL __stdcall GetNumaProximityNodeEx( ULONG ProximityId, PUSHORT NodeNumber );
typedef DWORD (__stdcall *APPLICATION_RECOVERY_CALLBACK)(PVOID pvParameter);

HRESULT __stdcall RegisterApplicationRecoveryCallback( APPLICATION_RECOVERY_CALLBACK pRecoveyCallback, PVOID pvParameter, DWORD dwPingInterval, DWORD dwFlags );

HRESULT __stdcall UnregisterApplicationRecoveryCallback();

HRESULT __stdcall RegisterApplicationRestart( PCWSTR pwzCommandline, DWORD dwFlags );

HRESULT __stdcall UnregisterApplicationRestart();

HRESULT __stdcall GetApplicationRecoveryCallback( HANDLE hProcess, APPLICATION_RECOVERY_CALLBACK* pRecoveryCallback, PVOID* ppvParameter, PDWORD pdwPingInterval, PDWORD pdwFlags );

HRESULT __stdcall GetApplicationRestartSettings( HANDLE hProcess, PWSTR pwzCommandline, PDWORD pcchSize, PDWORD pdwFlags );

HRESULT __stdcall ApplicationRecoveryInProgress( PBOOL pbCancelled );

void __stdcall ApplicationRecoveryFinished( BOOL bSuccess );
typedef enum _FILE_INFO_BY_HANDLE_CLASS {
FileBasicInfo, FileStandardInfo, FileNameInfo, FileRenameInfo, FileDispositionInfo, FileAllocationInfo, FileEndOfFileInfo, FileStreamInfo, FileCompressionInfo, FileAttributeTagInfo, FileIdBothDirectoryInfo, FileIdBothDirectoryRestartInfo, FileIoPriorityHintInfo, FileRemoteProtocolInfo, MaximumFileInfoByHandleClass } FILE_INFO_BY_HANDLE_CLASS, *PFILE_INFO_BY_HANDLE_CLASS;
typedef struct _FILE_BASIC_INFO {
<field name="CreationTime"><LARGE_INTEGER /></field>
<field name="LastAccessTime"><LARGE_INTEGER /></field>
<field name="LastWriteTime"><LARGE_INTEGER /></field>
<field name="ChangeTime"><LARGE_INTEGER /></field>
<field name="FileAttributes"><DWORD /></field>
} FILE_BASIC_INFO, *PFILE_BASIC_INFO;
typedef struct _FILE_STANDARD_INFO {
<field name="AllocationSize"><LARGE_INTEGER /></field>
<field name="EndOfFile"><LARGE_INTEGER /></field>
<field name="NumberOfLinks"><DWORD /></field>
<field name="DeletePending"><BOOLEAN /></field>
<field name="Directory"><BOOLEAN /></field>
} FILE_STANDARD_INFO, *PFILE_STANDARD_INFO;
typedef struct _FILE_NAME_INFO {
<field name="FileNameLength"><DWORD /></field>
<field name="FileName"><arr length="1"><WCHAR /></arr></field>
} FILE_NAME_INFO, *PFILE_NAME_INFO;
typedef struct _FILE_RENAME_INFO {
<field name="ReplaceIfExists"><BOOLEAN /></field>
<field name="RootDirectory"><HANDLE /></field>
<field name="FileNameLength"><DWORD /></field>
<field name="FileName"><arr length="1"><WCHAR /></arr></field>
} FILE_RENAME_INFO, *PFILE_RENAME_INFO;
typedef struct _FILE_ALLOCATION_INFO {
<field name="AllocationSize"><LARGE_INTEGER /></field>
} FILE_ALLOCATION_INFO, *PFILE_ALLOCATION_INFO;
typedef struct _FILE_END_OF_FILE_INFO {
<field name="EndOfFile"><LARGE_INTEGER /></field>
} FILE_END_OF_FILE_INFO, *PFILE_END_OF_FILE_INFO;
typedef struct _FILE_STREAM_INFO {
<field name="NextEntryOffset"><DWORD /></field>
<field name="StreamNameLength"><DWORD /></field>
<field name="StreamSize"><LARGE_INTEGER /></field>
<field name="StreamAllocationSize"><LARGE_INTEGER /></field>
<field name="StreamName"><arr length="1"><WCHAR /></arr></field>
} FILE_STREAM_INFO, *PFILE_STREAM_INFO;
typedef struct _FILE_COMPRESSION_INFO {
<field name="CompressedFileSize"><LARGE_INTEGER /></field>
<field name="CompressionFormat"><WORD /></field>
<field name="CompressionUnitShift"><UCHAR /></field>
<field name="ChunkShift"><UCHAR /></field>
<field name="ClusterShift"><UCHAR /></field>
<field name="Reserved"><arr length="3"><UCHAR /></arr></field>
} FILE_COMPRESSION_INFO, *PFILE_COMPRESSION_INFO;
typedef struct _FILE_ATTRIBUTE_TAG_INFO {
<field name="FileAttributes"><DWORD /></field>
<field name="ReparseTag"><DWORD /></field>
} FILE_ATTRIBUTE_TAG_INFO, *PFILE_ATTRIBUTE_TAG_INFO;
typedef struct _FILE_DISPOSITION_INFO {
<field name="DeleteFileA"><BOOLEAN /></field>
} FILE_DISPOSITION_INFO, *PFILE_DISPOSITION_INFO;
typedef struct _FILE_ID_BOTH_DIR_INFO {
<field name="NextEntryOffset"><DWORD /></field>
<field name="FileIndex"><DWORD /></field>
<field name="CreationTime"><LARGE_INTEGER /></field>
<field name="LastAccessTime"><LARGE_INTEGER /></field>
<field name="LastWriteTime"><LARGE_INTEGER /></field>
<field name="ChangeTime"><LARGE_INTEGER /></field>
<field name="EndOfFile"><LARGE_INTEGER /></field>
<field name="AllocationSize"><LARGE_INTEGER /></field>
<field name="FileAttributes"><DWORD /></field>
<field name="FileNameLength"><DWORD /></field>
<field name="EaSize"><DWORD /></field>
<field name="ShortNameLength"><CCHAR /></field>
<field name="ShortName"><arr length="12"><WCHAR /></arr></field>
<field name="FileId"><LARGE_INTEGER /></field>
<field name="FileName"><arr length="1"><WCHAR /></arr></field>
} FILE_ID_BOTH_DIR_INFO, *PFILE_ID_BOTH_DIR_INFO;
typedef enum _PRIORITY_HINT {
IoPriorityHintVeryLow = 0, IoPriorityHintLow, IoPriorityHintNormal, MaximumIoPriorityHintType } PRIORITY_HINT;
typedef struct _FILE_IO_PRIORITY_HINT_INFO {
<field name="PriorityHint"><PRIORITY_HINT /></field>
} FILE_IO_PRIORITY_HINT_INFO, *PFILE_IO_PRIORITY_HINT_INFO;
typedef struct _FILE_REMOTE_PROTOCOL_INFO {
<field name="StructureVersion"><USHORT /></field>
<field name="StructureSize"><USHORT /></field>
<field name="Protocol"><DWORD /></field>
<field name="ProtocolMajorVersion"><USHORT /></field>
<field name="ProtocolMinorVersion"><USHORT /></field>
<field name="ProtocolRevision"><USHORT /></field>
<field name="Reserved"><USHORT /></field>
<field name="Flags"><DWORD /></field>
struct {
<field name="Reserved"><arr length="8"><DWORD /></arr></field>
} GenericReserved;
struct {
<field name="Reserved"><arr length="16"><DWORD /></arr></field>
} ProtocolSpecificReserved;
} FILE_REMOTE_PROTOCOL_INFO, *PFILE_REMOTE_PROTOCOL_INFO;

BOOL __stdcall SetFileInformationByHandle( HANDLE hFile, FILE_INFO_BY_HANDLE_CLASS FileInformationClass, LPVOID lpFileInformation, DWORD dwBufferSize );

BOOL __stdcall GetFileInformationByHandleEx( HANDLE hFile, FILE_INFO_BY_HANDLE_CLASS FileInformationClass, LPVOID lpFileInformation, DWORD dwBufferSize );
typedef enum _FILE_ID_TYPE {
FileIdType, ObjectIdType, MaximumFileIdType } FILE_ID_TYPE, *PFILE_ID_TYPE;
typedef struct FILE_ID_DESCRIPTOR {
<field name="dwSize"><DWORD /></field>
<field name="Type"><FILE_ID_TYPE /></field>
union {
<field name="FileId"><LARGE_INTEGER /></field>
<field name="ObjectId"><GUID /></field>
} ;
} FILE_ID_DESCRIPTOR, *LPFILE_ID_DESCRIPTOR;

HANDLE __stdcall OpenFileById(HANDLE hVolumeHint, LPFILE_ID_DESCRIPTOR lpFileId, DWORD dwDesiredAccess, DWORD dwShareMode, LPSECURITY_ATTRIBUTES lpSecurityAttributes, DWORD dwFlagsAndAttributes );

BOOLEAN __stdcall CreateSymbolicLinkA(LPCSTR lpSymlinkFileName, LPCSTR lpTargetFileName, DWORD dwFlags );

BOOLEAN __stdcall CreateSymbolicLinkW(LPCWSTR lpSymlinkFileName, LPCWSTR lpTargetFileName, DWORD dwFlags );

BOOLEAN __stdcall CreateSymbolicLinkTransactedA(LPCSTR lpSymlinkFileName, LPCSTR lpTargetFileName, DWORD dwFlags, HANDLE hTransaction );

BOOLEAN __stdcall CreateSymbolicLinkTransactedW(LPCWSTR lpSymlinkFileName, LPCWSTR lpTargetFileName, DWORD dwFlags, HANDLE hTransaction );

DWORD __stdcall GetFinalPathNameByHandleA(HANDLE hFile, LPSTR lpszFilePath, DWORD cchFilePath, DWORD dwFlags );

DWORD __stdcall GetFinalPathNameByHandleW(HANDLE hFile, LPWSTR lpszFilePath, DWORD cchFilePath, DWORD dwFlags );

BOOL __stdcall QueryActCtxSettingsW( DWORD dwFlags, HANDLE hActCtx, PCWSTR settingsNameSpace, PCWSTR settingName, PWSTR pvBuffer, SIZE_T dwBuffer, SIZE_T *pdwWrittenOrRequired );

BOOL __stdcall ReplacePartitionUnit(PWSTR TargetPartition, PWSTR SparePartition, ULONG Flags );

BOOL __stdcall AddSecureMemoryCacheCallback( PSECURE_MEMORY_CACHE_CALLBACK pfnCallBack );

BOOL __stdcall RemoveSecureMemoryCacheCallback( PSECURE_MEMORY_CACHE_CALLBACK pfnCallBack );

BOOL __stdcall CopyExtendedContext( PCONTEXT_EX Destination, DWORD ContextFlags, PCONTEXT_EX Source );

BOOL __stdcall InitializeExtendedContext( PVOID Context, DWORD ContextFlags, PCONTEXT_EX* ContextEx );

DWORD64 __stdcall GetEnabledExtendedFeatures( DWORD64 FeatureMask );

BOOL __stdcall GetExtendedContextLength( DWORD ContextFlags, PDWORD ContextLength );

DWORD64 __stdcall GetExtendedFeaturesMask( PCONTEXT_EX ContextEx );

PVOID __stdcall LocateExtendedFeature( PCONTEXT_EX ContextEx, DWORD FeatureId, PDWORD Length );

PCONTEXT __stdcall LocateLegacyContext( PCONTEXT_EX ContextEx, PDWORD Length );

void __stdcall SetExtendedFeaturesMask( PCONTEXT_EX ContextEx, DWORD64 FeatureMask );

DWORD __stdcall EnableThreadProfiling( HANDLE ThreadHandle, DWORD Flags, DWORD64 HardwareCounters, HANDLE *PerformanceDataHandle );

DWORD __stdcall DisableThreadProfiling( HANDLE PerformanceDataHandle );

DWORD __stdcall QueryThreadProfiling( HANDLE ThreadHandle, PBOOLEAN Enabled );

DWORD __stdcall ReadThreadProfilingData( HANDLE PerformanceDataHandle, DWORD Flags, PPERFORMANCE_DATA PerformanceData );
typedef struct _DRAWPATRECT {
<field name="ptPosition"><POINT /></field>
<field name="ptSize"><POINT /></field>
<field name="wStyle"><WORD /></field>
<field name="wPattern"><WORD /></field>
} DRAWPATRECT, *PDRAWPATRECT;
typedef struct _PSINJECTDATA {
<field name="DataBytes"><DWORD /></field>
<field name="InjectionPoint"><WORD /></field>
<field name="PageNumber"><WORD /></field>
} PSINJECTDATA, *PPSINJECTDATA;
typedef struct _PSFEATURE_OUTPUT {
<field name="bPageIndependent"><BOOL /></field>
<field name="bSetPageDevice"><BOOL /></field>
} PSFEATURE_OUTPUT, *PPSFEATURE_OUTPUT;
typedef struct _PSFEATURE_CUSTPAPER {
<field name="lOrientation"><LONG /></field>
<field name="lWidth"><LONG /></field>
<field name="lHeight"><LONG /></field>
<field name="lWidthOffset"><LONG /></field>
<field name="lHeightOffset"><LONG /></field>
} PSFEATURE_CUSTPAPER, *PPSFEATURE_CUSTPAPER;
typedef struct tagXFORM {
<field name="eM11"><FLOAT /></field>
<field name="eM12"><FLOAT /></field>
<field name="eM21"><FLOAT /></field>
<field name="eM22"><FLOAT /></field>
<field name="eDx"><FLOAT /></field>
<field name="eDy"><FLOAT /></field>
} XFORM, *PXFORM, *LPXFORM;
typedef struct tagBITMAP {
<field name="bmType"><LONG /></field>
<field name="bmWidth"><LONG /></field>
<field name="bmHeight"><LONG /></field>
<field name="bmWidthBytes"><LONG /></field>
<field name="bmPlanes"><WORD /></field>
<field name="bmBitsPixel"><WORD /></field>
<field name="bmBits"><LPVOID /></field>
} BITMAP, *PBITMAP, *NPBITMAP, *LPBITMAP;
typedef struct tagRGBTRIPLE {
<field name="rgbtBlue"><BYTE /></field>
<field name="rgbtGreen"><BYTE /></field>
<field name="rgbtRed"><BYTE /></field>
} RGBTRIPLE, *PRGBTRIPLE, *NPRGBTRIPLE, *LPRGBTRIPLE;
typedef struct tagRGBQUAD {
<field name="rgbBlue"><BYTE /></field>
<field name="rgbGreen"><BYTE /></field>
<field name="rgbRed"><BYTE /></field>
<field name="rgbReserved"><BYTE /></field>
} RGBQUAD;
<typedef name="LPRGBQUAD"><ptr><RGBQUAD /></ptr></typedef>
<typedef name="LCSCSTYPE"><LONG /></typedef>
<typedef name="LCSGAMUTMATCH"><LONG /></typedef>
<typedef name="FXPT16DOT16"><long /></typedef>
<typedef name="LPFXPT16DOT16"><ptr><long /></ptr></typedef>
<typedef name="FXPT2DOT30"><long /></typedef>
<typedef name="LPFXPT2DOT30"><ptr><long /></ptr></typedef>
typedef struct tagCIEXYZ {
<field name="ciexyzX"><FXPT2DOT30 /></field>
<field name="ciexyzY"><FXPT2DOT30 /></field>
<field name="ciexyzZ"><FXPT2DOT30 /></field>
} CIEXYZ;
<typedef name="LPCIEXYZ"><ptr><CIEXYZ /></ptr></typedef>
typedef struct tagICEXYZTRIPLE {
<field name="ciexyzRed"><CIEXYZ /></field>
<field name="ciexyzGreen"><CIEXYZ /></field>
<field name="ciexyzBlue"><CIEXYZ /></field>
} CIEXYZTRIPLE;
<typedef name="LPCIEXYZTRIPLE"><ptr><CIEXYZTRIPLE /></ptr></typedef>
typedef struct tagLOGCOLORSPACEA {
<field name="lcsSignature"><DWORD /></field>
<field name="lcsVersion"><DWORD /></field>
<field name="lcsSize"><DWORD /></field>
<field name="lcsCSType"><LCSCSTYPE /></field>
<field name="lcsIntent"><LCSGAMUTMATCH /></field>
<field name="lcsEndpoints"><CIEXYZTRIPLE /></field>
<field name="lcsGammaRed"><DWORD /></field>
<field name="lcsGammaGreen"><DWORD /></field>
<field name="lcsGammaBlue"><DWORD /></field>
<field name="lcsFilename"><arr length="260"><CHAR /></arr></field>
} LOGCOLORSPACEA, *LPLOGCOLORSPACEA;
typedef struct tagLOGCOLORSPACEW {
<field name="lcsSignature"><DWORD /></field>
<field name="lcsVersion"><DWORD /></field>
<field name="lcsSize"><DWORD /></field>
<field name="lcsCSType"><LCSCSTYPE /></field>
<field name="lcsIntent"><LCSGAMUTMATCH /></field>
<field name="lcsEndpoints"><CIEXYZTRIPLE /></field>
<field name="lcsGammaRed"><DWORD /></field>
<field name="lcsGammaGreen"><DWORD /></field>
<field name="lcsGammaBlue"><DWORD /></field>
<field name="lcsFilename"><arr length="260"><WCHAR /></arr></field>
} LOGCOLORSPACEW, *LPLOGCOLORSPACEW;
<typedef name="LOGCOLORSPACE"><LOGCOLORSPACEA /></typedef>
<typedef name="LPLOGCOLORSPACE"><LPLOGCOLORSPACEA /></typedef>
typedef struct tagBITMAPCOREHEADER {
<field name="bcSize"><DWORD /></field>
<field name="bcWidth"><WORD /></field>
<field name="bcHeight"><WORD /></field>
<field name="bcPlanes"><WORD /></field>
<field name="bcBitCount"><WORD /></field>
} BITMAPCOREHEADER, *LPBITMAPCOREHEADER, *PBITMAPCOREHEADER;
typedef struct tagBITMAPINFOHEADER{
<field name="biSize"><DWORD /></field>
<field name="biWidth"><LONG /></field>
<field name="biHeight"><LONG /></field>
<field name="biPlanes"><WORD /></field>
<field name="biBitCount"><WORD /></field>
<field name="biCompression"><DWORD /></field>
<field name="biSizeImage"><DWORD /></field>
<field name="biXPelsPerMeter"><LONG /></field>
<field name="biYPelsPerMeter"><LONG /></field>
<field name="biClrUsed"><DWORD /></field>
<field name="biClrImportant"><DWORD /></field>
} BITMAPINFOHEADER, *LPBITMAPINFOHEADER, *PBITMAPINFOHEADER;
typedef struct {
<field name="bV4Size"><DWORD /></field>
<field name="bV4Width"><LONG /></field>
<field name="bV4Height"><LONG /></field>
<field name="bV4Planes"><WORD /></field>
<field name="bV4BitCount"><WORD /></field>
<field name="bV4V4Compression"><DWORD /></field>
<field name="bV4SizeImage"><DWORD /></field>
<field name="bV4XPelsPerMeter"><LONG /></field>
<field name="bV4YPelsPerMeter"><LONG /></field>
<field name="bV4ClrUsed"><DWORD /></field>
<field name="bV4ClrImportant"><DWORD /></field>
<field name="bV4RedMask"><DWORD /></field>
<field name="bV4GreenMask"><DWORD /></field>
<field name="bV4BlueMask"><DWORD /></field>
<field name="bV4AlphaMask"><DWORD /></field>
<field name="bV4CSType"><DWORD /></field>
<field name="bV4Endpoints"><CIEXYZTRIPLE /></field>
<field name="bV4GammaRed"><DWORD /></field>
<field name="bV4GammaGreen"><DWORD /></field>
<field name="bV4GammaBlue"><DWORD /></field>
} BITMAPV4HEADER, *LPBITMAPV4HEADER, *PBITMAPV4HEADER;
typedef struct {
<field name="bV5Size"><DWORD /></field>
<field name="bV5Width"><LONG /></field>
<field name="bV5Height"><LONG /></field>
<field name="bV5Planes"><WORD /></field>
<field name="bV5BitCount"><WORD /></field>
<field name="bV5Compression"><DWORD /></field>
<field name="bV5SizeImage"><DWORD /></field>
<field name="bV5XPelsPerMeter"><LONG /></field>
<field name="bV5YPelsPerMeter"><LONG /></field>
<field name="bV5ClrUsed"><DWORD /></field>
<field name="bV5ClrImportant"><DWORD /></field>
<field name="bV5RedMask"><DWORD /></field>
<field name="bV5GreenMask"><DWORD /></field>
<field name="bV5BlueMask"><DWORD /></field>
<field name="bV5AlphaMask"><DWORD /></field>
<field name="bV5CSType"><DWORD /></field>
<field name="bV5Endpoints"><CIEXYZTRIPLE /></field>
<field name="bV5GammaRed"><DWORD /></field>
<field name="bV5GammaGreen"><DWORD /></field>
<field name="bV5GammaBlue"><DWORD /></field>
<field name="bV5Intent"><DWORD /></field>
<field name="bV5ProfileData"><DWORD /></field>
<field name="bV5ProfileSize"><DWORD /></field>
<field name="bV5Reserved"><DWORD /></field>
} BITMAPV5HEADER, *LPBITMAPV5HEADER, *PBITMAPV5HEADER;
typedef struct tagBITMAPINFO {
<field name="bmiHeader"><BITMAPINFOHEADER /></field>
<field name="bmiColors"><arr length="1"><RGBQUAD /></arr></field>
} BITMAPINFO, *LPBITMAPINFO, *PBITMAPINFO;
typedef struct tagBITMAPCOREINFO {
<field name="bmciHeader"><BITMAPCOREHEADER /></field>
<field name="bmciColors"><arr length="1"><RGBTRIPLE /></arr></field>
} BITMAPCOREINFO, *LPBITMAPCOREINFO, *PBITMAPCOREINFO;
typedef struct tagBITMAPFILEHEADER {
<field name="bfType"><WORD /></field>
<field name="bfSize"><DWORD /></field>
<field name="bfReserved1"><WORD /></field>
<field name="bfReserved2"><WORD /></field>
<field name="bfOffBits"><DWORD /></field>
} BITMAPFILEHEADER, *LPBITMAPFILEHEADER, *PBITMAPFILEHEADER;
typedef struct tagFONTSIGNATURE {
<field name="fsUsb"><arr length="4"><DWORD /></arr></field>
<field name="fsCsb"><arr length="2"><DWORD /></arr></field>
} FONTSIGNATURE, *PFONTSIGNATURE, *LPFONTSIGNATURE;
typedef struct tagCHARSETINFO {
<field name="ciCharset"><UINT /></field>
<field name="ciACP"><UINT /></field>
<field name="fs"><FONTSIGNATURE /></field>
} CHARSETINFO, *PCHARSETINFO, *NPCHARSETINFO, *LPCHARSETINFO;
typedef struct tagLOCALESIGNATURE {
<field name="lsUsb"><arr length="4"><DWORD /></arr></field>
<field name="lsCsbDefault"><arr length="2"><DWORD /></arr></field>
<field name="lsCsbSupported"><arr length="2"><DWORD /></arr></field>
} LOCALESIGNATURE, *PLOCALESIGNATURE, *LPLOCALESIGNATURE;
typedef struct tagHANDLETABLE {
<field name="objectHandle"><arr length="1"><HGDIOBJ /></arr></field>
} HANDLETABLE, *PHANDLETABLE, *LPHANDLETABLE;
typedef struct tagMETARECORD {
<field name="rdSize"><DWORD /></field>
<field name="rdFunction"><WORD /></field>
<field name="rdParm"><arr length="1"><WORD /></arr></field>
} METARECORD;
typedef struct tagMETARECORD *PMETARECORD;
typedef struct tagMETARECORD *LPMETARECORD;
typedef struct tagMETAFILEPICT {
<field name="mm"><LONG /></field>
<field name="xExt"><LONG /></field>
<field name="yExt"><LONG /></field>
<field name="hMF"><HMETAFILE /></field>
} METAFILEPICT, *LPMETAFILEPICT;
typedef struct tagMETAHEADER {
<field name="mtType"><WORD /></field>
<field name="mtHeaderSize"><WORD /></field>
<field name="mtVersion"><WORD /></field>
<field name="mtSize"><DWORD /></field>
<field name="mtNoObjects"><WORD /></field>
<field name="mtMaxRecord"><DWORD /></field>
<field name="mtNoParameters"><WORD /></field>
} METAHEADER;
typedef struct tagMETAHEADER *PMETAHEADER;
typedef struct tagMETAHEADER *LPMETAHEADER;
typedef struct tagENHMETARECORD {
<field name="iType"><DWORD /></field>
<field name="nSize"><DWORD /></field>
<field name="dParm"><arr length="1"><DWORD /></arr></field>
} ENHMETARECORD, *PENHMETARECORD, *LPENHMETARECORD;
typedef struct tagENHMETAHEADER {
<field name="iType"><DWORD /></field>
<field name="nSize"><DWORD /></field>
<field name="rclBounds"><RECTL /></field>
<field name="rclFrame"><RECTL /></field>
<field name="dSignature"><DWORD /></field>
<field name="nVersion"><DWORD /></field>
<field name="nBytes"><DWORD /></field>
<field name="nRecords"><DWORD /></field>
<field name="nHandles"><WORD /></field>
<field name="sReserved"><WORD /></field>
<field name="nDescription"><DWORD /></field>
<field name="offDescription"><DWORD /></field>
<field name="nPalEntries"><DWORD /></field>
<field name="szlDevice"><SIZEL /></field>
<field name="szlMillimeters"><SIZEL /></field>
<field name="cbPixelFormat"><DWORD /></field>
<field name="offPixelFormat"><DWORD /></field>
<field name="bOpenGL"><DWORD /></field>
<field name="szlMicrometers"><SIZEL /></field>
} ENHMETAHEADER, *PENHMETAHEADER, *LPENHMETAHEADER;
<typedef name="BCHAR"><BYTE /></typedef>
typedef struct tagTEXTMETRICA {
<field name="tmHeight"><LONG /></field>
<field name="tmAscent"><LONG /></field>
<field name="tmDescent"><LONG /></field>
<field name="tmInternalLeading"><LONG /></field>
<field name="tmExternalLeading"><LONG /></field>
<field name="tmAveCharWidth"><LONG /></field>
<field name="tmMaxCharWidth"><LONG /></field>
<field name="tmWeight"><LONG /></field>
<field name="tmOverhang"><LONG /></field>
<field name="tmDigitizedAspectX"><LONG /></field>
<field name="tmDigitizedAspectY"><LONG /></field>
<field name="tmFirstChar"><BYTE /></field>
<field name="tmLastChar"><BYTE /></field>
<field name="tmDefaultChar"><BYTE /></field>
<field name="tmBreakChar"><BYTE /></field>
<field name="tmItalic"><BYTE /></field>
<field name="tmUnderlined"><BYTE /></field>
<field name="tmStruckOut"><BYTE /></field>
<field name="tmPitchAndFamily"><BYTE /></field>
<field name="tmCharSet"><BYTE /></field>
} TEXTMETRICA, *PTEXTMETRICA, *NPTEXTMETRICA, *LPTEXTMETRICA;
typedef struct tagTEXTMETRICW {
<field name="tmHeight"><LONG /></field>
<field name="tmAscent"><LONG /></field>
<field name="tmDescent"><LONG /></field>
<field name="tmInternalLeading"><LONG /></field>
<field name="tmExternalLeading"><LONG /></field>
<field name="tmAveCharWidth"><LONG /></field>
<field name="tmMaxCharWidth"><LONG /></field>
<field name="tmWeight"><LONG /></field>
<field name="tmOverhang"><LONG /></field>
<field name="tmDigitizedAspectX"><LONG /></field>
<field name="tmDigitizedAspectY"><LONG /></field>
<field name="tmFirstChar"><WCHAR /></field>
<field name="tmLastChar"><WCHAR /></field>
<field name="tmDefaultChar"><WCHAR /></field>
<field name="tmBreakChar"><WCHAR /></field>
<field name="tmItalic"><BYTE /></field>
<field name="tmUnderlined"><BYTE /></field>
<field name="tmStruckOut"><BYTE /></field>
<field name="tmPitchAndFamily"><BYTE /></field>
<field name="tmCharSet"><BYTE /></field>
} TEXTMETRICW, *PTEXTMETRICW, *NPTEXTMETRICW, *LPTEXTMETRICW;
<typedef name="TEXTMETRIC"><TEXTMETRICA /></typedef>
<typedef name="PTEXTMETRIC"><PTEXTMETRICA /></typedef>
<typedef name="NPTEXTMETRIC"><NPTEXTMETRICA /></typedef>
<typedef name="LPTEXTMETRIC"><LPTEXTMETRICA /></typedef>
typedef struct tagNEWTEXTMETRICA {
<field name="tmHeight"><LONG /></field>
<field name="tmAscent"><LONG /></field>
<field name="tmDescent"><LONG /></field>
<field name="tmInternalLeading"><LONG /></field>
<field name="tmExternalLeading"><LONG /></field>
<field name="tmAveCharWidth"><LONG /></field>
<field name="tmMaxCharWidth"><LONG /></field>
<field name="tmWeight"><LONG /></field>
<field name="tmOverhang"><LONG /></field>
<field name="tmDigitizedAspectX"><LONG /></field>
<field name="tmDigitizedAspectY"><LONG /></field>
<field name="tmFirstChar"><BYTE /></field>
<field name="tmLastChar"><BYTE /></field>
<field name="tmDefaultChar"><BYTE /></field>
<field name="tmBreakChar"><BYTE /></field>
<field name="tmItalic"><BYTE /></field>
<field name="tmUnderlined"><BYTE /></field>
<field name="tmStruckOut"><BYTE /></field>
<field name="tmPitchAndFamily"><BYTE /></field>
<field name="tmCharSet"><BYTE /></field>
<field name="ntmFlags"><DWORD /></field>
<field name="ntmSizeEM"><UINT /></field>
<field name="ntmCellHeight"><UINT /></field>
<field name="ntmAvgWidth"><UINT /></field>
} NEWTEXTMETRICA, *PNEWTEXTMETRICA, *NPNEWTEXTMETRICA, *LPNEWTEXTMETRICA;
typedef struct tagNEWTEXTMETRICW {
<field name="tmHeight"><LONG /></field>
<field name="tmAscent"><LONG /></field>
<field name="tmDescent"><LONG /></field>
<field name="tmInternalLeading"><LONG /></field>
<field name="tmExternalLeading"><LONG /></field>
<field name="tmAveCharWidth"><LONG /></field>
<field name="tmMaxCharWidth"><LONG /></field>
<field name="tmWeight"><LONG /></field>
<field name="tmOverhang"><LONG /></field>
<field name="tmDigitizedAspectX"><LONG /></field>
<field name="tmDigitizedAspectY"><LONG /></field>
<field name="tmFirstChar"><WCHAR /></field>
<field name="tmLastChar"><WCHAR /></field>
<field name="tmDefaultChar"><WCHAR /></field>
<field name="tmBreakChar"><WCHAR /></field>
<field name="tmItalic"><BYTE /></field>
<field name="tmUnderlined"><BYTE /></field>
<field name="tmStruckOut"><BYTE /></field>
<field name="tmPitchAndFamily"><BYTE /></field>
<field name="tmCharSet"><BYTE /></field>
<field name="ntmFlags"><DWORD /></field>
<field name="ntmSizeEM"><UINT /></field>
<field name="ntmCellHeight"><UINT /></field>
<field name="ntmAvgWidth"><UINT /></field>
} NEWTEXTMETRICW, *PNEWTEXTMETRICW, *NPNEWTEXTMETRICW, *LPNEWTEXTMETRICW;
<typedef name="NEWTEXTMETRIC"><NEWTEXTMETRICA /></typedef>
<typedef name="PNEWTEXTMETRIC"><PNEWTEXTMETRICA /></typedef>
<typedef name="NPNEWTEXTMETRIC"><NPNEWTEXTMETRICA /></typedef>
<typedef name="LPNEWTEXTMETRIC"><LPNEWTEXTMETRICA /></typedef>
typedef struct tagNEWTEXTMETRICEXA {
<field name="ntmTm"><NEWTEXTMETRICA /></field>
<field name="ntmFontSig"><FONTSIGNATURE /></field>
}NEWTEXTMETRICEXA;
typedef struct tagNEWTEXTMETRICEXW {
<field name="ntmTm"><NEWTEXTMETRICW /></field>
<field name="ntmFontSig"><FONTSIGNATURE /></field>
}NEWTEXTMETRICEXW;
<typedef name="NEWTEXTMETRICEX"><NEWTEXTMETRICEXA /></typedef>
typedef struct tagPELARRAY {
<field name="paXCount"><LONG /></field>
<field name="paYCount"><LONG /></field>
<field name="paXExt"><LONG /></field>
<field name="paYExt"><LONG /></field>
<field name="paRGBs"><BYTE /></field>
} PELARRAY, *PPELARRAY, *NPPELARRAY, *LPPELARRAY;
typedef struct tagLOGBRUSH {
<field name="lbStyle"><UINT /></field>
<field name="lbColor"><COLORREF /></field>
<field name="lbHatch"><ULONG_PTR /></field>
} LOGBRUSH, *PLOGBRUSH, *NPLOGBRUSH, *LPLOGBRUSH;
typedef struct tagLOGBRUSH32 {
<field name="lbStyle"><UINT /></field>
<field name="lbColor"><COLORREF /></field>
<field name="lbHatch"><ULONG /></field>
} LOGBRUSH32, *PLOGBRUSH32, *NPLOGBRUSH32, *LPLOGBRUSH32;
<typedef name="PATTERN"><LOGBRUSH /></typedef>
<typedef name="PPATTERN"><ptr><PATTERN /></ptr></typedef>
<typedef name="NPPATTERN"><ptr><PATTERN /></ptr></typedef>
<typedef name="LPPATTERN"><ptr><PATTERN /></ptr></typedef>
typedef struct tagLOGPEN {
<field name="lopnStyle"><UINT /></field>
<field name="lopnWidth"><POINT /></field>
<field name="lopnColor"><COLORREF /></field>
} LOGPEN, *PLOGPEN, *NPLOGPEN, *LPLOGPEN;
typedef struct tagEXTLOGPEN {
<field name="elpPenStyle"><DWORD /></field>
<field name="elpWidth"><DWORD /></field>
<field name="elpBrushStyle"><UINT /></field>
<field name="elpColor"><COLORREF /></field>
<field name="elpHatch"><ULONG_PTR /></field>
<field name="elpNumEntries"><DWORD /></field>
<field name="elpStyleEntry"><arr length="1"><DWORD /></arr></field>
} EXTLOGPEN, *PEXTLOGPEN, *NPEXTLOGPEN, *LPEXTLOGPEN;
typedef struct tagEXTLOGPEN32 {
<field name="elpPenStyle"><DWORD /></field>
<field name="elpWidth"><DWORD /></field>
<field name="elpBrushStyle"><UINT /></field>
<field name="elpColor"><COLORREF /></field>
<field name="elpHatch"><ULONG /></field>
<field name="elpNumEntries"><DWORD /></field>
<field name="elpStyleEntry"><arr length="1"><DWORD /></arr></field>
} EXTLOGPEN32, *PEXTLOGPEN32, *NPEXTLOGPEN32, *LPEXTLOGPEN32;
typedef struct tagPALETTEENTRY {
<field name="peRed"><BYTE /></field>
<field name="peGreen"><BYTE /></field>
<field name="peBlue"><BYTE /></field>
<field name="peFlags"><BYTE /></field>
} PALETTEENTRY, *PPALETTEENTRY, *LPPALETTEENTRY;
typedef struct tagLOGPALETTE {
<field name="palVersion"><WORD /></field>
<field name="palNumEntries"><WORD /></field>
<field name="palPalEntry"><arr length="1"><PALETTEENTRY /></arr></field>
} LOGPALETTE, *PLOGPALETTE, *NPLOGPALETTE, *LPLOGPALETTE;
typedef struct tagLOGFONTA {
<field name="lfHeight"><LONG /></field>
<field name="lfWidth"><LONG /></field>
<field name="lfEscapement"><LONG /></field>
<field name="lfOrientation"><LONG /></field>
<field name="lfWeight"><LONG /></field>
<field name="lfItalic"><BYTE /></field>
<field name="lfUnderline"><BYTE /></field>
<field name="lfStrikeOut"><BYTE /></field>
<field name="lfCharSet"><BYTE /></field>
<field name="lfOutPrecision"><BYTE /></field>
<field name="lfClipPrecision"><BYTE /></field>
<field name="lfQuality"><BYTE /></field>
<field name="lfPitchAndFamily"><BYTE /></field>
<field name="lfFaceName"><arr length="32"><CHAR /></arr></field>
} LOGFONTA, *PLOGFONTA, *NPLOGFONTA, *LPLOGFONTA;
typedef struct tagLOGFONTW {
<field name="lfHeight"><LONG /></field>
<field name="lfWidth"><LONG /></field>
<field name="lfEscapement"><LONG /></field>
<field name="lfOrientation"><LONG /></field>
<field name="lfWeight"><LONG /></field>
<field name="lfItalic"><BYTE /></field>
<field name="lfUnderline"><BYTE /></field>
<field name="lfStrikeOut"><BYTE /></field>
<field name="lfCharSet"><BYTE /></field>
<field name="lfOutPrecision"><BYTE /></field>
<field name="lfClipPrecision"><BYTE /></field>
<field name="lfQuality"><BYTE /></field>
<field name="lfPitchAndFamily"><BYTE /></field>
<field name="lfFaceName"><arr length="32"><WCHAR /></arr></field>
} LOGFONTW, *PLOGFONTW, *NPLOGFONTW, *LPLOGFONTW;
<typedef name="LOGFONT"><LOGFONTA /></typedef>
<typedef name="PLOGFONT"><PLOGFONTA /></typedef>
<typedef name="NPLOGFONT"><NPLOGFONTA /></typedef>
<typedef name="LPLOGFONT"><LPLOGFONTA /></typedef>
typedef struct tagENUMLOGFONTA {
<field name="elfLogFont"><LOGFONTA /></field>
<field name="elfFullName"><arr length="64"><BYTE /></arr></field>
<field name="elfStyle"><arr length="32"><BYTE /></arr></field>
} ENUMLOGFONTA, * LPENUMLOGFONTA;
typedef struct tagENUMLOGFONTW {
<field name="elfLogFont"><LOGFONTW /></field>
<field name="elfFullName"><arr length="64"><WCHAR /></arr></field>
<field name="elfStyle"><arr length="32"><WCHAR /></arr></field>
} ENUMLOGFONTW, * LPENUMLOGFONTW;
<typedef name="ENUMLOGFONT"><ENUMLOGFONTA /></typedef>
<typedef name="LPENUMLOGFONT"><LPENUMLOGFONTA /></typedef>
typedef struct tagENUMLOGFONTEXA {
<field name="elfLogFont"><LOGFONTA /></field>
<field name="elfFullName"><arr length="64"><BYTE /></arr></field>
<field name="elfStyle"><arr length="32"><BYTE /></arr></field>
<field name="elfScript"><arr length="32"><BYTE /></arr></field>
} ENUMLOGFONTEXA, *LPENUMLOGFONTEXA;
typedef struct tagENUMLOGFONTEXW {
<field name="elfLogFont"><LOGFONTW /></field>
<field name="elfFullName"><arr length="64"><WCHAR /></arr></field>
<field name="elfStyle"><arr length="32"><WCHAR /></arr></field>
<field name="elfScript"><arr length="32"><WCHAR /></arr></field>
} ENUMLOGFONTEXW, *LPENUMLOGFONTEXW;
<typedef name="ENUMLOGFONTEX"><ENUMLOGFONTEXA /></typedef>
<typedef name="LPENUMLOGFONTEX"><LPENUMLOGFONTEXA /></typedef>
typedef struct tagPANOSE {
<field name="bFamilyType"><BYTE /></field>
<field name="bSerifStyle"><BYTE /></field>
<field name="bWeight"><BYTE /></field>
<field name="bProportion"><BYTE /></field>
<field name="bContrast"><BYTE /></field>
<field name="bStrokeVariation"><BYTE /></field>
<field name="bArmStyle"><BYTE /></field>
<field name="bLetterform"><BYTE /></field>
<field name="bMidline"><BYTE /></field>
<field name="bXHeight"><BYTE /></field>
} PANOSE, * LPPANOSE;
typedef struct tagEXTLOGFONTA {
<field name="elfLogFont"><LOGFONTA /></field>
<field name="elfFullName"><arr length="64"><BYTE /></arr></field>
<field name="elfStyle"><arr length="32"><BYTE /></arr></field>
<field name="elfVersion"><DWORD /></field>
<field name="elfStyleSize"><DWORD /></field>
<field name="elfMatch"><DWORD /></field>
<field name="elfReserved"><DWORD /></field>
<field name="elfVendorId"><arr length="4"><BYTE /></arr></field>
<field name="elfCulture"><DWORD /></field>
<field name="elfPanose"><PANOSE /></field>
} EXTLOGFONTA, *PEXTLOGFONTA, *NPEXTLOGFONTA, *LPEXTLOGFONTA;
typedef struct tagEXTLOGFONTW {
<field name="elfLogFont"><LOGFONTW /></field>
<field name="elfFullName"><arr length="64"><WCHAR /></arr></field>
<field name="elfStyle"><arr length="32"><WCHAR /></arr></field>
<field name="elfVersion"><DWORD /></field>
<field name="elfStyleSize"><DWORD /></field>
<field name="elfMatch"><DWORD /></field>
<field name="elfReserved"><DWORD /></field>
<field name="elfVendorId"><arr length="4"><BYTE /></arr></field>
<field name="elfCulture"><DWORD /></field>
<field name="elfPanose"><PANOSE /></field>
} EXTLOGFONTW, *PEXTLOGFONTW, *NPEXTLOGFONTW, *LPEXTLOGFONTW;
<typedef name="EXTLOGFONT"><EXTLOGFONTA /></typedef>
<typedef name="PEXTLOGFONT"><PEXTLOGFONTA /></typedef>
<typedef name="NPEXTLOGFONT"><NPEXTLOGFONTA /></typedef>
<typedef name="LPEXTLOGFONT"><LPEXTLOGFONTA /></typedef>
typedef struct _devicemodeA {
<field name="dmDeviceName"><arr length="32"><BYTE /></arr></field>
<field name="dmSpecVersion"><WORD /></field>
<field name="dmDriverVersion"><WORD /></field>
<field name="dmSize"><WORD /></field>
<field name="dmDriverExtra"><WORD /></field>
<field name="dmFields"><DWORD /></field>
union {
struct {
<field name="dmOrientation"><short /></field>
<field name="dmPaperSize"><short /></field>
<field name="dmPaperLength"><short /></field>
<field name="dmPaperWidth"><short /></field>
<field name="dmScale"><short /></field>
<field name="dmCopies"><short /></field>
<field name="dmDefaultSource"><short /></field>
<field name="dmPrintQuality"><short /></field>
};
struct {
<field name="dmPosition"><POINTL /></field>
<field name="dmDisplayOrientation"><DWORD /></field>
<field name="dmDisplayFixedOutput"><DWORD /></field>
};
};
<field name="dmColor"><short /></field>
<field name="dmDuplex"><short /></field>
<field name="dmYResolution"><short /></field>
<field name="dmTTOption"><short /></field>
<field name="dmCollate"><short /></field>
<field name="dmFormName"><arr length="32"><BYTE /></arr></field>
<field name="dmLogPixels"><WORD /></field>
<field name="dmBitsPerPel"><DWORD /></field>
<field name="dmPelsWidth"><DWORD /></field>
<field name="dmPelsHeight"><DWORD /></field>
union {
<field name="dmDisplayFlags"><DWORD /></field>
<field name="dmNup"><DWORD /></field>
};
<field name="dmDisplayFrequency"><DWORD /></field>
<field name="dmICMMethod"><DWORD /></field>
<field name="dmICMIntent"><DWORD /></field>
<field name="dmMediaType"><DWORD /></field>
<field name="dmDitherType"><DWORD /></field>
<field name="dmReserved1"><DWORD /></field>
<field name="dmReserved2"><DWORD /></field>
<field name="dmPanningWidth"><DWORD /></field>
<field name="dmPanningHeight"><DWORD /></field>
} DEVMODEA, *PDEVMODEA, *NPDEVMODEA, *LPDEVMODEA;
typedef struct _devicemodeW {
<field name="dmDeviceName"><arr length="32"><WCHAR /></arr></field>
<field name="dmSpecVersion"><WORD /></field>
<field name="dmDriverVersion"><WORD /></field>
<field name="dmSize"><WORD /></field>
<field name="dmDriverExtra"><WORD /></field>
<field name="dmFields"><DWORD /></field>
union {
struct {
<field name="dmOrientation"><short /></field>
<field name="dmPaperSize"><short /></field>
<field name="dmPaperLength"><short /></field>
<field name="dmPaperWidth"><short /></field>
<field name="dmScale"><short /></field>
<field name="dmCopies"><short /></field>
<field name="dmDefaultSource"><short /></field>
<field name="dmPrintQuality"><short /></field>
};
struct {
<field name="dmPosition"><POINTL /></field>
<field name="dmDisplayOrientation"><DWORD /></field>
<field name="dmDisplayFixedOutput"><DWORD /></field>
};
};
<field name="dmColor"><short /></field>
<field name="dmDuplex"><short /></field>
<field name="dmYResolution"><short /></field>
<field name="dmTTOption"><short /></field>
<field name="dmCollate"><short /></field>
<field name="dmFormName"><arr length="32"><WCHAR /></arr></field>
<field name="dmLogPixels"><WORD /></field>
<field name="dmBitsPerPel"><DWORD /></field>
<field name="dmPelsWidth"><DWORD /></field>
<field name="dmPelsHeight"><DWORD /></field>
union {
<field name="dmDisplayFlags"><DWORD /></field>
<field name="dmNup"><DWORD /></field>
};
<field name="dmDisplayFrequency"><DWORD /></field>
<field name="dmICMMethod"><DWORD /></field>
<field name="dmICMIntent"><DWORD /></field>
<field name="dmMediaType"><DWORD /></field>
<field name="dmDitherType"><DWORD /></field>
<field name="dmReserved1"><DWORD /></field>
<field name="dmReserved2"><DWORD /></field>
<field name="dmPanningWidth"><DWORD /></field>
<field name="dmPanningHeight"><DWORD /></field>
} DEVMODEW, *PDEVMODEW, *NPDEVMODEW, *LPDEVMODEW;
<typedef name="DEVMODE"><DEVMODEA /></typedef>
<typedef name="PDEVMODE"><PDEVMODEA /></typedef>
<typedef name="NPDEVMODE"><NPDEVMODEA /></typedef>
<typedef name="LPDEVMODE"><LPDEVMODEA /></typedef>
typedef struct _DISPLAY_DEVICEA {
<field name="cb"><DWORD /></field>
<field name="DeviceName"><arr length="32"><CHAR /></arr></field>
<field name="DeviceString"><arr length="128"><CHAR /></arr></field>
<field name="StateFlags"><DWORD /></field>
<field name="DeviceID"><arr length="128"><CHAR /></arr></field>
<field name="DeviceKey"><arr length="128"><CHAR /></arr></field>
} DISPLAY_DEVICEA, *PDISPLAY_DEVICEA, *LPDISPLAY_DEVICEA;
typedef struct _DISPLAY_DEVICEW {
<field name="cb"><DWORD /></field>
<field name="DeviceName"><arr length="32"><WCHAR /></arr></field>
<field name="DeviceString"><arr length="128"><WCHAR /></arr></field>
<field name="StateFlags"><DWORD /></field>
<field name="DeviceID"><arr length="128"><WCHAR /></arr></field>
<field name="DeviceKey"><arr length="128"><WCHAR /></arr></field>
} DISPLAY_DEVICEW, *PDISPLAY_DEVICEW, *LPDISPLAY_DEVICEW;
<typedef name="DISPLAY_DEVICE"><DISPLAY_DEVICEA /></typedef>
<typedef name="PDISPLAY_DEVICE"><PDISPLAY_DEVICEA /></typedef>
<typedef name="LPDISPLAY_DEVICE"><LPDISPLAY_DEVICEA /></typedef>
typedef struct DISPLAYCONFIG_RATIONAL {
<field name="Numerator"><UINT32 /></field>
<field name="Denominator"><UINT32 /></field>
} DISPLAYCONFIG_RATIONAL;
typedef enum {
DISPLAYCONFIG_OUTPUT_TECHNOLOGY_OTHER = -1, DISPLAYCONFIG_OUTPUT_TECHNOLOGY_HD15 = 0, DISPLAYCONFIG_OUTPUT_TECHNOLOGY_SVIDEO = 1, DISPLAYCONFIG_OUTPUT_TECHNOLOGY_COMPOSITE_VIDEO = 2, DISPLAYCONFIG_OUTPUT_TECHNOLOGY_COMPONENT_VIDEO = 3, DISPLAYCONFIG_OUTPUT_TECHNOLOGY_DVI = 4, DISPLAYCONFIG_OUTPUT_TECHNOLOGY_HDMI = 5, DISPLAYCONFIG_OUTPUT_TECHNOLOGY_LVDS = 6, DISPLAYCONFIG_OUTPUT_TECHNOLOGY_D_JPN = 8, DISPLAYCONFIG_OUTPUT_TECHNOLOGY_SDI = 9, DISPLAYCONFIG_OUTPUT_TECHNOLOGY_DISPLAYPORT_EXTERNAL = 10, DISPLAYCONFIG_OUTPUT_TECHNOLOGY_DISPLAYPORT_EMBEDDED = 11, DISPLAYCONFIG_OUTPUT_TECHNOLOGY_UDI_EXTERNAL = 12, DISPLAYCONFIG_OUTPUT_TECHNOLOGY_UDI_EMBEDDED = 13, DISPLAYCONFIG_OUTPUT_TECHNOLOGY_SDTVDONGLE = 14, DISPLAYCONFIG_OUTPUT_TECHNOLOGY_INTERNAL = 0x80000000, DISPLAYCONFIG_OUTPUT_TECHNOLOGY_FORCE_UINT32 = 0xFFFFFFFF } DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY;
typedef enum {
DISPLAYCONFIG_SCANLINE_ORDERING_UNSPECIFIED = 0, DISPLAYCONFIG_SCANLINE_ORDERING_PROGRESSIVE = 1, DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED = 2, DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED_UPPERFIELDFIRST = DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED, DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED_LOWERFIELDFIRST = 3, DISPLAYCONFIG_SCANLINE_ORDERING_FORCE_UINT32 = 0xFFFFFFFF } DISPLAYCONFIG_SCANLINE_ORDERING;
typedef struct DISPLAYCONFIG_2DREGION {
<field name="cx"><UINT32 /></field>
<field name="cy"><UINT32 /></field>
} DISPLAYCONFIG_2DREGION;
typedef struct DISPLAYCONFIG_VIDEO_SIGNAL_INFO {
<field name="pixelRate"><UINT64 /></field>
<field name="hSyncFreq"><DISPLAYCONFIG_RATIONAL /></field>
<field name="vSyncFreq"><DISPLAYCONFIG_RATIONAL /></field>
<field name="activeSize"><DISPLAYCONFIG_2DREGION /></field>
<field name="totalSize"><DISPLAYCONFIG_2DREGION /></field>
<field name="videoStandard"><UINT32 /></field>
<field name="scanLineOrdering"><DISPLAYCONFIG_SCANLINE_ORDERING /></field>
} DISPLAYCONFIG_VIDEO_SIGNAL_INFO;
typedef enum {
DISPLAYCONFIG_SCALING_IDENTITY = 1, DISPLAYCONFIG_SCALING_CENTERED = 2, DISPLAYCONFIG_SCALING_STRETCHED = 3, DISPLAYCONFIG_SCALING_ASPECTRATIOCENTEREDMAX = 4, DISPLAYCONFIG_SCALING_CUSTOM = 5, DISPLAYCONFIG_SCALING_PREFERRED = 128, DISPLAYCONFIG_SCALING_FORCE_UINT32 = 0xFFFFFFFF } DISPLAYCONFIG_SCALING;
typedef enum {
DISPLAYCONFIG_ROTATION_IDENTITY = 1, DISPLAYCONFIG_ROTATION_ROTATE90 = 2, DISPLAYCONFIG_ROTATION_ROTATE180 = 3, DISPLAYCONFIG_ROTATION_ROTATE270 = 4, DISPLAYCONFIG_ROTATION_FORCE_UINT32 = 0xFFFFFFFF } DISPLAYCONFIG_ROTATION;
typedef enum {
DISPLAYCONFIG_MODE_INFO_TYPE_SOURCE = 1, DISPLAYCONFIG_MODE_INFO_TYPE_TARGET = 2, DISPLAYCONFIG_MODE_INFO_TYPE_FORCE_UINT32 = 0xFFFFFFFF } DISPLAYCONFIG_MODE_INFO_TYPE;
typedef enum {
DISPLAYCONFIG_PIXELFORMAT_8BPP = 1, DISPLAYCONFIG_PIXELFORMAT_16BPP = 2, DISPLAYCONFIG_PIXELFORMAT_24BPP = 3, DISPLAYCONFIG_PIXELFORMAT_32BPP = 4, DISPLAYCONFIG_PIXELFORMAT_NONGDI = 5, DISPLAYCONFIG_PIXELFORMAT_FORCE_UINT32 = 0xffffffff } DISPLAYCONFIG_PIXELFORMAT;
typedef struct DISPLAYCONFIG_SOURCE_MODE {
<field name="width"><UINT32 /></field>
<field name="height"><UINT32 /></field>
<field name="pixelFormat"><DISPLAYCONFIG_PIXELFORMAT /></field>
<field name="position"><POINTL /></field>
} DISPLAYCONFIG_SOURCE_MODE;
typedef struct DISPLAYCONFIG_TARGET_MODE {
<field name="targetVideoSignalInfo"><DISPLAYCONFIG_VIDEO_SIGNAL_INFO /></field>
} DISPLAYCONFIG_TARGET_MODE;
typedef struct DISPLAYCONFIG_MODE_INFO {
<field name="infoType"><DISPLAYCONFIG_MODE_INFO_TYPE /></field>
<field name="id"><UINT32 /></field>
<field name="adapterId"><LUID /></field>
union {
<field name="targetMode"><DISPLAYCONFIG_TARGET_MODE /></field>
<field name="sourceMode"><DISPLAYCONFIG_SOURCE_MODE /></field>
};
} DISPLAYCONFIG_MODE_INFO;
typedef struct DISPLAYCONFIG_PATH_SOURCE_INFO {
<field name="adapterId"><LUID /></field>
<field name="id"><UINT32 /></field>
<field name="modeInfoIdx"><UINT32 /></field>
<field name="statusFlags"><UINT32 /></field>
} DISPLAYCONFIG_PATH_SOURCE_INFO;
typedef struct DISPLAYCONFIG_PATH_TARGET_INFO {
<field name="adapterId"><LUID /></field>
<field name="id"><UINT32 /></field>
<field name="modeInfoIdx"><UINT32 /></field>
<field name="outputTechnology"><DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY /></field>
<field name="rotation"><DISPLAYCONFIG_ROTATION /></field>
<field name="scaling"><DISPLAYCONFIG_SCALING /></field>
<field name="refreshRate"><DISPLAYCONFIG_RATIONAL /></field>
<field name="scanLineOrdering"><DISPLAYCONFIG_SCANLINE_ORDERING /></field>
<field name="targetAvailable"><BOOL /></field>
<field name="statusFlags"><UINT32 /></field>
} DISPLAYCONFIG_PATH_TARGET_INFO;
typedef struct DISPLAYCONFIG_PATH_INFO {
<field name="sourceInfo"><DISPLAYCONFIG_PATH_SOURCE_INFO /></field>
<field name="targetInfo"><DISPLAYCONFIG_PATH_TARGET_INFO /></field>
<field name="flags"><UINT32 /></field>
} DISPLAYCONFIG_PATH_INFO;
typedef enum {
DISPLAYCONFIG_TOPOLOGY_INTERNAL = 0x00000001, DISPLAYCONFIG_TOPOLOGY_CLONE = 0x00000002, DISPLAYCONFIG_TOPOLOGY_EXTEND = 0x00000004, DISPLAYCONFIG_TOPOLOGY_EXTERNAL = 0x00000008, DISPLAYCONFIG_TOPOLOGY_FORCE_UINT32 = 0xFFFFFFFF } DISPLAYCONFIG_TOPOLOGY_ID;
typedef enum {
DISPLAYCONFIG_DEVICE_INFO_GET_SOURCE_NAME = 1, DISPLAYCONFIG_DEVICE_INFO_GET_TARGET_NAME = 2, DISPLAYCONFIG_DEVICE_INFO_GET_TARGET_PREFERRED_MODE = 3, DISPLAYCONFIG_DEVICE_INFO_GET_ADAPTER_NAME = 4, DISPLAYCONFIG_DEVICE_INFO_SET_TARGET_PERSISTENCE = 5, DISPLAYCONFIG_DEVICE_INFO_FORCE_UINT32 = 0xFFFFFFFF } DISPLAYCONFIG_DEVICE_INFO_TYPE;
typedef struct DISPLAYCONFIG_DEVICE_INFO_HEADER {
<field name="type"><DISPLAYCONFIG_DEVICE_INFO_TYPE /></field>
<field name="size"><UINT32 /></field>
<field name="adapterId"><LUID /></field>
<field name="id"><UINT32 /></field>
} DISPLAYCONFIG_DEVICE_INFO_HEADER;
typedef struct DISPLAYCONFIG_SOURCE_DEVICE_NAME {
<field name="header"><DISPLAYCONFIG_DEVICE_INFO_HEADER /></field>
<field name="viewGdiDeviceName"><arr length="32"><WCHAR /></arr></field>
} DISPLAYCONFIG_SOURCE_DEVICE_NAME;
typedef struct DISPLAYCONFIG_TARGET_DEVICE_NAME_FLAGS {
union {
struct {
<bitfield name="friendlyNameFromEdid" bits="1"><UINT32 /></bitfield>
<bitfield name="friendlyNameForced" bits="1"><UINT32 /></bitfield>
<bitfield name="edidIdsValid" bits="1"><UINT32 /></bitfield>
<bitfield name="reserved" bits="29"><UINT32 /></bitfield>
};
<field name="value"><UINT32 /></field>
};
} DISPLAYCONFIG_TARGET_DEVICE_NAME_FLAGS;
typedef struct DISPLAYCONFIG_TARGET_DEVICE_NAME {
<field name="header"><DISPLAYCONFIG_DEVICE_INFO_HEADER /></field>
<field name="flags"><DISPLAYCONFIG_TARGET_DEVICE_NAME_FLAGS /></field>
<field name="outputTechnology"><DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY /></field>
<field name="edidManufactureId"><UINT16 /></field>
<field name="edidProductCodeId"><UINT16 /></field>
<field name="connectorInstance"><UINT32 /></field>
<field name="monitorFriendlyDeviceName"><arr length="64"><WCHAR /></arr></field>
<field name="monitorDevicePath"><arr length="128"><WCHAR /></arr></field>
} DISPLAYCONFIG_TARGET_DEVICE_NAME;
typedef struct DISPLAYCONFIG_TARGET_PREFERRED_MODE {
<field name="header"><DISPLAYCONFIG_DEVICE_INFO_HEADER /></field>
<field name="width"><UINT32 /></field>
<field name="height"><UINT32 /></field>
<field name="targetMode"><DISPLAYCONFIG_TARGET_MODE /></field>
} DISPLAYCONFIG_TARGET_PREFERRED_MODE;
typedef struct DISPLAYCONFIG_ADAPTER_NAME {
<field name="header"><DISPLAYCONFIG_DEVICE_INFO_HEADER /></field>
<field name="adapterDevicePath"><arr length="128"><WCHAR /></arr></field>
} DISPLAYCONFIG_ADAPTER_NAME;
typedef struct DISPLAYCONFIG_SET_TARGET_PERSISTENCE {
<field name="header"><DISPLAYCONFIG_DEVICE_INFO_HEADER /></field>
union {
struct {
<bitfield name="bootPersistenceOn" bits="1"><UINT32 /></bitfield>
<bitfield name="reserved" bits="31"><UINT32 /></bitfield>
};
<field name="value"><UINT32 /></field>
};
} DISPLAYCONFIG_SET_TARGET_PERSISTENCE;
typedef struct _RGNDATAHEADER {
<field name="dwSize"><DWORD /></field>
<field name="iType"><DWORD /></field>
<field name="nCount"><DWORD /></field>
<field name="nRgnSize"><DWORD /></field>
<field name="rcBound"><RECT /></field>
} RGNDATAHEADER, *PRGNDATAHEADER;
typedef struct _RGNDATA {
<field name="rdh"><RGNDATAHEADER /></field>
<field name="Buffer"><arr length="1"><char /></arr></field>
} RGNDATA, *PRGNDATA, *NPRGNDATA, *LPRGNDATA;
typedef struct _ABC {
<field name="abcA"><int32 /></field>
<field name="abcB"><UINT /></field>
<field name="abcC"><int32 /></field>
} ABC, *PABC, *NPABC, *LPABC;
typedef struct _ABCFLOAT {
<field name="abcfA"><FLOAT /></field>
<field name="abcfB"><FLOAT /></field>
<field name="abcfC"><FLOAT /></field>
} ABCFLOAT, *PABCFLOAT, *NPABCFLOAT, *LPABCFLOAT;
typedef struct _OUTLINETEXTMETRICA {
<field name="otmSize"><UINT /></field>
<field name="otmTextMetrics"><TEXTMETRICA /></field>
<field name="otmFiller"><BYTE /></field>
<field name="otmPanoseNumber"><PANOSE /></field>
<field name="otmfsSelection"><UINT /></field>
<field name="otmfsType"><UINT /></field>
<field name="otmsCharSlopeRise"><int32 /></field>
<field name="otmsCharSlopeRun"><int32 /></field>
<field name="otmItalicAngle"><int32 /></field>
<field name="otmEMSquare"><UINT /></field>
<field name="otmAscent"><int32 /></field>
<field name="otmDescent"><int32 /></field>
<field name="otmLineGap"><UINT /></field>
<field name="otmsCapEmHeight"><UINT /></field>
<field name="otmsXHeight"><UINT /></field>
<field name="otmrcFontBox"><RECT /></field>
<field name="otmMacAscent"><int32 /></field>
<field name="otmMacDescent"><int32 /></field>
<field name="otmMacLineGap"><UINT /></field>
<field name="otmusMinimumPPEM"><UINT /></field>
<field name="otmptSubscriptSize"><POINT /></field>
<field name="otmptSubscriptOffset"><POINT /></field>
<field name="otmptSuperscriptSize"><POINT /></field>
<field name="otmptSuperscriptOffset"><POINT /></field>
<field name="otmsStrikeoutSize"><UINT /></field>
<field name="otmsStrikeoutPosition"><int32 /></field>
<field name="otmsUnderscoreSize"><int32 /></field>
<field name="otmsUnderscorePosition"><int32 /></field>
<field name="otmpFamilyName"><PSTR /></field>
<field name="otmpFaceName"><PSTR /></field>
<field name="otmpStyleName"><PSTR /></field>
<field name="otmpFullName"><PSTR /></field>
} OUTLINETEXTMETRICA, *POUTLINETEXTMETRICA, *NPOUTLINETEXTMETRICA, *LPOUTLINETEXTMETRICA;
typedef struct _OUTLINETEXTMETRICW {
<field name="otmSize"><UINT /></field>
<field name="otmTextMetrics"><TEXTMETRICW /></field>
<field name="otmFiller"><BYTE /></field>
<field name="otmPanoseNumber"><PANOSE /></field>
<field name="otmfsSelection"><UINT /></field>
<field name="otmfsType"><UINT /></field>
<field name="otmsCharSlopeRise"><int32 /></field>
<field name="otmsCharSlopeRun"><int32 /></field>
<field name="otmItalicAngle"><int32 /></field>
<field name="otmEMSquare"><UINT /></field>
<field name="otmAscent"><int32 /></field>
<field name="otmDescent"><int32 /></field>
<field name="otmLineGap"><UINT /></field>
<field name="otmsCapEmHeight"><UINT /></field>
<field name="otmsXHeight"><UINT /></field>
<field name="otmrcFontBox"><RECT /></field>
<field name="otmMacAscent"><int32 /></field>
<field name="otmMacDescent"><int32 /></field>
<field name="otmMacLineGap"><UINT /></field>
<field name="otmusMinimumPPEM"><UINT /></field>
<field name="otmptSubscriptSize"><POINT /></field>
<field name="otmptSubscriptOffset"><POINT /></field>
<field name="otmptSuperscriptSize"><POINT /></field>
<field name="otmptSuperscriptOffset"><POINT /></field>
<field name="otmsStrikeoutSize"><UINT /></field>
<field name="otmsStrikeoutPosition"><int32 /></field>
<field name="otmsUnderscoreSize"><int32 /></field>
<field name="otmsUnderscorePosition"><int32 /></field>
<field name="otmpFamilyName"><PSTR /></field>
<field name="otmpFaceName"><PSTR /></field>
<field name="otmpStyleName"><PSTR /></field>
<field name="otmpFullName"><PSTR /></field>
} OUTLINETEXTMETRICW, *POUTLINETEXTMETRICW, *NPOUTLINETEXTMETRICW, *LPOUTLINETEXTMETRICW;
<typedef name="OUTLINETEXTMETRIC"><OUTLINETEXTMETRICA /></typedef>
<typedef name="POUTLINETEXTMETRIC"><POUTLINETEXTMETRICA /></typedef>
<typedef name="NPOUTLINETEXTMETRIC"><NPOUTLINETEXTMETRICA /></typedef>
<typedef name="LPOUTLINETEXTMETRIC"><LPOUTLINETEXTMETRICA /></typedef>
typedef struct tagPOLYTEXTA {
<field name="x"><int32 /></field>
<field name="y"><int32 /></field>
<field name="n"><UINT /></field>
<field name="lpstr"><LPCSTR /></field>
<field name="uiFlags"><UINT /></field>
<field name="rcl"><RECT /></field>
<field name="pdx"><ptr><int32 /></ptr></field>
} POLYTEXTA, *PPOLYTEXTA, *NPPOLYTEXTA, *LPPOLYTEXTA;
typedef struct tagPOLYTEXTW {
<field name="x"><int32 /></field>
<field name="y"><int32 /></field>
<field name="n"><UINT /></field>
<field name="lpstr"><LPCWSTR /></field>
<field name="uiFlags"><UINT /></field>
<field name="rcl"><RECT /></field>
<field name="pdx"><ptr><int32 /></ptr></field>
} POLYTEXTW, *PPOLYTEXTW, *NPPOLYTEXTW, *LPPOLYTEXTW;
<typedef name="POLYTEXT"><POLYTEXTA /></typedef>
<typedef name="PPOLYTEXT"><PPOLYTEXTA /></typedef>
<typedef name="NPPOLYTEXT"><NPPOLYTEXTA /></typedef>
<typedef name="LPPOLYTEXT"><LPPOLYTEXTA /></typedef>
typedef struct _FIXED {
<field name="fract"><WORD /></field>
<field name="value"><short /></field>
} FIXED;
typedef struct _MAT2 {
<field name="eM11"><FIXED /></field>
<field name="eM12"><FIXED /></field>
<field name="eM21"><FIXED /></field>
<field name="eM22"><FIXED /></field>
} MAT2, *LPMAT2;
typedef struct _GLYPHMETRICS {
<field name="gmBlackBoxX"><UINT /></field>
<field name="gmBlackBoxY"><UINT /></field>
<field name="gmptGlyphOrigin"><POINT /></field>
<field name="gmCellIncX"><short /></field>
<field name="gmCellIncY"><short /></field>
} GLYPHMETRICS, *LPGLYPHMETRICS;
typedef struct tagPOINTFX {
<field name="x"><FIXED /></field>
<field name="y"><FIXED /></field>
} POINTFX, * LPPOINTFX;
typedef struct tagTTPOLYCURVE {
<field name="wType"><WORD /></field>
<field name="cpfx"><WORD /></field>
<field name="apfx"><arr length="1"><POINTFX /></arr></field>
} TTPOLYCURVE, * LPTTPOLYCURVE;
typedef struct tagTTPOLYGONHEADER {
<field name="cb"><DWORD /></field>
<field name="dwType"><DWORD /></field>
<field name="pfxStart"><POINTFX /></field>
} TTPOLYGONHEADER, * LPTTPOLYGONHEADER;
typedef struct tagGCP_RESULTSA {
<field name="lStructSize"><DWORD /></field>
<field name="lpOutString"><LPSTR /></field>
<field name="lpOrder"><ptr><UINT /></ptr></field>
<field name="lpDx"><ptr><int32 /></ptr></field>
<field name="lpCaretPos"><ptr><int32 /></ptr></field>
<field name="lpClass"><LPSTR /></field>
<field name="lpGlyphs"><LPWSTR /></field>
<field name="nGlyphs"><UINT /></field>
<field name="nMaxFit"><int32 /></field>
} GCP_RESULTSA, * LPGCP_RESULTSA;
typedef struct tagGCP_RESULTSW {
<field name="lStructSize"><DWORD /></field>
<field name="lpOutString"><LPWSTR /></field>
<field name="lpOrder"><ptr><UINT /></ptr></field>
<field name="lpDx"><ptr><int32 /></ptr></field>
<field name="lpCaretPos"><ptr><int32 /></ptr></field>
<field name="lpClass"><LPSTR /></field>
<field name="lpGlyphs"><LPWSTR /></field>
<field name="nGlyphs"><UINT /></field>
<field name="nMaxFit"><int32 /></field>
} GCP_RESULTSW, * LPGCP_RESULTSW;
<typedef name="GCP_RESULTS"><GCP_RESULTSA /></typedef>
<typedef name="LPGCP_RESULTS"><LPGCP_RESULTSA /></typedef>
typedef struct _RASTERIZER_STATUS {
<field name="nSize"><short /></field>
<field name="wFlags"><short /></field>
<field name="nLanguageID"><short /></field>
} RASTERIZER_STATUS, *LPRASTERIZER_STATUS;
typedef struct tagPIXELFORMATDESCRIPTOR {
<field name="nSize"><WORD /></field>
<field name="nVersion"><WORD /></field>
<field name="dwFlags"><DWORD /></field>
<field name="iPixelType"><BYTE /></field>
<field name="cColorBits"><BYTE /></field>
<field name="cRedBits"><BYTE /></field>
<field name="cRedShift"><BYTE /></field>
<field name="cGreenBits"><BYTE /></field>
<field name="cGreenShift"><BYTE /></field>
<field name="cBlueBits"><BYTE /></field>
<field name="cBlueShift"><BYTE /></field>
<field name="cAlphaBits"><BYTE /></field>
<field name="cAlphaShift"><BYTE /></field>
<field name="cAccumBits"><BYTE /></field>
<field name="cAccumRedBits"><BYTE /></field>
<field name="cAccumGreenBits"><BYTE /></field>
<field name="cAccumBlueBits"><BYTE /></field>
<field name="cAccumAlphaBits"><BYTE /></field>
<field name="cDepthBits"><BYTE /></field>
<field name="cStencilBits"><BYTE /></field>
<field name="cAuxBuffers"><BYTE /></field>
<field name="iLayerType"><BYTE /></field>
<field name="bReserved"><BYTE /></field>
<field name="dwLayerMask"><DWORD /></field>
<field name="dwVisibleMask"><DWORD /></field>
<field name="dwDamageMask"><DWORD /></field>
} PIXELFORMATDESCRIPTOR, *PPIXELFORMATDESCRIPTOR, *LPPIXELFORMATDESCRIPTOR;
typedef int32 (__stdcall* OLDFONTENUMPROCA)(const LOGFONTA *, const TEXTMETRICA *, DWORD, LPARAM);
typedef int32 (__stdcall* OLDFONTENUMPROCW)(const LOGFONTW *, const TEXTMETRICW *, DWORD, LPARAM);
<typedef name="FONTENUMPROCA"><OLDFONTENUMPROCA /></typedef>
<typedef name="FONTENUMPROCW"><OLDFONTENUMPROCW /></typedef>
<typedef name="FONTENUMPROC"><FONTENUMPROCA /></typedef>
typedef int32 (__stdcall* GOBJENUMPROC)(LPVOID, LPARAM);
typedef void (__stdcall* LINEDDAPROC)(int32, int32, LPARAM);
int32 __stdcall AddFontResourceA( LPCSTR);
int32 __stdcall AddFontResourceW( LPCWSTR);
BOOL __stdcall AnimatePalette( HPALETTE hPal, UINT iStartIndex, UINT cEntries, const PALETTEENTRY * ppe);
BOOL __stdcall Arc( HDC hdc, int32 x1, int32 y1, int32 x2, int32 y2, int32 x3, int32 y3, int32 x4, int32 y4);
BOOL __stdcall BitBlt( HDC hdc, int32 x, int32 y, int32 cx, int32 cy, HDC hdcSrc, int32 x1, int32 y1, DWORD rop);
BOOL __stdcall CancelDC( HDC hdc);
BOOL __stdcall Chord( HDC hdc, int32 x1, int32 y1, int32 x2, int32 y2, int32 x3, int32 y3, int32 x4, int32 y4);
int32 __stdcall ChoosePixelFormat( HDC hdc, const PIXELFORMATDESCRIPTOR *ppfd);
HMETAFILE __stdcall CloseMetaFile( HDC hdc);
int32 __stdcall CombineRgn( HRGN hrgnDst, HRGN hrgnSrc1, HRGN hrgnSrc2, int32 iMode);
HMETAFILE __stdcall CopyMetaFileA( HMETAFILE, LPCSTR);
HMETAFILE __stdcall CopyMetaFileW( HMETAFILE, LPCWSTR);
HBITMAP __stdcall CreateBitmap( int32 nWidth, int32 nHeight, UINT nPlanes, UINT nBitCount, const void *lpBits);
HBITMAP __stdcall CreateBitmapIndirect( const BITMAP *pbm);
HBRUSH __stdcall CreateBrushIndirect( const LOGBRUSH *plbrush);
HBITMAP __stdcall CreateCompatibleBitmap( HDC hdc, int32 cx, int32 cy);
HBITMAP __stdcall CreateDiscardableBitmap( HDC hdc, int32 cx, int32 cy);
HDC __stdcall CreateCompatibleDC( HDC hdc);
HDC __stdcall CreateDCA( LPCSTR pwszDriver, LPCSTR pwszDevice, LPCSTR pszPort, const DEVMODEA * pdm);
HDC __stdcall CreateDCW( LPCWSTR pwszDriver, LPCWSTR pwszDevice, LPCWSTR pszPort, const DEVMODEW * pdm);
HBITMAP __stdcall CreateDIBitmap( HDC hdc, const BITMAPINFOHEADER *pbmih, DWORD flInit, const void *pjBits, const BITMAPINFO *pbmi, UINT iUsage);
HBRUSH __stdcall CreateDIBPatternBrush( HGLOBAL h, UINT iUsage);
HBRUSH __stdcall CreateDIBPatternBrushPt( const void *lpPackedDIB, UINT iUsage);
HRGN __stdcall CreateEllipticRgn( int32 x1, int32 y1, int32 x2, int32 y2);
HRGN __stdcall CreateEllipticRgnIndirect( const RECT *lprect);
HFONT __stdcall CreateFontIndirectA( const LOGFONTA *lplf);
HFONT __stdcall CreateFontIndirectW( const LOGFONTW *lplf);
HFONT __stdcall CreateFontA( int32 cHeight, int32 cWidth, int32 cEscapement, int32 cOrientation, int32 cWeight, DWORD bItalic, DWORD bUnderline, DWORD bStrikeOut, DWORD iCharSet, DWORD iOutPrecision, DWORD iClipPrecision, DWORD iQuality, DWORD iPitchAndFamily, LPCSTR pszFaceName);
HFONT __stdcall CreateFontW( int32 cHeight, int32 cWidth, int32 cEscapement, int32 cOrientation, int32 cWeight, DWORD bItalic, DWORD bUnderline, DWORD bStrikeOut, DWORD iCharSet, DWORD iOutPrecision, DWORD iClipPrecision, DWORD iQuality, DWORD iPitchAndFamily, LPCWSTR pszFaceName);
HBRUSH __stdcall CreateHatchBrush( int32 iHatch, COLORREF color);
HDC __stdcall CreateICA( LPCSTR pszDriver, LPCSTR pszDevice, LPCSTR pszPort, const DEVMODEA * pdm);
HDC __stdcall CreateICW( LPCWSTR pszDriver, LPCWSTR pszDevice, LPCWSTR pszPort, const DEVMODEW * pdm);
HDC __stdcall CreateMetaFileA( LPCSTR pszFile);
HDC __stdcall CreateMetaFileW( LPCWSTR pszFile);
HPALETTE __stdcall CreatePalette( const LOGPALETTE * plpal);
HPEN __stdcall CreatePen( int32 iStyle, int32 cWidth, COLORREF color);
HPEN __stdcall CreatePenIndirect( const LOGPEN *plpen);
HRGN __stdcall CreatePolyPolygonRgn( const POINT *pptl, const INT *pc, int32 cPoly, int32 iMode);
HBRUSH __stdcall CreatePatternBrush( HBITMAP hbm);
HRGN __stdcall CreateRectRgn( int32 x1, int32 y1, int32 x2, int32 y2);
HRGN __stdcall CreateRectRgnIndirect( const RECT *lprect);
HRGN __stdcall CreateRoundRectRgn( int32 x1, int32 y1, int32 x2, int32 y2, int32 w, int32 h);
BOOL __stdcall CreateScalableFontResourceA( DWORD fdwHidden, LPCSTR lpszFont, LPCSTR lpszFile, LPCSTR lpszPath);
BOOL __stdcall CreateScalableFontResourceW( DWORD fdwHidden, LPCWSTR lpszFont, LPCWSTR lpszFile, LPCWSTR lpszPath);
HBRUSH __stdcall CreateSolidBrush( COLORREF color);
BOOL __stdcall DeleteDC( HDC hdc);
BOOL __stdcall DeleteMetaFile( HMETAFILE hmf);
BOOL __stdcall DeleteObject( HGDIOBJ ho);
int32 __stdcall DescribePixelFormat( HDC hdc, int32 iPixelFormat, UINT nBytes, LPPIXELFORMATDESCRIPTOR ppfd);
typedef UINT (__stdcall* LPFNDEVMODE)(HWND, HMODULE, LPDEVMODE, LPSTR, LPSTR, LPDEVMODE, LPSTR, UINT);
typedef DWORD (__stdcall* LPFNDEVCAPS)(LPSTR, LPSTR, UINT, LPSTR, LPDEVMODE);

int32 __stdcall DeviceCapabilitiesA( LPCSTR pDevice, LPCSTR pPort, WORD fwCapability, LPSTR pOutput, const DEVMODEA *pDevMode );

int32 __stdcall DeviceCapabilitiesW( LPCWSTR pDevice, LPCWSTR pPort, WORD fwCapability, LPWSTR pOutput, const DEVMODEW *pDevMode );
int32 __stdcall DrawEscape( HDC hdc, int32 iEscape, int32 cjIn, LPCSTR lpIn);
BOOL __stdcall Ellipse( HDC hdc, int32 left, int32 top, int32 right, int32 bottom);
int32 __stdcall EnumFontFamiliesExA( HDC hdc, LPLOGFONTA lpLogfont, FONTENUMPROCA lpProc, LPARAM lParam, DWORD dwFlags);
int32 __stdcall EnumFontFamiliesExW( HDC hdc, LPLOGFONTW lpLogfont, FONTENUMPROCW lpProc, LPARAM lParam, DWORD dwFlags);
int32 __stdcall EnumFontFamiliesA( HDC hdc, LPCSTR lpLogfont, FONTENUMPROCA lpProc, LPARAM lParam);
int32 __stdcall EnumFontFamiliesW( HDC hdc, LPCWSTR lpLogfont, FONTENUMPROCW lpProc, LPARAM lParam);
int32 __stdcall EnumFontsA( HDC hdc, LPCSTR lpLogfont, FONTENUMPROCA lpProc, LPARAM lParam);
int32 __stdcall EnumFontsW( HDC hdc, LPCWSTR lpLogfont, FONTENUMPROCW lpProc, LPARAM lParam);
int32 __stdcall EnumObjects( HDC hdc, int32 nType, GOBJENUMPROC lpFunc, LPARAM lParam);
BOOL __stdcall EqualRgn( HRGN hrgn1, HRGN hrgn2);
int32 __stdcall Escape( HDC hdc, int32 iEscape, int32 cjIn, LPCSTR pvIn, LPVOID pvOut);
int32 __stdcall ExtEscape( HDC hdc, int32 iEscape, int32 cjInput, LPCSTR lpInData, int32 cjOutput, LPSTR lpOutData);
int32 __stdcall ExcludeClipRect( HDC hdc, int32 left, int32 top, int32 right, int32 bottom);
HRGN __stdcall ExtCreateRegion( const XFORM * lpx, DWORD nCount, const RGNDATA * lpData);
BOOL __stdcall ExtFloodFill( HDC hdc, int32 x, int32 y, COLORREF color, UINT type);
BOOL __stdcall FillRgn( HDC hdc, HRGN hrgn, HBRUSH hbr);
BOOL __stdcall FloodFill( HDC hdc, int32 x, int32 y, COLORREF color);
BOOL __stdcall FrameRgn( HDC hdc, HRGN hrgn, HBRUSH hbr, int32 w, int32 h);
int32 __stdcall GetROP2( HDC hdc);
BOOL __stdcall GetAspectRatioFilterEx( HDC hdc, LPSIZE lpsize);
COLORREF __stdcall GetBkColor( HDC hdc);
COLORREF __stdcall GetDCBrushColor( HDC hdc);
COLORREF __stdcall GetDCPenColor( HDC hdc);

int32 __stdcall GetBkMode( HDC hdc );

LONG __stdcall GetBitmapBits( HBITMAP hbit, LONG cb, LPVOID lpvBits );
BOOL __stdcall GetBitmapDimensionEx( HBITMAP hbit, LPSIZE lpsize);
UINT __stdcall GetBoundsRect( HDC hdc, LPRECT lprect, UINT flags);
BOOL __stdcall GetBrushOrgEx( HDC hdc, LPPOINT lppt);
BOOL __stdcall GetCharWidthA( HDC hdc, UINT iFirst, UINT iLast, LPINT lpBuffer);
BOOL __stdcall GetCharWidthW( HDC hdc, UINT iFirst, UINT iLast, LPINT lpBuffer);
BOOL __stdcall GetCharWidth32A( HDC hdc, UINT iFirst, UINT iLast, LPINT lpBuffer);
BOOL __stdcall GetCharWidth32W( HDC hdc, UINT iFirst, UINT iLast, LPINT lpBuffer);
BOOL __stdcall GetCharWidthFloatA( HDC hdc, UINT iFirst, UINT iLast, PFLOAT lpBuffer);
BOOL __stdcall GetCharWidthFloatW( HDC hdc, UINT iFirst, UINT iLast, PFLOAT lpBuffer);
BOOL __stdcall GetCharABCWidthsA( HDC hdc, UINT wFirst, UINT wLast, LPABC lpABC);
BOOL __stdcall GetCharABCWidthsW( HDC hdc, UINT wFirst, UINT wLast, LPABC lpABC);
BOOL __stdcall GetCharABCWidthsFloatA( HDC hdc, UINT iFirst, UINT iLast, LPABCFLOAT lpABC);
BOOL __stdcall GetCharABCWidthsFloatW( HDC hdc, UINT iFirst, UINT iLast, LPABCFLOAT lpABC);
int32 __stdcall GetClipBox( HDC hdc, LPRECT lprect);
int32 __stdcall GetClipRgn( HDC hdc, HRGN hrgn);
int32 __stdcall GetMetaRgn( HDC hdc, HRGN hrgn);
HGDIOBJ __stdcall GetCurrentObject( HDC hdc, UINT type);
BOOL __stdcall GetCurrentPositionEx( HDC hdc, LPPOINT lppt);
int32 __stdcall GetDeviceCaps( HDC hdc, int32 index);
int32 __stdcall GetDIBits( HDC hdc, HBITMAP hbm, UINT start, UINT cLines, LPVOID lpvBits, LPBITMAPINFO lpbmi, UINT usage);
DWORD __stdcall GetFontData(HDC hdc, DWORD dwTable, DWORD dwOffset, PVOID pvBuffer, DWORD cjBuffer );
DWORD __stdcall GetGlyphOutlineA( HDC hdc, UINT uChar, UINT fuFormat, LPGLYPHMETRICS lpgm, DWORD cjBuffer, LPVOID pvBuffer, const MAT2 *lpmat2 );
DWORD __stdcall GetGlyphOutlineW( HDC hdc, UINT uChar, UINT fuFormat, LPGLYPHMETRICS lpgm, DWORD cjBuffer, LPVOID pvBuffer, const MAT2 *lpmat2 );
int32 __stdcall GetGraphicsMode( HDC hdc);
int32 __stdcall GetMapMode( HDC hdc);
UINT __stdcall GetMetaFileBitsEx( HMETAFILE hMF, UINT cbBuffer, LPVOID lpData);
HMETAFILE __stdcall GetMetaFileA( LPCSTR lpName);
HMETAFILE __stdcall GetMetaFileW( LPCWSTR lpName);
COLORREF __stdcall GetNearestColor( HDC hdc, COLORREF color);
UINT __stdcall GetNearestPaletteIndex( HPALETTE h, COLORREF color);
DWORD __stdcall GetObjectType( HGDIOBJ h);
UINT __stdcall GetOutlineTextMetricsA( HDC hdc, UINT cjCopy, LPOUTLINETEXTMETRICA potm);
UINT __stdcall GetOutlineTextMetricsW( HDC hdc, UINT cjCopy, LPOUTLINETEXTMETRICW potm);
UINT __stdcall GetPaletteEntries( HPALETTE hpal, UINT iStart, UINT cEntries, LPPALETTEENTRY pPalEntries);
COLORREF __stdcall GetPixel( HDC hdc, int32 x, int32 y);
int32 __stdcall GetPixelFormat( HDC hdc);
int32 __stdcall GetPolyFillMode( HDC hdc);
BOOL __stdcall GetRasterizerCaps( LPRASTERIZER_STATUS lpraststat, UINT cjBytes);
int32 __stdcall GetRandomRgn(HDC hdc, HRGN hrgn, INT i);
DWORD __stdcall GetRegionData( HRGN hrgn, DWORD nCount, LPRGNDATA lpRgnData);
int32 __stdcall GetRgnBox( HRGN hrgn, LPRECT lprc);
HGDIOBJ __stdcall GetStockObject( int32 i);
int32 __stdcall GetStretchBltMode( HDC hdc);

UINT __stdcall GetSystemPaletteEntries( HDC hdc, UINT iStart, UINT cEntries, LPPALETTEENTRY pPalEntries );
UINT __stdcall GetSystemPaletteUse( HDC hdc);
int32 __stdcall GetTextCharacterExtra( HDC hdc);
UINT __stdcall GetTextAlign( HDC hdc);
COLORREF __stdcall GetTextColor( HDC hdc);

BOOL __stdcall GetTextExtentPointA( HDC hdc, LPCSTR lpString, int32 c, LPSIZE lpsz );

BOOL __stdcall GetTextExtentPointW( HDC hdc, LPCWSTR lpString, int32 c, LPSIZE lpsz );

BOOL __stdcall GetTextExtentPoint32A( HDC hdc, LPCSTR lpString, int32 c, LPSIZE psizl );

BOOL __stdcall GetTextExtentPoint32W( HDC hdc, LPCWSTR lpString, int32 c, LPSIZE psizl );

BOOL __stdcall GetTextExtentExPointA( HDC hdc, LPCSTR lpszString, int32 cchString, int32 nMaxExtent, LPINT lpnFit, LPINT lpnDx, LPSIZE lpSize );

BOOL __stdcall GetTextExtentExPointW( HDC hdc, LPCWSTR lpszString, int32 cchString, int32 nMaxExtent, LPINT lpnFit, LPINT lpnDx, LPSIZE lpSize );
int32 __stdcall GetTextCharset( HDC hdc);
int32 __stdcall GetTextCharsetInfo( HDC hdc, LPFONTSIGNATURE lpSig, DWORD dwFlags);
BOOL __stdcall TranslateCharsetInfo( DWORD *lpSrc, LPCHARSETINFO lpCs, DWORD dwFlags);
DWORD __stdcall GetFontLanguageInfo( HDC hdc);
DWORD __stdcall GetCharacterPlacementA( HDC hdc, LPCSTR lpString, int32 nCount, int32 nMexExtent, LPGCP_RESULTSA lpResults, DWORD dwFlags);
DWORD __stdcall GetCharacterPlacementW( HDC hdc, LPCWSTR lpString, int32 nCount, int32 nMexExtent, LPGCP_RESULTSW lpResults, DWORD dwFlags);
typedef struct tagWCRANGE {
<field name="wcLow"><WCHAR /></field>
<field name="cGlyphs"><USHORT /></field>
} WCRANGE, *PWCRANGE, *LPWCRANGE;
typedef struct tagGLYPHSET {
<field name="cbThis"><DWORD /></field>
<field name="flAccel"><DWORD /></field>
<field name="cGlyphsSupported"><DWORD /></field>
<field name="cRanges"><DWORD /></field>
<field name="ranges"><arr length="1"><WCRANGE /></arr></field>
} GLYPHSET, *PGLYPHSET, *LPGLYPHSET;
DWORD __stdcall GetFontUnicodeRanges( HDC hdc, LPGLYPHSET lpgs);
DWORD __stdcall GetGlyphIndicesA( HDC hdc, LPCSTR lpstr, int32 c, LPWORD pgi, DWORD fl);
DWORD __stdcall GetGlyphIndicesW( HDC hdc, LPCWSTR lpstr, int32 c, LPWORD pgi, DWORD fl);
BOOL __stdcall GetTextExtentPointI( HDC hdc, LPWORD pgiIn, int32 cgi, LPSIZE psize);
BOOL __stdcall GetTextExtentExPointI(HDC hdc, LPWORD lpwszString, int32 cwchString, int32 nMaxExtent, LPINT lpnFit, LPINT lpnDx, LPSIZE lpSize );
BOOL __stdcall GetCharWidthI( HDC hdc, UINT giFirst, UINT cgi, LPWORD pgi, LPINT piWidths );
BOOL __stdcall GetCharABCWidthsI( HDC hdc, UINT giFirst, UINT cgi, LPWORD pgi, LPABC pabc );
typedef struct tagDESIGNVECTOR {
<field name="dvReserved"><DWORD /></field>
<field name="dvNumAxes"><DWORD /></field>
<field name="dvValues"><arr length="16"><LONG /></arr></field>
} DESIGNVECTOR, *PDESIGNVECTOR, *LPDESIGNVECTOR;
int32 __stdcall AddFontResourceExA( LPCSTR name, DWORD fl, PVOID res);
int32 __stdcall AddFontResourceExW( LPCWSTR name, DWORD fl, PVOID res);
BOOL __stdcall RemoveFontResourceExA( LPCSTR name, DWORD fl, PVOID pdv);
BOOL __stdcall RemoveFontResourceExW( LPCWSTR name, DWORD fl, PVOID pdv);
HANDLE __stdcall AddFontMemResourceEx( PVOID pFileView, DWORD cjSize, PVOID pvResrved, DWORD* pNumFonts);
BOOL __stdcall RemoveFontMemResourceEx( HANDLE h);
typedef struct tagAXISINFOA {
<field name="axMinValue"><LONG /></field>
<field name="axMaxValue"><LONG /></field>
<field name="axAxisName"><arr length="16"><BYTE /></arr></field>
} AXISINFOA, *PAXISINFOA, *LPAXISINFOA;
typedef struct tagAXISINFOW {
<field name="axMinValue"><LONG /></field>
<field name="axMaxValue"><LONG /></field>
<field name="axAxisName"><arr length="16"><WCHAR /></arr></field>
} AXISINFOW, *PAXISINFOW, *LPAXISINFOW;
<typedef name="AXISINFO"><AXISINFOA /></typedef>
<typedef name="PAXISINFO"><PAXISINFOA /></typedef>
<typedef name="LPAXISINFO"><LPAXISINFOA /></typedef>
typedef struct tagAXESLISTA {
<field name="axlReserved"><DWORD /></field>
<field name="axlNumAxes"><DWORD /></field>
<field name="axlAxisInfo"><arr length="16"><AXISINFOA /></arr></field>
} AXESLISTA, *PAXESLISTA, *LPAXESLISTA;
typedef struct tagAXESLISTW {
<field name="axlReserved"><DWORD /></field>
<field name="axlNumAxes"><DWORD /></field>
<field name="axlAxisInfo"><arr length="16"><AXISINFOW /></arr></field>
} AXESLISTW, *PAXESLISTW, *LPAXESLISTW;
<typedef name="AXESLIST"><AXESLISTA /></typedef>
<typedef name="PAXESLIST"><PAXESLISTA /></typedef>
<typedef name="LPAXESLIST"><LPAXESLISTA /></typedef>
typedef struct tagENUMLOGFONTEXDVA {
<field name="elfEnumLogfontEx"><ENUMLOGFONTEXA /></field>
<field name="elfDesignVector"><DESIGNVECTOR /></field>
} ENUMLOGFONTEXDVA, *PENUMLOGFONTEXDVA, *LPENUMLOGFONTEXDVA;
typedef struct tagENUMLOGFONTEXDVW {
<field name="elfEnumLogfontEx"><ENUMLOGFONTEXW /></field>
<field name="elfDesignVector"><DESIGNVECTOR /></field>
} ENUMLOGFONTEXDVW, *PENUMLOGFONTEXDVW, *LPENUMLOGFONTEXDVW;
<typedef name="ENUMLOGFONTEXDV"><ENUMLOGFONTEXDVA /></typedef>
<typedef name="PENUMLOGFONTEXDV"><PENUMLOGFONTEXDVA /></typedef>
<typedef name="LPENUMLOGFONTEXDV"><LPENUMLOGFONTEXDVA /></typedef>
HFONT __stdcall CreateFontIndirectExA( const ENUMLOGFONTEXDVA *);
HFONT __stdcall CreateFontIndirectExW( const ENUMLOGFONTEXDVW *);
typedef struct tagENUMTEXTMETRICA {
<field name="etmNewTextMetricEx"><NEWTEXTMETRICEXA /></field>
<field name="etmAxesList"><AXESLISTA /></field>
} ENUMTEXTMETRICA, *PENUMTEXTMETRICA, *LPENUMTEXTMETRICA;
typedef struct tagENUMTEXTMETRICW {
<field name="etmNewTextMetricEx"><NEWTEXTMETRICEXW /></field>
<field name="etmAxesList"><AXESLISTW /></field>
} ENUMTEXTMETRICW, *PENUMTEXTMETRICW, *LPENUMTEXTMETRICW;
<typedef name="ENUMTEXTMETRIC"><ENUMTEXTMETRICA /></typedef>
<typedef name="PENUMTEXTMETRIC"><PENUMTEXTMETRICA /></typedef>
<typedef name="LPENUMTEXTMETRIC"><LPENUMTEXTMETRICA /></typedef>
BOOL __stdcall GetViewportExtEx( HDC hdc, LPSIZE lpsize);
BOOL __stdcall GetViewportOrgEx( HDC hdc, LPPOINT lppoint);
BOOL __stdcall GetWindowExtEx( HDC hdc, LPSIZE lpsize);
BOOL __stdcall GetWindowOrgEx( HDC hdc, LPPOINT lppoint);
int32 __stdcall IntersectClipRect( HDC hdc, int32 left, int32 top, int32 right, int32 bottom);
BOOL __stdcall InvertRgn( HDC hdc, HRGN hrgn);
BOOL __stdcall LineDDA( int32 xStart, int32 yStart, int32 xEnd, int32 yEnd, LINEDDAPROC lpProc, LPARAM data);
BOOL __stdcall LineTo( HDC hdc, int32 x, int32 y);
BOOL __stdcall MaskBlt( HDC hdcDest, int32 xDest, int32 yDest, int32 width, int32 height, HDC hdcSrc, int32 xSrc, int32 ySrc, HBITMAP hbmMask, int32 xMask, int32 yMask, DWORD rop);
BOOL __stdcall PlgBlt( HDC hdcDest, const POINT * lpPoint, HDC hdcSrc, int32 xSrc, int32 ySrc, int32 width, int32 height, HBITMAP hbmMask, int32 xMask, int32 yMask);
int32 __stdcall OffsetClipRgn( HDC hdc, int32 x, int32 y);
int32 __stdcall OffsetRgn( HRGN hrgn, int32 x, int32 y);
BOOL __stdcall PatBlt( HDC hdc, int32 x, int32 y, int32 w, int32 h, DWORD rop);
BOOL __stdcall Pie( HDC hdc, int32 left, int32 top, int32 right, int32 bottom, int32 xr1, int32 yr1, int32 xr2, int32 yr2);
BOOL __stdcall PlayMetaFile( HDC hdc, HMETAFILE hmf);
BOOL __stdcall PaintRgn( HDC hdc, HRGN hrgn);
BOOL __stdcall PolyPolygon( HDC hdc, const POINT *apt, const INT *asz, int32 csz);
BOOL __stdcall PtInRegion( HRGN hrgn, int32 x, int32 y);
BOOL __stdcall PtVisible( HDC hdc, int32 x, int32 y);
BOOL __stdcall RectInRegion( HRGN hrgn, const RECT * lprect);
BOOL __stdcall RectVisible( HDC hdc, const RECT * lprect);
BOOL __stdcall Rectangle( HDC hdc, int32 left, int32 top, int32 right, int32 bottom);
BOOL __stdcall RestoreDC( HDC hdc, int32 nSavedDC);
HDC __stdcall ResetDCA( HDC hdc, const DEVMODEA * lpdm);
HDC __stdcall ResetDCW( HDC hdc, const DEVMODEW * lpdm);
UINT __stdcall RealizePalette( HDC hdc);
BOOL __stdcall RemoveFontResourceA( LPCSTR lpFileName);
BOOL __stdcall RemoveFontResourceW( LPCWSTR lpFileName);
BOOL __stdcall RoundRect( HDC hdc, int32 left, int32 top, int32 right, int32 bottom, int32 width, int32 height);
BOOL __stdcall ResizePalette( HPALETTE hpal, UINT n);
int32 __stdcall SaveDC( HDC hdc);
int32 __stdcall SelectClipRgn( HDC hdc, HRGN hrgn);
int32 __stdcall ExtSelectClipRgn( HDC hdc, HRGN hrgn, int32 mode);
int32 __stdcall SetMetaRgn( HDC hdc);
HGDIOBJ __stdcall SelectObject( HDC hdc, HGDIOBJ h);
HPALETTE __stdcall SelectPalette( HDC hdc, HPALETTE hPal, BOOL bForceBkgd);
COLORREF __stdcall SetBkColor( HDC hdc, COLORREF color);
COLORREF __stdcall SetDCBrushColor( HDC hdc, COLORREF color);
COLORREF __stdcall SetDCPenColor( HDC hdc, COLORREF color);
int32 __stdcall SetBkMode( HDC hdc, int32 mode);

LONG __stdcall SetBitmapBits( HBITMAP hbm, DWORD cb, const void *pvBits);
UINT __stdcall SetBoundsRect( HDC hdc, const RECT * lprect, UINT flags);
int32 __stdcall SetDIBits( HDC hdc, HBITMAP hbm, UINT start, UINT cLines, const void *lpBits, const BITMAPINFO * lpbmi, UINT ColorUse);
int32 __stdcall SetDIBitsToDevice( HDC hdc, int32 xDest, int32 yDest, DWORD w, DWORD h, int32 xSrc, int32 ySrc, UINT StartScan, UINT cLines, const void * lpvBits, const BITMAPINFO * lpbmi, UINT ColorUse);
DWORD __stdcall SetMapperFlags( HDC hdc, DWORD flags);
int32 __stdcall SetGraphicsMode( HDC hdc, int32 iMode);
int32 __stdcall SetMapMode( HDC hdc, int32 iMode);
DWORD __stdcall SetLayout( HDC hdc, DWORD l);
DWORD __stdcall GetLayout( HDC hdc);
HMETAFILE __stdcall SetMetaFileBitsEx( UINT cbBuffer, const BYTE *lpData);
UINT __stdcall SetPaletteEntries( HPALETTE hpal, UINT iStart, UINT cEntries, const PALETTEENTRY *pPalEntries);
COLORREF __stdcall SetPixel( HDC hdc, int32 x, int32 y, COLORREF color);
BOOL __stdcall SetPixelV( HDC hdc, int32 x, int32 y, COLORREF color);
BOOL __stdcall SetPixelFormat( HDC hdc, int32 format, const PIXELFORMATDESCRIPTOR * ppfd);
int32 __stdcall SetPolyFillMode( HDC hdc, int32 mode);
BOOL __stdcall StretchBlt( HDC hdcDest, int32 xDest, int32 yDest, int32 wDest, int32 hDest, HDC hdcSrc, int32 xSrc, int32 ySrc, int32 wSrc, int32 hSrc, DWORD rop);
BOOL __stdcall SetRectRgn( HRGN hrgn, int32 left, int32 top, int32 right, int32 bottom);
int32 __stdcall StretchDIBits( HDC hdc, int32 xDest, int32 yDest, int32 DestWidth, int32 DestHeight, int32 xSrc, int32 ySrc, int32 SrcWidth, int32 SrcHeight, const void * lpBits, const BITMAPINFO * lpbmi, UINT iUsage, DWORD rop);
int32 __stdcall SetROP2( HDC hdc, int32 rop2);
int32 __stdcall SetStretchBltMode( HDC hdc, int32 mode);
UINT __stdcall SetSystemPaletteUse( HDC hdc, UINT use);
int32 __stdcall SetTextCharacterExtra( HDC hdc, int32 extra);
COLORREF __stdcall SetTextColor( HDC hdc, COLORREF color);
UINT __stdcall SetTextAlign( HDC hdc, UINT align);
BOOL __stdcall SetTextJustification( HDC hdc, int32 extra, int32 count);
BOOL __stdcall UpdateColors( HDC hdc);
<typedef name="COLOR16"><USHORT /></typedef>
typedef struct _TRIVERTEX {
<field name="x"><LONG /></field>
<field name="y"><LONG /></field>
<field name="Red"><COLOR16 /></field>
<field name="Green"><COLOR16 /></field>
<field name="Blue"><COLOR16 /></field>
<field name="Alpha"><COLOR16 /></field>
}TRIVERTEX, *PTRIVERTEX, *LPTRIVERTEX;
typedef struct _GRADIENT_TRIANGLE {
<field name="Vertex1"><ULONG /></field>
<field name="Vertex2"><ULONG /></field>
<field name="Vertex3"><ULONG /></field>
} GRADIENT_TRIANGLE, *PGRADIENT_TRIANGLE, *LPGRADIENT_TRIANGLE;
typedef struct _GRADIENT_RECT {
<field name="UpperLeft"><ULONG /></field>
<field name="LowerRight"><ULONG /></field>
}GRADIENT_RECT, *PGRADIENT_RECT, *LPGRADIENT_RECT;
typedef struct _BLENDFUNCTION {
<field name="BlendOp"><BYTE /></field>
<field name="BlendFlags"><BYTE /></field>
<field name="SourceConstantAlpha"><BYTE /></field>
<field name="AlphaFormat"><BYTE /></field>
}BLENDFUNCTION, *PBLENDFUNCTION;
BOOL __stdcall AlphaBlend( HDC hdcDest, int32 xoriginDest, int32 yoriginDest, int32 wDest, int32 hDest, HDC hdcSrc, int32 xoriginSrc, int32 yoriginSrc, int32 wSrc, int32 hSrc, BLENDFUNCTION ftn);
BOOL __stdcall TransparentBlt( HDC hdcDest, int32 xoriginDest, int32 yoriginDest, int32 wDest, int32 hDest, HDC hdcSrc, int32 xoriginSrc, int32 yoriginSrc, int32 wSrc, int32 hSrc, UINT crTransparent);

BOOL __stdcall GradientFill( HDC hdc, PTRIVERTEX pVertex, ULONG nVertex, PVOID pMesh, ULONG nMesh, ULONG ulMode );
BOOL __stdcall GdiAlphaBlend( HDC hdcDest, int32 xoriginDest, int32 yoriginDest, int32 wDest, int32 hDest, HDC hdcSrc, int32 xoriginSrc, int32 yoriginSrc, int32 wSrc, int32 hSrc, BLENDFUNCTION ftn);
BOOL __stdcall GdiTransparentBlt( HDC hdcDest, int32 xoriginDest, int32 yoriginDest, int32 wDest, int32 hDest, HDC hdcSrc, int32 xoriginSrc, int32 yoriginSrc, int32 wSrc, int32 hSrc, UINT crTransparent);
BOOL __stdcall GdiGradientFill( HDC hdc, PTRIVERTEX pVertex, ULONG nVertex, PVOID pMesh, ULONG nCount, ULONG ulMode);
BOOL __stdcall PlayMetaFileRecord( HDC hdc, LPHANDLETABLE lpHandleTable, LPMETARECORD lpMR, UINT noObjs);
typedef int32 (__stdcall* MFENUMPROC)( HDC hdc, HANDLETABLE * lpht, METARECORD * lpMR, int32 nObj, LPARAM param);
BOOL __stdcall EnumMetaFile( HDC hdc, HMETAFILE hmf, MFENUMPROC proc, LPARAM param);
typedef int32 (__stdcall* ENHMFENUMPROC)( HDC hdc, HANDLETABLE * lpht, const ENHMETARECORD * lpmr, int32 nHandles, LPARAM data);
HENHMETAFILE __stdcall CloseEnhMetaFile( HDC hdc);
HENHMETAFILE __stdcall CopyEnhMetaFileA( HENHMETAFILE hEnh, LPCSTR lpFileName);
HENHMETAFILE __stdcall CopyEnhMetaFileW( HENHMETAFILE hEnh, LPCWSTR lpFileName);
HDC __stdcall CreateEnhMetaFileA( HDC hdc, LPCSTR lpFilename, const RECT *lprc, LPCSTR lpDesc);
HDC __stdcall CreateEnhMetaFileW( HDC hdc, LPCWSTR lpFilename, const RECT *lprc, LPCWSTR lpDesc);
BOOL __stdcall DeleteEnhMetaFile( HENHMETAFILE hmf);
BOOL __stdcall EnumEnhMetaFile( HDC hdc, HENHMETAFILE hmf, ENHMFENUMPROC proc, LPVOID param, const RECT * lpRect);
HENHMETAFILE __stdcall GetEnhMetaFileA( LPCSTR lpName);
HENHMETAFILE __stdcall GetEnhMetaFileW( LPCWSTR lpName);
UINT __stdcall GetEnhMetaFileBits( HENHMETAFILE hEMF, UINT nSize, LPBYTE lpData);
UINT __stdcall GetEnhMetaFileDescriptionA( HENHMETAFILE hemf, UINT cchBuffer, LPSTR lpDescription);
UINT __stdcall GetEnhMetaFileDescriptionW( HENHMETAFILE hemf, UINT cchBuffer, LPWSTR lpDescription);
UINT __stdcall GetEnhMetaFileHeader( HENHMETAFILE hemf, UINT nSize, LPENHMETAHEADER lpEnhMetaHeader);
UINT __stdcall GetEnhMetaFilePaletteEntries( HENHMETAFILE hemf, UINT nNumEntries, LPPALETTEENTRY lpPaletteEntries);
UINT __stdcall GetEnhMetaFilePixelFormat( HENHMETAFILE hemf, UINT cbBuffer, PIXELFORMATDESCRIPTOR *ppfd);
UINT __stdcall GetWinMetaFileBits( HENHMETAFILE hemf, UINT cbData16, LPBYTE pData16, INT iMapMode, HDC hdcRef);
BOOL __stdcall PlayEnhMetaFile( HDC hdc, HENHMETAFILE hmf, const RECT * lprect);
BOOL __stdcall PlayEnhMetaFileRecord( HDC hdc, LPHANDLETABLE pht, const ENHMETARECORD *pmr, UINT cht);
HENHMETAFILE __stdcall SetEnhMetaFileBits( UINT nSize, const BYTE * pb);
HENHMETAFILE __stdcall SetWinMetaFileBits( UINT nSize, const BYTE *lpMeta16Data, HDC hdcRef, const METAFILEPICT *lpMFP);
BOOL __stdcall GdiComment( HDC hdc, UINT nSize, const BYTE *lpData);
BOOL __stdcall GetTextMetricsA( HDC hdc, LPTEXTMETRICA lptm);
BOOL __stdcall GetTextMetricsW( HDC hdc, LPTEXTMETRICW lptm);
typedef struct tagDIBSECTION {
<field name="dsBm"><BITMAP /></field>
<field name="dsBmih"><BITMAPINFOHEADER /></field>
<field name="dsBitfields"><arr length="3"><DWORD /></arr></field>
<field name="dshSection"><HANDLE /></field>
<field name="dsOffset"><DWORD /></field>
} DIBSECTION, *LPDIBSECTION, *PDIBSECTION;
BOOL __stdcall AngleArc( HDC hdc, int32 x, int32 y, DWORD r, FLOAT StartAngle, FLOAT SweepAngle);
BOOL __stdcall PolyPolyline( HDC hdc, const POINT *apt, const DWORD *asz, DWORD csz);
BOOL __stdcall GetWorldTransform( HDC hdc, LPXFORM lpxf);
BOOL __stdcall SetWorldTransform( HDC hdc, const XFORM * lpxf);
BOOL __stdcall ModifyWorldTransform( HDC hdc, const XFORM * lpxf, DWORD mode);
BOOL __stdcall CombineTransform( LPXFORM lpxfOut, const XFORM *lpxf1, const XFORM *lpxf2);
HBITMAP __stdcall CreateDIBSection( HDC hdc, const BITMAPINFO *lpbmi, UINT usage, void **ppvBits, HANDLE hSection, DWORD offset);
UINT __stdcall GetDIBColorTable( HDC hdc, UINT iStart, UINT cEntries, RGBQUAD *prgbq);
UINT __stdcall SetDIBColorTable( HDC hdc, UINT iStart, UINT cEntries, const RGBQUAD *prgbq);
typedef struct tagCOLORADJUSTMENT {
<field name="caSize"><WORD /></field>
<field name="caFlags"><WORD /></field>
<field name="caIlluminantIndex"><WORD /></field>
<field name="caRedGamma"><WORD /></field>
<field name="caGreenGamma"><WORD /></field>
<field name="caBlueGamma"><WORD /></field>
<field name="caReferenceBlack"><WORD /></field>
<field name="caReferenceWhite"><WORD /></field>
<field name="caContrast"><SHORT /></field>
<field name="caBrightness"><SHORT /></field>
<field name="caColorfulness"><SHORT /></field>
<field name="caRedGreenTint"><SHORT /></field>
} COLORADJUSTMENT, *PCOLORADJUSTMENT, *LPCOLORADJUSTMENT;
BOOL __stdcall SetColorAdjustment( HDC hdc, const COLORADJUSTMENT *lpca);
BOOL __stdcall GetColorAdjustment( HDC hdc, LPCOLORADJUSTMENT lpca);
HPALETTE __stdcall CreateHalftonePalette( HDC hdc);
typedef BOOL (__stdcall* ABORTPROC)( HDC, int32);
typedef struct _DOCINFOA {
<field name="cbSize"><int32 /></field>
<field name="lpszDocName"><LPCSTR /></field>
<field name="lpszOutput"><LPCSTR /></field>
<field name="lpszDatatype"><LPCSTR /></field>
<field name="fwType"><DWORD /></field>
} DOCINFOA, *LPDOCINFOA;
typedef struct _DOCINFOW {
<field name="cbSize"><int32 /></field>
<field name="lpszDocName"><LPCWSTR /></field>
<field name="lpszOutput"><LPCWSTR /></field>
<field name="lpszDatatype"><LPCWSTR /></field>
<field name="fwType"><DWORD /></field>
} DOCINFOW, *LPDOCINFOW;
<typedef name="DOCINFO"><DOCINFOA /></typedef>
<typedef name="LPDOCINFO"><LPDOCINFOA /></typedef>
int32 __stdcall StartDocA( HDC hdc, const DOCINFOA *lpdi);
int32 __stdcall StartDocW( HDC hdc, const DOCINFOW *lpdi);
int32 __stdcall EndDoc( HDC hdc);
int32 __stdcall StartPage( HDC hdc);
int32 __stdcall EndPage( HDC hdc);
int32 __stdcall AbortDoc( HDC hdc);
int32 __stdcall SetAbortProc( HDC hdc, ABORTPROC proc);
BOOL __stdcall AbortPath( HDC hdc);
BOOL __stdcall ArcTo( HDC hdc, int32 left, int32 top, int32 right, int32 bottom, int32 xr1, int32 yr1, int32 xr2, int32 yr2);
BOOL __stdcall BeginPath( HDC hdc);
BOOL __stdcall CloseFigure( HDC hdc);
BOOL __stdcall EndPath( HDC hdc);
BOOL __stdcall FillPath( HDC hdc);
BOOL __stdcall FlattenPath( HDC hdc);
int32 __stdcall GetPath( HDC hdc, LPPOINT apt, LPBYTE aj, int32 cpt);
HRGN __stdcall PathToRegion( HDC hdc);
BOOL __stdcall PolyDraw( HDC hdc, const POINT * apt, const BYTE * aj, int32 cpt);
BOOL __stdcall SelectClipPath( HDC hdc, int32 mode);
int32 __stdcall SetArcDirection( HDC hdc, int32 dir);
BOOL __stdcall SetMiterLimit( HDC hdc, FLOAT limit, PFLOAT old);
BOOL __stdcall StrokeAndFillPath( HDC hdc);
BOOL __stdcall StrokePath( HDC hdc);
BOOL __stdcall WidenPath( HDC hdc);
HPEN __stdcall ExtCreatePen( DWORD iPenStyle, DWORD cWidth, const LOGBRUSH *plbrush, DWORD cStyle, const DWORD *pstyle);
BOOL __stdcall GetMiterLimit( HDC hdc, PFLOAT plimit);
int32 __stdcall GetArcDirection( HDC hdc);
int32 __stdcall GetObjectA( HANDLE h, int32 c, LPVOID pv);
int32 __stdcall GetObjectW( HANDLE h, int32 c, LPVOID pv);
BOOL __stdcall MoveToEx( HDC hdc, int32 x, int32 y, LPPOINT lppt);
BOOL __stdcall TextOutA( HDC hdc, int32 x, int32 y, LPCSTR lpString, int32 c);
BOOL __stdcall TextOutW( HDC hdc, int32 x, int32 y, LPCWSTR lpString, int32 c);
BOOL __stdcall ExtTextOutA( HDC hdc, int32 x, int32 y, UINT options, const RECT * lprect, LPCSTR lpString, UINT c, const INT * lpDx);
BOOL __stdcall ExtTextOutW( HDC hdc, int32 x, int32 y, UINT options, const RECT * lprect, LPCWSTR lpString, UINT c, const INT * lpDx);
BOOL __stdcall PolyTextOutA( HDC hdc, const POLYTEXTA * ppt, int32 nstrings);
BOOL __stdcall PolyTextOutW( HDC hdc, const POLYTEXTW * ppt, int32 nstrings);
HRGN __stdcall CreatePolygonRgn( const POINT *pptl, int32 cPoint, int32 iMode);
BOOL __stdcall DPtoLP( HDC hdc, LPPOINT lppt, int32 c);
BOOL __stdcall LPtoDP( HDC hdc, LPPOINT lppt, int32 c);
BOOL __stdcall Polygon( HDC hdc, const POINT *apt, int32 cpt);
BOOL __stdcall Polyline( HDC hdc, const POINT *apt, int32 cpt);
BOOL __stdcall PolyBezier( HDC hdc, const POINT * apt, DWORD cpt);
BOOL __stdcall PolyBezierTo( HDC hdc, const POINT * apt, DWORD cpt);
BOOL __stdcall PolylineTo( HDC hdc, const POINT * apt, DWORD cpt);
BOOL __stdcall SetViewportExtEx( HDC hdc, int32 x, int32 y, LPSIZE lpsz);
BOOL __stdcall SetViewportOrgEx( HDC hdc, int32 x, int32 y, LPPOINT lppt);
BOOL __stdcall SetWindowExtEx( HDC hdc, int32 x, int32 y, LPSIZE lpsz);
BOOL __stdcall SetWindowOrgEx( HDC hdc, int32 x, int32 y, LPPOINT lppt);
BOOL __stdcall OffsetViewportOrgEx( HDC hdc, int32 x, int32 y, LPPOINT lppt);
BOOL __stdcall OffsetWindowOrgEx( HDC hdc, int32 x, int32 y, LPPOINT lppt);
BOOL __stdcall ScaleViewportExtEx( HDC hdc, int32 xn, int32 dx, int32 yn, int32 yd, LPSIZE lpsz);
BOOL __stdcall ScaleWindowExtEx( HDC hdc, int32 xn, int32 xd, int32 yn, int32 yd, LPSIZE lpsz);
BOOL __stdcall SetBitmapDimensionEx( HBITMAP hbm, int32 w, int32 h, LPSIZE lpsz);
BOOL __stdcall SetBrushOrgEx( HDC hdc, int32 x, int32 y, LPPOINT lppt);
int32 __stdcall GetTextFaceA( HDC hdc, int32 c, LPSTR lpName);
int32 __stdcall GetTextFaceW( HDC hdc, int32 c, LPWSTR lpName);
typedef struct tagKERNINGPAIR {
<field name="wFirst"><WORD /></field>
<field name="wSecond"><WORD /></field>
<field name="iKernAmount"><int32 /></field>
} KERNINGPAIR, *LPKERNINGPAIR;
DWORD __stdcall GetKerningPairsA( HDC hdc, DWORD nPairs, LPKERNINGPAIR lpKernPair);
DWORD __stdcall GetKerningPairsW( HDC hdc, DWORD nPairs, LPKERNINGPAIR lpKernPair);
BOOL __stdcall GetDCOrgEx( HDC hdc, LPPOINT lppt);
BOOL __stdcall FixBrushOrgEx( HDC hdc, int32 x, int32 y, LPPOINT ptl);
BOOL __stdcall UnrealizeObject( HGDIOBJ h);
BOOL __stdcall GdiFlush();
DWORD __stdcall GdiSetBatchLimit( DWORD dw);
DWORD __stdcall GdiGetBatchLimit();
typedef int32 (__stdcall* ICMENUMPROCA)(LPSTR, LPARAM);
typedef int32 (__stdcall* ICMENUMPROCW)(LPWSTR, LPARAM);
int32 __stdcall SetICMMode( HDC hdc, int32 mode);
BOOL __stdcall CheckColorsInGamut( HDC hdc, LPRGBTRIPLE lpRGBTriple, LPVOID dlpBuffer, DWORD nCount);
HCOLORSPACE __stdcall GetColorSpace( HDC hdc);
BOOL __stdcall GetLogColorSpaceA( HCOLORSPACE hColorSpace, LPLOGCOLORSPACEA lpBuffer, DWORD nSize);
BOOL __stdcall GetLogColorSpaceW( HCOLORSPACE hColorSpace, LPLOGCOLORSPACEW lpBuffer, DWORD nSize);
HCOLORSPACE __stdcall CreateColorSpaceA( LPLOGCOLORSPACEA lplcs);
HCOLORSPACE __stdcall CreateColorSpaceW( LPLOGCOLORSPACEW lplcs);
HCOLORSPACE __stdcall SetColorSpace( HDC hdc, HCOLORSPACE hcs);
BOOL __stdcall DeleteColorSpace( HCOLORSPACE hcs);
BOOL __stdcall GetICMProfileA( HDC hdc, LPDWORD pBufSize, LPSTR pszFilename);
BOOL __stdcall GetICMProfileW( HDC hdc, LPDWORD pBufSize, LPWSTR pszFilename);
BOOL __stdcall SetICMProfileA( HDC hdc, LPSTR lpFileName);
BOOL __stdcall SetICMProfileW( HDC hdc, LPWSTR lpFileName);
BOOL __stdcall GetDeviceGammaRamp( HDC hdc, LPVOID lpRamp);
BOOL __stdcall SetDeviceGammaRamp( HDC hdc, LPVOID lpRamp);
BOOL __stdcall ColorMatchToTarget( HDC hdc, HDC hdcTarget, DWORD action);
int32 __stdcall EnumICMProfilesA( HDC hdc, ICMENUMPROCA proc, LPARAM param);
int32 __stdcall EnumICMProfilesW( HDC hdc, ICMENUMPROCW proc, LPARAM param);
BOOL __stdcall UpdateICMRegKeyA( DWORD reserved, LPSTR lpszCMID, LPSTR lpszFileName, UINT command);
BOOL __stdcall UpdateICMRegKeyW( DWORD reserved, LPWSTR lpszCMID, LPWSTR lpszFileName, UINT command);
BOOL __stdcall ColorCorrectPalette( HDC hdc, HPALETTE hPal, DWORD deFirst, DWORD num);
typedef struct tagEMR {
<field name="iType"><DWORD /></field>
<field name="nSize"><DWORD /></field>
} EMR, *PEMR;
typedef struct tagEMRTEXT {
<field name="ptlReference"><POINTL /></field>
<field name="nChars"><DWORD /></field>
<field name="offString"><DWORD /></field>
<field name="fOptions"><DWORD /></field>
<field name="rcl"><RECTL /></field>
<field name="offDx"><DWORD /></field>
} EMRTEXT, *PEMRTEXT;
typedef struct tagABORTPATH {
<field name="emr"><EMR /></field>
} EMRABORTPATH, *PEMRABORTPATH, EMRBEGINPATH, *PEMRBEGINPATH, EMRENDPATH, *PEMRENDPATH, EMRCLOSEFIGURE, *PEMRCLOSEFIGURE, EMRFLATTENPATH, *PEMRFLATTENPATH, EMRWIDENPATH, *PEMRWIDENPATH, EMRSETMETARGN, *PEMRSETMETARGN, EMRSAVEDC, *PEMRSAVEDC, EMRREALIZEPALETTE, *PEMRREALIZEPALETTE;
typedef struct tagEMRSELECTCLIPPATH {
<field name="emr"><EMR /></field>
<field name="iMode"><DWORD /></field>
} EMRSELECTCLIPPATH, *PEMRSELECTCLIPPATH, EMRSETBKMODE, *PEMRSETBKMODE, EMRSETMAPMODE, *PEMRSETMAPMODE, EMRSETLAYOUT, *PEMRSETLAYOUT, EMRSETPOLYFILLMODE, *PEMRSETPOLYFILLMODE, EMRSETROP2, *PEMRSETROP2, EMRSETSTRETCHBLTMODE, *PEMRSETSTRETCHBLTMODE, EMRSETICMMODE, *PEMRSETICMMODE, EMRSETTEXTALIGN, *PEMRSETTEXTALIGN;
typedef struct tagEMRSETMITERLIMIT {
<field name="emr"><EMR /></field>
<field name="eMiterLimit"><FLOAT /></field>
} EMRSETMITERLIMIT, *PEMRSETMITERLIMIT;
typedef struct tagEMRRESTOREDC {
<field name="emr"><EMR /></field>
<field name="iRelative"><LONG /></field>
} EMRRESTOREDC, *PEMRRESTOREDC;
typedef struct tagEMRSETARCDIRECTION {
<field name="emr"><EMR /></field>
<field name="iArcDirection"><DWORD /></field>
} EMRSETARCDIRECTION, *PEMRSETARCDIRECTION;
typedef struct tagEMRSETMAPPERFLAGS {
<field name="emr"><EMR /></field>
<field name="dwFlags"><DWORD /></field>
} EMRSETMAPPERFLAGS, *PEMRSETMAPPERFLAGS;
typedef struct tagEMRSETTEXTCOLOR {
<field name="emr"><EMR /></field>
<field name="crColor"><COLORREF /></field>
} EMRSETBKCOLOR, *PEMRSETBKCOLOR, EMRSETTEXTCOLOR, *PEMRSETTEXTCOLOR;
typedef struct tagEMRSELECTOBJECT {
<field name="emr"><EMR /></field>
<field name="ihObject"><DWORD /></field>
} EMRSELECTOBJECT, *PEMRSELECTOBJECT, EMRDELETEOBJECT, *PEMRDELETEOBJECT;
typedef struct tagEMRSELECTPALETTE {
<field name="emr"><EMR /></field>
<field name="ihPal"><DWORD /></field>
} EMRSELECTPALETTE, *PEMRSELECTPALETTE;
typedef struct tagEMRRESIZEPALETTE {
<field name="emr"><EMR /></field>
<field name="ihPal"><DWORD /></field>
<field name="cEntries"><DWORD /></field>
} EMRRESIZEPALETTE, *PEMRRESIZEPALETTE;
typedef struct tagEMRSETPALETTEENTRIES {
<field name="emr"><EMR /></field>
<field name="ihPal"><DWORD /></field>
<field name="iStart"><DWORD /></field>
<field name="cEntries"><DWORD /></field>
<field name="aPalEntries"><arr length="1"><PALETTEENTRY /></arr></field>
} EMRSETPALETTEENTRIES, *PEMRSETPALETTEENTRIES;
typedef struct tagEMRSETCOLORADJUSTMENT {
<field name="emr"><EMR /></field>
<field name="ColorAdjustment"><COLORADJUSTMENT /></field>
} EMRSETCOLORADJUSTMENT, *PEMRSETCOLORADJUSTMENT;
typedef struct tagEMRGDICOMMENT {
<field name="emr"><EMR /></field>
<field name="cbData"><DWORD /></field>
<field name="Data"><arr length="1"><BYTE /></arr></field>
} EMRGDICOMMENT, *PEMRGDICOMMENT;
typedef struct tagEMREOF {
<field name="emr"><EMR /></field>
<field name="nPalEntries"><DWORD /></field>
<field name="offPalEntries"><DWORD /></field>
<field name="nSizeLast"><DWORD /></field>
} EMREOF, *PEMREOF;
typedef struct tagEMRLINETO {
<field name="emr"><EMR /></field>
<field name="ptl"><POINTL /></field>
} EMRLINETO, *PEMRLINETO, EMRMOVETOEX, *PEMRMOVETOEX;
typedef struct tagEMROFFSETCLIPRGN {
<field name="emr"><EMR /></field>
<field name="ptlOffset"><POINTL /></field>
} EMROFFSETCLIPRGN, *PEMROFFSETCLIPRGN;
typedef struct tagEMRFILLPATH {
<field name="emr"><EMR /></field>
<field name="rclBounds"><RECTL /></field>
} EMRFILLPATH, *PEMRFILLPATH, EMRSTROKEANDFILLPATH, *PEMRSTROKEANDFILLPATH, EMRSTROKEPATH, *PEMRSTROKEPATH;
typedef struct tagEMREXCLUDECLIPRECT {
<field name="emr"><EMR /></field>
<field name="rclClip"><RECTL /></field>
} EMREXCLUDECLIPRECT, *PEMREXCLUDECLIPRECT, EMRINTERSECTCLIPRECT, *PEMRINTERSECTCLIPRECT;
typedef struct tagEMRSETVIEWPORTORGEX {
<field name="emr"><EMR /></field>
<field name="ptlOrigin"><POINTL /></field>
} EMRSETVIEWPORTORGEX, *PEMRSETVIEWPORTORGEX, EMRSETWINDOWORGEX, *PEMRSETWINDOWORGEX, EMRSETBRUSHORGEX, *PEMRSETBRUSHORGEX;
typedef struct tagEMRSETVIEWPORTEXTEX {
<field name="emr"><EMR /></field>
<field name="szlExtent"><SIZEL /></field>
} EMRSETVIEWPORTEXTEX, *PEMRSETVIEWPORTEXTEX, EMRSETWINDOWEXTEX, *PEMRSETWINDOWEXTEX;
typedef struct tagEMRSCALEVIEWPORTEXTEX {
<field name="emr"><EMR /></field>
<field name="xNum"><LONG /></field>
<field name="xDenom"><LONG /></field>
<field name="yNum"><LONG /></field>
<field name="yDenom"><LONG /></field>
} EMRSCALEVIEWPORTEXTEX, *PEMRSCALEVIEWPORTEXTEX, EMRSCALEWINDOWEXTEX, *PEMRSCALEWINDOWEXTEX;
typedef struct tagEMRSETWORLDTRANSFORM {
<field name="emr"><EMR /></field>
<field name="xform"><XFORM /></field>
} EMRSETWORLDTRANSFORM, *PEMRSETWORLDTRANSFORM;
typedef struct tagEMRMODIFYWORLDTRANSFORM {
<field name="emr"><EMR /></field>
<field name="xform"><XFORM /></field>
<field name="iMode"><DWORD /></field>
} EMRMODIFYWORLDTRANSFORM, *PEMRMODIFYWORLDTRANSFORM;
typedef struct tagEMRSETPIXELV {
<field name="emr"><EMR /></field>
<field name="ptlPixel"><POINTL /></field>
<field name="crColor"><COLORREF /></field>
} EMRSETPIXELV, *PEMRSETPIXELV;
typedef struct tagEMREXTFLOODFILL {
<field name="emr"><EMR /></field>
<field name="ptlStart"><POINTL /></field>
<field name="crColor"><COLORREF /></field>
<field name="iMode"><DWORD /></field>
} EMREXTFLOODFILL, *PEMREXTFLOODFILL;
typedef struct tagEMRELLIPSE {
<field name="emr"><EMR /></field>
<field name="rclBox"><RECTL /></field>
} EMRELLIPSE, *PEMRELLIPSE, EMRRECTANGLE, *PEMRRECTANGLE;
typedef struct tagEMRROUNDRECT {
<field name="emr"><EMR /></field>
<field name="rclBox"><RECTL /></field>
<field name="szlCorner"><SIZEL /></field>
} EMRROUNDRECT, *PEMRROUNDRECT;
typedef struct tagEMRARC {
<field name="emr"><EMR /></field>
<field name="rclBox"><RECTL /></field>
<field name="ptlStart"><POINTL /></field>
<field name="ptlEnd"><POINTL /></field>
} EMRARC, *PEMRARC, EMRARCTO, *PEMRARCTO, EMRCHORD, *PEMRCHORD, EMRPIE, *PEMRPIE;
typedef struct tagEMRANGLEARC {
<field name="emr"><EMR /></field>
<field name="ptlCenter"><POINTL /></field>
<field name="nRadius"><DWORD /></field>
<field name="eStartAngle"><FLOAT /></field>
<field name="eSweepAngle"><FLOAT /></field>
} EMRANGLEARC, *PEMRANGLEARC;
typedef struct tagEMRPOLYLINE {
<field name="emr"><EMR /></field>
<field name="rclBounds"><RECTL /></field>
<field name="cptl"><DWORD /></field>
<field name="aptl"><arr length="1"><POINTL /></arr></field>
} EMRPOLYLINE, *PEMRPOLYLINE, EMRPOLYBEZIER, *PEMRPOLYBEZIER, EMRPOLYGON, *PEMRPOLYGON, EMRPOLYBEZIERTO, *PEMRPOLYBEZIERTO, EMRPOLYLINETO, *PEMRPOLYLINETO;
typedef struct tagEMRPOLYLINE16 {
<field name="emr"><EMR /></field>
<field name="rclBounds"><RECTL /></field>
<field name="cpts"><DWORD /></field>
<field name="apts"><arr length="1"><POINTS /></arr></field>
} EMRPOLYLINE16, *PEMRPOLYLINE16, EMRPOLYBEZIER16, *PEMRPOLYBEZIER16, EMRPOLYGON16, *PEMRPOLYGON16, EMRPOLYBEZIERTO16, *PEMRPOLYBEZIERTO16, EMRPOLYLINETO16, *PEMRPOLYLINETO16;
typedef struct tagEMRPOLYDRAW {
<field name="emr"><EMR /></field>
<field name="rclBounds"><RECTL /></field>
<field name="cptl"><DWORD /></field>
<field name="aptl"><arr length="1"><POINTL /></arr></field>
<field name="abTypes"><arr length="1"><BYTE /></arr></field>
} EMRPOLYDRAW, *PEMRPOLYDRAW;
typedef struct tagEMRPOLYDRAW16 {
<field name="emr"><EMR /></field>
<field name="rclBounds"><RECTL /></field>
<field name="cpts"><DWORD /></field>
<field name="apts"><arr length="1"><POINTS /></arr></field>
<field name="abTypes"><arr length="1"><BYTE /></arr></field>
} EMRPOLYDRAW16, *PEMRPOLYDRAW16;
typedef struct tagEMRPOLYPOLYLINE {
<field name="emr"><EMR /></field>
<field name="rclBounds"><RECTL /></field>
<field name="nPolys"><DWORD /></field>
<field name="cptl"><DWORD /></field>
<field name="aPolyCounts"><arr length="1"><DWORD /></arr></field>
<field name="aptl"><arr length="1"><POINTL /></arr></field>
} EMRPOLYPOLYLINE, *PEMRPOLYPOLYLINE, EMRPOLYPOLYGON, *PEMRPOLYPOLYGON;
typedef struct tagEMRPOLYPOLYLINE16 {
<field name="emr"><EMR /></field>
<field name="rclBounds"><RECTL /></field>
<field name="nPolys"><DWORD /></field>
<field name="cpts"><DWORD /></field>
<field name="aPolyCounts"><arr length="1"><DWORD /></arr></field>
<field name="apts"><arr length="1"><POINTS /></arr></field>
} EMRPOLYPOLYLINE16, *PEMRPOLYPOLYLINE16, EMRPOLYPOLYGON16, *PEMRPOLYPOLYGON16;
typedef struct tagEMRINVERTRGN {
<field name="emr"><EMR /></field>
<field name="rclBounds"><RECTL /></field>
<field name="cbRgnData"><DWORD /></field>
<field name="RgnData"><arr length="1"><BYTE /></arr></field>
} EMRINVERTRGN, *PEMRINVERTRGN, EMRPAINTRGN, *PEMRPAINTRGN;
typedef struct tagEMRFILLRGN {
<field name="emr"><EMR /></field>
<field name="rclBounds"><RECTL /></field>
<field name="cbRgnData"><DWORD /></field>
<field name="ihBrush"><DWORD /></field>
<field name="RgnData"><arr length="1"><BYTE /></arr></field>
} EMRFILLRGN, *PEMRFILLRGN;
typedef struct tagEMRFRAMERGN {
<field name="emr"><EMR /></field>
<field name="rclBounds"><RECTL /></field>
<field name="cbRgnData"><DWORD /></field>
<field name="ihBrush"><DWORD /></field>
<field name="szlStroke"><SIZEL /></field>
<field name="RgnData"><arr length="1"><BYTE /></arr></field>
} EMRFRAMERGN, *PEMRFRAMERGN;
typedef struct tagEMREXTSELECTCLIPRGN {
<field name="emr"><EMR /></field>
<field name="cbRgnData"><DWORD /></field>
<field name="iMode"><DWORD /></field>
<field name="RgnData"><arr length="1"><BYTE /></arr></field>
} EMREXTSELECTCLIPRGN, *PEMREXTSELECTCLIPRGN;
typedef struct tagEMREXTTEXTOUTA {
<field name="emr"><EMR /></field>
<field name="rclBounds"><RECTL /></field>
<field name="iGraphicsMode"><DWORD /></field>
<field name="exScale"><FLOAT /></field>
<field name="eyScale"><FLOAT /></field>
<field name="emrtext"><EMRTEXT /></field>
} EMREXTTEXTOUTA, *PEMREXTTEXTOUTA, EMREXTTEXTOUTW, *PEMREXTTEXTOUTW;
typedef struct tagEMRPOLYTEXTOUTA {
<field name="emr"><EMR /></field>
<field name="rclBounds"><RECTL /></field>
<field name="iGraphicsMode"><DWORD /></field>
<field name="exScale"><FLOAT /></field>
<field name="eyScale"><FLOAT /></field>
<field name="cStrings"><LONG /></field>
<field name="aemrtext"><arr length="1"><EMRTEXT /></arr></field>
} EMRPOLYTEXTOUTA, *PEMRPOLYTEXTOUTA, EMRPOLYTEXTOUTW, *PEMRPOLYTEXTOUTW;
typedef struct tagEMRBITBLT {
<field name="emr"><EMR /></field>
<field name="rclBounds"><RECTL /></field>
<field name="xDest"><LONG /></field>
<field name="yDest"><LONG /></field>
<field name="cxDest"><LONG /></field>
<field name="cyDest"><LONG /></field>
<field name="dwRop"><DWORD /></field>
<field name="xSrc"><LONG /></field>
<field name="ySrc"><LONG /></field>
<field name="xformSrc"><XFORM /></field>
<field name="crBkColorSrc"><COLORREF /></field>
<field name="iUsageSrc"><DWORD /></field>
<field name="offBmiSrc"><DWORD /></field>
<field name="cbBmiSrc"><DWORD /></field>
<field name="offBitsSrc"><DWORD /></field>
<field name="cbBitsSrc"><DWORD /></field>
} EMRBITBLT, *PEMRBITBLT;
typedef struct tagEMRSTRETCHBLT {
<field name="emr"><EMR /></field>
<field name="rclBounds"><RECTL /></field>
<field name="xDest"><LONG /></field>
<field name="yDest"><LONG /></field>
<field name="cxDest"><LONG /></field>
<field name="cyDest"><LONG /></field>
<field name="dwRop"><DWORD /></field>
<field name="xSrc"><LONG /></field>
<field name="ySrc"><LONG /></field>
<field name="xformSrc"><XFORM /></field>
<field name="crBkColorSrc"><COLORREF /></field>
<field name="iUsageSrc"><DWORD /></field>
<field name="offBmiSrc"><DWORD /></field>
<field name="cbBmiSrc"><DWORD /></field>
<field name="offBitsSrc"><DWORD /></field>
<field name="cbBitsSrc"><DWORD /></field>
<field name="cxSrc"><LONG /></field>
<field name="cySrc"><LONG /></field>
} EMRSTRETCHBLT, *PEMRSTRETCHBLT;
typedef struct tagEMRMASKBLT {
<field name="emr"><EMR /></field>
<field name="rclBounds"><RECTL /></field>
<field name="xDest"><LONG /></field>
<field name="yDest"><LONG /></field>
<field name="cxDest"><LONG /></field>
<field name="cyDest"><LONG /></field>
<field name="dwRop"><DWORD /></field>
<field name="xSrc"><LONG /></field>
<field name="ySrc"><LONG /></field>
<field name="xformSrc"><XFORM /></field>
<field name="crBkColorSrc"><COLORREF /></field>
<field name="iUsageSrc"><DWORD /></field>
<field name="offBmiSrc"><DWORD /></field>
<field name="cbBmiSrc"><DWORD /></field>
<field name="offBitsSrc"><DWORD /></field>
<field name="cbBitsSrc"><DWORD /></field>
<field name="xMask"><LONG /></field>
<field name="yMask"><LONG /></field>
<field name="iUsageMask"><DWORD /></field>
<field name="offBmiMask"><DWORD /></field>
<field name="cbBmiMask"><DWORD /></field>
<field name="offBitsMask"><DWORD /></field>
<field name="cbBitsMask"><DWORD /></field>
} EMRMASKBLT, *PEMRMASKBLT;
typedef struct tagEMRPLGBLT {
<field name="emr"><EMR /></field>
<field name="rclBounds"><RECTL /></field>
<field name="aptlDest"><arr length="3"><POINTL /></arr></field>
<field name="xSrc"><LONG /></field>
<field name="ySrc"><LONG /></field>
<field name="cxSrc"><LONG /></field>
<field name="cySrc"><LONG /></field>
<field name="xformSrc"><XFORM /></field>
<field name="crBkColorSrc"><COLORREF /></field>
<field name="iUsageSrc"><DWORD /></field>
<field name="offBmiSrc"><DWORD /></field>
<field name="cbBmiSrc"><DWORD /></field>
<field name="offBitsSrc"><DWORD /></field>
<field name="cbBitsSrc"><DWORD /></field>
<field name="xMask"><LONG /></field>
<field name="yMask"><LONG /></field>
<field name="iUsageMask"><DWORD /></field>
<field name="offBmiMask"><DWORD /></field>
<field name="cbBmiMask"><DWORD /></field>
<field name="offBitsMask"><DWORD /></field>
<field name="cbBitsMask"><DWORD /></field>
} EMRPLGBLT, *PEMRPLGBLT;
typedef struct tagEMRSETDIBITSTODEVICE {
<field name="emr"><EMR /></field>
<field name="rclBounds"><RECTL /></field>
<field name="xDest"><LONG /></field>
<field name="yDest"><LONG /></field>
<field name="xSrc"><LONG /></field>
<field name="ySrc"><LONG /></field>
<field name="cxSrc"><LONG /></field>
<field name="cySrc"><LONG /></field>
<field name="offBmiSrc"><DWORD /></field>
<field name="cbBmiSrc"><DWORD /></field>
<field name="offBitsSrc"><DWORD /></field>
<field name="cbBitsSrc"><DWORD /></field>
<field name="iUsageSrc"><DWORD /></field>
<field name="iStartScan"><DWORD /></field>
<field name="cScans"><DWORD /></field>
} EMRSETDIBITSTODEVICE, *PEMRSETDIBITSTODEVICE;
typedef struct tagEMRSTRETCHDIBITS {
<field name="emr"><EMR /></field>
<field name="rclBounds"><RECTL /></field>
<field name="xDest"><LONG /></field>
<field name="yDest"><LONG /></field>
<field name="xSrc"><LONG /></field>
<field name="ySrc"><LONG /></field>
<field name="cxSrc"><LONG /></field>
<field name="cySrc"><LONG /></field>
<field name="offBmiSrc"><DWORD /></field>
<field name="cbBmiSrc"><DWORD /></field>
<field name="offBitsSrc"><DWORD /></field>
<field name="cbBitsSrc"><DWORD /></field>
<field name="iUsageSrc"><DWORD /></field>
<field name="dwRop"><DWORD /></field>
<field name="cxDest"><LONG /></field>
<field name="cyDest"><LONG /></field>
} EMRSTRETCHDIBITS, *PEMRSTRETCHDIBITS;
typedef struct tagEMREXTCREATEFONTINDIRECTW {
<field name="emr"><EMR /></field>
<field name="ihFont"><DWORD /></field>
<field name="elfw"><EXTLOGFONTW /></field>
} EMREXTCREATEFONTINDIRECTW, *PEMREXTCREATEFONTINDIRECTW;
typedef struct tagEMRCREATEPALETTE {
<field name="emr"><EMR /></field>
<field name="ihPal"><DWORD /></field>
<field name="lgpl"><LOGPALETTE /></field>
} EMRCREATEPALETTE, *PEMRCREATEPALETTE;
typedef struct tagEMRCREATEPEN {
<field name="emr"><EMR /></field>
<field name="ihPen"><DWORD /></field>
<field name="lopn"><LOGPEN /></field>
} EMRCREATEPEN, *PEMRCREATEPEN;
typedef struct tagEMREXTCREATEPEN {
<field name="emr"><EMR /></field>
<field name="ihPen"><DWORD /></field>
<field name="offBmi"><DWORD /></field>
<field name="cbBmi"><DWORD /></field>
<field name="offBits"><DWORD /></field>
<field name="cbBits"><DWORD /></field>
<field name="elp"><EXTLOGPEN32 /></field>
} EMREXTCREATEPEN, *PEMREXTCREATEPEN;
typedef struct tagEMRCREATEBRUSHINDIRECT {
<field name="emr"><EMR /></field>
<field name="ihBrush"><DWORD /></field>
<field name="lb"><LOGBRUSH32 /></field>
} EMRCREATEBRUSHINDIRECT, *PEMRCREATEBRUSHINDIRECT;
typedef struct tagEMRCREATEMONOBRUSH {
<field name="emr"><EMR /></field>
<field name="ihBrush"><DWORD /></field>
<field name="iUsage"><DWORD /></field>
<field name="offBmi"><DWORD /></field>
<field name="cbBmi"><DWORD /></field>
<field name="offBits"><DWORD /></field>
<field name="cbBits"><DWORD /></field>
} EMRCREATEMONOBRUSH, *PEMRCREATEMONOBRUSH;
typedef struct tagEMRCREATEDIBPATTERNBRUSHPT {
<field name="emr"><EMR /></field>
<field name="ihBrush"><DWORD /></field>
<field name="iUsage"><DWORD /></field>
<field name="offBmi"><DWORD /></field>
<field name="cbBmi"><DWORD /></field>
<field name="offBits"><DWORD /></field>
<field name="cbBits"><DWORD /></field>
} EMRCREATEDIBPATTERNBRUSHPT, *PEMRCREATEDIBPATTERNBRUSHPT;
typedef struct tagEMRFORMAT {
<field name="dSignature"><DWORD /></field>
<field name="nVersion"><DWORD /></field>
<field name="cbData"><DWORD /></field>
<field name="offData"><DWORD /></field>
} EMRFORMAT, *PEMRFORMAT;
typedef struct tagEMRGLSRECORD {
<field name="emr"><EMR /></field>
<field name="cbData"><DWORD /></field>
<field name="Data"><arr length="1"><BYTE /></arr></field>
} EMRGLSRECORD, *PEMRGLSRECORD;
typedef struct tagEMRGLSBOUNDEDRECORD {
<field name="emr"><EMR /></field>
<field name="rclBounds"><RECTL /></field>
<field name="cbData"><DWORD /></field>
<field name="Data"><arr length="1"><BYTE /></arr></field>
} EMRGLSBOUNDEDRECORD, *PEMRGLSBOUNDEDRECORD;
typedef struct tagEMRPIXELFORMAT {
<field name="emr"><EMR /></field>
<field name="pfd"><PIXELFORMATDESCRIPTOR /></field>
} EMRPIXELFORMAT, *PEMRPIXELFORMAT;
typedef struct tagEMRCREATECOLORSPACE {
<field name="emr"><EMR /></field>
<field name="ihCS"><DWORD /></field>
<field name="lcs"><LOGCOLORSPACEA /></field>
} EMRCREATECOLORSPACE, *PEMRCREATECOLORSPACE;
typedef struct tagEMRSETCOLORSPACE {
<field name="emr"><EMR /></field>
<field name="ihCS"><DWORD /></field>
} EMRSETCOLORSPACE, *PEMRSETCOLORSPACE, EMRSELECTCOLORSPACE, *PEMRSELECTCOLORSPACE, EMRDELETECOLORSPACE, *PEMRDELETECOLORSPACE;
typedef struct tagEMREXTESCAPE {
<field name="emr"><EMR /></field>
<field name="iEscape"><INT /></field>
<field name="cbEscData"><INT /></field>
<field name="EscData"><arr length="1"><BYTE /></arr></field>
} EMREXTESCAPE, *PEMREXTESCAPE, EMRDRAWESCAPE, *PEMRDRAWESCAPE;
typedef struct tagEMRNAMEDESCAPE {
<field name="emr"><EMR /></field>
<field name="iEscape"><INT /></field>
<field name="cbDriver"><INT /></field>
<field name="cbEscData"><INT /></field>
<field name="EscData"><arr length="1"><BYTE /></arr></field>
} EMRNAMEDESCAPE, *PEMRNAMEDESCAPE;
typedef struct tagEMRSETICMPROFILE {
<field name="emr"><EMR /></field>
<field name="dwFlags"><DWORD /></field>
<field name="cbName"><DWORD /></field>
<field name="cbData"><DWORD /></field>
<field name="Data"><arr length="1"><BYTE /></arr></field>
} EMRSETICMPROFILE, *PEMRSETICMPROFILE, EMRSETICMPROFILEA, *PEMRSETICMPROFILEA, EMRSETICMPROFILEW, *PEMRSETICMPROFILEW;
typedef struct tagEMRCREATECOLORSPACEW {
<field name="emr"><EMR /></field>
<field name="ihCS"><DWORD /></field>
<field name="lcs"><LOGCOLORSPACEW /></field>
<field name="dwFlags"><DWORD /></field>
<field name="cbData"><DWORD /></field>
<field name="Data"><arr length="1"><BYTE /></arr></field>
} EMRCREATECOLORSPACEW, *PEMRCREATECOLORSPACEW;
typedef struct tagCOLORMATCHTOTARGET {
<field name="emr"><EMR /></field>
<field name="dwAction"><DWORD /></field>
<field name="dwFlags"><DWORD /></field>
<field name="cbName"><DWORD /></field>
<field name="cbData"><DWORD /></field>
<field name="Data"><arr length="1"><BYTE /></arr></field>
} EMRCOLORMATCHTOTARGET, *PEMRCOLORMATCHTOTARGET;
typedef struct tagCOLORCORRECTPALETTE {
<field name="emr"><EMR /></field>
<field name="ihPalette"><DWORD /></field>
<field name="nFirstEntry"><DWORD /></field>
<field name="nPalEntries"><DWORD /></field>
<field name="nReserved"><DWORD /></field>
} EMRCOLORCORRECTPALETTE, *PEMRCOLORCORRECTPALETTE;
typedef struct tagEMRALPHABLEND {
<field name="emr"><EMR /></field>
<field name="rclBounds"><RECTL /></field>
<field name="xDest"><LONG /></field>
<field name="yDest"><LONG /></field>
<field name="cxDest"><LONG /></field>
<field name="cyDest"><LONG /></field>
<field name="dwRop"><DWORD /></field>
<field name="xSrc"><LONG /></field>
<field name="ySrc"><LONG /></field>
<field name="xformSrc"><XFORM /></field>
<field name="crBkColorSrc"><COLORREF /></field>
<field name="iUsageSrc"><DWORD /></field>
<field name="offBmiSrc"><DWORD /></field>
<field name="cbBmiSrc"><DWORD /></field>
<field name="offBitsSrc"><DWORD /></field>
<field name="cbBitsSrc"><DWORD /></field>
<field name="cxSrc"><LONG /></field>
<field name="cySrc"><LONG /></field>
} EMRALPHABLEND, *PEMRALPHABLEND;
typedef struct tagEMRGRADIENTFILL {
<field name="emr"><EMR /></field>
<field name="rclBounds"><RECTL /></field>
<field name="nVer"><DWORD /></field>
<field name="nTri"><DWORD /></field>
<field name="ulMode"><ULONG /></field>
<field name="Ver"><arr length="1"><TRIVERTEX /></arr></field>
}EMRGRADIENTFILL, *PEMRGRADIENTFILL;
typedef struct tagEMRTRANSPARENTBLT {
<field name="emr"><EMR /></field>
<field name="rclBounds"><RECTL /></field>
<field name="xDest"><LONG /></field>
<field name="yDest"><LONG /></field>
<field name="cxDest"><LONG /></field>
<field name="cyDest"><LONG /></field>
<field name="dwRop"><DWORD /></field>
<field name="xSrc"><LONG /></field>
<field name="ySrc"><LONG /></field>
<field name="xformSrc"><XFORM /></field>
<field name="crBkColorSrc"><COLORREF /></field>
<field name="iUsageSrc"><DWORD /></field>
<field name="offBmiSrc"><DWORD /></field>
<field name="cbBmiSrc"><DWORD /></field>
<field name="offBitsSrc"><DWORD /></field>
<field name="cbBitsSrc"><DWORD /></field>
<field name="cxSrc"><LONG /></field>
<field name="cySrc"><LONG /></field>
} EMRTRANSPARENTBLT, *PEMRTRANSPARENTBLT;
BOOL __stdcall wglCopyContext(HGLRC, HGLRC, UINT);
HGLRC __stdcall wglCreateContext(HDC);
HGLRC __stdcall wglCreateLayerContext(HDC, int32);
BOOL __stdcall wglDeleteContext(HGLRC);
HGLRC __stdcall wglGetCurrentContext();
HDC __stdcall wglGetCurrentDC();
PROC __stdcall wglGetProcAddress(LPCSTR);
BOOL __stdcall wglMakeCurrent(HDC, HGLRC);
BOOL __stdcall wglShareLists(HGLRC, HGLRC);
BOOL __stdcall wglUseFontBitmapsA(HDC, DWORD, DWORD, DWORD);
BOOL __stdcall wglUseFontBitmapsW(HDC, DWORD, DWORD, DWORD);
BOOL __stdcall SwapBuffers(HDC);
typedef struct _POINTFLOAT {
<field name="x"><FLOAT /></field>
<field name="y"><FLOAT /></field>
} POINTFLOAT, *PPOINTFLOAT;
typedef struct _GLYPHMETRICSFLOAT {
<field name="gmfBlackBoxX"><FLOAT /></field>
<field name="gmfBlackBoxY"><FLOAT /></field>
<field name="gmfptGlyphOrigin"><POINTFLOAT /></field>
<field name="gmfCellIncX"><FLOAT /></field>
<field name="gmfCellIncY"><FLOAT /></field>
} GLYPHMETRICSFLOAT, *PGLYPHMETRICSFLOAT, *LPGLYPHMETRICSFLOAT;
BOOL __stdcall wglUseFontOutlinesA(HDC, DWORD, DWORD, DWORD, FLOAT, FLOAT, int32, LPGLYPHMETRICSFLOAT);
BOOL __stdcall wglUseFontOutlinesW(HDC, DWORD, DWORD, DWORD, FLOAT, FLOAT, int32, LPGLYPHMETRICSFLOAT);
typedef struct tagLAYERPLANEDESCRIPTOR { WORD nSize;
<field name="nVersion"><WORD /></field>
<field name="dwFlags"><DWORD /></field>
<field name="iPixelType"><BYTE /></field>
<field name="cColorBits"><BYTE /></field>
<field name="cRedBits"><BYTE /></field>
<field name="cRedShift"><BYTE /></field>
<field name="cGreenBits"><BYTE /></field>
<field name="cGreenShift"><BYTE /></field>
<field name="cBlueBits"><BYTE /></field>
<field name="cBlueShift"><BYTE /></field>
<field name="cAlphaBits"><BYTE /></field>
<field name="cAlphaShift"><BYTE /></field>
<field name="cAccumBits"><BYTE /></field>
<field name="cAccumRedBits"><BYTE /></field>
<field name="cAccumGreenBits"><BYTE /></field>
<field name="cAccumBlueBits"><BYTE /></field>
<field name="cAccumAlphaBits"><BYTE /></field>
<field name="cDepthBits"><BYTE /></field>
<field name="cStencilBits"><BYTE /></field>
<field name="cAuxBuffers"><BYTE /></field>
<field name="iLayerPlane"><BYTE /></field>
<field name="bReserved"><BYTE /></field>
<field name="crTransparent"><COLORREF /></field>
} LAYERPLANEDESCRIPTOR, *PLAYERPLANEDESCRIPTOR, *LPLAYERPLANEDESCRIPTOR;
BOOL __stdcall wglDescribeLayerPlane(HDC, int32, int32, UINT, LPLAYERPLANEDESCRIPTOR);
int32 __stdcall wglSetLayerPaletteEntries(HDC, int32, int32, int32, const COLORREF *);
int32 __stdcall wglGetLayerPaletteEntries(HDC, int32, int32, int32, COLORREF *);
BOOL __stdcall wglRealizeLayerPalette(HDC, int32, BOOL);
BOOL __stdcall wglSwapLayerBuffers(HDC, UINT);
typedef struct _WGLSWAP {
<field name="hdc"><HDC /></field>
<field name="uiFlags"><UINT /></field>
} WGLSWAP, *PWGLSWAP, *LPWGLSWAP;
DWORD __stdcall wglSwapMultipleBuffers(UINT, const WGLSWAP *);
<typedef name="HDWP"><HANDLE /></typedef>
<typedef name="MENUTEMPLATEA"><void /></typedef>
<typedef name="MENUTEMPLATEW"><void /></typedef>
<typedef name="MENUTEMPLATE"><MENUTEMPLATEA /></typedef>
<typedef name="LPMENUTEMPLATEA"><PVOID /></typedef>
<typedef name="LPMENUTEMPLATEW"><PVOID /></typedef>
<typedef name="LPMENUTEMPLATE"><LPMENUTEMPLATEA /></typedef>
typedef LRESULT (__stdcall* WNDPROC)(HWND, UINT, WPARAM, LPARAM);
typedef INT_PTR (__stdcall* DLGPROC)(HWND, UINT, WPARAM, LPARAM);
typedef void (__stdcall* TIMERPROC)(HWND, UINT, UINT_PTR, DWORD);
typedef BOOL (__stdcall* GRAYSTRINGPROC)(HDC, LPARAM, int32);
typedef BOOL (__stdcall* WNDENUMPROC)(HWND, LPARAM);
typedef LRESULT (__stdcall* HOOKPROC)(int32 code, WPARAM wParam, LPARAM lParam);
typedef void (__stdcall* SENDASYNCPROC)(HWND, UINT, ULONG_PTR, LRESULT);
typedef BOOL (__stdcall* PROPENUMPROCA)(HWND, LPCSTR, HANDLE);
typedef BOOL (__stdcall* PROPENUMPROCW)(HWND, LPCWSTR, HANDLE);
typedef BOOL (__stdcall* PROPENUMPROCEXA)(HWND, LPSTR, HANDLE, ULONG_PTR);
typedef BOOL (__stdcall* PROPENUMPROCEXW)(HWND, LPWSTR, HANDLE, ULONG_PTR);
typedef int32 (__stdcall* EDITWORDBREAKPROCA)(LPSTR lpch, int32 ichCurrent, int32 cch, int32 code);
typedef int32 (__stdcall* EDITWORDBREAKPROCW)(LPWSTR lpch, int32 ichCurrent, int32 cch, int32 code);
typedef BOOL (__stdcall* DRAWSTATEPROC)(HDC hdc, LPARAM lData, WPARAM wData, int32 cx, int32 cy);
<typedef name="PROPENUMPROC"><PROPENUMPROCA /></typedef>
<typedef name="PROPENUMPROCEX"><PROPENUMPROCEXA /></typedef>
<typedef name="EDITWORDBREAKPROC"><EDITWORDBREAKPROCA /></typedef>
typedef BOOL (__stdcall* NAMEENUMPROCA)(LPSTR, LPARAM);
typedef BOOL (__stdcall* NAMEENUMPROCW)(LPWSTR, LPARAM);
<typedef name="WINSTAENUMPROCA"><NAMEENUMPROCA /></typedef>
<typedef name="DESKTOPENUMPROCA"><NAMEENUMPROCA /></typedef>
<typedef name="WINSTAENUMPROCW"><NAMEENUMPROCW /></typedef>
<typedef name="DESKTOPENUMPROCW"><NAMEENUMPROCW /></typedef>
<typedef name="WINSTAENUMPROC"><WINSTAENUMPROCA /></typedef>
<typedef name="DESKTOPENUMPROC"><DESKTOPENUMPROCA /></typedef>

int32 __stdcall wvsprintfA( LPSTR, LPCSTR, va_list arglist);

int32 __stdcall wvsprintfW( LPWSTR, LPCWSTR, va_list arglist);

int32 __cdecl wsprintfA( LPSTR, LPCSTR, ...);

int32 __cdecl wsprintfW( LPWSTR, LPCWSTR, ...);
typedef struct tagCBT_CREATEWNDA {
struct tagCREATESTRUCTA *lpcs;
<field name="hwndInsertAfter"><HWND /></field>
} CBT_CREATEWNDA, *LPCBT_CREATEWNDA;
typedef struct tagCBT_CREATEWNDW {
struct tagCREATESTRUCTW *lpcs;
<field name="hwndInsertAfter"><HWND /></field>
} CBT_CREATEWNDW, *LPCBT_CREATEWNDW;
<typedef name="CBT_CREATEWND"><CBT_CREATEWNDA /></typedef>
<typedef name="LPCBT_CREATEWND"><LPCBT_CREATEWNDA /></typedef>
typedef struct tagCBTACTIVATESTRUCT {
<field name="fMouse"><BOOL /></field>
<field name="hWndActive"><HWND /></field>
} CBTACTIVATESTRUCT, *LPCBTACTIVATESTRUCT;
typedef struct tagWTSSESSION_NOTIFICATION {
<field name="cbSize"><DWORD /></field>
<field name="dwSessionId"><DWORD /></field>
} WTSSESSION_NOTIFICATION, *PWTSSESSION_NOTIFICATION;
typedef struct {
<field name="hwnd"><HWND /></field>
<field name="rc"><RECT /></field>
} SHELLHOOKINFO, *LPSHELLHOOKINFO;
typedef struct tagEVENTMSG {
<field name="message"><UINT /></field>
<field name="paramL"><UINT /></field>
<field name="paramH"><UINT /></field>
<field name="time"><DWORD /></field>
<field name="hwnd"><HWND /></field>
} EVENTMSG, *PEVENTMSGMSG, *NPEVENTMSGMSG, *LPEVENTMSGMSG;
typedef struct tagEVENTMSG *PEVENTMSG, *NPEVENTMSG, *LPEVENTMSG;
typedef struct tagCWPSTRUCT {
<field name="lParam"><LPARAM /></field>
<field name="wParam"><WPARAM /></field>
<field name="message"><UINT /></field>
<field name="hwnd"><HWND /></field>
} CWPSTRUCT, *PCWPSTRUCT, *NPCWPSTRUCT, *LPCWPSTRUCT;
typedef struct tagCWPRETSTRUCT {
<field name="lResult"><LRESULT /></field>
<field name="lParam"><LPARAM /></field>
<field name="wParam"><WPARAM /></field>
<field name="message"><UINT /></field>
<field name="hwnd"><HWND /></field>
} CWPRETSTRUCT, *PCWPRETSTRUCT, *NPCWPRETSTRUCT, *LPCWPRETSTRUCT;
typedef struct tagKBDLLHOOKSTRUCT {
<field name="vkCode"><DWORD /></field>
<field name="scanCode"><DWORD /></field>
<field name="flags"><DWORD /></field>
<field name="time"><DWORD /></field>
<field name="dwExtraInfo"><ULONG_PTR /></field>
} KBDLLHOOKSTRUCT, *LPKBDLLHOOKSTRUCT, *PKBDLLHOOKSTRUCT;
typedef struct tagMSLLHOOKSTRUCT {
<field name="pt"><POINT /></field>
<field name="mouseData"><DWORD /></field>
<field name="flags"><DWORD /></field>
<field name="time"><DWORD /></field>
<field name="dwExtraInfo"><ULONG_PTR /></field>
} MSLLHOOKSTRUCT, *LPMSLLHOOKSTRUCT, *PMSLLHOOKSTRUCT;
typedef struct tagDEBUGHOOKINFO {
<field name="idThread"><DWORD /></field>
<field name="idThreadInstaller"><DWORD /></field>
<field name="lParam"><LPARAM /></field>
<field name="wParam"><WPARAM /></field>
<field name="code"><int32 /></field>
} DEBUGHOOKINFO, *PDEBUGHOOKINFO, *NPDEBUGHOOKINFO, * LPDEBUGHOOKINFO;
typedef struct tagMOUSEHOOKSTRUCT {
<field name="pt"><POINT /></field>
<field name="hwnd"><HWND /></field>
<field name="wHitTestCode"><UINT /></field>
<field name="dwExtraInfo"><ULONG_PTR /></field>
} MOUSEHOOKSTRUCT, *LPMOUSEHOOKSTRUCT, *PMOUSEHOOKSTRUCT;
typedef struct tagMOUSEHOOKSTRUCTEX {
<field name="T"><MOUSEHOOKSTRUC /></field>
<field name="mouseData"><DWORD /></field>
} MOUSEHOOKSTRUCTEX, *LPMOUSEHOOKSTRUCTEX, *PMOUSEHOOKSTRUCTEX;
typedef struct tagHARDWAREHOOKSTRUCT {
<field name="hwnd"><HWND /></field>
<field name="message"><UINT /></field>
<field name="wParam"><WPARAM /></field>
<field name="lParam"><LPARAM /></field>
} HARDWAREHOOKSTRUCT, *LPHARDWAREHOOKSTRUCT, *PHARDWAREHOOKSTRUCT;

HKL __stdcall LoadKeyboardLayoutA( LPCSTR pwszKLID, UINT Flags);

HKL __stdcall LoadKeyboardLayoutW( LPCWSTR pwszKLID, UINT Flags);

HKL __stdcall ActivateKeyboardLayout( HKL hkl, UINT Flags);

int32 __stdcall ToUnicodeEx( UINT wVirtKey, UINT wScanCode, const BYTE *lpKeyState, LPWSTR pwszBuff, int32 cchBuff, UINT wFlags, HKL dwhkl);

BOOL __stdcall UnloadKeyboardLayout( HKL hkl);

BOOL __stdcall GetKeyboardLayoutNameA( LPSTR pwszKLID);

BOOL __stdcall GetKeyboardLayoutNameW( LPWSTR pwszKLID);

int32 __stdcall GetKeyboardLayoutList( int32 nBuff, HKL *lpList);

HKL __stdcall GetKeyboardLayout( DWORD idThread);
typedef struct tagMOUSEMOVEPOINT {
<field name="x"><int32 /></field>
<field name="y"><int32 /></field>
<field name="time"><DWORD /></field>
<field name="dwExtraInfo"><ULONG_PTR /></field>
} MOUSEMOVEPOINT, *PMOUSEMOVEPOINT, * LPMOUSEMOVEPOINT;

int32 __stdcall GetMouseMovePointsEx( UINT cbSize, LPMOUSEMOVEPOINT lppt, LPMOUSEMOVEPOINT lpptBuf, int32 nBufPoints, DWORD resolution);

HDESK __stdcall CreateDesktopA( LPCSTR lpszDesktop, LPCSTR lpszDevice, DEVMODEA* pDevmode, DWORD dwFlags, ACCESS_MASK dwDesiredAccess, LPSECURITY_ATTRIBUTES lpsa);

HDESK __stdcall CreateDesktopW( LPCWSTR lpszDesktop, LPCWSTR lpszDevice, DEVMODEW* pDevmode, DWORD dwFlags, ACCESS_MASK dwDesiredAccess, LPSECURITY_ATTRIBUTES lpsa);

HDESK __stdcall CreateDesktopExA( LPCSTR lpszDesktop, LPCSTR lpszDevice, DEVMODEA* pDevmode, DWORD dwFlags, ACCESS_MASK dwDesiredAccess, LPSECURITY_ATTRIBUTES lpsa, ULONG ulHeapSize, PVOID pvoid);

HDESK __stdcall CreateDesktopExW( LPCWSTR lpszDesktop, LPCWSTR lpszDevice, DEVMODEW* pDevmode, DWORD dwFlags, ACCESS_MASK dwDesiredAccess, LPSECURITY_ATTRIBUTES lpsa, ULONG ulHeapSize, PVOID pvoid);

HDESK __stdcall OpenDesktopA( LPCSTR lpszDesktop, DWORD dwFlags, BOOL fInherit, ACCESS_MASK dwDesiredAccess);

HDESK __stdcall OpenDesktopW( LPCWSTR lpszDesktop, DWORD dwFlags, BOOL fInherit, ACCESS_MASK dwDesiredAccess);

HDESK __stdcall OpenInputDesktop( DWORD dwFlags, BOOL fInherit, ACCESS_MASK dwDesiredAccess);

BOOL __stdcall EnumDesktopsA( HWINSTA hwinsta, DESKTOPENUMPROCA lpEnumFunc, LPARAM lParam);

BOOL __stdcall EnumDesktopsW( HWINSTA hwinsta, DESKTOPENUMPROCW lpEnumFunc, LPARAM lParam);

BOOL __stdcall EnumDesktopWindows( HDESK hDesktop, WNDENUMPROC lpfn, LPARAM lParam);

BOOL __stdcall SwitchDesktop( HDESK hDesktop);

BOOL __stdcall SetThreadDesktop( HDESK hDesktop);

BOOL __stdcall CloseDesktop( HDESK hDesktop);

HDESK __stdcall GetThreadDesktop( DWORD dwThreadId);

HWINSTA __stdcall CreateWindowStationA( LPCSTR lpwinsta, DWORD dwFlags, ACCESS_MASK dwDesiredAccess, LPSECURITY_ATTRIBUTES lpsa);

HWINSTA __stdcall CreateWindowStationW( LPCWSTR lpwinsta, DWORD dwFlags, ACCESS_MASK dwDesiredAccess, LPSECURITY_ATTRIBUTES lpsa);

HWINSTA __stdcall OpenWindowStationA( LPCSTR lpszWinSta, BOOL fInherit, ACCESS_MASK dwDesiredAccess);

HWINSTA __stdcall OpenWindowStationW( LPCWSTR lpszWinSta, BOOL fInherit, ACCESS_MASK dwDesiredAccess);

BOOL __stdcall EnumWindowStationsA( WINSTAENUMPROCA lpEnumFunc, LPARAM lParam);

BOOL __stdcall EnumWindowStationsW( WINSTAENUMPROCW lpEnumFunc, LPARAM lParam);

BOOL __stdcall CloseWindowStation( HWINSTA hWinSta);

BOOL __stdcall SetProcessWindowStation( HWINSTA hWinSta);

HWINSTA __stdcall GetProcessWindowStation( void);

BOOL __stdcall SetUserObjectSecurity( HANDLE hObj, PSECURITY_INFORMATION pSIRequested, PSECURITY_DESCRIPTOR pSID);

BOOL __stdcall GetUserObjectSecurity( HANDLE hObj, PSECURITY_INFORMATION pSIRequested, PSECURITY_DESCRIPTOR pSID, DWORD nLength, LPDWORD lpnLengthNeeded);
typedef struct tagUSEROBJECTFLAGS {
<field name="fInherit"><BOOL /></field>
<field name="fReserved"><BOOL /></field>
<field name="dwFlags"><DWORD /></field>
} USEROBJECTFLAGS, *PUSEROBJECTFLAGS;

BOOL __stdcall GetUserObjectInformationA( HANDLE hObj, int32 nIndex, PVOID pvInfo, DWORD nLength, LPDWORD lpnLengthNeeded);

BOOL __stdcall GetUserObjectInformationW( HANDLE hObj, int32 nIndex, PVOID pvInfo, DWORD nLength, LPDWORD lpnLengthNeeded);

BOOL __stdcall SetUserObjectInformationA( HANDLE hObj, int32 nIndex, PVOID pvInfo, DWORD nLength);

BOOL __stdcall SetUserObjectInformationW( HANDLE hObj, int32 nIndex, PVOID pvInfo, DWORD nLength);
typedef struct tagWNDCLASSEXA {
<field name="cbSize"><UINT /></field>
<field name="style"><UINT /></field>
<field name="lpfnWndProc"><WNDPROC /></field>
<field name="cbClsExtra"><int32 /></field>
<field name="cbWndExtra"><int32 /></field>
<field name="hInstance"><HINSTANCE /></field>
<field name="hIcon"><HICON /></field>
<field name="hCursor"><HCURSOR /></field>
<field name="hbrBackground"><HBRUSH /></field>
<field name="lpszMenuName"><LPCSTR /></field>
<field name="lpszClassName"><LPCSTR /></field>
<field name="hIconSm"><HICON /></field>
} WNDCLASSEXA, *PWNDCLASSEXA, *NPWNDCLASSEXA, *LPWNDCLASSEXA;
typedef struct tagWNDCLASSEXW {
<field name="cbSize"><UINT /></field>
<field name="style"><UINT /></field>
<field name="lpfnWndProc"><WNDPROC /></field>
<field name="cbClsExtra"><int32 /></field>
<field name="cbWndExtra"><int32 /></field>
<field name="hInstance"><HINSTANCE /></field>
<field name="hIcon"><HICON /></field>
<field name="hCursor"><HCURSOR /></field>
<field name="hbrBackground"><HBRUSH /></field>
<field name="lpszMenuName"><LPCWSTR /></field>
<field name="lpszClassName"><LPCWSTR /></field>
<field name="hIconSm"><HICON /></field>
} WNDCLASSEXW, *PWNDCLASSEXW, *NPWNDCLASSEXW, *LPWNDCLASSEXW;
<typedef name="WNDCLASSEX"><WNDCLASSEXA /></typedef>
<typedef name="PWNDCLASSEX"><PWNDCLASSEXA /></typedef>
<typedef name="NPWNDCLASSEX"><NPWNDCLASSEXA /></typedef>
<typedef name="LPWNDCLASSEX"><LPWNDCLASSEXA /></typedef>
typedef struct tagWNDCLASSA {
<field name="style"><UINT /></field>
<field name="lpfnWndProc"><WNDPROC /></field>
<field name="cbClsExtra"><int32 /></field>
<field name="cbWndExtra"><int32 /></field>
<field name="hInstance"><HINSTANCE /></field>
<field name="hIcon"><HICON /></field>
<field name="hCursor"><HCURSOR /></field>
<field name="hbrBackground"><HBRUSH /></field>
<field name="lpszMenuName"><LPCSTR /></field>
<field name="lpszClassName"><LPCSTR /></field>
} WNDCLASSA, *PWNDCLASSA, *NPWNDCLASSA, *LPWNDCLASSA;
typedef struct tagWNDCLASSW {
<field name="style"><UINT /></field>
<field name="lpfnWndProc"><WNDPROC /></field>
<field name="cbClsExtra"><int32 /></field>
<field name="cbWndExtra"><int32 /></field>
<field name="hInstance"><HINSTANCE /></field>
<field name="hIcon"><HICON /></field>
<field name="hCursor"><HCURSOR /></field>
<field name="hbrBackground"><HBRUSH /></field>
<field name="lpszMenuName"><LPCWSTR /></field>
<field name="lpszClassName"><LPCWSTR /></field>
} WNDCLASSW, *PWNDCLASSW, *NPWNDCLASSW, *LPWNDCLASSW;
<typedef name="WNDCLASS"><WNDCLASSA /></typedef>
<typedef name="PWNDCLASS"><PWNDCLASSA /></typedef>
<typedef name="NPWNDCLASS"><NPWNDCLASSA /></typedef>
<typedef name="LPWNDCLASS"><LPWNDCLASSA /></typedef>

BOOL __stdcall IsHungAppWindow( HWND hwnd);

void __stdcall DisableProcessWindowsGhosting( void);
typedef struct tagMSG {
<field name="hwnd"><HWND /></field>
<field name="message"><UINT /></field>
<field name="wParam"><WPARAM /></field>
<field name="lParam"><LPARAM /></field>
<field name="time"><DWORD /></field>
<field name="pt"><POINT /></field>
} MSG, *PMSG, *NPMSG, *LPMSG;
typedef struct tagMINMAXINFO {
<field name="ptReserved"><POINT /></field>
<field name="ptMaxSize"><POINT /></field>
<field name="ptMaxPosition"><POINT /></field>
<field name="ptMinTrackSize"><POINT /></field>
<field name="ptMaxTrackSize"><POINT /></field>
} MINMAXINFO, *PMINMAXINFO, *LPMINMAXINFO;
typedef struct tagCOPYDATASTRUCT {
<field name="dwData"><ULONG_PTR /></field>
<field name="cbData"><DWORD /></field>
<field name="lpData"><PVOID /></field>
} COPYDATASTRUCT, *PCOPYDATASTRUCT;
typedef struct tagMDINEXTMENU {
<field name="hmenuIn"><HMENU /></field>
<field name="hmenuNext"><HMENU /></field>
<field name="hwndNext"><HWND /></field>
} MDINEXTMENU, * PMDINEXTMENU, * LPMDINEXTMENU;
typedef struct {
<field name="PowerSetting"><GUID /></field>
<field name="DataLength"><DWORD /></field>
<field name="Data"><arr length="1"><UCHAR /></arr></field>
} POWERBROADCAST_SETTING, *PPOWERBROADCAST_SETTING;

UINT __stdcall RegisterWindowMessageA( LPCSTR lpString);

UINT __stdcall RegisterWindowMessageW( LPCWSTR lpString);
typedef struct tagWINDOWPOS {
<field name="hwnd"><HWND /></field>
<field name="hwndInsertAfter"><HWND /></field>
<field name="x"><int32 /></field>
<field name="y"><int32 /></field>
<field name="cx"><int32 /></field>
<field name="cy"><int32 /></field>
<field name="flags"><UINT /></field>
} WINDOWPOS, *LPWINDOWPOS, *PWINDOWPOS;
typedef struct tagNCCALCSIZE_PARAMS {
<field name="rgrc"><arr length="3"><RECT /></arr></field>
<field name="lppos"><PWINDOWPOS /></field>
} NCCALCSIZE_PARAMS, *LPNCCALCSIZE_PARAMS;
typedef struct tagTRACKMOUSEEVENT {
<field name="cbSize"><DWORD /></field>
<field name="dwFlags"><DWORD /></field>
<field name="hwndTrack"><HWND /></field>
<field name="dwHoverTime"><DWORD /></field>
} TRACKMOUSEEVENT, *LPTRACKMOUSEEVENT;

BOOL __stdcall TrackMouseEvent( LPTRACKMOUSEEVENT lpEventTrack);

BOOL __stdcall DrawEdge( HDC hdc, LPRECT qrc, UINT edge, UINT grfFlags);

BOOL __stdcall DrawFrameControl( HDC, LPRECT, UINT, UINT);

BOOL __stdcall DrawCaption( HWND hwnd, HDC hdc, const RECT * lprect, UINT flags);

BOOL __stdcall DrawAnimatedRects( HWND hwnd, int32 idAni, const RECT *lprcFrom, const RECT *lprcTo);
typedef struct tagACCEL {
<field name="fVirt"><BYTE /></field>
<field name="key"><WORD /></field>
<field name="cmd"><WORD /></field>
} ACCEL, *LPACCEL;
typedef struct tagPAINTSTRUCT {
<field name="hdc"><HDC /></field>
<field name="fErase"><BOOL /></field>
<field name="rcPaint"><RECT /></field>
<field name="fRestore"><BOOL /></field>
<field name="fIncUpdate"><BOOL /></field>
<field name="rgbReserved"><arr length="32"><BYTE /></arr></field>
} PAINTSTRUCT, *PPAINTSTRUCT, *NPPAINTSTRUCT, *LPPAINTSTRUCT;
typedef struct tagCREATESTRUCTA {
<field name="lpCreateParams"><LPVOID /></field>
<field name="hInstance"><HINSTANCE /></field>
<field name="hMenu"><HMENU /></field>
<field name="hwndParent"><HWND /></field>
<field name="cy"><int32 /></field>
<field name="cx"><int32 /></field>
<field name="y"><int32 /></field>
<field name="x"><int32 /></field>
<field name="style"><LONG /></field>
<field name="lpszName"><LPCSTR /></field>
<field name="lpszClass"><LPCSTR /></field>
<field name="dwExStyle"><DWORD /></field>
} CREATESTRUCTA, *LPCREATESTRUCTA;
typedef struct tagCREATESTRUCTW {
<field name="lpCreateParams"><LPVOID /></field>
<field name="hInstance"><HINSTANCE /></field>
<field name="hMenu"><HMENU /></field>
<field name="hwndParent"><HWND /></field>
<field name="cy"><int32 /></field>
<field name="cx"><int32 /></field>
<field name="y"><int32 /></field>
<field name="x"><int32 /></field>
<field name="style"><LONG /></field>
<field name="lpszName"><LPCWSTR /></field>
<field name="lpszClass"><LPCWSTR /></field>
<field name="dwExStyle"><DWORD /></field>
} CREATESTRUCTW, *LPCREATESTRUCTW;
<typedef name="CREATESTRUCT"><CREATESTRUCTA /></typedef>
<typedef name="LPCREATESTRUCT"><LPCREATESTRUCTA /></typedef>
typedef struct tagWINDOWPLACEMENT {
<field name="length"><UINT /></field>
<field name="flags"><UINT /></field>
<field name="showCmd"><UINT /></field>
<field name="ptMinPosition"><POINT /></field>
<field name="ptMaxPosition"><POINT /></field>
<field name="rcNormalPosition"><RECT /></field>
} WINDOWPLACEMENT;
typedef WINDOWPLACEMENT *PWINDOWPLACEMENT, *LPWINDOWPLACEMENT;
typedef struct tagNMHDR {
<field name="hwndFrom"><HWND /></field>
<field name="idFrom"><UINT_PTR /></field>
<field name="code"><UINT /></field>
} NMHDR;
<typedef name="LPNMHDR"><ptr><NMHDR /></ptr></typedef>
typedef struct tagSTYLESTRUCT {
<field name="styleOld"><DWORD /></field>
<field name="styleNew"><DWORD /></field>
} STYLESTRUCT, * LPSTYLESTRUCT;
typedef struct tagMEASUREITEMSTRUCT {
<field name="CtlType"><UINT /></field>
<field name="CtlID"><UINT /></field>
<field name="itemID"><UINT /></field>
<field name="itemWidth"><UINT /></field>
<field name="itemHeight"><UINT /></field>
<field name="itemData"><ULONG_PTR /></field>
} MEASUREITEMSTRUCT, *PMEASUREITEMSTRUCT, *LPMEASUREITEMSTRUCT;
typedef struct tagDRAWITEMSTRUCT {
<field name="CtlType"><UINT /></field>
<field name="CtlID"><UINT /></field>
<field name="itemID"><UINT /></field>
<field name="itemAction"><UINT /></field>
<field name="itemState"><UINT /></field>
<field name="hwndItem"><HWND /></field>
<field name="hDC"><HDC /></field>
<field name="rcItem"><RECT /></field>
<field name="itemData"><ULONG_PTR /></field>
} DRAWITEMSTRUCT, *PDRAWITEMSTRUCT, *LPDRAWITEMSTRUCT;
typedef struct tagDELETEITEMSTRUCT {
<field name="CtlType"><UINT /></field>
<field name="CtlID"><UINT /></field>
<field name="itemID"><UINT /></field>
<field name="hwndItem"><HWND /></field>
<field name="itemData"><ULONG_PTR /></field>
} DELETEITEMSTRUCT, *PDELETEITEMSTRUCT, *LPDELETEITEMSTRUCT;
typedef struct tagCOMPAREITEMSTRUCT {
<field name="CtlType"><UINT /></field>
<field name="CtlID"><UINT /></field>
<field name="hwndItem"><HWND /></field>
<field name="itemID1"><UINT /></field>
<field name="itemData1"><ULONG_PTR /></field>
<field name="itemID2"><UINT /></field>
<field name="itemData2"><ULONG_PTR /></field>
<field name="dwLocaleId"><DWORD /></field>
} COMPAREITEMSTRUCT, *PCOMPAREITEMSTRUCT, *LPCOMPAREITEMSTRUCT;

BOOL __stdcall GetMessageA( LPMSG lpMsg, HWND hWnd, UINT wMsgFilterMin, UINT wMsgFilterMax);

BOOL __stdcall GetMessageW( LPMSG lpMsg, HWND hWnd, UINT wMsgFilterMin, UINT wMsgFilterMax);

BOOL __stdcall TranslateMessage( const MSG *lpMsg);

LRESULT __stdcall DispatchMessageA( const MSG *lpMsg);

LRESULT __stdcall DispatchMessageW( const MSG *lpMsg);

BOOL __stdcall SetMessageQueue( int32 cMessagesMax);

BOOL __stdcall PeekMessageA( LPMSG lpMsg, HWND hWnd, UINT wMsgFilterMin, UINT wMsgFilterMax, UINT wRemoveMsg);

BOOL __stdcall PeekMessageW( LPMSG lpMsg, HWND hWnd, UINT wMsgFilterMin, UINT wMsgFilterMax, UINT wRemoveMsg);

BOOL __stdcall RegisterHotKey( HWND hWnd, int32 id, UINT fsModifiers, UINT vk);

BOOL __stdcall UnregisterHotKey( HWND hWnd, int32 id);

BOOL __stdcall ExitWindowsEx( UINT uFlags, DWORD dwReason);

BOOL __stdcall SwapMouseButton( BOOL fSwap);

DWORD __stdcall GetMessagePos( void);

LONG __stdcall GetMessageTime( void);

LPARAM __stdcall GetMessageExtraInfo( void);

BOOL __stdcall IsWow64Message( void);

LPARAM __stdcall SetMessageExtraInfo( LPARAM lParam);

LRESULT __stdcall SendMessageA( HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam);

LRESULT __stdcall SendMessageW( HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam);

LRESULT __stdcall SendMessageTimeoutA( HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam, UINT fuFlags, UINT uTimeout, PDWORD_PTR lpdwResult);

LRESULT __stdcall SendMessageTimeoutW( HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam, UINT fuFlags, UINT uTimeout, PDWORD_PTR lpdwResult);

BOOL __stdcall SendNotifyMessageA( HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam);

BOOL __stdcall SendNotifyMessageW( HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam);

BOOL __stdcall SendMessageCallbackA( HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam, SENDASYNCPROC lpResultCallBack, ULONG_PTR dwData);

BOOL __stdcall SendMessageCallbackW( HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam, SENDASYNCPROC lpResultCallBack, ULONG_PTR dwData);
typedef struct {
<field name="cbSize"><UINT /></field>
<field name="hdesk"><HDESK /></field>
<field name="hwnd"><HWND /></field>
<field name="luid"><LUID /></field>
} BSMINFO, *PBSMINFO;

long __stdcall BroadcastSystemMessageExA( DWORD flags, LPDWORD lpInfo, UINT Msg, WPARAM wParam, LPARAM lParam, PBSMINFO pbsmInfo);

long __stdcall BroadcastSystemMessageExW( DWORD flags, LPDWORD lpInfo, UINT Msg, WPARAM wParam, LPARAM lParam, PBSMINFO pbsmInfo);

long __stdcall BroadcastSystemMessageA( DWORD flags, LPDWORD lpInfo, UINT Msg, WPARAM wParam, LPARAM lParam);

long __stdcall BroadcastSystemMessageW( DWORD flags, LPDWORD lpInfo, UINT Msg, WPARAM wParam, LPARAM lParam);
<typedef name="HDEVNOTIFY"><PVOID /></typedef>
<typedef name="PHDEVNOTIFY"><ptr><HDEVNOTIFY /></ptr></typedef>

HDEVNOTIFY __stdcall RegisterDeviceNotificationA( HANDLE hRecipient, LPVOID NotificationFilter, DWORD Flags);

HDEVNOTIFY __stdcall RegisterDeviceNotificationW( HANDLE hRecipient, LPVOID NotificationFilter, DWORD Flags);

BOOL __stdcall UnregisterDeviceNotification( HDEVNOTIFY Handle );
<typedef name="HPOWERNOTIFY"><PVOID /></typedef>
<typedef name="PHPOWERNOTIFY"><ptr><HPOWERNOTIFY /></ptr></typedef>

HPOWERNOTIFY __stdcall RegisterPowerSettingNotification( HANDLE hRecipient, LPCGUID PowerSettingGuid, DWORD Flags );

BOOL __stdcall UnregisterPowerSettingNotification( HPOWERNOTIFY Handle );

BOOL __stdcall PostMessageA( HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam);

BOOL __stdcall PostMessageW( HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam);

BOOL __stdcall PostThreadMessageA( DWORD idThread, UINT Msg, WPARAM wParam, LPARAM lParam);

BOOL __stdcall PostThreadMessageW( DWORD idThread, UINT Msg, WPARAM wParam, LPARAM lParam);

BOOL __stdcall AttachThreadInput( DWORD idAttach, DWORD idAttachTo, BOOL fAttach);

BOOL __stdcall ReplyMessage( LRESULT lResult);

BOOL __stdcall WaitMessage( void);

DWORD __stdcall WaitForInputIdle( HANDLE hProcess, DWORD dwMilliseconds);

LRESULT __stdcall DefWindowProcA( HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam);

LRESULT __stdcall DefWindowProcW( HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam);

void __stdcall PostQuitMessage( int32 nExitCode);

LRESULT __stdcall CallWindowProcA( WNDPROC lpPrevWndFunc, HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam);

LRESULT __stdcall CallWindowProcW( WNDPROC lpPrevWndFunc, HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam);

BOOL __stdcall InSendMessage( void);

DWORD __stdcall InSendMessageEx( LPVOID lpReserved);

UINT __stdcall GetDoubleClickTime( void);

BOOL __stdcall SetDoubleClickTime( UINT);

ATOM __stdcall RegisterClassA( const WNDCLASSA *lpWndClass);

ATOM __stdcall RegisterClassW( const WNDCLASSW *lpWndClass);

BOOL __stdcall UnregisterClassA( LPCSTR lpClassName, HINSTANCE hInstance);

BOOL __stdcall UnregisterClassW( LPCWSTR lpClassName, HINSTANCE hInstance);

BOOL __stdcall GetClassInfoA( HINSTANCE hInstance, LPCSTR lpClassName, LPWNDCLASSA lpWndClass);

BOOL __stdcall GetClassInfoW( HINSTANCE hInstance, LPCWSTR lpClassName, LPWNDCLASSW lpWndClass);

ATOM __stdcall RegisterClassExA( const WNDCLASSEXA *);

ATOM __stdcall RegisterClassExW( const WNDCLASSEXW *);

BOOL __stdcall GetClassInfoExA( HINSTANCE hInstance, LPCSTR lpszClass, LPWNDCLASSEXA lpwcx);

BOOL __stdcall GetClassInfoExW( HINSTANCE hInstance, LPCWSTR lpszClass, LPWNDCLASSEXW lpwcx);
typedef BOOLEAN (__stdcall * PREGISTERCLASSNAMEW)(LPCWSTR);

HWND __stdcall CreateWindowExA( DWORD dwExStyle, LPCSTR lpClassName, LPCSTR lpWindowName, DWORD dwStyle, int32 X, int32 Y, int32 nWidth, int32 nHeight, HWND hWndParent, HMENU hMenu, HINSTANCE hInstance, LPVOID lpParam);

HWND __stdcall CreateWindowExW( DWORD dwExStyle, LPCWSTR lpClassName, LPCWSTR lpWindowName, DWORD dwStyle, int32 X, int32 Y, int32 nWidth, int32 nHeight, HWND hWndParent, HMENU hMenu, HINSTANCE hInstance, LPVOID lpParam);

BOOL __stdcall IsWindow( HWND hWnd);

BOOL __stdcall IsMenu( HMENU hMenu);

BOOL __stdcall IsChild( HWND hWndParent, HWND hWnd);

BOOL __stdcall DestroyWindow( HWND hWnd);

BOOL __stdcall ShowWindow( HWND hWnd, int32 nCmdShow);

BOOL __stdcall AnimateWindow( HWND hWnd, DWORD dwTime, DWORD dwFlags);

BOOL __stdcall UpdateLayeredWindow( HWND hWnd, HDC hdcDst, POINT* pptDst, SIZE* psize, HDC hdcSrc, POINT* pptSrc, COLORREF crKey, BLENDFUNCTION* pblend, DWORD dwFlags);
typedef struct tagUPDATELAYEREDWINDOWINFO {
<field name="cbSize"><DWORD /></field>
<field name="hdcDst"><HDC /></field>
<field name="pptDst"><ptr const="true"><POINT /></ptr></field>
<field name="psize"><ptr const="true"><SIZE /></ptr></field>
<field name="hdcSrc"><HDC /></field>
<field name="pptSrc"><ptr const="true"><POINT /></ptr></field>
<field name="crKey"><COLORREF /></field>
<field name="pblend"><ptr const="true"><BLENDFUNCTION /></ptr></field>
<field name="dwFlags"><DWORD /></field>
<field name="prcDirty"><ptr const="true"><RECT /></ptr></field>
} UPDATELAYEREDWINDOWINFO, *PUPDATELAYEREDWINDOWINFO;

BOOL __stdcall UpdateLayeredWindowIndirect( HWND hWnd, const UPDATELAYEREDWINDOWINFO* pULWInfo);

BOOL __stdcall GetLayeredWindowAttributes( HWND hwnd, COLORREF* pcrKey, BYTE* pbAlpha, DWORD* pdwFlags);

BOOL __stdcall PrintWindow( HWND hwnd, HDC hdcBlt, UINT nFlags);

BOOL __stdcall SetLayeredWindowAttributes( HWND hwnd, COLORREF crKey, BYTE bAlpha, DWORD dwFlags);

BOOL __stdcall ShowWindowAsync( HWND hWnd, int32 nCmdShow);

BOOL __stdcall FlashWindow( HWND hWnd, BOOL bInvert);
typedef struct {
<field name="cbSize"><UINT /></field>
<field name="hwnd"><HWND /></field>
<field name="dwFlags"><DWORD /></field>
<field name="uCount"><UINT /></field>
<field name="dwTimeout"><DWORD /></field>
} FLASHWINFO, *PFLASHWINFO;

BOOL __stdcall FlashWindowEx( PFLASHWINFO pfwi);

BOOL __stdcall ShowOwnedPopups( HWND hWnd, BOOL fShow);

BOOL __stdcall OpenIcon( HWND hWnd);

BOOL __stdcall CloseWindow( HWND hWnd);

BOOL __stdcall MoveWindow( HWND hWnd, int32 X, int32 Y, int32 nWidth, int32 nHeight, BOOL bRepaint);

BOOL __stdcall SetWindowPos( HWND hWnd, HWND hWndInsertAfter, int32 X, int32 Y, int32 cx, int32 cy, UINT uFlags);

BOOL __stdcall GetWindowPlacement( HWND hWnd, WINDOWPLACEMENT *lpwndpl);

BOOL __stdcall SetWindowPlacement( HWND hWnd, const WINDOWPLACEMENT *lpwndpl);

BOOL __stdcall GetWindowDisplayAffinity( HWND hWnd, DWORD* pdwAffinity);

BOOL __stdcall SetWindowDisplayAffinity( HWND hWnd, DWORD dwAffinity);

HDWP __stdcall BeginDeferWindowPos( int32 nNumWindows);

HDWP __stdcall DeferWindowPos( HDWP hWinPosInfo, HWND hWnd, HWND hWndInsertAfter, int32 x, int32 y, int32 cx, int32 cy, UINT uFlags);

BOOL __stdcall EndDeferWindowPos( HDWP hWinPosInfo);

BOOL __stdcall IsWindowVisible( HWND hWnd);

BOOL __stdcall IsIconic( HWND hWnd);

BOOL __stdcall AnyPopup( void);

BOOL __stdcall BringWindowToTop( HWND hWnd);

BOOL __stdcall IsZoomed( HWND hWnd);
typedef struct {
<field name="style"><DWORD /></field>
<field name="dwExtendedStyle"><DWORD /></field>
<field name="cdit"><WORD /></field>
<field name="x"><short /></field>
<field name="y"><short /></field>
<field name="cx"><short /></field>
<field name="cy"><short /></field>
} DLGTEMPLATE;
<typedef name="LPDLGTEMPLATEA"><ptr><DLGTEMPLATE /></ptr></typedef>
<typedef name="LPDLGTEMPLATEW"><ptr><DLGTEMPLATE /></ptr></typedef>
<typedef name="LPDLGTEMPLATE"><LPDLGTEMPLATEA /></typedef>
<typedef name="LPCDLGTEMPLATEA"><ptr const="true"><DLGTEMPLATE /></ptr></typedef>
<typedef name="LPCDLGTEMPLATEW"><ptr const="true"><DLGTEMPLATE /></ptr></typedef>
<typedef name="LPCDLGTEMPLATE"><LPCDLGTEMPLATEA /></typedef>
typedef struct {
<field name="style"><DWORD /></field>
<field name="dwExtendedStyle"><DWORD /></field>
<field name="x"><short /></field>
<field name="y"><short /></field>
<field name="cx"><short /></field>
<field name="cy"><short /></field>
<field name="id"><WORD /></field>
} DLGITEMTEMPLATE;
<typedef name="PDLGITEMTEMPLATEA"><ptr><DLGITEMTEMPLATE /></ptr></typedef>
<typedef name="PDLGITEMTEMPLATEW"><ptr><DLGITEMTEMPLATE /></ptr></typedef>
<typedef name="PDLGITEMTEMPLATE"><PDLGITEMTEMPLATEA /></typedef>
<typedef name="LPDLGITEMTEMPLATEA"><ptr><DLGITEMTEMPLATE /></ptr></typedef>
<typedef name="LPDLGITEMTEMPLATEW"><ptr><DLGITEMTEMPLATE /></ptr></typedef>
<typedef name="LPDLGITEMTEMPLATE"><LPDLGITEMTEMPLATEA /></typedef>

HWND __stdcall CreateDialogParamA( HINSTANCE hInstance, LPCSTR lpTemplateName, HWND hWndParent, DLGPROC lpDialogFunc, LPARAM dwInitParam);

HWND __stdcall CreateDialogParamW( HINSTANCE hInstance, LPCWSTR lpTemplateName, HWND hWndParent, DLGPROC lpDialogFunc, LPARAM dwInitParam);

HWND __stdcall CreateDialogIndirectParamA( HINSTANCE hInstance, LPCDLGTEMPLATEA lpTemplate, HWND hWndParent, DLGPROC lpDialogFunc, LPARAM dwInitParam);

HWND __stdcall CreateDialogIndirectParamW( HINSTANCE hInstance, LPCDLGTEMPLATEW lpTemplate, HWND hWndParent, DLGPROC lpDialogFunc, LPARAM dwInitParam);

INT_PTR __stdcall DialogBoxParamA( HINSTANCE hInstance, LPCSTR lpTemplateName, HWND hWndParent, DLGPROC lpDialogFunc, LPARAM dwInitParam);

INT_PTR __stdcall DialogBoxParamW( HINSTANCE hInstance, LPCWSTR lpTemplateName, HWND hWndParent, DLGPROC lpDialogFunc, LPARAM dwInitParam);

INT_PTR __stdcall DialogBoxIndirectParamA( HINSTANCE hInstance, LPCDLGTEMPLATEA hDialogTemplate, HWND hWndParent, DLGPROC lpDialogFunc, LPARAM dwInitParam);

INT_PTR __stdcall DialogBoxIndirectParamW( HINSTANCE hInstance, LPCDLGTEMPLATEW hDialogTemplate, HWND hWndParent, DLGPROC lpDialogFunc, LPARAM dwInitParam);

BOOL __stdcall EndDialog( HWND hDlg, INT_PTR nResult);

HWND __stdcall GetDlgItem( HWND hDlg, int32 nIDDlgItem);

BOOL __stdcall SetDlgItemInt( HWND hDlg, int32 nIDDlgItem, UINT uValue, BOOL bSigned);

UINT __stdcall GetDlgItemInt( HWND hDlg, int32 nIDDlgItem, BOOL *lpTranslated, BOOL bSigned);

BOOL __stdcall SetDlgItemTextA( HWND hDlg, int32 nIDDlgItem, LPCSTR lpString);

BOOL __stdcall SetDlgItemTextW( HWND hDlg, int32 nIDDlgItem, LPCWSTR lpString);

UINT __stdcall GetDlgItemTextA( HWND hDlg, int32 nIDDlgItem, LPSTR lpString, int32 cchMax);

UINT __stdcall GetDlgItemTextW( HWND hDlg, int32 nIDDlgItem, LPWSTR lpString, int32 cchMax);

BOOL __stdcall CheckDlgButton( HWND hDlg, int32 nIDButton, UINT uCheck);

BOOL __stdcall CheckRadioButton( HWND hDlg, int32 nIDFirstButton, int32 nIDLastButton, int32 nIDCheckButton);

UINT __stdcall IsDlgButtonChecked( HWND hDlg, int32 nIDButton);

LRESULT __stdcall SendDlgItemMessageA( HWND hDlg, int32 nIDDlgItem, UINT Msg, WPARAM wParam, LPARAM lParam);

LRESULT __stdcall SendDlgItemMessageW( HWND hDlg, int32 nIDDlgItem, UINT Msg, WPARAM wParam, LPARAM lParam);

HWND __stdcall GetNextDlgGroupItem( HWND hDlg, HWND hCtl, BOOL bPrevious);

HWND __stdcall GetNextDlgTabItem( HWND hDlg, HWND hCtl, BOOL bPrevious);

int32 __stdcall GetDlgCtrlID( HWND hWnd);

long __stdcall GetDialogBaseUnits();

LRESULT __stdcall DefDlgProcA( HWND hDlg, UINT Msg, WPARAM wParam, LPARAM lParam);

LRESULT __stdcall DefDlgProcW( HWND hDlg, UINT Msg, WPARAM wParam, LPARAM lParam);

BOOL __stdcall CallMsgFilterA( LPMSG lpMsg, int32 nCode);

BOOL __stdcall CallMsgFilterW( LPMSG lpMsg, int32 nCode);

BOOL __stdcall OpenClipboard( HWND hWndNewOwner);

BOOL __stdcall CloseClipboard( void);

DWORD __stdcall GetClipboardSequenceNumber( void);

HWND __stdcall GetClipboardOwner( void);

HWND __stdcall SetClipboardViewer( HWND hWndNewViewer);

HWND __stdcall GetClipboardViewer( void);

BOOL __stdcall ChangeClipboardChain( HWND hWndRemove, HWND hWndNewNext);

HANDLE __stdcall SetClipboardData( UINT uFormat, HANDLE hMem);

HANDLE __stdcall GetClipboardData( UINT uFormat);

UINT __stdcall RegisterClipboardFormatA( LPCSTR lpszFormat);

UINT __stdcall RegisterClipboardFormatW( LPCWSTR lpszFormat);

int32 __stdcall CountClipboardFormats( void);

UINT __stdcall EnumClipboardFormats( UINT format);

int32 __stdcall GetClipboardFormatNameA( UINT format, LPSTR lpszFormatName, int32 cchMaxCount);

int32 __stdcall GetClipboardFormatNameW( UINT format, LPWSTR lpszFormatName, int32 cchMaxCount);

BOOL __stdcall EmptyClipboard( void);

BOOL __stdcall IsClipboardFormatAvailable( UINT format);

int32 __stdcall GetPriorityClipboardFormat( UINT *paFormatPriorityList, int32 cFormats);

HWND __stdcall GetOpenClipboardWindow( void);

BOOL __stdcall AddClipboardFormatListener( HWND hwnd);

BOOL __stdcall RemoveClipboardFormatListener( HWND hwnd);

BOOL __stdcall GetUpdatedClipboardFormats( PUINT lpuiFormats, UINT cFormats, PUINT pcFormatsOut);

BOOL __stdcall CharToOemA( LPCSTR pSrc, LPSTR pDst);

BOOL __stdcall CharToOemW( LPCWSTR pSrc, LPSTR pDst);

BOOL __stdcall OemToCharA( LPCSTR pSrc, LPSTR pDst);

BOOL __stdcall OemToCharW( LPCSTR pSrc, LPWSTR pDst);

BOOL __stdcall CharToOemBuffA( LPCSTR lpszSrc, LPSTR lpszDst, DWORD cchDstLength);

BOOL __stdcall CharToOemBuffW( LPCWSTR lpszSrc, LPSTR lpszDst, DWORD cchDstLength);

BOOL __stdcall OemToCharBuffA( LPCSTR lpszSrc, LPSTR lpszDst, DWORD cchDstLength);

BOOL __stdcall OemToCharBuffW( LPCSTR lpszSrc, LPWSTR lpszDst, DWORD cchDstLength);

LPSTR __stdcall CharUpperA( LPSTR lpsz);

LPWSTR __stdcall CharUpperW( LPWSTR lpsz);

DWORD __stdcall CharUpperBuffA( LPSTR lpsz, DWORD cchLength);

DWORD __stdcall CharUpperBuffW( LPWSTR lpsz, DWORD cchLength);

LPSTR __stdcall CharLowerA( LPSTR lpsz);

LPWSTR __stdcall CharLowerW( LPWSTR lpsz);

DWORD __stdcall CharLowerBuffA( LPSTR lpsz, DWORD cchLength);

DWORD __stdcall CharLowerBuffW( LPWSTR lpsz, DWORD cchLength);

LPSTR __stdcall CharNextA( LPCSTR lpsz);

LPWSTR __stdcall CharNextW( LPCWSTR lpsz);

LPSTR __stdcall CharPrevA( LPCSTR lpszStart, LPCSTR lpszCurrent);

LPWSTR __stdcall CharPrevW( LPCWSTR lpszStart, LPCWSTR lpszCurrent);

LPSTR __stdcall CharNextExA( WORD CodePage, LPCSTR lpCurrentChar, DWORD dwFlags);

LPSTR __stdcall CharPrevExA( WORD CodePage, LPCSTR lpStart, LPCSTR lpCurrentChar, DWORD dwFlags);

BOOL __stdcall IsCharAlphaA( CHAR ch);

BOOL __stdcall IsCharAlphaW( WCHAR ch);

BOOL __stdcall IsCharAlphaNumericA( CHAR ch);

BOOL __stdcall IsCharAlphaNumericW( WCHAR ch);

BOOL __stdcall IsCharUpperA( CHAR ch);

BOOL __stdcall IsCharUpperW( WCHAR ch);

BOOL __stdcall IsCharLowerA( CHAR ch);

BOOL __stdcall IsCharLowerW( WCHAR ch);

HWND __stdcall SetFocus( HWND hWnd);

HWND __stdcall GetActiveWindow( void);

HWND __stdcall GetFocus( void);

UINT __stdcall GetKBCodePage( void);

SHORT __stdcall GetKeyState( int32 nVirtKey);

SHORT __stdcall GetAsyncKeyState( int32 vKey);

BOOL __stdcall GetKeyboardState( PBYTE lpKeyState);

BOOL __stdcall SetKeyboardState( LPBYTE lpKeyState);

int32 __stdcall GetKeyNameTextA( LONG lParam, LPSTR lpString, int32 cchSize);

int32 __stdcall GetKeyNameTextW( LONG lParam, LPWSTR lpString, int32 cchSize);

int32 __stdcall GetKeyboardType( int32 nTypeFlag);

int32 __stdcall ToAscii( UINT uVirtKey, UINT uScanCode, const BYTE *lpKeyState, LPWORD lpChar, UINT uFlags);

int32 __stdcall ToAsciiEx( UINT uVirtKey, UINT uScanCode, const BYTE *lpKeyState, LPWORD lpChar, UINT uFlags, HKL dwhkl);

int32 __stdcall ToUnicode( UINT wVirtKey, UINT wScanCode, const BYTE *lpKeyState, LPWSTR pwszBuff, int32 cchBuff, UINT wFlags);

DWORD __stdcall OemKeyScan( WORD wOemChar);

SHORT __stdcall VkKeyScanA( CHAR ch);

SHORT __stdcall VkKeyScanW( WCHAR ch);

SHORT __stdcall VkKeyScanExA( CHAR ch, HKL dwhkl);

SHORT __stdcall VkKeyScanExW( WCHAR ch, HKL dwhkl);

void __stdcall keybd_event( BYTE bVk, BYTE bScan, DWORD dwFlags, ULONG_PTR dwExtraInfo);

void __stdcall mouse_event( DWORD dwFlags, DWORD dx, DWORD dy, DWORD dwData, ULONG_PTR dwExtraInfo);
typedef struct tagMOUSEINPUT {
<field name="dx"><LONG /></field>
<field name="dy"><LONG /></field>
<field name="mouseData"><DWORD /></field>
<field name="dwFlags"><DWORD /></field>
<field name="time"><DWORD /></field>
<field name="dwExtraInfo"><ULONG_PTR /></field>
} MOUSEINPUT, *PMOUSEINPUT, * LPMOUSEINPUT;
typedef struct tagKEYBDINPUT {
<field name="wVk"><WORD /></field>
<field name="wScan"><WORD /></field>
<field name="dwFlags"><DWORD /></field>
<field name="time"><DWORD /></field>
<field name="dwExtraInfo"><ULONG_PTR /></field>
} KEYBDINPUT, *PKEYBDINPUT, * LPKEYBDINPUT;
typedef struct tagHARDWAREINPUT {
<field name="uMsg"><DWORD /></field>
<field name="wParamL"><WORD /></field>
<field name="wParamH"><WORD /></field>
} HARDWAREINPUT, *PHARDWAREINPUT, * LPHARDWAREINPUT;
typedef struct tagINPUT {
<field name="type"><DWORD /></field>
union {
<field name="mi"><MOUSEINPUT /></field>
<field name="ki"><KEYBDINPUT /></field>
<field name="hi"><HARDWAREINPUT /></field>
};
} INPUT, *PINPUT, * LPINPUT;

UINT __stdcall SendInput( UINT cInputs, LPINPUT pInputs, int32 cbSize);
struct HTOUCHINPUT__{int32 unused;
;
typedef struct HTOUCHINPUT__ *HTOUCHINPUT;
typedef struct tagTOUCHINPUT {
<field name="x"><LONG /></field>
<field name="y"><LONG /></field>
<field name="hSource"><HANDLE /></field>
<field name="dwID"><DWORD /></field>
<field name="dwFlags"><DWORD /></field>
<field name="dwMask"><DWORD /></field>
<field name="dwTime"><DWORD /></field>
<field name="dwExtraInfo"><ULONG_PTR /></field>
<field name="cxContact"><DWORD /></field>
<field name="cyContact"><DWORD /></field>
} TOUCHINPUT, *PTOUCHINPUT;
typedef TOUCHINPUT const * PCTOUCHINPUT;

BOOL __stdcall GetTouchInputInfo( HTOUCHINPUT hTouchInput, UINT cInputs, PTOUCHINPUT pInputs, int32 cbSize);

BOOL __stdcall CloseTouchInputHandle( HTOUCHINPUT hTouchInput);

BOOL __stdcall RegisterTouchWindow( HWND hwnd, ULONG ulFlags);

BOOL __stdcall UnregisterTouchWindow( HWND hwnd);

BOOL __stdcall IsTouchWindow( HWND hwnd, PULONG pulFlags);
typedef struct tagLASTINPUTINFO {
<field name="cbSize"><UINT /></field>
<field name="dwTime"><DWORD /></field>
} LASTINPUTINFO, * PLASTINPUTINFO;

BOOL __stdcall GetLastInputInfo( PLASTINPUTINFO plii);

UINT __stdcall MapVirtualKeyA( UINT uCode, UINT uMapType);

UINT __stdcall MapVirtualKeyW( UINT uCode, UINT uMapType);

UINT __stdcall MapVirtualKeyExA( UINT uCode, UINT uMapType, HKL dwhkl);

UINT __stdcall MapVirtualKeyExW( UINT uCode, UINT uMapType, HKL dwhkl);

BOOL __stdcall GetInputState( void);

DWORD __stdcall GetQueueStatus( UINT flags);

HWND __stdcall GetCapture( void);

HWND __stdcall SetCapture( HWND hWnd);

BOOL __stdcall ReleaseCapture( void);

DWORD __stdcall MsgWaitForMultipleObjects( DWORD nCount, const HANDLE *pHandles, BOOL fWaitAll, DWORD dwMilliseconds, DWORD dwWakeMask);

DWORD __stdcall MsgWaitForMultipleObjectsEx( DWORD nCount, const HANDLE *pHandles, DWORD dwMilliseconds, DWORD dwWakeMask, DWORD dwFlags);

UINT_PTR __stdcall SetTimer( HWND hWnd, UINT_PTR nIDEvent, UINT uElapse, TIMERPROC lpTimerFunc);

BOOL __stdcall KillTimer( HWND hWnd, UINT_PTR uIDEvent);

BOOL __stdcall IsWindowUnicode( HWND hWnd);

BOOL __stdcall EnableWindow( HWND hWnd, BOOL bEnable);

BOOL __stdcall IsWindowEnabled( HWND hWnd);

HACCEL __stdcall LoadAcceleratorsA( HINSTANCE hInstance, LPCSTR lpTableName);

HACCEL __stdcall LoadAcceleratorsW( HINSTANCE hInstance, LPCWSTR lpTableName);

HACCEL __stdcall CreateAcceleratorTableA( LPACCEL paccel, int32 cAccel);

HACCEL __stdcall CreateAcceleratorTableW( LPACCEL paccel, int32 cAccel);

BOOL __stdcall DestroyAcceleratorTable( HACCEL hAccel);

int32 __stdcall CopyAcceleratorTableA( HACCEL hAccelSrc, LPACCEL lpAccelDst, int32 cAccelEntries);

int32 __stdcall CopyAcceleratorTableW( HACCEL hAccelSrc, LPACCEL lpAccelDst, int32 cAccelEntries);

int32 __stdcall TranslateAcceleratorA( HWND hWnd, HACCEL hAccTable, LPMSG lpMsg);

int32 __stdcall TranslateAcceleratorW( HWND hWnd, HACCEL hAccTable, LPMSG lpMsg);

int32 __stdcall GetSystemMetrics( int32 nIndex);

HMENU __stdcall LoadMenuA( HINSTANCE hInstance, LPCSTR lpMenuName);

HMENU __stdcall LoadMenuW( HINSTANCE hInstance, LPCWSTR lpMenuName);

HMENU __stdcall LoadMenuIndirectA( const MENUTEMPLATEA *lpMenuTemplate);

HMENU __stdcall LoadMenuIndirectW( const MENUTEMPLATEW *lpMenuTemplate);

HMENU __stdcall GetMenu( HWND hWnd);

BOOL __stdcall SetMenu( HWND hWnd, HMENU hMenu);

BOOL __stdcall ChangeMenuA( HMENU hMenu, UINT cmd, LPCSTR lpszNewItem, UINT cmdInsert, UINT flags);

BOOL __stdcall ChangeMenuW( HMENU hMenu, UINT cmd, LPCWSTR lpszNewItem, UINT cmdInsert, UINT flags);

BOOL __stdcall HiliteMenuItem( HWND hWnd, HMENU hMenu, UINT uIDHiliteItem, UINT uHilite);

int32 __stdcall GetMenuStringA( HMENU hMenu, UINT uIDItem, LPSTR lpString, int32 cchMax, UINT flags);

int32 __stdcall GetMenuStringW( HMENU hMenu, UINT uIDItem, LPWSTR lpString, int32 cchMax, UINT flags);

UINT __stdcall GetMenuState( HMENU hMenu, UINT uId, UINT uFlags);

BOOL __stdcall DrawMenuBar( HWND hWnd);

HMENU __stdcall GetSystemMenu( HWND hWnd, BOOL bRevert);

HMENU __stdcall CreateMenu( void);

HMENU __stdcall CreatePopupMenu( void);

BOOL __stdcall DestroyMenu( HMENU hMenu);

DWORD __stdcall CheckMenuItem( HMENU hMenu, UINT uIDCheckItem, UINT uCheck);

BOOL __stdcall EnableMenuItem( HMENU hMenu, UINT uIDEnableItem, UINT uEnable);

HMENU __stdcall GetSubMenu( HMENU hMenu, int32 nPos);

UINT __stdcall GetMenuItemID( HMENU hMenu, int32 nPos);

int32 __stdcall GetMenuItemCount( HMENU hMenu);

BOOL __stdcall InsertMenuA( HMENU hMenu, UINT uPosition, UINT uFlags, UINT_PTR uIDNewItem, LPCSTR lpNewItem);

BOOL __stdcall InsertMenuW( HMENU hMenu, UINT uPosition, UINT uFlags, UINT_PTR uIDNewItem, LPCWSTR lpNewItem);

BOOL __stdcall AppendMenuA( HMENU hMenu, UINT uFlags, UINT_PTR uIDNewItem, LPCSTR lpNewItem);

BOOL __stdcall AppendMenuW( HMENU hMenu, UINT uFlags, UINT_PTR uIDNewItem, LPCWSTR lpNewItem);

BOOL __stdcall ModifyMenuA( HMENU hMnu, UINT uPosition, UINT uFlags, UINT_PTR uIDNewItem, LPCSTR lpNewItem);

BOOL __stdcall ModifyMenuW( HMENU hMnu, UINT uPosition, UINT uFlags, UINT_PTR uIDNewItem, LPCWSTR lpNewItem);

BOOL __stdcall RemoveMenu( HMENU hMenu, UINT uPosition, UINT uFlags);

BOOL __stdcall DeleteMenu( HMENU hMenu, UINT uPosition, UINT uFlags);

BOOL __stdcall SetMenuItemBitmaps( HMENU hMenu, UINT uPosition, UINT uFlags, HBITMAP hBitmapUnchecked, HBITMAP hBitmapChecked);

LONG __stdcall GetMenuCheckMarkDimensions( void);

BOOL __stdcall TrackPopupMenu( HMENU hMenu, UINT uFlags, int32 x, int32 y, int32 nReserved, HWND hWnd, const RECT *prcRect);
typedef struct tagTPMPARAMS {
<field name="cbSize"><UINT /></field>
<field name="rcExclude"><RECT /></field>
} TPMPARAMS;
<typedef name="LPTPMPARAMS"><ptr><TPMPARAMS /></ptr></typedef>

BOOL __stdcall TrackPopupMenuEx( HMENU, UINT, int32, int32, HWND, LPTPMPARAMS);

BOOL __stdcall CalculatePopupWindowPosition( const POINT *anchorPoint, const SIZE *windowSize, UINT flags, RECT *excludeRect, RECT *popupWindowPosition);
typedef struct tagMENUINFO {
<field name="cbSize"><DWORD /></field>
<field name="fMask"><DWORD /></field>
<field name="dwStyle"><DWORD /></field>
<field name="cyMax"><UINT /></field>
<field name="hbrBack"><HBRUSH /></field>
<field name="dwContextHelpID"><DWORD /></field>
<field name="dwMenuData"><ULONG_PTR /></field>
} MENUINFO, *LPMENUINFO;
typedef MENUINFO const *LPCMENUINFO;

BOOL __stdcall GetMenuInfo( HMENU, LPMENUINFO);

BOOL __stdcall SetMenuInfo( HMENU, LPCMENUINFO);

BOOL __stdcall EndMenu( void);
typedef struct tagMENUGETOBJECTINFO {
<field name="dwFlags"><DWORD /></field>
<field name="uPos"><UINT /></field>
<field name="hmenu"><HMENU /></field>
<field name="riid"><PVOID /></field>
<field name="pvObj"><PVOID /></field>
} MENUGETOBJECTINFO, * PMENUGETOBJECTINFO;
typedef struct tagMENUITEMINFOA {
<field name="cbSize"><UINT /></field>
<field name="fMask"><UINT /></field>
<field name="fType"><UINT /></field>
<field name="fState"><UINT /></field>
<field name="wID"><UINT /></field>
<field name="hSubMenu"><HMENU /></field>
<field name="hbmpChecked"><HBITMAP /></field>
<field name="hbmpUnchecked"><HBITMAP /></field>
<field name="dwItemData"><ULONG_PTR /></field>
<field name="dwTypeData"><LPSTR /></field>
<field name="cch"><UINT /></field>
<field name="hbmpItem"><HBITMAP /></field>
} MENUITEMINFOA, *LPMENUITEMINFOA;
typedef struct tagMENUITEMINFOW {
<field name="cbSize"><UINT /></field>
<field name="fMask"><UINT /></field>
<field name="fType"><UINT /></field>
<field name="fState"><UINT /></field>
<field name="wID"><UINT /></field>
<field name="hSubMenu"><HMENU /></field>
<field name="hbmpChecked"><HBITMAP /></field>
<field name="hbmpUnchecked"><HBITMAP /></field>
<field name="dwItemData"><ULONG_PTR /></field>
<field name="dwTypeData"><LPWSTR /></field>
<field name="cch"><UINT /></field>
<field name="hbmpItem"><HBITMAP /></field>
} MENUITEMINFOW, *LPMENUITEMINFOW;
<typedef name="MENUITEMINFO"><MENUITEMINFOA /></typedef>
<typedef name="LPMENUITEMINFO"><LPMENUITEMINFOA /></typedef>
typedef MENUITEMINFOA const *LPCMENUITEMINFOA;
typedef MENUITEMINFOW const *LPCMENUITEMINFOW;
<typedef name="LPCMENUITEMINFO"><LPCMENUITEMINFOA /></typedef>

BOOL __stdcall InsertMenuItemA( HMENU hmenu, UINT item, BOOL fByPosition, LPCMENUITEMINFOA lpmi);

BOOL __stdcall InsertMenuItemW( HMENU hmenu, UINT item, BOOL fByPosition, LPCMENUITEMINFOW lpmi);

BOOL __stdcall GetMenuItemInfoA( HMENU hmenu, UINT item, BOOL fByPosition, LPMENUITEMINFOA lpmii);

BOOL __stdcall GetMenuItemInfoW( HMENU hmenu, UINT item, BOOL fByPosition, LPMENUITEMINFOW lpmii);

BOOL __stdcall SetMenuItemInfoA( HMENU hmenu, UINT item, BOOL fByPositon, LPCMENUITEMINFOA lpmii);

BOOL __stdcall SetMenuItemInfoW( HMENU hmenu, UINT item, BOOL fByPositon, LPCMENUITEMINFOW lpmii);

UINT __stdcall GetMenuDefaultItem( HMENU hMenu, UINT fByPos, UINT gmdiFlags);

BOOL __stdcall SetMenuDefaultItem( HMENU hMenu, UINT uItem, UINT fByPos);

BOOL __stdcall GetMenuItemRect( HWND hWnd, HMENU hMenu, UINT uItem, LPRECT lprcItem);

int32 __stdcall MenuItemFromPoint( HWND hWnd, HMENU hMenu, POINT ptScreen);
typedef struct tagDROPSTRUCT {
<field name="hwndSource"><HWND /></field>
<field name="hwndSink"><HWND /></field>
<field name="wFmt"><DWORD /></field>
<field name="dwData"><ULONG_PTR /></field>
<field name="ptDrop"><POINT /></field>
<field name="dwControlData"><DWORD /></field>
} DROPSTRUCT, *PDROPSTRUCT, *LPDROPSTRUCT;

DWORD __stdcall DragObject( HWND hwndParent, HWND hwndFrom, UINT fmt, ULONG_PTR data, HCURSOR hcur);

BOOL __stdcall DragDetect( HWND hwnd, POINT pt);

BOOL __stdcall DrawIcon( HDC hDC, int32 X, int32 Y, HICON hIcon);
typedef struct tagDRAWTEXTPARAMS {
<field name="cbSize"><UINT /></field>
<field name="iTabLength"><int32 /></field>
<field name="iLeftMargin"><int32 /></field>
<field name="iRightMargin"><int32 /></field>
<field name="uiLengthDrawn"><UINT /></field>
} DRAWTEXTPARAMS, *LPDRAWTEXTPARAMS;

int32 __stdcall DrawTextA( HDC hdc, LPCSTR lpchText, int32 cchText, LPRECT lprc, UINT format);

int32 __stdcall DrawTextW( HDC hdc, LPCWSTR lpchText, int32 cchText, LPRECT lprc, UINT format);

int32 __stdcall DrawTextExA( HDC hdc, LPSTR lpchText, int32 cchText, LPRECT lprc, UINT format, LPDRAWTEXTPARAMS lpdtp);

int32 __stdcall DrawTextExW( HDC hdc, LPWSTR lpchText, int32 cchText, LPRECT lprc, UINT format, LPDRAWTEXTPARAMS lpdtp);

BOOL __stdcall GrayStringA( HDC hDC, HBRUSH hBrush, GRAYSTRINGPROC lpOutputFunc, LPARAM lpData, int32 nCount, int32 X, int32 Y, int32 nWidth, int32 nHeight);

BOOL __stdcall GrayStringW( HDC hDC, HBRUSH hBrush, GRAYSTRINGPROC lpOutputFunc, LPARAM lpData, int32 nCount, int32 X, int32 Y, int32 nWidth, int32 nHeight);

BOOL __stdcall DrawStateA( HDC hdc, HBRUSH hbrFore, DRAWSTATEPROC qfnCallBack, LPARAM lData, WPARAM wData, int32 x, int32 y, int32 cx, int32 cy, UINT uFlags);

BOOL __stdcall DrawStateW( HDC hdc, HBRUSH hbrFore, DRAWSTATEPROC qfnCallBack, LPARAM lData, WPARAM wData, int32 x, int32 y, int32 cx, int32 cy, UINT uFlags);

LONG __stdcall TabbedTextOutA( HDC hdc, int32 x, int32 y, LPCSTR lpString, int32 chCount, int32 nTabPositions, const INT *lpnTabStopPositions, int32 nTabOrigin);

LONG __stdcall TabbedTextOutW( HDC hdc, int32 x, int32 y, LPCWSTR lpString, int32 chCount, int32 nTabPositions, const INT *lpnTabStopPositions, int32 nTabOrigin);

DWORD __stdcall GetTabbedTextExtentA( HDC hdc, LPCSTR lpString, int32 chCount, int32 nTabPositions, const INT *lpnTabStopPositions);

DWORD __stdcall GetTabbedTextExtentW( HDC hdc, LPCWSTR lpString, int32 chCount, int32 nTabPositions, const INT *lpnTabStopPositions);

BOOL __stdcall UpdateWindow( HWND hWnd);

HWND __stdcall SetActiveWindow( HWND hWnd);

HWND __stdcall GetForegroundWindow( void);

BOOL __stdcall PaintDesktop( HDC hdc);

void __stdcall SwitchToThisWindow( HWND hwnd, BOOL fUnknown);

BOOL __stdcall SetForegroundWindow( HWND hWnd);

BOOL __stdcall AllowSetForegroundWindow( DWORD dwProcessId);

BOOL __stdcall LockSetForegroundWindow( UINT uLockCode);

HWND __stdcall WindowFromDC( HDC hDC);

HDC __stdcall GetDC( HWND hWnd);

HDC __stdcall GetDCEx( HWND hWnd, HRGN hrgnClip, DWORD flags);

HDC __stdcall GetWindowDC( HWND hWnd);

int32 __stdcall ReleaseDC( HWND hWnd, HDC hDC);

HDC __stdcall BeginPaint( HWND hWnd, LPPAINTSTRUCT lpPaint);

BOOL __stdcall EndPaint( HWND hWnd, const PAINTSTRUCT *lpPaint);

BOOL __stdcall GetUpdateRect( HWND hWnd, LPRECT lpRect, BOOL bErase);

int32 __stdcall GetUpdateRgn( HWND hWnd, HRGN hRgn, BOOL bErase);

int32 __stdcall SetWindowRgn( HWND hWnd, HRGN hRgn, BOOL bRedraw);

int32 __stdcall GetWindowRgn( HWND hWnd, HRGN hRgn);

int32 __stdcall GetWindowRgnBox( HWND hWnd, LPRECT lprc);

int32 __stdcall ExcludeUpdateRgn( HDC hDC, HWND hWnd);

BOOL __stdcall InvalidateRect( HWND hWnd, const RECT *lpRect, BOOL bErase);

BOOL __stdcall ValidateRect( HWND hWnd, const RECT *lpRect);

BOOL __stdcall InvalidateRgn( HWND hWnd, HRGN hRgn, BOOL bErase);

BOOL __stdcall ValidateRgn( HWND hWnd, HRGN hRgn);

BOOL __stdcall RedrawWindow( HWND hWnd, const RECT *lprcUpdate, HRGN hrgnUpdate, UINT flags);

BOOL __stdcall LockWindowUpdate( HWND hWndLock);

BOOL __stdcall ScrollWindow( HWND hWnd, int32 XAmount, int32 YAmount, const RECT *lpRect, const RECT *lpClipRect);

BOOL __stdcall ScrollDC( HDC hDC, int32 dx, int32 dy, const RECT *lprcScroll, const RECT *lprcClip, HRGN hrgnUpdate, LPRECT lprcUpdate);

int32 __stdcall ScrollWindowEx( HWND hWnd, int32 dx, int32 dy, const RECT *prcScroll, const RECT *prcClip, HRGN hrgnUpdate, LPRECT prcUpdate, UINT flags);

int32 __stdcall SetScrollPos( HWND hWnd, int32 nBar, int32 nPos, BOOL bRedraw);

int32 __stdcall GetScrollPos( HWND hWnd, int32 nBar);

BOOL __stdcall SetScrollRange( HWND hWnd, int32 nBar, int32 nMinPos, int32 nMaxPos, BOOL bRedraw);

BOOL __stdcall GetScrollRange( HWND hWnd, int32 nBar, LPINT lpMinPos, LPINT lpMaxPos);

BOOL __stdcall ShowScrollBar( HWND hWnd, int32 wBar, BOOL bShow);

BOOL __stdcall EnableScrollBar( HWND hWnd, UINT wSBflags, UINT wArrows);

BOOL __stdcall SetPropA( HWND hWnd, LPCSTR lpString, HANDLE hData);

BOOL __stdcall SetPropW( HWND hWnd, LPCWSTR lpString, HANDLE hData);

HANDLE __stdcall GetPropA( HWND hWnd, LPCSTR lpString);

HANDLE __stdcall GetPropW( HWND hWnd, LPCWSTR lpString);

HANDLE __stdcall RemovePropA( HWND hWnd, LPCSTR lpString);

HANDLE __stdcall RemovePropW( HWND hWnd, LPCWSTR lpString);

int32 __stdcall EnumPropsExA( HWND hWnd, PROPENUMPROCEXA lpEnumFunc, LPARAM lParam);

int32 __stdcall EnumPropsExW( HWND hWnd, PROPENUMPROCEXW lpEnumFunc, LPARAM lParam);

int32 __stdcall EnumPropsA( HWND hWnd, PROPENUMPROCA lpEnumFunc);

int32 __stdcall EnumPropsW( HWND hWnd, PROPENUMPROCW lpEnumFunc);

BOOL __stdcall SetWindowTextA( HWND hWnd, LPCSTR lpString);

BOOL __stdcall SetWindowTextW( HWND hWnd, LPCWSTR lpString);

int32 __stdcall GetWindowTextA( HWND hWnd, LPSTR lpString, int32 nMaxCount);

int32 __stdcall GetWindowTextW( HWND hWnd, LPWSTR lpString, int32 nMaxCount);

int32 __stdcall GetWindowTextLengthA( HWND hWnd);

int32 __stdcall GetWindowTextLengthW( HWND hWnd);

BOOL __stdcall GetClientRect( HWND hWnd, LPRECT lpRect);

BOOL __stdcall GetWindowRect( HWND hWnd, LPRECT lpRect);

BOOL __stdcall AdjustWindowRect( LPRECT lpRect, DWORD dwStyle, BOOL bMenu);

BOOL __stdcall AdjustWindowRectEx( LPRECT lpRect, DWORD dwStyle, BOOL bMenu, DWORD dwExStyle);
typedef struct tagHELPINFO {
<field name="cbSize"><UINT /></field>
<field name="iContextType"><int32 /></field>
<field name="iCtrlId"><int32 /></field>
<field name="hItemHandle"><HANDLE /></field>
<field name="dwContextId"><DWORD_PTR /></field>
<field name="MousePos"><POINT /></field>
} HELPINFO, *LPHELPINFO;

BOOL __stdcall SetWindowContextHelpId( HWND, DWORD);

DWORD __stdcall GetWindowContextHelpId( HWND);

BOOL __stdcall SetMenuContextHelpId( HMENU, DWORD);

DWORD __stdcall GetMenuContextHelpId( HMENU);

int32 __stdcall MessageBoxA( HWND hWnd, LPCSTR lpText, LPCSTR lpCaption, UINT uType);

int32 __stdcall MessageBoxW( HWND hWnd, LPCWSTR lpText, LPCWSTR lpCaption, UINT uType);

int32 __stdcall MessageBoxExA( HWND hWnd, LPCSTR lpText, LPCSTR lpCaption, UINT uType, WORD wLanguageId);

int32 __stdcall MessageBoxExW( HWND hWnd, LPCWSTR lpText, LPCWSTR lpCaption, UINT uType, WORD wLanguageId);
typedef void (__stdcall *MSGBOXCALLBACK)(LPHELPINFO lpHelpInfo);
typedef struct tagMSGBOXPARAMSA {
<field name="cbSize"><UINT /></field>
<field name="hwndOwner"><HWND /></field>
<field name="hInstance"><HINSTANCE /></field>
<field name="lpszText"><LPCSTR /></field>
<field name="lpszCaption"><LPCSTR /></field>
<field name="dwStyle"><DWORD /></field>
<field name="lpszIcon"><LPCSTR /></field>
<field name="dwContextHelpId"><DWORD_PTR /></field>
<field name="lpfnMsgBoxCallback"><MSGBOXCALLBACK /></field>
<field name="dwLanguageId"><DWORD /></field>
} MSGBOXPARAMSA, *PMSGBOXPARAMSA, *LPMSGBOXPARAMSA;
typedef struct tagMSGBOXPARAMSW {
<field name="cbSize"><UINT /></field>
<field name="hwndOwner"><HWND /></field>
<field name="hInstance"><HINSTANCE /></field>
<field name="lpszText"><LPCWSTR /></field>
<field name="lpszCaption"><LPCWSTR /></field>
<field name="dwStyle"><DWORD /></field>
<field name="lpszIcon"><LPCWSTR /></field>
<field name="dwContextHelpId"><DWORD_PTR /></field>
<field name="lpfnMsgBoxCallback"><MSGBOXCALLBACK /></field>
<field name="dwLanguageId"><DWORD /></field>
} MSGBOXPARAMSW, *PMSGBOXPARAMSW, *LPMSGBOXPARAMSW;
<typedef name="MSGBOXPARAMS"><MSGBOXPARAMSA /></typedef>
<typedef name="PMSGBOXPARAMS"><PMSGBOXPARAMSA /></typedef>
<typedef name="LPMSGBOXPARAMS"><LPMSGBOXPARAMSA /></typedef>

int32 __stdcall MessageBoxIndirectA( const MSGBOXPARAMSA * lpmbp);

int32 __stdcall MessageBoxIndirectW( const MSGBOXPARAMSW * lpmbp);

BOOL __stdcall MessageBeep( UINT uType);

int32 __stdcall ShowCursor( BOOL bShow);

BOOL __stdcall SetCursorPos( int32 X, int32 Y);

BOOL __stdcall SetPhysicalCursorPos( int32 X, int32 Y);

HCURSOR __stdcall SetCursor( HCURSOR hCursor);

BOOL __stdcall GetCursorPos( LPPOINT lpPoint);

BOOL __stdcall GetPhysicalCursorPos( LPPOINT lpPoint);

BOOL __stdcall ClipCursor( const RECT *lpRect);

BOOL __stdcall GetClipCursor( LPRECT lpRect);

HCURSOR __stdcall GetCursor( void);

BOOL __stdcall CreateCaret( HWND hWnd, HBITMAP hBitmap, int32 nWidth, int32 nHeight);

UINT __stdcall GetCaretBlinkTime( void);

BOOL __stdcall SetCaretBlinkTime( UINT uMSeconds);

BOOL __stdcall DestroyCaret( void);

BOOL __stdcall HideCaret( HWND hWnd);

BOOL __stdcall ShowCaret( HWND hWnd);

BOOL __stdcall SetCaretPos( int32 X, int32 Y);

BOOL __stdcall GetCaretPos( LPPOINT lpPoint);

BOOL __stdcall ClientToScreen( HWND hWnd, LPPOINT lpPoint);

BOOL __stdcall ScreenToClient( HWND hWnd, LPPOINT lpPoint);

BOOL __stdcall LogicalToPhysicalPoint( HWND hWnd, LPPOINT lpPoint);

BOOL __stdcall PhysicalToLogicalPoint( HWND hWnd, LPPOINT lpPoint);

int32 __stdcall MapWindowPoints( HWND hWndFrom, HWND hWndTo, LPPOINT lpPoints, UINT cPoints);

HWND __stdcall WindowFromPoint( POINT Point);

HWND __stdcall WindowFromPhysicalPoint( POINT Point);

HWND __stdcall ChildWindowFromPoint( HWND hWndParent, POINT Point);

HWND __stdcall ChildWindowFromPointEx( HWND hwnd, POINT pt, UINT flags);

DWORD __stdcall GetSysColor( int32 nIndex);

HBRUSH __stdcall GetSysColorBrush( int32 nIndex);

BOOL __stdcall SetSysColors( int32 cElements, const INT * lpaElements, const COLORREF * lpaRgbValues);

BOOL __stdcall DrawFocusRect( HDC hDC, const RECT * lprc);

int32 __stdcall FillRect( HDC hDC, const RECT *lprc, HBRUSH hbr);

int32 __stdcall FrameRect( HDC hDC, const RECT *lprc, HBRUSH hbr);

BOOL __stdcall InvertRect( HDC hDC, const RECT *lprc);

BOOL __stdcall SetRect( LPRECT lprc, int32 xLeft, int32 yTop, int32 xRight, int32 yBottom);

BOOL __stdcall SetRectEmpty( LPRECT lprc);

BOOL __stdcall CopyRect( LPRECT lprcDst, const RECT *lprcSrc);

BOOL __stdcall InflateRect( LPRECT lprc, int32 dx, int32 dy);

BOOL __stdcall IntersectRect( LPRECT lprcDst, const RECT *lprcSrc1, const RECT *lprcSrc2);

BOOL __stdcall UnionRect( LPRECT lprcDst, const RECT *lprcSrc1, const RECT *lprcSrc2);

BOOL __stdcall SubtractRect( LPRECT lprcDst, const RECT *lprcSrc1, const RECT *lprcSrc2);

BOOL __stdcall OffsetRect( LPRECT lprc, int32 dx, int32 dy);

BOOL __stdcall IsRectEmpty( const RECT *lprc);

BOOL __stdcall EqualRect( const RECT *lprc1, const RECT *lprc2);

BOOL __stdcall PtInRect( const RECT *lprc, POINT pt);

WORD __stdcall GetWindowWord( HWND hWnd, int32 nIndex);

WORD __stdcall SetWindowWord( HWND hWnd, int32 nIndex, WORD wNewWord);

LONG __stdcall GetWindowLongA( HWND hWnd, int32 nIndex);

LONG __stdcall GetWindowLongW( HWND hWnd, int32 nIndex);

LONG __stdcall SetWindowLongA( HWND hWnd, int32 nIndex, LONG dwNewLong);

LONG __stdcall SetWindowLongW( HWND hWnd, int32 nIndex, LONG dwNewLong);

WORD __stdcall GetClassWord( HWND hWnd, int32 nIndex);

WORD __stdcall SetClassWord( HWND hWnd, int32 nIndex, WORD wNewWord);

DWORD __stdcall GetClassLongA( HWND hWnd, int32 nIndex);

DWORD __stdcall GetClassLongW( HWND hWnd, int32 nIndex);

DWORD __stdcall SetClassLongA( HWND hWnd, int32 nIndex, LONG dwNewLong);

DWORD __stdcall SetClassLongW( HWND hWnd, int32 nIndex, LONG dwNewLong);

BOOL __stdcall GetProcessDefaultLayout( DWORD *pdwDefaultLayout);

BOOL __stdcall SetProcessDefaultLayout( DWORD dwDefaultLayout);

HWND __stdcall GetDesktopWindow( void);

HWND __stdcall GetParent( HWND hWnd);

HWND __stdcall SetParent( HWND hWndChild, HWND hWndNewParent);

BOOL __stdcall EnumChildWindows( HWND hWndParent, WNDENUMPROC lpEnumFunc, LPARAM lParam);

HWND __stdcall FindWindowA( LPCSTR lpClassName, LPCSTR lpWindowName);

HWND __stdcall FindWindowW( LPCWSTR lpClassName, LPCWSTR lpWindowName);

HWND __stdcall FindWindowExA( HWND hWndParent, HWND hWndChildAfter, LPCSTR lpszClass, LPCSTR lpszWindow);

HWND __stdcall FindWindowExW( HWND hWndParent, HWND hWndChildAfter, LPCWSTR lpszClass, LPCWSTR lpszWindow);

HWND __stdcall GetShellWindow( void);

BOOL __stdcall RegisterShellHookWindow( HWND hwnd);

BOOL __stdcall DeregisterShellHookWindow( HWND hwnd);

BOOL __stdcall EnumWindows( WNDENUMPROC lpEnumFunc, LPARAM lParam);

BOOL __stdcall EnumThreadWindows( DWORD dwThreadId, WNDENUMPROC lpfn, LPARAM lParam);

int32 __stdcall GetClassNameA( HWND hWnd, LPSTR lpClassName, int32 nMaxCount );

int32 __stdcall GetClassNameW( HWND hWnd, LPWSTR lpClassName, int32 nMaxCount );

HWND __stdcall GetTopWindow( HWND hWnd);

DWORD __stdcall GetWindowThreadProcessId( HWND hWnd, LPDWORD lpdwProcessId);

BOOL __stdcall IsGUIThread( BOOL bConvert);

HWND __stdcall GetLastActivePopup( HWND hWnd);

HWND __stdcall GetWindow( HWND hWnd, UINT uCmd);

HHOOK __stdcall SetWindowsHookA( int32 nFilterType, HOOKPROC pfnFilterProc);

HHOOK __stdcall SetWindowsHookW( int32 nFilterType, HOOKPROC pfnFilterProc);

BOOL __stdcall UnhookWindowsHook( int32 nCode, HOOKPROC pfnFilterProc);

HHOOK __stdcall SetWindowsHookExA( int32 idHook, HOOKPROC lpfn, HINSTANCE hmod, DWORD dwThreadId);

HHOOK __stdcall SetWindowsHookExW( int32 idHook, HOOKPROC lpfn, HINSTANCE hmod, DWORD dwThreadId);

BOOL __stdcall UnhookWindowsHookEx( HHOOK hhk);

LRESULT __stdcall CallNextHookEx( HHOOK hhk, int32 nCode, WPARAM wParam, LPARAM lParam);

BOOL __stdcall CheckMenuRadioItem( HMENU hmenu, UINT first, UINT last, UINT check, UINT flags);
typedef struct {
<field name="versionNumber"><WORD /></field>
<field name="offset"><WORD /></field>
} MENUITEMTEMPLATEHEADER, *PMENUITEMTEMPLATEHEADER;
typedef struct { WORD mtOption;
<field name="mtID"><WORD /></field>
<field name="mtString"><arr length="1"><WCHAR /></arr></field>
} MENUITEMTEMPLATE, *PMENUITEMTEMPLATE;

HBITMAP __stdcall LoadBitmapA( HINSTANCE hInstance, LPCSTR lpBitmapName);

HBITMAP __stdcall LoadBitmapW( HINSTANCE hInstance, LPCWSTR lpBitmapName);

HCURSOR __stdcall LoadCursorA( HINSTANCE hInstance, LPCSTR lpCursorName);

HCURSOR __stdcall LoadCursorW( HINSTANCE hInstance, LPCWSTR lpCursorName);

HCURSOR __stdcall LoadCursorFromFileA( LPCSTR lpFileName);

HCURSOR __stdcall LoadCursorFromFileW( LPCWSTR lpFileName);

HCURSOR __stdcall CreateCursor( HINSTANCE hInst, int32 xHotSpot, int32 yHotSpot, int32 nWidth, int32 nHeight, const void *pvANDPlane, const void *pvXORPlane);

BOOL __stdcall DestroyCursor( HCURSOR hCursor);

BOOL __stdcall SetSystemCursor( HCURSOR hcur, DWORD id);
typedef struct _ICONINFO {
<field name="fIcon"><BOOL /></field>
<field name="xHotspot"><DWORD /></field>
<field name="yHotspot"><DWORD /></field>
<field name="hbmMask"><HBITMAP /></field>
<field name="hbmColor"><HBITMAP /></field>
} ICONINFO;
<typedef name="PICONINFO"><ptr><ICONINFO /></ptr></typedef>

HICON __stdcall LoadIconA( HINSTANCE hInstance, LPCSTR lpIconName);

HICON __stdcall LoadIconW( HINSTANCE hInstance, LPCWSTR lpIconName);

UINT __stdcall PrivateExtractIconsA( LPCSTR szFileName, int32 nIconIndex, int32 cxIcon, int32 cyIcon, HICON *phicon, UINT *piconid, UINT nIcons, UINT flags);

UINT __stdcall PrivateExtractIconsW( LPCWSTR szFileName, int32 nIconIndex, int32 cxIcon, int32 cyIcon, HICON *phicon, UINT *piconid, UINT nIcons, UINT flags);

HICON __stdcall CreateIcon( HINSTANCE hInstance, int32 nWidth, int32 nHeight, BYTE cPlanes, BYTE cBitsPixel, const BYTE *lpbANDbits, const BYTE *lpbXORbits);

BOOL __stdcall DestroyIcon( HICON hIcon);

int32 __stdcall LookupIconIdFromDirectory( PBYTE presbits, BOOL fIcon);

int32 __stdcall LookupIconIdFromDirectoryEx( PBYTE presbits, BOOL fIcon, int32 cxDesired, int32 cyDesired, UINT Flags);

HICON __stdcall CreateIconFromResource( PBYTE presbits, DWORD dwResSize, BOOL fIcon, DWORD dwVer);

HICON __stdcall CreateIconFromResourceEx( PBYTE presbits, DWORD dwResSize, BOOL fIcon, DWORD dwVer, int32 cxDesired, int32 cyDesired, UINT Flags);
typedef struct tagCURSORSHAPE {
<field name="xHotSpot"><int32 /></field>
<field name="yHotSpot"><int32 /></field>
<field name="cx"><int32 /></field>
<field name="cy"><int32 /></field>
<field name="cbWidth"><int32 /></field>
<field name="Planes"><BYTE /></field>
<field name="BitsPixel"><BYTE /></field>
} CURSORSHAPE, *LPCURSORSHAPE;

HANDLE __stdcall LoadImageA( HINSTANCE hInst, LPCSTR name, UINT type, int32 cx, int32 cy, UINT fuLoad);

HANDLE __stdcall LoadImageW( HINSTANCE hInst, LPCWSTR name, UINT type, int32 cx, int32 cy, UINT fuLoad);

HANDLE __stdcall CopyImage( HANDLE h, UINT type, int32 cx, int32 cy, UINT flags);
BOOL __stdcall DrawIconEx( HDC hdc, int32 xLeft, int32 yTop, HICON hIcon, int32 cxWidth, int32 cyWidth, UINT istepIfAniCur, HBRUSH hbrFlickerFreeDraw, UINT diFlags);

HICON __stdcall CreateIconIndirect( PICONINFO piconinfo);

HICON __stdcall CopyIcon( HICON hIcon);

BOOL __stdcall GetIconInfo( HICON hIcon, PICONINFO piconinfo);
typedef struct _ICONINFOEXA {
<field name="cbSize"><DWORD /></field>
<field name="fIcon"><BOOL /></field>
<field name="xHotspot"><DWORD /></field>
<field name="yHotspot"><DWORD /></field>
<field name="hbmMask"><HBITMAP /></field>
<field name="hbmColor"><HBITMAP /></field>
<field name="wResID"><WORD /></field>
<field name="szModName"><arr length="260"><CHAR /></arr></field>
<field name="szResName"><arr length="260"><CHAR /></arr></field>
} ICONINFOEXA, *PICONINFOEXA;
typedef struct _ICONINFOEXW {
<field name="cbSize"><DWORD /></field>
<field name="fIcon"><BOOL /></field>
<field name="xHotspot"><DWORD /></field>
<field name="yHotspot"><DWORD /></field>
<field name="hbmMask"><HBITMAP /></field>
<field name="hbmColor"><HBITMAP /></field>
<field name="wResID"><WORD /></field>
<field name="szModName"><arr length="260"><WCHAR /></arr></field>
<field name="szResName"><arr length="260"><WCHAR /></arr></field>
} ICONINFOEXW, *PICONINFOEXW;
<typedef name="ICONINFOEX"><ICONINFOEXA /></typedef>
<typedef name="PICONINFOEX"><PICONINFOEXA /></typedef>

BOOL __stdcall GetIconInfoExA( HICON hicon, PICONINFOEXA piconinfo);

BOOL __stdcall GetIconInfoExW( HICON hicon, PICONINFOEXW piconinfo);

int32 __stdcall LoadStringA( HINSTANCE hInstance, UINT uID, LPSTR lpBuffer, int32 cchBufferMax);

int32 __stdcall LoadStringW( HINSTANCE hInstance, UINT uID, LPWSTR lpBuffer, int32 cchBufferMax);

BOOL __stdcall IsDialogMessageA( HWND hDlg, LPMSG lpMsg);

BOOL __stdcall IsDialogMessageW( HWND hDlg, LPMSG lpMsg);

BOOL __stdcall MapDialogRect( HWND hDlg, LPRECT lpRect);

int32 __stdcall DlgDirListA( HWND hDlg, LPSTR lpPathSpec, int32 nIDListBox, int32 nIDStaticPath, UINT uFileType);

int32 __stdcall DlgDirListW( HWND hDlg, LPWSTR lpPathSpec, int32 nIDListBox, int32 nIDStaticPath, UINT uFileType);

BOOL __stdcall DlgDirSelectExA( HWND hwndDlg, LPSTR lpString, int32 chCount, int32 idListBox);

BOOL __stdcall DlgDirSelectExW( HWND hwndDlg, LPWSTR lpString, int32 chCount, int32 idListBox);

int32 __stdcall DlgDirListComboBoxA( HWND hDlg, LPSTR lpPathSpec, int32 nIDComboBox, int32 nIDStaticPath, UINT uFiletype);

int32 __stdcall DlgDirListComboBoxW( HWND hDlg, LPWSTR lpPathSpec, int32 nIDComboBox, int32 nIDStaticPath, UINT uFiletype);

BOOL __stdcall DlgDirSelectComboBoxExA( HWND hwndDlg, LPSTR lpString, int32 cchOut, int32 idComboBox);

BOOL __stdcall DlgDirSelectComboBoxExW( HWND hwndDlg, LPWSTR lpString, int32 cchOut, int32 idComboBox);
typedef struct tagSCROLLINFO {
<field name="cbSize"><UINT /></field>
<field name="fMask"><UINT /></field>
<field name="nMin"><int32 /></field>
<field name="nMax"><int32 /></field>
<field name="nPage"><UINT /></field>
<field name="nPos"><int32 /></field>
<field name="nTrackPos"><int32 /></field>
} SCROLLINFO, *LPSCROLLINFO;
typedef SCROLLINFO const *LPCSCROLLINFO;

int32 __stdcall SetScrollInfo( HWND hwnd, int32 nBar, LPCSCROLLINFO lpsi, BOOL redraw);

BOOL __stdcall GetScrollInfo( HWND hwnd, int32 nBar, LPSCROLLINFO lpsi);
typedef struct tagMDICREATESTRUCTA {
<field name="szClass"><LPCSTR /></field>
<field name="szTitle"><LPCSTR /></field>
<field name="hOwner"><HANDLE /></field>
<field name="x"><int32 /></field>
<field name="y"><int32 /></field>
<field name="cx"><int32 /></field>
<field name="cy"><int32 /></field>
<field name="style"><DWORD /></field>
<field name="lParam"><LPARAM /></field>
} MDICREATESTRUCTA, *LPMDICREATESTRUCTA;
typedef struct tagMDICREATESTRUCTW {
<field name="szClass"><LPCWSTR /></field>
<field name="szTitle"><LPCWSTR /></field>
<field name="hOwner"><HANDLE /></field>
<field name="x"><int32 /></field>
<field name="y"><int32 /></field>
<field name="cx"><int32 /></field>
<field name="cy"><int32 /></field>
<field name="style"><DWORD /></field>
<field name="lParam"><LPARAM /></field>
} MDICREATESTRUCTW, *LPMDICREATESTRUCTW;
<typedef name="MDICREATESTRUCT"><MDICREATESTRUCTA /></typedef>
<typedef name="LPMDICREATESTRUCT"><LPMDICREATESTRUCTA /></typedef>
typedef struct tagCLIENTCREATESTRUCT {
<field name="hWindowMenu"><HANDLE /></field>
<field name="idFirstChild"><UINT /></field>
} CLIENTCREATESTRUCT, *LPCLIENTCREATESTRUCT;

LRESULT __stdcall DefFrameProcA( HWND hWnd, HWND hWndMDIClient, UINT uMsg, WPARAM wParam, LPARAM lParam);

LRESULT __stdcall DefFrameProcW( HWND hWnd, HWND hWndMDIClient, UINT uMsg, WPARAM wParam, LPARAM lParam);

LRESULT __stdcall DefMDIChildProcA( HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam);

LRESULT __stdcall DefMDIChildProcW( HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam);

BOOL __stdcall TranslateMDISysAccel( HWND hWndClient, LPMSG lpMsg);

UINT __stdcall ArrangeIconicWindows( HWND hWnd);

HWND __stdcall CreateMDIWindowA( LPCSTR lpClassName, LPCSTR lpWindowName, DWORD dwStyle, int32 X, int32 Y, int32 nWidth, int32 nHeight, HWND hWndParent, HINSTANCE hInstance, LPARAM lParam);

HWND __stdcall CreateMDIWindowW( LPCWSTR lpClassName, LPCWSTR lpWindowName, DWORD dwStyle, int32 X, int32 Y, int32 nWidth, int32 nHeight, HWND hWndParent, HINSTANCE hInstance, LPARAM lParam);

WORD __stdcall TileWindows( HWND hwndParent, UINT wHow, const RECT * lpRect, UINT cKids, const HWND * lpKids);

WORD __stdcall CascadeWindows( HWND hwndParent, UINT wHow, const RECT * lpRect, UINT cKids, const HWND * lpKids);
<typedef name="HELPPOLY"><DWORD /></typedef>
typedef struct tagMULTIKEYHELPA {
<field name="mkSize"><DWORD /></field>
<field name="mkKeylist"><CHAR /></field>
<field name="szKeyphrase"><arr length="1"><CHAR /></arr></field>
} MULTIKEYHELPA, *PMULTIKEYHELPA, *LPMULTIKEYHELPA;
typedef struct tagMULTIKEYHELPW {
<field name="mkSize"><DWORD /></field>
<field name="mkKeylist"><WCHAR /></field>
<field name="szKeyphrase"><arr length="1"><WCHAR /></arr></field>
} MULTIKEYHELPW, *PMULTIKEYHELPW, *LPMULTIKEYHELPW;
<typedef name="MULTIKEYHELP"><MULTIKEYHELPA /></typedef>
<typedef name="PMULTIKEYHELP"><PMULTIKEYHELPA /></typedef>
<typedef name="LPMULTIKEYHELP"><LPMULTIKEYHELPA /></typedef>
typedef struct tagHELPWININFOA {
<field name="wStructSize"><int32 /></field>
<field name="x"><int32 /></field>
<field name="y"><int32 /></field>
<field name="dx"><int32 /></field>
<field name="dy"><int32 /></field>
<field name="wMax"><int32 /></field>
<field name="rgchMember"><arr length="2"><CHAR /></arr></field>
} HELPWININFOA, *PHELPWININFOA, *LPHELPWININFOA;
typedef struct tagHELPWININFOW {
<field name="wStructSize"><int32 /></field>
<field name="x"><int32 /></field>
<field name="y"><int32 /></field>
<field name="dx"><int32 /></field>
<field name="dy"><int32 /></field>
<field name="wMax"><int32 /></field>
<field name="rgchMember"><arr length="2"><WCHAR /></arr></field>
} HELPWININFOW, *PHELPWININFOW, *LPHELPWININFOW;
<typedef name="HELPWININFO"><HELPWININFOA /></typedef>
<typedef name="PHELPWININFO"><PHELPWININFOA /></typedef>
<typedef name="LPHELPWININFO"><LPHELPWININFOA /></typedef>

BOOL __stdcall WinHelpA( HWND hWndMain, LPCSTR lpszHelp, UINT uCommand, ULONG_PTR dwData);

BOOL __stdcall WinHelpW( HWND hWndMain, LPCWSTR lpszHelp, UINT uCommand, ULONG_PTR dwData);

DWORD __stdcall GetGuiResources( HANDLE hProcess, DWORD uiFlags);
typedef struct tagNONCLIENTMETRICSA {
<field name="cbSize"><UINT /></field>
<field name="iBorderWidth"><int32 /></field>
<field name="iScrollWidth"><int32 /></field>
<field name="iScrollHeight"><int32 /></field>
<field name="iCaptionWidth"><int32 /></field>
<field name="iCaptionHeight"><int32 /></field>
<field name="lfCaptionFont"><LOGFONTA /></field>
<field name="iSmCaptionWidth"><int32 /></field>
<field name="iSmCaptionHeight"><int32 /></field>
<field name="lfSmCaptionFont"><LOGFONTA /></field>
<field name="iMenuWidth"><int32 /></field>
<field name="iMenuHeight"><int32 /></field>
<field name="lfMenuFont"><LOGFONTA /></field>
<field name="lfStatusFont"><LOGFONTA /></field>
<field name="lfMessageFont"><LOGFONTA /></field>
<field name="iPaddedBorderWidth"><int32 /></field>
} NONCLIENTMETRICSA, *PNONCLIENTMETRICSA, * LPNONCLIENTMETRICSA;
typedef struct tagNONCLIENTMETRICSW {
<field name="cbSize"><UINT /></field>
<field name="iBorderWidth"><int32 /></field>
<field name="iScrollWidth"><int32 /></field>
<field name="iScrollHeight"><int32 /></field>
<field name="iCaptionWidth"><int32 /></field>
<field name="iCaptionHeight"><int32 /></field>
<field name="lfCaptionFont"><LOGFONTW /></field>
<field name="iSmCaptionWidth"><int32 /></field>
<field name="iSmCaptionHeight"><int32 /></field>
<field name="lfSmCaptionFont"><LOGFONTW /></field>
<field name="iMenuWidth"><int32 /></field>
<field name="iMenuHeight"><int32 /></field>
<field name="lfMenuFont"><LOGFONTW /></field>
<field name="lfStatusFont"><LOGFONTW /></field>
<field name="lfMessageFont"><LOGFONTW /></field>
<field name="iPaddedBorderWidth"><int32 /></field>
} NONCLIENTMETRICSW, *PNONCLIENTMETRICSW, * LPNONCLIENTMETRICSW;
<typedef name="NONCLIENTMETRICS"><NONCLIENTMETRICSA /></typedef>
<typedef name="PNONCLIENTMETRICS"><PNONCLIENTMETRICSA /></typedef>
<typedef name="LPNONCLIENTMETRICS"><LPNONCLIENTMETRICSA /></typedef>
typedef struct tagMINIMIZEDMETRICS {
<field name="cbSize"><UINT /></field>
<field name="iWidth"><int32 /></field>
<field name="iHorzGap"><int32 /></field>
<field name="iVertGap"><int32 /></field>
<field name="iArrange"><int32 /></field>
} MINIMIZEDMETRICS, *PMINIMIZEDMETRICS, *LPMINIMIZEDMETRICS;
typedef struct tagICONMETRICSA {
<field name="cbSize"><UINT /></field>
<field name="iHorzSpacing"><int32 /></field>
<field name="iVertSpacing"><int32 /></field>
<field name="iTitleWrap"><int32 /></field>
<field name="lfFont"><LOGFONTA /></field>
} ICONMETRICSA, *PICONMETRICSA, *LPICONMETRICSA;
typedef struct tagICONMETRICSW {
<field name="cbSize"><UINT /></field>
<field name="iHorzSpacing"><int32 /></field>
<field name="iVertSpacing"><int32 /></field>
<field name="iTitleWrap"><int32 /></field>
<field name="lfFont"><LOGFONTW /></field>
} ICONMETRICSW, *PICONMETRICSW, *LPICONMETRICSW;
<typedef name="ICONMETRICS"><ICONMETRICSA /></typedef>
<typedef name="PICONMETRICS"><PICONMETRICSA /></typedef>
<typedef name="LPICONMETRICS"><LPICONMETRICSA /></typedef>
typedef struct tagANIMATIONINFO {
<field name="cbSize"><UINT /></field>
<field name="iMinAnimate"><int32 /></field>
} ANIMATIONINFO, *LPANIMATIONINFO;
typedef struct tagSERIALKEYSA {
<field name="cbSize"><UINT /></field>
<field name="dwFlags"><DWORD /></field>
<field name="lpszActivePort"><LPSTR /></field>
<field name="lpszPort"><LPSTR /></field>
<field name="iBaudRate"><UINT /></field>
<field name="iPortState"><UINT /></field>
<field name="iActive"><UINT /></field>
} SERIALKEYSA, *LPSERIALKEYSA;
typedef struct tagSERIALKEYSW {
<field name="cbSize"><UINT /></field>
<field name="dwFlags"><DWORD /></field>
<field name="lpszActivePort"><LPWSTR /></field>
<field name="lpszPort"><LPWSTR /></field>
<field name="iBaudRate"><UINT /></field>
<field name="iPortState"><UINT /></field>
<field name="iActive"><UINT /></field>
} SERIALKEYSW, *LPSERIALKEYSW;
<typedef name="SERIALKEYS"><SERIALKEYSA /></typedef>
<typedef name="LPSERIALKEYS"><LPSERIALKEYSA /></typedef>
typedef struct tagHIGHCONTRASTA {
<field name="cbSize"><UINT /></field>
<field name="dwFlags"><DWORD /></field>
<field name="lpszDefaultScheme"><LPSTR /></field>
} HIGHCONTRASTA, *LPHIGHCONTRASTA;
typedef struct tagHIGHCONTRASTW {
<field name="cbSize"><UINT /></field>
<field name="dwFlags"><DWORD /></field>
<field name="lpszDefaultScheme"><LPWSTR /></field>
} HIGHCONTRASTW, *LPHIGHCONTRASTW;
<typedef name="HIGHCONTRAST"><HIGHCONTRASTA /></typedef>
<typedef name="LPHIGHCONTRAST"><LPHIGHCONTRASTA /></typedef>
typedef struct _VIDEOPARAMETERS {
<field name="Guid"><GUID /></field>
<field name="dwOffset"><ULONG /></field>
<field name="dwCommand"><ULONG /></field>
<field name="dwFlags"><ULONG /></field>
<field name="dwMode"><ULONG /></field>
<field name="dwTVStandard"><ULONG /></field>
<field name="dwAvailableModes"><ULONG /></field>
<field name="dwAvailableTVStandard"><ULONG /></field>
<field name="dwFlickerFilter"><ULONG /></field>
<field name="dwOverScanX"><ULONG /></field>
<field name="dwOverScanY"><ULONG /></field>
<field name="dwMaxUnscaledX"><ULONG /></field>
<field name="dwMaxUnscaledY"><ULONG /></field>
<field name="dwPositionX"><ULONG /></field>
<field name="dwPositionY"><ULONG /></field>
<field name="dwBrightness"><ULONG /></field>
<field name="dwContrast"><ULONG /></field>
<field name="dwCPType"><ULONG /></field>
<field name="dwCPCommand"><ULONG /></field>
<field name="dwCPStandard"><ULONG /></field>
<field name="dwCPKey"><ULONG /></field>
<field name="bCP_APSTriggerBits"><ULONG /></field>
<field name="bOEMCopyProtection"><arr length="256"><UCHAR /></arr></field>
} VIDEOPARAMETERS, *PVIDEOPARAMETERS, *LPVIDEOPARAMETERS;

LONG __stdcall ChangeDisplaySettingsA( DEVMODEA* lpDevMode, DWORD dwFlags);

LONG __stdcall ChangeDisplaySettingsW( DEVMODEW* lpDevMode, DWORD dwFlags);

LONG __stdcall ChangeDisplaySettingsExA( LPCSTR lpszDeviceName, DEVMODEA* lpDevMode, HWND hwnd, DWORD dwflags, LPVOID lParam);

LONG __stdcall ChangeDisplaySettingsExW( LPCWSTR lpszDeviceName, DEVMODEW* lpDevMode, HWND hwnd, DWORD dwflags, LPVOID lParam);

BOOL __stdcall EnumDisplaySettingsA( LPCSTR lpszDeviceName, DWORD iModeNum, DEVMODEA* lpDevMode);

BOOL __stdcall EnumDisplaySettingsW( LPCWSTR lpszDeviceName, DWORD iModeNum, DEVMODEW* lpDevMode);

BOOL __stdcall EnumDisplaySettingsExA( LPCSTR lpszDeviceName, DWORD iModeNum, DEVMODEA* lpDevMode, DWORD dwFlags);

BOOL __stdcall EnumDisplaySettingsExW( LPCWSTR lpszDeviceName, DWORD iModeNum, DEVMODEW* lpDevMode, DWORD dwFlags);

BOOL __stdcall EnumDisplayDevicesA( LPCSTR lpDevice, DWORD iDevNum, PDISPLAY_DEVICEA lpDisplayDevice, DWORD dwFlags);

BOOL __stdcall EnumDisplayDevicesW( LPCWSTR lpDevice, DWORD iDevNum, PDISPLAY_DEVICEW lpDisplayDevice, DWORD dwFlags);

LONG __stdcall GetDisplayConfigBufferSizes( UINT32 flags, UINT32* numPathArrayElements, UINT32* numModeInfoArrayElements);

LONG __stdcall SetDisplayConfig( UINT32 numPathArrayElements, DISPLAYCONFIG_PATH_INFO* pathArray, UINT32 numModeInfoArrayElements, DISPLAYCONFIG_MODE_INFO* modeInfoArray, UINT32 flags);

LONG __stdcall QueryDisplayConfig( UINT32 flags, UINT32* numPathArrayElements, DISPLAYCONFIG_PATH_INFO* pathArray, UINT32* numModeInfoArrayElements, DISPLAYCONFIG_MODE_INFO* modeInfoArray, DISPLAYCONFIG_TOPOLOGY_ID* currentTopologyId);

LONG __stdcall DisplayConfigGetDeviceInfo( DISPLAYCONFIG_DEVICE_INFO_HEADER* requestPacket);

LONG __stdcall DisplayConfigSetDeviceInfo( DISPLAYCONFIG_DEVICE_INFO_HEADER* setPacket);

BOOL __stdcall SystemParametersInfoA( UINT uiAction, UINT uiParam, PVOID pvParam, UINT fWinIni);

BOOL __stdcall SystemParametersInfoW( UINT uiAction, UINT uiParam, PVOID pvParam, UINT fWinIni);
typedef struct tagFILTERKEYS {
<field name="cbSize"><UINT /></field>
<field name="dwFlags"><DWORD /></field>
<field name="iWaitMSec"><DWORD /></field>
<field name="iDelayMSec"><DWORD /></field>
<field name="iRepeatMSec"><DWORD /></field>
<field name="iBounceMSec"><DWORD /></field>
} FILTERKEYS, *LPFILTERKEYS;
typedef struct tagSTICKYKEYS {
<field name="cbSize"><UINT /></field>
<field name="dwFlags"><DWORD /></field>
} STICKYKEYS, *LPSTICKYKEYS;
typedef struct tagMOUSEKEYS {
<field name="cbSize"><UINT /></field>
<field name="dwFlags"><DWORD /></field>
<field name="iMaxSpeed"><DWORD /></field>
<field name="iTimeToMaxSpeed"><DWORD /></field>
<field name="iCtrlSpeed"><DWORD /></field>
<field name="dwReserved1"><DWORD /></field>
<field name="dwReserved2"><DWORD /></field>
} MOUSEKEYS, *LPMOUSEKEYS;
typedef struct tagACCESSTIMEOUT {
<field name="cbSize"><UINT /></field>
<field name="dwFlags"><DWORD /></field>
<field name="iTimeOutMSec"><DWORD /></field>
} ACCESSTIMEOUT, *LPACCESSTIMEOUT;
typedef struct tagSOUNDSENTRYA {
<field name="cbSize"><UINT /></field>
<field name="dwFlags"><DWORD /></field>
<field name="iFSTextEffect"><DWORD /></field>
<field name="iFSTextEffectMSec"><DWORD /></field>
<field name="iFSTextEffectColorBits"><DWORD /></field>
<field name="iFSGrafEffect"><DWORD /></field>
<field name="iFSGrafEffectMSec"><DWORD /></field>
<field name="iFSGrafEffectColor"><DWORD /></field>
<field name="iWindowsEffect"><DWORD /></field>
<field name="iWindowsEffectMSec"><DWORD /></field>
<field name="lpszWindowsEffectDLL"><LPSTR /></field>
<field name="iWindowsEffectOrdinal"><DWORD /></field>
} SOUNDSENTRYA, *LPSOUNDSENTRYA;
typedef struct tagSOUNDSENTRYW {
<field name="cbSize"><UINT /></field>
<field name="dwFlags"><DWORD /></field>
<field name="iFSTextEffect"><DWORD /></field>
<field name="iFSTextEffectMSec"><DWORD /></field>
<field name="iFSTextEffectColorBits"><DWORD /></field>
<field name="iFSGrafEffect"><DWORD /></field>
<field name="iFSGrafEffectMSec"><DWORD /></field>
<field name="iFSGrafEffectColor"><DWORD /></field>
<field name="iWindowsEffect"><DWORD /></field>
<field name="iWindowsEffectMSec"><DWORD /></field>
<field name="lpszWindowsEffectDLL"><LPWSTR /></field>
<field name="iWindowsEffectOrdinal"><DWORD /></field>
} SOUNDSENTRYW, *LPSOUNDSENTRYW;
<typedef name="SOUNDSENTRY"><SOUNDSENTRYA /></typedef>
<typedef name="LPSOUNDSENTRY"><LPSOUNDSENTRYA /></typedef>

BOOL __stdcall SoundSentry();
typedef struct tagTOGGLEKEYS {
<field name="cbSize"><UINT /></field>
<field name="dwFlags"><DWORD /></field>
} TOGGLEKEYS, *LPTOGGLEKEYS;
typedef struct tagAUDIODESCRIPTION {
<field name="cbSize"><UINT /></field>
<field name="Enabled"><BOOL /></field>
<field name="Locale"><LCID /></field>
} AUDIODESCRIPTION, *LPAUDIODESCRIPTION;

void __stdcall SetDebugErrorLevel( DWORD dwLevel);

void __stdcall SetLastErrorEx( DWORD dwErrCode, DWORD dwType);

int32 __stdcall InternalGetWindowText( HWND hWnd, LPWSTR pString, int32 cchMaxCount);

BOOL __stdcall CancelShutdown( void);

HMONITOR __stdcall MonitorFromPoint( POINT pt, DWORD dwFlags);

HMONITOR __stdcall MonitorFromRect( LPCRECT lprc, DWORD dwFlags);

HMONITOR __stdcall MonitorFromWindow( HWND hwnd, DWORD dwFlags);
typedef struct tagMONITORINFO {
<field name="cbSize"><DWORD /></field>
<field name="rcMonitor"><RECT /></field>
<field name="rcWork"><RECT /></field>
<field name="dwFlags"><DWORD /></field>
} MONITORINFO, *LPMONITORINFO;
typedef struct tagMONITORINFOEXA {
<field name="O"><MONITORINF /></field>
<field name="szDevice"><arr length="32"><CHAR /></arr></field>
} MONITORINFOEXA, *LPMONITORINFOEXA;
typedef struct tagMONITORINFOEXW {
<field name="O"><MONITORINF /></field>
<field name="szDevice"><arr length="32"><WCHAR /></arr></field>
} MONITORINFOEXW, *LPMONITORINFOEXW;
<typedef name="MONITORINFOEX"><MONITORINFOEXA /></typedef>
<typedef name="LPMONITORINFOEX"><LPMONITORINFOEXA /></typedef>

BOOL __stdcall GetMonitorInfoA( HMONITOR hMonitor, LPMONITORINFO lpmi);

BOOL __stdcall GetMonitorInfoW( HMONITOR hMonitor, LPMONITORINFO lpmi);
typedef BOOL (__stdcall* MONITORENUMPROC)(HMONITOR, HDC, LPRECT, LPARAM);

BOOL __stdcall EnumDisplayMonitors( HDC hdc, LPCRECT lprcClip, MONITORENUMPROC lpfnEnum, LPARAM dwData);

void __stdcall NotifyWinEvent( DWORD event, HWND hwnd, LONG idObject, LONG idChild);
typedef void (__stdcall* WINEVENTPROC)( HWINEVENTHOOK hWinEventHook, DWORD event, HWND hwnd, LONG idObject, LONG idChild, DWORD idEventThread, DWORD dwmsEventTime);

HWINEVENTHOOK __stdcall SetWinEventHook( DWORD eventMin, DWORD eventMax, HMODULE hmodWinEventProc, WINEVENTPROC pfnWinEventProc, DWORD idProcess, DWORD idThread, DWORD dwFlags);

BOOL __stdcall IsWinEventHookInstalled( DWORD event);

BOOL __stdcall UnhookWinEvent( HWINEVENTHOOK hWinEventHook);
typedef struct tagGUITHREADINFO {
<field name="cbSize"><DWORD /></field>
<field name="flags"><DWORD /></field>
<field name="hwndActive"><HWND /></field>
<field name="hwndFocus"><HWND /></field>
<field name="hwndCapture"><HWND /></field>
<field name="hwndMenuOwner"><HWND /></field>
<field name="hwndMoveSize"><HWND /></field>
<field name="hwndCaret"><HWND /></field>
<field name="rcCaret"><RECT /></field>
} GUITHREADINFO, *PGUITHREADINFO, * LPGUITHREADINFO;

BOOL __stdcall GetGUIThreadInfo( DWORD idThread, PGUITHREADINFO pgui);

BOOL __stdcall BlockInput( BOOL fBlockIt);

BOOL __stdcall SetProcessDPIAware( void);

BOOL __stdcall IsProcessDPIAware( void);

UINT __stdcall GetWindowModuleFileNameA( HWND hwnd, LPSTR pszFileName, UINT cchFileNameMax);

UINT __stdcall GetWindowModuleFileNameW( HWND hwnd, LPWSTR pszFileName, UINT cchFileNameMax);
typedef struct tagCURSORINFO {
<field name="cbSize"><DWORD /></field>
<field name="flags"><DWORD /></field>
<field name="hCursor"><HCURSOR /></field>
<field name="ptScreenPos"><POINT /></field>
} CURSORINFO, *PCURSORINFO, *LPCURSORINFO;

BOOL __stdcall GetCursorInfo( PCURSORINFO pci);
typedef struct tagWINDOWINFO {
<field name="cbSize"><DWORD /></field>
<field name="rcWindow"><RECT /></field>
<field name="rcClient"><RECT /></field>
<field name="dwStyle"><DWORD /></field>
<field name="dwExStyle"><DWORD /></field>
<field name="dwWindowStatus"><DWORD /></field>
<field name="cxWindowBorders"><UINT /></field>
<field name="cyWindowBorders"><UINT /></field>
<field name="atomWindowType"><ATOM /></field>
<field name="wCreatorVersion"><WORD /></field>
} WINDOWINFO, *PWINDOWINFO, *LPWINDOWINFO;

BOOL __stdcall GetWindowInfo( HWND hwnd, PWINDOWINFO pwi);
typedef struct tagTITLEBARINFO {
<field name="cbSize"><DWORD /></field>
<field name="rcTitleBar"><RECT /></field>
<field name="rgstate"><arr length="5 + 1"><DWORD /></arr></field>
} TITLEBARINFO, *PTITLEBARINFO, *LPTITLEBARINFO;

BOOL __stdcall GetTitleBarInfo( HWND hwnd, PTITLEBARINFO pti);
typedef struct tagTITLEBARINFOEX {
<field name="cbSize"><DWORD /></field>
<field name="rcTitleBar"><RECT /></field>
<field name="rgstate"><arr length="5 + 1"><DWORD /></arr></field>
<field name="rgrect"><arr length="5 + 1"><RECT /></arr></field>
} TITLEBARINFOEX, *PTITLEBARINFOEX, *LPTITLEBARINFOEX;
typedef struct tagMENUBARINFO {
<field name="cbSize"><DWORD /></field>
<field name="rcBar"><RECT /></field>
<field name="hMenu"><HMENU /></field>
<field name="hwndMenu"><HWND /></field>
<bitfield name="fBarFocused" bits="1"><BOOL /></bitfield>
<bitfield name="fFocused" bits="1"><BOOL /></bitfield>
} MENUBARINFO, *PMENUBARINFO, *LPMENUBARINFO;

BOOL __stdcall GetMenuBarInfo( HWND hwnd, LONG idObject, LONG idItem, PMENUBARINFO pmbi);
typedef struct tagSCROLLBARINFO {
<field name="cbSize"><DWORD /></field>
<field name="rcScrollBar"><RECT /></field>
<field name="dxyLineButton"><int32 /></field>
<field name="xyThumbTop"><int32 /></field>
<field name="xyThumbBottom"><int32 /></field>
<field name="reserved"><int32 /></field>
<field name="rgstate"><arr length="5 + 1"><DWORD /></arr></field>
} SCROLLBARINFO, *PSCROLLBARINFO, *LPSCROLLBARINFO;

BOOL __stdcall GetScrollBarInfo( HWND hwnd, LONG idObject, PSCROLLBARINFO psbi);
typedef struct tagCOMBOBOXINFO {
<field name="cbSize"><DWORD /></field>
<field name="rcItem"><RECT /></field>
<field name="rcButton"><RECT /></field>
<field name="stateButton"><DWORD /></field>
<field name="hwndCombo"><HWND /></field>
<field name="hwndItem"><HWND /></field>
<field name="hwndList"><HWND /></field>
} COMBOBOXINFO, *PCOMBOBOXINFO, *LPCOMBOBOXINFO;

BOOL __stdcall GetComboBoxInfo( HWND hwndCombo, PCOMBOBOXINFO pcbi);

HWND __stdcall GetAncestor( HWND hwnd, UINT gaFlags);

HWND __stdcall RealChildWindowFromPoint( HWND hwndParent, POINT ptParentClientCoords);

UINT __stdcall RealGetWindowClassA( HWND hwnd, LPSTR ptszClassName, UINT cchClassNameMax);

UINT __stdcall RealGetWindowClassW( HWND hwnd, LPWSTR ptszClassName, UINT cchClassNameMax);
typedef struct tagALTTABINFO {
<field name="cbSize"><DWORD /></field>
<field name="cItems"><int32 /></field>
<field name="cColumns"><int32 /></field>
<field name="cRows"><int32 /></field>
<field name="iColFocus"><int32 /></field>
<field name="iRowFocus"><int32 /></field>
<field name="cxItem"><int32 /></field>
<field name="cyItem"><int32 /></field>
<field name="ptStart"><POINT /></field>
} ALTTABINFO, *PALTTABINFO, *LPALTTABINFO;

BOOL __stdcall GetAltTabInfoA( HWND hwnd, int32 iItem, PALTTABINFO pati, LPSTR pszItemText, UINT cchItemText);

BOOL __stdcall GetAltTabInfoW( HWND hwnd, int32 iItem, PALTTABINFO pati, LPWSTR pszItemText, UINT cchItemText);

DWORD __stdcall GetListBoxInfo( HWND hwnd);

BOOL __stdcall LockWorkStation( void);

BOOL __stdcall UserHandleGrantAccess( HANDLE hUserHandle, HANDLE hJob, BOOL bGrant);
struct HRAWINPUT__{int32 unused;
;
typedef struct HRAWINPUT__ *HRAWINPUT;
typedef struct tagRAWINPUTHEADER {
<field name="dwType"><DWORD /></field>
<field name="dwSize"><DWORD /></field>
<field name="hDevice"><HANDLE /></field>
<field name="wParam"><WPARAM /></field>
} RAWINPUTHEADER, *PRAWINPUTHEADER, *LPRAWINPUTHEADER;
typedef struct tagRAWMOUSE {
<field name="usFlags"><USHORT /></field>
union {
<field name="ulButtons"><ULONG /></field>
struct {
<field name="usButtonFlags"><USHORT /></field>
<field name="usButtonData"><USHORT /></field>
};
};
<field name="ulRawButtons"><ULONG /></field>
<field name="lLastX"><LONG /></field>
<field name="lLastY"><LONG /></field>
<field name="ulExtraInformation"><ULONG /></field>
} RAWMOUSE, *PRAWMOUSE, *LPRAWMOUSE;
typedef struct tagRAWKEYBOARD {
<field name="MakeCode"><USHORT /></field>
<field name="Flags"><USHORT /></field>
<field name="Reserved"><USHORT /></field>
<field name="VKey"><USHORT /></field>
<field name="Message"><UINT /></field>
<field name="ExtraInformation"><ULONG /></field>
} RAWKEYBOARD, *PRAWKEYBOARD, *LPRAWKEYBOARD;
typedef struct tagRAWHID {
<field name="dwSizeHid"><DWORD /></field>
<field name="dwCount"><DWORD /></field>
<field name="bRawData"><arr length="1"><BYTE /></arr></field>
} RAWHID, *PRAWHID, *LPRAWHID;
typedef struct tagRAWINPUT {
<field name="header"><RAWINPUTHEADER /></field>
union {
<field name="mouse"><RAWMOUSE /></field>
<field name="keyboard"><RAWKEYBOARD /></field>
<field name="hid"><RAWHID /></field>
} data;
} RAWINPUT, *PRAWINPUT, *LPRAWINPUT;

UINT __stdcall GetRawInputData( HRAWINPUT hRawInput, UINT uiCommand, LPVOID pData, PUINT pcbSize, UINT cbSizeHeader);
typedef struct tagRID_DEVICE_INFO_MOUSE {
<field name="dwId"><DWORD /></field>
<field name="dwNumberOfButtons"><DWORD /></field>
<field name="dwSampleRate"><DWORD /></field>
<field name="fHasHorizontalWheel"><BOOL /></field>
} RID_DEVICE_INFO_MOUSE, *PRID_DEVICE_INFO_MOUSE;
typedef struct tagRID_DEVICE_INFO_KEYBOARD {
<field name="dwType"><DWORD /></field>
<field name="dwSubType"><DWORD /></field>
<field name="dwKeyboardMode"><DWORD /></field>
<field name="dwNumberOfFunctionKeys"><DWORD /></field>
<field name="dwNumberOfIndicators"><DWORD /></field>
<field name="dwNumberOfKeysTotal"><DWORD /></field>
} RID_DEVICE_INFO_KEYBOARD, *PRID_DEVICE_INFO_KEYBOARD;
typedef struct tagRID_DEVICE_INFO_HID {
<field name="dwVendorId"><DWORD /></field>
<field name="dwProductId"><DWORD /></field>
<field name="dwVersionNumber"><DWORD /></field>
<field name="usUsagePage"><USHORT /></field>
<field name="usUsage"><USHORT /></field>
} RID_DEVICE_INFO_HID, *PRID_DEVICE_INFO_HID;
typedef struct tagRID_DEVICE_INFO {
<field name="cbSize"><DWORD /></field>
<field name="dwType"><DWORD /></field>
union {
<field name="mouse"><RID_DEVICE_INFO_MOUSE /></field>
<field name="keyboard"><RID_DEVICE_INFO_KEYBOARD /></field>
<field name="hid"><RID_DEVICE_INFO_HID /></field>
};
} RID_DEVICE_INFO, *PRID_DEVICE_INFO, *LPRID_DEVICE_INFO;

UINT __stdcall GetRawInputDeviceInfoA( HANDLE hDevice, UINT uiCommand, LPVOID pData, PUINT pcbSize);

UINT __stdcall GetRawInputDeviceInfoW( HANDLE hDevice, UINT uiCommand, LPVOID pData, PUINT pcbSize);

UINT __stdcall GetRawInputBuffer( PRAWINPUT pData, PUINT pcbSize, UINT cbSizeHeader);
typedef struct tagRAWINPUTDEVICE {
<field name="usUsagePage"><USHORT /></field>
<field name="usUsage"><USHORT /></field>
<field name="dwFlags"><DWORD /></field>
<field name="hwndTarget"><HWND /></field>
} RAWINPUTDEVICE, *PRAWINPUTDEVICE, *LPRAWINPUTDEVICE;
<typedef name="PCRAWINPUTDEVICE"><ptr const="true"><RAWINPUTDEVICE /></ptr></typedef>

BOOL __stdcall RegisterRawInputDevices( PCRAWINPUTDEVICE pRawInputDevices, UINT uiNumDevices, UINT cbSize);

UINT __stdcall GetRegisteredRawInputDevices( PRAWINPUTDEVICE pRawInputDevices, PUINT puiNumDevices, UINT cbSize);
typedef struct tagRAWINPUTDEVICELIST {
<field name="hDevice"><HANDLE /></field>
<field name="dwType"><DWORD /></field>
} RAWINPUTDEVICELIST, *PRAWINPUTDEVICELIST;

UINT __stdcall GetRawInputDeviceList( PRAWINPUTDEVICELIST pRawInputDeviceList, PUINT puiNumDevices, UINT cbSize);

LRESULT __stdcall DefRawInputProc( PRAWINPUT* paRawInput, INT nInput, UINT cbSizeHeader);

BOOL __stdcall ChangeWindowMessageFilter( UINT message, DWORD dwFlag);
typedef struct tagCHANGEFILTERSTRUCT {
<field name="cbSize"><DWORD /></field>
<field name="ExtStatus"><DWORD /></field>
} CHANGEFILTERSTRUCT, *PCHANGEFILTERSTRUCT;

BOOL __stdcall ChangeWindowMessageFilterEx( HWND hwnd, UINT message, DWORD action, PCHANGEFILTERSTRUCT pChangeFilterStruct);
struct HGESTUREINFO__{int32 unused;
;
typedef struct HGESTUREINFO__ *HGESTUREINFO;
typedef struct tagGESTUREINFO {
<field name="cbSize"><UINT /></field>
<field name="dwFlags"><DWORD /></field>
<field name="dwID"><DWORD /></field>
<field name="hwndTarget"><HWND /></field>
<field name="ptsLocation"><POINTS /></field>
<field name="dwInstanceID"><DWORD /></field>
<field name="dwSequenceID"><DWORD /></field>
<field name="ullArguments"><ULONGLONG /></field>
<field name="cbExtraArgs"><UINT /></field>
} GESTUREINFO, *PGESTUREINFO;
typedef GESTUREINFO const * PCGESTUREINFO;
typedef struct tagGESTURENOTIFYSTRUCT {
<field name="cbSize"><UINT /></field>
<field name="dwFlags"><DWORD /></field>
<field name="hwndTarget"><HWND /></field>
<field name="ptsLocation"><POINTS /></field>
<field name="dwInstanceID"><DWORD /></field>
} GESTURENOTIFYSTRUCT, *PGESTURENOTIFYSTRUCT;

BOOL __stdcall GetGestureInfo( HGESTUREINFO hGestureInfo, PGESTUREINFO pGestureInfo);

BOOL __stdcall GetGestureExtraArgs( HGESTUREINFO hGestureInfo, UINT cbExtraArgs, PBYTE pExtraArgs);

BOOL __stdcall CloseGestureInfoHandle( HGESTUREINFO hGestureInfo);
typedef struct tagGESTURECONFIG {
<field name="dwID"><DWORD /></field>
<field name="dwWant"><DWORD /></field>
<field name="dwBlock"><DWORD /></field>
} GESTURECONFIG, *PGESTURECONFIG;

BOOL __stdcall SetGestureConfig( HWND hwnd, DWORD dwReserved, UINT cIDs, PGESTURECONFIG pGestureConfig, UINT cbSize);

BOOL __stdcall GetGestureConfig( HWND hwnd, DWORD dwReserved, DWORD dwFlags, PUINT pcIDs, PGESTURECONFIG pGestureConfig, UINT cbSize);

BOOL __stdcall ShutdownBlockReasonCreate( HWND hWnd, LPCWSTR pwszReason);

BOOL __stdcall ShutdownBlockReasonQuery( HWND hWnd, LPWSTR pwszBuff, DWORD *pcchBuff);

BOOL __stdcall ShutdownBlockReasonDestroy( HWND hWnd);
<typedef name="LGRPID"><DWORD /></typedef>
<typedef name="LCTYPE"><DWORD /></typedef>
<typedef name="CALTYPE"><DWORD /></typedef>
<typedef name="CALID"><DWORD /></typedef>
typedef struct _cpinfo {
<field name="MaxCharSize"><UINT /></field>
<field name="DefaultChar"><arr length="2"><BYTE /></arr></field>
<field name="LeadByte"><arr length="12"><BYTE /></arr></field>
} CPINFO, *LPCPINFO;
typedef struct _cpinfoexA {
<field name="MaxCharSize"><UINT /></field>
<field name="DefaultChar"><arr length="2"><BYTE /></arr></field>
<field name="LeadByte"><arr length="12"><BYTE /></arr></field>
<field name="UnicodeDefaultChar"><WCHAR /></field>
<field name="CodePage"><UINT /></field>
<field name="CodePageName"><arr length="260"><CHAR /></arr></field>
} CPINFOEXA, *LPCPINFOEXA;
typedef struct _cpinfoexW {
<field name="MaxCharSize"><UINT /></field>
<field name="DefaultChar"><arr length="2"><BYTE /></arr></field>
<field name="LeadByte"><arr length="12"><BYTE /></arr></field>
<field name="UnicodeDefaultChar"><WCHAR /></field>
<field name="CodePage"><UINT /></field>
<field name="CodePageName"><arr length="260"><WCHAR /></arr></field>
} CPINFOEXW, *LPCPINFOEXW;
<typedef name="CPINFOEX"><CPINFOEXA /></typedef>
<typedef name="LPCPINFOEX"><LPCPINFOEXA /></typedef>
typedef struct _numberfmtA {
<field name="NumDigits"><UINT /></field>
<field name="LeadingZero"><UINT /></field>
<field name="Grouping"><UINT /></field>
<field name="lpDecimalSep"><LPSTR /></field>
<field name="lpThousandSep"><LPSTR /></field>
<field name="NegativeOrder"><UINT /></field>
} NUMBERFMTA, *LPNUMBERFMTA;
typedef struct _numberfmtW {
<field name="NumDigits"><UINT /></field>
<field name="LeadingZero"><UINT /></field>
<field name="Grouping"><UINT /></field>
<field name="lpDecimalSep"><LPWSTR /></field>
<field name="lpThousandSep"><LPWSTR /></field>
<field name="NegativeOrder"><UINT /></field>
} NUMBERFMTW, *LPNUMBERFMTW;
<typedef name="NUMBERFMT"><NUMBERFMTA /></typedef>
<typedef name="LPNUMBERFMT"><LPNUMBERFMTA /></typedef>
typedef struct _currencyfmtA {
<field name="NumDigits"><UINT /></field>
<field name="LeadingZero"><UINT /></field>
<field name="Grouping"><UINT /></field>
<field name="lpDecimalSep"><LPSTR /></field>
<field name="lpThousandSep"><LPSTR /></field>
<field name="NegativeOrder"><UINT /></field>
<field name="PositiveOrder"><UINT /></field>
<field name="lpCurrencySymbol"><LPSTR /></field>
} CURRENCYFMTA, *LPCURRENCYFMTA;
typedef struct _currencyfmtW {
<field name="NumDigits"><UINT /></field>
<field name="LeadingZero"><UINT /></field>
<field name="Grouping"><UINT /></field>
<field name="lpDecimalSep"><LPWSTR /></field>
<field name="lpThousandSep"><LPWSTR /></field>
<field name="NegativeOrder"><UINT /></field>
<field name="PositiveOrder"><UINT /></field>
<field name="lpCurrencySymbol"><LPWSTR /></field>
} CURRENCYFMTW, *LPCURRENCYFMTW;
<typedef name="CURRENCYFMT"><CURRENCYFMTA /></typedef>
<typedef name="LPCURRENCYFMT"><LPCURRENCYFMTA /></typedef>
enum SYSNLS_FUNCTION{
COMPARE_STRING = 0x0001, };
<typedef name="NLS_FUNCTION"><DWORD /></typedef>
typedef struct _nlsversioninfo{
<field name="dwNLSVersionInfoSize"><DWORD /></field>
<field name="dwNLSVersion"><DWORD /></field>
<field name="dwDefinedVersion"><DWORD /></field>
} NLSVERSIONINFO, *LPNLSVERSIONINFO;
typedef struct _nlsversioninfoex{
<field name="dwNLSVersionInfoSize"><DWORD /></field>
<field name="dwNLSVersion"><DWORD /></field>
<field name="dwDefinedVersion"><DWORD /></field>
<field name="dwEffectiveId"><DWORD /></field>
<field name="guidCustomVersion"><GUID /></field>
} NLSVERSIONINFOEX, *LPNLSVERSIONINFOEX;
<typedef name="GEOID"><LONG /></typedef>
<typedef name="GEOTYPE"><DWORD /></typedef>
<typedef name="GEOCLASS"><DWORD /></typedef>
<enum name="SYSGEOTYPE"><item name="GEO_NATION" value="0x0001" /><item name="GEO_LATITUDE" value="0x0002" /><item name="GEO_LONGITUDE" value="0x0003" /><item name="GEO_ISO2" value="0x0004" /><item name="GEO_ISO3" value="0x0005" /><item name="GEO_RFC1766" value="0x0006" /><item name="GEO_LCID" value="0x0007" /><item name="GEO_FRIENDLYNAME" value="0x0008" /><item name="GEO_OFFICIALNAME" value="0x0009" /><item name="GEO_TIMEZONES" value="0x000A" /><item name="GEO_OFFICIALLANGUAGES" value="0x000B" /></enum>
<enum name="SYSGEOCLASS"><item name="GEOCLASS_NATION" value="16" /><item name="GEOCLASS_REGION" value="14" /></enum>
typedef enum _NORM_FORM {
NormalizationOther = 0, NormalizationC = 0x1, NormalizationD = 0x2, NormalizationKC = 0x5, NormalizationKD = 0x6 } NORM_FORM;
typedef BOOL (__stdcall* LANGUAGEGROUP_ENUMPROCA)(LGRPID, LPSTR, LPSTR, DWORD, LONG_PTR);
typedef BOOL (__stdcall* LANGGROUPLOCALE_ENUMPROCA)(LGRPID, LCID, LPSTR, LONG_PTR);
typedef BOOL (__stdcall* UILANGUAGE_ENUMPROCA)(LPSTR, LONG_PTR);
typedef BOOL (__stdcall* LOCALE_ENUMPROCA)(LPSTR);
typedef BOOL (__stdcall* CODEPAGE_ENUMPROCA)(LPSTR);
typedef BOOL (__stdcall* DATEFMT_ENUMPROCA)(LPSTR);
typedef BOOL (__stdcall* DATEFMT_ENUMPROCEXA)(LPSTR, CALID);
typedef BOOL (__stdcall* TIMEFMT_ENUMPROCA)(LPSTR);
typedef BOOL (__stdcall* CALINFO_ENUMPROCA)(LPSTR);
typedef BOOL (__stdcall* CALINFO_ENUMPROCEXA)(LPSTR, CALID);
typedef BOOL (__stdcall* LANGUAGEGROUP_ENUMPROCW)(LGRPID, LPWSTR, LPWSTR, DWORD, LONG_PTR);
typedef BOOL (__stdcall* LANGGROUPLOCALE_ENUMPROCW)(LGRPID, LCID, LPWSTR, LONG_PTR);
typedef BOOL (__stdcall* UILANGUAGE_ENUMPROCW)(LPWSTR, LONG_PTR);
typedef BOOL (__stdcall* LOCALE_ENUMPROCW)(LPWSTR);
typedef BOOL (__stdcall* CODEPAGE_ENUMPROCW)(LPWSTR);
typedef BOOL (__stdcall* DATEFMT_ENUMPROCW)(LPWSTR);
typedef BOOL (__stdcall* DATEFMT_ENUMPROCEXW)(LPWSTR, CALID);
typedef BOOL (__stdcall* TIMEFMT_ENUMPROCW)(LPWSTR);
typedef BOOL (__stdcall* CALINFO_ENUMPROCW)(LPWSTR);
typedef BOOL (__stdcall* CALINFO_ENUMPROCEXW)(LPWSTR, CALID);
typedef BOOL (__stdcall* GEO_ENUMPROC)(GEOID);
typedef struct _FILEMUIINFO {
<field name="dwSize"><DWORD /></field>
<field name="dwVersion"><DWORD /></field>
<field name="dwFileType"><DWORD /></field>
<field name="pChecksum"><arr length="16"><BYTE /></arr></field>
<field name="pServiceChecksum"><arr length="16"><BYTE /></arr></field>
<field name="dwLanguageNameOffset"><DWORD /></field>
<field name="dwTypeIDMainSize"><DWORD /></field>
<field name="dwTypeIDMainOffset"><DWORD /></field>
<field name="dwTypeNameMainOffset"><DWORD /></field>
<field name="dwTypeIDMUISize"><DWORD /></field>
<field name="dwTypeIDMUIOffset"><DWORD /></field>
<field name="dwTypeNameMUIOffset"><DWORD /></field>
<field name="abBuffer"><arr length="8"><BYTE /></arr></field>
} FILEMUIINFO, *PFILEMUIINFO;

BOOL __stdcall IsValidCodePage( UINT CodePage);

UINT __stdcall GetACP();

UINT __stdcall GetOEMCP();

BOOL __stdcall GetCPInfo( UINT CodePage, LPCPINFO lpCPInfo);

BOOL __stdcall GetCPInfoExA( UINT CodePage, DWORD dwFlags, LPCPINFOEXA lpCPInfoEx);

BOOL __stdcall GetCPInfoExW( UINT CodePage, DWORD dwFlags, LPCPINFOEXW lpCPInfoEx);

BOOL __stdcall IsDBCSLeadByte( BYTE TestChar);

BOOL __stdcall IsDBCSLeadByteEx( UINT CodePage, BYTE TestChar);

int32 __stdcall MultiByteToWideChar( UINT CodePage, DWORD dwFlags, LPCSTR lpMultiByteStr, int32 cbMultiByte, LPWSTR lpWideCharStr, int32 cchWideChar);

int32 __stdcall WideCharToMultiByte( UINT CodePage, DWORD dwFlags, LPCWSTR lpWideCharStr, int32 cchWideChar, LPSTR lpMultiByteStr, int32 cbMultiByte, LPCSTR lpDefaultChar, LPBOOL lpUsedDefaultChar);

int32 __stdcall CompareStringA( LCID Locale, DWORD dwCmpFlags, PCNZCH lpString1, int32 cchCount1, PCNZCH lpString2, int32 cchCount2);

int32 __stdcall CompareStringW( LCID Locale, DWORD dwCmpFlags, PCNZWCH lpString1, int32 cchCount1, PCNZWCH lpString2, int32 cchCount2);

int32 __stdcall FindNLSString( LCID Locale, DWORD dwFindNLSStringFlags, LPCWSTR lpStringSource, int32 cchSource, LPCWSTR lpStringValue, int32 cchValue, LPINT pcchFound);

int32 __stdcall FindStringOrdinal( DWORD dwFindStringOrdinalFlags, LPCWSTR lpStringSource, int32 cchSource, LPCWSTR lpStringValue, int32 cchValue, BOOL bIgnoreCase);

int32 __stdcall LCMapStringA( LCID Locale, DWORD dwMapFlags, LPCSTR lpSrcStr, int32 cchSrc, LPSTR lpDestStr, int32 cchDest);

int32 __stdcall LCMapStringW( LCID Locale, DWORD dwMapFlags, LPCWSTR lpSrcStr, int32 cchSrc, LPWSTR lpDestStr, int32 cchDest);

int32 __stdcall GetLocaleInfoA( LCID Locale, LCTYPE LCType, LPSTR lpLCData, int32 cchData);

int32 __stdcall GetLocaleInfoW( LCID Locale, LCTYPE LCType, LPWSTR lpLCData, int32 cchData);

BOOL __stdcall SetLocaleInfoA( LCID Locale, LCTYPE LCType, LPCSTR lpLCData);

BOOL __stdcall SetLocaleInfoW( LCID Locale, LCTYPE LCType, LPCWSTR lpLCData);

int32 __stdcall GetCalendarInfoA( LCID Locale, CALID Calendar, CALTYPE CalType, LPSTR lpCalData, int32 cchData, LPDWORD lpValue);

int32 __stdcall GetCalendarInfoW( LCID Locale, CALID Calendar, CALTYPE CalType, LPWSTR lpCalData, int32 cchData, LPDWORD lpValue);

BOOL __stdcall SetCalendarInfoA( LCID Locale, CALID Calendar, CALTYPE CalType, LPCSTR lpCalData);

BOOL __stdcall SetCalendarInfoW( LCID Locale, CALID Calendar, CALTYPE CalType, LPCWSTR lpCalData);

int32 __stdcall LCIDToLocaleName( LCID Locale, LPWSTR lpName, int32 cchName, DWORD dwFlags);

LCID __stdcall LocaleNameToLCID( LPCWSTR lpName, DWORD dwFlags);

int32 __stdcall GetTimeFormatA( LCID Locale, DWORD dwFlags, const SYSTEMTIME *lpTime, LPCSTR lpFormat, LPSTR lpTimeStr, int32 cchTime);

int32 __stdcall GetTimeFormatW( LCID Locale, DWORD dwFlags, const SYSTEMTIME *lpTime, LPCWSTR lpFormat, LPWSTR lpTimeStr, int32 cchTime);

int32 __stdcall GetDurationFormat( LCID Locale, DWORD dwFlags, const SYSTEMTIME *lpDuration, ULONGLONG ullDuration, LPCWSTR lpFormat, LPWSTR lpDurationStr, int32 cchDuration);

int32 __stdcall GetDateFormatA( LCID Locale, DWORD dwFlags, const SYSTEMTIME *lpDate, LPCSTR lpFormat, LPSTR lpDateStr, int32 cchDate);

int32 __stdcall GetDateFormatW( LCID Locale, DWORD dwFlags, const SYSTEMTIME *lpDate, LPCWSTR lpFormat, LPWSTR lpDateStr, int32 cchDate);

int32 __stdcall GetNumberFormatA( LCID Locale, DWORD dwFlags, LPCSTR lpValue, const NUMBERFMTA *lpFormat, LPSTR lpNumberStr, int32 cchNumber);

int32 __stdcall GetNumberFormatW( LCID Locale, DWORD dwFlags, LPCWSTR lpValue, const NUMBERFMTW *lpFormat, LPWSTR lpNumberStr, int32 cchNumber);

int32 __stdcall GetCurrencyFormatA( LCID Locale, DWORD dwFlags, LPCSTR lpValue, const CURRENCYFMTA *lpFormat, LPSTR lpCurrencyStr, int32 cchCurrency);

int32 __stdcall GetCurrencyFormatW( LCID Locale, DWORD dwFlags, LPCWSTR lpValue, const CURRENCYFMTW *lpFormat, LPWSTR lpCurrencyStr, int32 cchCurrency);

BOOL __stdcall EnumCalendarInfoA( CALINFO_ENUMPROCA lpCalInfoEnumProc, LCID Locale, CALID Calendar, CALTYPE CalType);

BOOL __stdcall EnumCalendarInfoW( CALINFO_ENUMPROCW lpCalInfoEnumProc, LCID Locale, CALID Calendar, CALTYPE CalType);

BOOL __stdcall EnumCalendarInfoExA( CALINFO_ENUMPROCEXA lpCalInfoEnumProcEx, LCID Locale, CALID Calendar, CALTYPE CalType);

BOOL __stdcall EnumCalendarInfoExW( CALINFO_ENUMPROCEXW lpCalInfoEnumProcEx, LCID Locale, CALID Calendar, CALTYPE CalType);

BOOL __stdcall EnumTimeFormatsA( TIMEFMT_ENUMPROCA lpTimeFmtEnumProc, LCID Locale, DWORD dwFlags);

BOOL __stdcall EnumTimeFormatsW( TIMEFMT_ENUMPROCW lpTimeFmtEnumProc, LCID Locale, DWORD dwFlags);

BOOL __stdcall EnumDateFormatsA( DATEFMT_ENUMPROCA lpDateFmtEnumProc, LCID Locale, DWORD dwFlags);

BOOL __stdcall EnumDateFormatsW( DATEFMT_ENUMPROCW lpDateFmtEnumProc, LCID Locale, DWORD dwFlags);

BOOL __stdcall EnumDateFormatsExA( DATEFMT_ENUMPROCEXA lpDateFmtEnumProcEx, LCID Locale, DWORD dwFlags);

BOOL __stdcall EnumDateFormatsExW( DATEFMT_ENUMPROCEXW lpDateFmtEnumProcEx, LCID Locale, DWORD dwFlags);

BOOL __stdcall IsValidLanguageGroup( LGRPID LanguageGroup, DWORD dwFlags);

BOOL __stdcall GetNLSVersion( NLS_FUNCTION Function, LCID Locale, LPNLSVERSIONINFO lpVersionInformation);

BOOL __stdcall IsNLSDefinedString( NLS_FUNCTION Function, DWORD dwFlags, LPNLSVERSIONINFO lpVersionInformation, LPCWSTR lpString, INT cchStr);

BOOL __stdcall IsValidLocale( LCID Locale, DWORD dwFlags);

int32 __stdcall GetGeoInfoA( GEOID Location, GEOTYPE GeoType, LPSTR lpGeoData, int32 cchData, LANGID LangId);

int32 __stdcall GetGeoInfoW( GEOID Location, GEOTYPE GeoType, LPWSTR lpGeoData, int32 cchData, LANGID LangId);

BOOL __stdcall EnumSystemGeoID( GEOCLASS GeoClass, GEOID ParentGeoId, GEO_ENUMPROC lpGeoEnumProc);

GEOID __stdcall GetUserGeoID( GEOCLASS GeoClass);

BOOL __stdcall SetUserGeoID( GEOID GeoId);

LCID __stdcall ConvertDefaultLocale( LCID Locale);

LCID __stdcall GetThreadLocale();

BOOL __stdcall SetThreadLocale( LCID Locale );

LANGID __stdcall GetSystemDefaultUILanguage();

LANGID __stdcall GetUserDefaultUILanguage();

LANGID __stdcall GetSystemDefaultLangID();

LANGID __stdcall GetUserDefaultLangID();

LCID __stdcall GetSystemDefaultLCID();

LCID __stdcall GetUserDefaultLCID();

LANGID __stdcall SetThreadUILanguage( LANGID LangId);

LANGID __stdcall GetThreadUILanguage();

BOOL __stdcall GetProcessPreferredUILanguages( DWORD dwFlags, PULONG pulNumLanguages, PZZWSTR pwszLanguagesBuffer, PULONG pcchLanguagesBuffer );

BOOL __stdcall SetProcessPreferredUILanguages( DWORD dwFlags, PCZZWSTR pwszLanguagesBuffer, PULONG pulNumLanguages );

BOOL __stdcall GetUserPreferredUILanguages(DWORD dwFlags, PULONG pulNumLanguages, PZZWSTR pwszLanguagesBuffer, PULONG pcchLanguagesBuffer );

BOOL __stdcall GetSystemPreferredUILanguages(DWORD dwFlags, PULONG pulNumLanguages, PZZWSTR pwszLanguagesBuffer, PULONG pcchLanguagesBuffer );

BOOL __stdcall GetThreadPreferredUILanguages( DWORD dwFlags, PULONG pulNumLanguages, PZZWSTR pwszLanguagesBuffer, PULONG pcchLanguagesBuffer );

BOOL __stdcall SetThreadPreferredUILanguages( DWORD dwFlags, PCZZWSTR pwszLanguagesBuffer, PULONG pulNumLanguages );

BOOL __stdcall GetFileMUIInfo( DWORD dwFlags, PCWSTR pcwszFilePath, PFILEMUIINFO pFileMUIInfo, DWORD* pcbFileMUIInfo);

BOOL __stdcall GetFileMUIPath( DWORD dwFlags, PCWSTR pcwszFilePath, PWSTR pwszLanguage, PULONG pcchLanguage, PWSTR pwszFileMUIPath, PULONG pcchFileMUIPath, PULONGLONG pululEnumerator );

BOOL __stdcall GetUILanguageInfo( DWORD dwFlags, PCZZWSTR pwmszLanguage, PZZWSTR pwszFallbackLanguages, PDWORD pcchFallbackLanguages, PDWORD pAttributes );

BOOL __stdcall NotifyUILanguageChange( DWORD dwFlags, PCWSTR pcwstrNewLanguage, PCWSTR pcwstrPreviousLanguage, DWORD dwReserved, PDWORD pdwStatusRtrn );

BOOL __stdcall GetStringTypeExA( LCID Locale, DWORD dwInfoType, LPCSTR lpSrcStr, int32 cchSrc, LPWORD lpCharType);

BOOL __stdcall GetStringTypeExW( LCID Locale, DWORD dwInfoType, LPCWSTR lpSrcStr, int32 cchSrc, LPWORD lpCharType);

BOOL __stdcall GetStringTypeA( LCID Locale, DWORD dwInfoType, LPCSTR lpSrcStr, int32 cchSrc, LPWORD lpCharType);

BOOL __stdcall GetStringTypeW( DWORD dwInfoType, LPCWSTR lpSrcStr, int32 cchSrc, LPWORD lpCharType);

int32 __stdcall FoldStringA( DWORD dwMapFlags, LPCSTR lpSrcStr, int32 cchSrc, LPSTR lpDestStr, int32 cchDest);

int32 __stdcall FoldStringW( DWORD dwMapFlags, LPCWSTR lpSrcStr, int32 cchSrc, LPWSTR lpDestStr, int32 cchDest);

BOOL __stdcall EnumSystemLanguageGroupsA( LANGUAGEGROUP_ENUMPROCA lpLanguageGroupEnumProc, DWORD dwFlags, LONG_PTR lParam);

BOOL __stdcall EnumSystemLanguageGroupsW( LANGUAGEGROUP_ENUMPROCW lpLanguageGroupEnumProc, DWORD dwFlags, LONG_PTR lParam);

BOOL __stdcall EnumLanguageGroupLocalesA( LANGGROUPLOCALE_ENUMPROCA lpLangGroupLocaleEnumProc, LGRPID LanguageGroup, DWORD dwFlags, LONG_PTR lParam);

BOOL __stdcall EnumLanguageGroupLocalesW( LANGGROUPLOCALE_ENUMPROCW lpLangGroupLocaleEnumProc, LGRPID LanguageGroup, DWORD dwFlags, LONG_PTR lParam);

BOOL __stdcall EnumUILanguagesA( UILANGUAGE_ENUMPROCA lpUILanguageEnumProc, DWORD dwFlags, LONG_PTR lParam);

BOOL __stdcall EnumUILanguagesW( UILANGUAGE_ENUMPROCW lpUILanguageEnumProc, DWORD dwFlags, LONG_PTR lParam);

BOOL __stdcall EnumSystemLocalesA( LOCALE_ENUMPROCA lpLocaleEnumProc, DWORD dwFlags);

BOOL __stdcall EnumSystemLocalesW( LOCALE_ENUMPROCW lpLocaleEnumProc, DWORD dwFlags);

BOOL __stdcall EnumSystemCodePagesA( CODEPAGE_ENUMPROCA lpCodePageEnumProc, DWORD dwFlags);

BOOL __stdcall EnumSystemCodePagesW( CODEPAGE_ENUMPROCW lpCodePageEnumProc, DWORD dwFlags);

int32 __stdcall NormalizeString( NORM_FORM NormForm, LPCWSTR lpSrcString, int32 cwSrcLength, LPWSTR lpDstString, int32 cwDstLength );

BOOL __stdcall IsNormalizedString( NORM_FORM NormForm, LPCWSTR lpString, int32 cwLength );

int32 __stdcall IdnToAscii( DWORD dwFlags, LPCWSTR lpUnicodeCharStr, int32 cchUnicodeChar, LPWSTR lpASCIICharStr, int32 cchASCIIChar);

int32 __stdcall IdnToNameprepUnicode( DWORD dwFlags, LPCWSTR lpUnicodeCharStr, int32 cchUnicodeChar, LPWSTR lpNameprepCharStr, int32 cchNameprepChar);

int32 __stdcall IdnToUnicode( DWORD dwFlags, LPCWSTR lpASCIICharStr, int32 cchASCIIChar, LPWSTR lpUnicodeCharStr, int32 cchUnicodeChar);

BOOL __stdcall VerifyScripts( DWORD dwFlags, LPCWSTR lpLocaleScripts, int32 cchLocaleScripts, LPCWSTR lpTestScripts, int32 cchTestScripts);

int32 __stdcall GetStringScripts( DWORD dwFlags, LPCWSTR lpString, int32 cchString, LPWSTR lpScripts, int32 cchScripts);

int32 __stdcall GetLocaleInfoEx( LPCWSTR lpLocaleName, LCTYPE LCType, LPWSTR lpLCData, int32 cchData );

int32 __stdcall GetCalendarInfoEx( LPCWSTR lpLocaleName, CALID Calendar, LPCWSTR lpReserved, CALTYPE CalType, LPWSTR lpCalData, int32 cchData, LPDWORD lpValue );

int32 __stdcall GetTimeFormatEx( LPCWSTR lpLocaleName, DWORD dwFlags, const SYSTEMTIME *lpTime, LPCWSTR lpFormat, LPWSTR lpTimeStr, int32 cchTime );

int32 __stdcall GetDateFormatEx( LPCWSTR lpLocaleName, DWORD dwFlags, const SYSTEMTIME *lpDate, LPCWSTR lpFormat, LPWSTR lpDateStr, int32 cchDate, LPCWSTR lpCalendar );

int32 __stdcall GetDurationFormatEx( LPCWSTR lpLocaleName, DWORD dwFlags, const SYSTEMTIME *lpDuration, ULONGLONG ullDuration, LPCWSTR lpFormat, LPWSTR lpDurationStr, int32 cchDuration );

int32 __stdcall GetNumberFormatEx( LPCWSTR lpLocaleName, DWORD dwFlags, LPCWSTR lpValue, const NUMBERFMTW *lpFormat, LPWSTR lpNumberStr, int32 cchNumber );

int32 __stdcall GetCurrencyFormatEx( LPCWSTR lpLocaleName, DWORD dwFlags, LPCWSTR lpValue, const CURRENCYFMTW *lpFormat, LPWSTR lpCurrencyStr, int32 cchCurrency );

int32 __stdcall GetUserDefaultLocaleName( LPWSTR lpLocaleName, int32 cchLocaleName );

int32 __stdcall GetSystemDefaultLocaleName( LPWSTR lpLocaleName, int32 cchLocaleName );

BOOL __stdcall GetNLSVersionEx( NLS_FUNCTION function, LPCWSTR lpLocaleName, LPNLSVERSIONINFOEX lpVersionInformation );

int32 __stdcall CompareStringEx( LPCWSTR lpLocaleName, DWORD dwCmpFlags, LPCWSTR lpString1, int32 cchCount1, LPCWSTR lpString2, int32 cchCount2, LPNLSVERSIONINFO lpVersionInformation, LPVOID lpReserved, LPARAM lParam );

int32 __stdcall FindNLSStringEx( LPCWSTR lpLocaleName, DWORD dwFindNLSStringFlags, LPCWSTR lpStringSource, int32 cchSource, LPCWSTR lpStringValue, int32 cchValue, LPINT pcchFound, LPNLSVERSIONINFO lpVersionInformation, LPVOID lpReserved, LPARAM lParam );

int32 __stdcall LCMapStringEx( LPCWSTR lpLocaleName, DWORD dwMapFlags, LPCWSTR lpSrcStr, int32 cchSrc, LPWSTR lpDestStr, int32 cchDest, LPNLSVERSIONINFO lpVersionInformation, LPVOID lpReserved, LPARAM lParam );

int32 __stdcall CompareStringOrdinal( LPCWSTR lpString1, int32 cchCount1, LPCWSTR lpString2, int32 cchCount2, BOOL bIgnoreCase );

BOOL __stdcall IsValidLocaleName( LPCWSTR lpLocaleName );
typedef BOOL (__stdcall* CALINFO_ENUMPROCEXEX)(LPWSTR, CALID, LPWSTR, LPARAM);

BOOL __stdcall EnumCalendarInfoExEx( CALINFO_ENUMPROCEXEX pCalInfoEnumProcExEx, LPCWSTR lpLocaleName, CALID Calendar, LPCWSTR lpReserved, CALTYPE CalType, LPARAM lParam );
typedef BOOL (__stdcall* DATEFMT_ENUMPROCEXEX)(LPWSTR, CALID, LPARAM);

BOOL __stdcall EnumDateFormatsExEx( DATEFMT_ENUMPROCEXEX lpDateFmtEnumProcExEx, LPCWSTR lpLocaleName, DWORD dwFlags, LPARAM lParam );
typedef BOOL (__stdcall* TIMEFMT_ENUMPROCEX)(LPWSTR, LPARAM);

BOOL __stdcall EnumTimeFormatsEx( TIMEFMT_ENUMPROCEX lpTimeFmtEnumProcEx, LPCWSTR lpLocaleName, DWORD dwFlags, LPARAM lParam );
typedef BOOL (__stdcall* LOCALE_ENUMPROCEX)(LPWSTR, DWORD, LPARAM);

BOOL __stdcall EnumSystemLocalesEx( LOCALE_ENUMPROCEX lpLocaleEnumProcEx, DWORD dwFlags, LPARAM lParam, LPVOID lpReserved );

int32 __stdcall ResolveLocaleName( LPCWSTR lpNameToResolve, LPWSTR lpLocaleName, int32 cchLocaleName );
typedef struct _COORD {
<field name="X"><SHORT /></field>
<field name="Y"><SHORT /></field>
} COORD, *PCOORD;
typedef struct _SMALL_RECT {
<field name="Left"><SHORT /></field>
<field name="Top"><SHORT /></field>
<field name="Right"><SHORT /></field>
<field name="Bottom"><SHORT /></field>
} SMALL_RECT, *PSMALL_RECT;
typedef struct _KEY_EVENT_RECORD {
<field name="bKeyDown"><BOOL /></field>
<field name="wRepeatCount"><WORD /></field>
<field name="wVirtualKeyCode"><WORD /></field>
<field name="wVirtualScanCode"><WORD /></field>
union {
<field name="UnicodeChar"><WCHAR /></field>
<field name="AsciiChar"><CHAR /></field>
} uChar;
<field name="dwControlKeyState"><DWORD /></field>
} KEY_EVENT_RECORD, *PKEY_EVENT_RECORD;
typedef struct _MOUSE_EVENT_RECORD {
<field name="dwMousePosition"><COORD /></field>
<field name="dwButtonState"><DWORD /></field>
<field name="dwControlKeyState"><DWORD /></field>
<field name="dwEventFlags"><DWORD /></field>
} MOUSE_EVENT_RECORD, *PMOUSE_EVENT_RECORD;
typedef struct _WINDOW_BUFFER_SIZE_RECORD {
<field name="dwSize"><COORD /></field>
} WINDOW_BUFFER_SIZE_RECORD, *PWINDOW_BUFFER_SIZE_RECORD;
typedef struct _MENU_EVENT_RECORD {
<field name="dwCommandId"><UINT /></field>
} MENU_EVENT_RECORD, *PMENU_EVENT_RECORD;
typedef struct _FOCUS_EVENT_RECORD {
<field name="bSetFocus"><BOOL /></field>
} FOCUS_EVENT_RECORD, *PFOCUS_EVENT_RECORD;
typedef struct _INPUT_RECORD {
<field name="EventType"><WORD /></field>
union {
<field name="KeyEvent"><KEY_EVENT_RECORD /></field>
<field name="MouseEvent"><MOUSE_EVENT_RECORD /></field>
<field name="WindowBufferSizeEvent"><WINDOW_BUFFER_SIZE_RECORD /></field>
<field name="MenuEvent"><MENU_EVENT_RECORD /></field>
<field name="FocusEvent"><FOCUS_EVENT_RECORD /></field>
} Event;
} INPUT_RECORD, *PINPUT_RECORD;
typedef struct _CHAR_INFO {
union {
<field name="UnicodeChar"><WCHAR /></field>
<field name="AsciiChar"><CHAR /></field>
} Char;
<field name="Attributes"><WORD /></field>
} CHAR_INFO, *PCHAR_INFO;
typedef struct _CONSOLE_SCREEN_BUFFER_INFO {
<field name="dwSize"><COORD /></field>
<field name="dwCursorPosition"><COORD /></field>
<field name="wAttributes"><WORD /></field>
<field name="srWindow"><SMALL_RECT /></field>
<field name="dwMaximumWindowSize"><COORD /></field>
} CONSOLE_SCREEN_BUFFER_INFO, *PCONSOLE_SCREEN_BUFFER_INFO;
typedef struct _CONSOLE_SCREEN_BUFFER_INFOEX {
<field name="cbSize"><ULONG /></field>
<field name="dwSize"><COORD /></field>
<field name="dwCursorPosition"><COORD /></field>
<field name="wAttributes"><WORD /></field>
<field name="srWindow"><SMALL_RECT /></field>
<field name="dwMaximumWindowSize"><COORD /></field>
<field name="wPopupAttributes"><WORD /></field>
<field name="bFullscreenSupported"><BOOL /></field>
<field name="ColorTable"><arr length="16"><COLORREF /></arr></field>
} CONSOLE_SCREEN_BUFFER_INFOEX, *PCONSOLE_SCREEN_BUFFER_INFOEX;
typedef struct _CONSOLE_CURSOR_INFO {
<field name="dwSize"><DWORD /></field>
<field name="bVisible"><BOOL /></field>
} CONSOLE_CURSOR_INFO, *PCONSOLE_CURSOR_INFO;
typedef struct _CONSOLE_FONT_INFO {
<field name="nFont"><DWORD /></field>
<field name="dwFontSize"><COORD /></field>
} CONSOLE_FONT_INFO, *PCONSOLE_FONT_INFO;
typedef struct _CONSOLE_FONT_INFOEX {
<field name="cbSize"><ULONG /></field>
<field name="nFont"><DWORD /></field>
<field name="dwFontSize"><COORD /></field>
<field name="FontFamily"><UINT /></field>
<field name="FontWeight"><UINT /></field>
<field name="FaceName"><arr length="32"><WCHAR /></arr></field>
} CONSOLE_FONT_INFOEX, *PCONSOLE_FONT_INFOEX;
typedef struct _CONSOLE_HISTORY_INFO {
<field name="cbSize"><UINT /></field>
<field name="HistoryBufferSize"><UINT /></field>
<field name="NumberOfHistoryBuffers"><UINT /></field>
<field name="dwFlags"><DWORD /></field>
} CONSOLE_HISTORY_INFO, *PCONSOLE_HISTORY_INFO;
typedef struct _CONSOLE_SELECTION_INFO {
<field name="dwFlags"><DWORD /></field>
<field name="dwSelectionAnchor"><COORD /></field>
<field name="srSelection"><SMALL_RECT /></field>
} CONSOLE_SELECTION_INFO, *PCONSOLE_SELECTION_INFO;
typedef BOOL (__stdcall *PHANDLER_ROUTINE)( DWORD CtrlType );

BOOL __stdcall PeekConsoleInputA( HANDLE hConsoleInput, PINPUT_RECORD lpBuffer, DWORD nLength, LPDWORD lpNumberOfEventsRead );

BOOL __stdcall PeekConsoleInputW( HANDLE hConsoleInput, PINPUT_RECORD lpBuffer, DWORD nLength, LPDWORD lpNumberOfEventsRead );

BOOL __stdcall ReadConsoleInputA( HANDLE hConsoleInput, PINPUT_RECORD lpBuffer, DWORD nLength, LPDWORD lpNumberOfEventsRead );

BOOL __stdcall ReadConsoleInputW( HANDLE hConsoleInput, PINPUT_RECORD lpBuffer, DWORD nLength, LPDWORD lpNumberOfEventsRead );

BOOL __stdcall WriteConsoleInputA( HANDLE hConsoleInput, const INPUT_RECORD *lpBuffer, DWORD nLength, LPDWORD lpNumberOfEventsWritten );

BOOL __stdcall WriteConsoleInputW( HANDLE hConsoleInput, const INPUT_RECORD *lpBuffer, DWORD nLength, LPDWORD lpNumberOfEventsWritten );

BOOL __stdcall ReadConsoleOutputA( HANDLE hConsoleOutput, PCHAR_INFO lpBuffer, COORD dwBufferSize, COORD dwBufferCoord, PSMALL_RECT lpReadRegion );

BOOL __stdcall ReadConsoleOutputW( HANDLE hConsoleOutput, PCHAR_INFO lpBuffer, COORD dwBufferSize, COORD dwBufferCoord, PSMALL_RECT lpReadRegion );

BOOL __stdcall WriteConsoleOutputA( HANDLE hConsoleOutput, const CHAR_INFO *lpBuffer, COORD dwBufferSize, COORD dwBufferCoord, PSMALL_RECT lpWriteRegion );

BOOL __stdcall WriteConsoleOutputW( HANDLE hConsoleOutput, const CHAR_INFO *lpBuffer, COORD dwBufferSize, COORD dwBufferCoord, PSMALL_RECT lpWriteRegion );

BOOL __stdcall ReadConsoleOutputCharacterA( HANDLE hConsoleOutput, LPSTR lpCharacter, DWORD nLength, COORD dwReadCoord, LPDWORD lpNumberOfCharsRead );

BOOL __stdcall ReadConsoleOutputCharacterW( HANDLE hConsoleOutput, LPWSTR lpCharacter, DWORD nLength, COORD dwReadCoord, LPDWORD lpNumberOfCharsRead );

BOOL __stdcall ReadConsoleOutputAttribute( HANDLE hConsoleOutput, LPWORD lpAttribute, DWORD nLength, COORD dwReadCoord, LPDWORD lpNumberOfAttrsRead );

BOOL __stdcall WriteConsoleOutputCharacterA( HANDLE hConsoleOutput, LPCSTR lpCharacter, DWORD nLength, COORD dwWriteCoord, LPDWORD lpNumberOfCharsWritten );

BOOL __stdcall WriteConsoleOutputCharacterW( HANDLE hConsoleOutput, LPCWSTR lpCharacter, DWORD nLength, COORD dwWriteCoord, LPDWORD lpNumberOfCharsWritten );

BOOL __stdcall WriteConsoleOutputAttribute( HANDLE hConsoleOutput, const WORD *lpAttribute, DWORD nLength, COORD dwWriteCoord, LPDWORD lpNumberOfAttrsWritten );

BOOL __stdcall FillConsoleOutputCharacterA( HANDLE hConsoleOutput, CHAR cCharacter, DWORD nLength, COORD dwWriteCoord, LPDWORD lpNumberOfCharsWritten );

BOOL __stdcall FillConsoleOutputCharacterW( HANDLE hConsoleOutput, WCHAR cCharacter, DWORD nLength, COORD dwWriteCoord, LPDWORD lpNumberOfCharsWritten );

BOOL __stdcall FillConsoleOutputAttribute( HANDLE hConsoleOutput, WORD wAttribute, DWORD nLength, COORD dwWriteCoord, LPDWORD lpNumberOfAttrsWritten );

BOOL __stdcall GetConsoleMode( HANDLE hConsoleHandle, LPDWORD lpMode );

BOOL __stdcall GetNumberOfConsoleInputEvents( HANDLE hConsoleInput, LPDWORD lpNumberOfEvents );

BOOL __stdcall GetConsoleScreenBufferInfo( HANDLE hConsoleOutput, PCONSOLE_SCREEN_BUFFER_INFO lpConsoleScreenBufferInfo );

BOOL __stdcall GetConsoleScreenBufferInfoEx( HANDLE hConsoleOutput, PCONSOLE_SCREEN_BUFFER_INFOEX lpConsoleScreenBufferInfoEx);

BOOL __stdcall SetConsoleScreenBufferInfoEx( HANDLE hConsoleOutput, PCONSOLE_SCREEN_BUFFER_INFOEX lpConsoleScreenBufferInfoEx);

COORD __stdcall GetLargestConsoleWindowSize( HANDLE hConsoleOutput );

BOOL __stdcall GetConsoleCursorInfo( HANDLE hConsoleOutput, PCONSOLE_CURSOR_INFO lpConsoleCursorInfo );

BOOL __stdcall GetCurrentConsoleFont( HANDLE hConsoleOutput, BOOL bMaximumWindow, PCONSOLE_FONT_INFO lpConsoleCurrentFont );

BOOL __stdcall GetCurrentConsoleFontEx( HANDLE hConsoleOutput, BOOL bMaximumWindow, PCONSOLE_FONT_INFOEX lpConsoleCurrentFontEx);

BOOL __stdcall SetCurrentConsoleFontEx( HANDLE hConsoleOutput, BOOL bMaximumWindow, PCONSOLE_FONT_INFOEX lpConsoleCurrentFontEx);

BOOL __stdcall GetConsoleHistoryInfo( PCONSOLE_HISTORY_INFO lpConsoleHistoryInfo);

BOOL __stdcall SetConsoleHistoryInfo( PCONSOLE_HISTORY_INFO lpConsoleHistoryInfo);

COORD __stdcall GetConsoleFontSize( HANDLE hConsoleOutput, DWORD nFont );

BOOL __stdcall GetConsoleSelectionInfo( PCONSOLE_SELECTION_INFO lpConsoleSelectionInfo );

BOOL __stdcall GetNumberOfConsoleMouseButtons( LPDWORD lpNumberOfMouseButtons );

BOOL __stdcall SetConsoleMode( HANDLE hConsoleHandle, DWORD dwMode );

BOOL __stdcall SetConsoleActiveScreenBuffer( HANDLE hConsoleOutput );

BOOL __stdcall FlushConsoleInputBuffer( HANDLE hConsoleInput );

BOOL __stdcall SetConsoleScreenBufferSize( HANDLE hConsoleOutput, COORD dwSize );

BOOL __stdcall SetConsoleCursorPosition( HANDLE hConsoleOutput, COORD dwCursorPosition );

BOOL __stdcall SetConsoleCursorInfo( HANDLE hConsoleOutput, const CONSOLE_CURSOR_INFO *lpConsoleCursorInfo );

BOOL __stdcall ScrollConsoleScreenBufferA( HANDLE hConsoleOutput, const SMALL_RECT *lpScrollRectangle, const SMALL_RECT *lpClipRectangle, COORD dwDestinationOrigin, const CHAR_INFO *lpFill );

BOOL __stdcall ScrollConsoleScreenBufferW( HANDLE hConsoleOutput, const SMALL_RECT *lpScrollRectangle, const SMALL_RECT *lpClipRectangle, COORD dwDestinationOrigin, const CHAR_INFO *lpFill );

BOOL __stdcall SetConsoleWindowInfo( HANDLE hConsoleOutput, BOOL bAbsolute, const SMALL_RECT *lpConsoleWindow );

BOOL __stdcall SetConsoleTextAttribute( HANDLE hConsoleOutput, WORD wAttributes );

BOOL __stdcall SetConsoleCtrlHandler( PHANDLER_ROUTINE HandlerRoutine, BOOL Add);

BOOL __stdcall GenerateConsoleCtrlEvent( DWORD dwCtrlEvent, DWORD dwProcessGroupId);

BOOL __stdcall AllocConsole( void);

BOOL __stdcall FreeConsole( void);

BOOL __stdcall AttachConsole( DWORD dwProcessId);

DWORD __stdcall GetConsoleTitleA( LPSTR lpConsoleTitle, DWORD nSize );

DWORD __stdcall GetConsoleTitleW( LPWSTR lpConsoleTitle, DWORD nSize );

DWORD __stdcall GetConsoleOriginalTitleA( LPSTR lpConsoleTitle, DWORD nSize);

DWORD __stdcall GetConsoleOriginalTitleW( LPWSTR lpConsoleTitle, DWORD nSize);

BOOL __stdcall SetConsoleTitleA( LPCSTR lpConsoleTitle );

BOOL __stdcall SetConsoleTitleW( LPCWSTR lpConsoleTitle );
typedef struct _CONSOLE_READCONSOLE_CONTROL {
<field name="nLength"><ULONG /></field>
<field name="nInitialChars"><ULONG /></field>
<field name="dwCtrlWakeupMask"><ULONG /></field>
<field name="dwControlKeyState"><ULONG /></field>
} CONSOLE_READCONSOLE_CONTROL, *PCONSOLE_READCONSOLE_CONTROL;

BOOL __stdcall ReadConsoleA( HANDLE hConsoleInput, LPVOID lpBuffer, DWORD nNumberOfCharsToRead, LPDWORD lpNumberOfCharsRead, PCONSOLE_READCONSOLE_CONTROL pInputControl );

BOOL __stdcall ReadConsoleW( HANDLE hConsoleInput, LPVOID lpBuffer, DWORD nNumberOfCharsToRead, LPDWORD lpNumberOfCharsRead, PCONSOLE_READCONSOLE_CONTROL pInputControl );

BOOL __stdcall WriteConsoleA( HANDLE hConsoleOutput, const void *lpBuffer, DWORD nNumberOfCharsToWrite, LPDWORD lpNumberOfCharsWritten, LPVOID lpReserved);

BOOL __stdcall WriteConsoleW( HANDLE hConsoleOutput, const void *lpBuffer, DWORD nNumberOfCharsToWrite, LPDWORD lpNumberOfCharsWritten, LPVOID lpReserved);

HANDLE __stdcall CreateConsoleScreenBuffer( DWORD dwDesiredAccess, DWORD dwShareMode, const SECURITY_ATTRIBUTES *lpSecurityAttributes, DWORD dwFlags, LPVOID lpScreenBufferData );

UINT __stdcall GetConsoleCP( void);

BOOL __stdcall SetConsoleCP( UINT wCodePageID );

UINT __stdcall GetConsoleOutputCP( void);

BOOL __stdcall SetConsoleOutputCP( UINT wCodePageID );

BOOL __stdcall GetConsoleDisplayMode( LPDWORD lpModeFlags);
BOOL __stdcall SetConsoleDisplayMode( HANDLE hConsoleOutput, DWORD dwFlags, PCOORD lpNewScreenBufferDimensions);

HWND __stdcall GetConsoleWindow( void );

DWORD __stdcall GetConsoleProcessList( LPDWORD lpdwProcessList, DWORD dwProcessCount);

BOOL __stdcall AddConsoleAliasA( LPSTR Source, LPSTR Target, LPSTR ExeName);

BOOL __stdcall AddConsoleAliasW( LPWSTR Source, LPWSTR Target, LPWSTR ExeName);

DWORD __stdcall GetConsoleAliasA( LPSTR Source, LPSTR TargetBuffer, DWORD TargetBufferLength, LPSTR ExeName);

DWORD __stdcall GetConsoleAliasW( LPWSTR Source, LPWSTR TargetBuffer, DWORD TargetBufferLength, LPWSTR ExeName);

DWORD __stdcall GetConsoleAliasesLengthA( LPSTR ExeName);

DWORD __stdcall GetConsoleAliasesLengthW( LPWSTR ExeName);

DWORD __stdcall GetConsoleAliasExesLengthA( void);

DWORD __stdcall GetConsoleAliasExesLengthW( void);

DWORD __stdcall GetConsoleAliasesA( LPSTR AliasBuffer, DWORD AliasBufferLength, LPSTR ExeName);

DWORD __stdcall GetConsoleAliasesW( LPWSTR AliasBuffer, DWORD AliasBufferLength, LPWSTR ExeName);

DWORD __stdcall GetConsoleAliasExesA( LPSTR ExeNameBuffer, DWORD ExeNameBufferLength);

DWORD __stdcall GetConsoleAliasExesW( LPWSTR ExeNameBuffer, DWORD ExeNameBufferLength);
typedef struct tagVS_FIXEDFILEINFO {
<field name="dwSignature"><DWORD /></field>
<field name="dwStrucVersion"><DWORD /></field>
<field name="dwFileVersionMS"><DWORD /></field>
<field name="dwFileVersionLS"><DWORD /></field>
<field name="dwProductVersionMS"><DWORD /></field>
<field name="dwProductVersionLS"><DWORD /></field>
<field name="dwFileFlagsMask"><DWORD /></field>
<field name="dwFileFlags"><DWORD /></field>
<field name="dwFileOS"><DWORD /></field>
<field name="dwFileType"><DWORD /></field>
<field name="dwFileSubtype"><DWORD /></field>
<field name="dwFileDateMS"><DWORD /></field>
<field name="dwFileDateLS"><DWORD /></field>
} VS_FIXEDFILEINFO;
DWORD __stdcall VerFindFileA( DWORD uFlags, LPCSTR szFileName, LPCSTR szWinDir, LPCSTR szAppDir, LPSTR szCurDir, PUINT lpuCurDirLen, LPSTR szDestDir, PUINT lpuDestDirLen );
DWORD __stdcall VerFindFileW( DWORD uFlags, LPCWSTR szFileName, LPCWSTR szWinDir, LPCWSTR szAppDir, LPWSTR szCurDir, PUINT lpuCurDirLen, LPWSTR szDestDir, PUINT lpuDestDirLen );
DWORD __stdcall VerInstallFileA( DWORD uFlags, LPCSTR szSrcFileName, LPCSTR szDestFileName, LPCSTR szSrcDir, LPCSTR szDestDir, LPCSTR szCurDir, LPSTR szTmpFile, PUINT lpuTmpFileLen );
DWORD __stdcall VerInstallFileW( DWORD uFlags, LPCWSTR szSrcFileName, LPCWSTR szDestFileName, LPCWSTR szSrcDir, LPCWSTR szDestDir, LPCWSTR szCurDir, LPWSTR szTmpFile, PUINT lpuTmpFileLen );
DWORD __stdcall GetFileVersionInfoSizeA( LPCSTR lptstrFilename, LPDWORD lpdwHandle );
DWORD __stdcall GetFileVersionInfoSizeW( LPCWSTR lptstrFilename, LPDWORD lpdwHandle );
BOOL __stdcall GetFileVersionInfoA( LPCSTR lptstrFilename, DWORD dwHandle, DWORD dwLen, LPVOID lpData );
BOOL __stdcall GetFileVersionInfoW( LPCWSTR lptstrFilename, DWORD dwHandle, DWORD dwLen, LPVOID lpData );
DWORD __stdcall GetFileVersionInfoSizeExA( DWORD dwFlags, LPCSTR lpwstrFilename, LPDWORD lpdwHandle);
DWORD __stdcall GetFileVersionInfoSizeExW( DWORD dwFlags, LPCWSTR lpwstrFilename, LPDWORD lpdwHandle);
BOOL __stdcall GetFileVersionInfoExA( DWORD dwFlags, LPCSTR lpwstrFilename, DWORD dwHandle, DWORD dwLen, LPVOID lpData);
BOOL __stdcall GetFileVersionInfoExW( DWORD dwFlags, LPCWSTR lpwstrFilename, DWORD dwHandle, DWORD dwLen, LPVOID lpData);
DWORD __stdcall VerLanguageNameA( DWORD wLang, LPSTR szLang, DWORD cchLang );
DWORD __stdcall VerLanguageNameW( DWORD wLang, LPWSTR szLang, DWORD cchLang );
BOOL __stdcall VerQueryValueA( LPCVOID pBlock, LPCSTR lpSubBlock, LPVOID * lplpBuffer, PUINT puLen );
BOOL __stdcall VerQueryValueW( LPCVOID pBlock, LPCWSTR lpSubBlock, LPVOID * lplpBuffer, PUINT puLen );
<typedef name="REGSAM"><ACCESS_MASK /></typedef>
struct val_context {
<field name="valuelen"><int32 /></field>
<field name="value_context"><LPVOID /></field>
<field name="val_buff_ptr"><LPVOID /></field>
};
typedef struct val_context *PVALCONTEXT;
typedef struct pvalueA { LPSTR pv_valuename;
<field name="pv_valuelen"><int32 /></field>
<field name="pv_value_context"><LPVOID /></field>
<field name="pv_type"><DWORD /></field>
}PVALUEA, *PPVALUEA;
typedef struct pvalueW { LPWSTR pv_valuename;
<field name="pv_valuelen"><int32 /></field>
<field name="pv_value_context"><LPVOID /></field>
<field name="pv_type"><DWORD /></field>
}PVALUEW, *PPVALUEW;
<typedef name="PVALUE"><PVALUEA /></typedef>
<typedef name="PPVALUE"><PPVALUEA /></typedef>
typedef DWORD __cdecl QUERYHANDLER (LPVOID keycontext, PVALCONTEXT val_list, DWORD num_vals, LPVOID outputbuffer, DWORD *total_outlen, DWORD input_blen);
<typedef name="PQUERYHANDLER"><ptr><QUERYHANDLER /></ptr></typedef>
typedef struct provider_info {
<field name="pi_R0_1val"><PQUERYHANDLER /></field>
<field name="pi_R0_allvals"><PQUERYHANDLER /></field>
<field name="pi_R3_1val"><PQUERYHANDLER /></field>
<field name="pi_R3_allvals"><PQUERYHANDLER /></field>
<field name="pi_flags"><DWORD /></field>
<field name="pi_key_context"><LPVOID /></field>
}REG_PROVIDER;
typedef struct provider_info *PPROVIDER;
typedef struct value_entA {
<field name="ve_valuename"><LPSTR /></field>
<field name="ve_valuelen"><DWORD /></field>
<field name="ve_valueptr"><DWORD_PTR /></field>
<field name="ve_type"><DWORD /></field>
}VALENTA, *PVALENTA;
typedef struct value_entW {
<field name="ve_valuename"><LPWSTR /></field>
<field name="ve_valuelen"><DWORD /></field>
<field name="ve_valueptr"><DWORD_PTR /></field>
<field name="ve_type"><DWORD /></field>
}VALENTW, *PVALENTW;
<typedef name="VALENT"><VALENTA /></typedef>
<typedef name="PVALENT"><PVALENTA /></typedef>
<typedef name="LSTATUS"><LONG /></typedef>

LSTATUS __stdcall RegCloseKey(HKEY hKey );

LSTATUS __stdcall RegOverridePredefKey(HKEY hKey, HKEY hNewHKey );

LSTATUS __stdcall RegOpenUserClassesRoot( HANDLE hToken, DWORD dwOptions, REGSAM samDesired, PHKEY phkResult );

LSTATUS __stdcall RegOpenCurrentUser( REGSAM samDesired, PHKEY phkResult );

LSTATUS __stdcall RegDisablePredefinedCache( void );

LSTATUS __stdcall RegDisablePredefinedCacheEx( void );

LSTATUS __stdcall RegConnectRegistryA(LPCSTR lpMachineName, HKEY hKey, PHKEY phkResult );

LSTATUS __stdcall RegConnectRegistryW(LPCWSTR lpMachineName, HKEY hKey, PHKEY phkResult );

LSTATUS __stdcall RegConnectRegistryExA(LPCSTR lpMachineName, HKEY hKey, ULONG Flags, PHKEY phkResult );

LSTATUS __stdcall RegConnectRegistryExW(LPCWSTR lpMachineName, HKEY hKey, ULONG Flags, PHKEY phkResult );

LSTATUS __stdcall RegCreateKeyA(HKEY hKey, LPCSTR lpSubKey, PHKEY phkResult );

LSTATUS __stdcall RegCreateKeyW(HKEY hKey, LPCWSTR lpSubKey, PHKEY phkResult );

LSTATUS __stdcall RegCreateKeyExA(HKEY hKey, LPCSTR lpSubKey, DWORD Reserved, LPSTR lpClass, DWORD dwOptions, REGSAM samDesired, const LPSECURITY_ATTRIBUTES lpSecurityAttributes, PHKEY phkResult, LPDWORD lpdwDisposition );

LSTATUS __stdcall RegCreateKeyExW(HKEY hKey, LPCWSTR lpSubKey, DWORD Reserved, LPWSTR lpClass, DWORD dwOptions, REGSAM samDesired, const LPSECURITY_ATTRIBUTES lpSecurityAttributes, PHKEY phkResult, LPDWORD lpdwDisposition );

LSTATUS __stdcall RegCreateKeyTransactedA(HKEY hKey, LPCSTR lpSubKey, DWORD Reserved, LPSTR lpClass, DWORD dwOptions, REGSAM samDesired, const LPSECURITY_ATTRIBUTES lpSecurityAttributes, PHKEY phkResult, LPDWORD lpdwDisposition, HANDLE hTransaction, PVOID pExtendedParemeter );

LSTATUS __stdcall RegCreateKeyTransactedW(HKEY hKey, LPCWSTR lpSubKey, DWORD Reserved, LPWSTR lpClass, DWORD dwOptions, REGSAM samDesired, const LPSECURITY_ATTRIBUTES lpSecurityAttributes, PHKEY phkResult, LPDWORD lpdwDisposition, HANDLE hTransaction, PVOID pExtendedParemeter );

LSTATUS __stdcall RegDeleteKeyA(HKEY hKey, LPCSTR lpSubKey );

LSTATUS __stdcall RegDeleteKeyW(HKEY hKey, LPCWSTR lpSubKey );

LSTATUS __stdcall RegDeleteKeyExA(HKEY hKey, LPCSTR lpSubKey, REGSAM samDesired, DWORD Reserved );

LSTATUS __stdcall RegDeleteKeyExW(HKEY hKey, LPCWSTR lpSubKey, REGSAM samDesired, DWORD Reserved );

LSTATUS __stdcall RegDeleteKeyTransactedA(HKEY hKey, LPCSTR lpSubKey, REGSAM samDesired, DWORD Reserved, HANDLE hTransaction, PVOID pExtendedParameter );

LSTATUS __stdcall RegDeleteKeyTransactedW(HKEY hKey, LPCWSTR lpSubKey, REGSAM samDesired, DWORD Reserved, HANDLE hTransaction, PVOID pExtendedParameter );

LONG __stdcall RegDisableReflectionKey(HKEY hBase );

LONG __stdcall RegEnableReflectionKey(HKEY hBase );

LONG __stdcall RegQueryReflectionKey(HKEY hBase, BOOL *bIsReflectionDisabled );

LSTATUS __stdcall RegDeleteValueA(HKEY hKey, LPCSTR lpValueName );

LSTATUS __stdcall RegDeleteValueW(HKEY hKey, LPCWSTR lpValueName );

LSTATUS __stdcall RegEnumKeyA(HKEY hKey, DWORD dwIndex, LPSTR lpName, DWORD cchName );

LSTATUS __stdcall RegEnumKeyW(HKEY hKey, DWORD dwIndex, LPWSTR lpName, DWORD cchName );

LSTATUS __stdcall RegEnumKeyExA(HKEY hKey, DWORD dwIndex, LPSTR lpName, LPDWORD lpcchName, LPDWORD lpReserved, LPSTR lpClass, LPDWORD lpcchClass, PFILETIME lpftLastWriteTime );

LSTATUS __stdcall RegEnumKeyExW(HKEY hKey, DWORD dwIndex, LPWSTR lpName, LPDWORD lpcchName, LPDWORD lpReserved, LPWSTR lpClass, LPDWORD lpcchClass, PFILETIME lpftLastWriteTime );

LSTATUS __stdcall RegEnumValueA(HKEY hKey, DWORD dwIndex, LPSTR lpValueName, LPDWORD lpcchValueName, LPDWORD lpReserved, LPDWORD lpType, LPBYTE lpData, LPDWORD lpcbData );

LSTATUS __stdcall RegEnumValueW(HKEY hKey, DWORD dwIndex, LPWSTR lpValueName, LPDWORD lpcchValueName, LPDWORD lpReserved, LPDWORD lpType, LPBYTE lpData, LPDWORD lpcbData );

LSTATUS __stdcall RegFlushKey(HKEY hKey );

LSTATUS __stdcall RegGetKeySecurity(HKEY hKey, SECURITY_INFORMATION SecurityInformation, PSECURITY_DESCRIPTOR pSecurityDescriptor, LPDWORD lpcbSecurityDescriptor );

LSTATUS __stdcall RegLoadKeyA(HKEY hKey, LPCSTR lpSubKey, LPCSTR lpFile );

LSTATUS __stdcall RegLoadKeyW(HKEY hKey, LPCWSTR lpSubKey, LPCWSTR lpFile );

LSTATUS __stdcall RegNotifyChangeKeyValue(HKEY hKey, BOOL bWatchSubtree, DWORD dwNotifyFilter, HANDLE hEvent, BOOL fAsynchronous );

LSTATUS __stdcall RegOpenKeyA(HKEY hKey, LPCSTR lpSubKey, PHKEY phkResult );

LSTATUS __stdcall RegOpenKeyW(HKEY hKey, LPCWSTR lpSubKey, PHKEY phkResult );

LSTATUS __stdcall RegOpenKeyExA(HKEY hKey, LPCSTR lpSubKey, DWORD ulOptions, REGSAM samDesired, PHKEY phkResult );

LSTATUS __stdcall RegOpenKeyExW(HKEY hKey, LPCWSTR lpSubKey, DWORD ulOptions, REGSAM samDesired, PHKEY phkResult );

LSTATUS __stdcall RegOpenKeyTransactedA(HKEY hKey, LPCSTR lpSubKey, DWORD ulOptions, REGSAM samDesired, PHKEY phkResult, HANDLE hTransaction, PVOID pExtendedParemeter );

LSTATUS __stdcall RegOpenKeyTransactedW(HKEY hKey, LPCWSTR lpSubKey, DWORD ulOptions, REGSAM samDesired, PHKEY phkResult, HANDLE hTransaction, PVOID pExtendedParemeter );

LSTATUS __stdcall RegQueryInfoKeyA(HKEY hKey, LPSTR lpClass, LPDWORD lpcchClass, LPDWORD lpReserved, LPDWORD lpcSubKeys, LPDWORD lpcbMaxSubKeyLen, LPDWORD lpcbMaxClassLen, LPDWORD lpcValues, LPDWORD lpcbMaxValueNameLen, LPDWORD lpcbMaxValueLen, LPDWORD lpcbSecurityDescriptor, PFILETIME lpftLastWriteTime );

LSTATUS __stdcall RegQueryInfoKeyW(HKEY hKey, LPWSTR lpClass, LPDWORD lpcchClass, LPDWORD lpReserved, LPDWORD lpcSubKeys, LPDWORD lpcbMaxSubKeyLen, LPDWORD lpcbMaxClassLen, LPDWORD lpcValues, LPDWORD lpcbMaxValueNameLen, LPDWORD lpcbMaxValueLen, LPDWORD lpcbSecurityDescriptor, PFILETIME lpftLastWriteTime );

LSTATUS __stdcall RegQueryValueA(HKEY hKey, LPCSTR lpSubKey, LPSTR lpData, PLONG lpcbData );

LSTATUS __stdcall RegQueryValueW(HKEY hKey, LPCWSTR lpSubKey, LPWSTR lpData, PLONG lpcbData );

LSTATUS __stdcall RegQueryMultipleValuesA(HKEY hKey, PVALENTA val_list, DWORD num_vals, LPSTR lpValueBuf, LPDWORD ldwTotsize );

LSTATUS __stdcall RegQueryMultipleValuesW(HKEY hKey, PVALENTW val_list, DWORD num_vals, LPWSTR lpValueBuf, LPDWORD ldwTotsize );

LSTATUS __stdcall RegQueryValueExA(HKEY hKey, LPCSTR lpValueName, LPDWORD lpReserved, LPDWORD lpType, LPBYTE lpData, LPDWORD lpcbData );

LSTATUS __stdcall RegQueryValueExW(HKEY hKey, LPCWSTR lpValueName, LPDWORD lpReserved, LPDWORD lpType, LPBYTE lpData, LPDWORD lpcbData );

LSTATUS __stdcall RegReplaceKeyA(HKEY hKey, LPCSTR lpSubKey, LPCSTR lpNewFile, LPCSTR lpOldFile );

LSTATUS __stdcall RegReplaceKeyW(HKEY hKey, LPCWSTR lpSubKey, LPCWSTR lpNewFile, LPCWSTR lpOldFile );

LSTATUS __stdcall RegRestoreKeyA(HKEY hKey, LPCSTR lpFile, DWORD dwFlags );

LSTATUS __stdcall RegRestoreKeyW(HKEY hKey, LPCWSTR lpFile, DWORD dwFlags );

LSTATUS __stdcall RegRenameKey( HKEY hKey, LPCWSTR lpSubKeyName, LPCWSTR lpNewKeyName );

LSTATUS __stdcall RegSaveKeyA(HKEY hKey, LPCSTR lpFile, const LPSECURITY_ATTRIBUTES lpSecurityAttributes );

LSTATUS __stdcall RegSaveKeyW(HKEY hKey, LPCWSTR lpFile, const LPSECURITY_ATTRIBUTES lpSecurityAttributes );

LSTATUS __stdcall RegSetKeySecurity(HKEY hKey, SECURITY_INFORMATION SecurityInformation, PSECURITY_DESCRIPTOR pSecurityDescriptor );

LSTATUS __stdcall RegSetValueA(HKEY hKey, LPCSTR lpSubKey, DWORD dwType, LPCSTR lpData, DWORD cbData );

LSTATUS __stdcall RegSetValueW(HKEY hKey, LPCWSTR lpSubKey, DWORD dwType, LPCWSTR lpData, DWORD cbData );

LSTATUS __stdcall RegSetValueExA(HKEY hKey, LPCSTR lpValueName, DWORD Reserved, DWORD dwType, const BYTE* lpData, DWORD cbData );

LSTATUS __stdcall RegSetValueExW(HKEY hKey, LPCWSTR lpValueName, DWORD Reserved, DWORD dwType, const BYTE* lpData, DWORD cbData );

LSTATUS __stdcall RegUnLoadKeyA(HKEY hKey, LPCSTR lpSubKey );

LSTATUS __stdcall RegUnLoadKeyW(HKEY hKey, LPCWSTR lpSubKey );

LSTATUS __stdcall RegDeleteKeyValueA(HKEY hKey, LPCSTR lpSubKey, LPCSTR lpValueName );

LSTATUS __stdcall RegDeleteKeyValueW(HKEY hKey, LPCWSTR lpSubKey, LPCWSTR lpValueName );

LSTATUS __stdcall RegSetKeyValueA(HKEY hKey, LPCSTR lpSubKey, LPCSTR lpValueName, DWORD dwType, LPCVOID lpData, DWORD cbData );

LSTATUS __stdcall RegSetKeyValueW(HKEY hKey, LPCWSTR lpSubKey, LPCWSTR lpValueName, DWORD dwType, LPCVOID lpData, DWORD cbData );

LSTATUS __stdcall RegDeleteTreeA(HKEY hKey, LPCSTR lpSubKey );

LSTATUS __stdcall RegDeleteTreeW(HKEY hKey, LPCWSTR lpSubKey );

LSTATUS __stdcall RegCopyTreeA(HKEY hKeySrc, LPCSTR lpSubKey, HKEY hKeyDest );

LSTATUS __stdcall RegCopyTreeW(HKEY hKeySrc, LPCWSTR lpSubKey, HKEY hKeyDest );

LSTATUS __stdcall RegGetValueA(HKEY hkey, LPCSTR lpSubKey, LPCSTR lpValue, DWORD dwFlags, LPDWORD pdwType, PVOID pvData, LPDWORD pcbData );

LSTATUS __stdcall RegGetValueW(HKEY hkey, LPCWSTR lpSubKey, LPCWSTR lpValue, DWORD dwFlags, LPDWORD pdwType, PVOID pvData, LPDWORD pcbData );

LSTATUS __stdcall RegLoadMUIStringA(HKEY hKey, LPCSTR pszValue, LPSTR pszOutBuf, DWORD cbOutBuf, LPDWORD pcbData, DWORD Flags, LPCSTR pszDirectory );

LSTATUS __stdcall RegLoadMUIStringW(HKEY hKey, LPCWSTR pszValue, LPWSTR pszOutBuf, DWORD cbOutBuf, LPDWORD pcbData, DWORD Flags, LPCWSTR pszDirectory );

LSTATUS __stdcall RegLoadAppKeyA(LPCSTR lpFile, PHKEY phkResult, REGSAM samDesired, DWORD dwOptions, DWORD Reserved );

LSTATUS __stdcall RegLoadAppKeyW(LPCWSTR lpFile, PHKEY phkResult, REGSAM samDesired, DWORD dwOptions, DWORD Reserved );

BOOL __stdcall InitiateSystemShutdownA( LPSTR lpMachineName, LPSTR lpMessage, DWORD dwTimeout, BOOL bForceAppsClosed, BOOL bRebootAfterShutdown );

BOOL __stdcall InitiateSystemShutdownW( LPWSTR lpMachineName, LPWSTR lpMessage, DWORD dwTimeout, BOOL bForceAppsClosed, BOOL bRebootAfterShutdown );

BOOL __stdcall AbortSystemShutdownA( LPSTR lpMachineName );

BOOL __stdcall AbortSystemShutdownW( LPWSTR lpMachineName );

BOOL __stdcall InitiateSystemShutdownExA( LPSTR lpMachineName, LPSTR lpMessage, DWORD dwTimeout, BOOL bForceAppsClosed, BOOL bRebootAfterShutdown, DWORD dwReason );

BOOL __stdcall InitiateSystemShutdownExW( LPWSTR lpMachineName, LPWSTR lpMessage, DWORD dwTimeout, BOOL bForceAppsClosed, BOOL bRebootAfterShutdown, DWORD dwReason );

DWORD __stdcall InitiateShutdownA( LPSTR lpMachineName, LPSTR lpMessage, DWORD dwGracePeriod, DWORD dwShutdownFlags, DWORD dwReason );

DWORD __stdcall InitiateShutdownW( LPWSTR lpMachineName, LPWSTR lpMessage, DWORD dwGracePeriod, DWORD dwShutdownFlags, DWORD dwReason );

LSTATUS __stdcall RegSaveKeyExA(HKEY hKey, LPCSTR lpFile, const LPSECURITY_ATTRIBUTES lpSecurityAttributes, DWORD Flags );

LSTATUS __stdcall RegSaveKeyExW(HKEY hKey, LPCWSTR lpFile, const LPSECURITY_ATTRIBUTES lpSecurityAttributes, DWORD Flags );
typedef struct _NETRESOURCEA {
<field name="dwScope"><DWORD /></field>
<field name="dwType"><DWORD /></field>
<field name="dwDisplayType"><DWORD /></field>
<field name="dwUsage"><DWORD /></field>
<field name="lpLocalName"><LPSTR /></field>
<field name="lpRemoteName"><LPSTR /></field>
LPSTR lpComment ;
<field name="lpProvider"><LPSTR /></field>
}NETRESOURCEA, *LPNETRESOURCEA;
typedef struct _NETRESOURCEW {
<field name="dwScope"><DWORD /></field>
<field name="dwType"><DWORD /></field>
<field name="dwDisplayType"><DWORD /></field>
<field name="dwUsage"><DWORD /></field>
<field name="lpLocalName"><LPWSTR /></field>
<field name="lpRemoteName"><LPWSTR /></field>
LPWSTR lpComment ;
<field name="lpProvider"><LPWSTR /></field>
}NETRESOURCEW, *LPNETRESOURCEW;
<typedef name="NETRESOURCE"><NETRESOURCEA /></typedef>
<typedef name="LPNETRESOURCE"><LPNETRESOURCEA /></typedef>
DWORD __stdcall WNetAddConnectionA( LPCSTR lpRemoteName, LPCSTR lpPassword, LPCSTR lpLocalName );
DWORD __stdcall WNetAddConnectionW( LPCWSTR lpRemoteName, LPCWSTR lpPassword, LPCWSTR lpLocalName );
DWORD __stdcall WNetAddConnection2A( LPNETRESOURCEA lpNetResource, LPCSTR lpPassword, LPCSTR lpUserName, DWORD dwFlags );
DWORD __stdcall WNetAddConnection2W( LPNETRESOURCEW lpNetResource, LPCWSTR lpPassword, LPCWSTR lpUserName, DWORD dwFlags );
DWORD __stdcall WNetAddConnection3A( HWND hwndOwner, LPNETRESOURCEA lpNetResource, LPCSTR lpPassword, LPCSTR lpUserName, DWORD dwFlags );
DWORD __stdcall WNetAddConnection3W( HWND hwndOwner, LPNETRESOURCEW lpNetResource, LPCWSTR lpPassword, LPCWSTR lpUserName, DWORD dwFlags );
DWORD __stdcall WNetCancelConnectionA( LPCSTR lpName, BOOL fForce );
DWORD __stdcall WNetCancelConnectionW( LPCWSTR lpName, BOOL fForce );
DWORD __stdcall WNetCancelConnection2A( LPCSTR lpName, DWORD dwFlags, BOOL fForce );
DWORD __stdcall WNetCancelConnection2W( LPCWSTR lpName, DWORD dwFlags, BOOL fForce );
DWORD __stdcall WNetGetConnectionA( LPCSTR lpLocalName, LPSTR lpRemoteName, LPDWORD lpnLength );
DWORD __stdcall WNetGetConnectionW( LPCWSTR lpLocalName, LPWSTR lpRemoteName, LPDWORD lpnLength );
DWORD __stdcall WNetRestoreSingleConnectionW( HWND hwndParent, LPCWSTR lpDevice, BOOL fUseUI );
DWORD __stdcall WNetUseConnectionA( HWND hwndOwner, LPNETRESOURCEA lpNetResource, LPCSTR lpPassword, LPCSTR lpUserId, DWORD dwFlags, LPSTR lpAccessName, LPDWORD lpBufferSize, LPDWORD lpResult );
DWORD __stdcall WNetUseConnectionW( HWND hwndOwner, LPNETRESOURCEW lpNetResource, LPCWSTR lpPassword, LPCWSTR lpUserId, DWORD dwFlags, LPWSTR lpAccessName, LPDWORD lpBufferSize, LPDWORD lpResult );
DWORD __stdcall WNetConnectionDialog( HWND hwnd, DWORD dwType );
DWORD __stdcall WNetDisconnectDialog( HWND hwnd, DWORD dwType );
typedef struct _CONNECTDLGSTRUCTA{
<field name="cbStructure"><DWORD /></field>
<field name="hwndOwner"><HWND /></field>
<field name="lpConnRes"><LPNETRESOURCEA /></field>
<field name="dwFlags"><DWORD /></field>
<field name="dwDevNum"><DWORD /></field>
} CONNECTDLGSTRUCTA, *LPCONNECTDLGSTRUCTA;
typedef struct _CONNECTDLGSTRUCTW{
<field name="cbStructure"><DWORD /></field>
<field name="hwndOwner"><HWND /></field>
<field name="lpConnRes"><LPNETRESOURCEW /></field>
<field name="dwFlags"><DWORD /></field>
<field name="dwDevNum"><DWORD /></field>
} CONNECTDLGSTRUCTW, *LPCONNECTDLGSTRUCTW;
<typedef name="CONNECTDLGSTRUCT"><CONNECTDLGSTRUCTA /></typedef>
<typedef name="LPCONNECTDLGSTRUCT"><LPCONNECTDLGSTRUCTA /></typedef>
DWORD __stdcall WNetConnectionDialog1A( LPCONNECTDLGSTRUCTA lpConnDlgStruct );
DWORD __stdcall WNetConnectionDialog1W( LPCONNECTDLGSTRUCTW lpConnDlgStruct );
typedef struct _DISCDLGSTRUCTA{
<field name="cbStructure"><DWORD /></field>
<field name="hwndOwner"><HWND /></field>
<field name="lpLocalName"><LPSTR /></field>
<field name="lpRemoteName"><LPSTR /></field>
<field name="dwFlags"><DWORD /></field>
} DISCDLGSTRUCTA, *LPDISCDLGSTRUCTA;
typedef struct _DISCDLGSTRUCTW{
<field name="cbStructure"><DWORD /></field>
<field name="hwndOwner"><HWND /></field>
<field name="lpLocalName"><LPWSTR /></field>
<field name="lpRemoteName"><LPWSTR /></field>
<field name="dwFlags"><DWORD /></field>
} DISCDLGSTRUCTW, *LPDISCDLGSTRUCTW;
<typedef name="DISCDLGSTRUCT"><DISCDLGSTRUCTA /></typedef>
<typedef name="LPDISCDLGSTRUCT"><LPDISCDLGSTRUCTA /></typedef>
DWORD __stdcall WNetDisconnectDialog1A( LPDISCDLGSTRUCTA lpConnDlgStruct );
DWORD __stdcall WNetDisconnectDialog1W( LPDISCDLGSTRUCTW lpConnDlgStruct );
DWORD __stdcall WNetOpenEnumA( DWORD dwScope, DWORD dwType, DWORD dwUsage, LPNETRESOURCEA lpNetResource, LPHANDLE lphEnum );
DWORD __stdcall WNetOpenEnumW( DWORD dwScope, DWORD dwType, DWORD dwUsage, LPNETRESOURCEW lpNetResource, LPHANDLE lphEnum );
DWORD __stdcall WNetEnumResourceA( HANDLE hEnum, LPDWORD lpcCount, LPVOID lpBuffer, LPDWORD lpBufferSize );
DWORD __stdcall WNetEnumResourceW( HANDLE hEnum, LPDWORD lpcCount, LPVOID lpBuffer, LPDWORD lpBufferSize );
DWORD __stdcall WNetCloseEnum( HANDLE hEnum );
DWORD __stdcall WNetGetResourceParentA( LPNETRESOURCEA lpNetResource, LPVOID lpBuffer, LPDWORD lpcbBuffer );
DWORD __stdcall WNetGetResourceParentW( LPNETRESOURCEW lpNetResource, LPVOID lpBuffer, LPDWORD lpcbBuffer );
DWORD __stdcall WNetGetResourceInformationA( LPNETRESOURCEA lpNetResource, LPVOID lpBuffer, LPDWORD lpcbBuffer, LPSTR *lplpSystem );
DWORD __stdcall WNetGetResourceInformationW( LPNETRESOURCEW lpNetResource, LPVOID lpBuffer, LPDWORD lpcbBuffer, LPWSTR *lplpSystem );
typedef struct _UNIVERSAL_NAME_INFOA {
<field name="lpUniversalName"><LPSTR /></field>
}UNIVERSAL_NAME_INFOA, *LPUNIVERSAL_NAME_INFOA;
typedef struct _UNIVERSAL_NAME_INFOW {
<field name="lpUniversalName"><LPWSTR /></field>
}UNIVERSAL_NAME_INFOW, *LPUNIVERSAL_NAME_INFOW;
<typedef name="UNIVERSAL_NAME_INFO"><UNIVERSAL_NAME_INFOA /></typedef>
<typedef name="LPUNIVERSAL_NAME_INFO"><LPUNIVERSAL_NAME_INFOA /></typedef>
typedef struct _REMOTE_NAME_INFOA {
<field name="lpUniversalName"><LPSTR /></field>
<field name="lpConnectionName"><LPSTR /></field>
<field name="lpRemainingPath"><LPSTR /></field>
}REMOTE_NAME_INFOA, *LPREMOTE_NAME_INFOA;
typedef struct _REMOTE_NAME_INFOW {
<field name="lpUniversalName"><LPWSTR /></field>
<field name="lpConnectionName"><LPWSTR /></field>
<field name="lpRemainingPath"><LPWSTR /></field>
}REMOTE_NAME_INFOW, *LPREMOTE_NAME_INFOW;
<typedef name="REMOTE_NAME_INFO"><REMOTE_NAME_INFOA /></typedef>
<typedef name="LPREMOTE_NAME_INFO"><LPREMOTE_NAME_INFOA /></typedef>
DWORD __stdcall WNetGetUniversalNameA( LPCSTR lpLocalPath, DWORD dwInfoLevel, LPVOID lpBuffer, LPDWORD lpBufferSize );
DWORD __stdcall WNetGetUniversalNameW( LPCWSTR lpLocalPath, DWORD dwInfoLevel, LPVOID lpBuffer, LPDWORD lpBufferSize );
DWORD __stdcall WNetGetUserA( LPCSTR lpName, LPSTR lpUserName, LPDWORD lpnLength );
DWORD __stdcall WNetGetUserW( LPCWSTR lpName, LPWSTR lpUserName, LPDWORD lpnLength );
DWORD __stdcall WNetGetProviderNameA( DWORD dwNetType, LPSTR lpProviderName, LPDWORD lpBufferSize );
DWORD __stdcall WNetGetProviderNameW( DWORD dwNetType, LPWSTR lpProviderName, LPDWORD lpBufferSize );
typedef struct _NETINFOSTRUCT{
<field name="cbStructure"><DWORD /></field>
<field name="dwProviderVersion"><DWORD /></field>
<field name="dwStatus"><DWORD /></field>
<field name="dwCharacteristics"><DWORD /></field>
<field name="dwHandle"><ULONG_PTR /></field>
<field name="wNetType"><WORD /></field>
<field name="dwPrinters"><DWORD /></field>
<field name="dwDrives"><DWORD /></field>
} NETINFOSTRUCT, *LPNETINFOSTRUCT;
DWORD __stdcall WNetGetNetworkInformationA( LPCSTR lpProvider, LPNETINFOSTRUCT lpNetInfoStruct );
DWORD __stdcall WNetGetNetworkInformationW( LPCWSTR lpProvider, LPNETINFOSTRUCT lpNetInfoStruct );
DWORD __stdcall WNetGetLastErrorA( LPDWORD lpError, LPSTR lpErrorBuf, DWORD nErrorBufSize, LPSTR lpNameBuf, DWORD nNameBufSize );
DWORD __stdcall WNetGetLastErrorW( LPDWORD lpError, LPWSTR lpErrorBuf, DWORD nErrorBufSize, LPWSTR lpNameBuf, DWORD nNameBufSize );
typedef struct _NETCONNECTINFOSTRUCT{
<field name="cbStructure"><DWORD /></field>
<field name="dwFlags"><DWORD /></field>
<field name="dwSpeed"><DWORD /></field>
<field name="dwDelay"><DWORD /></field>
<field name="dwOptDataSize"><DWORD /></field>
} NETCONNECTINFOSTRUCT, *LPNETCONNECTINFOSTRUCT;
DWORD __stdcall MultinetGetConnectionPerformanceA( LPNETRESOURCEA lpNetResource, LPNETCONNECTINFOSTRUCT lpNetConnectInfoStruct );
DWORD __stdcall MultinetGetConnectionPerformanceW( LPNETRESOURCEW lpNetResource, LPNETCONNECTINFOSTRUCT lpNetConnectInfoStruct );
typedef struct {
uint16 bAppReturnCode:8, reserved:6, fBusy:1, fAck:1;
} DDEACK;
typedef struct {
uint16 reserved:14, fDeferUpd:1, fAckReq:1;
<field name="cfFormat"><short /></field>
} DDEADVISE;
typedef struct {
uint16 unused:12, fResponse:1, fRelease:1, reserved:1, fAckReq:1;
<field name="cfFormat"><short /></field>
<field name="Value"><arr length="1"><BYTE /></arr></field>
} DDEDATA;
typedef struct {
uint16 unused:13, fRelease:1, fReserved:2;
<field name="cfFormat"><short /></field>
<field name="Value"><arr length="1"><BYTE /></arr></field>
} DDEPOKE;
typedef struct {
uint16 unused:13, fRelease:1, fDeferUpd:1, fAckReq:1;
<field name="cfFormat"><short /></field>
} DDELN;
typedef struct {
uint16 unused:12, fAck:1, fRelease:1, fReserved:1, fAckReq:1;
<field name="cfFormat"><short /></field>
<field name="rgb"><arr length="1"><BYTE /></arr></field>
} DDEUP;
BOOL __stdcall DdeSetQualityOfService( HWND hwndClient, const SECURITY_QUALITY_OF_SERVICE *pqosNew, PSECURITY_QUALITY_OF_SERVICE pqosPrev);
BOOL __stdcall ImpersonateDdeClientWindow( HWND hWndClient, HWND hWndServer);
LPARAM __stdcall PackDDElParam(UINT msg, UINT_PTR uiLo, UINT_PTR uiHi);
BOOL __stdcall UnpackDDElParam(UINT msg, LPARAM lParam, PUINT_PTR puiLo, PUINT_PTR puiHi);
BOOL __stdcall FreeDDElParam(UINT msg, LPARAM lParam);
LPARAM __stdcall ReuseDDElParam(LPARAM lParam, UINT msgIn, UINT msgOut, UINT_PTR uiLo, UINT_PTR uiHi);
struct HCONVLIST__{int32 unused;
;
typedef struct HCONVLIST__ *HCONVLIST;
struct HCONV__{int32 unused;
;
typedef struct HCONV__ *HCONV;
struct HSZ__{int32 unused;
;
typedef struct HSZ__ *HSZ;
struct HDDEDATA__{int32 unused;
;
typedef struct HDDEDATA__ *HDDEDATA;
typedef struct tagHSZPAIR {
<field name="hszSvc"><HSZ /></field>
<field name="hszTopic"><HSZ /></field>
} HSZPAIR, *PHSZPAIR;
typedef struct tagCONVCONTEXT {
<field name="cb"><UINT /></field>
<field name="wFlags"><UINT /></field>
<field name="wCountryID"><UINT /></field>
<field name="iCodePage"><int32 /></field>
<field name="dwLangID"><DWORD /></field>
<field name="dwSecurity"><DWORD /></field>
<field name="qos"><SECURITY_QUALITY_OF_SERVICE /></field>
} CONVCONTEXT, *PCONVCONTEXT;
typedef struct tagCONVINFO {
<field name="cb"><DWORD /></field>
<field name="hUser"><DWORD_PTR /></field>
<field name="hConvPartner"><HCONV /></field>
<field name="hszSvcPartner"><HSZ /></field>
<field name="hszServiceReq"><HSZ /></field>
<field name="hszTopic"><HSZ /></field>
<field name="hszItem"><HSZ /></field>
<field name="wFmt"><UINT /></field>
<field name="wType"><UINT /></field>
<field name="wStatus"><UINT /></field>
<field name="wConvst"><UINT /></field>
<field name="wLastError"><UINT /></field>
<field name="hConvList"><HCONVLIST /></field>
<field name="ConvCtxt"><CONVCONTEXT /></field>
<field name="hwnd"><HWND /></field>
<field name="hwndPartner"><HWND /></field>
} CONVINFO, *PCONVINFO;
typedef HDDEDATA __stdcall FNCALLBACK(UINT wType, UINT wFmt, HCONV hConv, HSZ hsz1, HSZ hsz2, HDDEDATA hData, ULONG_PTR dwData1, ULONG_PTR dwData2);
typedef HDDEDATA (__stdcall *PFNCALLBACK)(UINT wType, UINT wFmt, HCONV hConv, HSZ hsz1, HSZ hsz2, HDDEDATA hData, ULONG_PTR dwData1, ULONG_PTR dwData2);
UINT __stdcall DdeInitializeA( LPDWORD pidInst, PFNCALLBACK pfnCallback, DWORD afCmd, DWORD ulRes);
UINT __stdcall DdeInitializeW( LPDWORD pidInst, PFNCALLBACK pfnCallback, DWORD afCmd, DWORD ulRes);
BOOL __stdcall DdeUninitialize( DWORD idInst);
HCONVLIST __stdcall DdeConnectList( DWORD idInst, HSZ hszService, HSZ hszTopic, HCONVLIST hConvList, PCONVCONTEXT pCC);
HCONV __stdcall DdeQueryNextServer( HCONVLIST hConvList, HCONV hConvPrev);
BOOL __stdcall DdeDisconnectList( HCONVLIST hConvList);
HCONV __stdcall DdeConnect( DWORD idInst, HSZ hszService, HSZ hszTopic, PCONVCONTEXT pCC);
BOOL __stdcall DdeDisconnect( HCONV hConv);
HCONV __stdcall DdeReconnect( HCONV hConv);
UINT __stdcall DdeQueryConvInfo( HCONV hConv, DWORD idTransaction, PCONVINFO pConvInfo);
BOOL __stdcall DdeSetUserHandle( HCONV hConv, DWORD id, DWORD_PTR hUser);
BOOL __stdcall DdeAbandonTransaction( DWORD idInst, HCONV hConv, DWORD idTransaction);
BOOL __stdcall DdePostAdvise( DWORD idInst, HSZ hszTopic, HSZ hszItem);
BOOL __stdcall DdeEnableCallback( DWORD idInst, HCONV hConv, UINT wCmd);
BOOL __stdcall DdeImpersonateClient( HCONV hConv);
HDDEDATA __stdcall DdeNameService( DWORD idInst, HSZ hsz1, HSZ hsz2, UINT afCmd);
HDDEDATA __stdcall DdeClientTransaction( LPBYTE pData, DWORD cbData, HCONV hConv, HSZ hszItem, UINT wFmt, UINT wType, DWORD dwTimeout, LPDWORD pdwResult);
HDDEDATA __stdcall DdeCreateDataHandle( DWORD idInst, LPBYTE pSrc, DWORD cb, DWORD cbOff, HSZ hszItem, UINT wFmt, UINT afCmd);
HDDEDATA __stdcall DdeAddData( HDDEDATA hData, LPBYTE pSrc, DWORD cb, DWORD cbOff);
DWORD __stdcall DdeGetData( HDDEDATA hData, LPBYTE pDst, DWORD cbMax, DWORD cbOff);
LPBYTE __stdcall DdeAccessData( HDDEDATA hData, LPDWORD pcbDataSize);
BOOL __stdcall DdeUnaccessData( HDDEDATA hData);
BOOL __stdcall DdeFreeDataHandle( HDDEDATA hData);
UINT __stdcall DdeGetLastError( DWORD idInst);
HSZ __stdcall DdeCreateStringHandleA( DWORD idInst, LPCSTR psz, int32 iCodePage);
HSZ __stdcall DdeCreateStringHandleW( DWORD idInst, LPCWSTR psz, int32 iCodePage);
DWORD __stdcall DdeQueryStringA( DWORD idInst, HSZ hsz, LPSTR psz, DWORD cchMax, int32 iCodePage);
DWORD __stdcall DdeQueryStringW( DWORD idInst, HSZ hsz, LPWSTR psz, DWORD cchMax, int32 iCodePage);
BOOL __stdcall DdeFreeStringHandle( DWORD idInst, HSZ hsz);
BOOL __stdcall DdeKeepStringHandle( DWORD idInst, HSZ hsz);
int32 __stdcall DdeCmpStringHandles( HSZ hsz1, HSZ hsz2);
typedef struct tagDDEML_MSG_HOOK_DATA { UINT_PTR uiLo;
<field name="uiHi"><UINT_PTR /></field>
<field name="cbData"><DWORD /></field>
<field name="Data"><arr length="8"><DWORD /></arr></field>
} DDEML_MSG_HOOK_DATA, *PDDEML_MSG_HOOK_DATA;
typedef struct tagMONMSGSTRUCT {
<field name="cb"><UINT /></field>
<field name="hwndTo"><HWND /></field>
<field name="dwTime"><DWORD /></field>
<field name="hTask"><HANDLE /></field>
<field name="wMsg"><UINT /></field>
<field name="wParam"><WPARAM /></field>
<field name="lParam"><LPARAM /></field>
<field name="dmhd"><DDEML_MSG_HOOK_DATA /></field>
} MONMSGSTRUCT, *PMONMSGSTRUCT;
typedef struct tagMONCBSTRUCT {
<field name="cb"><UINT /></field>
<field name="dwTime"><DWORD /></field>
<field name="hTask"><HANDLE /></field>
<field name="dwRet"><DWORD /></field>
<field name="wType"><UINT /></field>
<field name="wFmt"><UINT /></field>
<field name="hConv"><HCONV /></field>
<field name="hsz1"><HSZ /></field>
<field name="hsz2"><HSZ /></field>
<field name="hData"><HDDEDATA /></field>
<field name="dwData1"><ULONG_PTR /></field>
<field name="dwData2"><ULONG_PTR /></field>
<field name="cc"><CONVCONTEXT /></field>
<field name="cbData"><DWORD /></field>
<field name="Data"><arr length="8"><DWORD /></arr></field>
} MONCBSTRUCT, *PMONCBSTRUCT;
typedef struct tagMONHSZSTRUCTA {
<field name="cb"><UINT /></field>
<field name="fsAction"><BOOL /></field>
<field name="dwTime"><DWORD /></field>
<field name="hsz"><HSZ /></field>
<field name="hTask"><HANDLE /></field>
<field name="str"><arr length="1"><CHAR /></arr></field>
} MONHSZSTRUCTA, *PMONHSZSTRUCTA;
typedef struct tagMONHSZSTRUCTW {
<field name="cb"><UINT /></field>
<field name="fsAction"><BOOL /></field>
<field name="dwTime"><DWORD /></field>
<field name="hsz"><HSZ /></field>
<field name="hTask"><HANDLE /></field>
<field name="str"><arr length="1"><WCHAR /></arr></field>
} MONHSZSTRUCTW, *PMONHSZSTRUCTW;
<typedef name="MONHSZSTRUCT"><MONHSZSTRUCTA /></typedef>
<typedef name="PMONHSZSTRUCT"><PMONHSZSTRUCTA /></typedef>
typedef struct tagMONERRSTRUCT {
<field name="cb"><UINT /></field>
<field name="wLastError"><UINT /></field>
<field name="dwTime"><DWORD /></field>
<field name="hTask"><HANDLE /></field>
} MONERRSTRUCT, *PMONERRSTRUCT;
typedef struct tagMONLINKSTRUCT {
<field name="cb"><UINT /></field>
<field name="dwTime"><DWORD /></field>
<field name="hTask"><HANDLE /></field>
<field name="fEstablished"><BOOL /></field>
<field name="fNoData"><BOOL /></field>
<field name="hszSvc"><HSZ /></field>
<field name="hszTopic"><HSZ /></field>
<field name="hszItem"><HSZ /></field>
<field name="wFmt"><UINT /></field>
<field name="fServer"><BOOL /></field>
<field name="hConvServer"><HCONV /></field>
<field name="hConvClient"><HCONV /></field>
} MONLINKSTRUCT, *PMONLINKSTRUCT;
typedef struct tagMONCONVSTRUCT {
<field name="cb"><UINT /></field>
<field name="fConnect"><BOOL /></field>
<field name="dwTime"><DWORD /></field>
<field name="hTask"><HANDLE /></field>
<field name="hszSvc"><HSZ /></field>
<field name="hszTopic"><HSZ /></field>
<field name="hConvClient"><HCONV /></field>
<field name="hConvServer"><HCONV /></field>
} MONCONVSTRUCT, *PMONCONVSTRUCT;
typedef struct tagCRGB {
<field name="bRed"><BYTE /></field>
<field name="bGreen"><BYTE /></field>
<field name="bBlue"><BYTE /></field>
<field name="bExtra"><BYTE /></field>
} CRGB;
INT __stdcall LZStart( void );
void __stdcall LZDone( void );
LONG __stdcall CopyLZFile( INT hfSource, INT hfDest );
LONG __stdcall LZCopy( INT hfSource, INT hfDest );
INT __stdcall LZInit( INT hfSource );
INT __stdcall GetExpandedNameA( LPSTR lpszSource, LPSTR lpszBuffer );
INT __stdcall GetExpandedNameW( LPWSTR lpszSource, LPWSTR lpszBuffer );
INT __stdcall LZOpenFileA( LPSTR lpFileName, LPOFSTRUCT lpReOpenBuf, WORD wStyle );
INT __stdcall LZOpenFileW( LPWSTR lpFileName, LPOFSTRUCT lpReOpenBuf, WORD wStyle );
LONG __stdcall LZSeek( INT hFile, LONG lOffset, INT iOrigin );
INT __stdcall LZRead( INT hFile, CHAR* lpBuffer, INT cbRead );
void __stdcall LZClose( INT hFile );
<typedef name="MMVERSION"><UINT /></typedef> <typedef name="MMRESULT"><UINT /></typedef> <typedef name="LPUINT"><ptr><UINT /></ptr></typedef>
typedef struct mmtime_tag {
<field name="wType"><UINT /></field>
union {
<field name="ms"><DWORD /></field>
<field name="sample"><DWORD /></field>
<field name="cb"><DWORD /></field>
<field name="ticks"><DWORD /></field>
struct {
<field name="hour"><BYTE /></field>
<field name="min"><BYTE /></field>
<field name="sec"><BYTE /></field>
<field name="frame"><BYTE /></field>
<field name="fps"><BYTE /></field>
<field name="dummy"><BYTE /></field>
<field name="pad"><arr length="2"><BYTE /></arr></field>
} smpte;
struct {
<field name="songptrpos"><DWORD /></field>
} midi;
} u;
} MMTIME, *PMMTIME, *NPMMTIME, *LPMMTIME;
struct HDRVR__{int32 unused;
;
typedef struct HDRVR__ *HDRVR;
typedef struct DRVCONFIGINFOEX {
<field name="dwDCISize"><DWORD /></field>
<field name="lpszDCISectionName"><LPCWSTR /></field>
<field name="lpszDCIAliasName"><LPCWSTR /></field>
<field name="dnDevNode"><DWORD /></field>
} DRVCONFIGINFOEX, *PDRVCONFIGINFOEX, *NPDRVCONFIGINFOEX, *LPDRVCONFIGINFOEX;
typedef struct tagDRVCONFIGINFO {
<field name="dwDCISize"><DWORD /></field>
<field name="lpszDCISectionName"><LPCWSTR /></field>
<field name="lpszDCIAliasName"><LPCWSTR /></field>
} DRVCONFIGINFO, *PDRVCONFIGINFO, *NPDRVCONFIGINFO, *LPDRVCONFIGINFO;
typedef LRESULT (__stdcall* DRIVERPROC)(DWORD_PTR, HDRVR, UINT, LPARAM, LPARAM);
LRESULT __stdcall CloseDriver( HDRVR hDriver, LPARAM lParam1, LPARAM lParam2);
HDRVR __stdcall OpenDriver( LPCWSTR szDriverName, LPCWSTR szSectionName, LPARAM lParam2);
LRESULT __stdcall SendDriverMessage( HDRVR hDriver, UINT message, LPARAM lParam1, LPARAM lParam2);
HMODULE __stdcall DrvGetModuleHandle( HDRVR hDriver);
HMODULE __stdcall GetDriverModuleHandle( HDRVR hDriver);
LRESULT __stdcall DefDriverProc( DWORD_PTR dwDriverIdentifier, HDRVR hdrvr, UINT uMsg, LPARAM lParam1, LPARAM lParam2);
typedef void (__stdcall DRVCALLBACK)(HDRVR hdrvr, UINT uMsg, DWORD_PTR dwUser, DWORD_PTR dw1, DWORD_PTR dw2);
<typedef name="LPDRVCALLBACK"><ptr><DRVCALLBACK /></ptr></typedef>
<typedef name="PDRVCALLBACK"><ptr><DRVCALLBACK /></ptr></typedef>
BOOL __stdcall sndPlaySoundA( LPCSTR pszSound, UINT fuSound);
BOOL __stdcall sndPlaySoundW( LPCWSTR pszSound, UINT fuSound);
BOOL __stdcall PlaySoundA( LPCSTR pszSound, HMODULE hmod, DWORD fdwSound);
BOOL __stdcall PlaySoundW( LPCWSTR pszSound, HMODULE hmod, DWORD fdwSound);
struct HWAVE__{int32 unused;
;
typedef struct HWAVE__ *HWAVE;
struct HWAVEIN__{int32 unused;
;
typedef struct HWAVEIN__ *HWAVEIN;
struct HWAVEOUT__{int32 unused;
;
typedef struct HWAVEOUT__ *HWAVEOUT;
<typedef name="LPHWAVEIN"><ptr><HWAVEIN /></ptr></typedef>
<typedef name="LPHWAVEOUT"><ptr><HWAVEOUT /></ptr></typedef>
<typedef name="WAVECALLBACK"><DRVCALLBACK /></typedef>
<typedef name="LPWAVECALLBACK"><ptr><WAVECALLBACK /></ptr></typedef>
typedef struct wavehdr_tag {
<field name="lpData"><LPSTR /></field>
<field name="dwBufferLength"><DWORD /></field>
<field name="dwBytesRecorded"><DWORD /></field>
<field name="dwUser"><DWORD_PTR /></field>
<field name="dwFlags"><DWORD /></field>
<field name="dwLoops"><DWORD /></field>
struct wavehdr_tag *lpNext;
<field name="reserved"><DWORD_PTR /></field>
} WAVEHDR, *PWAVEHDR, *NPWAVEHDR, *LPWAVEHDR;
typedef struct tagWAVEOUTCAPSA {
<field name="wMid"><WORD /></field>
<field name="wPid"><WORD /></field>
<field name="vDriverVersion"><MMVERSION /></field>
<field name="szPname"><arr length="32"><CHAR /></arr></field>
<field name="dwFormats"><DWORD /></field>
<field name="wChannels"><WORD /></field>
<field name="wReserved1"><WORD /></field>
<field name="dwSupport"><DWORD /></field>
} WAVEOUTCAPSA, *PWAVEOUTCAPSA, *NPWAVEOUTCAPSA, *LPWAVEOUTCAPSA;
typedef struct tagWAVEOUTCAPSW {
<field name="wMid"><WORD /></field>
<field name="wPid"><WORD /></field>
<field name="vDriverVersion"><MMVERSION /></field>
<field name="szPname"><arr length="32"><WCHAR /></arr></field>
<field name="dwFormats"><DWORD /></field>
<field name="wChannels"><WORD /></field>
<field name="wReserved1"><WORD /></field>
<field name="dwSupport"><DWORD /></field>
} WAVEOUTCAPSW, *PWAVEOUTCAPSW, *NPWAVEOUTCAPSW, *LPWAVEOUTCAPSW;
<typedef name="WAVEOUTCAPS"><WAVEOUTCAPSA /></typedef>
<typedef name="PWAVEOUTCAPS"><PWAVEOUTCAPSA /></typedef>
<typedef name="NPWAVEOUTCAPS"><NPWAVEOUTCAPSA /></typedef>
<typedef name="LPWAVEOUTCAPS"><LPWAVEOUTCAPSA /></typedef>
typedef struct tagWAVEOUTCAPS2A {
<field name="wMid"><WORD /></field>
<field name="wPid"><WORD /></field>
<field name="vDriverVersion"><MMVERSION /></field>
<field name="szPname"><arr length="32"><CHAR /></arr></field>
<field name="dwFormats"><DWORD /></field>
<field name="wChannels"><WORD /></field>
<field name="wReserved1"><WORD /></field>
<field name="dwSupport"><DWORD /></field>
<field name="ManufacturerGuid"><GUID /></field>
<field name="ProductGuid"><GUID /></field>
<field name="NameGuid"><GUID /></field>
} WAVEOUTCAPS2A, *PWAVEOUTCAPS2A, *NPWAVEOUTCAPS2A, *LPWAVEOUTCAPS2A;
typedef struct tagWAVEOUTCAPS2W {
<field name="wMid"><WORD /></field>
<field name="wPid"><WORD /></field>
<field name="vDriverVersion"><MMVERSION /></field>
<field name="szPname"><arr length="32"><WCHAR /></arr></field>
<field name="dwFormats"><DWORD /></field>
<field name="wChannels"><WORD /></field>
<field name="wReserved1"><WORD /></field>
<field name="dwSupport"><DWORD /></field>
<field name="ManufacturerGuid"><GUID /></field>
<field name="ProductGuid"><GUID /></field>
<field name="NameGuid"><GUID /></field>
} WAVEOUTCAPS2W, *PWAVEOUTCAPS2W, *NPWAVEOUTCAPS2W, *LPWAVEOUTCAPS2W;
<typedef name="WAVEOUTCAPS2"><WAVEOUTCAPS2A /></typedef>
<typedef name="PWAVEOUTCAPS2"><PWAVEOUTCAPS2A /></typedef>
<typedef name="NPWAVEOUTCAPS2"><NPWAVEOUTCAPS2A /></typedef>
<typedef name="LPWAVEOUTCAPS2"><LPWAVEOUTCAPS2A /></typedef>
typedef struct tagWAVEINCAPSA {
<field name="wMid"><WORD /></field>
<field name="wPid"><WORD /></field>
<field name="vDriverVersion"><MMVERSION /></field>
<field name="szPname"><arr length="32"><CHAR /></arr></field>
<field name="dwFormats"><DWORD /></field>
<field name="wChannels"><WORD /></field>
<field name="wReserved1"><WORD /></field>
} WAVEINCAPSA, *PWAVEINCAPSA, *NPWAVEINCAPSA, *LPWAVEINCAPSA;
typedef struct tagWAVEINCAPSW {
<field name="wMid"><WORD /></field>
<field name="wPid"><WORD /></field>
<field name="vDriverVersion"><MMVERSION /></field>
<field name="szPname"><arr length="32"><WCHAR /></arr></field>
<field name="dwFormats"><DWORD /></field>
<field name="wChannels"><WORD /></field>
<field name="wReserved1"><WORD /></field>
} WAVEINCAPSW, *PWAVEINCAPSW, *NPWAVEINCAPSW, *LPWAVEINCAPSW;
<typedef name="WAVEINCAPS"><WAVEINCAPSA /></typedef>
<typedef name="PWAVEINCAPS"><PWAVEINCAPSA /></typedef>
<typedef name="NPWAVEINCAPS"><NPWAVEINCAPSA /></typedef>
<typedef name="LPWAVEINCAPS"><LPWAVEINCAPSA /></typedef>
typedef struct tagWAVEINCAPS2A {
<field name="wMid"><WORD /></field>
<field name="wPid"><WORD /></field>
<field name="vDriverVersion"><MMVERSION /></field>
<field name="szPname"><arr length="32"><CHAR /></arr></field>
<field name="dwFormats"><DWORD /></field>
<field name="wChannels"><WORD /></field>
<field name="wReserved1"><WORD /></field>
<field name="ManufacturerGuid"><GUID /></field>
<field name="ProductGuid"><GUID /></field>
<field name="NameGuid"><GUID /></field>
} WAVEINCAPS2A, *PWAVEINCAPS2A, *NPWAVEINCAPS2A, *LPWAVEINCAPS2A;
typedef struct tagWAVEINCAPS2W {
<field name="wMid"><WORD /></field>
<field name="wPid"><WORD /></field>
<field name="vDriverVersion"><MMVERSION /></field>
<field name="szPname"><arr length="32"><WCHAR /></arr></field>
<field name="dwFormats"><DWORD /></field>
<field name="wChannels"><WORD /></field>
<field name="wReserved1"><WORD /></field>
<field name="ManufacturerGuid"><GUID /></field>
<field name="ProductGuid"><GUID /></field>
<field name="NameGuid"><GUID /></field>
} WAVEINCAPS2W, *PWAVEINCAPS2W, *NPWAVEINCAPS2W, *LPWAVEINCAPS2W;
<typedef name="WAVEINCAPS2"><WAVEINCAPS2A /></typedef>
<typedef name="PWAVEINCAPS2"><PWAVEINCAPS2A /></typedef>
<typedef name="NPWAVEINCAPS2"><NPWAVEINCAPS2A /></typedef>
<typedef name="LPWAVEINCAPS2"><LPWAVEINCAPS2A /></typedef>
typedef struct waveformat_tag {
<field name="wFormatTag"><WORD /></field>
<field name="nChannels"><WORD /></field>
<field name="nSamplesPerSec"><DWORD /></field>
<field name="nAvgBytesPerSec"><DWORD /></field>
<field name="nBlockAlign"><WORD /></field>
} WAVEFORMAT, *PWAVEFORMAT, *NPWAVEFORMAT, *LPWAVEFORMAT;
typedef struct pcmwaveformat_tag {
<field name="wf"><WAVEFORMAT /></field>
<field name="wBitsPerSample"><WORD /></field>
} PCMWAVEFORMAT, *PPCMWAVEFORMAT, *NPPCMWAVEFORMAT, *LPPCMWAVEFORMAT;
typedef struct tWAVEFORMATEX {
<field name="wFormatTag"><WORD /></field>
<field name="nChannels"><WORD /></field>
<field name="nSamplesPerSec"><DWORD /></field>
<field name="nAvgBytesPerSec"><DWORD /></field>
<field name="nBlockAlign"><WORD /></field>
<field name="wBitsPerSample"><WORD /></field>
<field name="cbSize"><WORD /></field>
} WAVEFORMATEX, *PWAVEFORMATEX, *NPWAVEFORMATEX, *LPWAVEFORMATEX;
<typedef name="LPCWAVEFORMATEX"><ptr const="true"><WAVEFORMATEX /></ptr></typedef>
UINT __stdcall waveOutGetNumDevs();
MMRESULT __stdcall waveOutGetDevCapsA( UINT_PTR uDeviceID, LPWAVEOUTCAPSA pwoc, UINT cbwoc);
MMRESULT __stdcall waveOutGetDevCapsW( UINT_PTR uDeviceID, LPWAVEOUTCAPSW pwoc, UINT cbwoc);
MMRESULT __stdcall waveOutGetVolume( HWAVEOUT hwo, LPDWORD pdwVolume);
MMRESULT __stdcall waveOutSetVolume( HWAVEOUT hwo, DWORD dwVolume);
MMRESULT __stdcall waveOutGetErrorTextA( MMRESULT mmrError, LPSTR pszText, UINT cchText);
MMRESULT __stdcall waveOutGetErrorTextW( MMRESULT mmrError, LPWSTR pszText, UINT cchText);
MMRESULT __stdcall waveOutOpen( LPHWAVEOUT phwo, UINT uDeviceID, LPCWAVEFORMATEX pwfx, DWORD_PTR dwCallback, DWORD_PTR dwInstance, DWORD fdwOpen);
MMRESULT __stdcall waveOutClose( HWAVEOUT hwo);
MMRESULT __stdcall waveOutPrepareHeader( HWAVEOUT hwo, LPWAVEHDR pwh, UINT cbwh);
MMRESULT __stdcall waveOutUnprepareHeader( HWAVEOUT hwo, LPWAVEHDR pwh, UINT cbwh);
MMRESULT __stdcall waveOutWrite( HWAVEOUT hwo, LPWAVEHDR pwh, UINT cbwh);
MMRESULT __stdcall waveOutPause( HWAVEOUT hwo);
MMRESULT __stdcall waveOutRestart( HWAVEOUT hwo);
MMRESULT __stdcall waveOutReset( HWAVEOUT hwo);
MMRESULT __stdcall waveOutBreakLoop( HWAVEOUT hwo);
MMRESULT __stdcall waveOutGetPosition( HWAVEOUT hwo, LPMMTIME pmmt, UINT cbmmt);
MMRESULT __stdcall waveOutGetPitch( HWAVEOUT hwo, LPDWORD pdwPitch);
MMRESULT __stdcall waveOutSetPitch( HWAVEOUT hwo, DWORD dwPitch);
MMRESULT __stdcall waveOutGetPlaybackRate( HWAVEOUT hwo, LPDWORD pdwRate);
MMRESULT __stdcall waveOutSetPlaybackRate( HWAVEOUT hwo, DWORD dwRate);
MMRESULT __stdcall waveOutGetID( HWAVEOUT hwo, LPUINT puDeviceID);
MMRESULT __stdcall waveOutMessage( HWAVEOUT hwo, UINT uMsg, DWORD_PTR dw1, DWORD_PTR dw2);
UINT __stdcall waveInGetNumDevs();
MMRESULT __stdcall waveInGetDevCapsA( UINT_PTR uDeviceID, LPWAVEINCAPSA pwic, UINT cbwic);
MMRESULT __stdcall waveInGetDevCapsW( UINT_PTR uDeviceID, LPWAVEINCAPSW pwic, UINT cbwic);
MMRESULT __stdcall waveInGetErrorTextA( MMRESULT mmrError, LPSTR pszText, UINT cchText);
MMRESULT __stdcall waveInGetErrorTextW( MMRESULT mmrError, LPWSTR pszText, UINT cchText);
MMRESULT __stdcall waveInOpen( LPHWAVEIN phwi, UINT uDeviceID, LPCWAVEFORMATEX pwfx, DWORD_PTR dwCallback, DWORD_PTR dwInstance, DWORD fdwOpen);
MMRESULT __stdcall waveInClose( HWAVEIN hwi);
MMRESULT __stdcall waveInPrepareHeader( HWAVEIN hwi, LPWAVEHDR pwh, UINT cbwh);
MMRESULT __stdcall waveInUnprepareHeader( HWAVEIN hwi, LPWAVEHDR pwh, UINT cbwh);
MMRESULT __stdcall waveInAddBuffer( HWAVEIN hwi, LPWAVEHDR pwh, UINT cbwh);
MMRESULT __stdcall waveInStart( HWAVEIN hwi);
MMRESULT __stdcall waveInStop( HWAVEIN hwi);
MMRESULT __stdcall waveInReset( HWAVEIN hwi);
MMRESULT __stdcall waveInGetPosition( HWAVEIN hwi, LPMMTIME pmmt, UINT cbmmt);
MMRESULT __stdcall waveInGetID( HWAVEIN hwi, LPUINT puDeviceID);
MMRESULT __stdcall waveInMessage( HWAVEIN hwi, UINT uMsg, DWORD_PTR dw1, DWORD_PTR dw2);
struct HMIDI__{int32 unused;
;
typedef struct HMIDI__ *HMIDI;
struct HMIDIIN__{int32 unused;
;
typedef struct HMIDIIN__ *HMIDIIN;
struct HMIDIOUT__{int32 unused;
;
typedef struct HMIDIOUT__ *HMIDIOUT;
struct HMIDISTRM__{int32 unused;
;
typedef struct HMIDISTRM__ *HMIDISTRM;
<typedef name="LPHMIDI"><ptr><HMIDI /></ptr></typedef>
<typedef name="LPHMIDIIN"><ptr><HMIDIIN /></ptr></typedef>
<typedef name="LPHMIDIOUT"><ptr><HMIDIOUT /></ptr></typedef>
<typedef name="LPHMIDISTRM"><ptr><HMIDISTRM /></ptr></typedef>
<typedef name="MIDICALLBACK"><DRVCALLBACK /></typedef>
<typedef name="LPMIDICALLBACK"><ptr><MIDICALLBACK /></ptr></typedef>
typedef WORD PATCHARRAY[128];
<typedef name="LPPATCHARRAY"><ptr><WORD /></ptr></typedef>
typedef WORD KEYARRAY[128];
<typedef name="LPKEYARRAY"><ptr><WORD /></ptr></typedef>
typedef struct tagMIDIOUTCAPSA {
<field name="wMid"><WORD /></field>
<field name="wPid"><WORD /></field>
<field name="vDriverVersion"><MMVERSION /></field>
<field name="szPname"><arr length="32"><CHAR /></arr></field>
<field name="wTechnology"><WORD /></field>
<field name="wVoices"><WORD /></field>
<field name="wNotes"><WORD /></field>
<field name="wChannelMask"><WORD /></field>
<field name="dwSupport"><DWORD /></field>
} MIDIOUTCAPSA, *PMIDIOUTCAPSA, *NPMIDIOUTCAPSA, *LPMIDIOUTCAPSA;
typedef struct tagMIDIOUTCAPSW {
<field name="wMid"><WORD /></field>
<field name="wPid"><WORD /></field>
<field name="vDriverVersion"><MMVERSION /></field>
<field name="szPname"><arr length="32"><WCHAR /></arr></field>
<field name="wTechnology"><WORD /></field>
<field name="wVoices"><WORD /></field>
<field name="wNotes"><WORD /></field>
<field name="wChannelMask"><WORD /></field>
<field name="dwSupport"><DWORD /></field>
} MIDIOUTCAPSW, *PMIDIOUTCAPSW, *NPMIDIOUTCAPSW, *LPMIDIOUTCAPSW;
<typedef name="MIDIOUTCAPS"><MIDIOUTCAPSA /></typedef>
<typedef name="PMIDIOUTCAPS"><PMIDIOUTCAPSA /></typedef>
<typedef name="NPMIDIOUTCAPS"><NPMIDIOUTCAPSA /></typedef>
<typedef name="LPMIDIOUTCAPS"><LPMIDIOUTCAPSA /></typedef>
typedef struct tagMIDIOUTCAPS2A {
<field name="wMid"><WORD /></field>
<field name="wPid"><WORD /></field>
<field name="vDriverVersion"><MMVERSION /></field>
<field name="szPname"><arr length="32"><CHAR /></arr></field>
<field name="wTechnology"><WORD /></field>
<field name="wVoices"><WORD /></field>
<field name="wNotes"><WORD /></field>
<field name="wChannelMask"><WORD /></field>
<field name="dwSupport"><DWORD /></field>
<field name="ManufacturerGuid"><GUID /></field>
<field name="ProductGuid"><GUID /></field>
<field name="NameGuid"><GUID /></field>
} MIDIOUTCAPS2A, *PMIDIOUTCAPS2A, *NPMIDIOUTCAPS2A, *LPMIDIOUTCAPS2A;
typedef struct tagMIDIOUTCAPS2W {
<field name="wMid"><WORD /></field>
<field name="wPid"><WORD /></field>
<field name="vDriverVersion"><MMVERSION /></field>
<field name="szPname"><arr length="32"><WCHAR /></arr></field>
<field name="wTechnology"><WORD /></field>
<field name="wVoices"><WORD /></field>
<field name="wNotes"><WORD /></field>
<field name="wChannelMask"><WORD /></field>
<field name="dwSupport"><DWORD /></field>
<field name="ManufacturerGuid"><GUID /></field>
<field name="ProductGuid"><GUID /></field>
<field name="NameGuid"><GUID /></field>
} MIDIOUTCAPS2W, *PMIDIOUTCAPS2W, *NPMIDIOUTCAPS2W, *LPMIDIOUTCAPS2W;
<typedef name="MIDIOUTCAPS2"><MIDIOUTCAPS2A /></typedef>
<typedef name="PMIDIOUTCAPS2"><PMIDIOUTCAPS2A /></typedef>
<typedef name="NPMIDIOUTCAPS2"><NPMIDIOUTCAPS2A /></typedef>
<typedef name="LPMIDIOUTCAPS2"><LPMIDIOUTCAPS2A /></typedef>
typedef struct tagMIDIINCAPSA {
<field name="wMid"><WORD /></field>
<field name="wPid"><WORD /></field>
<field name="vDriverVersion"><MMVERSION /></field>
<field name="szPname"><arr length="32"><CHAR /></arr></field>
<field name="dwSupport"><DWORD /></field>
} MIDIINCAPSA, *PMIDIINCAPSA, *NPMIDIINCAPSA, *LPMIDIINCAPSA;
typedef struct tagMIDIINCAPSW {
<field name="wMid"><WORD /></field>
<field name="wPid"><WORD /></field>
<field name="vDriverVersion"><MMVERSION /></field>
<field name="szPname"><arr length="32"><WCHAR /></arr></field>
<field name="dwSupport"><DWORD /></field>
} MIDIINCAPSW, *PMIDIINCAPSW, *NPMIDIINCAPSW, *LPMIDIINCAPSW;
<typedef name="MIDIINCAPS"><MIDIINCAPSA /></typedef>
<typedef name="PMIDIINCAPS"><PMIDIINCAPSA /></typedef>
<typedef name="NPMIDIINCAPS"><NPMIDIINCAPSA /></typedef>
<typedef name="LPMIDIINCAPS"><LPMIDIINCAPSA /></typedef>
typedef struct tagMIDIINCAPS2A {
<field name="wMid"><WORD /></field>
<field name="wPid"><WORD /></field>
<field name="vDriverVersion"><MMVERSION /></field>
<field name="szPname"><arr length="32"><CHAR /></arr></field>
<field name="dwSupport"><DWORD /></field>
<field name="ManufacturerGuid"><GUID /></field>
<field name="ProductGuid"><GUID /></field>
<field name="NameGuid"><GUID /></field>
} MIDIINCAPS2A, *PMIDIINCAPS2A, *NPMIDIINCAPS2A, *LPMIDIINCAPS2A;
typedef struct tagMIDIINCAPS2W {
<field name="wMid"><WORD /></field>
<field name="wPid"><WORD /></field>
<field name="vDriverVersion"><MMVERSION /></field>
<field name="szPname"><arr length="32"><WCHAR /></arr></field>
<field name="dwSupport"><DWORD /></field>
<field name="ManufacturerGuid"><GUID /></field>
<field name="ProductGuid"><GUID /></field>
<field name="NameGuid"><GUID /></field>
} MIDIINCAPS2W, *PMIDIINCAPS2W, *NPMIDIINCAPS2W, *LPMIDIINCAPS2W;
<typedef name="MIDIINCAPS2"><MIDIINCAPS2A /></typedef>
<typedef name="PMIDIINCAPS2"><PMIDIINCAPS2A /></typedef>
<typedef name="NPMIDIINCAPS2"><NPMIDIINCAPS2A /></typedef>
<typedef name="LPMIDIINCAPS2"><LPMIDIINCAPS2A /></typedef>
typedef struct midihdr_tag {
<field name="lpData"><LPSTR /></field>
<field name="dwBufferLength"><DWORD /></field>
<field name="dwBytesRecorded"><DWORD /></field>
<field name="dwUser"><DWORD_PTR /></field>
<field name="dwFlags"><DWORD /></field>
struct midihdr_tag *lpNext;
<field name="reserved"><DWORD_PTR /></field>
<field name="dwOffset"><DWORD /></field>
<field name="dwReserved"><arr length="8"><DWORD_PTR /></arr></field>
} MIDIHDR, *PMIDIHDR, *NPMIDIHDR, *LPMIDIHDR;
typedef struct midievent_tag {
<field name="dwDeltaTime"><DWORD /></field>
<field name="dwStreamID"><DWORD /></field>
<field name="dwEvent"><DWORD /></field>
<field name="dwParms"><arr length="1"><DWORD /></arr></field>
} MIDIEVENT;
typedef struct midistrmbuffver_tag {
<field name="dwVersion"><DWORD /></field>
<field name="dwMid"><DWORD /></field>
<field name="dwOEMVersion"><DWORD /></field>
} MIDISTRMBUFFVER;
typedef struct midiproptimediv_tag {
<field name="cbStruct"><DWORD /></field>
<field name="dwTimeDiv"><DWORD /></field>
} MIDIPROPTIMEDIV, *LPMIDIPROPTIMEDIV;
typedef struct midiproptempo_tag {
<field name="cbStruct"><DWORD /></field>
<field name="dwTempo"><DWORD /></field>
} MIDIPROPTEMPO, *LPMIDIPROPTEMPO;
UINT __stdcall midiOutGetNumDevs();
MMRESULT __stdcall midiStreamOpen( LPHMIDISTRM phms, LPUINT puDeviceID, DWORD cMidi, DWORD_PTR dwCallback, DWORD_PTR dwInstance, DWORD fdwOpen);
MMRESULT __stdcall midiStreamClose( HMIDISTRM hms);
MMRESULT __stdcall midiStreamProperty( HMIDISTRM hms, LPBYTE lppropdata, DWORD dwProperty);
MMRESULT __stdcall midiStreamPosition( HMIDISTRM hms, LPMMTIME lpmmt, UINT cbmmt);
MMRESULT __stdcall midiStreamOut( HMIDISTRM hms, LPMIDIHDR pmh, UINT cbmh);
MMRESULT __stdcall midiStreamPause( HMIDISTRM hms);
MMRESULT __stdcall midiStreamRestart( HMIDISTRM hms);
MMRESULT __stdcall midiStreamStop( HMIDISTRM hms);
MMRESULT __stdcall midiConnect( HMIDI hmi, HMIDIOUT hmo, LPVOID pReserved);
MMRESULT __stdcall midiDisconnect( HMIDI hmi, HMIDIOUT hmo, LPVOID pReserved);
MMRESULT __stdcall midiOutGetDevCapsA( UINT_PTR uDeviceID, LPMIDIOUTCAPSA pmoc, UINT cbmoc);
MMRESULT __stdcall midiOutGetDevCapsW( UINT_PTR uDeviceID, LPMIDIOUTCAPSW pmoc, UINT cbmoc);
MMRESULT __stdcall midiOutGetVolume( HMIDIOUT hmo, LPDWORD pdwVolume);
MMRESULT __stdcall midiOutSetVolume( HMIDIOUT hmo, DWORD dwVolume);
MMRESULT __stdcall midiOutGetErrorTextA( MMRESULT mmrError, LPSTR pszText, UINT cchText);
MMRESULT __stdcall midiOutGetErrorTextW( MMRESULT mmrError, LPWSTR pszText, UINT cchText);
MMRESULT __stdcall midiOutOpen( LPHMIDIOUT phmo, UINT uDeviceID, DWORD_PTR dwCallback, DWORD_PTR dwInstance, DWORD fdwOpen);
MMRESULT __stdcall midiOutClose( HMIDIOUT hmo);
MMRESULT __stdcall midiOutPrepareHeader( HMIDIOUT hmo, LPMIDIHDR pmh, UINT cbmh);
MMRESULT __stdcall midiOutUnprepareHeader( HMIDIOUT hmo, LPMIDIHDR pmh, UINT cbmh);
MMRESULT __stdcall midiOutShortMsg( HMIDIOUT hmo, DWORD dwMsg);
MMRESULT __stdcall midiOutLongMsg( HMIDIOUT hmo, LPMIDIHDR pmh, UINT cbmh);
MMRESULT __stdcall midiOutReset( HMIDIOUT hmo);
MMRESULT __stdcall midiOutCachePatches( HMIDIOUT hmo, UINT uBank, LPWORD pwpa, UINT fuCache);
MMRESULT __stdcall midiOutCacheDrumPatches( HMIDIOUT hmo, UINT uPatch, LPWORD pwkya, UINT fuCache);
MMRESULT __stdcall midiOutGetID( HMIDIOUT hmo, LPUINT puDeviceID);
MMRESULT __stdcall midiOutMessage( HMIDIOUT hmo, UINT uMsg, DWORD_PTR dw1, DWORD_PTR dw2);
UINT __stdcall midiInGetNumDevs();
MMRESULT __stdcall midiInGetDevCapsA( UINT_PTR uDeviceID, LPMIDIINCAPSA pmic, UINT cbmic);
MMRESULT __stdcall midiInGetDevCapsW( UINT_PTR uDeviceID, LPMIDIINCAPSW pmic, UINT cbmic);
MMRESULT __stdcall midiInGetErrorTextA( MMRESULT mmrError, LPSTR pszText, UINT cchText);
MMRESULT __stdcall midiInGetErrorTextW( MMRESULT mmrError, LPWSTR pszText, UINT cchText);
MMRESULT __stdcall midiInOpen( LPHMIDIIN phmi, UINT uDeviceID, DWORD_PTR dwCallback, DWORD_PTR dwInstance, DWORD fdwOpen);
MMRESULT __stdcall midiInClose( HMIDIIN hmi);
MMRESULT __stdcall midiInPrepareHeader( HMIDIIN hmi, LPMIDIHDR pmh, UINT cbmh);
MMRESULT __stdcall midiInUnprepareHeader( HMIDIIN hmi, LPMIDIHDR pmh, UINT cbmh);
MMRESULT __stdcall midiInAddBuffer( HMIDIIN hmi, LPMIDIHDR pmh, UINT cbmh);
MMRESULT __stdcall midiInStart( HMIDIIN hmi);
MMRESULT __stdcall midiInStop( HMIDIIN hmi);
MMRESULT __stdcall midiInReset( HMIDIIN hmi);
MMRESULT __stdcall midiInGetID( HMIDIIN hmi, LPUINT puDeviceID);
MMRESULT __stdcall midiInMessage( HMIDIIN hmi, UINT uMsg, DWORD_PTR dw1, DWORD_PTR dw2);
typedef struct tagAUXCAPSA {
<field name="wMid"><WORD /></field>
<field name="wPid"><WORD /></field>
<field name="vDriverVersion"><MMVERSION /></field>
<field name="szPname"><arr length="32"><CHAR /></arr></field>
<field name="wTechnology"><WORD /></field>
<field name="wReserved1"><WORD /></field>
<field name="dwSupport"><DWORD /></field>
} AUXCAPSA, *PAUXCAPSA, *NPAUXCAPSA, *LPAUXCAPSA;
typedef struct tagAUXCAPSW {
<field name="wMid"><WORD /></field>
<field name="wPid"><WORD /></field>
<field name="vDriverVersion"><MMVERSION /></field>
<field name="szPname"><arr length="32"><WCHAR /></arr></field>
<field name="wTechnology"><WORD /></field>
<field name="wReserved1"><WORD /></field>
<field name="dwSupport"><DWORD /></field>
} AUXCAPSW, *PAUXCAPSW, *NPAUXCAPSW, *LPAUXCAPSW;
<typedef name="AUXCAPS"><AUXCAPSA /></typedef>
<typedef name="PAUXCAPS"><PAUXCAPSA /></typedef>
<typedef name="NPAUXCAPS"><NPAUXCAPSA /></typedef>
<typedef name="LPAUXCAPS"><LPAUXCAPSA /></typedef>
typedef struct tagAUXCAPS2A {
<field name="wMid"><WORD /></field>
<field name="wPid"><WORD /></field>
<field name="vDriverVersion"><MMVERSION /></field>
<field name="szPname"><arr length="32"><CHAR /></arr></field>
<field name="wTechnology"><WORD /></field>
<field name="wReserved1"><WORD /></field>
<field name="dwSupport"><DWORD /></field>
<field name="ManufacturerGuid"><GUID /></field>
<field name="ProductGuid"><GUID /></field>
<field name="NameGuid"><GUID /></field>
} AUXCAPS2A, *PAUXCAPS2A, *NPAUXCAPS2A, *LPAUXCAPS2A;
typedef struct tagAUXCAPS2W {
<field name="wMid"><WORD /></field>
<field name="wPid"><WORD /></field>
<field name="vDriverVersion"><MMVERSION /></field>
<field name="szPname"><arr length="32"><WCHAR /></arr></field>
<field name="wTechnology"><WORD /></field>
<field name="wReserved1"><WORD /></field>
<field name="dwSupport"><DWORD /></field>
<field name="ManufacturerGuid"><GUID /></field>
<field name="ProductGuid"><GUID /></field>
<field name="NameGuid"><GUID /></field>
} AUXCAPS2W, *PAUXCAPS2W, *NPAUXCAPS2W, *LPAUXCAPS2W;
<typedef name="AUXCAPS2"><AUXCAPS2A /></typedef>
<typedef name="PAUXCAPS2"><PAUXCAPS2A /></typedef>
<typedef name="NPAUXCAPS2"><NPAUXCAPS2A /></typedef>
<typedef name="LPAUXCAPS2"><LPAUXCAPS2A /></typedef>
UINT __stdcall auxGetNumDevs();
MMRESULT __stdcall auxGetDevCapsA( UINT_PTR uDeviceID, LPAUXCAPSA pac, UINT cbac);
MMRESULT __stdcall auxGetDevCapsW( UINT_PTR uDeviceID, LPAUXCAPSW pac, UINT cbac);
MMRESULT __stdcall auxSetVolume( UINT uDeviceID, DWORD dwVolume);
MMRESULT __stdcall auxGetVolume( UINT uDeviceID, LPDWORD pdwVolume);
MMRESULT __stdcall auxOutMessage( UINT uDeviceID, UINT uMsg, DWORD_PTR dw1, DWORD_PTR dw2);
struct HMIXEROBJ__{int32 unused;
;
typedef struct HMIXEROBJ__ *HMIXEROBJ;
<typedef name="LPHMIXEROBJ"><ptr><HMIXEROBJ /></ptr></typedef>
struct HMIXER__{int32 unused;
;
typedef struct HMIXER__ *HMIXER;
<typedef name="LPHMIXER"><ptr><HMIXER /></ptr></typedef>
UINT __stdcall mixerGetNumDevs();
typedef struct tagMIXERCAPSA {
<field name="wMid"><WORD /></field>
<field name="wPid"><WORD /></field>
<field name="vDriverVersion"><MMVERSION /></field>
<field name="szPname"><arr length="32"><CHAR /></arr></field>
<field name="fdwSupport"><DWORD /></field>
<field name="cDestinations"><DWORD /></field>
} MIXERCAPSA, *PMIXERCAPSA, *LPMIXERCAPSA;
typedef struct tagMIXERCAPSW {
<field name="wMid"><WORD /></field>
<field name="wPid"><WORD /></field>
<field name="vDriverVersion"><MMVERSION /></field>
<field name="szPname"><arr length="32"><WCHAR /></arr></field>
<field name="fdwSupport"><DWORD /></field>
<field name="cDestinations"><DWORD /></field>
} MIXERCAPSW, *PMIXERCAPSW, *LPMIXERCAPSW;
<typedef name="MIXERCAPS"><MIXERCAPSA /></typedef>
<typedef name="PMIXERCAPS"><PMIXERCAPSA /></typedef>
<typedef name="LPMIXERCAPS"><LPMIXERCAPSA /></typedef>
typedef struct tagMIXERCAPS2A {
<field name="wMid"><WORD /></field>
<field name="wPid"><WORD /></field>
<field name="vDriverVersion"><MMVERSION /></field>
<field name="szPname"><arr length="32"><CHAR /></arr></field>
<field name="fdwSupport"><DWORD /></field>
<field name="cDestinations"><DWORD /></field>
<field name="ManufacturerGuid"><GUID /></field>
<field name="ProductGuid"><GUID /></field>
<field name="NameGuid"><GUID /></field>
} MIXERCAPS2A, *PMIXERCAPS2A, *LPMIXERCAPS2A;
typedef struct tagMIXERCAPS2W {
<field name="wMid"><WORD /></field>
<field name="wPid"><WORD /></field>
<field name="vDriverVersion"><MMVERSION /></field>
<field name="szPname"><arr length="32"><WCHAR /></arr></field>
<field name="fdwSupport"><DWORD /></field>
<field name="cDestinations"><DWORD /></field>
<field name="ManufacturerGuid"><GUID /></field>
<field name="ProductGuid"><GUID /></field>
<field name="NameGuid"><GUID /></field>
} MIXERCAPS2W, *PMIXERCAPS2W, *LPMIXERCAPS2W;
<typedef name="MIXERCAPS2"><MIXERCAPS2A /></typedef>
<typedef name="PMIXERCAPS2"><PMIXERCAPS2A /></typedef>
<typedef name="LPMIXERCAPS2"><LPMIXERCAPS2A /></typedef>
MMRESULT __stdcall mixerGetDevCapsA( UINT_PTR uMxId, LPMIXERCAPSA pmxcaps, UINT cbmxcaps);
MMRESULT __stdcall mixerGetDevCapsW( UINT_PTR uMxId, LPMIXERCAPSW pmxcaps, UINT cbmxcaps);
MMRESULT __stdcall mixerOpen( LPHMIXER phmx, UINT uMxId, DWORD_PTR dwCallback, DWORD_PTR dwInstance, DWORD fdwOpen);
MMRESULT __stdcall mixerClose( HMIXER hmx);
DWORD __stdcall mixerMessage( HMIXER hmx, UINT uMsg, DWORD_PTR dwParam1, DWORD_PTR dwParam2);
typedef struct tagMIXERLINEA {
<field name="cbStruct"><DWORD /></field>
<field name="dwDestination"><DWORD /></field>
<field name="dwSource"><DWORD /></field>
<field name="dwLineID"><DWORD /></field>
<field name="fdwLine"><DWORD /></field>
<field name="dwUser"><DWORD_PTR /></field>
<field name="dwComponentType"><DWORD /></field>
<field name="cChannels"><DWORD /></field>
<field name="cConnections"><DWORD /></field>
<field name="cControls"><DWORD /></field>
<field name="szShortName"><arr length="16"><CHAR /></arr></field>
<field name="szName"><arr length="64"><CHAR /></arr></field>
struct {
<field name="dwType"><DWORD /></field>
<field name="dwDeviceID"><DWORD /></field>
<field name="wMid"><WORD /></field>
<field name="wPid"><WORD /></field>
<field name="vDriverVersion"><MMVERSION /></field>
<field name="szPname"><arr length="32"><CHAR /></arr></field>
} Target;
} MIXERLINEA, *PMIXERLINEA, *LPMIXERLINEA;
typedef struct tagMIXERLINEW {
<field name="cbStruct"><DWORD /></field>
<field name="dwDestination"><DWORD /></field>
<field name="dwSource"><DWORD /></field>
<field name="dwLineID"><DWORD /></field>
<field name="fdwLine"><DWORD /></field>
<field name="dwUser"><DWORD_PTR /></field>
<field name="dwComponentType"><DWORD /></field>
<field name="cChannels"><DWORD /></field>
<field name="cConnections"><DWORD /></field>
<field name="cControls"><DWORD /></field>
<field name="szShortName"><arr length="16"><WCHAR /></arr></field>
<field name="szName"><arr length="64"><WCHAR /></arr></field>
struct {
<field name="dwType"><DWORD /></field>
<field name="dwDeviceID"><DWORD /></field>
<field name="wMid"><WORD /></field>
<field name="wPid"><WORD /></field>
<field name="vDriverVersion"><MMVERSION /></field>
<field name="szPname"><arr length="32"><WCHAR /></arr></field>
} Target;
} MIXERLINEW, *PMIXERLINEW, *LPMIXERLINEW;
<typedef name="MIXERLINE"><MIXERLINEA /></typedef>
<typedef name="PMIXERLINE"><PMIXERLINEA /></typedef>
<typedef name="LPMIXERLINE"><LPMIXERLINEA /></typedef>
MMRESULT __stdcall mixerGetLineInfoA( HMIXEROBJ hmxobj, LPMIXERLINEA pmxl, DWORD fdwInfo);
MMRESULT __stdcall mixerGetLineInfoW( HMIXEROBJ hmxobj, LPMIXERLINEW pmxl, DWORD fdwInfo);
MMRESULT __stdcall mixerGetID( HMIXEROBJ hmxobj, UINT *puMxId, DWORD fdwId);
typedef struct tagMIXERCONTROLA {
<field name="cbStruct"><DWORD /></field>
<field name="dwControlID"><DWORD /></field>
<field name="dwControlType"><DWORD /></field>
<field name="fdwControl"><DWORD /></field>
<field name="cMultipleItems"><DWORD /></field>
<field name="szShortName"><arr length="16"><CHAR /></arr></field>
<field name="szName"><arr length="64"><CHAR /></arr></field>
union {
struct {
<field name="lMinimum"><LONG /></field>
<field name="lMaximum"><LONG /></field>
} ;
struct {
<field name="dwMinimum"><DWORD /></field>
<field name="dwMaximum"><DWORD /></field>
} ;
<field name="dwReserved"><arr length="6"><DWORD /></arr></field>
} Bounds;
union {
<field name="cSteps"><DWORD /></field>
<field name="cbCustomData"><DWORD /></field>
<field name="dwReserved"><arr length="6"><DWORD /></arr></field>
} Metrics;
} MIXERCONTROLA, *PMIXERCONTROLA, *LPMIXERCONTROLA;
typedef struct tagMIXERCONTROLW {
<field name="cbStruct"><DWORD /></field>
<field name="dwControlID"><DWORD /></field>
<field name="dwControlType"><DWORD /></field>
<field name="fdwControl"><DWORD /></field>
<field name="cMultipleItems"><DWORD /></field>
<field name="szShortName"><arr length="16"><WCHAR /></arr></field>
<field name="szName"><arr length="64"><WCHAR /></arr></field>
union {
struct {
<field name="lMinimum"><LONG /></field>
<field name="lMaximum"><LONG /></field>
} ;
struct {
<field name="dwMinimum"><DWORD /></field>
<field name="dwMaximum"><DWORD /></field>
} ;
<field name="dwReserved"><arr length="6"><DWORD /></arr></field>
} Bounds;
union {
<field name="cSteps"><DWORD /></field>
<field name="cbCustomData"><DWORD /></field>
<field name="dwReserved"><arr length="6"><DWORD /></arr></field>
} Metrics;
} MIXERCONTROLW, *PMIXERCONTROLW, *LPMIXERCONTROLW;
<typedef name="MIXERCONTROL"><MIXERCONTROLA /></typedef>
<typedef name="PMIXERCONTROL"><PMIXERCONTROLA /></typedef>
<typedef name="LPMIXERCONTROL"><LPMIXERCONTROLA /></typedef>
typedef struct tagMIXERLINECONTROLSA {
<field name="cbStruct"><DWORD /></field>
<field name="dwLineID"><DWORD /></field>
union {
<field name="dwControlID"><DWORD /></field>
<field name="dwControlType"><DWORD /></field>
} ;
<field name="cControls"><DWORD /></field>
<field name="cbmxctrl"><DWORD /></field>
<field name="pamxctrl"><LPMIXERCONTROLA /></field>
} MIXERLINECONTROLSA, *PMIXERLINECONTROLSA, *LPMIXERLINECONTROLSA;
typedef struct tagMIXERLINECONTROLSW {
<field name="cbStruct"><DWORD /></field>
<field name="dwLineID"><DWORD /></field>
union {
<field name="dwControlID"><DWORD /></field>
<field name="dwControlType"><DWORD /></field>
} ;
<field name="cControls"><DWORD /></field>
<field name="cbmxctrl"><DWORD /></field>
<field name="pamxctrl"><LPMIXERCONTROLW /></field>
} MIXERLINECONTROLSW, *PMIXERLINECONTROLSW, *LPMIXERLINECONTROLSW;
<typedef name="MIXERLINECONTROLS"><MIXERLINECONTROLSA /></typedef>
<typedef name="PMIXERLINECONTROLS"><PMIXERLINECONTROLSA /></typedef>
<typedef name="LPMIXERLINECONTROLS"><LPMIXERLINECONTROLSA /></typedef>
MMRESULT __stdcall mixerGetLineControlsA( HMIXEROBJ hmxobj, LPMIXERLINECONTROLSA pmxlc, DWORD fdwControls);
MMRESULT __stdcall mixerGetLineControlsW( HMIXEROBJ hmxobj, LPMIXERLINECONTROLSW pmxlc, DWORD fdwControls);
typedef struct tMIXERCONTROLDETAILS {
<field name="cbStruct"><DWORD /></field>
<field name="dwControlID"><DWORD /></field>
<field name="cChannels"><DWORD /></field>
union {
<field name="hwndOwner"><HWND /></field>
<field name="cMultipleItems"><DWORD /></field>
} ;
<field name="cbDetails"><DWORD /></field>
<field name="paDetails"><LPVOID /></field>
} MIXERCONTROLDETAILS, *PMIXERCONTROLDETAILS, *LPMIXERCONTROLDETAILS;
typedef struct tagMIXERCONTROLDETAILS_LISTTEXTA {
<field name="dwParam1"><DWORD /></field>
<field name="dwParam2"><DWORD /></field>
<field name="szName"><arr length="64"><CHAR /></arr></field>
} MIXERCONTROLDETAILS_LISTTEXTA, *PMIXERCONTROLDETAILS_LISTTEXTA, *LPMIXERCONTROLDETAILS_LISTTEXTA;
typedef struct tagMIXERCONTROLDETAILS_LISTTEXTW {
<field name="dwParam1"><DWORD /></field>
<field name="dwParam2"><DWORD /></field>
<field name="szName"><arr length="64"><WCHAR /></arr></field>
} MIXERCONTROLDETAILS_LISTTEXTW, *PMIXERCONTROLDETAILS_LISTTEXTW, *LPMIXERCONTROLDETAILS_LISTTEXTW;
<typedef name="MIXERCONTROLDETAILS_LISTTEXT"><MIXERCONTROLDETAILS_LISTTEXTA /></typedef>
<typedef name="PMIXERCONTROLDETAILS_LISTTEXT"><PMIXERCONTROLDETAILS_LISTTEXTA /></typedef>
<typedef name="LPMIXERCONTROLDETAILS_LISTTEXT"><LPMIXERCONTROLDETAILS_LISTTEXTA /></typedef>
typedef struct tMIXERCONTROLDETAILS_BOOLEAN {
<field name="fValue"><LONG /></field>
} MIXERCONTROLDETAILS_BOOLEAN, *PMIXERCONTROLDETAILS_BOOLEAN, *LPMIXERCONTROLDETAILS_BOOLEAN;
typedef struct tMIXERCONTROLDETAILS_SIGNED {
<field name="lValue"><LONG /></field>
} MIXERCONTROLDETAILS_SIGNED, *PMIXERCONTROLDETAILS_SIGNED, *LPMIXERCONTROLDETAILS_SIGNED;
typedef struct tMIXERCONTROLDETAILS_UNSIGNED {
<field name="dwValue"><DWORD /></field>
} MIXERCONTROLDETAILS_UNSIGNED, *PMIXERCONTROLDETAILS_UNSIGNED, *LPMIXERCONTROLDETAILS_UNSIGNED;
MMRESULT __stdcall mixerGetControlDetailsA( HMIXEROBJ hmxobj, LPMIXERCONTROLDETAILS pmxcd, DWORD fdwDetails);
MMRESULT __stdcall mixerGetControlDetailsW( HMIXEROBJ hmxobj, LPMIXERCONTROLDETAILS pmxcd, DWORD fdwDetails);
MMRESULT __stdcall mixerSetControlDetails( HMIXEROBJ hmxobj, LPMIXERCONTROLDETAILS pmxcd, DWORD fdwDetails);
typedef void (__stdcall TIMECALLBACK)(UINT uTimerID, UINT uMsg, DWORD_PTR dwUser, DWORD_PTR dw1, DWORD_PTR dw2);
<typedef name="LPTIMECALLBACK"><ptr><TIMECALLBACK /></ptr></typedef>
typedef struct timecaps_tag {
<field name="wPeriodMin"><UINT /></field>
<field name="wPeriodMax"><UINT /></field>
} TIMECAPS, *PTIMECAPS, *NPTIMECAPS, *LPTIMECAPS;
MMRESULT __stdcall timeGetSystemTime( LPMMTIME pmmt, UINT cbmmt);
DWORD __stdcall timeGetTime();
MMRESULT __stdcall timeSetEvent( UINT uDelay, UINT uResolution, LPTIMECALLBACK fptc, DWORD_PTR dwUser, UINT fuEvent);
MMRESULT __stdcall timeKillEvent( UINT uTimerID);
MMRESULT __stdcall timeGetDevCaps( LPTIMECAPS ptc, UINT cbtc);
MMRESULT __stdcall timeBeginPeriod( UINT uPeriod);
MMRESULT __stdcall timeEndPeriod( UINT uPeriod);
typedef struct tagJOYCAPSA {
<field name="wMid"><WORD /></field>
<field name="wPid"><WORD /></field>
<field name="szPname"><arr length="32"><CHAR /></arr></field>
<field name="wXmin"><UINT /></field>
<field name="wXmax"><UINT /></field>
<field name="wYmin"><UINT /></field>
<field name="wYmax"><UINT /></field>
<field name="wZmin"><UINT /></field>
<field name="wZmax"><UINT /></field>
<field name="wNumButtons"><UINT /></field>
<field name="wPeriodMin"><UINT /></field>
<field name="wPeriodMax"><UINT /></field>
<field name="wRmin"><UINT /></field>
<field name="wRmax"><UINT /></field>
<field name="wUmin"><UINT /></field>
<field name="wUmax"><UINT /></field>
<field name="wVmin"><UINT /></field>
<field name="wVmax"><UINT /></field>
<field name="wCaps"><UINT /></field>
<field name="wMaxAxes"><UINT /></field>
<field name="wNumAxes"><UINT /></field>
<field name="wMaxButtons"><UINT /></field>
<field name="szRegKey"><arr length="32"><CHAR /></arr></field>
<field name="szOEMVxD"><arr length="260"><CHAR /></arr></field>
} JOYCAPSA, *PJOYCAPSA, *NPJOYCAPSA, *LPJOYCAPSA;
typedef struct tagJOYCAPSW {
<field name="wMid"><WORD /></field>
<field name="wPid"><WORD /></field>
<field name="szPname"><arr length="32"><WCHAR /></arr></field>
<field name="wXmin"><UINT /></field>
<field name="wXmax"><UINT /></field>
<field name="wYmin"><UINT /></field>
<field name="wYmax"><UINT /></field>
<field name="wZmin"><UINT /></field>
<field name="wZmax"><UINT /></field>
<field name="wNumButtons"><UINT /></field>
<field name="wPeriodMin"><UINT /></field>
<field name="wPeriodMax"><UINT /></field>
<field name="wRmin"><UINT /></field>
<field name="wRmax"><UINT /></field>
<field name="wUmin"><UINT /></field>
<field name="wUmax"><UINT /></field>
<field name="wVmin"><UINT /></field>
<field name="wVmax"><UINT /></field>
<field name="wCaps"><UINT /></field>
<field name="wMaxAxes"><UINT /></field>
<field name="wNumAxes"><UINT /></field>
<field name="wMaxButtons"><UINT /></field>
<field name="szRegKey"><arr length="32"><WCHAR /></arr></field>
<field name="szOEMVxD"><arr length="260"><WCHAR /></arr></field>
} JOYCAPSW, *PJOYCAPSW, *NPJOYCAPSW, *LPJOYCAPSW;
<typedef name="JOYCAPS"><JOYCAPSA /></typedef>
<typedef name="PJOYCAPS"><PJOYCAPSA /></typedef>
<typedef name="NPJOYCAPS"><NPJOYCAPSA /></typedef>
<typedef name="LPJOYCAPS"><LPJOYCAPSA /></typedef>
typedef struct tagJOYCAPS2A {
<field name="wMid"><WORD /></field>
<field name="wPid"><WORD /></field>
<field name="szPname"><arr length="32"><CHAR /></arr></field>
<field name="wXmin"><UINT /></field>
<field name="wXmax"><UINT /></field>
<field name="wYmin"><UINT /></field>
<field name="wYmax"><UINT /></field>
<field name="wZmin"><UINT /></field>
<field name="wZmax"><UINT /></field>
<field name="wNumButtons"><UINT /></field>
<field name="wPeriodMin"><UINT /></field>
<field name="wPeriodMax"><UINT /></field>
<field name="wRmin"><UINT /></field>
<field name="wRmax"><UINT /></field>
<field name="wUmin"><UINT /></field>
<field name="wUmax"><UINT /></field>
<field name="wVmin"><UINT /></field>
<field name="wVmax"><UINT /></field>
<field name="wCaps"><UINT /></field>
<field name="wMaxAxes"><UINT /></field>
<field name="wNumAxes"><UINT /></field>
<field name="wMaxButtons"><UINT /></field>
<field name="szRegKey"><arr length="32"><CHAR /></arr></field>
<field name="szOEMVxD"><arr length="260"><CHAR /></arr></field>
<field name="ManufacturerGuid"><GUID /></field>
<field name="ProductGuid"><GUID /></field>
<field name="NameGuid"><GUID /></field>
} JOYCAPS2A, *PJOYCAPS2A, *NPJOYCAPS2A, *LPJOYCAPS2A;
typedef struct tagJOYCAPS2W {
<field name="wMid"><WORD /></field>
<field name="wPid"><WORD /></field>
<field name="szPname"><arr length="32"><WCHAR /></arr></field>
<field name="wXmin"><UINT /></field>
<field name="wXmax"><UINT /></field>
<field name="wYmin"><UINT /></field>
<field name="wYmax"><UINT /></field>
<field name="wZmin"><UINT /></field>
<field name="wZmax"><UINT /></field>
<field name="wNumButtons"><UINT /></field>
<field name="wPeriodMin"><UINT /></field>
<field name="wPeriodMax"><UINT /></field>
<field name="wRmin"><UINT /></field>
<field name="wRmax"><UINT /></field>
<field name="wUmin"><UINT /></field>
<field name="wUmax"><UINT /></field>
<field name="wVmin"><UINT /></field>
<field name="wVmax"><UINT /></field>
<field name="wCaps"><UINT /></field>
<field name="wMaxAxes"><UINT /></field>
<field name="wNumAxes"><UINT /></field>
<field name="wMaxButtons"><UINT /></field>
<field name="szRegKey"><arr length="32"><WCHAR /></arr></field>
<field name="szOEMVxD"><arr length="260"><WCHAR /></arr></field>
<field name="ManufacturerGuid"><GUID /></field>
<field name="ProductGuid"><GUID /></field>
<field name="NameGuid"><GUID /></field>
} JOYCAPS2W, *PJOYCAPS2W, *NPJOYCAPS2W, *LPJOYCAPS2W;
<typedef name="JOYCAPS2"><JOYCAPS2A /></typedef>
<typedef name="PJOYCAPS2"><PJOYCAPS2A /></typedef>
<typedef name="NPJOYCAPS2"><NPJOYCAPS2A /></typedef>
<typedef name="LPJOYCAPS2"><LPJOYCAPS2A /></typedef>
typedef struct joyinfo_tag {
<field name="wXpos"><UINT /></field>
<field name="wYpos"><UINT /></field>
<field name="wZpos"><UINT /></field>
<field name="wButtons"><UINT /></field>
} JOYINFO, *PJOYINFO, *NPJOYINFO, *LPJOYINFO;
typedef struct joyinfoex_tag {
<field name="dwSize"><DWORD /></field>
<field name="dwFlags"><DWORD /></field>
<field name="dwXpos"><DWORD /></field>
<field name="dwYpos"><DWORD /></field>
<field name="dwZpos"><DWORD /></field>
<field name="dwRpos"><DWORD /></field>
<field name="dwUpos"><DWORD /></field>
<field name="dwVpos"><DWORD /></field>
<field name="dwButtons"><DWORD /></field>
<field name="dwButtonNumber"><DWORD /></field>
<field name="dwPOV"><DWORD /></field>
<field name="dwReserved1"><DWORD /></field>
<field name="dwReserved2"><DWORD /></field>
} JOYINFOEX, *PJOYINFOEX, *NPJOYINFOEX, *LPJOYINFOEX;
UINT __stdcall joyGetNumDevs();
MMRESULT __stdcall joyGetDevCapsA( UINT_PTR uJoyID, LPJOYCAPSA pjc, UINT cbjc);
MMRESULT __stdcall joyGetDevCapsW( UINT_PTR uJoyID, LPJOYCAPSW pjc, UINT cbjc);
MMRESULT __stdcall joyGetPos( UINT uJoyID, LPJOYINFO pji);
MMRESULT __stdcall joyGetPosEx( UINT uJoyID, LPJOYINFOEX pji);
MMRESULT __stdcall joyGetThreshold( UINT uJoyID, LPUINT puThreshold);
MMRESULT __stdcall joyReleaseCapture( UINT uJoyID);
MMRESULT __stdcall joySetCapture( HWND hwnd, UINT uJoyID, UINT uPeriod, BOOL fChanged);
MMRESULT __stdcall joySetThreshold( UINT uJoyID, UINT uThreshold);
<typedef name="FOURCC"><DWORD /></typedef> <typedef name="HPSTR"><ptr><char /></ptr></typedef> struct HMMIO__{int32 unused;
;
typedef struct HMMIO__ *HMMIO;
typedef LRESULT (__stdcall MMIOPROC)(LPSTR lpmmioinfo, UINT uMsg, LPARAM lParam1, LPARAM lParam2);
<typedef name="LPMMIOPROC"><ptr><MMIOPROC /></ptr></typedef>
typedef struct _MMIOINFO {
<field name="dwFlags"><DWORD /></field>
<field name="fccIOProc"><FOURCC /></field>
<field name="pIOProc"><LPMMIOPROC /></field>
<field name="wErrorRet"><UINT /></field>
<field name="htask"><HTASK /></field>
<field name="cchBuffer"><LONG /></field>
<field name="pchBuffer"><HPSTR /></field>
<field name="pchNext"><HPSTR /></field>
<field name="pchEndRead"><HPSTR /></field>
<field name="pchEndWrite"><HPSTR /></field>
<field name="lBufOffset"><LONG /></field>
<field name="lDiskOffset"><LONG /></field>
<field name="adwInfo"><arr length="3"><DWORD /></arr></field>
<field name="dwReserved1"><DWORD /></field>
<field name="dwReserved2"><DWORD /></field>
<field name="hmmio"><HMMIO /></field>
} MMIOINFO, *PMMIOINFO, *NPMMIOINFO, *LPMMIOINFO;
<typedef name="LPCMMIOINFO"><ptr const="true"><MMIOINFO /></ptr></typedef>
typedef struct _MMCKINFO {
<field name="ckid"><FOURCC /></field>
<field name="cksize"><DWORD /></field>
<field name="fccType"><FOURCC /></field>
<field name="dwDataOffset"><DWORD /></field>
<field name="dwFlags"><DWORD /></field>
} MMCKINFO, *PMMCKINFO, *NPMMCKINFO, *LPMMCKINFO;
<typedef name="LPCMMCKINFO"><ptr const="true"><MMCKINFO /></ptr></typedef>
FOURCC __stdcall mmioStringToFOURCCA( LPCSTR sz, UINT uFlags);
FOURCC __stdcall mmioStringToFOURCCW( LPCWSTR sz, UINT uFlags);
LPMMIOPROC __stdcall mmioInstallIOProcA( FOURCC fccIOProc, LPMMIOPROC pIOProc, DWORD dwFlags);
LPMMIOPROC __stdcall mmioInstallIOProcW( FOURCC fccIOProc, LPMMIOPROC pIOProc, DWORD dwFlags);
HMMIO __stdcall mmioOpenA( LPSTR pszFileName, LPMMIOINFO pmmioinfo, DWORD fdwOpen);
HMMIO __stdcall mmioOpenW( LPWSTR pszFileName, LPMMIOINFO pmmioinfo, DWORD fdwOpen);
MMRESULT __stdcall mmioRenameA( LPCSTR pszFileName, LPCSTR pszNewFileName, LPCMMIOINFO pmmioinfo, DWORD fdwRename);
MMRESULT __stdcall mmioRenameW( LPCWSTR pszFileName, LPCWSTR pszNewFileName, LPCMMIOINFO pmmioinfo, DWORD fdwRename);
MMRESULT __stdcall mmioClose( HMMIO hmmio, UINT fuClose);
LONG __stdcall mmioRead( HMMIO hmmio, HPSTR pch, LONG cch);
LONG __stdcall mmioWrite( HMMIO hmmio, const char * pch, LONG cch);
LONG __stdcall mmioSeek( HMMIO hmmio, LONG lOffset, int32 iOrigin);
MMRESULT __stdcall mmioGetInfo( HMMIO hmmio, LPMMIOINFO pmmioinfo, UINT fuInfo);
MMRESULT __stdcall mmioSetInfo( HMMIO hmmio, LPCMMIOINFO pmmioinfo, UINT fuInfo);
MMRESULT __stdcall mmioSetBuffer( HMMIO hmmio, LPSTR pchBuffer, LONG cchBuffer, UINT fuBuffer);
MMRESULT __stdcall mmioFlush( HMMIO hmmio, UINT fuFlush);
MMRESULT __stdcall mmioAdvance( HMMIO hmmio, LPMMIOINFO pmmioinfo, UINT fuAdvance);
LRESULT __stdcall mmioSendMessage( HMMIO hmmio, UINT uMsg, LPARAM lParam1, LPARAM lParam2);
MMRESULT __stdcall mmioDescend( HMMIO hmmio, LPMMCKINFO pmmcki, const MMCKINFO * pmmckiParent, UINT fuDescend);
MMRESULT __stdcall mmioAscend( HMMIO hmmio, LPMMCKINFO pmmcki, UINT fuAscend);
MMRESULT __stdcall mmioCreateChunk( HMMIO hmmio, LPMMCKINFO pmmcki, UINT fuCreate);
<typedef name="MCIERROR"><DWORD /></typedef> <typedef name="MCIDEVICEID"><UINT /></typedef> typedef UINT (__stdcall *YIELDPROC)(MCIDEVICEID mciId, DWORD dwYieldData);
MCIERROR __stdcall mciSendCommandA( MCIDEVICEID mciId, UINT uMsg, DWORD_PTR dwParam1, DWORD_PTR dwParam2);
MCIERROR __stdcall mciSendCommandW( MCIDEVICEID mciId, UINT uMsg, DWORD_PTR dwParam1, DWORD_PTR dwParam2);
MCIERROR __stdcall mciSendStringA( LPCSTR lpstrCommand, LPSTR lpstrReturnString, UINT uReturnLength, HWND hwndCallback);
MCIERROR __stdcall mciSendStringW( LPCWSTR lpstrCommand, LPWSTR lpstrReturnString, UINT uReturnLength, HWND hwndCallback);
MCIDEVICEID __stdcall mciGetDeviceIDA( LPCSTR pszDevice);
MCIDEVICEID __stdcall mciGetDeviceIDW( LPCWSTR pszDevice);
MCIDEVICEID __stdcall mciGetDeviceIDFromElementIDA( DWORD dwElementID, LPCSTR lpstrType );
MCIDEVICEID __stdcall mciGetDeviceIDFromElementIDW( DWORD dwElementID, LPCWSTR lpstrType );
BOOL __stdcall mciGetErrorStringA( MCIERROR mcierr, LPSTR pszText, UINT cchText);
BOOL __stdcall mciGetErrorStringW( MCIERROR mcierr, LPWSTR pszText, UINT cchText);
BOOL __stdcall mciSetYieldProc( MCIDEVICEID mciId, YIELDPROC fpYieldProc, DWORD dwYieldData);
HTASK __stdcall mciGetCreatorTask( MCIDEVICEID mciId);
YIELDPROC __stdcall mciGetYieldProc( MCIDEVICEID mciId, LPDWORD pdwYieldData);
typedef struct tagMCI_GENERIC_PARMS {
<field name="dwCallback"><DWORD_PTR /></field>
} MCI_GENERIC_PARMS, *PMCI_GENERIC_PARMS, *LPMCI_GENERIC_PARMS;
typedef struct tagMCI_OPEN_PARMSA {
<field name="dwCallback"><DWORD_PTR /></field>
<field name="wDeviceID"><MCIDEVICEID /></field>
<field name="lpstrDeviceType"><LPCSTR /></field>
<field name="lpstrElementName"><LPCSTR /></field>
<field name="lpstrAlias"><LPCSTR /></field>
} MCI_OPEN_PARMSA, *PMCI_OPEN_PARMSA, *LPMCI_OPEN_PARMSA;
typedef struct tagMCI_OPEN_PARMSW {
<field name="dwCallback"><DWORD_PTR /></field>
<field name="wDeviceID"><MCIDEVICEID /></field>
<field name="lpstrDeviceType"><LPCWSTR /></field>
<field name="lpstrElementName"><LPCWSTR /></field>
<field name="lpstrAlias"><LPCWSTR /></field>
} MCI_OPEN_PARMSW, *PMCI_OPEN_PARMSW, *LPMCI_OPEN_PARMSW;
<typedef name="MCI_OPEN_PARMS"><MCI_OPEN_PARMSA /></typedef>
<typedef name="PMCI_OPEN_PARMS"><PMCI_OPEN_PARMSA /></typedef>
<typedef name="LPMCI_OPEN_PARMS"><LPMCI_OPEN_PARMSA /></typedef>
typedef struct tagMCI_PLAY_PARMS {
<field name="dwCallback"><DWORD_PTR /></field>
<field name="dwFrom"><DWORD /></field>
<field name="dwTo"><DWORD /></field>
} MCI_PLAY_PARMS, *PMCI_PLAY_PARMS, *LPMCI_PLAY_PARMS;
typedef struct tagMCI_SEEK_PARMS {
<field name="dwCallback"><DWORD_PTR /></field>
<field name="dwTo"><DWORD /></field>
} MCI_SEEK_PARMS, *PMCI_SEEK_PARMS, *LPMCI_SEEK_PARMS;
typedef struct tagMCI_STATUS_PARMS {
<field name="dwCallback"><DWORD_PTR /></field>
<field name="dwReturn"><DWORD_PTR /></field>
<field name="dwItem"><DWORD /></field>
<field name="dwTrack"><DWORD /></field>
} MCI_STATUS_PARMS, *PMCI_STATUS_PARMS, * LPMCI_STATUS_PARMS;
typedef struct tagMCI_INFO_PARMSA {
<field name="dwCallback"><DWORD_PTR /></field>
<field name="lpstrReturn"><LPSTR /></field>
<field name="dwRetSize"><DWORD /></field>
} MCI_INFO_PARMSA, * LPMCI_INFO_PARMSA;
typedef struct tagMCI_INFO_PARMSW {
<field name="dwCallback"><DWORD_PTR /></field>
<field name="lpstrReturn"><LPWSTR /></field>
<field name="dwRetSize"><DWORD /></field>
} MCI_INFO_PARMSW, * LPMCI_INFO_PARMSW;
<typedef name="MCI_INFO_PARMS"><MCI_INFO_PARMSA /></typedef>
<typedef name="LPMCI_INFO_PARMS"><LPMCI_INFO_PARMSA /></typedef>
typedef struct tagMCI_GETDEVCAPS_PARMS {
<field name="dwCallback"><DWORD_PTR /></field>
<field name="dwReturn"><DWORD /></field>
<field name="dwItem"><DWORD /></field>
} MCI_GETDEVCAPS_PARMS, *PMCI_GETDEVCAPS_PARMS, * LPMCI_GETDEVCAPS_PARMS;
typedef struct tagMCI_SYSINFO_PARMSA {
<field name="dwCallback"><DWORD_PTR /></field>
<field name="lpstrReturn"><LPSTR /></field>
<field name="dwRetSize"><DWORD /></field>
<field name="dwNumber"><DWORD /></field>
<field name="wDeviceType"><UINT /></field>
} MCI_SYSINFO_PARMSA, *PMCI_SYSINFO_PARMSA, * LPMCI_SYSINFO_PARMSA;
typedef struct tagMCI_SYSINFO_PARMSW {
<field name="dwCallback"><DWORD_PTR /></field>
<field name="lpstrReturn"><LPWSTR /></field>
<field name="dwRetSize"><DWORD /></field>
<field name="dwNumber"><DWORD /></field>
<field name="wDeviceType"><UINT /></field>
} MCI_SYSINFO_PARMSW, *PMCI_SYSINFO_PARMSW, * LPMCI_SYSINFO_PARMSW;
<typedef name="MCI_SYSINFO_PARMS"><MCI_SYSINFO_PARMSA /></typedef>
<typedef name="PMCI_SYSINFO_PARMS"><PMCI_SYSINFO_PARMSA /></typedef>
<typedef name="LPMCI_SYSINFO_PARMS"><LPMCI_SYSINFO_PARMSA /></typedef>
typedef struct tagMCI_SET_PARMS {
<field name="dwCallback"><DWORD_PTR /></field>
<field name="dwTimeFormat"><DWORD /></field>
<field name="dwAudio"><DWORD /></field>
} MCI_SET_PARMS, *PMCI_SET_PARMS, *LPMCI_SET_PARMS;
typedef struct tagMCI_BREAK_PARMS {
<field name="dwCallback"><DWORD_PTR /></field>
<field name="nVirtKey"><int32 /></field>
<field name="hwndBreak"><HWND /></field>
} MCI_BREAK_PARMS, *PMCI_BREAK_PARMS, * LPMCI_BREAK_PARMS;
typedef struct tagMCI_SAVE_PARMSA {
<field name="dwCallback"><DWORD_PTR /></field>
<field name="lpfilename"><LPCSTR /></field>
} MCI_SAVE_PARMSA, *PMCI_SAVE_PARMSA, * LPMCI_SAVE_PARMSA;
typedef struct tagMCI_SAVE_PARMSW {
<field name="dwCallback"><DWORD_PTR /></field>
<field name="lpfilename"><LPCWSTR /></field>
} MCI_SAVE_PARMSW, *PMCI_SAVE_PARMSW, * LPMCI_SAVE_PARMSW;
<typedef name="MCI_SAVE_PARMS"><MCI_SAVE_PARMSA /></typedef>
<typedef name="PMCI_SAVE_PARMS"><PMCI_SAVE_PARMSA /></typedef>
<typedef name="LPMCI_SAVE_PARMS"><LPMCI_SAVE_PARMSA /></typedef>
typedef struct tagMCI_LOAD_PARMSA {
<field name="dwCallback"><DWORD_PTR /></field>
<field name="lpfilename"><LPCSTR /></field>
} MCI_LOAD_PARMSA, *PMCI_LOAD_PARMSA, * LPMCI_LOAD_PARMSA;
typedef struct tagMCI_LOAD_PARMSW {
<field name="dwCallback"><DWORD_PTR /></field>
<field name="lpfilename"><LPCWSTR /></field>
} MCI_LOAD_PARMSW, *PMCI_LOAD_PARMSW, * LPMCI_LOAD_PARMSW;
<typedef name="MCI_LOAD_PARMS"><MCI_LOAD_PARMSA /></typedef>
<typedef name="PMCI_LOAD_PARMS"><PMCI_LOAD_PARMSA /></typedef>
<typedef name="LPMCI_LOAD_PARMS"><LPMCI_LOAD_PARMSA /></typedef>
typedef struct tagMCI_RECORD_PARMS {
<field name="dwCallback"><DWORD_PTR /></field>
<field name="dwFrom"><DWORD /></field>
<field name="dwTo"><DWORD /></field>
} MCI_RECORD_PARMS, *LPMCI_RECORD_PARMS;
typedef struct tagMCI_VD_PLAY_PARMS {
<field name="dwCallback"><DWORD_PTR /></field>
<field name="dwFrom"><DWORD /></field>
<field name="dwTo"><DWORD /></field>
<field name="dwSpeed"><DWORD /></field>
} MCI_VD_PLAY_PARMS, *PMCI_VD_PLAY_PARMS, *LPMCI_VD_PLAY_PARMS;
typedef struct tagMCI_VD_STEP_PARMS {
<field name="dwCallback"><DWORD_PTR /></field>
<field name="dwFrames"><DWORD /></field>
} MCI_VD_STEP_PARMS, *PMCI_VD_STEP_PARMS, *LPMCI_VD_STEP_PARMS;
typedef struct tagMCI_VD_ESCAPE_PARMSA {
<field name="dwCallback"><DWORD_PTR /></field>
<field name="lpstrCommand"><LPCSTR /></field>
} MCI_VD_ESCAPE_PARMSA, *PMCI_VD_ESCAPE_PARMSA, *LPMCI_VD_ESCAPE_PARMSA;
typedef struct tagMCI_VD_ESCAPE_PARMSW {
<field name="dwCallback"><DWORD_PTR /></field>
<field name="lpstrCommand"><LPCWSTR /></field>
} MCI_VD_ESCAPE_PARMSW, *PMCI_VD_ESCAPE_PARMSW, *LPMCI_VD_ESCAPE_PARMSW;
<typedef name="MCI_VD_ESCAPE_PARMS"><MCI_VD_ESCAPE_PARMSA /></typedef>
<typedef name="PMCI_VD_ESCAPE_PARMS"><PMCI_VD_ESCAPE_PARMSA /></typedef>
<typedef name="LPMCI_VD_ESCAPE_PARMS"><LPMCI_VD_ESCAPE_PARMSA /></typedef>
typedef struct tagMCI_WAVE_OPEN_PARMSA {
<field name="dwCallback"><DWORD_PTR /></field>
<field name="wDeviceID"><MCIDEVICEID /></field>
<field name="lpstrDeviceType"><LPCSTR /></field>
<field name="lpstrElementName"><LPCSTR /></field>
<field name="lpstrAlias"><LPCSTR /></field>
<field name="dwBufferSeconds"><DWORD /></field>
} MCI_WAVE_OPEN_PARMSA, *PMCI_WAVE_OPEN_PARMSA, *LPMCI_WAVE_OPEN_PARMSA;
typedef struct tagMCI_WAVE_OPEN_PARMSW {
<field name="dwCallback"><DWORD_PTR /></field>
<field name="wDeviceID"><MCIDEVICEID /></field>
<field name="lpstrDeviceType"><LPCWSTR /></field>
<field name="lpstrElementName"><LPCWSTR /></field>
<field name="lpstrAlias"><LPCWSTR /></field>
<field name="dwBufferSeconds"><DWORD /></field>
} MCI_WAVE_OPEN_PARMSW, *PMCI_WAVE_OPEN_PARMSW, *LPMCI_WAVE_OPEN_PARMSW;
<typedef name="MCI_WAVE_OPEN_PARMS"><MCI_WAVE_OPEN_PARMSA /></typedef>
<typedef name="PMCI_WAVE_OPEN_PARMS"><PMCI_WAVE_OPEN_PARMSA /></typedef>
<typedef name="LPMCI_WAVE_OPEN_PARMS"><LPMCI_WAVE_OPEN_PARMSA /></typedef>
typedef struct tagMCI_WAVE_DELETE_PARMS {
<field name="dwCallback"><DWORD_PTR /></field>
<field name="dwFrom"><DWORD /></field>
<field name="dwTo"><DWORD /></field>
} MCI_WAVE_DELETE_PARMS, *PMCI_WAVE_DELETE_PARMS, *LPMCI_WAVE_DELETE_PARMS;
typedef struct tagMCI_WAVE_SET_PARMS {
<field name="dwCallback"><DWORD_PTR /></field>
<field name="dwTimeFormat"><DWORD /></field>
<field name="dwAudio"><DWORD /></field>
<field name="wInput"><UINT /></field>
<field name="wOutput"><UINT /></field>
<field name="wFormatTag"><WORD /></field>
<field name="wReserved2"><WORD /></field>
<field name="nChannels"><WORD /></field>
<field name="wReserved3"><WORD /></field>
<field name="nSamplesPerSec"><DWORD /></field>
<field name="nAvgBytesPerSec"><DWORD /></field>
<field name="nBlockAlign"><WORD /></field>
<field name="wReserved4"><WORD /></field>
<field name="wBitsPerSample"><WORD /></field>
<field name="wReserved5"><WORD /></field>
} MCI_WAVE_SET_PARMS, *PMCI_WAVE_SET_PARMS, * LPMCI_WAVE_SET_PARMS;
typedef struct tagMCI_SEQ_SET_PARMS {
<field name="dwCallback"><DWORD_PTR /></field>
<field name="dwTimeFormat"><DWORD /></field>
<field name="dwAudio"><DWORD /></field>
<field name="dwTempo"><DWORD /></field>
<field name="dwPort"><DWORD /></field>
<field name="dwSlave"><DWORD /></field>
<field name="dwMaster"><DWORD /></field>
<field name="dwOffset"><DWORD /></field>
} MCI_SEQ_SET_PARMS, *PMCI_SEQ_SET_PARMS, * LPMCI_SEQ_SET_PARMS;
typedef struct tagMCI_ANIM_OPEN_PARMSA {
<field name="dwCallback"><DWORD_PTR /></field>
<field name="wDeviceID"><MCIDEVICEID /></field>
<field name="lpstrDeviceType"><LPCSTR /></field>
<field name="lpstrElementName"><LPCSTR /></field>
<field name="lpstrAlias"><LPCSTR /></field>
<field name="dwStyle"><DWORD /></field>
<field name="hWndParent"><HWND /></field>
} MCI_ANIM_OPEN_PARMSA, *PMCI_ANIM_OPEN_PARMSA, *LPMCI_ANIM_OPEN_PARMSA;
typedef struct tagMCI_ANIM_OPEN_PARMSW {
<field name="dwCallback"><DWORD_PTR /></field>
<field name="wDeviceID"><MCIDEVICEID /></field>
<field name="lpstrDeviceType"><LPCWSTR /></field>
<field name="lpstrElementName"><LPCWSTR /></field>
<field name="lpstrAlias"><LPCWSTR /></field>
<field name="dwStyle"><DWORD /></field>
<field name="hWndParent"><HWND /></field>
} MCI_ANIM_OPEN_PARMSW, *PMCI_ANIM_OPEN_PARMSW, *LPMCI_ANIM_OPEN_PARMSW;
<typedef name="MCI_ANIM_OPEN_PARMS"><MCI_ANIM_OPEN_PARMSA /></typedef>
<typedef name="PMCI_ANIM_OPEN_PARMS"><PMCI_ANIM_OPEN_PARMSA /></typedef>
<typedef name="LPMCI_ANIM_OPEN_PARMS"><LPMCI_ANIM_OPEN_PARMSA /></typedef>
typedef struct tagMCI_ANIM_PLAY_PARMS {
<field name="dwCallback"><DWORD_PTR /></field>
<field name="dwFrom"><DWORD /></field>
<field name="dwTo"><DWORD /></field>
<field name="dwSpeed"><DWORD /></field>
} MCI_ANIM_PLAY_PARMS, *PMCI_ANIM_PLAY_PARMS, *LPMCI_ANIM_PLAY_PARMS;
typedef struct tagMCI_ANIM_STEP_PARMS {
<field name="dwCallback"><DWORD_PTR /></field>
<field name="dwFrames"><DWORD /></field>
} MCI_ANIM_STEP_PARMS, *PMCI_ANIM_STEP_PARMS, *LPMCI_ANIM_STEP_PARMS;
typedef struct tagMCI_ANIM_WINDOW_PARMSA {
<field name="dwCallback"><DWORD_PTR /></field>
<field name="hWnd"><HWND /></field>
<field name="nCmdShow"><UINT /></field>
<field name="lpstrText"><LPCSTR /></field>
} MCI_ANIM_WINDOW_PARMSA, *PMCI_ANIM_WINDOW_PARMSA, * LPMCI_ANIM_WINDOW_PARMSA;
typedef struct tagMCI_ANIM_WINDOW_PARMSW {
<field name="dwCallback"><DWORD_PTR /></field>
<field name="hWnd"><HWND /></field>
<field name="nCmdShow"><UINT /></field>
<field name="lpstrText"><LPCWSTR /></field>
} MCI_ANIM_WINDOW_PARMSW, *PMCI_ANIM_WINDOW_PARMSW, * LPMCI_ANIM_WINDOW_PARMSW;
<typedef name="MCI_ANIM_WINDOW_PARMS"><MCI_ANIM_WINDOW_PARMSA /></typedef>
<typedef name="PMCI_ANIM_WINDOW_PARMS"><PMCI_ANIM_WINDOW_PARMSA /></typedef>
<typedef name="LPMCI_ANIM_WINDOW_PARMS"><LPMCI_ANIM_WINDOW_PARMSA /></typedef>
typedef struct tagMCI_ANIM_RECT_PARMS {
<field name="dwCallback"><DWORD_PTR /></field>
<field name="rc"><RECT /></field>
} MCI_ANIM_RECT_PARMS;
<typedef name="PMCI_ANIM_RECT_PARMS"><ptr><MCI_ANIM_RECT_PARMS /></ptr></typedef>
<typedef name="LPMCI_ANIM_RECT_PARMS"><ptr><MCI_ANIM_RECT_PARMS /></ptr></typedef>
typedef struct tagMCI_ANIM_UPDATE_PARMS {
<field name="dwCallback"><DWORD_PTR /></field>
<field name="rc"><RECT /></field>
<field name="hDC"><HDC /></field>
} MCI_ANIM_UPDATE_PARMS, *PMCI_ANIM_UPDATE_PARMS, * LPMCI_ANIM_UPDATE_PARMS;
typedef struct tagMCI_OVLY_OPEN_PARMSA {
<field name="dwCallback"><DWORD_PTR /></field>
<field name="wDeviceID"><MCIDEVICEID /></field>
<field name="lpstrDeviceType"><LPCSTR /></field>
<field name="lpstrElementName"><LPCSTR /></field>
<field name="lpstrAlias"><LPCSTR /></field>
<field name="dwStyle"><DWORD /></field>
<field name="hWndParent"><HWND /></field>
} MCI_OVLY_OPEN_PARMSA, *PMCI_OVLY_OPEN_PARMSA, *LPMCI_OVLY_OPEN_PARMSA;
typedef struct tagMCI_OVLY_OPEN_PARMSW {
<field name="dwCallback"><DWORD_PTR /></field>
<field name="wDeviceID"><MCIDEVICEID /></field>
<field name="lpstrDeviceType"><LPCWSTR /></field>
<field name="lpstrElementName"><LPCWSTR /></field>
<field name="lpstrAlias"><LPCWSTR /></field>
<field name="dwStyle"><DWORD /></field>
<field name="hWndParent"><HWND /></field>
} MCI_OVLY_OPEN_PARMSW, *PMCI_OVLY_OPEN_PARMSW, *LPMCI_OVLY_OPEN_PARMSW;
<typedef name="MCI_OVLY_OPEN_PARMS"><MCI_OVLY_OPEN_PARMSA /></typedef>
<typedef name="PMCI_OVLY_OPEN_PARMS"><PMCI_OVLY_OPEN_PARMSA /></typedef>
<typedef name="LPMCI_OVLY_OPEN_PARMS"><LPMCI_OVLY_OPEN_PARMSA /></typedef>
typedef struct tagMCI_OVLY_WINDOW_PARMSA {
<field name="dwCallback"><DWORD_PTR /></field>
<field name="hWnd"><HWND /></field>
<field name="nCmdShow"><UINT /></field>
<field name="lpstrText"><LPCSTR /></field>
} MCI_OVLY_WINDOW_PARMSA, *PMCI_OVLY_WINDOW_PARMSA, * LPMCI_OVLY_WINDOW_PARMSA;
typedef struct tagMCI_OVLY_WINDOW_PARMSW {
<field name="dwCallback"><DWORD_PTR /></field>
<field name="hWnd"><HWND /></field>
<field name="nCmdShow"><UINT /></field>
<field name="lpstrText"><LPCWSTR /></field>
} MCI_OVLY_WINDOW_PARMSW, *PMCI_OVLY_WINDOW_PARMSW, * LPMCI_OVLY_WINDOW_PARMSW;
<typedef name="MCI_OVLY_WINDOW_PARMS"><MCI_OVLY_WINDOW_PARMSA /></typedef>
<typedef name="PMCI_OVLY_WINDOW_PARMS"><PMCI_OVLY_WINDOW_PARMSA /></typedef>
<typedef name="LPMCI_OVLY_WINDOW_PARMS"><LPMCI_OVLY_WINDOW_PARMSA /></typedef>
typedef struct tagMCI_OVLY_RECT_PARMS {
<field name="dwCallback"><DWORD_PTR /></field>
<field name="rc"><RECT /></field>
} MCI_OVLY_RECT_PARMS, *PMCI_OVLY_RECT_PARMS, * LPMCI_OVLY_RECT_PARMS;
typedef struct tagMCI_OVLY_SAVE_PARMSA {
<field name="dwCallback"><DWORD_PTR /></field>
<field name="lpfilename"><LPCSTR /></field>
<field name="rc"><RECT /></field>
} MCI_OVLY_SAVE_PARMSA, *PMCI_OVLY_SAVE_PARMSA, * LPMCI_OVLY_SAVE_PARMSA;
typedef struct tagMCI_OVLY_SAVE_PARMSW {
<field name="dwCallback"><DWORD_PTR /></field>
<field name="lpfilename"><LPCWSTR /></field>
<field name="rc"><RECT /></field>
} MCI_OVLY_SAVE_PARMSW, *PMCI_OVLY_SAVE_PARMSW, * LPMCI_OVLY_SAVE_PARMSW;
<typedef name="MCI_OVLY_SAVE_PARMS"><MCI_OVLY_SAVE_PARMSA /></typedef>
<typedef name="PMCI_OVLY_SAVE_PARMS"><PMCI_OVLY_SAVE_PARMSA /></typedef>
<typedef name="LPMCI_OVLY_SAVE_PARMS"><LPMCI_OVLY_SAVE_PARMSA /></typedef>
typedef struct tagMCI_OVLY_LOAD_PARMSA {
<field name="dwCallback"><DWORD_PTR /></field>
<field name="lpfilename"><LPCSTR /></field>
<field name="rc"><RECT /></field>
} MCI_OVLY_LOAD_PARMSA, *PMCI_OVLY_LOAD_PARMSA, * LPMCI_OVLY_LOAD_PARMSA;
typedef struct tagMCI_OVLY_LOAD_PARMSW {
<field name="dwCallback"><DWORD_PTR /></field>
<field name="lpfilename"><LPCWSTR /></field>
<field name="rc"><RECT /></field>
} MCI_OVLY_LOAD_PARMSW, *PMCI_OVLY_LOAD_PARMSW, * LPMCI_OVLY_LOAD_PARMSW;
<typedef name="MCI_OVLY_LOAD_PARMS"><MCI_OVLY_LOAD_PARMSA /></typedef>
<typedef name="PMCI_OVLY_LOAD_PARMS"><PMCI_OVLY_LOAD_PARMSA /></typedef>
<typedef name="LPMCI_OVLY_LOAD_PARMS"><LPMCI_OVLY_LOAD_PARMSA /></typedef>
typedef struct _NCB {
<field name="ncb_command"><UCHAR /></field>
<field name="ncb_retcode"><UCHAR /></field>
<field name="ncb_lsn"><UCHAR /></field>
<field name="ncb_num"><UCHAR /></field>
<field name="ncb_buffer"><PUCHAR /></field>
<field name="ncb_length"><WORD /></field>
<field name="ncb_callname"><arr length="16"><UCHAR /></arr></field>
<field name="ncb_name"><arr length="16"><UCHAR /></arr></field>
<field name="ncb_rto"><UCHAR /></field>
<field name="ncb_sto"><UCHAR /></field>
void (__stdcall *ncb_post)( struct _NCB * );
<field name="ncb_lana_num"><UCHAR /></field>
<field name="ncb_cmd_cplt"><UCHAR /></field>
<field name="ncb_reserve"><arr length="10"><UCHAR /></arr></field>
<field name="ncb_event"><HANDLE /></field>
} NCB, *PNCB;
typedef struct _ADAPTER_STATUS {
<field name="adapter_address"><arr length="6"><UCHAR /></arr></field>
<field name="rev_major"><UCHAR /></field>
<field name="reserved0"><UCHAR /></field>
<field name="adapter_type"><UCHAR /></field>
<field name="rev_minor"><UCHAR /></field>
<field name="duration"><WORD /></field>
<field name="frmr_recv"><WORD /></field>
<field name="frmr_xmit"><WORD /></field>
<field name="iframe_recv_err"><WORD /></field>
<field name="xmit_aborts"><WORD /></field>
<field name="xmit_success"><DWORD /></field>
<field name="recv_success"><DWORD /></field>
<field name="iframe_xmit_err"><WORD /></field>
<field name="recv_buff_unavail"><WORD /></field>
<field name="t1_timeouts"><WORD /></field>
<field name="ti_timeouts"><WORD /></field>
<field name="reserved1"><DWORD /></field>
<field name="free_ncbs"><WORD /></field>
<field name="max_cfg_ncbs"><WORD /></field>
<field name="max_ncbs"><WORD /></field>
<field name="xmit_buf_unavail"><WORD /></field>
<field name="max_dgram_size"><WORD /></field>
<field name="pending_sess"><WORD /></field>
<field name="max_cfg_sess"><WORD /></field>
<field name="max_sess"><WORD /></field>
<field name="max_sess_pkt_size"><WORD /></field>
<field name="name_count"><WORD /></field>
} ADAPTER_STATUS, *PADAPTER_STATUS;
typedef struct _NAME_BUFFER {
<field name="name"><arr length="16"><UCHAR /></arr></field>
<field name="name_num"><UCHAR /></field>
<field name="name_flags"><UCHAR /></field>
} NAME_BUFFER, *PNAME_BUFFER;
typedef struct _SESSION_HEADER {
<field name="sess_name"><UCHAR /></field>
<field name="num_sess"><UCHAR /></field>
<field name="rcv_dg_outstanding"><UCHAR /></field>
<field name="rcv_any_outstanding"><UCHAR /></field>
} SESSION_HEADER, *PSESSION_HEADER;
typedef struct _SESSION_BUFFER {
<field name="lsn"><UCHAR /></field>
<field name="state"><UCHAR /></field>
<field name="local_name"><arr length="16"><UCHAR /></arr></field>
<field name="remote_name"><arr length="16"><UCHAR /></arr></field>
<field name="rcvs_outstanding"><UCHAR /></field>
<field name="sends_outstanding"><UCHAR /></field>
} SESSION_BUFFER, *PSESSION_BUFFER;
typedef struct _LANA_ENUM {
<field name="length"><UCHAR /></field>
<field name="lana"><arr length="254+1"><UCHAR /></arr></field>
} LANA_ENUM, *PLANA_ENUM;
typedef struct _FIND_NAME_HEADER {
<field name="node_count"><WORD /></field>
<field name="reserved"><UCHAR /></field>
<field name="unique_group"><UCHAR /></field>
} FIND_NAME_HEADER, *PFIND_NAME_HEADER;
typedef struct _FIND_NAME_BUFFER {
<field name="length"><UCHAR /></field>
<field name="access_control"><UCHAR /></field>
<field name="frame_control"><UCHAR /></field>
<field name="destination_addr"><arr length="6"><UCHAR /></arr></field>
<field name="source_addr"><arr length="6"><UCHAR /></arr></field>
<field name="routing_info"><arr length="18"><UCHAR /></arr></field>
} FIND_NAME_BUFFER, *PFIND_NAME_BUFFER;
typedef struct _ACTION_HEADER {
<field name="transport_id"><ULONG /></field>
<field name="action_code"><USHORT /></field>
<field name="reserved"><USHORT /></field>
} ACTION_HEADER, *PACTION_HEADER;
UCHAR __stdcall Netbios( PNCB pncb );
<typedef name="I_RPC_HANDLE"><ptr><void /></ptr></typedef>
<typedef name="RPC_STATUS"><long /></typedef>
<typedef name="RPC_CSTR"><ptr><byte /></ptr></typedef>
<typedef name="RPC_WSTR"><ptr><uint16 /></ptr></typedef>
<typedef name="RPC_CWSTR"><ptr const="true"><uint16 /></ptr></typedef>
<typedef name="RPC_BINDING_HANDLE"><I_RPC_HANDLE /></typedef>
<typedef name="handle_t"><RPC_BINDING_HANDLE /></typedef>
<typedef name="UUID"><GUID /></typedef>
typedef struct _RPC_BINDING_VECTOR {
<field name="Count"><uint32 /></field>
<field name="BindingH"><arr length="1"><RPC_BINDING_HANDLE /></arr></field>
} RPC_BINDING_VECTOR;
typedef struct _UUID_VECTOR {
<field name="Count"><uint32 /></field>
UUID *Uuid[1];
} UUID_VECTOR;
<typedef name="RPC_IF_HANDLE"><ptr><void /></ptr></typedef>
typedef struct _RPC_IF_ID {
<field name="Uuid"><UUID /></field>
<field name="VersMajor"><uint16 /></field>
<field name="VersMinor"><uint16 /></field>
} RPC_IF_ID;
typedef struct _RPC_PROTSEQ_VECTORA {
<field name="Count"><uint32 /></field>
byte * Protseq[1];
} RPC_PROTSEQ_VECTORA;
typedef struct _RPC_PROTSEQ_VECTORW {
<field name="Count"><uint32 /></field>
uint16 * Protseq[1];
} RPC_PROTSEQ_VECTORW;
typedef struct _RPC_POLICY {
uint32 Length ;
uint32 EndpointFlags ;
uint32 NICFlags ;
} RPC_POLICY, *PRPC_POLICY ;
typedef void __stdcall RPC_OBJECT_INQ_FN(UUID * ObjectUuid, UUID * TypeUuid, RPC_STATUS * Status );
typedef RPC_STATUS __stdcall RPC_IF_CALLBACK_FN(RPC_IF_HANDLE InterfaceUuid, void *Context ) ;
typedef void __stdcall RPC_SECURITY_CALLBACK_FN(void *Context ) ;
typedef struct {
<field name="Count"><uint32 /></field>
<field name="Stats"><arr length="1"><uint32 /></arr></field>
} RPC_STATS_VECTOR;
typedef struct {
<field name="Count"><uint32 /></field>
RPC_IF_ID * IfId[1];
} RPC_IF_ID_VECTOR;

RPC_STATUS __stdcall RpcBindingCopy(RPC_BINDING_HANDLE SourceBinding, RPC_BINDING_HANDLE * DestinationBinding );

RPC_STATUS __stdcall RpcBindingFree(RPC_BINDING_HANDLE * Binding );

RPC_STATUS __stdcall RpcBindingSetOption( RPC_BINDING_HANDLE hBinding, uint32 option, ULONG_PTR optionValue );

RPC_STATUS __stdcall RpcBindingInqOption(RPC_BINDING_HANDLE hBinding, uint32 option, ULONG_PTR *pOptionValue );

RPC_STATUS __stdcall RpcBindingFromStringBindingA( RPC_CSTR StringBinding, RPC_BINDING_HANDLE * Binding );

RPC_STATUS __stdcall RpcBindingFromStringBindingW(RPC_WSTR StringBinding, RPC_BINDING_HANDLE * Binding );

RPC_STATUS __stdcall RpcSsGetContextBinding(void *ContextHandle, RPC_BINDING_HANDLE * Binding );

RPC_STATUS __stdcall RpcBindingInqObject(RPC_BINDING_HANDLE Binding, UUID * ObjectUuid );

RPC_STATUS __stdcall RpcBindingReset(RPC_BINDING_HANDLE Binding );

RPC_STATUS __stdcall RpcBindingSetObject(RPC_BINDING_HANDLE Binding, UUID * ObjectUuid );

RPC_STATUS __stdcall RpcMgmtInqDefaultProtectLevel(uint32 AuthnSvc, uint32 *AuthnLevel );

RPC_STATUS __stdcall RpcBindingToStringBindingA(RPC_BINDING_HANDLE Binding, RPC_CSTR * StringBinding );

RPC_STATUS __stdcall RpcBindingToStringBindingW(RPC_BINDING_HANDLE Binding, RPC_WSTR * StringBinding );

RPC_STATUS __stdcall RpcBindingVectorFree(RPC_BINDING_VECTOR * * BindingVector );

RPC_STATUS __stdcall RpcStringBindingComposeA(RPC_CSTR ObjUuid, RPC_CSTR ProtSeq, RPC_CSTR NetworkAddr, RPC_CSTR Endpoint, RPC_CSTR Options, RPC_CSTR * StringBinding );

RPC_STATUS __stdcall RpcStringBindingComposeW(RPC_WSTR ObjUuid, RPC_WSTR ProtSeq, RPC_WSTR NetworkAddr, RPC_WSTR Endpoint, RPC_WSTR Options, RPC_WSTR * StringBinding );

RPC_STATUS __stdcall RpcStringBindingParseA(RPC_CSTR StringBinding, RPC_CSTR * ObjUuid, RPC_CSTR * Protseq, RPC_CSTR * NetworkAddr, RPC_CSTR * Endpoint, RPC_CSTR * NetworkOptions );

RPC_STATUS __stdcall RpcStringBindingParseW(RPC_WSTR StringBinding, RPC_WSTR * ObjUuid, RPC_WSTR * Protseq, RPC_WSTR * NetworkAddr, RPC_WSTR * Endpoint, RPC_WSTR * NetworkOptions );

RPC_STATUS __stdcall RpcStringFreeA(RPC_CSTR * String );

RPC_STATUS __stdcall RpcStringFreeW(RPC_WSTR * String );

RPC_STATUS __stdcall RpcIfInqId(RPC_IF_HANDLE RpcIfHandle, RPC_IF_ID * RpcIfId );

RPC_STATUS __stdcall RpcNetworkIsProtseqValidA(RPC_CSTR Protseq );

RPC_STATUS __stdcall RpcNetworkIsProtseqValidW(RPC_WSTR Protseq );

RPC_STATUS __stdcall RpcMgmtInqComTimeout(RPC_BINDING_HANDLE Binding, uint32 * Timeout );

RPC_STATUS __stdcall RpcMgmtSetComTimeout(RPC_BINDING_HANDLE Binding, uint32 Timeout );

RPC_STATUS __stdcall RpcMgmtSetCancelTimeout( long Timeout );

RPC_STATUS __stdcall RpcNetworkInqProtseqsA(RPC_PROTSEQ_VECTORA * * ProtseqVector );

RPC_STATUS __stdcall RpcNetworkInqProtseqsW(RPC_PROTSEQ_VECTORW * * ProtseqVector );

RPC_STATUS __stdcall RpcObjectInqType(UUID * ObjUuid, UUID * TypeUuid );

RPC_STATUS __stdcall RpcObjectSetInqFn(RPC_OBJECT_INQ_FN * InquiryFn );

RPC_STATUS __stdcall RpcObjectSetType(UUID * ObjUuid, UUID * TypeUuid );

RPC_STATUS __stdcall RpcProtseqVectorFreeA(RPC_PROTSEQ_VECTORA * * ProtseqVector );

RPC_STATUS __stdcall RpcProtseqVectorFreeW(RPC_PROTSEQ_VECTORW * * ProtseqVector );

RPC_STATUS __stdcall RpcServerInqBindings(RPC_BINDING_VECTOR * * BindingVector );

RPC_STATUS __stdcall RpcServerInqIf(RPC_IF_HANDLE IfSpec, UUID * MgrTypeUuid, void * * MgrEpv );

RPC_STATUS __stdcall RpcServerListen(uint32 MinimumCallThreads, uint32 MaxCalls, uint32 DontWait );

RPC_STATUS __stdcall RpcServerRegisterIf(RPC_IF_HANDLE IfSpec, UUID * MgrTypeUuid, void * MgrEpv );

RPC_STATUS __stdcall RpcServerRegisterIfEx(RPC_IF_HANDLE IfSpec, UUID * MgrTypeUuid, void * MgrEpv, uint32 Flags, uint32 MaxCalls, RPC_IF_CALLBACK_FN *IfCallback );

RPC_STATUS __stdcall RpcServerRegisterIf2(RPC_IF_HANDLE IfSpec, UUID * MgrTypeUuid, void * MgrEpv, uint32 Flags, uint32 MaxCalls, uint32 MaxRpcSize, RPC_IF_CALLBACK_FN *IfCallbackFn );

RPC_STATUS __stdcall RpcServerUnregisterIf(RPC_IF_HANDLE IfSpec, UUID * MgrTypeUuid, uint32 WaitForCallsToComplete );

RPC_STATUS __stdcall RpcServerUnregisterIfEx(RPC_IF_HANDLE IfSpec, UUID * MgrTypeUuid, int32 RundownContextHandles );

RPC_STATUS __stdcall RpcServerUseAllProtseqs(uint32 MaxCalls, void * SecurityDescriptor );

RPC_STATUS __stdcall RpcServerUseAllProtseqsEx(uint32 MaxCalls, void * SecurityDescriptor, PRPC_POLICY Policy );

RPC_STATUS __stdcall RpcServerUseAllProtseqsIf(uint32 MaxCalls, RPC_IF_HANDLE IfSpec, void * SecurityDescriptor );

RPC_STATUS __stdcall RpcServerUseAllProtseqsIfEx(uint32 MaxCalls, RPC_IF_HANDLE IfSpec, void * SecurityDescriptor, PRPC_POLICY Policy );

RPC_STATUS __stdcall RpcServerUseProtseqA(RPC_CSTR Protseq, uint32 MaxCalls, void * SecurityDescriptor );

RPC_STATUS __stdcall RpcServerUseProtseqExA(RPC_CSTR Protseq, uint32 MaxCalls, void * SecurityDescriptor, PRPC_POLICY Policy );

RPC_STATUS __stdcall RpcServerUseProtseqW(RPC_WSTR Protseq, uint32 MaxCalls, void * SecurityDescriptor );

RPC_STATUS __stdcall RpcServerUseProtseqExW(RPC_WSTR Protseq, uint32 MaxCalls, void * SecurityDescriptor, PRPC_POLICY Policy );

RPC_STATUS __stdcall RpcServerUseProtseqEpA(RPC_CSTR Protseq, uint32 MaxCalls, RPC_CSTR Endpoint, void * SecurityDescriptor );

RPC_STATUS __stdcall RpcServerUseProtseqEpExA(RPC_CSTR Protseq, uint32 MaxCalls, RPC_CSTR Endpoint, void * SecurityDescriptor, PRPC_POLICY Policy );

RPC_STATUS __stdcall RpcServerUseProtseqEpW(RPC_WSTR Protseq, uint32 MaxCalls, RPC_WSTR Endpoint, void * SecurityDescriptor );

RPC_STATUS __stdcall RpcServerUseProtseqEpExW(RPC_WSTR Protseq, uint32 MaxCalls, RPC_WSTR Endpoint, void * SecurityDescriptor, PRPC_POLICY Policy );

RPC_STATUS __stdcall RpcServerUseProtseqIfA(RPC_CSTR Protseq, uint32 MaxCalls, RPC_IF_HANDLE IfSpec, void * SecurityDescriptor );

RPC_STATUS __stdcall RpcServerUseProtseqIfExA(RPC_CSTR Protseq, uint32 MaxCalls, RPC_IF_HANDLE IfSpec, void * SecurityDescriptor, PRPC_POLICY Policy );

RPC_STATUS __stdcall RpcServerUseProtseqIfW(RPC_WSTR Protseq, uint32 MaxCalls, RPC_IF_HANDLE IfSpec, void * SecurityDescriptor );

RPC_STATUS __stdcall RpcServerUseProtseqIfExW(RPC_WSTR Protseq, uint32 MaxCalls, RPC_IF_HANDLE IfSpec, void * SecurityDescriptor, PRPC_POLICY Policy );

void __stdcall RpcServerYield(void );

RPC_STATUS __stdcall RpcMgmtStatsVectorFree(RPC_STATS_VECTOR ** StatsVector );

RPC_STATUS __stdcall RpcMgmtInqStats(RPC_BINDING_HANDLE Binding, RPC_STATS_VECTOR ** Statistics );

RPC_STATUS __stdcall RpcMgmtIsServerListening(RPC_BINDING_HANDLE Binding );

RPC_STATUS __stdcall RpcMgmtStopServerListening(RPC_BINDING_HANDLE Binding );

RPC_STATUS __stdcall RpcMgmtWaitServerListen(void );

RPC_STATUS __stdcall RpcMgmtSetServerStackSize(uint32 ThreadStackSize );

void __stdcall RpcSsDontSerializeContext(void );

RPC_STATUS __stdcall RpcMgmtEnableIdleCleanup(void );

RPC_STATUS __stdcall RpcMgmtInqIfIds(RPC_BINDING_HANDLE Binding, RPC_IF_ID_VECTOR * * IfIdVector );

RPC_STATUS __stdcall RpcIfIdVectorFree(RPC_IF_ID_VECTOR * * IfIdVector );

RPC_STATUS __stdcall RpcMgmtInqServerPrincNameA(RPC_BINDING_HANDLE Binding, uint32 AuthnSvc, RPC_CSTR * ServerPrincName );

RPC_STATUS __stdcall RpcMgmtInqServerPrincNameW(RPC_BINDING_HANDLE Binding, uint32 AuthnSvc, RPC_WSTR * ServerPrincName );

RPC_STATUS __stdcall RpcServerInqDefaultPrincNameA(uint32 AuthnSvc, RPC_CSTR * PrincName );

RPC_STATUS __stdcall RpcServerInqDefaultPrincNameW(uint32 AuthnSvc, RPC_WSTR * PrincName );

RPC_STATUS __stdcall RpcEpResolveBinding(RPC_BINDING_HANDLE Binding, RPC_IF_HANDLE IfSpec );

RPC_STATUS __stdcall RpcNsBindingInqEntryNameA(RPC_BINDING_HANDLE Binding, uint32 EntryNameSyntax, RPC_CSTR * EntryName );

RPC_STATUS __stdcall RpcNsBindingInqEntryNameW(RPC_BINDING_HANDLE Binding, uint32 EntryNameSyntax, RPC_WSTR * EntryName );
<typedef name="RPC_AUTH_IDENTITY_HANDLE"><ptr><void /></ptr></typedef>
<typedef name="RPC_AUTHZ_HANDLE"><ptr><void /></ptr></typedef>
typedef struct _RPC_SECURITY_QOS {
<field name="Version"><uint32 /></field>
<field name="Capabilities"><uint32 /></field>
<field name="IdentityTracking"><uint32 /></field>
<field name="ImpersonationType"><uint32 /></field>
} RPC_SECURITY_QOS, *PRPC_SECURITY_QOS;
typedef struct _SEC_WINNT_AUTH_IDENTITY_W {
<field name="User"><ptr><uint16 /></ptr></field>
<field name="UserLength"><uint32 /></field>
<field name="Domain"><ptr><uint16 /></ptr></field>
<field name="DomainLength"><uint32 /></field>
<field name="Password"><ptr><uint16 /></ptr></field>
<field name="PasswordLength"><uint32 /></field>
<field name="Flags"><uint32 /></field>
} SEC_WINNT_AUTH_IDENTITY_W, *PSEC_WINNT_AUTH_IDENTITY_W;
typedef struct _SEC_WINNT_AUTH_IDENTITY_A {
<field name="User"><ptr><byte /></ptr></field>
<field name="UserLength"><uint32 /></field>
<field name="Domain"><ptr><byte /></ptr></field>
<field name="DomainLength"><uint32 /></field>
<field name="Password"><ptr><byte /></ptr></field>
<field name="PasswordLength"><uint32 /></field>
<field name="Flags"><uint32 /></field>
} SEC_WINNT_AUTH_IDENTITY_A, *PSEC_WINNT_AUTH_IDENTITY_A;
typedef struct _RPC_HTTP_TRANSPORT_CREDENTIALS_W {
<field name="TransportCredentials"><ptr><SEC_WINNT_AUTH_IDENTITY_W /></ptr></field>
<field name="Flags"><uint32 /></field>
<field name="AuthenticationTarget"><uint32 /></field>
<field name="NumberOfAuthnSchemes"><uint32 /></field>
<field name="AuthnSchemes"><ptr><uint32 /></ptr></field>
<field name="ServerCertificateSubject"><ptr><uint16 /></ptr></field>
} RPC_HTTP_TRANSPORT_CREDENTIALS_W, *PRPC_HTTP_TRANSPORT_CREDENTIALS_W;
typedef struct _RPC_HTTP_TRANSPORT_CREDENTIALS_A {
<field name="TransportCredentials"><ptr><SEC_WINNT_AUTH_IDENTITY_A /></ptr></field>
<field name="Flags"><uint32 /></field>
<field name="AuthenticationTarget"><uint32 /></field>
<field name="NumberOfAuthnSchemes"><uint32 /></field>
<field name="AuthnSchemes"><ptr><uint32 /></ptr></field>
<field name="ServerCertificateSubject"><ptr><byte /></ptr></field>
} RPC_HTTP_TRANSPORT_CREDENTIALS_A, *PRPC_HTTP_TRANSPORT_CREDENTIALS_A;
typedef struct _RPC_HTTP_TRANSPORT_CREDENTIALS_V2_W {
<field name="TransportCredentials"><ptr><SEC_WINNT_AUTH_IDENTITY_W /></ptr></field>
<field name="Flags"><uint32 /></field>
<field name="AuthenticationTarget"><uint32 /></field>
<field name="NumberOfAuthnSchemes"><uint32 /></field>
<field name="AuthnSchemes"><ptr><uint32 /></ptr></field>
<field name="ServerCertificateSubject"><ptr><uint16 /></ptr></field>
<field name="ProxyCredentials"><ptr><SEC_WINNT_AUTH_IDENTITY_W /></ptr></field>
<field name="NumberOfProxyAuthnSchemes"><uint32 /></field>
<field name="ProxyAuthnSchemes"><ptr><uint32 /></ptr></field>
} RPC_HTTP_TRANSPORT_CREDENTIALS_V2_W, *PRPC_HTTP_TRANSPORT_CREDENTIALS_V2_W;
typedef struct _RPC_HTTP_TRANSPORT_CREDENTIALS_V2_A {
<field name="TransportCredentials"><ptr><SEC_WINNT_AUTH_IDENTITY_A /></ptr></field>
<field name="Flags"><uint32 /></field>
<field name="AuthenticationTarget"><uint32 /></field>
<field name="NumberOfAuthnSchemes"><uint32 /></field>
<field name="AuthnSchemes"><ptr><uint32 /></ptr></field>
<field name="ServerCertificateSubject"><ptr><byte /></ptr></field>
<field name="ProxyCredentials"><ptr><SEC_WINNT_AUTH_IDENTITY_A /></ptr></field>
<field name="NumberOfProxyAuthnSchemes"><uint32 /></field>
<field name="ProxyAuthnSchemes"><ptr><uint32 /></ptr></field>
} RPC_HTTP_TRANSPORT_CREDENTIALS_V2_A, *PRPC_HTTP_TRANSPORT_CREDENTIALS_V2_A;
typedef struct _RPC_HTTP_TRANSPORT_CREDENTIALS_V3_W {
<field name="TransportCredentials"><RPC_AUTH_IDENTITY_HANDLE /></field>
<field name="Flags"><uint32 /></field>
<field name="AuthenticationTarget"><uint32 /></field>
<field name="NumberOfAuthnSchemes"><uint32 /></field>
<field name="AuthnSchemes"><ptr><uint32 /></ptr></field>
<field name="ServerCertificateSubject"><ptr><uint16 /></ptr></field>
<field name="ProxyCredentials"><RPC_AUTH_IDENTITY_HANDLE /></field>
<field name="NumberOfProxyAuthnSchemes"><uint32 /></field>
<field name="ProxyAuthnSchemes"><ptr><uint32 /></ptr></field>
} RPC_HTTP_TRANSPORT_CREDENTIALS_V3_W, *PRPC_HTTP_TRANSPORT_CREDENTIALS_V3_W;
typedef struct _RPC_HTTP_TRANSPORT_CREDENTIALS_V3_A {
<field name="TransportCredentials"><RPC_AUTH_IDENTITY_HANDLE /></field>
<field name="Flags"><uint32 /></field>
<field name="AuthenticationTarget"><uint32 /></field>
<field name="NumberOfAuthnSchemes"><uint32 /></field>
<field name="AuthnSchemes"><ptr><uint32 /></ptr></field>
<field name="ServerCertificateSubject"><ptr><byte /></ptr></field>
<field name="ProxyCredentials"><RPC_AUTH_IDENTITY_HANDLE /></field>
<field name="NumberOfProxyAuthnSchemes"><uint32 /></field>
<field name="ProxyAuthnSchemes"><ptr><uint32 /></ptr></field>
} RPC_HTTP_TRANSPORT_CREDENTIALS_V3_A, *PRPC_HTTP_TRANSPORT_CREDENTIALS_V3_A;
typedef struct _RPC_SECURITY_QOS_V2_W {
<field name="Version"><uint32 /></field>
<field name="Capabilities"><uint32 /></field>
<field name="IdentityTracking"><uint32 /></field>
<field name="ImpersonationType"><uint32 /></field>
<field name="AdditionalSecurityInfoType"><uint32 /></field>
union {
<field name="HttpCredentials"><ptr><RPC_HTTP_TRANSPORT_CREDENTIALS_W /></ptr></field>
} u;
} RPC_SECURITY_QOS_V2_W, *PRPC_SECURITY_QOS_V2_W;
typedef struct _RPC_SECURITY_QOS_V2_A {
<field name="Version"><uint32 /></field>
<field name="Capabilities"><uint32 /></field>
<field name="IdentityTracking"><uint32 /></field>
<field name="ImpersonationType"><uint32 /></field>
<field name="AdditionalSecurityInfoType"><uint32 /></field>
union {
<field name="HttpCredentials"><ptr><RPC_HTTP_TRANSPORT_CREDENTIALS_A /></ptr></field>
} u;
} RPC_SECURITY_QOS_V2_A, *PRPC_SECURITY_QOS_V2_A;
typedef struct _RPC_SECURITY_QOS_V3_W {
<field name="Version"><uint32 /></field>
<field name="Capabilities"><uint32 /></field>
<field name="IdentityTracking"><uint32 /></field>
<field name="ImpersonationType"><uint32 /></field>
<field name="AdditionalSecurityInfoType"><uint32 /></field>
union {
<field name="HttpCredentials"><ptr><RPC_HTTP_TRANSPORT_CREDENTIALS_W /></ptr></field>
} u;
<field name="Sid"><ptr><void /></ptr></field>
} RPC_SECURITY_QOS_V3_W, *PRPC_SECURITY_QOS_V3_W;
typedef struct _RPC_SECURITY_QOS_V3_A {
<field name="Version"><uint32 /></field>
<field name="Capabilities"><uint32 /></field>
<field name="IdentityTracking"><uint32 /></field>
<field name="ImpersonationType"><uint32 /></field>
<field name="AdditionalSecurityInfoType"><uint32 /></field>
union {
<field name="HttpCredentials"><ptr><RPC_HTTP_TRANSPORT_CREDENTIALS_A /></ptr></field>
} u;
<field name="Sid"><ptr><void /></ptr></field>
} RPC_SECURITY_QOS_V3_A, *PRPC_SECURITY_QOS_V3_A;
typedef struct _RPC_SECURITY_QOS_V4_W {
<field name="Version"><uint32 /></field>
<field name="Capabilities"><uint32 /></field>
<field name="IdentityTracking"><uint32 /></field>
<field name="ImpersonationType"><uint32 /></field>
<field name="AdditionalSecurityInfoType"><uint32 /></field>
union {
<field name="HttpCredentials"><ptr><RPC_HTTP_TRANSPORT_CREDENTIALS_W /></ptr></field>
} u;
<field name="Sid"><ptr><void /></ptr></field>
<field name="EffectiveOnly"><uint32 /></field>
} RPC_SECURITY_QOS_V4_W, *PRPC_SECURITY_QOS_V4_W;
typedef struct _RPC_SECURITY_QOS_V4_A {
<field name="Version"><uint32 /></field>
<field name="Capabilities"><uint32 /></field>
<field name="IdentityTracking"><uint32 /></field>
<field name="ImpersonationType"><uint32 /></field>
<field name="AdditionalSecurityInfoType"><uint32 /></field>
union {
<field name="HttpCredentials"><ptr><RPC_HTTP_TRANSPORT_CREDENTIALS_A /></ptr></field>
} u;
<field name="Sid"><ptr><void /></ptr></field>
<field name="EffectiveOnly"><uint32 /></field>
} RPC_SECURITY_QOS_V4_A, *PRPC_SECURITY_QOS_V4_A;
typedef struct _RPC_BINDING_HANDLE_TEMPLATE_V1_W {
<field name="Version"><uint32 /></field>
<field name="Flags"><uint32 /></field>
<field name="ProtocolSequence"><uint32 /></field>
<field name="NetworkAddress"><ptr><uint16 /></ptr></field>
<field name="StringEndpoint"><ptr><uint16 /></ptr></field>
union {
<field name="Reserved"><ptr><uint16 /></ptr></field>
} u1;
<field name="ObjectUuid"><UUID /></field>
} RPC_BINDING_HANDLE_TEMPLATE_V1_W, *PRPC_BINDING_HANDLE_TEMPLATE_V1_W;
typedef struct _RPC_BINDING_HANDLE_TEMPLATE_V1_A {
<field name="Version"><uint32 /></field>
<field name="Flags"><uint32 /></field>
<field name="ProtocolSequence"><uint32 /></field>
<field name="NetworkAddress"><ptr><byte /></ptr></field>
<field name="StringEndpoint"><ptr><byte /></ptr></field>
union {
<field name="Reserved"><ptr><byte /></ptr></field>
} u1;
<field name="ObjectUuid"><UUID /></field>
} RPC_BINDING_HANDLE_TEMPLATE_V1_A, *PRPC_BINDING_HANDLE_TEMPLATE_V1_A;
typedef struct _RPC_BINDING_HANDLE_SECURITY_V1_W {
<field name="Version"><uint32 /></field>
<field name="ServerPrincName"><ptr><uint16 /></ptr></field>
<field name="AuthnLevel"><uint32 /></field>
<field name="AuthnSvc"><uint32 /></field>
<field name="AuthIdentity"><ptr><SEC_WINNT_AUTH_IDENTITY_W /></ptr></field>
<field name="SecurityQos"><ptr><RPC_SECURITY_QOS /></ptr></field>
} RPC_BINDING_HANDLE_SECURITY_V1_W, *PRPC_BINDING_HANDLE_SECURITY_V1_W;
typedef struct _RPC_BINDING_HANDLE_SECURITY_V1_A {
<field name="Version"><uint32 /></field>
<field name="ServerPrincName"><ptr><byte /></ptr></field>
<field name="AuthnLevel"><uint32 /></field>
<field name="AuthnSvc"><uint32 /></field>
<field name="AuthIdentity"><ptr><SEC_WINNT_AUTH_IDENTITY_A /></ptr></field>
<field name="SecurityQos"><ptr><RPC_SECURITY_QOS /></ptr></field>
} RPC_BINDING_HANDLE_SECURITY_V1_A, *PRPC_BINDING_HANDLE_SECURITY_V1_A;
typedef struct _RPC_BINDING_HANDLE_OPTIONS_V1 {
<field name="Version"><uint32 /></field>
<field name="Flags"><uint32 /></field>
<field name="ComTimeout"><uint32 /></field>
<field name="CallTimeout"><uint32 /></field>
} RPC_BINDING_HANDLE_OPTIONS_V1, *PRPC_BINDING_HANDLE_OPTIONS_V1;

RPC_STATUS __stdcall RpcBindingCreateA(RPC_BINDING_HANDLE_TEMPLATE_V1_A * Template, RPC_BINDING_HANDLE_SECURITY_V1_A * Security, RPC_BINDING_HANDLE_OPTIONS_V1 * Options, RPC_BINDING_HANDLE * Binding );

RPC_STATUS __stdcall RpcBindingCreateW(RPC_BINDING_HANDLE_TEMPLATE_V1_W * Template, RPC_BINDING_HANDLE_SECURITY_V1_W * Security, RPC_BINDING_HANDLE_OPTIONS_V1 * Options, RPC_BINDING_HANDLE * Binding );

RPC_STATUS __stdcall RpcBindingGetTrainingContextHandle(RPC_BINDING_HANDLE Binding, void ** ContextHandle );

RPC_STATUS __stdcall RpcServerInqBindingHandle(RPC_BINDING_HANDLE * Binding );
typedef enum _RPC_HTTP_REDIRECTOR_STAGE {
RPCHTTP_RS_REDIRECT = 1, RPCHTTP_RS_ACCESS_1, RPCHTTP_RS_SESSION, RPCHTTP_RS_ACCESS_2, RPCHTTP_RS_INTERFACE } RPC_HTTP_REDIRECTOR_STAGE;
typedef RPC_STATUS (__stdcall * RPC_NEW_HTTP_PROXY_CHANNEL)(RPC_HTTP_REDIRECTOR_STAGE RedirectorStage, RPC_WSTR ServerName, RPC_WSTR ServerPort, RPC_WSTR RemoteUser, RPC_WSTR AuthType, void * ResourceUuid, void * SessionId, void * Interface, void * Reserved, uint32 Flags, RPC_WSTR * NewServerName, RPC_WSTR * NewServerPort );
typedef void (__stdcall * RPC_HTTP_PROXY_FREE_STRING)(RPC_WSTR String );

RPC_STATUS __stdcall RpcImpersonateClient(RPC_BINDING_HANDLE BindingHandle );

RPC_STATUS __stdcall RpcRevertToSelfEx(RPC_BINDING_HANDLE BindingHandle );

RPC_STATUS __stdcall RpcRevertToSelf(void );

RPC_STATUS __stdcall RpcBindingInqAuthClientA(RPC_BINDING_HANDLE ClientBinding, RPC_AUTHZ_HANDLE * Privs, RPC_CSTR * ServerPrincName, uint32 * AuthnLevel, uint32 * AuthnSvc, uint32 * AuthzSvc );

RPC_STATUS __stdcall RpcBindingInqAuthClientW(RPC_BINDING_HANDLE ClientBinding, RPC_AUTHZ_HANDLE * Privs, RPC_WSTR * ServerPrincName, uint32 * AuthnLevel, uint32 * AuthnSvc, uint32 * AuthzSvc );

RPC_STATUS __stdcall RpcBindingInqAuthClientExA(RPC_BINDING_HANDLE ClientBinding, RPC_AUTHZ_HANDLE * Privs, RPC_CSTR * ServerPrincName, uint32 * AuthnLevel, uint32 * AuthnSvc, uint32 * AuthzSvc, uint32 Flags );

RPC_STATUS __stdcall RpcBindingInqAuthClientExW(RPC_BINDING_HANDLE ClientBinding, RPC_AUTHZ_HANDLE * Privs, RPC_WSTR * ServerPrincName, uint32 * AuthnLevel, uint32 * AuthnSvc, uint32 * AuthzSvc, uint32 Flags );

RPC_STATUS __stdcall RpcBindingInqAuthInfoA(RPC_BINDING_HANDLE Binding, RPC_CSTR * ServerPrincName, uint32 * AuthnLevel, uint32 * AuthnSvc, RPC_AUTH_IDENTITY_HANDLE * AuthIdentity, uint32 * AuthzSvc );

RPC_STATUS __stdcall RpcBindingInqAuthInfoW(RPC_BINDING_HANDLE Binding, RPC_WSTR * ServerPrincName, uint32 * AuthnLevel, uint32 * AuthnSvc, RPC_AUTH_IDENTITY_HANDLE * AuthIdentity, uint32 * AuthzSvc );

RPC_STATUS __stdcall RpcBindingSetAuthInfoA(RPC_BINDING_HANDLE Binding, RPC_CSTR ServerPrincName, uint32 AuthnLevel, uint32 AuthnSvc, RPC_AUTH_IDENTITY_HANDLE AuthIdentity, uint32 AuthzSvc );

RPC_STATUS __stdcall RpcBindingSetAuthInfoExA(RPC_BINDING_HANDLE Binding, RPC_CSTR ServerPrincName, uint32 AuthnLevel, uint32 AuthnSvc, RPC_AUTH_IDENTITY_HANDLE AuthIdentity, uint32 AuthzSvc, RPC_SECURITY_QOS * SecurityQos );

RPC_STATUS __stdcall RpcBindingSetAuthInfoW(RPC_BINDING_HANDLE Binding, RPC_WSTR ServerPrincName, uint32 AuthnLevel, uint32 AuthnSvc, RPC_AUTH_IDENTITY_HANDLE AuthIdentity, uint32 AuthzSvc );

RPC_STATUS __stdcall RpcBindingSetAuthInfoExW(RPC_BINDING_HANDLE Binding, RPC_WSTR ServerPrincName, uint32 AuthnLevel, uint32 AuthnSvc, RPC_AUTH_IDENTITY_HANDLE AuthIdentity, uint32 AuthzSvc, RPC_SECURITY_QOS * SecurityQOS );

RPC_STATUS __stdcall RpcBindingInqAuthInfoExA(RPC_BINDING_HANDLE Binding, RPC_CSTR * ServerPrincName, uint32 * AuthnLevel, uint32 * AuthnSvc, RPC_AUTH_IDENTITY_HANDLE * AuthIdentity, uint32 * AuthzSvc, uint32 RpcQosVersion, RPC_SECURITY_QOS *SecurityQOS );

RPC_STATUS __stdcall RpcBindingInqAuthInfoExW(RPC_BINDING_HANDLE Binding, RPC_WSTR * ServerPrincName, uint32 * AuthnLevel, uint32 * AuthnSvc, RPC_AUTH_IDENTITY_HANDLE * AuthIdentity, uint32 * AuthzSvc, uint32 RpcQosVersion, RPC_SECURITY_QOS * SecurityQOS );
typedef void (__stdcall * RPC_AUTH_KEY_RETRIEVAL_FN)(void * Arg, RPC_WSTR ServerPrincName, uint32 KeyVer, void * * Key, RPC_STATUS * Status );

RPC_STATUS __stdcall RpcServerCompleteSecurityCallback( RPC_BINDING_HANDLE BindingHandle, RPC_STATUS Status );

RPC_STATUS __stdcall RpcServerRegisterAuthInfoA(RPC_CSTR ServerPrincName, uint32 AuthnSvc, RPC_AUTH_KEY_RETRIEVAL_FN GetKeyFn, void * Arg );

RPC_STATUS __stdcall RpcServerRegisterAuthInfoW(RPC_WSTR ServerPrincName, uint32 AuthnSvc, RPC_AUTH_KEY_RETRIEVAL_FN GetKeyFn, void * Arg );
typedef struct {
<field name="UserName"><ptr><byte /></ptr></field>
<field name="ComputerName"><ptr><byte /></ptr></field>
<field name="Privilege"><uint16 /></field>
<field name="AuthFlags"><uint32 /></field>
} RPC_CLIENT_INFORMATION1, * PRPC_CLIENT_INFORMATION1;

RPC_STATUS __stdcall RpcBindingServerFromClient(RPC_BINDING_HANDLE ClientBinding, RPC_BINDING_HANDLE * ServerBinding );

__declspec(noreturn) void __stdcall RpcRaiseException(RPC_STATUS exception );

RPC_STATUS __stdcall RpcTestCancel( void );

RPC_STATUS __stdcall RpcServerTestCancel(RPC_BINDING_HANDLE BindingHandle );

RPC_STATUS __stdcall RpcCancelThread( void * Thread );

RPC_STATUS __stdcall RpcCancelThreadEx( void * Thread, long Timeout );

RPC_STATUS __stdcall UuidCreate(UUID * Uuid );

RPC_STATUS __stdcall UuidCreateSequential(UUID * Uuid );

RPC_STATUS __stdcall UuidToStringA(const UUID * Uuid, RPC_CSTR * StringUuid );

RPC_STATUS __stdcall UuidFromStringA(RPC_CSTR StringUuid, UUID * Uuid );

RPC_STATUS __stdcall UuidToStringW(const UUID * Uuid, RPC_WSTR * StringUuid );

RPC_STATUS __stdcall UuidFromStringW(RPC_WSTR StringUuid, UUID * Uuid );

signed int32 __stdcall UuidCompare(UUID * Uuid1, UUID * Uuid2, RPC_STATUS * Status );

RPC_STATUS __stdcall UuidCreateNil(UUID * NilUuid );

int32 __stdcall UuidEqual(UUID * Uuid1, UUID * Uuid2, RPC_STATUS * Status );

uint16 __stdcall UuidHash(UUID * Uuid, RPC_STATUS * Status );

int32 __stdcall UuidIsNil(UUID * Uuid, RPC_STATUS * Status );

RPC_STATUS __stdcall RpcEpRegisterNoReplaceA(RPC_IF_HANDLE IfSpec, RPC_BINDING_VECTOR * BindingVector, UUID_VECTOR * UuidVector, RPC_CSTR Annotation );

RPC_STATUS __stdcall RpcEpRegisterNoReplaceW(RPC_IF_HANDLE IfSpec, RPC_BINDING_VECTOR * BindingVector, UUID_VECTOR * UuidVector, RPC_WSTR Annotation );

RPC_STATUS __stdcall RpcEpRegisterA(RPC_IF_HANDLE IfSpec, RPC_BINDING_VECTOR * BindingVector, UUID_VECTOR * UuidVector, RPC_CSTR Annotation );

RPC_STATUS __stdcall RpcEpRegisterW(RPC_IF_HANDLE IfSpec, RPC_BINDING_VECTOR * BindingVector, UUID_VECTOR * UuidVector, RPC_WSTR Annotation );

RPC_STATUS __stdcall RpcEpUnregister( RPC_IF_HANDLE IfSpec, RPC_BINDING_VECTOR * BindingVector, UUID_VECTOR * UuidVector );

RPC_STATUS __stdcall DceErrorInqTextA(RPC_STATUS RpcStatus, RPC_CSTR ErrorText );

RPC_STATUS __stdcall DceErrorInqTextW(RPC_STATUS RpcStatus, RPC_WSTR ErrorText );
<typedef name="RPC_EP_INQ_HANDLE"><ptr><I_RPC_HANDLE /></ptr></typedef>

RPC_STATUS __stdcall RpcMgmtEpEltInqBegin(RPC_BINDING_HANDLE EpBinding, uint32 InquiryType, RPC_IF_ID * IfId, uint32 VersOption, UUID * ObjectUuid, RPC_EP_INQ_HANDLE * InquiryContext );

RPC_STATUS __stdcall RpcMgmtEpEltInqDone(RPC_EP_INQ_HANDLE * InquiryContext );

RPC_STATUS __stdcall RpcMgmtEpEltInqNextA(RPC_EP_INQ_HANDLE InquiryContext, RPC_IF_ID * IfId, RPC_BINDING_HANDLE * Binding, UUID * ObjectUuid, RPC_CSTR * Annotation );

RPC_STATUS __stdcall RpcMgmtEpEltInqNextW(RPC_EP_INQ_HANDLE InquiryContext, RPC_IF_ID * IfId, RPC_BINDING_HANDLE * Binding, UUID * ObjectUuid, RPC_WSTR * Annotation );

RPC_STATUS __stdcall RpcMgmtEpUnregister(RPC_BINDING_HANDLE EpBinding, RPC_IF_ID * IfId, RPC_BINDING_HANDLE Binding, UUID * ObjectUuid );
typedef int32 (__stdcall * RPC_MGMT_AUTHORIZATION_FN)(RPC_BINDING_HANDLE ClientBinding, uint32 RequestedMgmtOperation, RPC_STATUS * Status );

RPC_STATUS __stdcall RpcMgmtSetAuthorizationFn(RPC_MGMT_AUTHORIZATION_FN AuthorizationFn );

int32 __stdcall RpcExceptionFilter(uint32 ExceptionCode );
typedef struct _RPC_VERSION {
<field name="MajorVersion"><uint16 /></field>
<field name="MinorVersion"><uint16 /></field>
} RPC_VERSION;
typedef struct _RPC_SYNTAX_IDENTIFIER {
<field name="SyntaxGUID"><GUID /></field>
<field name="SyntaxVersion"><RPC_VERSION /></field>
} RPC_SYNTAX_IDENTIFIER, * PRPC_SYNTAX_IDENTIFIER;
typedef struct _RPC_MESSAGE {
<field name="Handle"><RPC_BINDING_HANDLE /></field>
<field name="DataRepresentation"><uint32 /></field>
<field name="Buffer"><ptr><void /></ptr></field>
<field name="BufferLength"><uint32 /></field>
<field name="ProcNum"><uint32 /></field>
<field name="TransferSyntax"><PRPC_SYNTAX_IDENTIFIER /></field>
<field name="RpcInterfaceInformation"><ptr><void /></ptr></field>
<field name="ReservedForRuntime"><ptr><void /></ptr></field>
<field name="ManagerEpv"><ptr><void /></ptr></field>
<field name="ImportContext"><ptr><void /></ptr></field>
<field name="RpcFlags"><uint32 /></field>
} RPC_MESSAGE, * PRPC_MESSAGE;
typedef RPC_STATUS __stdcall RPC_FORWARD_FUNCTION( UUID * InterfaceId, RPC_VERSION * InterfaceVersion, UUID * ObjectId, byte * Rpcpro, void * * ppDestEndpoint);
<enum name="RPC_ADDRESS_CHANGE_TYPE"><item name="PROTOCOL_NOT_LOADED" value="1"/><item name="PROTOCOL_LOADED"/><item name="PROTOCOL_ADDRESS_CHANGE" /></enum>
typedef void __stdcall RPC_ADDRESS_CHANGE_FN( void * arg );
typedef void (__stdcall * RPC_DISPATCH_FUNCTION)(PRPC_MESSAGE Message );
typedef struct {
<field name="DispatchTableCount"><uint32 /></field>
<field name="DispatchTable"><ptr><RPC_DISPATCH_FUNCTION /></ptr></field>
<field name="Reserved"><LONG_PTR /></field>
} RPC_DISPATCH_TABLE, * PRPC_DISPATCH_TABLE;
typedef struct _RPC_PROTSEQ_ENDPOINT {
<field name="RpcProtocolSequence"><ptr><byte /></ptr></field>
<field name="Endpoint"><ptr><byte /></ptr></field>
} RPC_PROTSEQ_ENDPOINT, * PRPC_PROTSEQ_ENDPOINT;
typedef struct _RPC_SERVER_INTERFACE {
<field name="Length"><uint32 /></field>
<field name="InterfaceId"><RPC_SYNTAX_IDENTIFIER /></field>
<field name="TransferSyntax"><RPC_SYNTAX_IDENTIFIER /></field>
<field name="DispatchTable"><PRPC_DISPATCH_TABLE /></field>
<field name="RpcProtseqEndpointCount"><uint32 /></field>
<field name="RpcProtseqEndpoint"><PRPC_PROTSEQ_ENDPOINT /></field>
<field name="DefaultManagerEpv"><ptr><void /></ptr></field>
void const *InterpreterInfo;
uint32 Flags ;
} RPC_SERVER_INTERFACE, * PRPC_SERVER_INTERFACE;
typedef struct _RPC_CLIENT_INTERFACE {
<field name="Length"><uint32 /></field>
<field name="InterfaceId"><RPC_SYNTAX_IDENTIFIER /></field>
<field name="TransferSyntax"><RPC_SYNTAX_IDENTIFIER /></field>
<field name="DispatchTable"><PRPC_DISPATCH_TABLE /></field>
<field name="RpcProtseqEndpointCount"><uint32 /></field>
<field name="RpcProtseqEndpoint"><PRPC_PROTSEQ_ENDPOINT /></field>
<field name="Reserved"><ULONG_PTR /></field>
void const * InterpreterInfo;
uint32 Flags ;
} RPC_CLIENT_INTERFACE, * PRPC_CLIENT_INTERFACE;

RPC_STATUS __stdcall I_RpcNegotiateTransferSyntax(RPC_MESSAGE * Message );

RPC_STATUS __stdcall I_RpcGetBuffer(RPC_MESSAGE * Message );

RPC_STATUS __stdcall I_RpcGetBufferWithObject(RPC_MESSAGE * Message, UUID * ObjectUuid );

RPC_STATUS __stdcall I_RpcSendReceive(RPC_MESSAGE * Message );

RPC_STATUS __stdcall I_RpcFreeBuffer(RPC_MESSAGE * Message );

RPC_STATUS __stdcall I_RpcSend(PRPC_MESSAGE Message );

RPC_STATUS __stdcall I_RpcReceive(PRPC_MESSAGE Message, uint32 Size );

RPC_STATUS __stdcall I_RpcFreePipeBuffer(RPC_MESSAGE * Message );

RPC_STATUS __stdcall I_RpcReallocPipeBuffer(PRPC_MESSAGE Message, uint32 NewSize );
<typedef name="I_RPC_MUTEX"><ptr><void /></ptr></typedef>

void __stdcall I_RpcRequestMutex(I_RPC_MUTEX * Mutex );

void __stdcall I_RpcClearMutex(I_RPC_MUTEX Mutex );

void __stdcall I_RpcDeleteMutex(I_RPC_MUTEX Mutex );

void * __stdcall I_RpcAllocate(uint32 Size );

void __stdcall I_RpcFree(void * Object );

void __stdcall I_RpcPauseExecution(uint32 Milliseconds );

RPC_STATUS __stdcall I_RpcGetExtendedError(void );
typedef void (__stdcall * PRPC_RUNDOWN)(void * AssociationContext );

RPC_STATUS __stdcall I_RpcMonitorAssociation(RPC_BINDING_HANDLE Handle, PRPC_RUNDOWN RundownRoutine, void * Context );

RPC_STATUS __stdcall I_RpcStopMonitorAssociation(RPC_BINDING_HANDLE Handle );

RPC_BINDING_HANDLE __stdcall I_RpcGetCurrentCallHandle( void );

RPC_STATUS __stdcall I_RpcGetAssociationContext(RPC_BINDING_HANDLE BindingHandle, void * * AssociationContext );

void * __stdcall I_RpcGetServerContextList(RPC_BINDING_HANDLE BindingHandle );

void __stdcall I_RpcSetServerContextList(RPC_BINDING_HANDLE BindingHandle, void * ServerContextList );

RPC_STATUS __stdcall I_RpcNsInterfaceExported(uint32 EntryNameSyntax, uint16 *EntryName, RPC_SERVER_INTERFACE * RpcInterfaceInformation );

RPC_STATUS __stdcall I_RpcNsInterfaceUnexported(uint32 EntryNameSyntax, uint16 *EntryName, RPC_SERVER_INTERFACE * RpcInterfaceInformation );

RPC_STATUS __stdcall I_RpcBindingToStaticStringBindingW(RPC_BINDING_HANDLE Binding, uint16 **StringBinding );

RPC_STATUS __stdcall I_RpcBindingInqSecurityContext(RPC_BINDING_HANDLE Binding, void **SecurityContextHandle );

RPC_STATUS __stdcall I_RpcBindingInqSecurityContextKeyInfo(RPC_BINDING_HANDLE Binding, void *KeyInfo );

RPC_STATUS __stdcall I_RpcBindingInqWireIdForSnego(RPC_BINDING_HANDLE Binding, RPC_CSTR WireId );

RPC_STATUS __stdcall I_RpcBindingInqMarshalledTargetInfo(RPC_BINDING_HANDLE Binding, uint32 * MarshalledTargetInfoSize, RPC_CSTR * MarshalledTargetInfo );

RPC_STATUS __stdcall I_RpcBindingInqLocalClientPID(RPC_BINDING_HANDLE Binding, uint32 *Pid );

RPC_STATUS __stdcall I_RpcBindingHandleToAsyncHandle(RPC_BINDING_HANDLE Binding, void **AsyncHandle );

RPC_STATUS __stdcall I_RpcNsBindingSetEntryNameW(RPC_BINDING_HANDLE Binding, uint32 EntryNameSyntax, RPC_WSTR EntryName );

RPC_STATUS __stdcall I_RpcNsBindingSetEntryNameA(RPC_BINDING_HANDLE Binding, uint32 EntryNameSyntax, RPC_CSTR EntryName );

RPC_STATUS __stdcall I_RpcServerUseProtseqEp2A(RPC_CSTR NetworkAddress, RPC_CSTR Protseq, uint32 MaxCalls, RPC_CSTR Endpoint, void * SecurityDescriptor, void * Policy );

RPC_STATUS __stdcall I_RpcServerUseProtseqEp2W(RPC_WSTR NetworkAddress, RPC_WSTR Protseq, uint32 MaxCalls, RPC_WSTR Endpoint, void * SecurityDescriptor, void * Policy );

RPC_STATUS __stdcall I_RpcServerUseProtseq2W(RPC_WSTR NetworkAddress, RPC_WSTR Protseq, uint32 MaxCalls, void * SecurityDescriptor, void * Policy );

RPC_STATUS __stdcall I_RpcServerUseProtseq2A(RPC_CSTR NetworkAddress, RPC_CSTR Protseq, uint32 MaxCalls, void * SecurityDescriptor, void * Policy );

RPC_STATUS __stdcall I_RpcServerStartService(RPC_WSTR Protseq, RPC_WSTR Endpoint, RPC_IF_HANDLE IfSpec );

RPC_STATUS __stdcall I_RpcBindingInqDynamicEndpointW(RPC_BINDING_HANDLE Binding, RPC_WSTR *DynamicEndpoint );

RPC_STATUS __stdcall I_RpcBindingInqDynamicEndpointA(RPC_BINDING_HANDLE Binding, RPC_CSTR *DynamicEndpoint );

RPC_STATUS __stdcall I_RpcServerCheckClientRestriction(RPC_BINDING_HANDLE Context );

RPC_STATUS __stdcall I_RpcBindingInqTransportType(RPC_BINDING_HANDLE Binding, uint32 * Type );
typedef struct _RPC_TRANSFER_SYNTAX {
<field name="Uuid"><UUID /></field>
<field name="VersMajor"><uint16 /></field>
<field name="VersMinor"><uint16 /></field>
} RPC_TRANSFER_SYNTAX;

RPC_STATUS __stdcall I_RpcIfInqTransferSyntaxes(RPC_IF_HANDLE RpcIfHandle, RPC_TRANSFER_SYNTAX * TransferSyntaxes, uint32 TransferSyntaxSize, uint32 * TransferSyntaxCount );

RPC_STATUS __stdcall I_UuidCreate(UUID * Uuid );

RPC_STATUS __stdcall I_RpcBindingCopy(RPC_BINDING_HANDLE SourceBinding, RPC_BINDING_HANDLE * DestinationBinding );

RPC_STATUS __stdcall I_RpcBindingIsClientLocal(RPC_BINDING_HANDLE BindingHandle, uint32 * ClientLocalFlag );

RPC_STATUS __stdcall I_RpcBindingInqConnId(RPC_BINDING_HANDLE Binding, void **ConnId, int32 *pfFirstCall );

RPC_STATUS __stdcall I_RpcBindingCreateNP(RPC_WSTR ServerName, RPC_WSTR ServiceName, RPC_WSTR NetworkOptions, RPC_BINDING_HANDLE *Binding );

void __stdcall I_RpcSsDontSerializeContext(void );

RPC_STATUS __stdcall I_RpcLaunchDatagramReceiveThread( void * pAddress );

RPC_STATUS __stdcall I_RpcServerRegisterForwardFunction(RPC_FORWARD_FUNCTION * pForwardFunction );
RPC_ADDRESS_CHANGE_FN * __stdcall I_RpcServerInqAddressChangeFn( void );
RPC_STATUS __stdcall I_RpcServerSetAddressChangeFn( RPC_ADDRESS_CHANGE_FN * pAddressChangeFn );

RPC_STATUS __stdcall I_RpcServerInqLocalConnAddress(RPC_BINDING_HANDLE Binding, void *Buffer, uint32 *BufferSize, uint32 *AddressFormat );

RPC_STATUS __stdcall I_RpcServerInqRemoteConnAddress(RPC_BINDING_HANDLE Binding, void *Buffer, uint32 *BufferSize, uint32 *AddressFormat );

void __stdcall I_RpcSessionStrictContextHandle(void );

RPC_STATUS __stdcall I_RpcTurnOnEEInfoPropagation(void );

RPC_STATUS __stdcall I_RpcConnectionInqSockBuffSize( uint32 * RecvBuffSize, uint32 * SendBuffSize );

RPC_STATUS __stdcall I_RpcConnectionSetSockBuffSize( uint32 RecvBuffSize, uint32 SendBuffSize );
typedef void (*RPCLT_PDU_FILTER_FUNC)(void *Buffer, uint32 BufferLength, int32 fDatagram );
typedef void (__cdecl *RPC_SETFILTER_FUNC)(RPCLT_PDU_FILTER_FUNC pfnFilter );

RPC_STATUS __stdcall I_RpcServerStartListening( void * hWnd );

RPC_STATUS __stdcall I_RpcServerStopListening( void );
typedef RPC_STATUS (*RPC_BLOCKING_FN)(void * hWnd, void * Context, void * hSyncEvent );

RPC_STATUS __stdcall I_RpcBindingSetAsync( RPC_BINDING_HANDLE Binding, RPC_BLOCKING_FN BlockingFn, uint32 ServerTid );

RPC_STATUS __stdcall I_RpcSetThreadParams( int32 fClientFree, void *Context, void * hWndClient );

uint32 __stdcall I_RpcWindowProc( void * hWnd, uint32 Message, uint32 wParam, uint32 lParam );

RPC_STATUS __stdcall I_RpcServerUnregisterEndpointA(RPC_CSTR Protseq, RPC_CSTR Endpoint );

RPC_STATUS __stdcall I_RpcServerUnregisterEndpointW(RPC_WSTR Protseq, RPC_WSTR Endpoint );

RPC_STATUS __stdcall I_RpcServerInqTransportType( uint32 * Type );

long __stdcall I_RpcMapWin32Status(RPC_STATUS Status );
typedef struct _RPC_C_OPT_COOKIE_AUTH_DESCRIPTOR {
<field name="BufferSize"><uint32 /></field>
<field name="Buffer"><ptr><char /></ptr></field>
} RPC_C_OPT_COOKIE_AUTH_DESCRIPTOR;
typedef struct _RDR_CALLOUT_STATE {
<field name="LastError"><RPC_STATUS /></field>
<field name="LastEEInfo"><ptr><void /></ptr></field>
<field name="LastCalledStage"><RPC_HTTP_REDIRECTOR_STAGE /></field>
<field name="ServerName"><ptr><uint16 /></ptr></field>
<field name="ServerPort"><ptr><uint16 /></ptr></field>
<field name="RemoteUser"><ptr><uint16 /></ptr></field>
<field name="AuthType"><ptr><uint16 /></ptr></field>
<field name="ResourceTypePresent"><byte /></field>
<field name="SessionIdPresent"><byte /></field>
<field name="InterfacePresent"><byte /></field>
<field name="ResourceType"><UUID /></field>
<field name="SessionId"><UUID /></field>
<field name="Interface"><RPC_SYNTAX_IDENTIFIER /></field>
<field name="CertContext"><ptr><void /></ptr></field>
} RDR_CALLOUT_STATE;
typedef RPC_STATUS (__stdcall *I_RpcProxyIsValidMachineFn)(RPC_WSTR Machine, RPC_WSTR DotMachine, uint32 PortNumber );
typedef RPC_STATUS (__stdcall *I_RpcProxyGetClientAddressFn)(void *Context, char *Buffer, uint32 *BufferLength );
typedef RPC_STATUS (__stdcall *I_RpcProxyGetConnectionTimeoutFn)(uint32 *ConnectionTimeout );
typedef RPC_STATUS (__stdcall *I_RpcPerformCalloutFn) (void *Context, RDR_CALLOUT_STATE *CallOutState, RPC_HTTP_REDIRECTOR_STAGE Stage );
typedef void (__stdcall *I_RpcFreeCalloutStateFn)(RDR_CALLOUT_STATE *CallOutState );
typedef RPC_STATUS (__stdcall *I_RpcProxyGetClientSessionAndResourceUUID)(void *Context, int32 *SessionIdPresent, UUID *SessionId, int32 *ResourceIdPresent, UUID *ResourceId );
typedef RPC_STATUS (__stdcall *I_RpcProxyFilterIfFn) (void *Context, UUID *IfUuid, uint16 IfMajorVersion, int32 *fAllow );
typedef enum RpcProxyPerfCounters {
RpcCurrentUniqueUser = 1, RpcBackEndConnectionAttempts, RpcBackEndConnectionFailed, RpcRequestsPerSecond, RpcIncomingConnections, RpcIncomingBandwidth, RpcOutgoingBandwidth, RpcAttemptedLbsDecisions, RpcFailedLbsDecisions, RpcAttemptedLbsMessages, RpcFailedLbsMessages, RpcLastCounter } RpcPerfCounters;
typedef void (__stdcall *I_RpcProxyUpdatePerfCounterFn)(RpcPerfCounters Counter, int32 ModifyTrend, uint32 Size );
typedef void (__stdcall *I_RpcProxyUpdatePerfCounterBackendServerFn)(uint16* MachineName, int32 IsConnectEvent );
typedef struct tagI_RpcProxyCallbackInterface {
<field name="IsValidMachineFn"><I_RpcProxyIsValidMachineFn /></field>
<field name="GetClientAddressFn"><I_RpcProxyGetClientAddressFn /></field>
<field name="GetConnectionTimeoutFn"><I_RpcProxyGetConnectionTimeoutFn /></field>
<field name="PerformCalloutFn"><I_RpcPerformCalloutFn /></field>
<field name="FreeCalloutStateFn"><I_RpcFreeCalloutStateFn /></field>
<field name="GetClientSessionAndResourceUUIDFn"><I_RpcProxyGetClientSessionAndResourceUUID /></field>
<field name="ProxyFilterIfFn"><I_RpcProxyFilterIfFn /></field>
<field name="RpcProxyUpdatePerfCounterFn"><I_RpcProxyUpdatePerfCounterFn /></field>
<field name="RpcProxyUpdatePerfCounterBackendServerFn"><I_RpcProxyUpdatePerfCounterBackendServerFn /></field>
} I_RpcProxyCallbackInterface;

RPC_STATUS __stdcall I_RpcProxyNewConnection(uint32 ConnectionType, uint16 *ServerAddress, uint16 *ServerPort, uint16 *MinConnTimeout, void *ConnectionParameter, RDR_CALLOUT_STATE *CallOutState, I_RpcProxyCallbackInterface *ProxyCallbackInterface );

RPC_STATUS __stdcall I_RpcReplyToClientWithStatus(void *ConnectionParameter, RPC_STATUS RpcStatus );

void __stdcall I_RpcRecordCalloutFailure(RPC_STATUS RpcStatus, RDR_CALLOUT_STATE *CallOutState, uint16 *DllName );

RPC_STATUS __stdcall I_RpcMgmtEnableDedicatedThreadPool();
<typedef name="RPC_NS_HANDLE"><ptr><void /></ptr></typedef>
RPC_STATUS __stdcall RpcNsBindingExportA( uint32 EntryNameSyntax, RPC_CSTR EntryName, RPC_IF_HANDLE IfSpec, RPC_BINDING_VECTOR *BindingVec, UUID_VECTOR *ObjectUuidVec );
RPC_STATUS __stdcall RpcNsBindingUnexportA( uint32 EntryNameSyntax, RPC_CSTR EntryName, RPC_IF_HANDLE IfSpec, UUID_VECTOR *ObjectUuidVec );
RPC_STATUS __stdcall RpcNsBindingExportW( uint32 EntryNameSyntax, RPC_WSTR EntryName, RPC_IF_HANDLE IfSpec, RPC_BINDING_VECTOR *BindingVec, UUID_VECTOR *ObjectUuidVec );
RPC_STATUS __stdcall RpcNsBindingUnexportW( uint32 EntryNameSyntax, RPC_WSTR EntryName, RPC_IF_HANDLE IfSpec, UUID_VECTOR *ObjectUuidVec );
RPC_STATUS __stdcall RpcNsBindingExportPnPA( uint32 EntryNameSyntax, RPC_CSTR EntryName, RPC_IF_HANDLE IfSpec, UUID_VECTOR *ObjectVector );
RPC_STATUS __stdcall RpcNsBindingUnexportPnPA( uint32 EntryNameSyntax, RPC_CSTR EntryName, RPC_IF_HANDLE IfSpec, UUID_VECTOR *ObjectVector );
RPC_STATUS __stdcall RpcNsBindingExportPnPW( uint32 EntryNameSyntax, RPC_WSTR EntryName, RPC_IF_HANDLE IfSpec, UUID_VECTOR *ObjectVector );
RPC_STATUS __stdcall RpcNsBindingUnexportPnPW( uint32 EntryNameSyntax, RPC_WSTR EntryName, RPC_IF_HANDLE IfSpec, UUID_VECTOR *ObjectVector );
RPC_STATUS __stdcall RpcNsBindingLookupBeginA( uint32 EntryNameSyntax, RPC_CSTR EntryName, RPC_IF_HANDLE IfSpec, UUID *ObjUuid, uint32 BindingMaxCount, RPC_NS_HANDLE *LookupContext );
RPC_STATUS __stdcall RpcNsBindingLookupBeginW( uint32 EntryNameSyntax, RPC_WSTR EntryName, RPC_IF_HANDLE IfSpec, UUID *ObjUuid, uint32 BindingMaxCount, RPC_NS_HANDLE *LookupContext );
RPC_STATUS __stdcall RpcNsBindingLookupNext( RPC_NS_HANDLE LookupContext, RPC_BINDING_VECTOR * * BindingVec );
RPC_STATUS __stdcall RpcNsBindingLookupDone( RPC_NS_HANDLE * LookupContext );
RPC_STATUS __stdcall RpcNsGroupDeleteA( uint32 GroupNameSyntax, RPC_CSTR GroupName );
RPC_STATUS __stdcall RpcNsGroupMbrAddA( uint32 GroupNameSyntax, RPC_CSTR GroupName, uint32 MemberNameSyntax, RPC_CSTR MemberName );
RPC_STATUS __stdcall RpcNsGroupMbrRemoveA( uint32 GroupNameSyntax, RPC_CSTR GroupName, uint32 MemberNameSyntax, RPC_CSTR MemberName );
RPC_STATUS __stdcall RpcNsGroupMbrInqBeginA( uint32 GroupNameSyntax, RPC_CSTR GroupName, uint32 MemberNameSyntax, RPC_NS_HANDLE *InquiryContext );
RPC_STATUS __stdcall RpcNsGroupMbrInqNextA( RPC_NS_HANDLE InquiryContext, RPC_CSTR *MemberName );
RPC_STATUS __stdcall RpcNsGroupDeleteW( uint32 GroupNameSyntax, RPC_WSTR GroupName );
RPC_STATUS __stdcall RpcNsGroupMbrAddW( uint32 GroupNameSyntax, RPC_WSTR GroupName, uint32 MemberNameSyntax, RPC_WSTR MemberName );
RPC_STATUS __stdcall RpcNsGroupMbrRemoveW( uint32 GroupNameSyntax, RPC_WSTR GroupName, uint32 MemberNameSyntax, RPC_WSTR MemberName );
RPC_STATUS __stdcall RpcNsGroupMbrInqBeginW( uint32 GroupNameSyntax, RPC_WSTR GroupName, uint32 MemberNameSyntax, RPC_NS_HANDLE *InquiryContext );
RPC_STATUS __stdcall RpcNsGroupMbrInqNextW( RPC_NS_HANDLE InquiryContext, RPC_WSTR *MemberName );
RPC_STATUS __stdcall RpcNsGroupMbrInqDone( RPC_NS_HANDLE * InquiryContext );
RPC_STATUS __stdcall RpcNsProfileDeleteA( uint32 ProfileNameSyntax, RPC_CSTR ProfileName );
RPC_STATUS __stdcall RpcNsProfileEltAddA( uint32 ProfileNameSyntax, RPC_CSTR ProfileName, RPC_IF_ID *IfId, uint32 MemberNameSyntax, RPC_CSTR MemberName, uint32 Priority, RPC_CSTR Annotation );
RPC_STATUS __stdcall RpcNsProfileEltRemoveA( uint32 ProfileNameSyntax, RPC_CSTR ProfileName, RPC_IF_ID *IfId, uint32 MemberNameSyntax, RPC_CSTR MemberName );
RPC_STATUS __stdcall RpcNsProfileEltInqBeginA( uint32 ProfileNameSyntax, RPC_CSTR ProfileName, uint32 InquiryType, RPC_IF_ID *IfId, uint32 VersOption, uint32 MemberNameSyntax, RPC_CSTR MemberName, RPC_NS_HANDLE *InquiryContext );
RPC_STATUS __stdcall RpcNsProfileEltInqNextA( RPC_NS_HANDLE InquiryContext, RPC_IF_ID *IfId, RPC_CSTR *MemberName, uint32 *Priority, RPC_CSTR *Annotation );
RPC_STATUS __stdcall RpcNsProfileDeleteW( uint32 ProfileNameSyntax, RPC_WSTR ProfileName );
RPC_STATUS __stdcall RpcNsProfileEltAddW( uint32 ProfileNameSyntax, RPC_WSTR ProfileName, RPC_IF_ID *IfId, uint32 MemberNameSyntax, RPC_WSTR MemberName, uint32 Priority, RPC_WSTR Annotation );
RPC_STATUS __stdcall RpcNsProfileEltRemoveW( uint32 ProfileNameSyntax, RPC_WSTR ProfileName, RPC_IF_ID *IfId, uint32 MemberNameSyntax, RPC_WSTR MemberName );
RPC_STATUS __stdcall RpcNsProfileEltInqBeginW( uint32 ProfileNameSyntax, RPC_WSTR ProfileName, uint32 InquiryType, RPC_IF_ID *IfId, uint32 VersOption, uint32 MemberNameSyntax, RPC_WSTR MemberName, RPC_NS_HANDLE *InquiryContext );
RPC_STATUS __stdcall RpcNsProfileEltInqNextW( RPC_NS_HANDLE InquiryContext, RPC_IF_ID *IfId, RPC_WSTR *MemberName, uint32 *Priority, RPC_WSTR *Annotation );
RPC_STATUS __stdcall RpcNsProfileEltInqDone( RPC_NS_HANDLE * InquiryContext );
RPC_STATUS __stdcall RpcNsEntryObjectInqBeginA( uint32 EntryNameSyntax, RPC_CSTR EntryName, RPC_NS_HANDLE *InquiryContext );
RPC_STATUS __stdcall RpcNsEntryObjectInqBeginW( uint32 EntryNameSyntax, RPC_WSTR EntryName, RPC_NS_HANDLE *InquiryContext );
RPC_STATUS __stdcall RpcNsEntryObjectInqNext( RPC_NS_HANDLE InquiryContext, UUID * ObjUuid );
RPC_STATUS __stdcall RpcNsEntryObjectInqDone( RPC_NS_HANDLE * InquiryContext );
RPC_STATUS __stdcall RpcNsEntryExpandNameA( uint32 EntryNameSyntax, RPC_CSTR EntryName, RPC_CSTR *ExpandedName );
RPC_STATUS __stdcall RpcNsMgmtBindingUnexportA( uint32 EntryNameSyntax, RPC_CSTR EntryName, RPC_IF_ID *IfId, uint32 VersOption, UUID_VECTOR *ObjectUuidVec );
RPC_STATUS __stdcall RpcNsMgmtEntryCreateA( uint32 EntryNameSyntax, RPC_CSTR EntryName );
RPC_STATUS __stdcall RpcNsMgmtEntryDeleteA( uint32 EntryNameSyntax, RPC_CSTR EntryName );
RPC_STATUS __stdcall RpcNsMgmtEntryInqIfIdsA( uint32 EntryNameSyntax, RPC_CSTR EntryName, RPC_IF_ID_VECTOR * *IfIdVec );
RPC_STATUS __stdcall RpcNsMgmtHandleSetExpAge( RPC_NS_HANDLE NsHandle, uint32 ExpirationAge );
RPC_STATUS __stdcall RpcNsMgmtInqExpAge( uint32 * ExpirationAge );
RPC_STATUS __stdcall RpcNsMgmtSetExpAge( uint32 ExpirationAge );
RPC_STATUS __stdcall RpcNsEntryExpandNameW( uint32 EntryNameSyntax, RPC_WSTR EntryName, RPC_WSTR *ExpandedName );
RPC_STATUS __stdcall RpcNsMgmtBindingUnexportW( uint32 EntryNameSyntax, RPC_WSTR EntryName, RPC_IF_ID *IfId, uint32 VersOption, UUID_VECTOR *ObjectUuidVec );
RPC_STATUS __stdcall RpcNsMgmtEntryCreateW( uint32 EntryNameSyntax, RPC_WSTR EntryName );
RPC_STATUS __stdcall RpcNsMgmtEntryDeleteW( uint32 EntryNameSyntax, RPC_WSTR EntryName );
RPC_STATUS __stdcall RpcNsMgmtEntryInqIfIdsW( uint32 EntryNameSyntax, RPC_WSTR EntryName, RPC_IF_ID_VECTOR * *IfIdVec );
RPC_STATUS __stdcall RpcNsBindingImportBeginA( uint32 EntryNameSyntax, RPC_CSTR EntryName, RPC_IF_HANDLE IfSpec, UUID *ObjUuid, RPC_NS_HANDLE *ImportContext );
RPC_STATUS __stdcall RpcNsBindingImportBeginW( uint32 EntryNameSyntax, RPC_WSTR EntryName, RPC_IF_HANDLE IfSpec, UUID *ObjUuid, RPC_NS_HANDLE *ImportContext );
RPC_STATUS __stdcall RpcNsBindingImportNext( RPC_NS_HANDLE ImportContext, RPC_BINDING_HANDLE * Binding );
RPC_STATUS __stdcall RpcNsBindingImportDone( RPC_NS_HANDLE * ImportContext );
RPC_STATUS __stdcall RpcNsBindingSelect( RPC_BINDING_VECTOR * BindingVec, RPC_BINDING_HANDLE * Binding );
typedef enum _RPC_NOTIFICATION_TYPES {
RpcNotificationTypeNone, RpcNotificationTypeEvent, RpcNotificationTypeApc, RpcNotificationTypeIoc, RpcNotificationTypeHwnd, RpcNotificationTypeCallback } RPC_NOTIFICATION_TYPES;
typedef enum _RPC_ASYNC_EVENT {
RpcCallComplete, RpcSendComplete, RpcReceiveComplete, RpcClientDisconnect, RpcClientCancel } RPC_ASYNC_EVENT;
<struct name="_RPC_ASYNC_STATE" />
typedef void __stdcall RPCNOTIFICATION_ROUTINE(struct _RPC_ASYNC_STATE *pAsync, void *Context, RPC_ASYNC_EVENT Event);
<typedef name="PFN_RPCNOTIFICATION_ROUTINE"><ptr><RPCNOTIFICATION_ROUTINE /></ptr></typedef>
typedef union _RPC_ASYNC_NOTIFICATION_INFO {
struct {
<field name="NotificationRoutine"><PFN_RPCNOTIFICATION_ROUTINE /></field>
<field name="hThread"><HANDLE /></field>
} APC;
struct {
<field name="hIOPort"><HANDLE /></field>
<field name="dwNumberOfBytesTransferred"><DWORD /></field>
<field name="dwCompletionKey"><DWORD_PTR /></field>
<field name="lpOverlapped"><LPOVERLAPPED /></field>
} IOC;
struct {
<field name="hWnd"><HWND /></field>
<field name="Msg"><UINT /></field>
} HWND;
<field name="hEvent"><HANDLE /></field>
<field name="NotificationRoutine"><PFN_RPCNOTIFICATION_ROUTINE /></field>
} RPC_ASYNC_NOTIFICATION_INFO, *PRPC_ASYNC_NOTIFICATION_INFO;
typedef struct _RPC_ASYNC_STATE {
<field name="Size"><uint32 /></field>
<field name="Signature"><uint32 /></field>
<field name="Lock"><long /></field>
<field name="Flags"><uint32 /></field>
<field name="StubInfo"><ptr><void /></ptr></field>
<field name="UserInfo"><ptr><void /></ptr></field>
<field name="RuntimeInfo"><ptr><void /></ptr></field>
<field name="Event"><RPC_ASYNC_EVENT /></field>
<field name="NotificationType"><RPC_NOTIFICATION_TYPES /></field>
<field name="u"><RPC_ASYNC_NOTIFICATION_INFO /></field>
<field name="Reserved"><arr length="4"><LONG_PTR /></arr></field>
} RPC_ASYNC_STATE, *PRPC_ASYNC_STATE;

RPC_STATUS __stdcall RpcAsyncInitializeHandle(PRPC_ASYNC_STATE pAsync, uint32 Size );

RPC_STATUS __stdcall RpcAsyncRegisterInfo(PRPC_ASYNC_STATE pAsync ) ;

RPC_STATUS __stdcall RpcAsyncGetCallStatus(PRPC_ASYNC_STATE pAsync ) ;

RPC_STATUS __stdcall RpcAsyncCompleteCall(PRPC_ASYNC_STATE pAsync, void *Reply ) ;

RPC_STATUS __stdcall RpcAsyncAbortCall(PRPC_ASYNC_STATE pAsync, uint32 ExceptionCode ) ;

RPC_STATUS __stdcall RpcAsyncCancelCall(PRPC_ASYNC_STATE pAsync, BOOL fAbort ) ;
typedef enum tagExtendedErrorParamTypes {
eeptAnsiString = 1, eeptUnicodeString, eeptLongVal, eeptShortVal, eeptPointerVal, eeptNone, eeptBinary } ExtendedErrorParamTypes;
typedef struct tagBinaryParam {
<field name="Buffer"><ptr><void /></ptr></field>
<field name="Size"><short /></field>
} BinaryParam;
typedef struct tagRPC_EE_INFO_PARAM {
<field name="ParameterType"><ExtendedErrorParamTypes /></field>
union {
<field name="AnsiString"><LPSTR /></field>
<field name="UnicodeString"><LPWSTR /></field>
<field name="LVal"><long /></field>
<field name="SVal"><short /></field>
<field name="PVal"><ULONGLONG /></field>
<field name="BVal"><BinaryParam /></field>
} u;
} RPC_EE_INFO_PARAM;
typedef struct tagRPC_EXTENDED_ERROR_INFO {
<field name="Version"><ULONG /></field>
<field name="ComputerName"><LPWSTR /></field>
<field name="ProcessID"><ULONG /></field>
union {
<field name="SystemTime"><SYSTEMTIME /></field>
<field name="FileTime"><FILETIME /></field>
} u;
<field name="GeneratingComponent"><ULONG /></field>
<field name="Status"><ULONG /></field>
<field name="DetectionLocation"><USHORT /></field>
<field name="Flags"><USHORT /></field>
<field name="NumberOfParameters"><int32 /></field>
<field name="Parameters"><arr length="4"><RPC_EE_INFO_PARAM /></arr></field>
} RPC_EXTENDED_ERROR_INFO;
typedef struct tagRPC_ERROR_ENUM_HANDLE {
<field name="Signature"><ULONG /></field>
<field name="CurrentPos"><ptr><void /></ptr></field>
<field name="Head"><ptr><void /></ptr></field>
} RPC_ERROR_ENUM_HANDLE;

RPC_STATUS __stdcall RpcErrorStartEnumeration(RPC_ERROR_ENUM_HANDLE *EnumHandle );

RPC_STATUS __stdcall RpcErrorGetNextRecord(RPC_ERROR_ENUM_HANDLE *EnumHandle, BOOL CopyStrings, RPC_EXTENDED_ERROR_INFO *ErrorInfo );

RPC_STATUS __stdcall RpcErrorEndEnumeration(RPC_ERROR_ENUM_HANDLE *EnumHandle );

RPC_STATUS __stdcall RpcErrorResetEnumeration(RPC_ERROR_ENUM_HANDLE *EnumHandle );

RPC_STATUS __stdcall RpcErrorGetNumberOfRecords(RPC_ERROR_ENUM_HANDLE *EnumHandle, int32 *Records );

RPC_STATUS __stdcall RpcErrorSaveErrorInfo(RPC_ERROR_ENUM_HANDLE *EnumHandle, PVOID *ErrorBlob, size_t *BlobSize );

RPC_STATUS __stdcall RpcErrorLoadErrorInfo(PVOID ErrorBlob, size_t BlobSize, RPC_ERROR_ENUM_HANDLE *EnumHandle );

RPC_STATUS __stdcall RpcErrorAddRecord(RPC_EXTENDED_ERROR_INFO *ErrorInfo );

void __stdcall RpcErrorClearInformation(void );

RPC_STATUS __stdcall RpcAsyncCleanupThread(DWORD dwTimeout );

RPC_STATUS __stdcall RpcGetAuthorizationContextForClient(RPC_BINDING_HANDLE ClientBinding, BOOL ImpersonateOnReturn, PVOID Reserved1, PLARGE_INTEGER pExpirationTime, LUID Reserved2, DWORD Reserved3, PVOID Reserved4, PVOID *pAuthzClientContext );

RPC_STATUS __stdcall RpcFreeAuthorizationContext(PVOID *pAuthzClientContext );

RPC_STATUS __stdcall RpcSsContextLockExclusive(RPC_BINDING_HANDLE ServerBindingHandle, PVOID UserContext );

RPC_STATUS __stdcall RpcSsContextLockShared(RPC_BINDING_HANDLE ServerBindingHandle, PVOID UserContext );
typedef enum tagRpcLocalAddressFormat {
rlafInvalid = 0, rlafIPv4, rlafIPv6 } RpcLocalAddressFormat;
typedef struct _RPC_CALL_LOCAL_ADDRESS_V1 {
<field name="Version"><uint32 /></field>
<field name="Buffer"><ptr><void /></ptr></field>
<field name="BufferSize"><uint32 /></field>
<field name="AddressFormat"><RpcLocalAddressFormat /></field>
} RPC_CALL_LOCAL_ADDRESS_V1, *PRPC_CALL_LOCAL_ADDRESS_V1;
typedef struct tagRPC_CALL_ATTRIBUTES_V1_W {
<field name="Version"><uint32 /></field>
<field name="Flags"><uint32 /></field>
<field name="ServerPrincipalNameBufferLength"><uint32 /></field>
<field name="ServerPrincipalName"><ptr><uint16 /></ptr></field>
<field name="ClientPrincipalNameBufferLength"><uint32 /></field>
<field name="ClientPrincipalName"><ptr><uint16 /></ptr></field>
<field name="AuthenticationLevel"><uint32 /></field>
<field name="AuthenticationService"><uint32 /></field>
<field name="NullSession"><BOOL /></field>
} RPC_CALL_ATTRIBUTES_V1_W;
typedef struct tagRPC_CALL_ATTRIBUTES_V1_A {
<field name="Version"><uint32 /></field>
<field name="Flags"><uint32 /></field>
<field name="ServerPrincipalNameBufferLength"><uint32 /></field>
<field name="ServerPrincipalName"><ptr><byte /></ptr></field>
<field name="ClientPrincipalNameBufferLength"><uint32 /></field>
<field name="ClientPrincipalName"><ptr><byte /></ptr></field>
<field name="AuthenticationLevel"><uint32 /></field>
<field name="AuthenticationService"><uint32 /></field>
<field name="NullSession"><BOOL /></field>
} RPC_CALL_ATTRIBUTES_V1_A;
typedef enum tagRpcCallType {
rctInvalid = 0, rctNormal, rctTraining, rctGuaranteed } RpcCallType;
typedef enum tagRpcCallClientLocality {
rcclInvalid = 0, rcclLocal, rcclRemote, rcclClientUnknownLocality } RpcCallClientLocality;
typedef struct tagRPC_CALL_ATTRIBUTES_V2_W {
<field name="Version"><uint32 /></field>
<field name="Flags"><uint32 /></field>
<field name="ServerPrincipalNameBufferLength"><uint32 /></field>
<field name="ServerPrincipalName"><ptr><uint16 /></ptr></field>
<field name="ClientPrincipalNameBufferLength"><uint32 /></field>
<field name="ClientPrincipalName"><ptr><uint16 /></ptr></field>
<field name="AuthenticationLevel"><uint32 /></field>
<field name="AuthenticationService"><uint32 /></field>
<field name="NullSession"><BOOL /></field>
<field name="KernelModeCaller"><BOOL /></field>
<field name="ProtocolSequence"><uint32 /></field>
<field name="IsClientLocal"><RpcCallClientLocality /></field>
<field name="ClientPID"><HANDLE /></field>
<field name="CallStatus"><uint32 /></field>
<field name="CallType"><RpcCallType /></field>
<field name="CallLocalAddress"><ptr><RPC_CALL_LOCAL_ADDRESS_V1 /></ptr></field>
<field name="OpNum"><uint16 /></field>
<field name="InterfaceUuid"><UUID /></field>
} RPC_CALL_ATTRIBUTES_V2_W;
typedef struct tagRPC_CALL_ATTRIBUTES_V2_A {
<field name="Version"><uint32 /></field>
<field name="Flags"><uint32 /></field>
<field name="ServerPrincipalNameBufferLength"><uint32 /></field>
<field name="ServerPrincipalName"><ptr><byte /></ptr></field>
<field name="ClientPrincipalNameBufferLength"><uint32 /></field>
<field name="ClientPrincipalName"><ptr><byte /></ptr></field>
<field name="AuthenticationLevel"><uint32 /></field>
<field name="AuthenticationService"><uint32 /></field>
<field name="NullSession"><BOOL /></field>
<field name="KernelModeCaller"><BOOL /></field>
<field name="ProtocolSequence"><uint32 /></field>
<field name="IsClientLocal"><uint32 /></field>
<field name="ClientPID"><HANDLE /></field>
<field name="CallStatus"><uint32 /></field>
<field name="CallType"><RpcCallType /></field>
<field name="CallLocalAddress"><ptr><RPC_CALL_LOCAL_ADDRESS_V1 /></ptr></field>
<field name="OpNum"><uint16 /></field>
<field name="InterfaceUuid"><UUID /></field>
} RPC_CALL_ATTRIBUTES_V2_A;

RPC_STATUS __stdcall RpcServerInqCallAttributesW(RPC_BINDING_HANDLE ClientBinding, void *RpcCallAttributes );

RPC_STATUS __stdcall RpcServerInqCallAttributesA(RPC_BINDING_HANDLE ClientBinding, void *RpcCallAttributes );
<typedef name="RPC_CALL_ATTRIBUTES"><RPC_CALL_ATTRIBUTES_V2_A /></typedef>
typedef enum _RPC_NOTIFICATIONS {
RpcNotificationCallNone = 0, RpcNotificationClientDisconnect = 1, RpcNotificationCallCancel = 2 } RPC_NOTIFICATIONS;

RPC_STATUS __stdcall RpcServerSubscribeForNotification(RPC_BINDING_HANDLE Binding, RPC_NOTIFICATIONS Notification, RPC_NOTIFICATION_TYPES NotificationType, RPC_ASYNC_NOTIFICATION_INFO *NotificationInfo );

RPC_STATUS __stdcall RpcServerUnsubscribeForNotification(RPC_BINDING_HANDLE Binding, RPC_NOTIFICATIONS Notification, uint32 *NotificationsQueued );

RPC_STATUS __stdcall RpcBindingBind(PRPC_ASYNC_STATE pAsync, RPC_BINDING_HANDLE Binding, RPC_IF_HANDLE IfSpec );

RPC_STATUS __stdcall RpcBindingUnbind(RPC_BINDING_HANDLE Binding );

RPC_STATUS __stdcall RpcDiagnoseError(RPC_BINDING_HANDLE BindingHandle, RPC_IF_HANDLE IfSpec, RPC_STATUS RpcStatus, RPC_ERROR_ENUM_HANDLE *EnumHandle, ULONG Options, HWND ParentWindow );
RPC_STATUS __stdcall I_RpcAsyncSetHandle(PRPC_MESSAGE Message, PRPC_ASYNC_STATE pAsync );
RPC_STATUS __stdcall I_RpcAsyncAbortCall(PRPC_ASYNC_STATE pAsync, uint32 ExceptionCode ) ;
int32 __stdcall I_RpcExceptionFilter(uint32 ExceptionCode );
struct HDROP__{int32 unused;
;
typedef struct HDROP__ *HDROP;
extern UINT __stdcall DragQueryFileA( HDROP hDrop, UINT iFile, LPSTR lpszFile, UINT cch);
extern UINT __stdcall DragQueryFileW( HDROP hDrop, UINT iFile, LPWSTR lpszFile, UINT cch);
extern BOOL __stdcall DragQueryPoint( HDROP hDrop, LPPOINT lppt);
extern void __stdcall DragFinish( HDROP hDrop);
extern void __stdcall DragAcceptFiles( HWND hWnd, BOOL fAccept);
extern HINSTANCE __stdcall ShellExecuteA( HWND hwnd, LPCSTR lpOperation, LPCSTR lpFile, LPCSTR lpParameters, LPCSTR lpDirectory, INT nShowCmd);
extern HINSTANCE __stdcall ShellExecuteW( HWND hwnd, LPCWSTR lpOperation, LPCWSTR lpFile, LPCWSTR lpParameters, LPCWSTR lpDirectory, INT nShowCmd);
extern HINSTANCE __stdcall FindExecutableA( LPCSTR lpFile, LPCSTR lpDirectory, LPSTR lpResult);
extern HINSTANCE __stdcall FindExecutableW( LPCWSTR lpFile, LPCWSTR lpDirectory, LPWSTR lpResult);
extern LPWSTR * __stdcall CommandLineToArgvW( LPCWSTR lpCmdLine, int32* pNumArgs);
extern INT __stdcall ShellAboutA( HWND hWnd, LPCSTR szApp, LPCSTR szOtherStuff, HICON hIcon);
extern INT __stdcall ShellAboutW( HWND hWnd, LPCWSTR szApp, LPCWSTR szOtherStuff, HICON hIcon);
extern HICON __stdcall DuplicateIcon( HINSTANCE hInst, HICON hIcon);
extern HICON __stdcall ExtractAssociatedIconA( HINSTANCE hInst, LPSTR pszIconPath, WORD *piIcon);
extern HICON __stdcall ExtractAssociatedIconW( HINSTANCE hInst, LPWSTR pszIconPath, WORD *piIcon);
extern HICON __stdcall ExtractAssociatedIconExA( HINSTANCE hInst, LPSTR pszIconPath, WORD *piIconIndex, WORD *piIconId);
extern HICON __stdcall ExtractAssociatedIconExW( HINSTANCE hInst, LPWSTR pszIconPath, WORD *piIconIndex, WORD *piIconId);
extern HICON __stdcall ExtractIconA( HINSTANCE hInst, LPCSTR lpszExeFileName, UINT nIconIndex);
extern HICON __stdcall ExtractIconW( HINSTANCE hInst, LPCWSTR lpszExeFileName, UINT nIconIndex);
typedef struct _DRAGINFOA {
<field name="uSize"><UINT /></field>
<field name="pt"><POINT /></field>
<field name="fNC"><BOOL /></field>
<field name="lpFileList"><LPSTR /></field>
<field name="grfKeyState"><DWORD /></field>
} DRAGINFOA, *LPDRAGINFOA;
typedef struct _DRAGINFOW {
<field name="uSize"><UINT /></field>
<field name="pt"><POINT /></field>
<field name="fNC"><BOOL /></field>
<field name="lpFileList"><LPWSTR /></field>
<field name="grfKeyState"><DWORD /></field>
} DRAGINFOW, *LPDRAGINFOW;
<typedef name="DRAGINFO"><DRAGINFOA /></typedef>
<typedef name="LPDRAGINFO"><LPDRAGINFOA /></typedef>
typedef struct _AppBarData {
<field name="cbSize"><DWORD /></field>
<field name="hWnd"><HWND /></field>
<field name="uCallbackMessage"><UINT /></field>
<field name="uEdge"><UINT /></field>
<field name="rc"><RECT /></field>
<field name="lParam"><LPARAM /></field>
} APPBARDATA, *PAPPBARDATA;
extern UINT_PTR __stdcall SHAppBarMessage( DWORD dwMessage, PAPPBARDATA pData);
extern DWORD __stdcall DoEnvironmentSubstA( LPSTR szString, UINT cchString);
extern DWORD __stdcall DoEnvironmentSubstW( LPWSTR szString, UINT cchString);
extern UINT __stdcall ExtractIconExA(LPCSTR lpszFile, int32 nIconIndex, HICON *phiconLarge, HICON *phiconSmall, UINT nIcons);
extern UINT __stdcall ExtractIconExW(LPCWSTR lpszFile, int32 nIconIndex, HICON *phiconLarge, HICON *phiconSmall, UINT nIcons);
<typedef name="FILEOP_FLAGS"><WORD /></typedef>
<typedef name="PRINTEROP_FLAGS"><WORD /></typedef>
typedef struct _SHFILEOPSTRUCTA {
<field name="hwnd"><HWND /></field>
<field name="wFunc"><UINT /></field>
<field name="pFrom"><LPCSTR /></field>
<field name="pTo"><LPCSTR /></field>
<field name="fFlags"><FILEOP_FLAGS /></field>
<field name="fAnyOperationsAborted"><BOOL /></field>
<field name="hNameMappings"><LPVOID /></field>
<field name="lpszProgressTitle"><LPCSTR /></field>
} SHFILEOPSTRUCTA, *LPSHFILEOPSTRUCTA;
typedef struct _SHFILEOPSTRUCTW {
<field name="hwnd"><HWND /></field>
<field name="wFunc"><UINT /></field>
<field name="pFrom"><LPCWSTR /></field>
<field name="pTo"><LPCWSTR /></field>
<field name="fFlags"><FILEOP_FLAGS /></field>
<field name="fAnyOperationsAborted"><BOOL /></field>
<field name="hNameMappings"><LPVOID /></field>
<field name="lpszProgressTitle"><LPCWSTR /></field>
} SHFILEOPSTRUCTW, *LPSHFILEOPSTRUCTW;
<typedef name="SHFILEOPSTRUCT"><SHFILEOPSTRUCTA /></typedef>
<typedef name="LPSHFILEOPSTRUCT"><LPSHFILEOPSTRUCTA /></typedef>
extern int32 __stdcall SHFileOperationA( LPSHFILEOPSTRUCTA lpFileOp);
extern int32 __stdcall SHFileOperationW( LPSHFILEOPSTRUCTW lpFileOp);
extern void __stdcall SHFreeNameMappings(HANDLE hNameMappings);
typedef struct _SHNAMEMAPPINGA {
<field name="pszOldPath"><LPSTR /></field>
<field name="pszNewPath"><LPSTR /></field>
<field name="cchOldPath"><int32 /></field>
<field name="cchNewPath"><int32 /></field>
} SHNAMEMAPPINGA, *LPSHNAMEMAPPINGA;
typedef struct _SHNAMEMAPPINGW {
<field name="pszOldPath"><LPWSTR /></field>
<field name="pszNewPath"><LPWSTR /></field>
<field name="cchOldPath"><int32 /></field>
<field name="cchNewPath"><int32 /></field>
} SHNAMEMAPPINGW, *LPSHNAMEMAPPINGW;
<typedef name="SHNAMEMAPPING"><SHNAMEMAPPINGA /></typedef>
<typedef name="LPSHNAMEMAPPING"><LPSHNAMEMAPPINGA /></typedef>
typedef struct _SHELLEXECUTEINFOA {
<field name="cbSize"><DWORD /></field>
<field name="fMask"><ULONG /></field>
<field name="hwnd"><HWND /></field>
<field name="lpVerb"><LPCSTR /></field>
<field name="lpFile"><LPCSTR /></field>
<field name="lpParameters"><LPCSTR /></field>
<field name="lpDirectory"><LPCSTR /></field>
<field name="nShow"><int32 /></field>
<field name="hInstApp"><HINSTANCE /></field>
<field name="lpIDList"><ptr><void /></ptr></field>
<field name="lpClass"><LPCSTR /></field>
<field name="hkeyClass"><HKEY /></field>
<field name="dwHotKey"><DWORD /></field>
union { HANDLE hIcon;
<field name="hMonitor"><HANDLE /></field>
} ;
<field name="hProcess"><HANDLE /></field>
} SHELLEXECUTEINFOA, *LPSHELLEXECUTEINFOA;
typedef struct _SHELLEXECUTEINFOW {
<field name="cbSize"><DWORD /></field>
<field name="fMask"><ULONG /></field>
<field name="hwnd"><HWND /></field>
<field name="lpVerb"><LPCWSTR /></field>
<field name="lpFile"><LPCWSTR /></field>
<field name="lpParameters"><LPCWSTR /></field>
<field name="lpDirectory"><LPCWSTR /></field>
<field name="nShow"><int32 /></field>
<field name="hInstApp"><HINSTANCE /></field>
<field name="lpIDList"><ptr><void /></ptr></field>
<field name="lpClass"><LPCWSTR /></field>
<field name="hkeyClass"><HKEY /></field>
<field name="dwHotKey"><DWORD /></field>
union { HANDLE hIcon;
<field name="hMonitor"><HANDLE /></field>
} ;
<field name="hProcess"><HANDLE /></field>
} SHELLEXECUTEINFOW, *LPSHELLEXECUTEINFOW;
<typedef name="SHELLEXECUTEINFO"><SHELLEXECUTEINFOA /></typedef>
<typedef name="LPSHELLEXECUTEINFO"><LPSHELLEXECUTEINFOA /></typedef>
extern BOOL __stdcall ShellExecuteExA( SHELLEXECUTEINFOA *pExecInfo);
extern BOOL __stdcall ShellExecuteExW( SHELLEXECUTEINFOW *pExecInfo);
typedef struct _SHCREATEPROCESSINFOW {
<field name="cbSize"><DWORD /></field>
<field name="fMask"><ULONG /></field>
<field name="hwnd"><HWND /></field>
<field name="pszFile"><LPCWSTR /></field>
<field name="pszParameters"><LPCWSTR /></field>
<field name="pszCurrentDirectory"><LPCWSTR /></field>
<field name="hUserToken"><HANDLE /></field>
<field name="lpProcessAttributes"><LPSECURITY_ATTRIBUTES /></field>
<field name="lpThreadAttributes"><LPSECURITY_ATTRIBUTES /></field>
<field name="bInheritHandles"><BOOL /></field>
<field name="dwCreationFlags"><DWORD /></field>
<field name="lpStartupInfo"><LPSTARTUPINFOW /></field>
<field name="lpProcessInformation"><LPPROCESS_INFORMATION /></field>
} SHCREATEPROCESSINFOW, *PSHCREATEPROCESSINFOW;
extern BOOL __stdcall SHCreateProcessAsUserW( PSHCREATEPROCESSINFOW pscpi);
extern HRESULT __stdcall SHEvaluateSystemCommandTemplate( PCWSTR pszCmdTemplate, PWSTR *ppszApplication, PWSTR *ppszCommandLine, PWSTR *ppszParameters);
typedef enum ASSOCCLASS { ASSOCCLASS_SHELL_KEY = 0, ASSOCCLASS_PROGID_KEY, ASSOCCLASS_PROGID_STR, ASSOCCLASS_CLSID_KEY, ASSOCCLASS_CLSID_STR, ASSOCCLASS_APP_KEY, ASSOCCLASS_APP_STR, ASSOCCLASS_SYSTEM_STR, ASSOCCLASS_FOLDER, ASSOCCLASS_STAR, } ASSOCCLASS;
typedef struct ASSOCIATIONELEMENT_ {
<field name="ac"><ASSOCCLASS /></field>
<field name="hkClass"><HKEY /></field>
<field name="pszClass"><PCWSTR /></field>
} ASSOCIATIONELEMENT;
extern HRESULT __stdcall AssocCreateForClasses( const ASSOCIATIONELEMENT *rgClasses, ULONG cClasses, const IID * const riid, void **ppv);
typedef struct _SHQUERYRBINFO {
<field name="cbSize"><DWORD /></field>
<field name="i64Size"><__int64 /></field>
<field name="i64NumItems"><__int64 /></field>
} SHQUERYRBINFO, *LPSHQUERYRBINFO;
extern HRESULT __stdcall SHQueryRecycleBinA(LPCSTR pszRootPath, LPSHQUERYRBINFO pSHQueryRBInfo);
extern HRESULT __stdcall SHQueryRecycleBinW(LPCWSTR pszRootPath, LPSHQUERYRBINFO pSHQueryRBInfo);
extern HRESULT __stdcall SHEmptyRecycleBinA(HWND hwnd, LPCSTR pszRootPath, DWORD dwFlags);
extern HRESULT __stdcall SHEmptyRecycleBinW(HWND hwnd, LPCWSTR pszRootPath, DWORD dwFlags);
typedef enum {
QUNS_NOT_PRESENT = 1, QUNS_BUSY = 2, QUNS_RUNNING_D3D_FULL_SCREEN = 3, QUNS_PRESENTATION_MODE = 4, QUNS_ACCEPTS_NOTIFICATIONS = 5, QUNS_QUIET_TIME = 6, } QUERY_USER_NOTIFICATION_STATE;
extern HRESULT __stdcall SHQueryUserNotificationState( QUERY_USER_NOTIFICATION_STATE *pquns);
extern HRESULT __stdcall SHGetPropertyStoreForWindow( HWND hwnd, const IID * const riid, void** ppv);
typedef struct _NOTIFYICONDATAA {
<field name="cbSize"><DWORD /></field>
<field name="hWnd"><HWND /></field>
<field name="uID"><UINT /></field>
<field name="uFlags"><UINT /></field>
<field name="uCallbackMessage"><UINT /></field>
<field name="hIcon"><HICON /></field>
<field name="szTip"><arr length="128"><CHAR /></arr></field>
<field name="dwState"><DWORD /></field>
<field name="dwStateMask"><DWORD /></field>
<field name="szInfo"><arr length="256"><CHAR /></arr></field>
union {
<field name="uTimeout"><UINT /></field>
<field name="uVersion"><UINT /></field>
} ;
<field name="szInfoTitle"><arr length="64"><CHAR /></arr></field>
<field name="dwInfoFlags"><DWORD /></field>
<field name="guidItem"><GUID /></field>
<field name="hBalloonIcon"><HICON /></field>
} NOTIFYICONDATAA, *PNOTIFYICONDATAA;
typedef struct _NOTIFYICONDATAW {
<field name="cbSize"><DWORD /></field>
<field name="hWnd"><HWND /></field>
<field name="uID"><UINT /></field>
<field name="uFlags"><UINT /></field>
<field name="uCallbackMessage"><UINT /></field>
<field name="hIcon"><HICON /></field>
<field name="szTip"><arr length="128"><WCHAR /></arr></field>
<field name="dwState"><DWORD /></field>
<field name="dwStateMask"><DWORD /></field>
<field name="szInfo"><arr length="256"><WCHAR /></arr></field>
union {
<field name="uTimeout"><UINT /></field>
<field name="uVersion"><UINT /></field>
} ;
<field name="szInfoTitle"><arr length="64"><WCHAR /></arr></field>
<field name="dwInfoFlags"><DWORD /></field>
<field name="guidItem"><GUID /></field>
<field name="hBalloonIcon"><HICON /></field>
} NOTIFYICONDATAW, *PNOTIFYICONDATAW;
<typedef name="NOTIFYICONDATA"><NOTIFYICONDATAA /></typedef>
<typedef name="PNOTIFYICONDATA"><PNOTIFYICONDATAA /></typedef>
typedef struct _NOTIFYICONIDENTIFIER {
<field name="cbSize"><DWORD /></field>
<field name="hWnd"><HWND /></field>
<field name="uID"><UINT /></field>
<field name="guidItem"><GUID /></field>
} NOTIFYICONIDENTIFIER, *PNOTIFYICONIDENTIFIER;
extern BOOL __stdcall Shell_NotifyIconA(DWORD dwMessage, PNOTIFYICONDATAA lpData);
extern BOOL __stdcall Shell_NotifyIconW(DWORD dwMessage, PNOTIFYICONDATAW lpData);
extern HRESULT __stdcall Shell_NotifyIconGetRect( const NOTIFYICONIDENTIFIER* identifier, RECT* iconLocation);
typedef struct _SHFILEINFOA {
<field name="hIcon"><HICON /></field>
<field name="iIcon"><int32 /></field>
<field name="dwAttributes"><DWORD /></field>
<field name="szDisplayName"><arr length="260"><CHAR /></arr></field>
<field name="szTypeName"><arr length="80"><CHAR /></arr></field>
} SHFILEINFOA;
typedef struct _SHFILEINFOW {
<field name="hIcon"><HICON /></field>
<field name="iIcon"><int32 /></field>
<field name="dwAttributes"><DWORD /></field>
<field name="szDisplayName"><arr length="260"><WCHAR /></arr></field>
<field name="szTypeName"><arr length="80"><WCHAR /></arr></field>
} SHFILEINFOW;
<typedef name="SHFILEINFO"><SHFILEINFOA /></typedef>
extern DWORD_PTR __stdcall SHGetFileInfoA(LPCSTR pszPath, DWORD dwFileAttributes, SHFILEINFOA *psfi, UINT cbFileInfo, UINT uFlags);
extern DWORD_PTR __stdcall SHGetFileInfoW(LPCWSTR pszPath, DWORD dwFileAttributes, SHFILEINFOW *psfi, UINT cbFileInfo, UINT uFlags);
typedef struct _SHSTOCKICONINFO {
<field name="cbSize"><DWORD /></field>
<field name="hIcon"><HICON /></field>
<field name="iSysImageIndex"><int32 /></field>
<field name="iIcon"><int32 /></field>
<field name="szPath"><arr length="260"><WCHAR /></arr></field>
} SHSTOCKICONINFO;
typedef enum SHSTOCKICONID {
SIID_DOCNOASSOC = 0, SIID_DOCASSOC = 1, SIID_APPLICATION = 2, SIID_FOLDER = 3, SIID_FOLDEROPEN = 4, SIID_DRIVE525 = 5, SIID_DRIVE35 = 6, SIID_DRIVEREMOVE = 7, SIID_DRIVEFIXED = 8, SIID_DRIVENET = 9, SIID_DRIVENETDISABLED = 10, SIID_DRIVECD = 11, SIID_DRIVERAM = 12, SIID_WORLD = 13, SIID_SERVER = 15, SIID_PRINTER = 16, SIID_MYNETWORK = 17, SIID_FIND = 22, SIID_HELP = 23, SIID_SHARE = 28, SIID_LINK = 29, SIID_SLOWFILE = 30, SIID_RECYCLER = 31, SIID_RECYCLERFULL = 32, SIID_MEDIACDAUDIO = 40, SIID_LOCK = 47, SIID_AUTOLIST = 49, SIID_PRINTERNET = 50, SIID_SERVERSHARE = 51, SIID_PRINTERFAX = 52, SIID_PRINTERFAXNET = 53, SIID_PRINTERFILE = 54, SIID_STACK = 55, SIID_MEDIASVCD = 56, SIID_STUFFEDFOLDER = 57, SIID_DRIVEUNKNOWN = 58, SIID_DRIVEDVD = 59, SIID_MEDIADVD = 60, SIID_MEDIADVDRAM = 61, SIID_MEDIADVDRW = 62, SIID_MEDIADVDR = 63, SIID_MEDIADVDROM = 64, SIID_MEDIACDAUDIOPLUS = 65, SIID_MEDIACDRW = 66, SIID_MEDIACDR = 67, SIID_MEDIACDBURN = 68, SIID_MEDIABLANKCD = 69, SIID_MEDIACDROM = 70, SIID_AUDIOFILES = 71, SIID_IMAGEFILES = 72, SIID_VIDEOFILES = 73, SIID_MIXEDFILES = 74, SIID_FOLDERBACK = 75, SIID_FOLDERFRONT = 76, SIID_SHIELD = 77, SIID_WARNING = 78, SIID_INFO = 79, SIID_ERROR = 80, SIID_KEY = 81, SIID_SOFTWARE = 82, SIID_RENAME = 83, SIID_DELETE = 84, SIID_MEDIAAUDIODVD = 85, SIID_MEDIAMOVIEDVD = 86, SIID_MEDIAENHANCEDCD = 87, SIID_MEDIAENHANCEDDVD = 88, SIID_MEDIAHDDVD = 89, SIID_MEDIABLURAY = 90, SIID_MEDIAVCD = 91, SIID_MEDIADVDPLUSR = 92, SIID_MEDIADVDPLUSRW = 93, SIID_DESKTOPPC = 94, SIID_MOBILEPC = 95, SIID_USERS = 96, SIID_MEDIASMARTMEDIA = 97, SIID_MEDIACOMPACTFLASH = 98, SIID_DEVICECELLPHONE = 99, SIID_DEVICECAMERA = 100, SIID_DEVICEVIDEOCAMERA = 101, SIID_DEVICEAUDIOPLAYER = 102, SIID_NETWORKCONNECT = 103, SIID_INTERNET = 104, SIID_ZIPFILE = 105, SIID_SETTINGS = 106, SIID_DRIVEHDDVD = 132, SIID_DRIVEBD = 133, SIID_MEDIAHDDVDROM = 134, SIID_MEDIAHDDVDR = 135, SIID_MEDIAHDDVDRAM = 136, SIID_MEDIABDROM = 137, SIID_MEDIABDR = 138, SIID_MEDIABDRE = 139, SIID_CLUSTEREDDRIVE = 140, SIID_MAX_ICONS = 174, } SHSTOCKICONID;
extern HRESULT __stdcall SHGetStockIconInfo(SHSTOCKICONID siid, UINT uFlags, SHSTOCKICONINFO *psii);
extern BOOL __stdcall SHGetDiskFreeSpaceExA(LPCSTR pszDirectoryName, ULARGE_INTEGER* pulFreeBytesAvailableToCaller, ULARGE_INTEGER* pulTotalNumberOfBytes, ULARGE_INTEGER* pulTotalNumberOfFreeBytes);
extern BOOL __stdcall SHGetDiskFreeSpaceExW(LPCWSTR pszDirectoryName, ULARGE_INTEGER* pulFreeBytesAvailableToCaller, ULARGE_INTEGER* pulTotalNumberOfBytes, ULARGE_INTEGER* pulTotalNumberOfFreeBytes);
extern BOOL __stdcall SHGetNewLinkInfoA( LPCSTR pszLinkTo, LPCSTR pszDir, LPSTR pszName, BOOL *pfMustCopy, UINT uFlags);
extern BOOL __stdcall SHGetNewLinkInfoW( LPCWSTR pszLinkTo, LPCWSTR pszDir, LPWSTR pszName, BOOL *pfMustCopy, UINT uFlags);
extern BOOL __stdcall SHInvokePrinterCommandA(HWND hwnd, UINT uAction, LPCSTR lpBuf1, LPCSTR lpBuf2, BOOL fModal);
extern BOOL __stdcall SHInvokePrinterCommandW(HWND hwnd, UINT uAction, LPCWSTR lpBuf1, LPCWSTR lpBuf2, BOOL fModal);
typedef struct _OPEN_PRINTER_PROPS_INFOA {
<field name="dwSize"><DWORD /></field>
<field name="pszSheetName"><LPSTR /></field>
<field name="uSheetIndex"><UINT /></field>
<field name="dwFlags"><DWORD /></field>
<field name="bModal"><BOOL /></field>
} OPEN_PRINTER_PROPS_INFOA, *POPEN_PRINTER_PROPS_INFOA;
typedef struct _OPEN_PRINTER_PROPS_INFOW {
<field name="dwSize"><DWORD /></field>
<field name="pszSheetName"><LPWSTR /></field>
<field name="uSheetIndex"><UINT /></field>
<field name="dwFlags"><DWORD /></field>
<field name="bModal"><BOOL /></field>
} OPEN_PRINTER_PROPS_INFOW, *POPEN_PRINTER_PROPS_INFOW;
<typedef name="OPEN_PRINTER_PROPS_INFO"><OPEN_PRINTER_PROPS_INFOA /></typedef>
<typedef name="POPEN_PRINTER_PROPS_INFO"><POPEN_PRINTER_PROPS_INFOA /></typedef>
extern HRESULT __stdcall SHLoadNonloadedIconOverlayIdentifiers();
extern HRESULT __stdcall SHIsFileAvailableOffline( LPCWSTR pwszPath, LPDWORD pdwStatus);
extern HRESULT __stdcall SHSetLocalizedName(LPCWSTR pszPath, LPCWSTR pszResModule, int32 idsRes);
extern HRESULT __stdcall SHRemoveLocalizedName(LPCWSTR pszPath);
extern HRESULT __stdcall SHGetLocalizedName( LPCWSTR pszPath, LPWSTR pszResModule, UINT cch, int32 *pidsRes);
extern int32 __cdecl ShellMessageBoxA( HINSTANCE hAppInst, HWND hWnd, LPCSTR lpcText, LPCSTR lpcTitle, UINT fuStyle, ...);
extern int32 __cdecl ShellMessageBoxW( HINSTANCE hAppInst, HWND hWnd, LPCWSTR lpcText, LPCWSTR lpcTitle, UINT fuStyle, ...);
extern BOOL __stdcall IsLFNDriveA( LPCSTR pszPath);
extern BOOL __stdcall IsLFNDriveW( LPCWSTR pszPath);
extern HRESULT __stdcall SHEnumerateUnreadMailAccountsA(HKEY hKeyUser, DWORD dwIndex, LPSTR pszMailAddress, int32 cchMailAddress);
extern HRESULT __stdcall SHEnumerateUnreadMailAccountsW(HKEY hKeyUser, DWORD dwIndex, LPWSTR pszMailAddress, int32 cchMailAddress);
extern HRESULT __stdcall SHGetUnreadMailCountA(HKEY hKeyUser, LPCSTR pszMailAddress, DWORD *pdwCount, FILETIME *pFileTime, LPSTR pszShellExecuteCommand, int32 cchShellExecuteCommand);
extern HRESULT __stdcall SHGetUnreadMailCountW(HKEY hKeyUser, LPCWSTR pszMailAddress, DWORD *pdwCount, FILETIME *pFileTime, LPWSTR pszShellExecuteCommand, int32 cchShellExecuteCommand);
extern HRESULT __stdcall SHSetUnreadMailCountA(LPCSTR pszMailAddress, DWORD dwCount, LPCSTR pszShellExecuteCommand);
extern HRESULT __stdcall SHSetUnreadMailCountW(LPCWSTR pszMailAddress, DWORD dwCount, LPCWSTR pszShellExecuteCommand);
extern BOOL __stdcall SHTestTokenMembership( HANDLE hToken, ULONG ulRID);
extern HRESULT __stdcall SHGetImageList( int32 iImageList, const IID * const riid, void **ppvObj);
typedef HRESULT (__stdcall *PFNCANSHAREFOLDERW)(LPCWSTR pszPath);
typedef HRESULT (__stdcall *PFNSHOWSHAREFOLDERUIW)(HWND hwndParent, LPCWSTR pszPath);
extern BOOL __stdcall InitNetworkAddressControl();
typedef struct tagNC_ADDRESS {
struct NET_ADDRESS_INFO_ *pAddrInfo;
<field name="PortNumber"><USHORT /></field>
<field name="PrefixLength"><BYTE /></field>
} NC_ADDRESS, *PNC_ADDRESS;
extern HRESULT __stdcall SHGetDriveMedia(LPCWSTR pszDrive, DWORD *pdwMediaContent);
typedef struct _PERF_DATA_BLOCK {
<field name="Signature"><arr length="4"><WCHAR /></arr></field>
<field name="LittleEndian"><DWORD /></field>
<field name="Version"><DWORD /></field>
<field name="Revision"><DWORD /></field>
<field name="TotalByteLength"><DWORD /></field>
<field name="HeaderLength"><DWORD /></field>
<field name="NumObjectTypes"><DWORD /></field>
<field name="DefaultObject"><LONG /></field>
<field name="SystemTime"><SYSTEMTIME /></field>
<field name="PerfTime"><LARGE_INTEGER /></field>
<field name="PerfFreq"><LARGE_INTEGER /></field>
<field name="PerfTime100nSec"><LARGE_INTEGER /></field>
<field name="SystemNameLength"><DWORD /></field>
<field name="SystemNameOffset"><DWORD /></field>
} PERF_DATA_BLOCK, *PPERF_DATA_BLOCK;
typedef struct _PERF_OBJECT_TYPE {
<field name="TotalByteLength"><DWORD /></field>
<field name="DefinitionLength"><DWORD /></field>
<field name="HeaderLength"><DWORD /></field>
<field name="ObjectNameTitleIndex"><DWORD /></field>
<field name="ObjectNameTitle"><LPWSTR /></field>
<field name="ObjectHelpTitleIndex"><DWORD /></field>
<field name="ObjectHelpTitle"><LPWSTR /></field>
<field name="DetailLevel"><DWORD /></field>
<field name="NumCounters"><DWORD /></field>
<field name="DefaultCounter"><LONG /></field>
<field name="NumInstances"><LONG /></field>
<field name="CodePage"><DWORD /></field>
<field name="PerfTime"><LARGE_INTEGER /></field>
<field name="PerfFreq"><LARGE_INTEGER /></field>
} PERF_OBJECT_TYPE, *PPERF_OBJECT_TYPE;
typedef struct _PERF_COUNTER_DEFINITION {
<field name="ByteLength"><DWORD /></field>
<field name="CounterNameTitleIndex"><DWORD /></field>
<field name="CounterNameTitle"><LPWSTR /></field>
<field name="CounterHelpTitleIndex"><DWORD /></field>
<field name="CounterHelpTitle"><LPWSTR /></field>
<field name="DefaultScale"><LONG /></field>
<field name="DetailLevel"><DWORD /></field>
<field name="CounterType"><DWORD /></field>
<field name="CounterSize"><DWORD /></field>
<field name="CounterOffset"><DWORD /></field>
} PERF_COUNTER_DEFINITION, *PPERF_COUNTER_DEFINITION;
typedef struct _PERF_INSTANCE_DEFINITION {
<field name="ByteLength"><DWORD /></field>
<field name="ParentObjectTitleIndex"><DWORD /></field>
<field name="ParentObjectInstance"><DWORD /></field>
<field name="UniqueID"><LONG /></field>
<field name="NameOffset"><DWORD /></field>
<field name="NameLength"><DWORD /></field>
} PERF_INSTANCE_DEFINITION, *PPERF_INSTANCE_DEFINITION;
typedef struct _PERF_COUNTER_BLOCK {
<field name="ByteLength"><DWORD /></field>
} PERF_COUNTER_BLOCK, *PPERF_COUNTER_BLOCK;
typedef DWORD (__stdcall PM_OPEN_PROC)(LPWSTR);
typedef DWORD (__stdcall PM_COLLECT_PROC)(LPWSTR, LPVOID *, LPDWORD, LPDWORD);
typedef DWORD (__stdcall PM_CLOSE_PROC) ();
typedef DWORD (__stdcall PM_QUERY_PROC) (LPDWORD, LPVOID *, LPDWORD, LPDWORD);
<typedef name="u_char"><byte /></typedef>
<typedef name="u_short"><uint16 /></typedef>
<typedef name="u_int"><uint32 /></typedef>
<typedef name="u_long"><uint32 /></typedef>
<typedef name="SOCKET"><UINT_PTR /></typedef>
typedef struct fd_set {
<field name="fd_count"><u_int /></field>
<field name="fd_array"><arr length="64"><SOCKET /></arr></field>
} fd_set;
extern int32 __stdcall __WSAFDIsSet(SOCKET, fd_set *);
struct timeval {
<field name="tv_sec"><long /></field>
<field name="tv_usec"><long /></field>
};
struct hostent {
<field name="h_name"><ptr><char /></ptr></field>
char * * h_aliases;
<field name="h_addrtype"><short /></field>
<field name="h_length"><short /></field>
char * * h_addr_list;
};
struct netent {
<field name="n_name"><ptr><char /></ptr></field>
char * * n_aliases;
<field name="n_addrtype"><short /></field>
<field name="n_net"><u_long /></field>
};
struct servent {
<field name="s_name"><ptr><char /></ptr></field>
char * * s_aliases;
<field name="s_port"><short /></field>
<field name="s_proto"><ptr><char /></ptr></field>
};
struct protoent {
<field name="p_name"><ptr><char /></ptr></field>
char * * p_aliases;
<field name="p_proto"><short /></field>
};
typedef struct in_addr {
union {
struct { UCHAR s_b1, s_b2, s_b3, s_b4;
} S_un_b;
struct { USHORT s_w1, s_w2;
} S_un_w;
<field name="S_addr"><ULONG /></field>
} S_un;
} IN_ADDR, *PIN_ADDR, *LPIN_ADDR;
struct sockaddr_in {
<field name="sin_family"><short /></field>
<field name="sin_port"><u_short /></field>
struct in_addr sin_addr;
<field name="sin_zero"><arr length="8"><char /></arr></field>
};
typedef struct WSAData {
<field name="wVersion"><WORD /></field>
<field name="wHighVersion"><WORD /></field>
<field name="szDescription"><arr length="256+1"><char /></arr></field>
<field name="szSystemStatus"><arr length="128+1"><char /></arr></field>
<field name="iMaxSockets"><uint16 /></field>
<field name="iMaxUdpDg"><uint16 /></field>
<field name="lpVendorInfo"><ptr><char /></ptr></field>
} WSADATA;
<typedef name="LPWSADATA"><ptr><WSADATA /></ptr></typedef>
struct ip_mreq {
struct in_addr imr_multiaddr;
struct in_addr imr_interface;
};
struct sockaddr {
<field name="sa_family"><u_short /></field>
<field name="sa_data"><arr length="14"><char /></arr></field>
};
struct sockproto {
<field name="sp_family"><u_short /></field>
<field name="sp_protocol"><u_short /></field>
};
struct linger {
<field name="l_onoff"><u_short /></field>
<field name="l_linger"><u_short /></field>
};
SOCKET __stdcall accept(SOCKET s, struct sockaddr *addr, int32 *addrlen);
int32 __stdcall bind(SOCKET s, const struct sockaddr *addr, int32 namelen);
int32 __stdcall closesocket(SOCKET s);
int32 __stdcall connect(SOCKET s, const struct sockaddr *name, int32 namelen);
int32 __stdcall ioctlsocket(SOCKET s, long cmd, u_long *argp);
int32 __stdcall getpeername(SOCKET s, struct sockaddr *name, int32 * namelen);
int32 __stdcall getsockname(SOCKET s, struct sockaddr *name, int32 * namelen);
int32 __stdcall getsockopt(SOCKET s, int32 level, int32 optname, char * optval, int32 *optlen);
u_long __stdcall htonl(u_long hostlong);
u_short __stdcall htons(u_short hostshort);
uint32 __stdcall inet_addr(const char * cp);
char * __stdcall inet_ntoa(struct in_addr in);
int32 __stdcall listen(SOCKET s, int32 backlog);
u_long __stdcall ntohl(u_long netlong);
u_short __stdcall ntohs(u_short netshort);
int32 __stdcall recv(SOCKET s, char * buf, int32 len, int32 flags);
int32 __stdcall recvfrom(SOCKET s, char * buf, int32 len, int32 flags, struct sockaddr * from, int32 * fromlen);
int32 __stdcall select(int32 nfds, fd_set *readfds, fd_set *writefds, fd_set *exceptfds, const struct timeval *timeout);
int32 __stdcall send(SOCKET s, const char * buf, int32 len, int32 flags);
int32 __stdcall sendto(SOCKET s, const char * buf, int32 len, int32 flags, const struct sockaddr *to, int32 tolen);
int32 __stdcall setsockopt(SOCKET s, int32 level, int32 optname, const char * optval, int32 optlen);
int32 __stdcall shutdown(SOCKET s, int32 how);
SOCKET __stdcall socket(int32 af, int32 type, int32 protocol);
struct hostent * __stdcall gethostbyaddr( const char * addr, int32 len, int32 type);
struct hostent * __stdcall gethostbyname( const char * name);
int32 __stdcall gethostname(char * name, int32 namelen);
struct servent * __stdcall getservbyport( int32 port, const char * proto);
struct servent * __stdcall getservbyname( const char * name, const char * proto);
struct protoent * __stdcall getprotobynumber( int32 proto);
struct protoent * __stdcall getprotobyname( const char * name);
int32 __stdcall WSAStartup( WORD wVersionRequired, LPWSADATA lpWSAData);
int32 __stdcall WSACleanup();
void __stdcall WSASetLastError( int32 iError);
int32 __stdcall WSAGetLastError();
BOOL __stdcall WSAIsBlocking();
int32 __stdcall WSAUnhookBlockingHook();
FARPROC __stdcall WSASetBlockingHook( FARPROC lpBlockFunc);
int32 __stdcall WSACancelBlockingCall();
HANDLE __stdcall WSAAsyncGetServByName( HWND hWnd, u_int wMsg, const char * name, const char * proto, char * buf, int32 buflen);
HANDLE __stdcall WSAAsyncGetServByPort( HWND hWnd, u_int wMsg, int32 port, const char * proto, char * buf, int32 buflen);
HANDLE __stdcall WSAAsyncGetProtoByName( HWND hWnd, u_int wMsg, const char * name, char * buf, int32 buflen);
HANDLE __stdcall WSAAsyncGetProtoByNumber( HWND hWnd, u_int wMsg, int32 number, char * buf, int32 buflen);
HANDLE __stdcall WSAAsyncGetHostByName( HWND hWnd, u_int wMsg, const char * name, char * buf, int32 buflen);
HANDLE __stdcall WSAAsyncGetHostByAddr( HWND hWnd, u_int wMsg, const char * addr, int32 len, int32 type, char * buf, int32 buflen);
int32 __stdcall WSACancelAsyncRequest( HANDLE hAsyncTaskHandle);
int32 __stdcall WSAAsyncSelect( SOCKET s, HWND hWnd, u_int wMsg, long lEvent);
int32 __stdcall WSARecvEx(SOCKET s, char * buf, int32 len, int32 *flags);
typedef struct _TRANSMIT_FILE_BUFFERS {
<field name="Head"><PVOID /></field>
<field name="HeadLength"><DWORD /></field>
<field name="Tail"><PVOID /></field>
<field name="TailLength"><DWORD /></field>
} TRANSMIT_FILE_BUFFERS, *PTRANSMIT_FILE_BUFFERS, *LPTRANSMIT_FILE_BUFFERS;
BOOL __stdcall TransmitFile(SOCKET hSocket, HANDLE hFile, DWORD nNumberOfBytesToWrite, DWORD nNumberOfBytesPerSend, LPOVERLAPPED lpOverlapped, LPTRANSMIT_FILE_BUFFERS lpTransmitBuffers, DWORD dwReserved );
BOOL __stdcall AcceptEx(SOCKET sListenSocket, SOCKET sAcceptSocket, PVOID lpOutputBuffer, DWORD dwReceiveDataLength, DWORD dwLocalAddressLength, DWORD dwRemoteAddressLength, LPDWORD lpdwBytesReceived, LPOVERLAPPED lpOverlapped );
void __stdcall GetAcceptExSockaddrs(PVOID lpOutputBuffer, DWORD dwReceiveDataLength, DWORD dwLocalAddressLength, DWORD dwRemoteAddressLength, struct sockaddr **LocalSockaddr, LPINT LocalSockaddrLength, struct sockaddr **RemoteSockaddr, LPINT RemoteSockaddrLength );
<typedef name="SOCKADDR"><struct name="sockaddr" /></typedef>
typedef struct sockaddr *PSOCKADDR;
typedef struct sockaddr *LPSOCKADDR;
<typedef name="SOCKADDR_IN"><struct name="sockaddr_in" /></typedef>
typedef struct sockaddr_in *PSOCKADDR_IN;
typedef struct sockaddr_in *LPSOCKADDR_IN;
<typedef name="LINGER"><struct name="linger" /></typedef>
typedef struct linger *PLINGER;
typedef struct linger *LPLINGER;
<typedef name="FD_SET"><struct name="fd_set" /></typedef>
typedef struct fd_set *PFD_SET;
typedef struct fd_set *LPFD_SET;
<typedef name="HOSTENT"><struct name="hostent" /></typedef>
typedef struct hostent *PHOSTENT;
typedef struct hostent *LPHOSTENT;
<typedef name="SERVENT"><struct name="servent" /></typedef>
typedef struct servent *PSERVENT;
typedef struct servent *LPSERVENT;
<typedef name="PROTOENT"><struct name="protoent" /></typedef>
typedef struct protoent *PPROTOENT;
typedef struct protoent *LPPROTOENT;
<typedef name="TIMEVAL"><struct name="timeval" /></typedef>
typedef struct timeval *PTIMEVAL;
typedef struct timeval *LPTIMEVAL;
<typedef name="ALG_ID"><uint32 /></typedef>
<typedef name="HCRYPTPROV"><ULONG_PTR /></typedef>
<typedef name="HCRYPTKEY"><ULONG_PTR /></typedef>
<typedef name="HCRYPTHASH"><ULONG_PTR /></typedef>
typedef struct _CMS_KEY_INFO {
<field name="dwVersion"><DWORD /></field>
<field name="Algid"><ALG_ID /></field>
<field name="pbOID"><ptr><BYTE /></ptr></field>
<field name="cbOID"><DWORD /></field>
} CMS_KEY_INFO, *PCMS_KEY_INFO;
typedef struct _HMAC_Info {
<field name="HashAlgid"><ALG_ID /></field>
<field name="pbInnerString"><ptr><BYTE /></ptr></field>
<field name="cbInnerString"><DWORD /></field>
<field name="pbOuterString"><ptr><BYTE /></ptr></field>
<field name="cbOuterString"><DWORD /></field>
} HMAC_INFO, *PHMAC_INFO;
typedef struct _SCHANNEL_ALG {
<field name="dwUse"><DWORD /></field>
<field name="Algid"><ALG_ID /></field>
<field name="cBits"><DWORD /></field>
<field name="dwFlags"><DWORD /></field>
<field name="dwReserved"><DWORD /></field>
} SCHANNEL_ALG, *PSCHANNEL_ALG;
typedef struct _PROV_ENUMALGS {
<field name="aiAlgid"><ALG_ID /></field>
<field name="dwBitLen"><DWORD /></field>
<field name="dwNameLen"><DWORD /></field>
<field name="szName"><arr length="20"><CHAR /></arr></field>
} PROV_ENUMALGS;
typedef struct _PROV_ENUMALGS_EX {
<field name="aiAlgid"><ALG_ID /></field>
<field name="dwDefaultLen"><DWORD /></field>
<field name="dwMinLen"><DWORD /></field>
<field name="dwMaxLen"><DWORD /></field>
<field name="dwProtocols"><DWORD /></field>
<field name="dwNameLen"><DWORD /></field>
<field name="szName"><arr length="20"><CHAR /></arr></field>
<field name="dwLongNameLen"><DWORD /></field>
<field name="szLongName"><arr length="40"><CHAR /></arr></field>
} PROV_ENUMALGS_EX;
typedef struct _PUBLICKEYSTRUC {
<field name="bType"><BYTE /></field>
<field name="bVersion"><BYTE /></field>
<field name="reserved"><WORD /></field>
<field name="aiKeyAlg"><ALG_ID /></field>
} BLOBHEADER, PUBLICKEYSTRUC;
typedef struct _RSAPUBKEY {
<field name="magic"><DWORD /></field>
<field name="bitlen"><DWORD /></field>
<field name="pubexp"><DWORD /></field>
} RSAPUBKEY;
typedef struct _PUBKEY {
<field name="magic"><DWORD /></field>
<field name="bitlen"><DWORD /></field>
} DHPUBKEY, DSSPUBKEY, KEAPUBKEY, TEKPUBKEY;
typedef struct _DSSSEED {
<field name="counter"><DWORD /></field>
<field name="seed"><arr length="20"><BYTE /></arr></field>
} DSSSEED;
typedef struct _PUBKEYVER3 {
<field name="magic"><DWORD /></field>
<field name="bitlenP"><DWORD /></field>
<field name="bitlenQ"><DWORD /></field>
<field name="bitlenJ"><DWORD /></field>
<field name="DSSSeed"><DSSSEED /></field>
} DHPUBKEY_VER3, DSSPUBKEY_VER3;
typedef struct _PRIVKEYVER3 {
<field name="magic"><DWORD /></field>
<field name="bitlenP"><DWORD /></field>
<field name="bitlenQ"><DWORD /></field>
<field name="bitlenJ"><DWORD /></field>
<field name="bitlenX"><DWORD /></field>
<field name="DSSSeed"><DSSSEED /></field>
} DHPRIVKEY_VER3, DSSPRIVKEY_VER3;
typedef struct _KEY_TYPE_SUBTYPE {
<field name="dwKeySpec"><DWORD /></field>
<field name="Type"><GUID /></field>
<field name="Subtype"><GUID /></field>
} KEY_TYPE_SUBTYPE, *PKEY_TYPE_SUBTYPE;
typedef struct _CERT_FORTEZZA_DATA_PROP {
<field name="SerialNumber"><arr length="8"><byte /></arr></field>
<field name="CertIndex"><int32 /></field>
<field name="CertLabel"><arr length="36"><byte /></arr></field>
} CERT_FORTEZZA_DATA_PROP;
typedef struct _CRYPT_RC4_KEY_STATE {
<field name="Key"><arr length="16"><byte /></arr></field>
<field name="SBox"><arr length="256"><byte /></arr></field>
<field name="i"><byte /></field>
<field name="j"><byte /></field>
} CRYPT_RC4_KEY_STATE, *PCRYPT_RC4_KEY_STATE;
typedef struct _CRYPT_DES_KEY_STATE {
<field name="Key"><arr length="8"><byte /></arr></field>
<field name="IV"><arr length="8"><byte /></arr></field>
<field name="Feedback"><arr length="8"><byte /></arr></field>
} CRYPT_DES_KEY_STATE, *PCRYPT_DES_KEY_STATE;
typedef struct _CRYPT_3DES_KEY_STATE {
<field name="Key"><arr length="24"><byte /></arr></field>
<field name="IV"><arr length="8"><byte /></arr></field>
<field name="Feedback"><arr length="8"><byte /></arr></field>
} CRYPT_3DES_KEY_STATE, *PCRYPT_3DES_KEY_STATE;
typedef struct _CRYPT_AES_128_KEY_STATE {
<field name="Key"><arr length="16"><byte /></arr></field>
<field name="IV"><arr length="16"><byte /></arr></field>
<field name="EncryptionState"><arr length="11][16"><byte /></arr></field>
<field name="DecryptionState"><arr length="11][16"><byte /></arr></field>
<field name="Feedback"><arr length="16"><byte /></arr></field>
} CRYPT_AES_128_KEY_STATE, *PCRYPT_AES_128_KEY_STATE;
typedef struct _CRYPT_AES_256_KEY_STATE {
<field name="Key"><arr length="32"><byte /></arr></field>
<field name="IV"><arr length="16"><byte /></arr></field>
<field name="EncryptionState"><arr length="15][16"><byte /></arr></field>
<field name="DecryptionState"><arr length="15][16"><byte /></arr></field>
<field name="Feedback"><arr length="16"><byte /></arr></field>
} CRYPT_AES_256_KEY_STATE, *PCRYPT_AES_256_KEY_STATE;
typedef struct _CRYPTOAPI_BLOB {
<field name="cbData"><DWORD /></field>
<field name="pbData"><ptr><BYTE /></ptr></field>
} CRYPT_INTEGER_BLOB, *PCRYPT_INTEGER_BLOB, CRYPT_UINT_BLOB, *PCRYPT_UINT_BLOB, CRYPT_OBJID_BLOB, *PCRYPT_OBJID_BLOB, CERT_NAME_BLOB, *PCERT_NAME_BLOB, CERT_RDN_VALUE_BLOB, *PCERT_RDN_VALUE_BLOB, CERT_BLOB, *PCERT_BLOB, CRL_BLOB, *PCRL_BLOB, DATA_BLOB, *PDATA_BLOB, CRYPT_DATA_BLOB, *PCRYPT_DATA_BLOB, CRYPT_HASH_BLOB, *PCRYPT_HASH_BLOB, CRYPT_DIGEST_BLOB, *PCRYPT_DIGEST_BLOB, CRYPT_DER_BLOB, *PCRYPT_DER_BLOB, CRYPT_ATTR_BLOB, *PCRYPT_ATTR_BLOB;
typedef struct _CMS_DH_KEY_INFO {
<field name="dwVersion"><DWORD /></field>
<field name="Algid"><ALG_ID /></field>
<field name="pszContentEncObjId"><LPSTR /></field>
<field name="PubInfo"><CRYPT_DATA_BLOB /></field>
<field name="pReserved"><ptr><void /></ptr></field>
} CMS_DH_KEY_INFO, *PCMS_DH_KEY_INFO;

BOOL __stdcall CryptAcquireContextA( HCRYPTPROV *phProv, LPCSTR szContainer, LPCSTR szProvider, DWORD dwProvType, DWORD dwFlags );

BOOL __stdcall CryptAcquireContextW( HCRYPTPROV *phProv, LPCWSTR szContainer, LPCWSTR szProvider, DWORD dwProvType, DWORD dwFlags );

BOOL __stdcall CryptReleaseContext( HCRYPTPROV hProv, DWORD dwFlags );

BOOL __stdcall CryptGenKey( HCRYPTPROV hProv, ALG_ID Algid, DWORD dwFlags, HCRYPTKEY *phKey );

BOOL __stdcall CryptDeriveKey( HCRYPTPROV hProv, ALG_ID Algid, HCRYPTHASH hBaseData, DWORD dwFlags, HCRYPTKEY *phKey );

BOOL __stdcall CryptDestroyKey( HCRYPTKEY hKey );

BOOL __stdcall CryptSetKeyParam( HCRYPTKEY hKey, DWORD dwParam, const BYTE *pbData, DWORD dwFlags );

BOOL __stdcall CryptGetKeyParam( HCRYPTKEY hKey, DWORD dwParam, BYTE *pbData, DWORD *pdwDataLen, DWORD dwFlags );

BOOL __stdcall CryptSetHashParam( HCRYPTHASH hHash, DWORD dwParam, const BYTE *pbData, DWORD dwFlags );

BOOL __stdcall CryptGetHashParam( HCRYPTHASH hHash, DWORD dwParam, BYTE *pbData, DWORD *pdwDataLen, DWORD dwFlags );

BOOL __stdcall CryptSetProvParam( HCRYPTPROV hProv, DWORD dwParam, const BYTE *pbData, DWORD dwFlags );

BOOL __stdcall CryptGetProvParam( HCRYPTPROV hProv, DWORD dwParam, BYTE *pbData, DWORD *pdwDataLen, DWORD dwFlags );

BOOL __stdcall CryptGenRandom( HCRYPTPROV hProv, DWORD dwLen, BYTE *pbBuffer );

BOOL __stdcall CryptGetUserKey( HCRYPTPROV hProv, DWORD dwKeySpec, HCRYPTKEY *phUserKey );

BOOL __stdcall CryptExportKey( HCRYPTKEY hKey, HCRYPTKEY hExpKey, DWORD dwBlobType, DWORD dwFlags, BYTE *pbData, DWORD *pdwDataLen );

BOOL __stdcall CryptImportKey( HCRYPTPROV hProv, const BYTE *pbData, DWORD dwDataLen, HCRYPTKEY hPubKey, DWORD dwFlags, HCRYPTKEY *phKey );

BOOL __stdcall CryptEncrypt( HCRYPTKEY hKey, HCRYPTHASH hHash, BOOL Final, DWORD dwFlags, BYTE *pbData, DWORD *pdwDataLen, DWORD dwBufLen );

BOOL __stdcall CryptDecrypt( HCRYPTKEY hKey, HCRYPTHASH hHash, BOOL Final, DWORD dwFlags, BYTE *pbData, DWORD *pdwDataLen );

BOOL __stdcall CryptCreateHash( HCRYPTPROV hProv, ALG_ID Algid, HCRYPTKEY hKey, DWORD dwFlags, HCRYPTHASH *phHash );

BOOL __stdcall CryptHashData( HCRYPTHASH hHash, const BYTE *pbData, DWORD dwDataLen, DWORD dwFlags );

BOOL __stdcall CryptHashSessionKey( HCRYPTHASH hHash, HCRYPTKEY hKey, DWORD dwFlags );

BOOL __stdcall CryptDestroyHash( HCRYPTHASH hHash );

BOOL __stdcall CryptSignHashA( HCRYPTHASH hHash, DWORD dwKeySpec, LPCSTR szDescription, DWORD dwFlags, BYTE *pbSignature, DWORD *pdwSigLen );

BOOL __stdcall CryptSignHashW( HCRYPTHASH hHash, DWORD dwKeySpec, LPCWSTR szDescription, DWORD dwFlags, BYTE *pbSignature, DWORD *pdwSigLen );

BOOL __stdcall CryptVerifySignatureA( HCRYPTHASH hHash, const BYTE *pbSignature, DWORD dwSigLen, HCRYPTKEY hPubKey, LPCSTR szDescription, DWORD dwFlags );

BOOL __stdcall CryptVerifySignatureW( HCRYPTHASH hHash, const BYTE *pbSignature, DWORD dwSigLen, HCRYPTKEY hPubKey, LPCWSTR szDescription, DWORD dwFlags );

BOOL __stdcall CryptSetProviderA( LPCSTR pszProvName, DWORD dwProvType );

BOOL __stdcall CryptSetProviderW( LPCWSTR pszProvName, DWORD dwProvType );

BOOL __stdcall CryptSetProviderExA( LPCSTR pszProvName, DWORD dwProvType, DWORD *pdwReserved, DWORD dwFlags );

BOOL __stdcall CryptSetProviderExW( LPCWSTR pszProvName, DWORD dwProvType, DWORD *pdwReserved, DWORD dwFlags );

BOOL __stdcall CryptGetDefaultProviderA( DWORD dwProvType, DWORD *pdwReserved, DWORD dwFlags, LPSTR pszProvName, DWORD *pcbProvName );

BOOL __stdcall CryptGetDefaultProviderW( DWORD dwProvType, DWORD *pdwReserved, DWORD dwFlags, LPWSTR pszProvName, DWORD *pcbProvName );

BOOL __stdcall CryptEnumProviderTypesA( DWORD dwIndex, DWORD *pdwReserved, DWORD dwFlags, DWORD *pdwProvType, LPSTR szTypeName, DWORD *pcbTypeName );

BOOL __stdcall CryptEnumProviderTypesW( DWORD dwIndex, DWORD *pdwReserved, DWORD dwFlags, DWORD *pdwProvType, LPWSTR szTypeName, DWORD *pcbTypeName );

BOOL __stdcall CryptEnumProvidersA( DWORD dwIndex, DWORD *pdwReserved, DWORD dwFlags, DWORD *pdwProvType, LPSTR szProvName, DWORD *pcbProvName );

BOOL __stdcall CryptEnumProvidersW( DWORD dwIndex, DWORD *pdwReserved, DWORD dwFlags, DWORD *pdwProvType, LPWSTR szProvName, DWORD *pcbProvName );

BOOL __stdcall CryptContextAddRef( HCRYPTPROV hProv, DWORD *pdwReserved, DWORD dwFlags );

BOOL __stdcall CryptDuplicateKey( HCRYPTKEY hKey, DWORD *pdwReserved, DWORD dwFlags, HCRYPTKEY *phKey );

BOOL __stdcall CryptDuplicateHash( HCRYPTHASH hHash, DWORD *pdwReserved, DWORD dwFlags, HCRYPTHASH *phHash );
BOOL __cdecl GetEncSChannel( BYTE **pData, DWORD *dwDecSize );
<typedef name="NTSTATUS"><LONG /></typedef>
<typedef name="PNTSTATUS"><ptr><NTSTATUS /></ptr></typedef>
typedef struct __BCRYPT_KEY_LENGTHS_STRUCT {
<field name="dwMinLength"><ULONG /></field>
<field name="dwMaxLength"><ULONG /></field>
<field name="dwIncrement"><ULONG /></field>
} BCRYPT_KEY_LENGTHS_STRUCT;
<typedef name="BCRYPT_AUTH_TAG_LENGTHS_STRUCT"><BCRYPT_KEY_LENGTHS_STRUCT /></typedef>
typedef struct _BCRYPT_OID {
<field name="cbOID"><ULONG /></field>
<field name="pbOID"><PUCHAR /></field>
} BCRYPT_OID;
typedef struct _BCRYPT_OID_LIST {
<field name="dwOIDCount"><ULONG /></field>
<field name="pOIDs"><ptr><BCRYPT_OID /></ptr></field>
} BCRYPT_OID_LIST;
typedef struct _BCRYPT_PKCS1_PADDING_INFO {
<field name="pszAlgId"><LPCWSTR /></field>
} BCRYPT_PKCS1_PADDING_INFO;
typedef struct _BCRYPT_PSS_PADDING_INFO {
<field name="pszAlgId"><LPCWSTR /></field>
<field name="cbSalt"><ULONG /></field>
} BCRYPT_PSS_PADDING_INFO;
typedef struct _BCRYPT_OAEP_PADDING_INFO {
<field name="pszAlgId"><LPCWSTR /></field>
<field name="pbLabel"><PUCHAR /></field>
<field name="cbLabel"><ULONG /></field>
} BCRYPT_OAEP_PADDING_INFO;
typedef struct _BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO {
<field name="cbSize"><ULONG /></field>
<field name="dwInfoVersion"><ULONG /></field>
<field name="pbNonce"><PUCHAR /></field>
<field name="cbNonce"><ULONG /></field>
<field name="pbAuthData"><PUCHAR /></field>
<field name="cbAuthData"><ULONG /></field>
<field name="pbTag"><PUCHAR /></field>
<field name="cbTag"><ULONG /></field>
<field name="pbMacContext"><PUCHAR /></field>
<field name="cbMacContext"><ULONG /></field>
<field name="cbAAD"><ULONG /></field>
<field name="cbData"><ULONGLONG /></field>
<field name="dwFlags"><ULONG /></field>
} BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO, *PBCRYPT_AUTHENTICATED_CIPHER_MODE_INFO;
typedef struct _BCryptBuffer {
<field name="cbBuffer"><ULONG /></field>
<field name="BufferType"><ULONG /></field>
<field name="pvBuffer"><PVOID /></field>
} BCryptBuffer, * PBCryptBuffer;
typedef struct _BCryptBufferDesc {
<field name="ulVersion"><ULONG /></field>
<field name="cBuffers"><ULONG /></field>
<field name="pBuffers"><PBCryptBuffer /></field>
} BCryptBufferDesc, * PBCryptBufferDesc;
<typedef name="BCRYPT_HANDLE"><PVOID /></typedef>
<typedef name="BCRYPT_ALG_HANDLE"><PVOID /></typedef>
<typedef name="BCRYPT_KEY_HANDLE"><PVOID /></typedef>
<typedef name="BCRYPT_HASH_HANDLE"><PVOID /></typedef>
<typedef name="BCRYPT_SECRET_HANDLE"><PVOID /></typedef>
typedef struct _BCRYPT_KEY_BLOB {
<field name="Magic"><ULONG /></field>
} BCRYPT_KEY_BLOB;
typedef struct _BCRYPT_RSAKEY_BLOB {
<field name="Magic"><ULONG /></field>
<field name="BitLength"><ULONG /></field>
<field name="cbPublicExp"><ULONG /></field>
<field name="cbModulus"><ULONG /></field>
<field name="cbPrime1"><ULONG /></field>
<field name="cbPrime2"><ULONG /></field>
} BCRYPT_RSAKEY_BLOB;
typedef struct _BCRYPT_ECCKEY_BLOB {
<field name="dwMagic"><ULONG /></field>
<field name="cbKey"><ULONG /></field>
} BCRYPT_ECCKEY_BLOB, *PBCRYPT_ECCKEY_BLOB;
typedef struct _BCRYPT_DH_KEY_BLOB {
<field name="dwMagic"><ULONG /></field>
<field name="cbKey"><ULONG /></field>
} BCRYPT_DH_KEY_BLOB, *PBCRYPT_DH_KEY_BLOB;
typedef struct _BCRYPT_DH_PARAMETER_HEADER {
<field name="cbLength"><ULONG /></field>
<field name="dwMagic"><ULONG /></field>
<field name="cbKeyLength"><ULONG /></field>
} BCRYPT_DH_PARAMETER_HEADER;
typedef struct _BCRYPT_DSA_KEY_BLOB {
<field name="dwMagic"><ULONG /></field>
<field name="cbKey"><ULONG /></field>
<field name="Count"><arr length="4"><UCHAR /></arr></field>
<field name="Seed"><arr length="20"><UCHAR /></arr></field>
<field name="q"><arr length="20"><UCHAR /></arr></field>
} BCRYPT_DSA_KEY_BLOB, *PBCRYPT_DSA_KEY_BLOB;
typedef struct _BCRYPT_KEY_DATA_BLOB_HEADER {
<field name="dwMagic"><ULONG /></field>
<field name="dwVersion"><ULONG /></field>
<field name="cbKeyData"><ULONG /></field>
} BCRYPT_KEY_DATA_BLOB_HEADER, *PBCRYPT_KEY_DATA_BLOB_HEADER;
typedef struct _BCRYPT_DSA_PARAMETER_HEADER {
<field name="cbLength"><ULONG /></field>
<field name="dwMagic"><ULONG /></field>
<field name="cbKeyLength"><ULONG /></field>
<field name="Count"><arr length="4"><UCHAR /></arr></field>
<field name="Seed"><arr length="20"><UCHAR /></arr></field>
<field name="q"><arr length="20"><UCHAR /></arr></field>
} BCRYPT_DSA_PARAMETER_HEADER;
NTSTATUS __stdcall BCryptOpenAlgorithmProvider( BCRYPT_ALG_HANDLE *phAlgorithm, LPCWSTR pszAlgId, LPCWSTR pszImplementation, ULONG dwFlags);
typedef struct _BCRYPT_ALGORITHM_IDENTIFIER {
<field name="pszName"><LPWSTR /></field>
<field name="dwClass"><ULONG /></field>
<field name="dwFlags"><ULONG /></field>
} BCRYPT_ALGORITHM_IDENTIFIER;
NTSTATUS __stdcall BCryptEnumAlgorithms( ULONG dwAlgOperations, ULONG *pAlgCount, BCRYPT_ALGORITHM_IDENTIFIER **ppAlgList, ULONG dwFlags);
typedef struct _BCRYPT_PROVIDER_NAME {
<field name="pszProviderName"><LPWSTR /></field>
} BCRYPT_PROVIDER_NAME;
NTSTATUS __stdcall BCryptEnumProviders( LPCWSTR pszAlgId, ULONG *pImplCount, BCRYPT_PROVIDER_NAME **ppImplList, ULONG dwFlags);
NTSTATUS __stdcall BCryptGetProperty( BCRYPT_HANDLE hObject, LPCWSTR pszProperty, PUCHAR pbOutput, ULONG cbOutput, ULONG *pcbResult, ULONG dwFlags);
NTSTATUS __stdcall BCryptSetProperty( BCRYPT_HANDLE hObject, LPCWSTR pszProperty, PUCHAR pbInput, ULONG cbInput, ULONG dwFlags);
NTSTATUS __stdcall BCryptCloseAlgorithmProvider( BCRYPT_ALG_HANDLE hAlgorithm, ULONG dwFlags);
void __stdcall BCryptFreeBuffer( PVOID pvBuffer);
NTSTATUS __stdcall BCryptGenerateSymmetricKey( BCRYPT_ALG_HANDLE hAlgorithm, BCRYPT_KEY_HANDLE *phKey, PUCHAR pbKeyObject, ULONG cbKeyObject, PUCHAR pbSecret, ULONG cbSecret, ULONG dwFlags);
NTSTATUS __stdcall BCryptGenerateKeyPair( BCRYPT_ALG_HANDLE hAlgorithm, BCRYPT_KEY_HANDLE *phKey, ULONG dwLength, ULONG dwFlags);
NTSTATUS __stdcall BCryptEncrypt( BCRYPT_KEY_HANDLE hKey, PUCHAR pbInput, ULONG cbInput, void *pPaddingInfo, PUCHAR pbIV, ULONG cbIV, PUCHAR pbOutput, ULONG cbOutput, ULONG *pcbResult, ULONG dwFlags);
NTSTATUS __stdcall BCryptDecrypt( BCRYPT_KEY_HANDLE hKey, PUCHAR pbInput, ULONG cbInput, void *pPaddingInfo, PUCHAR pbIV, ULONG cbIV, PUCHAR pbOutput, ULONG cbOutput, ULONG *pcbResult, ULONG dwFlags);
NTSTATUS __stdcall BCryptExportKey( BCRYPT_KEY_HANDLE hKey, BCRYPT_KEY_HANDLE hExportKey, LPCWSTR pszBlobType, PUCHAR pbOutput, ULONG cbOutput, ULONG *pcbResult, ULONG dwFlags);
NTSTATUS __stdcall BCryptImportKey( BCRYPT_ALG_HANDLE hAlgorithm, BCRYPT_KEY_HANDLE hImportKey, LPCWSTR pszBlobType, BCRYPT_KEY_HANDLE *phKey, PUCHAR pbKeyObject, ULONG cbKeyObject, PUCHAR pbInput, ULONG cbInput, ULONG dwFlags);
NTSTATUS __stdcall BCryptImportKeyPair( BCRYPT_ALG_HANDLE hAlgorithm, BCRYPT_KEY_HANDLE hImportKey, LPCWSTR pszBlobType, BCRYPT_KEY_HANDLE *phKey, PUCHAR pbInput, ULONG cbInput, ULONG dwFlags);
NTSTATUS __stdcall BCryptDuplicateKey( BCRYPT_KEY_HANDLE hKey, BCRYPT_KEY_HANDLE *phNewKey, PUCHAR pbKeyObject, ULONG cbKeyObject, ULONG dwFlags);
NTSTATUS __stdcall BCryptFinalizeKeyPair( BCRYPT_KEY_HANDLE hKey, ULONG dwFlags);
NTSTATUS __stdcall BCryptDestroyKey( BCRYPT_KEY_HANDLE hKey);
NTSTATUS __stdcall BCryptDestroySecret( BCRYPT_SECRET_HANDLE hSecret);
NTSTATUS __stdcall BCryptSignHash( BCRYPT_KEY_HANDLE hKey, void *pPaddingInfo, PUCHAR pbInput, ULONG cbInput, PUCHAR pbOutput, ULONG cbOutput, ULONG *pcbResult, ULONG dwFlags);
NTSTATUS __stdcall BCryptVerifySignature( BCRYPT_KEY_HANDLE hKey, void *pPaddingInfo, PUCHAR pbHash, ULONG cbHash, PUCHAR pbSignature, ULONG cbSignature, ULONG dwFlags);
NTSTATUS __stdcall BCryptSecretAgreement( BCRYPT_KEY_HANDLE hPrivKey, BCRYPT_KEY_HANDLE hPubKey, BCRYPT_SECRET_HANDLE *phAgreedSecret, ULONG dwFlags);
NTSTATUS __stdcall BCryptDeriveKey( BCRYPT_SECRET_HANDLE hSharedSecret, LPCWSTR pwszKDF, BCryptBufferDesc *pParameterList, PUCHAR pbDerivedKey, ULONG cbDerivedKey, ULONG *pcbResult, ULONG dwFlags);
NTSTATUS __stdcall BCryptCreateHash( BCRYPT_ALG_HANDLE hAlgorithm, BCRYPT_HASH_HANDLE *phHash, PUCHAR pbHashObject, ULONG cbHashObject, PUCHAR pbSecret, ULONG cbSecret, ULONG dwFlags);
NTSTATUS __stdcall BCryptHashData( BCRYPT_HASH_HANDLE hHash, PUCHAR pbInput, ULONG cbInput, ULONG dwFlags);
NTSTATUS __stdcall BCryptFinishHash( BCRYPT_HASH_HANDLE hHash, PUCHAR pbOutput, ULONG cbOutput, ULONG dwFlags);
NTSTATUS __stdcall BCryptDuplicateHash( BCRYPT_HASH_HANDLE hHash, BCRYPT_HASH_HANDLE *phNewHash, PUCHAR pbHashObject, ULONG cbHashObject, ULONG dwFlags);
NTSTATUS __stdcall BCryptDestroyHash( BCRYPT_HASH_HANDLE hHash);
NTSTATUS __stdcall BCryptGenRandom( BCRYPT_ALG_HANDLE hAlgorithm, PUCHAR pbBuffer, ULONG cbBuffer, ULONG dwFlags);
NTSTATUS __stdcall BCryptDeriveKeyCapi( BCRYPT_HASH_HANDLE hHash, BCRYPT_ALG_HANDLE hTargetAlg, PUCHAR pbDerivedKey, ULONG cbDerivedKey, ULONG dwFlags);
NTSTATUS __stdcall BCryptDeriveKeyPBKDF2( BCRYPT_ALG_HANDLE hPrf, PUCHAR pbPassword, ULONG cbPassword, PUCHAR pbSalt, ULONG cbSalt, ULONGLONG cIterations, PUCHAR pbDerivedKey, ULONG cbDerivedKey, ULONG dwFlags);
typedef struct _BCRYPT_INTERFACE_VERSION {
<field name="MajorVersion"><USHORT /></field>
<field name="MinorVersion"><USHORT /></field>
} BCRYPT_INTERFACE_VERSION, *PBCRYPT_INTERFACE_VERSION;
typedef struct _CRYPT_INTERFACE_REG {
<field name="dwInterface"><ULONG /></field>
<field name="dwFlags"><ULONG /></field>
<field name="cFunctions"><ULONG /></field>
<field name="rgpszFunctions"><ptr><PWSTR /></ptr></field>
} CRYPT_INTERFACE_REG, *PCRYPT_INTERFACE_REG;
typedef struct _CRYPT_IMAGE_REG {
<field name="pszImage"><PWSTR /></field>
<field name="cInterfaces"><ULONG /></field>
<field name="rgpInterfaces"><ptr><PCRYPT_INTERFACE_REG /></ptr></field>
} CRYPT_IMAGE_REG, *PCRYPT_IMAGE_REG;
typedef struct _CRYPT_PROVIDER_REG {
<field name="cAliases"><ULONG /></field>
<field name="rgpszAliases"><ptr><PWSTR /></ptr></field>
<field name="pUM"><PCRYPT_IMAGE_REG /></field>
<field name="pKM"><PCRYPT_IMAGE_REG /></field>
} CRYPT_PROVIDER_REG, *PCRYPT_PROVIDER_REG;
typedef struct _CRYPT_PROVIDERS {
<field name="cProviders"><ULONG /></field>
<field name="rgpszProviders"><ptr><PWSTR /></ptr></field>
} CRYPT_PROVIDERS, *PCRYPT_PROVIDERS;
typedef struct _CRYPT_CONTEXT_CONFIG {
<field name="dwFlags"><ULONG /></field>
<field name="dwReserved"><ULONG /></field>
} CRYPT_CONTEXT_CONFIG, *PCRYPT_CONTEXT_CONFIG;
typedef struct _CRYPT_CONTEXT_FUNCTION_CONFIG {
<field name="dwFlags"><ULONG /></field>
<field name="dwReserved"><ULONG /></field>
} CRYPT_CONTEXT_FUNCTION_CONFIG, *PCRYPT_CONTEXT_FUNCTION_CONFIG;
typedef struct _CRYPT_CONTEXTS {
<field name="cContexts"><ULONG /></field>
<field name="rgpszContexts"><ptr><PWSTR /></ptr></field>
} CRYPT_CONTEXTS, *PCRYPT_CONTEXTS;
typedef struct _CRYPT_CONTEXT_FUNCTIONS {
<field name="cFunctions"><ULONG /></field>
<field name="rgpszFunctions"><ptr><PWSTR /></ptr></field>
} CRYPT_CONTEXT_FUNCTIONS, *PCRYPT_CONTEXT_FUNCTIONS;
typedef struct _CRYPT_CONTEXT_FUNCTION_PROVIDERS {
<field name="cProviders"><ULONG /></field>
<field name="rgpszProviders"><ptr><PWSTR /></ptr></field>
} CRYPT_CONTEXT_FUNCTION_PROVIDERS, *PCRYPT_CONTEXT_FUNCTION_PROVIDERS;
typedef struct _CRYPT_PROPERTY_REF {
<field name="pszProperty"><PWSTR /></field>
<field name="cbValue"><ULONG /></field>
<field name="pbValue"><PUCHAR /></field>
} CRYPT_PROPERTY_REF, *PCRYPT_PROPERTY_REF;
typedef struct _CRYPT_IMAGE_REF {
<field name="pszImage"><PWSTR /></field>
<field name="dwFlags"><ULONG /></field>
} CRYPT_IMAGE_REF, *PCRYPT_IMAGE_REF;
typedef struct _CRYPT_PROVIDER_REF {
<field name="dwInterface"><ULONG /></field>
<field name="pszFunction"><PWSTR /></field>
<field name="pszProvider"><PWSTR /></field>
<field name="cProperties"><ULONG /></field>
<field name="rgpProperties"><ptr><PCRYPT_PROPERTY_REF /></ptr></field>
<field name="pUM"><PCRYPT_IMAGE_REF /></field>
<field name="pKM"><PCRYPT_IMAGE_REF /></field>
} CRYPT_PROVIDER_REF, *PCRYPT_PROVIDER_REF;
typedef struct _CRYPT_PROVIDER_REFS {
<field name="cProviders"><ULONG /></field>
<field name="rgpProviders"><ptr><PCRYPT_PROVIDER_REF /></ptr></field>
} CRYPT_PROVIDER_REFS, *PCRYPT_PROVIDER_REFS;
NTSTATUS __stdcall BCryptQueryProviderRegistration( LPCWSTR pszProvider, ULONG dwMode, ULONG dwInterface, ULONG* pcbBuffer, PCRYPT_PROVIDER_REG *ppBuffer);
NTSTATUS __stdcall BCryptEnumRegisteredProviders( ULONG* pcbBuffer, PCRYPT_PROVIDERS *ppBuffer);
NTSTATUS __stdcall BCryptCreateContext( ULONG dwTable, LPCWSTR pszContext, PCRYPT_CONTEXT_CONFIG pConfig);
NTSTATUS __stdcall BCryptDeleteContext( ULONG dwTable, LPCWSTR pszContext);
NTSTATUS __stdcall BCryptEnumContexts( ULONG dwTable, ULONG* pcbBuffer, PCRYPT_CONTEXTS *ppBuffer);
NTSTATUS __stdcall BCryptConfigureContext( ULONG dwTable, LPCWSTR pszContext, PCRYPT_CONTEXT_CONFIG pConfig);
NTSTATUS __stdcall BCryptQueryContextConfiguration( ULONG dwTable, LPCWSTR pszContext, ULONG* pcbBuffer, PCRYPT_CONTEXT_CONFIG *ppBuffer);
NTSTATUS __stdcall BCryptAddContextFunction( ULONG dwTable, LPCWSTR pszContext, ULONG dwInterface, LPCWSTR pszFunction, ULONG dwPosition);
NTSTATUS __stdcall BCryptRemoveContextFunction( ULONG dwTable, LPCWSTR pszContext, ULONG dwInterface, LPCWSTR pszFunction);
NTSTATUS __stdcall BCryptEnumContextFunctions( ULONG dwTable, LPCWSTR pszContext, ULONG dwInterface, ULONG* pcbBuffer, PCRYPT_CONTEXT_FUNCTIONS *ppBuffer);
NTSTATUS __stdcall BCryptConfigureContextFunction( ULONG dwTable, LPCWSTR pszContext, ULONG dwInterface, LPCWSTR pszFunction, PCRYPT_CONTEXT_FUNCTION_CONFIG pConfig);
NTSTATUS __stdcall BCryptQueryContextFunctionConfiguration( ULONG dwTable, LPCWSTR pszContext, ULONG dwInterface, LPCWSTR pszFunction, ULONG* pcbBuffer, PCRYPT_CONTEXT_FUNCTION_CONFIG *ppBuffer);
NTSTATUS __stdcall BCryptEnumContextFunctionProviders( ULONG dwTable, LPCWSTR pszContext, ULONG dwInterface, LPCWSTR pszFunction, ULONG* pcbBuffer, PCRYPT_CONTEXT_FUNCTION_PROVIDERS *ppBuffer);
NTSTATUS __stdcall BCryptSetContextFunctionProperty( ULONG dwTable, LPCWSTR pszContext, ULONG dwInterface, LPCWSTR pszFunction, LPCWSTR pszProperty, ULONG cbValue, PUCHAR pbValue);
NTSTATUS __stdcall BCryptQueryContextFunctionProperty( ULONG dwTable, LPCWSTR pszContext, ULONG dwInterface, LPCWSTR pszFunction, LPCWSTR pszProperty, ULONG* pcbValue, PUCHAR *ppbValue);
NTSTATUS __stdcall BCryptRegisterConfigChangeNotify( HANDLE *phEvent);
NTSTATUS __stdcall BCryptUnregisterConfigChangeNotify( HANDLE hEvent);
NTSTATUS __stdcall BCryptResolveProviders( LPCWSTR pszContext, ULONG dwInterface, LPCWSTR pszFunction, LPCWSTR pszProvider, ULONG dwMode, ULONG dwFlags, ULONG* pcbBuffer, PCRYPT_PROVIDER_REFS *ppBuffer);
NTSTATUS __stdcall BCryptGetFipsAlgorithmMode( BOOLEAN *pfEnabled );
<typedef name="SECURITY_STATUS"><LONG /></typedef>
<typedef name="NCryptBuffer"><BCryptBuffer /></typedef>
<typedef name="PNCryptBuffer"><ptr><BCryptBuffer /></ptr></typedef>
<typedef name="NCryptBufferDesc"><BCryptBufferDesc /></typedef>
<typedef name="PNCryptBufferDesc"><ptr><BCryptBufferDesc /></ptr></typedef>
<typedef name="NCRYPT_HANDLE"><ULONG_PTR /></typedef>
<typedef name="NCRYPT_PROV_HANDLE"><ULONG_PTR /></typedef>
<typedef name="NCRYPT_KEY_HANDLE"><ULONG_PTR /></typedef>
<typedef name="NCRYPT_HASH_HANDLE"><ULONG_PTR /></typedef>
<typedef name="NCRYPT_SECRET_HANDLE"><ULONG_PTR /></typedef>
SECURITY_STATUS __stdcall NCryptOpenStorageProvider( NCRYPT_PROV_HANDLE *phProvider, LPCWSTR pszProviderName, DWORD dwFlags);
typedef struct _NCryptAlgorithmName {
<field name="pszName"><LPWSTR /></field>
<field name="dwClass"><DWORD /></field>
<field name="dwAlgOperations"><DWORD /></field>
<field name="dwFlags"><DWORD /></field>
} NCryptAlgorithmName;
SECURITY_STATUS __stdcall NCryptEnumAlgorithms( NCRYPT_PROV_HANDLE hProvider, DWORD dwAlgOperations, DWORD * pdwAlgCount, NCryptAlgorithmName **ppAlgList, DWORD dwFlags);
SECURITY_STATUS __stdcall NCryptIsAlgSupported( NCRYPT_PROV_HANDLE hProvider, LPCWSTR pszAlgId, DWORD dwFlags);
typedef struct NCryptKeyName {
<field name="pszName"><LPWSTR /></field>
<field name="pszAlgid"><LPWSTR /></field>
<field name="dwLegacyKeySpec"><DWORD /></field>
<field name="dwFlags"><DWORD /></field>
} NCryptKeyName;
SECURITY_STATUS __stdcall NCryptEnumKeys( NCRYPT_PROV_HANDLE hProvider, LPCWSTR pszScope, NCryptKeyName **ppKeyName, PVOID * ppEnumState, DWORD dwFlags);
typedef struct NCryptProviderName {
<field name="pszName"><LPWSTR /></field>
<field name="pszComment"><LPWSTR /></field>
} NCryptProviderName;
SECURITY_STATUS __stdcall NCryptEnumStorageProviders( DWORD * pdwProviderCount, NCryptProviderName **ppProviderList, DWORD dwFlags);
SECURITY_STATUS __stdcall NCryptFreeBuffer( PVOID pvInput);
SECURITY_STATUS __stdcall NCryptOpenKey( NCRYPT_PROV_HANDLE hProvider, NCRYPT_KEY_HANDLE *phKey, LPCWSTR pszKeyName, DWORD dwLegacyKeySpec, DWORD dwFlags);
SECURITY_STATUS __stdcall NCryptCreatePersistedKey( NCRYPT_PROV_HANDLE hProvider, NCRYPT_KEY_HANDLE *phKey, LPCWSTR pszAlgId, LPCWSTR pszKeyName, DWORD dwLegacyKeySpec, DWORD dwFlags);
typedef struct __NCRYPT_UI_POLICY_BLOB {
<field name="dwVersion"><DWORD /></field>
<field name="dwFlags"><DWORD /></field>
<field name="cbCreationTitle"><DWORD /></field>
<field name="cbFriendlyName"><DWORD /></field>
<field name="cbDescription"><DWORD /></field>
} NCRYPT_UI_POLICY_BLOB;
typedef struct __NCRYPT_UI_POLICY {
<field name="dwVersion"><DWORD /></field>
<field name="dwFlags"><DWORD /></field>
<field name="pszCreationTitle"><LPCWSTR /></field>
<field name="pszFriendlyName"><LPCWSTR /></field>
<field name="pszDescription"><LPCWSTR /></field>
} NCRYPT_UI_POLICY;
typedef struct __NCRYPT_SUPPORTED_LENGTHS {
<field name="dwMinLength"><DWORD /></field>
<field name="dwMaxLength"><DWORD /></field>
<field name="dwIncrement"><DWORD /></field>
<field name="dwDefaultLength"><DWORD /></field>
} NCRYPT_SUPPORTED_LENGTHS;
SECURITY_STATUS __stdcall NCryptGetProperty( NCRYPT_HANDLE hObject, LPCWSTR pszProperty, PBYTE pbOutput, DWORD cbOutput, DWORD * pcbResult, DWORD dwFlags);
SECURITY_STATUS __stdcall NCryptSetProperty( NCRYPT_HANDLE hObject, LPCWSTR pszProperty, PBYTE pbInput, DWORD cbInput, DWORD dwFlags);
SECURITY_STATUS __stdcall NCryptFinalizeKey( NCRYPT_KEY_HANDLE hKey, DWORD dwFlags);
SECURITY_STATUS __stdcall NCryptEncrypt( NCRYPT_KEY_HANDLE hKey, PBYTE pbInput, DWORD cbInput, void *pPaddingInfo, PBYTE pbOutput, DWORD cbOutput, DWORD * pcbResult, DWORD dwFlags);
SECURITY_STATUS __stdcall NCryptDecrypt( NCRYPT_KEY_HANDLE hKey, PBYTE pbInput, DWORD cbInput, void *pPaddingInfo, PBYTE pbOutput, DWORD cbOutput, DWORD * pcbResult, DWORD dwFlags);
SECURITY_STATUS __stdcall NCryptImportKey( NCRYPT_PROV_HANDLE hProvider, NCRYPT_KEY_HANDLE hImportKey, LPCWSTR pszBlobType, NCryptBufferDesc *pParameterList, NCRYPT_KEY_HANDLE *phKey, PBYTE pbData, DWORD cbData, DWORD dwFlags);
SECURITY_STATUS __stdcall NCryptExportKey( NCRYPT_KEY_HANDLE hKey, NCRYPT_KEY_HANDLE hExportKey, LPCWSTR pszBlobType, NCryptBufferDesc *pParameterList, PBYTE pbOutput, DWORD cbOutput, DWORD * pcbResult, DWORD dwFlags);
SECURITY_STATUS __stdcall NCryptSignHash( NCRYPT_KEY_HANDLE hKey, void *pPaddingInfo, PBYTE pbHashValue, DWORD cbHashValue, PBYTE pbSignature, DWORD cbSignature, DWORD * pcbResult, DWORD dwFlags);
SECURITY_STATUS __stdcall NCryptVerifySignature( NCRYPT_KEY_HANDLE hKey, void *pPaddingInfo, PBYTE pbHashValue, DWORD cbHashValue, PBYTE pbSignature, DWORD cbSignature, DWORD dwFlags);
SECURITY_STATUS __stdcall NCryptDeleteKey( NCRYPT_KEY_HANDLE hKey, DWORD dwFlags);
SECURITY_STATUS __stdcall NCryptFreeObject( NCRYPT_HANDLE hObject);
BOOL __stdcall NCryptIsKeyHandle( NCRYPT_KEY_HANDLE hKey);
SECURITY_STATUS __stdcall NCryptTranslateHandle( NCRYPT_PROV_HANDLE *phProvider, NCRYPT_KEY_HANDLE *phKey, HCRYPTPROV hLegacyProv, HCRYPTKEY hLegacyKey, DWORD dwLegacyKeySpec, DWORD dwFlags);
SECURITY_STATUS __stdcall NCryptNotifyChangeKey( NCRYPT_PROV_HANDLE hProvider, HANDLE *phEvent, DWORD dwFlags);
SECURITY_STATUS __stdcall NCryptSecretAgreement( NCRYPT_KEY_HANDLE hPrivKey, NCRYPT_KEY_HANDLE hPubKey, NCRYPT_SECRET_HANDLE *phAgreedSecret, DWORD dwFlags);
SECURITY_STATUS __stdcall NCryptDeriveKey( NCRYPT_SECRET_HANDLE hSharedSecret, LPCWSTR pwszKDF, NCryptBufferDesc *pParameterList, PBYTE pbDerivedKey, DWORD cbDerivedKey, DWORD *pcbResult, ULONG dwFlags);
<typedef name="HCRYPTPROV_OR_NCRYPT_KEY_HANDLE"><ULONG_PTR /></typedef>
<typedef name="HCRYPTPROV_LEGACY"><ULONG_PTR /></typedef>
typedef struct _CRYPT_BIT_BLOB {
<field name="cbData"><DWORD /></field>
<field name="pbData"><ptr><BYTE /></ptr></field>
<field name="cUnusedBits"><DWORD /></field>
} CRYPT_BIT_BLOB, *PCRYPT_BIT_BLOB;
typedef struct _CRYPT_ALGORITHM_IDENTIFIER {
<field name="pszObjId"><LPSTR /></field>
<field name="Parameters"><CRYPT_OBJID_BLOB /></field>
} CRYPT_ALGORITHM_IDENTIFIER, *PCRYPT_ALGORITHM_IDENTIFIER;
typedef struct _CRYPT_OBJID_TABLE {
<field name="dwAlgId"><DWORD /></field>
<field name="pszObjId"><LPCSTR /></field>
} CRYPT_OBJID_TABLE, *PCRYPT_OBJID_TABLE;
typedef struct _CRYPT_HASH_INFO {
<field name="HashAlgorithm"><CRYPT_ALGORITHM_IDENTIFIER /></field>
<field name="Hash"><CRYPT_HASH_BLOB /></field>
} CRYPT_HASH_INFO, *PCRYPT_HASH_INFO;
typedef struct _CERT_EXTENSION {
<field name="pszObjId"><LPSTR /></field>
<field name="fCritical"><BOOL /></field>
<field name="Value"><CRYPT_OBJID_BLOB /></field>
} CERT_EXTENSION, *PCERT_EXTENSION;
<typedef name="PCCERT_EXTENSION"><ptr const="true"><CERT_EXTENSION /></ptr></typedef>
typedef struct _CRYPT_ATTRIBUTE_TYPE_VALUE {
<field name="pszObjId"><LPSTR /></field>
<field name="Value"><CRYPT_OBJID_BLOB /></field>
} CRYPT_ATTRIBUTE_TYPE_VALUE, *PCRYPT_ATTRIBUTE_TYPE_VALUE;
typedef struct _CRYPT_ATTRIBUTE {
<field name="pszObjId"><LPSTR /></field>
<field name="cValue"><DWORD /></field>
<field name="rgValue"><PCRYPT_ATTR_BLOB /></field>
} CRYPT_ATTRIBUTE, *PCRYPT_ATTRIBUTE;
typedef struct _CRYPT_ATTRIBUTES {
<field name="cAttr"><DWORD /></field>
<field name="rgAttr"><PCRYPT_ATTRIBUTE /></field>
} CRYPT_ATTRIBUTES, *PCRYPT_ATTRIBUTES;
typedef struct _CERT_RDN_ATTR {
<field name="pszObjId"><LPSTR /></field>
<field name="dwValueType"><DWORD /></field>
<field name="Value"><CERT_RDN_VALUE_BLOB /></field>
} CERT_RDN_ATTR, *PCERT_RDN_ATTR;
typedef struct _CERT_RDN {
<field name="cRDNAttr"><DWORD /></field>
<field name="rgRDNAttr"><PCERT_RDN_ATTR /></field>
} CERT_RDN, *PCERT_RDN;
typedef struct _CERT_NAME_INFO {
<field name="cRDN"><DWORD /></field>
<field name="rgRDN"><PCERT_RDN /></field>
} CERT_NAME_INFO, *PCERT_NAME_INFO;
typedef struct _CERT_NAME_VALUE {
<field name="dwValueType"><DWORD /></field>
<field name="Value"><CERT_RDN_VALUE_BLOB /></field>
} CERT_NAME_VALUE, *PCERT_NAME_VALUE;
typedef struct _CERT_PUBLIC_KEY_INFO {
<field name="Algorithm"><CRYPT_ALGORITHM_IDENTIFIER /></field>
<field name="PublicKey"><CRYPT_BIT_BLOB /></field>
} CERT_PUBLIC_KEY_INFO, *PCERT_PUBLIC_KEY_INFO;
typedef struct _CRYPT_PRIVATE_KEY_INFO{
<field name="Version"><DWORD /></field>
<field name="Algorithm"><CRYPT_ALGORITHM_IDENTIFIER /></field>
<field name="PrivateKey"><CRYPT_DER_BLOB /></field>
<field name="pAttributes"><PCRYPT_ATTRIBUTES /></field>
} CRYPT_PRIVATE_KEY_INFO, *PCRYPT_PRIVATE_KEY_INFO;
typedef struct _CRYPT_ENCRYPTED_PRIVATE_KEY_INFO{
<field name="EncryptionAlgorithm"><CRYPT_ALGORITHM_IDENTIFIER /></field>
<field name="EncryptedPrivateKey"><CRYPT_DATA_BLOB /></field>
} CRYPT_ENCRYPTED_PRIVATE_KEY_INFO, *PCRYPT_ENCRYPTED_PRIVATE_KEY_INFO;
typedef BOOL (__stdcall *PCRYPT_DECRYPT_PRIVATE_KEY_FUNC)( CRYPT_ALGORITHM_IDENTIFIER Algorithm, CRYPT_DATA_BLOB EncryptedPrivateKey, BYTE* pbClearTextKey, DWORD* pcbClearTextKey, LPVOID pVoidDecryptFunc);
typedef BOOL (__stdcall *PCRYPT_ENCRYPT_PRIVATE_KEY_FUNC)( CRYPT_ALGORITHM_IDENTIFIER* pAlgorithm, CRYPT_DATA_BLOB* pClearTextPrivateKey, BYTE* pbEncryptedKey, DWORD* pcbEncryptedKey, LPVOID pVoidEncryptFunc);
typedef BOOL (__stdcall *PCRYPT_RESOLVE_HCRYPTPROV_FUNC)( CRYPT_PRIVATE_KEY_INFO *pPrivateKeyInfo, HCRYPTPROV *phCryptProv, LPVOID pVoidResolveFunc);
typedef struct _CRYPT_PKCS8_IMPORT_PARAMS{
<field name="PrivateKey"><CRYPT_DIGEST_BLOB /></field>
<field name="pResolvehCryptProvFunc"><PCRYPT_RESOLVE_HCRYPTPROV_FUNC /></field>
<field name="pVoidResolveFunc"><LPVOID /></field>
<field name="pDecryptPrivateKeyFunc"><PCRYPT_DECRYPT_PRIVATE_KEY_FUNC /></field>
<field name="pVoidDecryptFunc"><LPVOID /></field>
} CRYPT_PKCS8_IMPORT_PARAMS, *PCRYPT_PKCS8_IMPORT_PARAMS, CRYPT_PRIVATE_KEY_BLOB_AND_PARAMS, *PCRYPT_PRIVATE_KEY_BLOB_AND_PARAMS;
typedef struct _CRYPT_PKCS8_EXPORT_PARAMS{
<field name="hCryptProv"><HCRYPTPROV /></field>
<field name="dwKeySpec"><DWORD /></field>
<field name="pszPrivateKeyObjId"><LPSTR /></field>
<field name="pEncryptPrivateKeyFunc"><PCRYPT_ENCRYPT_PRIVATE_KEY_FUNC /></field>
<field name="pVoidEncryptFunc"><LPVOID /></field>
} CRYPT_PKCS8_EXPORT_PARAMS, *PCRYPT_PKCS8_EXPORT_PARAMS;
typedef struct _CERT_INFO {
<field name="dwVersion"><DWORD /></field>
<field name="SerialNumber"><CRYPT_INTEGER_BLOB /></field>
<field name="SignatureAlgorithm"><CRYPT_ALGORITHM_IDENTIFIER /></field>
<field name="Issuer"><CERT_NAME_BLOB /></field>
<field name="NotBefore"><FILETIME /></field>
<field name="NotAfter"><FILETIME /></field>
<field name="Subject"><CERT_NAME_BLOB /></field>
<field name="SubjectPublicKeyInfo"><CERT_PUBLIC_KEY_INFO /></field>
<field name="IssuerUniqueId"><CRYPT_BIT_BLOB /></field>
<field name="SubjectUniqueId"><CRYPT_BIT_BLOB /></field>
<field name="cExtension"><DWORD /></field>
<field name="rgExtension"><PCERT_EXTENSION /></field>
} CERT_INFO, *PCERT_INFO;
typedef struct _CRL_ENTRY {
<field name="SerialNumber"><CRYPT_INTEGER_BLOB /></field>
<field name="RevocationDate"><FILETIME /></field>
<field name="cExtension"><DWORD /></field>
<field name="rgExtension"><PCERT_EXTENSION /></field>
} CRL_ENTRY, *PCRL_ENTRY;
typedef struct _CRL_INFO {
<field name="dwVersion"><DWORD /></field>
<field name="SignatureAlgorithm"><CRYPT_ALGORITHM_IDENTIFIER /></field>
<field name="Issuer"><CERT_NAME_BLOB /></field>
<field name="ThisUpdate"><FILETIME /></field>
<field name="NextUpdate"><FILETIME /></field>
<field name="cCRLEntry"><DWORD /></field>
<field name="rgCRLEntry"><PCRL_ENTRY /></field>
<field name="cExtension"><DWORD /></field>
<field name="rgExtension"><PCERT_EXTENSION /></field>
} CRL_INFO, *PCRL_INFO;
typedef struct _CERT_OR_CRL_BLOB {
<field name="dwChoice"><DWORD /></field>
<field name="cbEncoded"><DWORD /></field>
<field name="pbEncoded"><ptr><BYTE /></ptr></field>
} CERT_OR_CRL_BLOB, * PCERT_OR_CRL_BLOB;
typedef struct _CERT_OR_CRL_BUNDLE {
<field name="cItem"><DWORD /></field>
<field name="rgItem"><PCERT_OR_CRL_BLOB /></field>
} CERT_OR_CRL_BUNDLE, *PCERT_OR_CRL_BUNDLE;
typedef struct _CERT_REQUEST_INFO {
<field name="dwVersion"><DWORD /></field>
<field name="Subject"><CERT_NAME_BLOB /></field>
<field name="SubjectPublicKeyInfo"><CERT_PUBLIC_KEY_INFO /></field>
<field name="cAttribute"><DWORD /></field>
<field name="rgAttribute"><PCRYPT_ATTRIBUTE /></field>
} CERT_REQUEST_INFO, *PCERT_REQUEST_INFO;
typedef struct _CERT_KEYGEN_REQUEST_INFO {
<field name="dwVersion"><DWORD /></field>
<field name="SubjectPublicKeyInfo"><CERT_PUBLIC_KEY_INFO /></field>
<field name="pwszChallengeString"><LPWSTR /></field>
} CERT_KEYGEN_REQUEST_INFO, *PCERT_KEYGEN_REQUEST_INFO;
typedef struct _CERT_SIGNED_CONTENT_INFO {
<field name="ToBeSigned"><CRYPT_DER_BLOB /></field>
<field name="SignatureAlgorithm"><CRYPT_ALGORITHM_IDENTIFIER /></field>
<field name="Signature"><CRYPT_BIT_BLOB /></field>
} CERT_SIGNED_CONTENT_INFO, *PCERT_SIGNED_CONTENT_INFO;
typedef struct _CTL_USAGE {
<field name="cUsageIdentifier"><DWORD /></field>
<field name="rgpszUsageIdentifier"><ptr><LPSTR /></ptr></field>
} CTL_USAGE, *PCTL_USAGE, CERT_ENHKEY_USAGE, *PCERT_ENHKEY_USAGE;
<typedef name="PCCTL_USAGE"><ptr const="true"><CTL_USAGE /></ptr></typedef>
<typedef name="PCCERT_ENHKEY_USAGE"><ptr const="true"><CERT_ENHKEY_USAGE /></ptr></typedef>
typedef struct _CTL_ENTRY {
<field name="SubjectIdentifier"><CRYPT_DATA_BLOB /></field>
<field name="cAttribute"><DWORD /></field>
<field name="rgAttribute"><PCRYPT_ATTRIBUTE /></field>
} CTL_ENTRY, *PCTL_ENTRY;
typedef struct _CTL_INFO {
<field name="dwVersion"><DWORD /></field>
<field name="SubjectUsage"><CTL_USAGE /></field>
<field name="ListIdentifier"><CRYPT_DATA_BLOB /></field>
<field name="SequenceNumber"><CRYPT_INTEGER_BLOB /></field>
<field name="ThisUpdate"><FILETIME /></field>
<field name="NextUpdate"><FILETIME /></field>
<field name="SubjectAlgorithm"><CRYPT_ALGORITHM_IDENTIFIER /></field>
<field name="cCTLEntry"><DWORD /></field>
<field name="rgCTLEntry"><PCTL_ENTRY /></field>
<field name="cExtension"><DWORD /></field>
<field name="rgExtension"><PCERT_EXTENSION /></field>
} CTL_INFO, *PCTL_INFO;
typedef struct _CRYPT_TIME_STAMP_REQUEST_INFO {
<field name="pszTimeStampAlgorithm"><LPSTR /></field>
<field name="pszContentType"><LPSTR /></field>
<field name="Content"><CRYPT_OBJID_BLOB /></field>
<field name="cAttribute"><DWORD /></field>
<field name="rgAttribute"><PCRYPT_ATTRIBUTE /></field>
} CRYPT_TIME_STAMP_REQUEST_INFO, *PCRYPT_TIME_STAMP_REQUEST_INFO;
typedef struct _CRYPT_ENROLLMENT_NAME_VALUE_PAIR {
<field name="pwszName"><LPWSTR /></field>
<field name="pwszValue"><LPWSTR /></field>
} CRYPT_ENROLLMENT_NAME_VALUE_PAIR, * PCRYPT_ENROLLMENT_NAME_VALUE_PAIR;
typedef struct _CRYPT_CSP_PROVIDER {
<field name="dwKeySpec"><DWORD /></field>
<field name="pwszProviderName"><LPWSTR /></field>
<field name="Signature"><CRYPT_BIT_BLOB /></field>
} CRYPT_CSP_PROVIDER, * PCRYPT_CSP_PROVIDER;

BOOL __stdcall CryptFormatObject( DWORD dwCertEncodingType, DWORD dwFormatType, DWORD dwFormatStrType, void *pFormatStruct, LPCSTR lpszStructType, const BYTE *pbEncoded, DWORD cbEncoded, void *pbFormat, DWORD *pcbFormat );
typedef LPVOID (__stdcall *PFN_CRYPT_ALLOC)( size_t cbSize );
typedef void (__stdcall *PFN_CRYPT_FREE)( LPVOID pv );
typedef struct _CRYPT_ENCODE_PARA {
<field name="cbSize"><DWORD /></field>
<field name="pfnAlloc"><PFN_CRYPT_ALLOC /></field>
<field name="pfnFree"><PFN_CRYPT_FREE /></field>
} CRYPT_ENCODE_PARA, *PCRYPT_ENCODE_PARA;

BOOL __stdcall CryptEncodeObjectEx( DWORD dwCertEncodingType, LPCSTR lpszStructType, const void *pvStructInfo, DWORD dwFlags, PCRYPT_ENCODE_PARA pEncodePara, void *pvEncoded, DWORD *pcbEncoded );

BOOL __stdcall CryptEncodeObject( DWORD dwCertEncodingType, LPCSTR lpszStructType, const void *pvStructInfo, BYTE *pbEncoded, DWORD *pcbEncoded );
typedef struct _CRYPT_DECODE_PARA {
<field name="cbSize"><DWORD /></field>
<field name="pfnAlloc"><PFN_CRYPT_ALLOC /></field>
<field name="pfnFree"><PFN_CRYPT_FREE /></field>
} CRYPT_DECODE_PARA, *PCRYPT_DECODE_PARA;

BOOL __stdcall CryptDecodeObjectEx( DWORD dwCertEncodingType, LPCSTR lpszStructType, const BYTE *pbEncoded, DWORD cbEncoded, DWORD dwFlags, PCRYPT_DECODE_PARA pDecodePara, void *pvStructInfo, DWORD *pcbStructInfo );

BOOL __stdcall CryptDecodeObject( DWORD dwCertEncodingType, LPCSTR lpszStructType, const BYTE *pbEncoded, DWORD cbEncoded, DWORD dwFlags, void *pvStructInfo, DWORD *pcbStructInfo );
typedef struct _CERT_EXTENSIONS {
<field name="cExtension"><DWORD /></field>
<field name="rgExtension"><PCERT_EXTENSION /></field>
} CERT_EXTENSIONS, *PCERT_EXTENSIONS;
typedef struct _CERT_AUTHORITY_KEY_ID_INFO {
<field name="KeyId"><CRYPT_DATA_BLOB /></field>
<field name="CertIssuer"><CERT_NAME_BLOB /></field>
<field name="CertSerialNumber"><CRYPT_INTEGER_BLOB /></field>
} CERT_AUTHORITY_KEY_ID_INFO, *PCERT_AUTHORITY_KEY_ID_INFO;
typedef struct _CERT_PRIVATE_KEY_VALIDITY {
<field name="NotBefore"><FILETIME /></field>
<field name="NotAfter"><FILETIME /></field>
} CERT_PRIVATE_KEY_VALIDITY, *PCERT_PRIVATE_KEY_VALIDITY;
typedef struct _CERT_KEY_ATTRIBUTES_INFO {
<field name="KeyId"><CRYPT_DATA_BLOB /></field>
<field name="IntendedKeyUsage"><CRYPT_BIT_BLOB /></field>
<field name="pPrivateKeyUsagePeriod"><PCERT_PRIVATE_KEY_VALIDITY /></field>
} CERT_KEY_ATTRIBUTES_INFO, *PCERT_KEY_ATTRIBUTES_INFO;
typedef struct _CERT_POLICY_ID {
<field name="cCertPolicyElementId"><DWORD /></field>
<field name="rgpszCertPolicyElementId"><ptr><LPSTR /></ptr></field>
} CERT_POLICY_ID, *PCERT_POLICY_ID;
typedef struct _CERT_KEY_USAGE_RESTRICTION_INFO {
<field name="cCertPolicyId"><DWORD /></field>
<field name="rgCertPolicyId"><PCERT_POLICY_ID /></field>
<field name="RestrictedKeyUsage"><CRYPT_BIT_BLOB /></field>
} CERT_KEY_USAGE_RESTRICTION_INFO, *PCERT_KEY_USAGE_RESTRICTION_INFO;
typedef struct _CERT_OTHER_NAME {
<field name="pszObjId"><LPSTR /></field>
<field name="Value"><CRYPT_OBJID_BLOB /></field>
} CERT_OTHER_NAME, *PCERT_OTHER_NAME;
typedef struct _CERT_ALT_NAME_ENTRY {
<field name="dwAltNameChoice"><DWORD /></field>
union { PCERT_OTHER_NAME pOtherName;
<field name="pwszRfc822Name"><LPWSTR /></field>
<field name="pwszDNSName"><LPWSTR /></field>
<field name="DirectoryName"><CERT_NAME_BLOB /></field>
<field name="pwszURL"><LPWSTR /></field>
<field name="IPAddress"><CRYPT_DATA_BLOB /></field>
<field name="pszRegisteredID"><LPSTR /></field>
} ;
} CERT_ALT_NAME_ENTRY, *PCERT_ALT_NAME_ENTRY;
typedef struct _CERT_ALT_NAME_INFO {
<field name="cAltEntry"><DWORD /></field>
<field name="rgAltEntry"><PCERT_ALT_NAME_ENTRY /></field>
} CERT_ALT_NAME_INFO, *PCERT_ALT_NAME_INFO;
typedef struct _CERT_BASIC_CONSTRAINTS_INFO {
<field name="SubjectType"><CRYPT_BIT_BLOB /></field>
<field name="fPathLenConstraint"><BOOL /></field>
<field name="dwPathLenConstraint"><DWORD /></field>
<field name="cSubtreesConstraint"><DWORD /></field>
<field name="rgSubtreesConstraint"><ptr><CERT_NAME_BLOB /></ptr></field>
} CERT_BASIC_CONSTRAINTS_INFO, *PCERT_BASIC_CONSTRAINTS_INFO;
typedef struct _CERT_BASIC_CONSTRAINTS2_INFO {
<field name="fCA"><BOOL /></field>
<field name="fPathLenConstraint"><BOOL /></field>
<field name="dwPathLenConstraint"><DWORD /></field>
} CERT_BASIC_CONSTRAINTS2_INFO, *PCERT_BASIC_CONSTRAINTS2_INFO;
typedef struct _CERT_POLICY_QUALIFIER_INFO {
<field name="pszPolicyQualifierId"><LPSTR /></field>
<field name="Qualifier"><CRYPT_OBJID_BLOB /></field>
} CERT_POLICY_QUALIFIER_INFO, *PCERT_POLICY_QUALIFIER_INFO;
typedef struct _CERT_POLICY_INFO {
<field name="pszPolicyIdentifier"><LPSTR /></field>
<field name="cPolicyQualifier"><DWORD /></field>
<field name="rgPolicyQualifier"><ptr><CERT_POLICY_QUALIFIER_INFO /></ptr></field>
} CERT_POLICY_INFO, *PCERT_POLICY_INFO;
typedef struct _CERT_POLICIES_INFO {
<field name="cPolicyInfo"><DWORD /></field>
<field name="rgPolicyInfo"><ptr><CERT_POLICY_INFO /></ptr></field>
} CERT_POLICIES_INFO, *PCERT_POLICIES_INFO;
typedef struct _CERT_POLICY_QUALIFIER_NOTICE_REFERENCE {
<field name="pszOrganization"><LPSTR /></field>
<field name="cNoticeNumbers"><DWORD /></field>
<field name="rgNoticeNumbers"><ptr><int32 /></ptr></field>
} CERT_POLICY_QUALIFIER_NOTICE_REFERENCE, *PCERT_POLICY_QUALIFIER_NOTICE_REFERENCE;
typedef struct _CERT_POLICY_QUALIFIER_USER_NOTICE {
<field name="pNoticeReference"><ptr><CERT_POLICY_QUALIFIER_NOTICE_REFERENCE /></ptr></field>
<field name="pszDisplayText"><LPWSTR /></field>
} CERT_POLICY_QUALIFIER_USER_NOTICE, *PCERT_POLICY_QUALIFIER_USER_NOTICE;
typedef struct _CPS_URLS {
<field name="pszURL"><LPWSTR /></field>
<field name="pAlgorithm"><ptr><CRYPT_ALGORITHM_IDENTIFIER /></ptr></field>
<field name="pDigest"><ptr><CRYPT_DATA_BLOB /></ptr></field>
} CPS_URLS, *PCPS_URLS;
typedef struct _CERT_POLICY95_QUALIFIER1 {
<field name="pszPracticesReference"><LPWSTR /></field>
<field name="pszNoticeIdentifier"><LPSTR /></field>
<field name="pszNSINoticeIdentifier"><LPSTR /></field>
<field name="cCPSURLs"><DWORD /></field>
<field name="rgCPSURLs"><ptr><CPS_URLS /></ptr></field>
} CERT_POLICY95_QUALIFIER1, *PCERT_POLICY95_QUALIFIER1;
typedef struct _CERT_POLICY_MAPPING {
<field name="pszIssuerDomainPolicy"><LPSTR /></field>
<field name="pszSubjectDomainPolicy"><LPSTR /></field>
} CERT_POLICY_MAPPING, *PCERT_POLICY_MAPPING;
typedef struct _CERT_POLICY_MAPPINGS_INFO {
<field name="cPolicyMapping"><DWORD /></field>
<field name="rgPolicyMapping"><PCERT_POLICY_MAPPING /></field>
} CERT_POLICY_MAPPINGS_INFO, *PCERT_POLICY_MAPPINGS_INFO;
typedef struct _CERT_POLICY_CONSTRAINTS_INFO {
<field name="fRequireExplicitPolicy"><BOOL /></field>
<field name="dwRequireExplicitPolicySkipCerts"><DWORD /></field>
<field name="fInhibitPolicyMapping"><BOOL /></field>
<field name="dwInhibitPolicyMappingSkipCerts"><DWORD /></field>
} CERT_POLICY_CONSTRAINTS_INFO, *PCERT_POLICY_CONSTRAINTS_INFO;
typedef struct _CRYPT_CONTENT_INFO_SEQUENCE_OF_ANY {
<field name="pszObjId"><LPSTR /></field>
<field name="cValue"><DWORD /></field>
<field name="rgValue"><PCRYPT_DER_BLOB /></field>
} CRYPT_CONTENT_INFO_SEQUENCE_OF_ANY, *PCRYPT_CONTENT_INFO_SEQUENCE_OF_ANY;
typedef struct _CRYPT_CONTENT_INFO {
<field name="pszObjId"><LPSTR /></field>
<field name="Content"><CRYPT_DER_BLOB /></field>
} CRYPT_CONTENT_INFO, *PCRYPT_CONTENT_INFO;
typedef struct _CRYPT_SEQUENCE_OF_ANY {
<field name="cValue"><DWORD /></field>
<field name="rgValue"><PCRYPT_DER_BLOB /></field>
} CRYPT_SEQUENCE_OF_ANY, *PCRYPT_SEQUENCE_OF_ANY;
typedef struct _CERT_AUTHORITY_KEY_ID2_INFO {
<field name="KeyId"><CRYPT_DATA_BLOB /></field>
<field name="AuthorityCertIssuer"><CERT_ALT_NAME_INFO /></field>
<field name="AuthorityCertSerialNumber"><CRYPT_INTEGER_BLOB /></field>
} CERT_AUTHORITY_KEY_ID2_INFO, *PCERT_AUTHORITY_KEY_ID2_INFO;
typedef struct _CERT_ACCESS_DESCRIPTION {
<field name="pszAccessMethod"><LPSTR /></field>
<field name="AccessLocation"><CERT_ALT_NAME_ENTRY /></field>
} CERT_ACCESS_DESCRIPTION, *PCERT_ACCESS_DESCRIPTION;
typedef struct _CERT_AUTHORITY_INFO_ACCESS {
<field name="cAccDescr"><DWORD /></field>
<field name="rgAccDescr"><PCERT_ACCESS_DESCRIPTION /></field>
} CERT_AUTHORITY_INFO_ACCESS, *PCERT_AUTHORITY_INFO_ACCESS, CERT_SUBJECT_INFO_ACCESS, *PCERT_SUBJECT_INFO_ACCESS;
typedef struct _CRL_DIST_POINT_NAME {
<field name="dwDistPointNameChoice"><DWORD /></field>
union {
<field name="FullName"><CERT_ALT_NAME_INFO /></field>
} ;
} CRL_DIST_POINT_NAME, *PCRL_DIST_POINT_NAME;
typedef struct _CRL_DIST_POINT {
<field name="DistPointName"><CRL_DIST_POINT_NAME /></field>
<field name="ReasonFlags"><CRYPT_BIT_BLOB /></field>
<field name="CRLIssuer"><CERT_ALT_NAME_INFO /></field>
} CRL_DIST_POINT, *PCRL_DIST_POINT;
typedef struct _CRL_DIST_POINTS_INFO {
<field name="cDistPoint"><DWORD /></field>
<field name="rgDistPoint"><PCRL_DIST_POINT /></field>
} CRL_DIST_POINTS_INFO, *PCRL_DIST_POINTS_INFO;
typedef struct _CROSS_CERT_DIST_POINTS_INFO {
<field name="dwSyncDeltaTime"><DWORD /></field>
<field name="cDistPoint"><DWORD /></field>
<field name="rgDistPoint"><PCERT_ALT_NAME_INFO /></field>
} CROSS_CERT_DIST_POINTS_INFO, *PCROSS_CERT_DIST_POINTS_INFO;
typedef struct _CERT_PAIR {
<field name="Forward"><CERT_BLOB /></field>
<field name="Reverse"><CERT_BLOB /></field>
} CERT_PAIR, *PCERT_PAIR;
typedef struct _CRL_ISSUING_DIST_POINT {
<field name="DistPointName"><CRL_DIST_POINT_NAME /></field>
<field name="fOnlyContainsUserCerts"><BOOL /></field>
<field name="fOnlyContainsCACerts"><BOOL /></field>
<field name="OnlySomeReasonFlags"><CRYPT_BIT_BLOB /></field>
<field name="fIndirectCRL"><BOOL /></field>
} CRL_ISSUING_DIST_POINT, *PCRL_ISSUING_DIST_POINT;
typedef struct _CERT_GENERAL_SUBTREE {
<field name="Base"><CERT_ALT_NAME_ENTRY /></field>
<field name="dwMinimum"><DWORD /></field>
<field name="fMaximum"><BOOL /></field>
<field name="dwMaximum"><DWORD /></field>
} CERT_GENERAL_SUBTREE, *PCERT_GENERAL_SUBTREE;
typedef struct _CERT_NAME_CONSTRAINTS_INFO {
<field name="cPermittedSubtree"><DWORD /></field>
<field name="rgPermittedSubtree"><PCERT_GENERAL_SUBTREE /></field>
<field name="cExcludedSubtree"><DWORD /></field>
<field name="rgExcludedSubtree"><PCERT_GENERAL_SUBTREE /></field>
} CERT_NAME_CONSTRAINTS_INFO, *PCERT_NAME_CONSTRAINTS_INFO;
typedef struct _CERT_DSS_PARAMETERS {
<field name="p"><CRYPT_UINT_BLOB /></field>
<field name="q"><CRYPT_UINT_BLOB /></field>
<field name="g"><CRYPT_UINT_BLOB /></field>
} CERT_DSS_PARAMETERS, *PCERT_DSS_PARAMETERS;
typedef struct _CERT_DH_PARAMETERS {
<field name="p"><CRYPT_UINT_BLOB /></field>
<field name="g"><CRYPT_UINT_BLOB /></field>
} CERT_DH_PARAMETERS, *PCERT_DH_PARAMETERS;
typedef struct _CERT_ECC_SIGNATURE {
<field name="r"><CRYPT_UINT_BLOB /></field>
<field name="s"><CRYPT_UINT_BLOB /></field>
} CERT_ECC_SIGNATURE, *PCERT_ECC_SIGNATURE;
typedef struct _CERT_X942_DH_VALIDATION_PARAMS {
<field name="seed"><CRYPT_BIT_BLOB /></field>
<field name="pgenCounter"><DWORD /></field>
} CERT_X942_DH_VALIDATION_PARAMS, *PCERT_X942_DH_VALIDATION_PARAMS;
typedef struct _CERT_X942_DH_PARAMETERS {
<field name="p"><CRYPT_UINT_BLOB /></field>
<field name="g"><CRYPT_UINT_BLOB /></field>
<field name="q"><CRYPT_UINT_BLOB /></field>
<field name="j"><CRYPT_UINT_BLOB /></field>
<field name="pValidationParams"><PCERT_X942_DH_VALIDATION_PARAMS /></field>
} CERT_X942_DH_PARAMETERS, *PCERT_X942_DH_PARAMETERS;
typedef struct _CRYPT_X942_OTHER_INFO {
<field name="pszContentEncryptionObjId"><LPSTR /></field>
<field name="rgbCounter"><arr length="4"><BYTE /></arr></field>
<field name="rgbKeyLength"><arr length="4"><BYTE /></arr></field>
<field name="PubInfo"><CRYPT_DATA_BLOB /></field>
} CRYPT_X942_OTHER_INFO, *PCRYPT_X942_OTHER_INFO;
typedef struct _CRYPT_ECC_CMS_SHARED_INFO {
<field name="Algorithm"><CRYPT_ALGORITHM_IDENTIFIER /></field>
<field name="EntityUInfo"><CRYPT_DATA_BLOB /></field>
<field name="rgbSuppPubInfo"><arr length="4"><BYTE /></arr></field>
} CRYPT_ECC_CMS_SHARED_INFO, *PCRYPT_ECC_CMS_SHARED_INFO;
typedef struct _CRYPT_RC2_CBC_PARAMETERS {
<field name="dwVersion"><DWORD /></field>
<field name="fIV"><BOOL /></field>
<field name="rgbIV"><arr length="8"><BYTE /></arr></field>
} CRYPT_RC2_CBC_PARAMETERS, *PCRYPT_RC2_CBC_PARAMETERS;
typedef struct _CRYPT_SMIME_CAPABILITY {
<field name="pszObjId"><LPSTR /></field>
<field name="Parameters"><CRYPT_OBJID_BLOB /></field>
} CRYPT_SMIME_CAPABILITY, *PCRYPT_SMIME_CAPABILITY;
typedef struct _CRYPT_SMIME_CAPABILITIES {
<field name="cCapability"><DWORD /></field>
<field name="rgCapability"><PCRYPT_SMIME_CAPABILITY /></field>
} CRYPT_SMIME_CAPABILITIES, *PCRYPT_SMIME_CAPABILITIES;
typedef struct _CERT_QC_STATEMENT {
<field name="pszStatementId"><LPSTR /></field>
<field name="StatementInfo"><CRYPT_OBJID_BLOB /></field>
} CERT_QC_STATEMENT, *PCERT_QC_STATEMENT;
typedef struct _CERT_QC_STATEMENTS_EXT_INFO {
<field name="cStatement"><DWORD /></field>
<field name="rgStatement"><PCERT_QC_STATEMENT /></field>
} CERT_QC_STATEMENTS_EXT_INFO, *PCERT_QC_STATEMENTS_EXT_INFO;
typedef struct _CRYPT_MASK_GEN_ALGORITHM {
<field name="pszObjId"><LPSTR /></field>
<field name="HashAlgorithm"><CRYPT_ALGORITHM_IDENTIFIER /></field>
} CRYPT_MASK_GEN_ALGORITHM, *PCRYPT_MASK_GEN_ALGORITHM;
typedef struct _CRYPT_RSA_SSA_PSS_PARAMETERS {
<field name="HashAlgorithm"><CRYPT_ALGORITHM_IDENTIFIER /></field>
<field name="MaskGenAlgorithm"><CRYPT_MASK_GEN_ALGORITHM /></field>
<field name="dwSaltLength"><DWORD /></field>
<field name="dwTrailerField"><DWORD /></field>
} CRYPT_RSA_SSA_PSS_PARAMETERS, *PCRYPT_RSA_SSA_PSS_PARAMETERS;
typedef struct _CRYPT_PSOURCE_ALGORITHM {
<field name="pszObjId"><LPSTR /></field>
<field name="EncodingParameters"><CRYPT_DATA_BLOB /></field>
} CRYPT_PSOURCE_ALGORITHM, *PCRYPT_PSOURCE_ALGORITHM;
typedef struct _CRYPT_RSAES_OAEP_PARAMETERS {
<field name="HashAlgorithm"><CRYPT_ALGORITHM_IDENTIFIER /></field>
<field name="MaskGenAlgorithm"><CRYPT_MASK_GEN_ALGORITHM /></field>
<field name="PSourceAlgorithm"><CRYPT_PSOURCE_ALGORITHM /></field>
} CRYPT_RSAES_OAEP_PARAMETERS, *PCRYPT_RSAES_OAEP_PARAMETERS;
typedef struct _CMC_TAGGED_ATTRIBUTE {
<field name="dwBodyPartID"><DWORD /></field>
<field name="Attribute"><CRYPT_ATTRIBUTE /></field>
} CMC_TAGGED_ATTRIBUTE, *PCMC_TAGGED_ATTRIBUTE;
typedef struct _CMC_TAGGED_CERT_REQUEST {
<field name="dwBodyPartID"><DWORD /></field>
<field name="SignedCertRequest"><CRYPT_DER_BLOB /></field>
} CMC_TAGGED_CERT_REQUEST, *PCMC_TAGGED_CERT_REQUEST;
typedef struct _CMC_TAGGED_REQUEST {
<field name="dwTaggedRequestChoice"><DWORD /></field>
union {
<field name="pTaggedCertRequest"><PCMC_TAGGED_CERT_REQUEST /></field>
} ;
} CMC_TAGGED_REQUEST, *PCMC_TAGGED_REQUEST;
typedef struct _CMC_TAGGED_CONTENT_INFO {
<field name="dwBodyPartID"><DWORD /></field>
<field name="EncodedContentInfo"><CRYPT_DER_BLOB /></field>
} CMC_TAGGED_CONTENT_INFO, *PCMC_TAGGED_CONTENT_INFO;
typedef struct _CMC_TAGGED_OTHER_MSG {
<field name="dwBodyPartID"><DWORD /></field>
<field name="pszObjId"><LPSTR /></field>
<field name="Value"><CRYPT_OBJID_BLOB /></field>
} CMC_TAGGED_OTHER_MSG, *PCMC_TAGGED_OTHER_MSG;
typedef struct _CMC_DATA_INFO {
<field name="cTaggedAttribute"><DWORD /></field>
<field name="rgTaggedAttribute"><PCMC_TAGGED_ATTRIBUTE /></field>
<field name="cTaggedRequest"><DWORD /></field>
<field name="rgTaggedRequest"><PCMC_TAGGED_REQUEST /></field>
<field name="cTaggedContentInfo"><DWORD /></field>
<field name="rgTaggedContentInfo"><PCMC_TAGGED_CONTENT_INFO /></field>
<field name="cTaggedOtherMsg"><DWORD /></field>
<field name="rgTaggedOtherMsg"><PCMC_TAGGED_OTHER_MSG /></field>
} CMC_DATA_INFO, *PCMC_DATA_INFO;
typedef struct _CMC_RESPONSE_INFO {
<field name="cTaggedAttribute"><DWORD /></field>
<field name="rgTaggedAttribute"><PCMC_TAGGED_ATTRIBUTE /></field>
<field name="cTaggedContentInfo"><DWORD /></field>
<field name="rgTaggedContentInfo"><PCMC_TAGGED_CONTENT_INFO /></field>
<field name="cTaggedOtherMsg"><DWORD /></field>
<field name="rgTaggedOtherMsg"><PCMC_TAGGED_OTHER_MSG /></field>
} CMC_RESPONSE_INFO, *PCMC_RESPONSE_INFO;
typedef struct _CMC_PEND_INFO {
<field name="PendToken"><CRYPT_DATA_BLOB /></field>
<field name="PendTime"><FILETIME /></field>
} CMC_PEND_INFO, *PCMC_PEND_INFO;
typedef struct _CMC_STATUS_INFO {
<field name="dwStatus"><DWORD /></field>
<field name="cBodyList"><DWORD /></field>
<field name="rgdwBodyList"><ptr><DWORD /></ptr></field>
<field name="pwszStatusString"><LPWSTR /></field>
<field name="dwOtherInfoChoice"><DWORD /></field>
union {
<field name="dwFailInfo"><DWORD /></field>
<field name="pPendInfo"><PCMC_PEND_INFO /></field>
} ;
} CMC_STATUS_INFO, *PCMC_STATUS_INFO;
typedef struct _CMC_ADD_EXTENSIONS_INFO {
<field name="dwCmcDataReference"><DWORD /></field>
<field name="cCertReference"><DWORD /></field>
<field name="rgdwCertReference"><ptr><DWORD /></ptr></field>
<field name="cExtension"><DWORD /></field>
<field name="rgExtension"><PCERT_EXTENSION /></field>
} CMC_ADD_EXTENSIONS_INFO, *PCMC_ADD_EXTENSIONS_INFO;
typedef struct _CMC_ADD_ATTRIBUTES_INFO {
<field name="dwCmcDataReference"><DWORD /></field>
<field name="cCertReference"><DWORD /></field>
<field name="rgdwCertReference"><ptr><DWORD /></ptr></field>
<field name="cAttribute"><DWORD /></field>
<field name="rgAttribute"><PCRYPT_ATTRIBUTE /></field>
} CMC_ADD_ATTRIBUTES_INFO, *PCMC_ADD_ATTRIBUTES_INFO;
typedef struct _CERT_TEMPLATE_EXT {
<field name="pszObjId"><LPSTR /></field>
<field name="dwMajorVersion"><DWORD /></field>
<field name="fMinorVersion"><BOOL /></field>
<field name="dwMinorVersion"><DWORD /></field>
} CERT_TEMPLATE_EXT, *PCERT_TEMPLATE_EXT;
typedef struct _CERT_HASHED_URL {
<field name="HashAlgorithm"><CRYPT_ALGORITHM_IDENTIFIER /></field>
<field name="Hash"><CRYPT_HASH_BLOB /></field>
<field name="pwszUrl"><LPWSTR /></field>
} CERT_HASHED_URL, *PCERT_HASHED_URL;
typedef struct _CERT_LOGOTYPE_DETAILS {
<field name="pwszMimeType"><LPWSTR /></field>
<field name="cHashedUrl"><DWORD /></field>
<field name="rgHashedUrl"><PCERT_HASHED_URL /></field>
} CERT_LOGOTYPE_DETAILS, *PCERT_LOGOTYPE_DETAILS;
typedef struct _CERT_LOGOTYPE_REFERENCE {
<field name="cHashedUrl"><DWORD /></field>
<field name="rgHashedUrl"><PCERT_HASHED_URL /></field>
} CERT_LOGOTYPE_REFERENCE, *PCERT_LOGOTYPE_REFERENCE;
typedef struct _CERT_LOGOTYPE_IMAGE_INFO {
<field name="dwLogotypeImageInfoChoice"><DWORD /></field>
<field name="dwFileSize"><DWORD /></field>
<field name="dwXSize"><DWORD /></field>
<field name="dwYSize"><DWORD /></field>
<field name="dwLogotypeImageResolutionChoice"><DWORD /></field>
union {
<field name="dwNumBits"><DWORD /></field>
<field name="dwTableSize"><DWORD /></field>
} ;
<field name="pwszLanguage"><LPWSTR /></field>
} CERT_LOGOTYPE_IMAGE_INFO, *PCERT_LOGOTYPE_IMAGE_INFO;
typedef struct _CERT_LOGOTYPE_IMAGE {
<field name="LogotypeDetails"><CERT_LOGOTYPE_DETAILS /></field>
<field name="pLogotypeImageInfo"><PCERT_LOGOTYPE_IMAGE_INFO /></field>
} CERT_LOGOTYPE_IMAGE, *PCERT_LOGOTYPE_IMAGE;
typedef struct _CERT_LOGOTYPE_AUDIO_INFO {
<field name="dwFileSize"><DWORD /></field>
<field name="dwPlayTime"><DWORD /></field>
<field name="dwChannels"><DWORD /></field>
<field name="dwSampleRate"><DWORD /></field>
<field name="pwszLanguage"><LPWSTR /></field>
} CERT_LOGOTYPE_AUDIO_INFO, *PCERT_LOGOTYPE_AUDIO_INFO;
typedef struct _CERT_LOGOTYPE_AUDIO {
<field name="LogotypeDetails"><CERT_LOGOTYPE_DETAILS /></field>
<field name="pLogotypeAudioInfo"><PCERT_LOGOTYPE_AUDIO_INFO /></field>
} CERT_LOGOTYPE_AUDIO, *PCERT_LOGOTYPE_AUDIO;
typedef struct _CERT_LOGOTYPE_DATA {
<field name="cLogotypeImage"><DWORD /></field>
<field name="rgLogotypeImage"><PCERT_LOGOTYPE_IMAGE /></field>
<field name="cLogotypeAudio"><DWORD /></field>
<field name="rgLogotypeAudio"><PCERT_LOGOTYPE_AUDIO /></field>
} CERT_LOGOTYPE_DATA, *PCERT_LOGOTYPE_DATA;
typedef struct _CERT_LOGOTYPE_INFO {
<field name="dwLogotypeInfoChoice"><DWORD /></field>
union {
<field name="pLogotypeDirectInfo"><PCERT_LOGOTYPE_DATA /></field>
<field name="pLogotypeIndirectInfo"><PCERT_LOGOTYPE_REFERENCE /></field>
} ;
} CERT_LOGOTYPE_INFO, *PCERT_LOGOTYPE_INFO;
typedef struct _CERT_OTHER_LOGOTYPE_INFO {
<field name="pszObjId"><LPSTR /></field>
<field name="LogotypeInfo"><CERT_LOGOTYPE_INFO /></field>
} CERT_OTHER_LOGOTYPE_INFO, *PCERT_OTHER_LOGOTYPE_INFO;
typedef struct _CERT_LOGOTYPE_EXT_INFO {
<field name="cCommunityLogo"><DWORD /></field>
<field name="rgCommunityLogo"><PCERT_LOGOTYPE_INFO /></field>
<field name="pIssuerLogo"><PCERT_LOGOTYPE_INFO /></field>
<field name="pSubjectLogo"><PCERT_LOGOTYPE_INFO /></field>
<field name="cOtherLogo"><DWORD /></field>
<field name="rgOtherLogo"><PCERT_OTHER_LOGOTYPE_INFO /></field>
} CERT_LOGOTYPE_EXT_INFO, *PCERT_LOGOTYPE_EXT_INFO;
typedef struct _CERT_BIOMETRIC_DATA {
<field name="dwTypeOfBiometricDataChoice"><DWORD /></field>
union {
<field name="dwPredefined"><DWORD /></field>
<field name="pszObjId"><LPSTR /></field>
} ;
<field name="HashedUrl"><CERT_HASHED_URL /></field>
} CERT_BIOMETRIC_DATA, *PCERT_BIOMETRIC_DATA;
typedef struct _CERT_BIOMETRIC_EXT_INFO {
<field name="cBiometricData"><DWORD /></field>
<field name="rgBiometricData"><PCERT_BIOMETRIC_DATA /></field>
} CERT_BIOMETRIC_EXT_INFO, *PCERT_BIOMETRIC_EXT_INFO;
typedef struct _OCSP_SIGNATURE_INFO {
<field name="SignatureAlgorithm"><CRYPT_ALGORITHM_IDENTIFIER /></field>
<field name="Signature"><CRYPT_BIT_BLOB /></field>
<field name="cCertEncoded"><DWORD /></field>
<field name="rgCertEncoded"><PCERT_BLOB /></field>
} OCSP_SIGNATURE_INFO, *POCSP_SIGNATURE_INFO;
typedef struct _OCSP_SIGNED_REQUEST_INFO {
<field name="ToBeSigned"><CRYPT_DER_BLOB /></field>
<field name="pOptionalSignatureInfo"><POCSP_SIGNATURE_INFO /></field>
} OCSP_SIGNED_REQUEST_INFO, *POCSP_SIGNED_REQUEST_INFO;
typedef struct _OCSP_CERT_ID {
<field name="HashAlgorithm"><CRYPT_ALGORITHM_IDENTIFIER /></field>
<field name="IssuerNameHash"><CRYPT_HASH_BLOB /></field>
<field name="IssuerKeyHash"><CRYPT_HASH_BLOB /></field>
<field name="SerialNumber"><CRYPT_INTEGER_BLOB /></field>
} OCSP_CERT_ID, *POCSP_CERT_ID;
typedef struct _OCSP_REQUEST_ENTRY {
<field name="CertId"><OCSP_CERT_ID /></field>
<field name="cExtension"><DWORD /></field>
<field name="rgExtension"><PCERT_EXTENSION /></field>
} OCSP_REQUEST_ENTRY, *POCSP_REQUEST_ENTRY;
typedef struct _OCSP_REQUEST_INFO {
<field name="dwVersion"><DWORD /></field>
<field name="pRequestorName"><PCERT_ALT_NAME_ENTRY /></field>
<field name="cRequestEntry"><DWORD /></field>
<field name="rgRequestEntry"><POCSP_REQUEST_ENTRY /></field>
<field name="cExtension"><DWORD /></field>
<field name="rgExtension"><PCERT_EXTENSION /></field>
} OCSP_REQUEST_INFO, *POCSP_REQUEST_INFO;
typedef struct _OCSP_RESPONSE_INFO {
<field name="dwStatus"><DWORD /></field>
<field name="pszObjId"><LPSTR /></field>
<field name="Value"><CRYPT_OBJID_BLOB /></field>
} OCSP_RESPONSE_INFO, *POCSP_RESPONSE_INFO;
typedef struct _OCSP_BASIC_SIGNED_RESPONSE_INFO {
<field name="ToBeSigned"><CRYPT_DER_BLOB /></field>
<field name="SignatureInfo"><OCSP_SIGNATURE_INFO /></field>
} OCSP_BASIC_SIGNED_RESPONSE_INFO, *POCSP_BASIC_SIGNED_RESPONSE_INFO;
typedef struct _OCSP_BASIC_REVOKED_INFO {
<field name="RevocationDate"><FILETIME /></field>
<field name="dwCrlReasonCode"><DWORD /></field>
} OCSP_BASIC_REVOKED_INFO, *POCSP_BASIC_REVOKED_INFO;
typedef struct _OCSP_BASIC_RESPONSE_ENTRY {
<field name="CertId"><OCSP_CERT_ID /></field>
<field name="dwCertStatus"><DWORD /></field>
union {
<field name="pRevokedInfo"><POCSP_BASIC_REVOKED_INFO /></field>
} ;
<field name="ThisUpdate"><FILETIME /></field>
<field name="NextUpdate"><FILETIME /></field>
<field name="cExtension"><DWORD /></field>
<field name="rgExtension"><PCERT_EXTENSION /></field>
} OCSP_BASIC_RESPONSE_ENTRY, *POCSP_BASIC_RESPONSE_ENTRY;
typedef struct _OCSP_BASIC_RESPONSE_INFO {
<field name="dwVersion"><DWORD /></field>
<field name="dwResponderIdChoice"><DWORD /></field>
union {
<field name="ByNameResponderId"><CERT_NAME_BLOB /></field>
<field name="ByKeyResponderId"><CRYPT_HASH_BLOB /></field>
} ;
<field name="ProducedAt"><FILETIME /></field>
<field name="cResponseEntry"><DWORD /></field>
<field name="rgResponseEntry"><POCSP_BASIC_RESPONSE_ENTRY /></field>
<field name="cExtension"><DWORD /></field>
<field name="rgExtension"><PCERT_EXTENSION /></field>
} OCSP_BASIC_RESPONSE_INFO, *POCSP_BASIC_RESPONSE_INFO;
<typedef name="HCRYPTOIDFUNCSET"><ptr><void /></ptr></typedef>
<typedef name="HCRYPTOIDFUNCADDR"><ptr><void /></ptr></typedef>
typedef struct _CRYPT_OID_FUNC_ENTRY {
<field name="pszOID"><LPCSTR /></field>
<field name="pvFuncAddr"><ptr><void /></ptr></field>
} CRYPT_OID_FUNC_ENTRY, *PCRYPT_OID_FUNC_ENTRY;

BOOL __stdcall CryptInstallOIDFunctionAddress( HMODULE hModule, DWORD dwEncodingType, LPCSTR pszFuncName, DWORD cFuncEntry, const CRYPT_OID_FUNC_ENTRY rgFuncEntry[], DWORD dwFlags );

HCRYPTOIDFUNCSET __stdcall CryptInitOIDFunctionSet( LPCSTR pszFuncName, DWORD dwFlags );

BOOL __stdcall CryptGetOIDFunctionAddress( HCRYPTOIDFUNCSET hFuncSet, DWORD dwEncodingType, LPCSTR pszOID, DWORD dwFlags, void **ppvFuncAddr, HCRYPTOIDFUNCADDR *phFuncAddr );

BOOL __stdcall CryptGetDefaultOIDDllList( HCRYPTOIDFUNCSET hFuncSet, DWORD dwEncodingType, WCHAR *pwszDllList, DWORD *pcchDllList );

BOOL __stdcall CryptGetDefaultOIDFunctionAddress( HCRYPTOIDFUNCSET hFuncSet, DWORD dwEncodingType, LPCWSTR pwszDll, DWORD dwFlags, void **ppvFuncAddr, HCRYPTOIDFUNCADDR *phFuncAddr );

BOOL __stdcall CryptFreeOIDFunctionAddress( HCRYPTOIDFUNCADDR hFuncAddr, DWORD dwFlags );

BOOL __stdcall CryptRegisterOIDFunction( DWORD dwEncodingType, LPCSTR pszFuncName, LPCSTR pszOID, LPCWSTR pwszDll, LPCSTR pszOverrideFuncName );

BOOL __stdcall CryptUnregisterOIDFunction( DWORD dwEncodingType, LPCSTR pszFuncName, LPCSTR pszOID );

BOOL __stdcall CryptRegisterDefaultOIDFunction( DWORD dwEncodingType, LPCSTR pszFuncName, DWORD dwIndex, LPCWSTR pwszDll );

BOOL __stdcall CryptUnregisterDefaultOIDFunction( DWORD dwEncodingType, LPCSTR pszFuncName, LPCWSTR pwszDll );

BOOL __stdcall CryptSetOIDFunctionValue( DWORD dwEncodingType, LPCSTR pszFuncName, LPCSTR pszOID, LPCWSTR pwszValueName, DWORD dwValueType, const BYTE *pbValueData, DWORD cbValueData );

BOOL __stdcall CryptGetOIDFunctionValue( DWORD dwEncodingType, LPCSTR pszFuncName, LPCSTR pszOID, LPCWSTR pwszValueName, DWORD *pdwValueType, BYTE *pbValueData, DWORD *pcbValueData );
typedef BOOL (__stdcall *PFN_CRYPT_ENUM_OID_FUNC)( DWORD dwEncodingType, LPCSTR pszFuncName, LPCSTR pszOID, DWORD cValue, const DWORD rgdwValueType[], LPCWSTR const rgpwszValueName[], const BYTE * const rgpbValueData[], const DWORD rgcbValueData[], void *pvArg );

BOOL __stdcall CryptEnumOIDFunction( DWORD dwEncodingType, LPCSTR pszFuncName, LPCSTR pszOID, DWORD dwFlags, void *pvArg, PFN_CRYPT_ENUM_OID_FUNC pfnEnumOIDFunc );
typedef struct _CRYPT_OID_INFO {
<field name="cbSize"><DWORD /></field>
<field name="pszOID"><LPCSTR /></field>
<field name="pwszName"><LPCWSTR /></field>
<field name="dwGroupId"><DWORD /></field>
union {
<field name="dwValue"><DWORD /></field>
<field name="Algid"><ALG_ID /></field>
<field name="dwLength"><DWORD /></field>
} ;
<field name="ExtraInfo"><CRYPT_DATA_BLOB /></field>
} CRYPT_OID_INFO, *PCRYPT_OID_INFO;
typedef const CRYPT_OID_INFO CCRYPT_OID_INFO, *PCCRYPT_OID_INFO;

PCCRYPT_OID_INFO __stdcall CryptFindOIDInfo( DWORD dwKeyType, void *pvKey, DWORD dwGroupId );

BOOL __stdcall CryptRegisterOIDInfo( PCCRYPT_OID_INFO pInfo, DWORD dwFlags );

BOOL __stdcall CryptUnregisterOIDInfo( PCCRYPT_OID_INFO pInfo );
typedef BOOL (__stdcall *PFN_CRYPT_ENUM_OID_INFO)( PCCRYPT_OID_INFO pInfo, void *pvArg );

BOOL __stdcall CryptEnumOIDInfo( DWORD dwGroupId, DWORD dwFlags, void *pvArg, PFN_CRYPT_ENUM_OID_INFO pfnEnumOIDInfo );

LPCWSTR __stdcall CryptFindLocalizedName( LPCWSTR pwszCryptName );
<typedef name="HCRYPTMSG"><ptr><void /></ptr></typedef>
typedef struct _CERT_ISSUER_SERIAL_NUMBER {
<field name="Issuer"><CERT_NAME_BLOB /></field>
<field name="SerialNumber"><CRYPT_INTEGER_BLOB /></field>
} CERT_ISSUER_SERIAL_NUMBER, *PCERT_ISSUER_SERIAL_NUMBER;
typedef struct _CERT_ID {
<field name="dwIdChoice"><DWORD /></field>
union {
<field name="IssuerSerialNumber"><CERT_ISSUER_SERIAL_NUMBER /></field>
<field name="KeyId"><CRYPT_HASH_BLOB /></field>
<field name="HashId"><CRYPT_HASH_BLOB /></field>
} ;
} CERT_ID, *PCERT_ID;
typedef struct _CMSG_SIGNER_ENCODE_INFO {
<field name="cbSize"><DWORD /></field>
<field name="pCertInfo"><PCERT_INFO /></field>
union {
<field name="hCryptProv"><HCRYPTPROV /></field>
<field name="hNCryptKey"><NCRYPT_KEY_HANDLE /></field>
} ;
<field name="dwKeySpec"><DWORD /></field>
<field name="HashAlgorithm"><CRYPT_ALGORITHM_IDENTIFIER /></field>
<field name="pvHashAuxInfo"><ptr><void /></ptr></field>
<field name="cAuthAttr"><DWORD /></field>
<field name="rgAuthAttr"><PCRYPT_ATTRIBUTE /></field>
<field name="cUnauthAttr"><DWORD /></field>
<field name="rgUnauthAttr"><PCRYPT_ATTRIBUTE /></field>
} CMSG_SIGNER_ENCODE_INFO, *PCMSG_SIGNER_ENCODE_INFO;
typedef struct _CMSG_SIGNED_ENCODE_INFO {
<field name="cbSize"><DWORD /></field>
<field name="cSigners"><DWORD /></field>
<field name="rgSigners"><PCMSG_SIGNER_ENCODE_INFO /></field>
<field name="cCertEncoded"><DWORD /></field>
<field name="rgCertEncoded"><PCERT_BLOB /></field>
<field name="cCrlEncoded"><DWORD /></field>
<field name="rgCrlEncoded"><PCRL_BLOB /></field>
} CMSG_SIGNED_ENCODE_INFO, *PCMSG_SIGNED_ENCODE_INFO;
typedef struct _CMSG_RECIPIENT_ENCODE_INFO CMSG_RECIPIENT_ENCODE_INFO, *PCMSG_RECIPIENT_ENCODE_INFO;
typedef struct _CMSG_ENVELOPED_ENCODE_INFO {
<field name="cbSize"><DWORD /></field>
<field name="hCryptProv"><HCRYPTPROV_LEGACY /></field>
<field name="ContentEncryptionAlgorithm"><CRYPT_ALGORITHM_IDENTIFIER /></field>
<field name="pvEncryptionAuxInfo"><ptr><void /></ptr></field>
<field name="cRecipients"><DWORD /></field>
<field name="rgpRecipients"><ptr><PCERT_INFO /></ptr></field>
} CMSG_ENVELOPED_ENCODE_INFO, *PCMSG_ENVELOPED_ENCODE_INFO;
typedef struct _CMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO {
<field name="cbSize"><DWORD /></field>
<field name="KeyEncryptionAlgorithm"><CRYPT_ALGORITHM_IDENTIFIER /></field>
<field name="pvKeyEncryptionAuxInfo"><ptr><void /></ptr></field>
<field name="hCryptProv"><HCRYPTPROV_LEGACY /></field>
<field name="RecipientPublicKey"><CRYPT_BIT_BLOB /></field>
<field name="RecipientId"><CERT_ID /></field>
} CMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO, *PCMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO;
typedef struct _CMSG_RECIPIENT_ENCRYPTED_KEY_ENCODE_INFO {
<field name="cbSize"><DWORD /></field>
<field name="RecipientPublicKey"><CRYPT_BIT_BLOB /></field>
<field name="RecipientId"><CERT_ID /></field>
<field name="Date"><FILETIME /></field>
<field name="pOtherAttr"><PCRYPT_ATTRIBUTE_TYPE_VALUE /></field>
} CMSG_RECIPIENT_ENCRYPTED_KEY_ENCODE_INFO, *PCMSG_RECIPIENT_ENCRYPTED_KEY_ENCODE_INFO;
typedef struct _CMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO {
<field name="cbSize"><DWORD /></field>
<field name="KeyEncryptionAlgorithm"><CRYPT_ALGORITHM_IDENTIFIER /></field>
<field name="pvKeyEncryptionAuxInfo"><ptr><void /></ptr></field>
<field name="KeyWrapAlgorithm"><CRYPT_ALGORITHM_IDENTIFIER /></field>
<field name="pvKeyWrapAuxInfo"><ptr><void /></ptr></field>
<field name="hCryptProv"><HCRYPTPROV_LEGACY /></field>
<field name="dwKeySpec"><DWORD /></field>
<field name="dwKeyChoice"><DWORD /></field>
union {
<field name="pEphemeralAlgorithm"><PCRYPT_ALGORITHM_IDENTIFIER /></field>
<field name="pSenderId"><PCERT_ID /></field>
} ;
<field name="UserKeyingMaterial"><CRYPT_DATA_BLOB /></field>
<field name="cRecipientEncryptedKeys"><DWORD /></field>
<field name="rgpRecipientEncryptedKeys"><ptr><PCMSG_RECIPIENT_ENCRYPTED_KEY_ENCODE_INFO /></ptr></field>
} CMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO, *PCMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO;
typedef struct _CMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO {
<field name="cbSize"><DWORD /></field>
<field name="KeyEncryptionAlgorithm"><CRYPT_ALGORITHM_IDENTIFIER /></field>
<field name="pvKeyEncryptionAuxInfo"><ptr><void /></ptr></field>
<field name="hCryptProv"><HCRYPTPROV /></field>
<field name="dwKeyChoice"><DWORD /></field>
union {
<field name="hKeyEncryptionKey"><HCRYPTKEY /></field>
<field name="pvKeyEncryptionKey"><ptr><void /></ptr></field>
} ;
<field name="KeyId"><CRYPT_DATA_BLOB /></field>
<field name="Date"><FILETIME /></field>
<field name="pOtherAttr"><PCRYPT_ATTRIBUTE_TYPE_VALUE /></field>
} CMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO, *PCMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO;
struct _CMSG_RECIPIENT_ENCODE_INFO {
<field name="dwRecipientChoice"><DWORD /></field>
union {
<field name="pKeyTrans"><PCMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO /></field>
<field name="pKeyAgree"><PCMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO /></field>
<field name="pMailList"><PCMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO /></field>
} ;
};
typedef struct _CMSG_RC2_AUX_INFO {
<field name="cbSize"><DWORD /></field>
<field name="dwBitLen"><DWORD /></field>
} CMSG_RC2_AUX_INFO, *PCMSG_RC2_AUX_INFO;
typedef struct _CMSG_SP3_COMPATIBLE_AUX_INFO {
<field name="cbSize"><DWORD /></field>
<field name="dwFlags"><DWORD /></field>
} CMSG_SP3_COMPATIBLE_AUX_INFO, *PCMSG_SP3_COMPATIBLE_AUX_INFO;
typedef struct _CMSG_RC4_AUX_INFO {
<field name="cbSize"><DWORD /></field>
<field name="dwBitLen"><DWORD /></field>
} CMSG_RC4_AUX_INFO, *PCMSG_RC4_AUX_INFO;
typedef struct _CMSG_SIGNED_AND_ENVELOPED_ENCODE_INFO {
<field name="cbSize"><DWORD /></field>
<field name="SignedInfo"><CMSG_SIGNED_ENCODE_INFO /></field>
<field name="EnvelopedInfo"><CMSG_ENVELOPED_ENCODE_INFO /></field>
} CMSG_SIGNED_AND_ENVELOPED_ENCODE_INFO, *PCMSG_SIGNED_AND_ENVELOPED_ENCODE_INFO;
typedef struct _CMSG_HASHED_ENCODE_INFO {
<field name="cbSize"><DWORD /></field>
<field name="hCryptProv"><HCRYPTPROV_LEGACY /></field>
<field name="HashAlgorithm"><CRYPT_ALGORITHM_IDENTIFIER /></field>
<field name="pvHashAuxInfo"><ptr><void /></ptr></field>
} CMSG_HASHED_ENCODE_INFO, *PCMSG_HASHED_ENCODE_INFO;
typedef struct _CMSG_ENCRYPTED_ENCODE_INFO {
<field name="cbSize"><DWORD /></field>
<field name="ContentEncryptionAlgorithm"><CRYPT_ALGORITHM_IDENTIFIER /></field>
<field name="pvEncryptionAuxInfo"><ptr><void /></ptr></field>
} CMSG_ENCRYPTED_ENCODE_INFO, *PCMSG_ENCRYPTED_ENCODE_INFO;
typedef BOOL (__stdcall *PFN_CMSG_STREAM_OUTPUT)( const void *pvArg, BYTE *pbData, DWORD cbData, BOOL fFinal );
typedef struct _CMSG_STREAM_INFO {
<field name="cbContent"><DWORD /></field>
<field name="pfnStreamOutput"><PFN_CMSG_STREAM_OUTPUT /></field>
<field name="pvArg"><ptr><void /></ptr></field>
} CMSG_STREAM_INFO, *PCMSG_STREAM_INFO;

HCRYPTMSG __stdcall CryptMsgOpenToEncode( DWORD dwMsgEncodingType, DWORD dwFlags, DWORD dwMsgType, void const *pvMsgEncodeInfo, LPSTR pszInnerContentObjID, PCMSG_STREAM_INFO pStreamInfo );

DWORD __stdcall CryptMsgCalculateEncodedLength( DWORD dwMsgEncodingType, DWORD dwFlags, DWORD dwMsgType, void const *pvMsgEncodeInfo, LPSTR pszInnerContentObjID, DWORD cbData );

HCRYPTMSG __stdcall CryptMsgOpenToDecode( DWORD dwMsgEncodingType, DWORD dwFlags, DWORD dwMsgType, HCRYPTPROV_LEGACY hCryptProv, PCERT_INFO pRecipientInfo, PCMSG_STREAM_INFO pStreamInfo );

HCRYPTMSG __stdcall CryptMsgDuplicate( HCRYPTMSG hCryptMsg );

BOOL __stdcall CryptMsgClose( HCRYPTMSG hCryptMsg );

BOOL __stdcall CryptMsgUpdate( HCRYPTMSG hCryptMsg, const BYTE *pbData, DWORD cbData, BOOL fFinal );

BOOL __stdcall CryptMsgGetParam( HCRYPTMSG hCryptMsg, DWORD dwParamType, DWORD dwIndex, void *pvData, DWORD *pcbData );
typedef struct _CMSG_SIGNER_INFO {
<field name="dwVersion"><DWORD /></field>
<field name="Issuer"><CERT_NAME_BLOB /></field>
<field name="SerialNumber"><CRYPT_INTEGER_BLOB /></field>
<field name="HashAlgorithm"><CRYPT_ALGORITHM_IDENTIFIER /></field>
<field name="HashEncryptionAlgorithm"><CRYPT_ALGORITHM_IDENTIFIER /></field>
<field name="EncryptedHash"><CRYPT_DATA_BLOB /></field>
<field name="AuthAttrs"><CRYPT_ATTRIBUTES /></field>
<field name="UnauthAttrs"><CRYPT_ATTRIBUTES /></field>
} CMSG_SIGNER_INFO, *PCMSG_SIGNER_INFO;
typedef struct _CMSG_CMS_SIGNER_INFO {
<field name="dwVersion"><DWORD /></field>
<field name="SignerId"><CERT_ID /></field>
<field name="HashAlgorithm"><CRYPT_ALGORITHM_IDENTIFIER /></field>
<field name="HashEncryptionAlgorithm"><CRYPT_ALGORITHM_IDENTIFIER /></field>
<field name="EncryptedHash"><CRYPT_DATA_BLOB /></field>
<field name="AuthAttrs"><CRYPT_ATTRIBUTES /></field>
<field name="UnauthAttrs"><CRYPT_ATTRIBUTES /></field>
} CMSG_CMS_SIGNER_INFO, *PCMSG_CMS_SIGNER_INFO;
<typedef name="CMSG_ATTR"><CRYPT_ATTRIBUTES /></typedef>
<typedef name="PCMSG_ATTR"><ptr><CRYPT_ATTRIBUTES /></ptr></typedef>
typedef struct _CMSG_KEY_TRANS_RECIPIENT_INFO {
<field name="dwVersion"><DWORD /></field>
<field name="RecipientId"><CERT_ID /></field>
<field name="KeyEncryptionAlgorithm"><CRYPT_ALGORITHM_IDENTIFIER /></field>
<field name="EncryptedKey"><CRYPT_DATA_BLOB /></field>
} CMSG_KEY_TRANS_RECIPIENT_INFO, *PCMSG_KEY_TRANS_RECIPIENT_INFO;
typedef struct _CMSG_RECIPIENT_ENCRYPTED_KEY_INFO {
<field name="RecipientId"><CERT_ID /></field>
<field name="EncryptedKey"><CRYPT_DATA_BLOB /></field>
<field name="Date"><FILETIME /></field>
<field name="pOtherAttr"><PCRYPT_ATTRIBUTE_TYPE_VALUE /></field>
} CMSG_RECIPIENT_ENCRYPTED_KEY_INFO, *PCMSG_RECIPIENT_ENCRYPTED_KEY_INFO;
typedef struct _CMSG_KEY_AGREE_RECIPIENT_INFO {
<field name="dwVersion"><DWORD /></field>
<field name="dwOriginatorChoice"><DWORD /></field>
union {
<field name="OriginatorCertId"><CERT_ID /></field>
<field name="OriginatorPublicKeyInfo"><CERT_PUBLIC_KEY_INFO /></field>
} ;
<field name="UserKeyingMaterial"><CRYPT_DATA_BLOB /></field>
<field name="KeyEncryptionAlgorithm"><CRYPT_ALGORITHM_IDENTIFIER /></field>
<field name="cRecipientEncryptedKeys"><DWORD /></field>
<field name="rgpRecipientEncryptedKeys"><ptr><PCMSG_RECIPIENT_ENCRYPTED_KEY_INFO /></ptr></field>
} CMSG_KEY_AGREE_RECIPIENT_INFO, *PCMSG_KEY_AGREE_RECIPIENT_INFO;
typedef struct _CMSG_MAIL_LIST_RECIPIENT_INFO {
<field name="dwVersion"><DWORD /></field>
<field name="KeyId"><CRYPT_DATA_BLOB /></field>
<field name="KeyEncryptionAlgorithm"><CRYPT_ALGORITHM_IDENTIFIER /></field>
<field name="EncryptedKey"><CRYPT_DATA_BLOB /></field>
<field name="Date"><FILETIME /></field>
<field name="pOtherAttr"><PCRYPT_ATTRIBUTE_TYPE_VALUE /></field>
} CMSG_MAIL_LIST_RECIPIENT_INFO, *PCMSG_MAIL_LIST_RECIPIENT_INFO;
typedef struct _CMSG_CMS_RECIPIENT_INFO {
<field name="dwRecipientChoice"><DWORD /></field>
union {
<field name="pKeyTrans"><PCMSG_KEY_TRANS_RECIPIENT_INFO /></field>
<field name="pKeyAgree"><PCMSG_KEY_AGREE_RECIPIENT_INFO /></field>
<field name="pMailList"><PCMSG_MAIL_LIST_RECIPIENT_INFO /></field>
} ;
} CMSG_CMS_RECIPIENT_INFO, *PCMSG_CMS_RECIPIENT_INFO;

BOOL __stdcall CryptMsgControl( HCRYPTMSG hCryptMsg, DWORD dwFlags, DWORD dwCtrlType, void const *pvCtrlPara );
typedef struct _CMSG_CTRL_VERIFY_SIGNATURE_EX_PARA {
<field name="cbSize"><DWORD /></field>
<field name="hCryptProv"><HCRYPTPROV_LEGACY /></field>
<field name="dwSignerIndex"><DWORD /></field>
<field name="dwSignerType"><DWORD /></field>
<field name="pvSigner"><ptr><void /></ptr></field>
} CMSG_CTRL_VERIFY_SIGNATURE_EX_PARA, *PCMSG_CTRL_VERIFY_SIGNATURE_EX_PARA;
typedef struct _CMSG_CTRL_DECRYPT_PARA {
<field name="cbSize"><DWORD /></field>
union {
<field name="hCryptProv"><HCRYPTPROV /></field>
<field name="hNCryptKey"><NCRYPT_KEY_HANDLE /></field>
} ;
<field name="dwKeySpec"><DWORD /></field>
<field name="dwRecipientIndex"><DWORD /></field>
} CMSG_CTRL_DECRYPT_PARA, *PCMSG_CTRL_DECRYPT_PARA;
typedef struct _CMSG_CTRL_KEY_TRANS_DECRYPT_PARA {
<field name="cbSize"><DWORD /></field>
union {
<field name="hCryptProv"><HCRYPTPROV /></field>
<field name="hNCryptKey"><NCRYPT_KEY_HANDLE /></field>
} ;
<field name="dwKeySpec"><DWORD /></field>
<field name="pKeyTrans"><PCMSG_KEY_TRANS_RECIPIENT_INFO /></field>
<field name="dwRecipientIndex"><DWORD /></field>
} CMSG_CTRL_KEY_TRANS_DECRYPT_PARA, *PCMSG_CTRL_KEY_TRANS_DECRYPT_PARA;
typedef struct _CMSG_CTRL_KEY_AGREE_DECRYPT_PARA {
<field name="cbSize"><DWORD /></field>
union {
<field name="hCryptProv"><HCRYPTPROV /></field>
<field name="hNCryptKey"><NCRYPT_KEY_HANDLE /></field>
} ;
<field name="dwKeySpec"><DWORD /></field>
<field name="pKeyAgree"><PCMSG_KEY_AGREE_RECIPIENT_INFO /></field>
<field name="dwRecipientIndex"><DWORD /></field>
<field name="dwRecipientEncryptedKeyIndex"><DWORD /></field>
<field name="OriginatorPublicKey"><CRYPT_BIT_BLOB /></field>
} CMSG_CTRL_KEY_AGREE_DECRYPT_PARA, *PCMSG_CTRL_KEY_AGREE_DECRYPT_PARA;
typedef struct _CMSG_CTRL_MAIL_LIST_DECRYPT_PARA {
<field name="cbSize"><DWORD /></field>
<field name="hCryptProv"><HCRYPTPROV /></field>
<field name="pMailList"><PCMSG_MAIL_LIST_RECIPIENT_INFO /></field>
<field name="dwRecipientIndex"><DWORD /></field>
<field name="dwKeyChoice"><DWORD /></field>
union {
<field name="hKeyEncryptionKey"><HCRYPTKEY /></field>
<field name="pvKeyEncryptionKey"><ptr><void /></ptr></field>
} ;
} CMSG_CTRL_MAIL_LIST_DECRYPT_PARA, *PCMSG_CTRL_MAIL_LIST_DECRYPT_PARA;
typedef struct _CMSG_CTRL_ADD_SIGNER_UNAUTH_ATTR_PARA {
<field name="cbSize"><DWORD /></field>
<field name="dwSignerIndex"><DWORD /></field>
<field name="blob"><CRYPT_DATA_BLOB /></field>
} CMSG_CTRL_ADD_SIGNER_UNAUTH_ATTR_PARA, *PCMSG_CTRL_ADD_SIGNER_UNAUTH_ATTR_PARA;
typedef struct _CMSG_CTRL_DEL_SIGNER_UNAUTH_ATTR_PARA {
<field name="cbSize"><DWORD /></field>
<field name="dwSignerIndex"><DWORD /></field>
<field name="dwUnauthAttrIndex"><DWORD /></field>
} CMSG_CTRL_DEL_SIGNER_UNAUTH_ATTR_PARA, *PCMSG_CTRL_DEL_SIGNER_UNAUTH_ATTR_PARA;
BOOL __stdcall CryptMsgVerifyCountersignatureEncoded( HCRYPTPROV_LEGACY hCryptProv, DWORD dwEncodingType, PBYTE pbSignerInfo, DWORD cbSignerInfo, PBYTE pbSignerInfoCountersignature, DWORD cbSignerInfoCountersignature, PCERT_INFO pciCountersigner );
BOOL __stdcall CryptMsgVerifyCountersignatureEncodedEx( HCRYPTPROV_LEGACY hCryptProv, DWORD dwEncodingType, PBYTE pbSignerInfo, DWORD cbSignerInfo, PBYTE pbSignerInfoCountersignature, DWORD cbSignerInfoCountersignature, DWORD dwSignerType, void *pvSigner, DWORD dwFlags, void *pvReserved );
BOOL __stdcall CryptMsgCountersign( HCRYPTMSG hCryptMsg, DWORD dwIndex, DWORD cCountersigners, PCMSG_SIGNER_ENCODE_INFO rgCountersigners );
BOOL __stdcall CryptMsgCountersignEncoded( DWORD dwEncodingType, PBYTE pbSignerInfo, DWORD cbSignerInfo, DWORD cCountersigners, PCMSG_SIGNER_ENCODE_INFO rgCountersigners, PBYTE pbCountersignature, PDWORD pcbCountersignature );
typedef void * (__stdcall *PFN_CMSG_ALLOC)(size_t cb );
typedef void (__stdcall *PFN_CMSG_FREE)( void *pv );
typedef BOOL (__stdcall *PFN_CMSG_GEN_ENCRYPT_KEY)(HCRYPTPROV *phCryptProv, PCRYPT_ALGORITHM_IDENTIFIER paiEncrypt, PVOID pvEncryptAuxInfo, PCERT_PUBLIC_KEY_INFO pPublicKeyInfo, PFN_CMSG_ALLOC pfnAlloc, HCRYPTKEY *phEncryptKey, PBYTE *ppbEncryptParameters, PDWORD pcbEncryptParameters );
typedef BOOL (__stdcall *PFN_CMSG_EXPORT_ENCRYPT_KEY)(HCRYPTPROV hCryptProv, HCRYPTKEY hEncryptKey, PCERT_PUBLIC_KEY_INFO pPublicKeyInfo, PBYTE pbData, PDWORD pcbData );
typedef BOOL (__stdcall *PFN_CMSG_IMPORT_ENCRYPT_KEY)(HCRYPTPROV hCryptProv, DWORD dwKeySpec, PCRYPT_ALGORITHM_IDENTIFIER paiEncrypt, PCRYPT_ALGORITHM_IDENTIFIER paiPubKey, PBYTE pbEncodedKey, DWORD cbEncodedKey, HCRYPTKEY *phEncryptKey );
typedef struct _CMSG_CONTENT_ENCRYPT_INFO {
<field name="cbSize"><DWORD /></field>
<field name="hCryptProv"><HCRYPTPROV_LEGACY /></field>
<field name="ContentEncryptionAlgorithm"><CRYPT_ALGORITHM_IDENTIFIER /></field>
<field name="pvEncryptionAuxInfo"><ptr><void /></ptr></field>
<field name="cRecipients"><DWORD /></field>
<field name="rgCmsRecipients"><PCMSG_RECIPIENT_ENCODE_INFO /></field>
<field name="pfnAlloc"><PFN_CMSG_ALLOC /></field>
<field name="pfnFree"><PFN_CMSG_FREE /></field>
<field name="dwEncryptFlags"><DWORD /></field>
union {
<field name="hContentEncryptKey"><HCRYPTKEY /></field>
<field name="hCNGContentEncryptKey"><BCRYPT_KEY_HANDLE /></field>
} ;
<field name="dwFlags"><DWORD /></field>
<field name="fCNG"><BOOL /></field>
<field name="pbCNGContentEncryptKeyObject"><ptr><BYTE /></ptr></field>
<field name="pbContentEncryptKey"><ptr><BYTE /></ptr></field>
<field name="cbContentEncryptKey"><DWORD /></field>
} CMSG_CONTENT_ENCRYPT_INFO, *PCMSG_CONTENT_ENCRYPT_INFO;
typedef BOOL (__stdcall *PFN_CMSG_GEN_CONTENT_ENCRYPT_KEY)(PCMSG_CONTENT_ENCRYPT_INFO pContentEncryptInfo, DWORD dwFlags, void *pvReserved );
typedef struct _CMSG_KEY_TRANS_ENCRYPT_INFO {
<field name="cbSize"><DWORD /></field>
<field name="dwRecipientIndex"><DWORD /></field>
<field name="KeyEncryptionAlgorithm"><CRYPT_ALGORITHM_IDENTIFIER /></field>
<field name="EncryptedKey"><CRYPT_DATA_BLOB /></field>
<field name="dwFlags"><DWORD /></field>
} CMSG_KEY_TRANS_ENCRYPT_INFO, *PCMSG_KEY_TRANS_ENCRYPT_INFO;
typedef BOOL (__stdcall *PFN_CMSG_EXPORT_KEY_TRANS)(PCMSG_CONTENT_ENCRYPT_INFO pContentEncryptInfo, PCMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO pKeyTransEncodeInfo, PCMSG_KEY_TRANS_ENCRYPT_INFO pKeyTransEncryptInfo, DWORD dwFlags, void *pvReserved );
typedef struct _CMSG_KEY_AGREE_KEY_ENCRYPT_INFO {
<field name="cbSize"><DWORD /></field>
<field name="EncryptedKey"><CRYPT_DATA_BLOB /></field>
} CMSG_KEY_AGREE_KEY_ENCRYPT_INFO, *PCMSG_KEY_AGREE_KEY_ENCRYPT_INFO;
typedef struct _CMSG_KEY_AGREE_ENCRYPT_INFO {
<field name="cbSize"><DWORD /></field>
<field name="dwRecipientIndex"><DWORD /></field>
<field name="KeyEncryptionAlgorithm"><CRYPT_ALGORITHM_IDENTIFIER /></field>
<field name="UserKeyingMaterial"><CRYPT_DATA_BLOB /></field>
<field name="dwOriginatorChoice"><DWORD /></field>
union {
<field name="OriginatorCertId"><CERT_ID /></field>
<field name="OriginatorPublicKeyInfo"><CERT_PUBLIC_KEY_INFO /></field>
} ;
<field name="cKeyAgreeKeyEncryptInfo"><DWORD /></field>
<field name="rgpKeyAgreeKeyEncryptInfo"><ptr><PCMSG_KEY_AGREE_KEY_ENCRYPT_INFO /></ptr></field>
<field name="dwFlags"><DWORD /></field>
} CMSG_KEY_AGREE_ENCRYPT_INFO, *PCMSG_KEY_AGREE_ENCRYPT_INFO;
typedef BOOL (__stdcall *PFN_CMSG_EXPORT_KEY_AGREE)(PCMSG_CONTENT_ENCRYPT_INFO pContentEncryptInfo, PCMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO pKeyAgreeEncodeInfo, PCMSG_KEY_AGREE_ENCRYPT_INFO pKeyAgreeEncryptInfo, DWORD dwFlags, void *pvReserved );
typedef struct _CMSG_MAIL_LIST_ENCRYPT_INFO {
<field name="cbSize"><DWORD /></field>
<field name="dwRecipientIndex"><DWORD /></field>
<field name="KeyEncryptionAlgorithm"><CRYPT_ALGORITHM_IDENTIFIER /></field>
<field name="EncryptedKey"><CRYPT_DATA_BLOB /></field>
<field name="dwFlags"><DWORD /></field>
} CMSG_MAIL_LIST_ENCRYPT_INFO, *PCMSG_MAIL_LIST_ENCRYPT_INFO;
typedef BOOL (__stdcall *PFN_CMSG_EXPORT_MAIL_LIST)(PCMSG_CONTENT_ENCRYPT_INFO pContentEncryptInfo, PCMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO pMailListEncodeInfo, PCMSG_MAIL_LIST_ENCRYPT_INFO pMailListEncryptInfo, DWORD dwFlags, void *pvReserved );
typedef BOOL (__stdcall *PFN_CMSG_IMPORT_KEY_TRANS)(PCRYPT_ALGORITHM_IDENTIFIER pContentEncryptionAlgorithm, PCMSG_CTRL_KEY_TRANS_DECRYPT_PARA pKeyTransDecryptPara, DWORD dwFlags, void *pvReserved, HCRYPTKEY *phContentEncryptKey );
typedef BOOL (__stdcall *PFN_CMSG_IMPORT_KEY_AGREE)(PCRYPT_ALGORITHM_IDENTIFIER pContentEncryptionAlgorithm, PCMSG_CTRL_KEY_AGREE_DECRYPT_PARA pKeyAgreeDecryptPara, DWORD dwFlags, void *pvReserved, HCRYPTKEY *phContentEncryptKey );
typedef BOOL (__stdcall *PFN_CMSG_IMPORT_MAIL_LIST)(PCRYPT_ALGORITHM_IDENTIFIER pContentEncryptionAlgorithm, PCMSG_CTRL_MAIL_LIST_DECRYPT_PARA pMailListDecryptPara, DWORD dwFlags, void *pvReserved, HCRYPTKEY *phContentEncryptKey );
typedef struct _CMSG_CNG_CONTENT_DECRYPT_INFO {
<field name="cbSize"><DWORD /></field>
<field name="ContentEncryptionAlgorithm"><CRYPT_ALGORITHM_IDENTIFIER /></field>
<field name="pfnAlloc"><PFN_CMSG_ALLOC /></field>
<field name="pfnFree"><PFN_CMSG_FREE /></field>
<field name="hNCryptKey"><NCRYPT_KEY_HANDLE /></field>
<field name="pbContentEncryptKey"><ptr><BYTE /></ptr></field>
<field name="cbContentEncryptKey"><DWORD /></field>
<field name="hCNGContentEncryptKey"><BCRYPT_KEY_HANDLE /></field>
<field name="pbCNGContentEncryptKeyObject"><ptr><BYTE /></ptr></field>
} CMSG_CNG_CONTENT_DECRYPT_INFO, *PCMSG_CNG_CONTENT_DECRYPT_INFO;
typedef BOOL (__stdcall *PFN_CMSG_CNG_IMPORT_KEY_TRANS)(PCMSG_CNG_CONTENT_DECRYPT_INFO pCNGContentDecryptInfo, PCMSG_CTRL_KEY_TRANS_DECRYPT_PARA pKeyTransDecryptPara, DWORD dwFlags, void *pvReserved );
typedef BOOL (__stdcall *PFN_CMSG_CNG_IMPORT_KEY_AGREE)(PCMSG_CNG_CONTENT_DECRYPT_INFO pCNGContentDecryptInfo, PCMSG_CTRL_KEY_AGREE_DECRYPT_PARA pKeyAgreeDecryptPara, DWORD dwFlags, void *pvReserved );
typedef BOOL (__stdcall *PFN_CMSG_CNG_IMPORT_CONTENT_ENCRYPT_KEY)(PCMSG_CNG_CONTENT_DECRYPT_INFO pCNGContentDecryptInfo, DWORD dwFlags, void *pvReserved );
<typedef name="HCERTSTORE"><ptr><void /></ptr></typedef>
typedef struct _CERT_CONTEXT {
<field name="dwCertEncodingType"><DWORD /></field>
<field name="pbCertEncoded"><ptr><BYTE /></ptr></field>
<field name="cbCertEncoded"><DWORD /></field>
<field name="pCertInfo"><PCERT_INFO /></field>
<field name="hCertStore"><HCERTSTORE /></field>
} CERT_CONTEXT, *PCERT_CONTEXT;
<typedef name="PCCERT_CONTEXT"><ptr const="true"><CERT_CONTEXT /></ptr></typedef>
typedef struct _CRL_CONTEXT {
<field name="dwCertEncodingType"><DWORD /></field>
<field name="pbCrlEncoded"><ptr><BYTE /></ptr></field>
<field name="cbCrlEncoded"><DWORD /></field>
<field name="pCrlInfo"><PCRL_INFO /></field>
<field name="hCertStore"><HCERTSTORE /></field>
} CRL_CONTEXT, *PCRL_CONTEXT;
<typedef name="PCCRL_CONTEXT"><ptr const="true"><CRL_CONTEXT /></ptr></typedef>
typedef struct _CTL_CONTEXT {
<field name="dwMsgAndCertEncodingType"><DWORD /></field>
<field name="pbCtlEncoded"><ptr><BYTE /></ptr></field>
<field name="cbCtlEncoded"><DWORD /></field>
<field name="pCtlInfo"><PCTL_INFO /></field>
<field name="hCertStore"><HCERTSTORE /></field>
<field name="hCryptMsg"><HCRYPTMSG /></field>
<field name="pbCtlContent"><ptr><BYTE /></ptr></field>
<field name="cbCtlContent"><DWORD /></field>
} CTL_CONTEXT, *PCTL_CONTEXT;
<typedef name="PCCTL_CONTEXT"><ptr const="true"><CTL_CONTEXT /></ptr></typedef>
typedef struct _CRYPT_KEY_PROV_PARAM {
<field name="dwParam"><DWORD /></field>
<field name="pbData"><ptr><BYTE /></ptr></field>
<field name="cbData"><DWORD /></field>
<field name="dwFlags"><DWORD /></field>
} CRYPT_KEY_PROV_PARAM, *PCRYPT_KEY_PROV_PARAM;
typedef struct _CRYPT_KEY_PROV_INFO {
<field name="pwszContainerName"><LPWSTR /></field>
<field name="pwszProvName"><LPWSTR /></field>
<field name="dwProvType"><DWORD /></field>
<field name="dwFlags"><DWORD /></field>
<field name="cProvParam"><DWORD /></field>
<field name="rgProvParam"><PCRYPT_KEY_PROV_PARAM /></field>
<field name="dwKeySpec"><DWORD /></field>
} CRYPT_KEY_PROV_INFO, *PCRYPT_KEY_PROV_INFO;
typedef struct _CERT_KEY_CONTEXT {
<field name="cbSize"><DWORD /></field>
union {
<field name="hCryptProv"><HCRYPTPROV /></field>
<field name="hNCryptKey"><NCRYPT_KEY_HANDLE /></field>
} ;
<field name="dwKeySpec"><DWORD /></field>
} CERT_KEY_CONTEXT, *PCERT_KEY_CONTEXT;
typedef struct _ROOT_INFO_LUID {
<field name="LowPart"><DWORD /></field>
<field name="HighPart"><LONG /></field>
} ROOT_INFO_LUID, *PROOT_INFO_LUID;
typedef struct _CRYPT_SMART_CARD_ROOT_INFO {
BYTE rgbCardID [16];
<field name="luid"><ROOT_INFO_LUID /></field>
} CRYPT_SMART_CARD_ROOT_INFO, *PCRYPT_SMART_CARD_ROOT_INFO;
typedef struct _CERT_SYSTEM_STORE_RELOCATE_PARA {
union {
<field name="hKeyBase"><HKEY /></field>
<field name="pvBase"><ptr><void /></ptr></field>
} ;
union {
<field name="pvSystemStore"><ptr><void /></ptr></field>
<field name="pszSystemStore"><LPCSTR /></field>
<field name="pwszSystemStore"><LPCWSTR /></field>
} ;
} CERT_SYSTEM_STORE_RELOCATE_PARA, *PCERT_SYSTEM_STORE_RELOCATE_PARA;
typedef struct _CERT_REGISTRY_STORE_CLIENT_GPT_PARA {
<field name="hKeyBase"><HKEY /></field>
<field name="pwszRegPath"><LPWSTR /></field>
} CERT_REGISTRY_STORE_CLIENT_GPT_PARA, *PCERT_REGISTRY_STORE_CLIENT_GPT_PARA;
typedef struct _CERT_REGISTRY_STORE_ROAMING_PARA {
<field name="hKey"><HKEY /></field>
<field name="pwszStoreDirectory"><LPWSTR /></field>
} CERT_REGISTRY_STORE_ROAMING_PARA, *PCERT_REGISTRY_STORE_ROAMING_PARA;
typedef struct _CERT_LDAP_STORE_OPENED_PARA {
<field name="pvLdapSessionHandle"><ptr><void /></ptr></field>
<field name="pwszLdapUrl"><LPCWSTR /></field>
} CERT_LDAP_STORE_OPENED_PARA, *PCERT_LDAP_STORE_OPENED_PARA;

HCERTSTORE __stdcall CertOpenStore( LPCSTR lpszStoreProvider, DWORD dwEncodingType, HCRYPTPROV_LEGACY hCryptProv, DWORD dwFlags, const void *pvPara );
<typedef name="HCERTSTOREPROV"><ptr><void /></ptr></typedef>
typedef struct _CERT_STORE_PROV_INFO {
<field name="cbSize"><DWORD /></field>
<field name="cStoreProvFunc"><DWORD /></field>
void **rgpvStoreProvFunc;
<field name="hStoreProv"><HCERTSTOREPROV /></field>
<field name="dwStoreProvFlags"><DWORD /></field>
<field name="hStoreProvFuncAddr2"><HCRYPTOIDFUNCADDR /></field>
} CERT_STORE_PROV_INFO, *PCERT_STORE_PROV_INFO;
typedef BOOL (__stdcall *PFN_CERT_DLL_OPEN_STORE_PROV_FUNC)( LPCSTR lpszStoreProvider, DWORD dwEncodingType, HCRYPTPROV_LEGACY hCryptProv, DWORD dwFlags, const void *pvPara, HCERTSTORE hCertStore, PCERT_STORE_PROV_INFO pStoreProvInfo );
typedef void (__stdcall *PFN_CERT_STORE_PROV_CLOSE)( HCERTSTOREPROV hStoreProv, DWORD dwFlags );
typedef BOOL (__stdcall *PFN_CERT_STORE_PROV_READ_CERT)( HCERTSTOREPROV hStoreProv, PCCERT_CONTEXT pStoreCertContext, DWORD dwFlags, PCCERT_CONTEXT *ppProvCertContext );
typedef BOOL (__stdcall *PFN_CERT_STORE_PROV_WRITE_CERT)( HCERTSTOREPROV hStoreProv, PCCERT_CONTEXT pCertContext, DWORD dwFlags );
typedef BOOL (__stdcall *PFN_CERT_STORE_PROV_DELETE_CERT)( HCERTSTOREPROV hStoreProv, PCCERT_CONTEXT pCertContext, DWORD dwFlags );
typedef BOOL (__stdcall *PFN_CERT_STORE_PROV_SET_CERT_PROPERTY)( HCERTSTOREPROV hStoreProv, PCCERT_CONTEXT pCertContext, DWORD dwPropId, DWORD dwFlags, const void *pvData );
typedef BOOL (__stdcall *PFN_CERT_STORE_PROV_READ_CRL)( HCERTSTOREPROV hStoreProv, PCCRL_CONTEXT pStoreCrlContext, DWORD dwFlags, PCCRL_CONTEXT *ppProvCrlContext );
typedef BOOL (__stdcall *PFN_CERT_STORE_PROV_WRITE_CRL)( HCERTSTOREPROV hStoreProv, PCCRL_CONTEXT pCrlContext, DWORD dwFlags );
typedef BOOL (__stdcall *PFN_CERT_STORE_PROV_DELETE_CRL)( HCERTSTOREPROV hStoreProv, PCCRL_CONTEXT pCrlContext, DWORD dwFlags );
typedef BOOL (__stdcall *PFN_CERT_STORE_PROV_SET_CRL_PROPERTY)( HCERTSTOREPROV hStoreProv, PCCRL_CONTEXT pCrlContext, DWORD dwPropId, DWORD dwFlags, const void *pvData );
typedef BOOL (__stdcall *PFN_CERT_STORE_PROV_READ_CTL)( HCERTSTOREPROV hStoreProv, PCCTL_CONTEXT pStoreCtlContext, DWORD dwFlags, PCCTL_CONTEXT *ppProvCtlContext );
typedef BOOL (__stdcall *PFN_CERT_STORE_PROV_WRITE_CTL)( HCERTSTOREPROV hStoreProv, PCCTL_CONTEXT pCtlContext, DWORD dwFlags );
typedef BOOL (__stdcall *PFN_CERT_STORE_PROV_DELETE_CTL)( HCERTSTOREPROV hStoreProv, PCCTL_CONTEXT pCtlContext, DWORD dwFlags );
typedef BOOL (__stdcall *PFN_CERT_STORE_PROV_SET_CTL_PROPERTY)( HCERTSTOREPROV hStoreProv, PCCTL_CONTEXT pCtlContext, DWORD dwPropId, DWORD dwFlags, const void *pvData );
typedef BOOL (__stdcall *PFN_CERT_STORE_PROV_CONTROL)( HCERTSTOREPROV hStoreProv, DWORD dwFlags, DWORD dwCtrlType, void const *pvCtrlPara );
typedef struct _CERT_STORE_PROV_FIND_INFO {
<field name="cbSize"><DWORD /></field>
<field name="dwMsgAndCertEncodingType"><DWORD /></field>
<field name="dwFindFlags"><DWORD /></field>
<field name="dwFindType"><DWORD /></field>
<field name="pvFindPara"><ptr const="true"><void /></ptr></field>
} CERT_STORE_PROV_FIND_INFO, *PCERT_STORE_PROV_FIND_INFO;
typedef const CERT_STORE_PROV_FIND_INFO CCERT_STORE_PROV_FIND_INFO, *PCCERT_STORE_PROV_FIND_INFO;
typedef BOOL (__stdcall *PFN_CERT_STORE_PROV_FIND_CERT)( HCERTSTOREPROV hStoreProv, PCCERT_STORE_PROV_FIND_INFO pFindInfo, PCCERT_CONTEXT pPrevCertContext, DWORD dwFlags, void **ppvStoreProvFindInfo, PCCERT_CONTEXT *ppProvCertContext );
typedef BOOL (__stdcall *PFN_CERT_STORE_PROV_FREE_FIND_CERT)( HCERTSTOREPROV hStoreProv, PCCERT_CONTEXT pCertContext, void *pvStoreProvFindInfo, DWORD dwFlags );
typedef BOOL (__stdcall *PFN_CERT_STORE_PROV_GET_CERT_PROPERTY)( HCERTSTOREPROV hStoreProv, PCCERT_CONTEXT pCertContext, DWORD dwPropId, DWORD dwFlags, void *pvData, DWORD *pcbData );
typedef BOOL (__stdcall *PFN_CERT_STORE_PROV_FIND_CRL)( HCERTSTOREPROV hStoreProv, PCCERT_STORE_PROV_FIND_INFO pFindInfo, PCCRL_CONTEXT pPrevCrlContext, DWORD dwFlags, void **ppvStoreProvFindInfo, PCCRL_CONTEXT *ppProvCrlContext );
typedef BOOL (__stdcall *PFN_CERT_STORE_PROV_FREE_FIND_CRL)( HCERTSTOREPROV hStoreProv, PCCRL_CONTEXT pCrlContext, void *pvStoreProvFindInfo, DWORD dwFlags );
typedef BOOL (__stdcall *PFN_CERT_STORE_PROV_GET_CRL_PROPERTY)( HCERTSTOREPROV hStoreProv, PCCRL_CONTEXT pCrlContext, DWORD dwPropId, DWORD dwFlags, void *pvData, DWORD *pcbData );
typedef BOOL (__stdcall *PFN_CERT_STORE_PROV_FIND_CTL)( HCERTSTOREPROV hStoreProv, PCCERT_STORE_PROV_FIND_INFO pFindInfo, PCCTL_CONTEXT pPrevCtlContext, DWORD dwFlags, void **ppvStoreProvFindInfo, PCCTL_CONTEXT *ppProvCtlContext );
typedef BOOL (__stdcall *PFN_CERT_STORE_PROV_FREE_FIND_CTL)( HCERTSTOREPROV hStoreProv, PCCTL_CONTEXT pCtlContext, void *pvStoreProvFindInfo, DWORD dwFlags );
typedef BOOL (__stdcall *PFN_CERT_STORE_PROV_GET_CTL_PROPERTY)( HCERTSTOREPROV hStoreProv, PCCTL_CONTEXT pCtlContext, DWORD dwPropId, DWORD dwFlags, void *pvData, DWORD *pcbData );

HCERTSTORE __stdcall CertDuplicateStore( HCERTSTORE hCertStore );

BOOL __stdcall CertSaveStore( HCERTSTORE hCertStore, DWORD dwEncodingType, DWORD dwSaveAs, DWORD dwSaveTo, void *pvSaveToPara, DWORD dwFlags );

BOOL __stdcall CertCloseStore( HCERTSTORE hCertStore, DWORD dwFlags );

PCCERT_CONTEXT __stdcall CertGetSubjectCertificateFromStore( HCERTSTORE hCertStore, DWORD dwCertEncodingType, PCERT_INFO pCertId );

PCCERT_CONTEXT __stdcall CertEnumCertificatesInStore( HCERTSTORE hCertStore, PCCERT_CONTEXT pPrevCertContext );

PCCERT_CONTEXT __stdcall CertFindCertificateInStore( HCERTSTORE hCertStore, DWORD dwCertEncodingType, DWORD dwFindFlags, DWORD dwFindType, const void *pvFindPara, PCCERT_CONTEXT pPrevCertContext );

PCCERT_CONTEXT __stdcall CertGetIssuerCertificateFromStore( HCERTSTORE hCertStore, PCCERT_CONTEXT pSubjectContext, PCCERT_CONTEXT pPrevIssuerContext, DWORD *pdwFlags );

BOOL __stdcall CertVerifySubjectCertificateContext( PCCERT_CONTEXT pSubject, PCCERT_CONTEXT pIssuer, DWORD *pdwFlags );

PCCERT_CONTEXT __stdcall CertDuplicateCertificateContext( PCCERT_CONTEXT pCertContext );

PCCERT_CONTEXT __stdcall CertCreateCertificateContext( DWORD dwCertEncodingType, const BYTE *pbCertEncoded, DWORD cbCertEncoded );

BOOL __stdcall CertFreeCertificateContext( PCCERT_CONTEXT pCertContext );

BOOL __stdcall CertSetCertificateContextProperty( PCCERT_CONTEXT pCertContext, DWORD dwPropId, DWORD dwFlags, const void *pvData );

BOOL __stdcall CertGetCertificateContextProperty( PCCERT_CONTEXT pCertContext, DWORD dwPropId, void *pvData, DWORD *pcbData );

DWORD __stdcall CertEnumCertificateContextProperties( PCCERT_CONTEXT pCertContext, DWORD dwPropId );

BOOL __stdcall CertCreateCTLEntryFromCertificateContextProperties( PCCERT_CONTEXT pCertContext, DWORD cOptAttr, PCRYPT_ATTRIBUTE rgOptAttr, DWORD dwFlags, void *pvReserved, PCTL_ENTRY pCtlEntry, DWORD *pcbCtlEntry );

BOOL __stdcall CertSetCertificateContextPropertiesFromCTLEntry( PCCERT_CONTEXT pCertContext, PCTL_ENTRY pCtlEntry, DWORD dwFlags );

PCCRL_CONTEXT __stdcall CertGetCRLFromStore( HCERTSTORE hCertStore, PCCERT_CONTEXT pIssuerContext, PCCRL_CONTEXT pPrevCrlContext, DWORD *pdwFlags );

PCCRL_CONTEXT __stdcall CertEnumCRLsInStore( HCERTSTORE hCertStore, PCCRL_CONTEXT pPrevCrlContext );

PCCRL_CONTEXT __stdcall CertFindCRLInStore( HCERTSTORE hCertStore, DWORD dwCertEncodingType, DWORD dwFindFlags, DWORD dwFindType, const void *pvFindPara, PCCRL_CONTEXT pPrevCrlContext );
typedef struct _CRL_FIND_ISSUED_FOR_PARA {
<field name="pSubjectCert"><PCCERT_CONTEXT /></field>
<field name="pIssuerCert"><PCCERT_CONTEXT /></field>
} CRL_FIND_ISSUED_FOR_PARA, *PCRL_FIND_ISSUED_FOR_PARA;

PCCRL_CONTEXT __stdcall CertDuplicateCRLContext( PCCRL_CONTEXT pCrlContext );

PCCRL_CONTEXT __stdcall CertCreateCRLContext( DWORD dwCertEncodingType, const BYTE *pbCrlEncoded, DWORD cbCrlEncoded );

BOOL __stdcall CertFreeCRLContext( PCCRL_CONTEXT pCrlContext );

BOOL __stdcall CertSetCRLContextProperty( PCCRL_CONTEXT pCrlContext, DWORD dwPropId, DWORD dwFlags, const void *pvData );

BOOL __stdcall CertGetCRLContextProperty( PCCRL_CONTEXT pCrlContext, DWORD dwPropId, void *pvData, DWORD *pcbData );

DWORD __stdcall CertEnumCRLContextProperties( PCCRL_CONTEXT pCrlContext, DWORD dwPropId );

BOOL __stdcall CertFindCertificateInCRL( PCCERT_CONTEXT pCert, PCCRL_CONTEXT pCrlContext, DWORD dwFlags, void *pvReserved, PCRL_ENTRY *ppCrlEntry );

BOOL __stdcall CertIsValidCRLForCertificate( PCCERT_CONTEXT pCert, PCCRL_CONTEXT pCrl, DWORD dwFlags, void *pvReserved );

BOOL __stdcall CertAddEncodedCertificateToStore( HCERTSTORE hCertStore, DWORD dwCertEncodingType, const BYTE *pbCertEncoded, DWORD cbCertEncoded, DWORD dwAddDisposition, PCCERT_CONTEXT *ppCertContext );

BOOL __stdcall CertAddCertificateContextToStore( HCERTSTORE hCertStore, PCCERT_CONTEXT pCertContext, DWORD dwAddDisposition, PCCERT_CONTEXT *ppStoreContext );

BOOL __stdcall CertAddSerializedElementToStore( HCERTSTORE hCertStore, const BYTE *pbElement, DWORD cbElement, DWORD dwAddDisposition, DWORD dwFlags, DWORD dwContextTypeFlags, DWORD *pdwContextType, const void **ppvContext );

BOOL __stdcall CertDeleteCertificateFromStore( PCCERT_CONTEXT pCertContext );

BOOL __stdcall CertAddEncodedCRLToStore( HCERTSTORE hCertStore, DWORD dwCertEncodingType, const BYTE *pbCrlEncoded, DWORD cbCrlEncoded, DWORD dwAddDisposition, PCCRL_CONTEXT *ppCrlContext );

BOOL __stdcall CertAddCRLContextToStore( HCERTSTORE hCertStore, PCCRL_CONTEXT pCrlContext, DWORD dwAddDisposition, PCCRL_CONTEXT *ppStoreContext );

BOOL __stdcall CertDeleteCRLFromStore( PCCRL_CONTEXT pCrlContext );

BOOL __stdcall CertSerializeCertificateStoreElement( PCCERT_CONTEXT pCertContext, DWORD dwFlags, BYTE *pbElement, DWORD *pcbElement );

BOOL __stdcall CertSerializeCRLStoreElement( PCCRL_CONTEXT pCrlContext, DWORD dwFlags, BYTE *pbElement, DWORD *pcbElement );

PCCTL_CONTEXT __stdcall CertDuplicateCTLContext( PCCTL_CONTEXT pCtlContext );

PCCTL_CONTEXT __stdcall CertCreateCTLContext( DWORD dwMsgAndCertEncodingType, const BYTE *pbCtlEncoded, DWORD cbCtlEncoded );

BOOL __stdcall CertFreeCTLContext( PCCTL_CONTEXT pCtlContext );

BOOL __stdcall CertSetCTLContextProperty( PCCTL_CONTEXT pCtlContext, DWORD dwPropId, DWORD dwFlags, const void *pvData );

BOOL __stdcall CertGetCTLContextProperty( PCCTL_CONTEXT pCtlContext, DWORD dwPropId, void *pvData, DWORD *pcbData );

DWORD __stdcall CertEnumCTLContextProperties( PCCTL_CONTEXT pCtlContext, DWORD dwPropId );

PCCTL_CONTEXT __stdcall CertEnumCTLsInStore( HCERTSTORE hCertStore, PCCTL_CONTEXT pPrevCtlContext );

PCTL_ENTRY __stdcall CertFindSubjectInCTL( DWORD dwEncodingType, DWORD dwSubjectType, void *pvSubject, PCCTL_CONTEXT pCtlContext, DWORD dwFlags );
typedef struct _CTL_ANY_SUBJECT_INFO {
<field name="SubjectAlgorithm"><CRYPT_ALGORITHM_IDENTIFIER /></field>
<field name="SubjectIdentifier"><CRYPT_DATA_BLOB /></field>
} CTL_ANY_SUBJECT_INFO, *PCTL_ANY_SUBJECT_INFO;

PCCTL_CONTEXT __stdcall CertFindCTLInStore( HCERTSTORE hCertStore, DWORD dwMsgAndCertEncodingType, DWORD dwFindFlags, DWORD dwFindType, const void *pvFindPara, PCCTL_CONTEXT pPrevCtlContext );
typedef struct _CTL_FIND_USAGE_PARA {
<field name="cbSize"><DWORD /></field>
<field name="SubjectUsage"><CTL_USAGE /></field>
<field name="ListIdentifier"><CRYPT_DATA_BLOB /></field>
<field name="pSigner"><PCERT_INFO /></field>
} CTL_FIND_USAGE_PARA, *PCTL_FIND_USAGE_PARA;
typedef struct _CTL_FIND_SUBJECT_PARA {
<field name="cbSize"><DWORD /></field>
<field name="pUsagePara"><PCTL_FIND_USAGE_PARA /></field>
<field name="dwSubjectType"><DWORD /></field>
<field name="pvSubject"><ptr><void /></ptr></field>
} CTL_FIND_SUBJECT_PARA, *PCTL_FIND_SUBJECT_PARA;

BOOL __stdcall CertAddEncodedCTLToStore( HCERTSTORE hCertStore, DWORD dwMsgAndCertEncodingType, const BYTE *pbCtlEncoded, DWORD cbCtlEncoded, DWORD dwAddDisposition, PCCTL_CONTEXT *ppCtlContext );

BOOL __stdcall CertAddCTLContextToStore( HCERTSTORE hCertStore, PCCTL_CONTEXT pCtlContext, DWORD dwAddDisposition, PCCTL_CONTEXT *ppStoreContext );

BOOL __stdcall CertSerializeCTLStoreElement( PCCTL_CONTEXT pCtlContext, DWORD dwFlags, BYTE *pbElement, DWORD *pcbElement );

BOOL __stdcall CertDeleteCTLFromStore( PCCTL_CONTEXT pCtlContext );

BOOL __stdcall CertAddCertificateLinkToStore( HCERTSTORE hCertStore, PCCERT_CONTEXT pCertContext, DWORD dwAddDisposition, PCCERT_CONTEXT *ppStoreContext );

BOOL __stdcall CertAddCRLLinkToStore( HCERTSTORE hCertStore, PCCRL_CONTEXT pCrlContext, DWORD dwAddDisposition, PCCRL_CONTEXT *ppStoreContext );

BOOL __stdcall CertAddCTLLinkToStore( HCERTSTORE hCertStore, PCCTL_CONTEXT pCtlContext, DWORD dwAddDisposition, PCCTL_CONTEXT *ppStoreContext );

BOOL __stdcall CertAddStoreToCollection( HCERTSTORE hCollectionStore, HCERTSTORE hSiblingStore, DWORD dwUpdateFlags, DWORD dwPriority );

void __stdcall CertRemoveStoreFromCollection( HCERTSTORE hCollectionStore, HCERTSTORE hSiblingStore );

BOOL __stdcall CertControlStore( HCERTSTORE hCertStore, DWORD dwFlags, DWORD dwCtrlType, void const *pvCtrlPara );

BOOL __stdcall CertSetStoreProperty( HCERTSTORE hCertStore, DWORD dwPropId, DWORD dwFlags, const void *pvData );

BOOL __stdcall CertGetStoreProperty( HCERTSTORE hCertStore, DWORD dwPropId, void *pvData, DWORD *pcbData );
typedef BOOL (__stdcall *PFN_CERT_CREATE_CONTEXT_SORT_FUNC)( DWORD cbTotalEncoded, DWORD cbRemainEncoded, DWORD cEntry, void *pvSort );
typedef struct _CERT_CREATE_CONTEXT_PARA {
<field name="cbSize"><DWORD /></field>
<field name="pfnFree"><PFN_CRYPT_FREE /></field>
<field name="pvFree"><ptr><void /></ptr></field>
<field name="pfnSort"><PFN_CERT_CREATE_CONTEXT_SORT_FUNC /></field>
<field name="pvSort"><ptr><void /></ptr></field>
} CERT_CREATE_CONTEXT_PARA, *PCERT_CREATE_CONTEXT_PARA;

const void * __stdcall CertCreateContext( DWORD dwContextType, DWORD dwEncodingType, const BYTE *pbEncoded, DWORD cbEncoded, DWORD dwFlags, PCERT_CREATE_CONTEXT_PARA pCreatePara );
typedef struct _CERT_SYSTEM_STORE_INFO {
<field name="cbSize"><DWORD /></field>
} CERT_SYSTEM_STORE_INFO, *PCERT_SYSTEM_STORE_INFO;
typedef struct _CERT_PHYSICAL_STORE_INFO {
<field name="cbSize"><DWORD /></field>
<field name="pszOpenStoreProvider"><LPSTR /></field>
<field name="dwOpenEncodingType"><DWORD /></field>
<field name="dwOpenFlags"><DWORD /></field>
<field name="OpenParameters"><CRYPT_DATA_BLOB /></field>
<field name="dwFlags"><DWORD /></field>
<field name="dwPriority"><DWORD /></field>
} CERT_PHYSICAL_STORE_INFO, *PCERT_PHYSICAL_STORE_INFO;

BOOL __stdcall CertRegisterSystemStore( const void *pvSystemStore, DWORD dwFlags, PCERT_SYSTEM_STORE_INFO pStoreInfo, void *pvReserved );

BOOL __stdcall CertRegisterPhysicalStore( const void *pvSystemStore, DWORD dwFlags, LPCWSTR pwszStoreName, PCERT_PHYSICAL_STORE_INFO pStoreInfo, void *pvReserved );

BOOL __stdcall CertUnregisterSystemStore( const void *pvSystemStore, DWORD dwFlags );

BOOL __stdcall CertUnregisterPhysicalStore( const void *pvSystemStore, DWORD dwFlags, LPCWSTR pwszStoreName );
typedef BOOL (__stdcall *PFN_CERT_ENUM_SYSTEM_STORE_LOCATION)( LPCWSTR pwszStoreLocation, DWORD dwFlags, void *pvReserved, void *pvArg );
typedef BOOL (__stdcall *PFN_CERT_ENUM_SYSTEM_STORE)( const void *pvSystemStore, DWORD dwFlags, PCERT_SYSTEM_STORE_INFO pStoreInfo, void *pvReserved, void *pvArg );
typedef BOOL (__stdcall *PFN_CERT_ENUM_PHYSICAL_STORE)( const void *pvSystemStore, DWORD dwFlags, LPCWSTR pwszStoreName, PCERT_PHYSICAL_STORE_INFO pStoreInfo, void *pvReserved, void *pvArg );

BOOL __stdcall CertEnumSystemStoreLocation( DWORD dwFlags, void *pvArg, PFN_CERT_ENUM_SYSTEM_STORE_LOCATION pfnEnum );

BOOL __stdcall CertEnumSystemStore( DWORD dwFlags, void *pvSystemStoreLocationPara, void *pvArg, PFN_CERT_ENUM_SYSTEM_STORE pfnEnum );

BOOL __stdcall CertEnumPhysicalStore( const void *pvSystemStore, DWORD dwFlags, void *pvArg, PFN_CERT_ENUM_PHYSICAL_STORE pfnEnum );

BOOL __stdcall CertGetEnhancedKeyUsage( PCCERT_CONTEXT pCertContext, DWORD dwFlags, PCERT_ENHKEY_USAGE pUsage, DWORD *pcbUsage );

BOOL __stdcall CertSetEnhancedKeyUsage( PCCERT_CONTEXT pCertContext, PCERT_ENHKEY_USAGE pUsage );

BOOL __stdcall CertAddEnhancedKeyUsageIdentifier( PCCERT_CONTEXT pCertContext, LPCSTR pszUsageIdentifier );

BOOL __stdcall CertRemoveEnhancedKeyUsageIdentifier( PCCERT_CONTEXT pCertContext, LPCSTR pszUsageIdentifier );

BOOL __stdcall CertGetValidUsages( DWORD cCerts, PCCERT_CONTEXT *rghCerts, int32 *cNumOIDs, LPSTR *rghOIDs, DWORD *pcbOIDs);

BOOL __stdcall CryptMsgGetAndVerifySigner( HCRYPTMSG hCryptMsg, DWORD cSignerStore, HCERTSTORE *rghSignerStore, DWORD dwFlags, PCCERT_CONTEXT *ppSigner, DWORD *pdwSignerIndex );

BOOL __stdcall CryptMsgSignCTL( DWORD dwMsgEncodingType, BYTE *pbCtlContent, DWORD cbCtlContent, PCMSG_SIGNED_ENCODE_INFO pSignInfo, DWORD dwFlags, BYTE *pbEncoded, DWORD *pcbEncoded );

BOOL __stdcall CryptMsgEncodeAndSignCTL( DWORD dwMsgEncodingType, PCTL_INFO pCtlInfo, PCMSG_SIGNED_ENCODE_INFO pSignInfo, DWORD dwFlags, BYTE *pbEncoded, DWORD *pcbEncoded );

BOOL __stdcall CertFindSubjectInSortedCTL( PCRYPT_DATA_BLOB pSubjectIdentifier, PCCTL_CONTEXT pCtlContext, DWORD dwFlags, void *pvReserved, PCRYPT_DER_BLOB pEncodedAttributes );

BOOL __stdcall CertEnumSubjectInSortedCTL( PCCTL_CONTEXT pCtlContext, void **ppvNextSubject, PCRYPT_DER_BLOB pSubjectIdentifier, PCRYPT_DER_BLOB pEncodedAttributes );
typedef struct _CTL_VERIFY_USAGE_PARA {
<field name="cbSize"><DWORD /></field>
<field name="ListIdentifier"><CRYPT_DATA_BLOB /></field>
<field name="cCtlStore"><DWORD /></field>
<field name="rghCtlStore"><ptr><HCERTSTORE /></ptr></field>
<field name="cSignerStore"><DWORD /></field>
<field name="rghSignerStore"><ptr><HCERTSTORE /></ptr></field>
} CTL_VERIFY_USAGE_PARA, *PCTL_VERIFY_USAGE_PARA;
typedef struct _CTL_VERIFY_USAGE_STATUS {
<field name="cbSize"><DWORD /></field>
<field name="dwError"><DWORD /></field>
<field name="dwFlags"><DWORD /></field>
<field name="ppCtl"><ptr><PCCTL_CONTEXT /></ptr></field>
<field name="dwCtlEntryIndex"><DWORD /></field>
<field name="ppSigner"><ptr><PCCERT_CONTEXT /></ptr></field>
<field name="dwSignerIndex"><DWORD /></field>
} CTL_VERIFY_USAGE_STATUS, *PCTL_VERIFY_USAGE_STATUS;

BOOL __stdcall CertVerifyCTLUsage( DWORD dwEncodingType, DWORD dwSubjectType, void *pvSubject, PCTL_USAGE pSubjectUsage, DWORD dwFlags, PCTL_VERIFY_USAGE_PARA pVerifyUsagePara, PCTL_VERIFY_USAGE_STATUS pVerifyUsageStatus );
typedef struct _CERT_REVOCATION_CRL_INFO {
<field name="cbSize"><DWORD /></field>
<field name="pBaseCrlContext"><PCCRL_CONTEXT /></field>
<field name="pDeltaCrlContext"><PCCRL_CONTEXT /></field>
<field name="pCrlEntry"><PCRL_ENTRY /></field>
<field name="fDeltaCrlEntry"><BOOL /></field>
} CERT_REVOCATION_CRL_INFO, *PCERT_REVOCATION_CRL_INFO;
typedef struct _CERT_REVOCATION_CHAIN_PARA CERT_REVOCATION_CHAIN_PARA, *PCERT_REVOCATION_CHAIN_PARA;
typedef struct _CERT_REVOCATION_PARA {
<field name="cbSize"><DWORD /></field>
<field name="pIssuerCert"><PCCERT_CONTEXT /></field>
<field name="cCertStore"><DWORD /></field>
<field name="rgCertStore"><ptr><HCERTSTORE /></ptr></field>
<field name="hCrlStore"><HCERTSTORE /></field>
<field name="pftTimeToUse"><LPFILETIME /></field>
} CERT_REVOCATION_PARA, *PCERT_REVOCATION_PARA;
typedef struct _CERT_REVOCATION_STATUS {
<field name="cbSize"><DWORD /></field>
<field name="dwIndex"><DWORD /></field>
<field name="dwError"><DWORD /></field>
<field name="dwReason"><DWORD /></field>
<field name="fHasFreshnessTime"><BOOL /></field>
<field name="dwFreshnessTime"><DWORD /></field>
} CERT_REVOCATION_STATUS, *PCERT_REVOCATION_STATUS;

BOOL __stdcall CertVerifyRevocation( DWORD dwEncodingType, DWORD dwRevType, DWORD cContext, PVOID rgpvContext[], DWORD dwFlags, PCERT_REVOCATION_PARA pRevPara, PCERT_REVOCATION_STATUS pRevStatus );
BOOL __stdcall CertCompareIntegerBlob( PCRYPT_INTEGER_BLOB pInt1, PCRYPT_INTEGER_BLOB pInt2 );

BOOL __stdcall CertCompareCertificate( DWORD dwCertEncodingType, PCERT_INFO pCertId1, PCERT_INFO pCertId2 );

BOOL __stdcall CertCompareCertificateName( DWORD dwCertEncodingType, PCERT_NAME_BLOB pCertName1, PCERT_NAME_BLOB pCertName2 );

BOOL __stdcall CertIsRDNAttrsInCertificateName( DWORD dwCertEncodingType, DWORD dwFlags, PCERT_NAME_BLOB pCertName, PCERT_RDN pRDN );

BOOL __stdcall CertComparePublicKeyInfo( DWORD dwCertEncodingType, PCERT_PUBLIC_KEY_INFO pPublicKey1, PCERT_PUBLIC_KEY_INFO pPublicKey2 );

DWORD __stdcall CertGetPublicKeyLength( DWORD dwCertEncodingType, PCERT_PUBLIC_KEY_INFO pPublicKey );

BOOL __stdcall CryptVerifyCertificateSignature( HCRYPTPROV_LEGACY hCryptProv, DWORD dwCertEncodingType, const BYTE *pbEncoded, DWORD cbEncoded, PCERT_PUBLIC_KEY_INFO pPublicKey );

BOOL __stdcall CryptVerifyCertificateSignatureEx( HCRYPTPROV_LEGACY hCryptProv, DWORD dwCertEncodingType, DWORD dwSubjectType, void *pvSubject, DWORD dwIssuerType, void *pvIssuer, DWORD dwFlags, void *pvReserved );

BOOL __stdcall CryptHashToBeSigned( HCRYPTPROV_LEGACY hCryptProv, DWORD dwCertEncodingType, const BYTE *pbEncoded, DWORD cbEncoded, BYTE *pbComputedHash, DWORD *pcbComputedHash );

BOOL __stdcall CryptHashCertificate( HCRYPTPROV_LEGACY hCryptProv, ALG_ID Algid, DWORD dwFlags, const BYTE *pbEncoded, DWORD cbEncoded, BYTE *pbComputedHash, DWORD *pcbComputedHash );

BOOL __stdcall CryptHashCertificate2( LPCWSTR pwszCNGHashAlgid, DWORD dwFlags, void *pvReserved, const BYTE *pbEncoded, DWORD cbEncoded, BYTE *pbComputedHash, DWORD *pcbComputedHash );

BOOL __stdcall CryptSignCertificate( HCRYPTPROV_OR_NCRYPT_KEY_HANDLE hCryptProvOrNCryptKey, DWORD dwKeySpec, DWORD dwCertEncodingType, const BYTE *pbEncodedToBeSigned, DWORD cbEncodedToBeSigned, PCRYPT_ALGORITHM_IDENTIFIER pSignatureAlgorithm, const void *pvHashAuxInfo, BYTE *pbSignature, DWORD *pcbSignature );

BOOL __stdcall CryptSignAndEncodeCertificate( HCRYPTPROV_OR_NCRYPT_KEY_HANDLE hCryptProvOrNCryptKey, DWORD dwKeySpec, DWORD dwCertEncodingType, LPCSTR lpszStructType, const void *pvStructInfo, PCRYPT_ALGORITHM_IDENTIFIER pSignatureAlgorithm, const void *pvHashAuxInfo, BYTE *pbEncoded, DWORD *pcbEncoded );
typedef BOOL (__stdcall *PFN_CRYPT_EXTRACT_ENCODED_SIGNATURE_PARAMETERS_FUNC)( DWORD dwCertEncodingType, PCRYPT_ALGORITHM_IDENTIFIER pSignatureAlgorithm, void **ppvDecodedSignPara, LPWSTR *ppwszCNGHashAlgid );
typedef BOOL (__stdcall *PFN_CRYPT_SIGN_AND_ENCODE_HASH_FUNC)( NCRYPT_KEY_HANDLE hKey, DWORD dwCertEncodingType, PCRYPT_ALGORITHM_IDENTIFIER pSignatureAlgorithm, void *pvDecodedSignPara, LPCWSTR pwszCNGPubKeyAlgid, LPCWSTR pwszCNGHashAlgid, BYTE *pbComputedHash, DWORD cbComputedHash, BYTE *pbSignature, DWORD *pcbSignature );
typedef BOOL (__stdcall *PFN_CRYPT_VERIFY_ENCODED_SIGNATURE_FUNC)( DWORD dwCertEncodingType, PCERT_PUBLIC_KEY_INFO pPubKeyInfo, PCRYPT_ALGORITHM_IDENTIFIER pSignatureAlgorithm, void *pvDecodedSignPara, LPCWSTR pwszCNGPubKeyAlgid, LPCWSTR pwszCNGHashAlgid, BYTE *pbComputedHash, DWORD cbComputedHash, BYTE *pbSignature, DWORD cbSignature );

LONG __stdcall CertVerifyTimeValidity( LPFILETIME pTimeToVerify, PCERT_INFO pCertInfo );

LONG __stdcall CertVerifyCRLTimeValidity( LPFILETIME pTimeToVerify, PCRL_INFO pCrlInfo );

BOOL __stdcall CertVerifyValidityNesting( PCERT_INFO pSubjectInfo, PCERT_INFO pIssuerInfo );

BOOL __stdcall CertVerifyCRLRevocation( DWORD dwCertEncodingType, PCERT_INFO pCertId, DWORD cCrlInfo, PCRL_INFO rgpCrlInfo[] );

LPCSTR __stdcall CertAlgIdToOID( DWORD dwAlgId );

DWORD __stdcall CertOIDToAlgId( LPCSTR pszObjId );

PCERT_EXTENSION __stdcall CertFindExtension( LPCSTR pszObjId, DWORD cExtensions, CERT_EXTENSION rgExtensions[] );

PCRYPT_ATTRIBUTE __stdcall CertFindAttribute( LPCSTR pszObjId, DWORD cAttr, CRYPT_ATTRIBUTE rgAttr[] );

PCERT_RDN_ATTR __stdcall CertFindRDNAttr( LPCSTR pszObjId, PCERT_NAME_INFO pName );

BOOL __stdcall CertGetIntendedKeyUsage( DWORD dwCertEncodingType, PCERT_INFO pCertInfo, BYTE *pbKeyUsage, DWORD cbKeyUsage );
<typedef name="HCRYPTDEFAULTCONTEXT"><ptr><void /></ptr></typedef>

BOOL __stdcall CryptInstallDefaultContext( HCRYPTPROV hCryptProv, DWORD dwDefaultType, const void *pvDefaultPara, DWORD dwFlags, void *pvReserved, HCRYPTDEFAULTCONTEXT *phDefaultContext );
typedef struct _CRYPT_DEFAULT_CONTEXT_MULTI_OID_PARA {
<field name="cOID"><DWORD /></field>
<field name="rgpszOID"><ptr><LPSTR /></ptr></field>
} CRYPT_DEFAULT_CONTEXT_MULTI_OID_PARA, *PCRYPT_DEFAULT_CONTEXT_MULTI_OID_PARA;

BOOL __stdcall CryptUninstallDefaultContext( HCRYPTDEFAULTCONTEXT hDefaultContext, DWORD dwFlags, void *pvReserved );

BOOL __stdcall CryptExportPublicKeyInfo( HCRYPTPROV_OR_NCRYPT_KEY_HANDLE hCryptProvOrNCryptKey, DWORD dwKeySpec, DWORD dwCertEncodingType, PCERT_PUBLIC_KEY_INFO pInfo, DWORD *pcbInfo );

BOOL __stdcall CryptExportPublicKeyInfoEx( HCRYPTPROV_OR_NCRYPT_KEY_HANDLE hCryptProvOrNCryptKey, DWORD dwKeySpec, DWORD dwCertEncodingType, LPSTR pszPublicKeyObjId, DWORD dwFlags, void *pvAuxInfo, PCERT_PUBLIC_KEY_INFO pInfo, DWORD *pcbInfo );
typedef BOOL (__stdcall *PFN_CRYPT_EXPORT_PUBLIC_KEY_INFO_EX2_FUNC)(NCRYPT_KEY_HANDLE hNCryptKey, DWORD dwCertEncodingType, LPSTR pszPublicKeyObjId, DWORD dwFlags, void *pvAuxInfo, PCERT_PUBLIC_KEY_INFO pInfo, DWORD *pcbInfo );

BOOL __stdcall CryptExportPublicKeyInfoFromBCryptKeyHandle( BCRYPT_KEY_HANDLE hBCryptKey, DWORD dwCertEncodingType, LPSTR pszPublicKeyObjId, DWORD dwFlags, void *pvAuxInfo, PCERT_PUBLIC_KEY_INFO pInfo, DWORD *pcbInfo );
typedef BOOL (__stdcall *PFN_CRYPT_EXPORT_PUBLIC_KEY_INFO_FROM_BCRYPT_HANDLE_FUNC)(BCRYPT_KEY_HANDLE hBCryptKey, DWORD dwCertEncodingType, LPSTR pszPublicKeyObjId, DWORD dwFlags, void *pvAuxInfo, PCERT_PUBLIC_KEY_INFO pInfo, DWORD *pcbInfo );

BOOL __stdcall CryptImportPublicKeyInfo( HCRYPTPROV hCryptProv, DWORD dwCertEncodingType, PCERT_PUBLIC_KEY_INFO pInfo, HCRYPTKEY *phKey );

BOOL __stdcall CryptImportPublicKeyInfoEx( HCRYPTPROV hCryptProv, DWORD dwCertEncodingType, PCERT_PUBLIC_KEY_INFO pInfo, ALG_ID aiKeyAlg, DWORD dwFlags, void *pvAuxInfo, HCRYPTKEY *phKey );

BOOL __stdcall CryptImportPublicKeyInfoEx2( DWORD dwCertEncodingType, PCERT_PUBLIC_KEY_INFO pInfo, DWORD dwFlags, void *pvAuxInfo, BCRYPT_KEY_HANDLE *phKey );
typedef BOOL (__stdcall *PFN_IMPORT_PUBLIC_KEY_INFO_EX2_FUNC)(DWORD dwCertEncodingType, PCERT_PUBLIC_KEY_INFO pInfo, DWORD dwFlags, void *pvAuxInfo, BCRYPT_KEY_HANDLE *phKey );

BOOL __stdcall CryptAcquireCertificatePrivateKey( PCCERT_CONTEXT pCert, DWORD dwFlags, void *pvReserved, HCRYPTPROV_OR_NCRYPT_KEY_HANDLE *phCryptProvOrNCryptKey, DWORD *pdwKeySpec, BOOL *pfCallerFreeProvOrNCryptKey );

BOOL __stdcall CryptFindCertificateKeyProvInfo( PCCERT_CONTEXT pCert, DWORD dwFlags, void *pvReserved );
typedef BOOL (__stdcall *PFN_IMPORT_PRIV_KEY_FUNC)(HCRYPTPROV hCryptProv, CRYPT_PRIVATE_KEY_INFO* pPrivateKeyInfo, DWORD dwFlags, void* pvAuxInfo );

BOOL __stdcall CryptImportPKCS8( CRYPT_PKCS8_IMPORT_PARAMS sPrivateKeyAndParams, DWORD dwFlags, HCRYPTPROV *phCryptProv, void* pvAuxInfo );
typedef BOOL (__stdcall *PFN_EXPORT_PRIV_KEY_FUNC)(HCRYPTPROV hCryptProv, DWORD dwKeySpec, LPSTR pszPrivateKeyObjId, DWORD dwFlags, void* pvAuxInfo, CRYPT_PRIVATE_KEY_INFO* pPrivateKeyInfo, DWORD* pcbPrivateKeyInfo );

BOOL __stdcall CryptExportPKCS8( HCRYPTPROV hCryptProv, DWORD dwKeySpec, LPSTR pszPrivateKeyObjId, DWORD dwFlags, void* pvAuxInfo, BYTE* pbPrivateKeyBlob, DWORD *pcbPrivateKeyBlob );

BOOL __stdcall CryptExportPKCS8Ex( CRYPT_PKCS8_EXPORT_PARAMS* psExportParams, DWORD dwFlags, void* pvAuxInfo, BYTE* pbPrivateKeyBlob, DWORD* pcbPrivateKeyBlob );

BOOL __stdcall CryptHashPublicKeyInfo( HCRYPTPROV_LEGACY hCryptProv, ALG_ID Algid, DWORD dwFlags, DWORD dwCertEncodingType, PCERT_PUBLIC_KEY_INFO pInfo, BYTE *pbComputedHash, DWORD *pcbComputedHash );

DWORD __stdcall CertRDNValueToStrA( DWORD dwValueType, PCERT_RDN_VALUE_BLOB pValue, LPSTR psz, DWORD csz );

DWORD __stdcall CertRDNValueToStrW( DWORD dwValueType, PCERT_RDN_VALUE_BLOB pValue, LPWSTR psz, DWORD csz );

DWORD __stdcall CertNameToStrA( DWORD dwCertEncodingType, PCERT_NAME_BLOB pName, DWORD dwStrType, LPSTR psz, DWORD csz );

DWORD __stdcall CertNameToStrW( DWORD dwCertEncodingType, PCERT_NAME_BLOB pName, DWORD dwStrType, LPWSTR psz, DWORD csz );

BOOL __stdcall CertStrToNameA( DWORD dwCertEncodingType, LPCSTR pszX500, DWORD dwStrType, void *pvReserved, BYTE *pbEncoded, DWORD *pcbEncoded, LPCSTR *ppszError );

BOOL __stdcall CertStrToNameW( DWORD dwCertEncodingType, LPCWSTR pszX500, DWORD dwStrType, void *pvReserved, BYTE *pbEncoded, DWORD *pcbEncoded, LPCWSTR *ppszError );

DWORD __stdcall CertGetNameStringA( PCCERT_CONTEXT pCertContext, DWORD dwType, DWORD dwFlags, void *pvTypePara, LPSTR pszNameString, DWORD cchNameString );

DWORD __stdcall CertGetNameStringW( PCCERT_CONTEXT pCertContext, DWORD dwType, DWORD dwFlags, void *pvTypePara, LPWSTR pszNameString, DWORD cchNameString );
typedef PCCERT_CONTEXT (__stdcall *PFN_CRYPT_GET_SIGNER_CERTIFICATE)( void *pvGetArg, DWORD dwCertEncodingType, PCERT_INFO pSignerId, HCERTSTORE hMsgCertStore );
typedef struct _CRYPT_SIGN_MESSAGE_PARA {
<field name="cbSize"><DWORD /></field>
<field name="dwMsgEncodingType"><DWORD /></field>
<field name="pSigningCert"><PCCERT_CONTEXT /></field>
<field name="HashAlgorithm"><CRYPT_ALGORITHM_IDENTIFIER /></field>
<field name="pvHashAuxInfo"><ptr><void /></ptr></field>
<field name="cMsgCert"><DWORD /></field>
<field name="rgpMsgCert"><ptr><PCCERT_CONTEXT /></ptr></field>
<field name="cMsgCrl"><DWORD /></field>
<field name="rgpMsgCrl"><ptr><PCCRL_CONTEXT /></ptr></field>
<field name="cAuthAttr"><DWORD /></field>
<field name="rgAuthAttr"><PCRYPT_ATTRIBUTE /></field>
<field name="cUnauthAttr"><DWORD /></field>
<field name="rgUnauthAttr"><PCRYPT_ATTRIBUTE /></field>
<field name="dwFlags"><DWORD /></field>
<field name="dwInnerContentType"><DWORD /></field>
} CRYPT_SIGN_MESSAGE_PARA, *PCRYPT_SIGN_MESSAGE_PARA;
typedef struct _CRYPT_VERIFY_MESSAGE_PARA {
<field name="cbSize"><DWORD /></field>
<field name="dwMsgAndCertEncodingType"><DWORD /></field>
<field name="hCryptProv"><HCRYPTPROV_LEGACY /></field>
<field name="pfnGetSignerCertificate"><PFN_CRYPT_GET_SIGNER_CERTIFICATE /></field>
<field name="pvGetArg"><ptr><void /></ptr></field>
} CRYPT_VERIFY_MESSAGE_PARA, *PCRYPT_VERIFY_MESSAGE_PARA;
typedef struct _CRYPT_ENCRYPT_MESSAGE_PARA {
<field name="cbSize"><DWORD /></field>
<field name="dwMsgEncodingType"><DWORD /></field>
<field name="hCryptProv"><HCRYPTPROV_LEGACY /></field>
<field name="ContentEncryptionAlgorithm"><CRYPT_ALGORITHM_IDENTIFIER /></field>
<field name="pvEncryptionAuxInfo"><ptr><void /></ptr></field>
<field name="dwFlags"><DWORD /></field>
<field name="dwInnerContentType"><DWORD /></field>
} CRYPT_ENCRYPT_MESSAGE_PARA, *PCRYPT_ENCRYPT_MESSAGE_PARA;
typedef struct _CRYPT_DECRYPT_MESSAGE_PARA {
<field name="cbSize"><DWORD /></field>
<field name="dwMsgAndCertEncodingType"><DWORD /></field>
<field name="cCertStore"><DWORD /></field>
<field name="rghCertStore"><ptr><HCERTSTORE /></ptr></field>
} CRYPT_DECRYPT_MESSAGE_PARA, *PCRYPT_DECRYPT_MESSAGE_PARA;
typedef struct _CRYPT_HASH_MESSAGE_PARA {
<field name="cbSize"><DWORD /></field>
<field name="dwMsgEncodingType"><DWORD /></field>
<field name="hCryptProv"><HCRYPTPROV_LEGACY /></field>
<field name="HashAlgorithm"><CRYPT_ALGORITHM_IDENTIFIER /></field>
<field name="pvHashAuxInfo"><ptr><void /></ptr></field>
} CRYPT_HASH_MESSAGE_PARA, *PCRYPT_HASH_MESSAGE_PARA;
typedef struct _CRYPT_KEY_SIGN_MESSAGE_PARA {
<field name="cbSize"><DWORD /></field>
<field name="dwMsgAndCertEncodingType"><DWORD /></field>
union {
<field name="hCryptProv"><HCRYPTPROV /></field>
<field name="hNCryptKey"><NCRYPT_KEY_HANDLE /></field>
} ;
<field name="dwKeySpec"><DWORD /></field>
<field name="HashAlgorithm"><CRYPT_ALGORITHM_IDENTIFIER /></field>
<field name="pvHashAuxInfo"><ptr><void /></ptr></field>
<field name="PubKeyAlgorithm"><CRYPT_ALGORITHM_IDENTIFIER /></field>
} CRYPT_KEY_SIGN_MESSAGE_PARA, *PCRYPT_KEY_SIGN_MESSAGE_PARA;
typedef struct _CRYPT_KEY_VERIFY_MESSAGE_PARA {
<field name="cbSize"><DWORD /></field>
<field name="dwMsgEncodingType"><DWORD /></field>
<field name="hCryptProv"><HCRYPTPROV_LEGACY /></field>
} CRYPT_KEY_VERIFY_MESSAGE_PARA, *PCRYPT_KEY_VERIFY_MESSAGE_PARA;

BOOL __stdcall CryptSignMessage( PCRYPT_SIGN_MESSAGE_PARA pSignPara, BOOL fDetachedSignature, DWORD cToBeSigned, const BYTE *rgpbToBeSigned[], DWORD rgcbToBeSigned[], BYTE *pbSignedBlob, DWORD *pcbSignedBlob );

BOOL __stdcall CryptVerifyMessageSignature( PCRYPT_VERIFY_MESSAGE_PARA pVerifyPara, DWORD dwSignerIndex, const BYTE *pbSignedBlob, DWORD cbSignedBlob, BYTE *pbDecoded, DWORD *pcbDecoded, PCCERT_CONTEXT *ppSignerCert );

LONG __stdcall CryptGetMessageSignerCount( DWORD dwMsgEncodingType, const BYTE *pbSignedBlob, DWORD cbSignedBlob );

HCERTSTORE __stdcall CryptGetMessageCertificates( DWORD dwMsgAndCertEncodingType, HCRYPTPROV_LEGACY hCryptProv, DWORD dwFlags, const BYTE *pbSignedBlob, DWORD cbSignedBlob );

BOOL __stdcall CryptVerifyDetachedMessageSignature( PCRYPT_VERIFY_MESSAGE_PARA pVerifyPara, DWORD dwSignerIndex, const BYTE *pbDetachedSignBlob, DWORD cbDetachedSignBlob, DWORD cToBeSigned, const BYTE *rgpbToBeSigned[], DWORD rgcbToBeSigned[], PCCERT_CONTEXT *ppSignerCert );

BOOL __stdcall CryptEncryptMessage( PCRYPT_ENCRYPT_MESSAGE_PARA pEncryptPara, DWORD cRecipientCert, PCCERT_CONTEXT rgpRecipientCert[], const BYTE *pbToBeEncrypted, DWORD cbToBeEncrypted, BYTE *pbEncryptedBlob, DWORD *pcbEncryptedBlob );

BOOL __stdcall CryptDecryptMessage( PCRYPT_DECRYPT_MESSAGE_PARA pDecryptPara, const BYTE *pbEncryptedBlob, DWORD cbEncryptedBlob, BYTE *pbDecrypted, DWORD *pcbDecrypted, PCCERT_CONTEXT *ppXchgCert );

BOOL __stdcall CryptSignAndEncryptMessage( PCRYPT_SIGN_MESSAGE_PARA pSignPara, PCRYPT_ENCRYPT_MESSAGE_PARA pEncryptPara, DWORD cRecipientCert, PCCERT_CONTEXT rgpRecipientCert[], const BYTE *pbToBeSignedAndEncrypted, DWORD cbToBeSignedAndEncrypted, BYTE *pbSignedAndEncryptedBlob, DWORD *pcbSignedAndEncryptedBlob );

BOOL __stdcall CryptDecryptAndVerifyMessageSignature( PCRYPT_DECRYPT_MESSAGE_PARA pDecryptPara, PCRYPT_VERIFY_MESSAGE_PARA pVerifyPara, DWORD dwSignerIndex, const BYTE *pbEncryptedBlob, DWORD cbEncryptedBlob, BYTE *pbDecrypted, DWORD *pcbDecrypted, PCCERT_CONTEXT *ppXchgCert, PCCERT_CONTEXT *ppSignerCert );

BOOL __stdcall CryptDecodeMessage( DWORD dwMsgTypeFlags, PCRYPT_DECRYPT_MESSAGE_PARA pDecryptPara, PCRYPT_VERIFY_MESSAGE_PARA pVerifyPara, DWORD dwSignerIndex, const BYTE *pbEncodedBlob, DWORD cbEncodedBlob, DWORD dwPrevInnerContentType, DWORD *pdwMsgType, DWORD *pdwInnerContentType, BYTE *pbDecoded, DWORD *pcbDecoded, PCCERT_CONTEXT *ppXchgCert, PCCERT_CONTEXT *ppSignerCert );

BOOL __stdcall CryptHashMessage( PCRYPT_HASH_MESSAGE_PARA pHashPara, BOOL fDetachedHash, DWORD cToBeHashed, const BYTE *rgpbToBeHashed[], DWORD rgcbToBeHashed[], BYTE *pbHashedBlob, DWORD *pcbHashedBlob, BYTE *pbComputedHash, DWORD *pcbComputedHash );

BOOL __stdcall CryptVerifyMessageHash( PCRYPT_HASH_MESSAGE_PARA pHashPara, BYTE *pbHashedBlob, DWORD cbHashedBlob, BYTE *pbToBeHashed, DWORD *pcbToBeHashed, BYTE *pbComputedHash, DWORD *pcbComputedHash );

BOOL __stdcall CryptVerifyDetachedMessageHash( PCRYPT_HASH_MESSAGE_PARA pHashPara, BYTE *pbDetachedHashBlob, DWORD cbDetachedHashBlob, DWORD cToBeHashed, const BYTE *rgpbToBeHashed[], DWORD rgcbToBeHashed[], BYTE *pbComputedHash, DWORD *pcbComputedHash );

BOOL __stdcall CryptSignMessageWithKey( PCRYPT_KEY_SIGN_MESSAGE_PARA pSignPara, const BYTE *pbToBeSigned, DWORD cbToBeSigned, BYTE *pbSignedBlob, DWORD *pcbSignedBlob );

BOOL __stdcall CryptVerifyMessageSignatureWithKey( PCRYPT_KEY_VERIFY_MESSAGE_PARA pVerifyPara, PCERT_PUBLIC_KEY_INFO pPublicKeyInfo, const BYTE *pbSignedBlob, DWORD cbSignedBlob, BYTE *pbDecoded, DWORD *pcbDecoded );

HCERTSTORE __stdcall CertOpenSystemStoreA( HCRYPTPROV_LEGACY hProv, LPCSTR szSubsystemProtocol );

HCERTSTORE __stdcall CertOpenSystemStoreW( HCRYPTPROV_LEGACY hProv, LPCWSTR szSubsystemProtocol );

BOOL __stdcall CertAddEncodedCertificateToSystemStoreA( LPCSTR szCertStoreName, const BYTE * pbCertEncoded, DWORD cbCertEncoded );

BOOL __stdcall CertAddEncodedCertificateToSystemStoreW( LPCWSTR szCertStoreName, const BYTE * pbCertEncoded, DWORD cbCertEncoded );
typedef struct _CERT_CHAIN {
<field name="cCerts"><DWORD /></field>
<field name="certs"><PCERT_BLOB /></field>
<field name="keyLocatorInfo"><CRYPT_KEY_PROV_INFO /></field>
} CERT_CHAIN, *PCERT_CHAIN;
HRESULT __stdcall FindCertsByIssuer( PCERT_CHAIN pCertChains, DWORD *pcbCertChains, DWORD *pcCertChains, BYTE* pbEncodedIssuerName, DWORD cbEncodedIssuerName, LPCWSTR pwszPurpose, DWORD dwKeySpec );

BOOL __stdcall CryptQueryObject( DWORD dwObjectType, const void *pvObject, DWORD dwExpectedContentTypeFlags, DWORD dwExpectedFormatTypeFlags, DWORD dwFlags, DWORD *pdwMsgAndCertEncodingType, DWORD *pdwContentType, DWORD *pdwFormatType, HCERTSTORE *phCertStore, HCRYPTMSG *phMsg, const void **ppvContext );

LPVOID __stdcall CryptMemAlloc(ULONG cbSize );

LPVOID __stdcall CryptMemRealloc(LPVOID pv, ULONG cbSize );

void __stdcall CryptMemFree(LPVOID pv );
<typedef name="HCRYPTASYNC"><HANDLE /></typedef>
<typedef name="PHCRYPTASYNC"><ptr><HANDLE /></ptr></typedef>
typedef void (__stdcall *PFN_CRYPT_ASYNC_PARAM_FREE_FUNC)(LPSTR pszParamOid, LPVOID pvParam );

BOOL __stdcall CryptCreateAsyncHandle(DWORD dwFlags, PHCRYPTASYNC phAsync );

BOOL __stdcall CryptSetAsyncParam(HCRYPTASYNC hAsync, LPSTR pszParamOid, LPVOID pvParam, PFN_CRYPT_ASYNC_PARAM_FREE_FUNC pfnFree );

BOOL __stdcall CryptGetAsyncParam(HCRYPTASYNC hAsync, LPSTR pszParamOid, LPVOID* ppvParam, PFN_CRYPT_ASYNC_PARAM_FREE_FUNC* ppfnFree );

BOOL __stdcall CryptCloseAsyncHandle(HCRYPTASYNC hAsync );
typedef struct _CRYPT_BLOB_ARRAY {
<field name="cBlob"><DWORD /></field>
<field name="rgBlob"><PCRYPT_DATA_BLOB /></field>
} CRYPT_BLOB_ARRAY, *PCRYPT_BLOB_ARRAY;
typedef struct _CRYPT_CREDENTIALS {
<field name="cbSize"><DWORD /></field>
<field name="pszCredentialsOid"><LPCSTR /></field>
<field name="pvCredentials"><LPVOID /></field>
} CRYPT_CREDENTIALS, *PCRYPT_CREDENTIALS;
typedef struct _CRYPT_PASSWORD_CREDENTIALSA {
<field name="cbSize"><DWORD /></field>
<field name="pszUsername"><LPSTR /></field>
<field name="pszPassword"><LPSTR /></field>
} CRYPT_PASSWORD_CREDENTIALSA, *PCRYPT_PASSWORD_CREDENTIALSA;
typedef struct _CRYPT_PASSWORD_CREDENTIALSW {
<field name="cbSize"><DWORD /></field>
<field name="pszUsername"><LPWSTR /></field>
<field name="pszPassword"><LPWSTR /></field>
} CRYPT_PASSWORD_CREDENTIALSW, *PCRYPT_PASSWORD_CREDENTIALSW;
<typedef name="CRYPT_PASSWORD_CREDENTIALS"><CRYPT_PASSWORD_CREDENTIALSA /></typedef>
<typedef name="PCRYPT_PASSWORD_CREDENTIALS"><PCRYPT_PASSWORD_CREDENTIALSA /></typedef>
typedef void (__stdcall *PFN_FREE_ENCODED_OBJECT_FUNC)(LPCSTR pszObjectOid, PCRYPT_BLOB_ARRAY pObject, LPVOID pvFreeContext );
typedef struct _CRYPTNET_URL_CACHE_PRE_FETCH_INFO {
<field name="cbSize"><DWORD /></field>
<field name="dwObjectType"><DWORD /></field>
<field name="dwError"><DWORD /></field>
<field name="dwReserved"><DWORD /></field>
<field name="ThisUpdateTime"><FILETIME /></field>
<field name="NextUpdateTime"><FILETIME /></field>
<field name="PublishTime"><FILETIME /></field>
} CRYPTNET_URL_CACHE_PRE_FETCH_INFO, *PCRYPTNET_URL_CACHE_PRE_FETCH_INFO;
typedef struct _CRYPTNET_URL_CACHE_FLUSH_INFO {
<field name="cbSize"><DWORD /></field>
<field name="dwExemptSeconds"><DWORD /></field>
<field name="ExpireTime"><FILETIME /></field>
} CRYPTNET_URL_CACHE_FLUSH_INFO, *PCRYPTNET_URL_CACHE_FLUSH_INFO;
typedef struct _CRYPTNET_URL_CACHE_RESPONSE_INFO {
<field name="cbSize"><DWORD /></field>
<field name="wResponseType"><WORD /></field>
<field name="wResponseFlags"><WORD /></field>
<field name="LastModifiedTime"><FILETIME /></field>
<field name="dwMaxAge"><DWORD /></field>
<field name="pwszETag"><LPCWSTR /></field>
<field name="dwProxyId"><DWORD /></field>
} CRYPTNET_URL_CACHE_RESPONSE_INFO, *PCRYPTNET_URL_CACHE_RESPONSE_INFO;
typedef struct _CRYPT_RETRIEVE_AUX_INFO {
<field name="cbSize"><DWORD /></field>
<field name="pLastSyncTime"><ptr><FILETIME /></ptr></field>
<field name="dwMaxUrlRetrievalByteCount"><DWORD /></field>
<field name="pPreFetchInfo"><PCRYPTNET_URL_CACHE_PRE_FETCH_INFO /></field>
<field name="pFlushInfo"><PCRYPTNET_URL_CACHE_FLUSH_INFO /></field>
<field name="ppResponseInfo"><ptr><PCRYPTNET_URL_CACHE_RESPONSE_INFO /></ptr></field>
<field name="pwszCacheFileNamePrefix"><LPWSTR /></field>
<field name="pftCacheResync"><LPFILETIME /></field>
<field name="fProxyCacheRetrieval"><BOOL /></field>
<field name="dwHttpStatusCode"><DWORD /></field>
} CRYPT_RETRIEVE_AUX_INFO, *PCRYPT_RETRIEVE_AUX_INFO;

BOOL __stdcall CryptRetrieveObjectByUrlA(LPCSTR pszUrl, LPCSTR pszObjectOid, DWORD dwRetrievalFlags, DWORD dwTimeout, LPVOID* ppvObject, HCRYPTASYNC hAsyncRetrieve, PCRYPT_CREDENTIALS pCredentials, LPVOID pvVerify, PCRYPT_RETRIEVE_AUX_INFO pAuxInfo );

BOOL __stdcall CryptRetrieveObjectByUrlW(LPCWSTR pszUrl, LPCSTR pszObjectOid, DWORD dwRetrievalFlags, DWORD dwTimeout, LPVOID* ppvObject, HCRYPTASYNC hAsyncRetrieve, PCRYPT_CREDENTIALS pCredentials, LPVOID pvVerify, PCRYPT_RETRIEVE_AUX_INFO pAuxInfo );
typedef BOOL (__stdcall *PFN_CRYPT_CANCEL_RETRIEVAL)( DWORD dwFlags, void *pvArg );

BOOL __stdcall CryptInstallCancelRetrieval( PFN_CRYPT_CANCEL_RETRIEVAL pfnCancel, const void *pvArg, DWORD dwFlags, void *pvReserved );

BOOL __stdcall CryptUninstallCancelRetrieval( DWORD dwFlags, void *pvReserved );

BOOL __stdcall CryptCancelAsyncRetrieval(HCRYPTASYNC hAsyncRetrieval );
typedef void (__stdcall *PFN_CRYPT_ASYNC_RETRIEVAL_COMPLETION_FUNC)(LPVOID pvCompletion, DWORD dwCompletionCode, LPCSTR pszUrl, LPSTR pszObjectOid, LPVOID pvObject );
typedef struct _CRYPT_ASYNC_RETRIEVAL_COMPLETION {
<field name="pfnCompletion"><PFN_CRYPT_ASYNC_RETRIEVAL_COMPLETION_FUNC /></field>
<field name="pvCompletion"><LPVOID /></field>
} CRYPT_ASYNC_RETRIEVAL_COMPLETION, *PCRYPT_ASYNC_RETRIEVAL_COMPLETION;
typedef BOOL (__stdcall *PFN_CANCEL_ASYNC_RETRIEVAL_FUNC)(HCRYPTASYNC hAsyncRetrieve );
typedef struct _CRYPT_URL_ARRAY {
<field name="cUrl"><DWORD /></field>
<field name="rgwszUrl"><ptr><LPWSTR /></ptr></field>
} CRYPT_URL_ARRAY, *PCRYPT_URL_ARRAY;
typedef struct _CRYPT_URL_INFO {
<field name="cbSize"><DWORD /></field>
<field name="dwSyncDeltaTime"><DWORD /></field>
<field name="cGroup"><DWORD /></field>
<field name="rgcGroupEntry"><ptr><DWORD /></ptr></field>
} CRYPT_URL_INFO, *PCRYPT_URL_INFO;

BOOL __stdcall CryptGetObjectUrl(LPCSTR pszUrlOid, LPVOID pvPara, DWORD dwFlags, PCRYPT_URL_ARRAY pUrlArray, DWORD* pcbUrlArray, PCRYPT_URL_INFO pUrlInfo, DWORD* pcbUrlInfo, LPVOID pvReserved );
typedef struct _CERT_CRL_CONTEXT_PAIR {
<field name="pCertContext"><PCCERT_CONTEXT /></field>
<field name="pCrlContext"><PCCRL_CONTEXT /></field>
} CERT_CRL_CONTEXT_PAIR, *PCERT_CRL_CONTEXT_PAIR;
<typedef name="PCCERT_CRL_CONTEXT_PAIR"><ptr const="true"><CERT_CRL_CONTEXT_PAIR /></ptr></typedef>
typedef struct _CRYPT_GET_TIME_VALID_OBJECT_EXTRA_INFO {
<field name="cbSize"><DWORD /></field>
<field name="iDeltaCrlIndicator"><int32 /></field>
<field name="pftCacheResync"><LPFILETIME /></field>
<field name="pLastSyncTime"><LPFILETIME /></field>
<field name="pMaxAgeTime"><LPFILETIME /></field>
<field name="pChainPara"><PCERT_REVOCATION_CHAIN_PARA /></field>
<field name="pDeltaCrlIndicator"><PCRYPT_INTEGER_BLOB /></field>
} CRYPT_GET_TIME_VALID_OBJECT_EXTRA_INFO, *PCRYPT_GET_TIME_VALID_OBJECT_EXTRA_INFO;

BOOL __stdcall CryptGetTimeValidObject(LPCSTR pszTimeValidOid, LPVOID pvPara, PCCERT_CONTEXT pIssuer, LPFILETIME pftValidFor, DWORD dwFlags, DWORD dwTimeout, LPVOID* ppvObject, PCRYPT_CREDENTIALS pCredentials, PCRYPT_GET_TIME_VALID_OBJECT_EXTRA_INFO pExtraInfo );

BOOL __stdcall CryptFlushTimeValidObject(LPCSTR pszFlushTimeValidOid, LPVOID pvPara, PCCERT_CONTEXT pIssuer, DWORD dwFlags, LPVOID pvReserved );
typedef struct _CRYPTPROTECT_PROMPTSTRUCT {
<field name="cbSize"><DWORD /></field>
<field name="dwPromptFlags"><DWORD /></field>
<field name="hwndApp"><HWND /></field>
<field name="szPrompt"><LPCWSTR /></field>
} CRYPTPROTECT_PROMPTSTRUCT, *PCRYPTPROTECT_PROMPTSTRUCT;

BOOL __stdcall CryptProtectData( DATA_BLOB* pDataIn, LPCWSTR szDataDescr, DATA_BLOB* pOptionalEntropy, PVOID pvReserved, CRYPTPROTECT_PROMPTSTRUCT* pPromptStruct, DWORD dwFlags, DATA_BLOB* pDataOut );

BOOL __stdcall CryptUnprotectData( DATA_BLOB* pDataIn, LPWSTR* ppszDataDescr, DATA_BLOB* pOptionalEntropy, PVOID pvReserved, CRYPTPROTECT_PROMPTSTRUCT* pPromptStruct, DWORD dwFlags, DATA_BLOB* pDataOut );

BOOL __stdcall CryptUpdateProtectedState( PSID pOldSid, LPCWSTR pwszOldPassword, DWORD dwFlags, DWORD *pdwSuccessCount, DWORD *pdwFailureCount);

BOOL __stdcall CryptProtectMemory( LPVOID pDataIn, DWORD cbDataIn, DWORD dwFlags );

BOOL __stdcall CryptUnprotectMemory( LPVOID pDataIn, DWORD cbDataIn, DWORD dwFlags );

PCCERT_CONTEXT __stdcall CertCreateSelfSignCertificate( HCRYPTPROV_OR_NCRYPT_KEY_HANDLE hCryptProvOrNCryptKey, PCERT_NAME_BLOB pSubjectIssuerBlob, DWORD dwFlags, PCRYPT_KEY_PROV_INFO pKeyProvInfo, PCRYPT_ALGORITHM_IDENTIFIER pSignatureAlgorithm, PSYSTEMTIME pStartTime, PSYSTEMTIME pEndTime, PCERT_EXTENSIONS pExtensions );

BOOL __stdcall CryptGetKeyIdentifierProperty( const CRYPT_HASH_BLOB *pKeyIdentifier, DWORD dwPropId, DWORD dwFlags, LPCWSTR pwszComputerName, void *pvReserved, void *pvData, DWORD *pcbData );

BOOL __stdcall CryptSetKeyIdentifierProperty( const CRYPT_HASH_BLOB *pKeyIdentifier, DWORD dwPropId, DWORD dwFlags, LPCWSTR pwszComputerName, void *pvReserved, const void *pvData );
typedef BOOL (__stdcall *PFN_CRYPT_ENUM_KEYID_PROP)( const CRYPT_HASH_BLOB *pKeyIdentifier, DWORD dwFlags, void *pvReserved, void *pvArg, DWORD cProp, DWORD *rgdwPropId, void **rgpvData, DWORD *rgcbData );

BOOL __stdcall CryptEnumKeyIdentifierProperties( const CRYPT_HASH_BLOB *pKeyIdentifier, DWORD dwPropId, DWORD dwFlags, LPCWSTR pwszComputerName, void *pvReserved, void *pvArg, PFN_CRYPT_ENUM_KEYID_PROP pfnEnum );

BOOL __stdcall CryptCreateKeyIdentifierFromCSP( DWORD dwCertEncodingType, LPCSTR pszPubKeyOID, const PUBLICKEYSTRUC *pPubKeyStruc, DWORD cbPubKeyStruc, DWORD dwFlags, void *pvReserved, BYTE *pbHash, DWORD *pcbHash );
<typedef name="HCERTCHAINENGINE"><HANDLE /></typedef>
typedef struct _CERT_CHAIN_ENGINE_CONFIG {
<field name="cbSize"><DWORD /></field>
<field name="hRestrictedRoot"><HCERTSTORE /></field>
<field name="hRestrictedTrust"><HCERTSTORE /></field>
<field name="hRestrictedOther"><HCERTSTORE /></field>
<field name="cAdditionalStore"><DWORD /></field>
<field name="rghAdditionalStore"><ptr><HCERTSTORE /></ptr></field>
<field name="dwFlags"><DWORD /></field>
<field name="dwUrlRetrievalTimeout"><DWORD /></field>
<field name="MaximumCachedCertificates"><DWORD /></field>
<field name="CycleDetectionModulus"><DWORD /></field>
<field name="hExclusiveRoot"><HCERTSTORE /></field>
<field name="hExclusiveTrustedPeople"><HCERTSTORE /></field>
} CERT_CHAIN_ENGINE_CONFIG, *PCERT_CHAIN_ENGINE_CONFIG;

BOOL __stdcall CertCreateCertificateChainEngine(PCERT_CHAIN_ENGINE_CONFIG pConfig, HCERTCHAINENGINE* phChainEngine );

void __stdcall CertFreeCertificateChainEngine(HCERTCHAINENGINE hChainEngine );

BOOL __stdcall CertResyncCertificateChainEngine(HCERTCHAINENGINE hChainEngine );
typedef struct _CERT_TRUST_STATUS {
<field name="dwErrorStatus"><DWORD /></field>
<field name="dwInfoStatus"><DWORD /></field>
} CERT_TRUST_STATUS, *PCERT_TRUST_STATUS;
typedef struct _CERT_REVOCATION_INFO {
<field name="cbSize"><DWORD /></field>
<field name="dwRevocationResult"><DWORD /></field>
<field name="pszRevocationOid"><LPCSTR /></field>
<field name="pvOidSpecificInfo"><LPVOID /></field>
<field name="fHasFreshnessTime"><BOOL /></field>
<field name="dwFreshnessTime"><DWORD /></field>
<field name="pCrlInfo"><PCERT_REVOCATION_CRL_INFO /></field>
} CERT_REVOCATION_INFO, *PCERT_REVOCATION_INFO;
typedef struct _CERT_TRUST_LIST_INFO {
<field name="cbSize"><DWORD /></field>
<field name="pCtlEntry"><PCTL_ENTRY /></field>
<field name="pCtlContext"><PCCTL_CONTEXT /></field>
} CERT_TRUST_LIST_INFO, *PCERT_TRUST_LIST_INFO;
typedef struct _CERT_CHAIN_ELEMENT {
<field name="cbSize"><DWORD /></field>
<field name="pCertContext"><PCCERT_CONTEXT /></field>
<field name="TrustStatus"><CERT_TRUST_STATUS /></field>
<field name="pRevocationInfo"><PCERT_REVOCATION_INFO /></field>
<field name="pIssuanceUsage"><PCERT_ENHKEY_USAGE /></field>
<field name="pApplicationUsage"><PCERT_ENHKEY_USAGE /></field>
<field name="pwszExtendedErrorInfo"><LPCWSTR /></field>
} CERT_CHAIN_ELEMENT, *PCERT_CHAIN_ELEMENT;
<typedef name="PCCERT_CHAIN_ELEMENT"><ptr const="true"><CERT_CHAIN_ELEMENT /></ptr></typedef>
typedef struct _CERT_SIMPLE_CHAIN {
<field name="cbSize"><DWORD /></field>
<field name="TrustStatus"><CERT_TRUST_STATUS /></field>
<field name="cElement"><DWORD /></field>
<field name="rgpElement"><ptr><PCERT_CHAIN_ELEMENT /></ptr></field>
<field name="pTrustListInfo"><PCERT_TRUST_LIST_INFO /></field>
<field name="fHasRevocationFreshnessTime"><BOOL /></field>
<field name="dwRevocationFreshnessTime"><DWORD /></field>
} CERT_SIMPLE_CHAIN, *PCERT_SIMPLE_CHAIN;
<typedef name="PCCERT_SIMPLE_CHAIN"><ptr const="true"><CERT_SIMPLE_CHAIN /></ptr></typedef>
typedef struct _CERT_CHAIN_CONTEXT CERT_CHAIN_CONTEXT, *PCERT_CHAIN_CONTEXT;
<typedef name="PCCERT_CHAIN_CONTEXT"><ptr const="true"><CERT_CHAIN_CONTEXT /></ptr></typedef>
struct _CERT_CHAIN_CONTEXT {
<field name="cbSize"><DWORD /></field>
<field name="TrustStatus"><CERT_TRUST_STATUS /></field>
<field name="cChain"><DWORD /></field>
<field name="rgpChain"><ptr><PCERT_SIMPLE_CHAIN /></ptr></field>
<field name="cLowerQualityChainContext"><DWORD /></field>
<field name="rgpLowerQualityChainContext"><ptr><PCCERT_CHAIN_CONTEXT /></ptr></field>
<field name="fHasRevocationFreshnessTime"><BOOL /></field>
<field name="dwRevocationFreshnessTime"><DWORD /></field>
<field name="dwCreateFlags"><DWORD /></field>
<field name="ChainId"><GUID /></field>
};
typedef struct _CERT_USAGE_MATCH {
<field name="dwType"><DWORD /></field>
<field name="Usage"><CERT_ENHKEY_USAGE /></field>
} CERT_USAGE_MATCH, *PCERT_USAGE_MATCH;
typedef struct _CTL_USAGE_MATCH {
<field name="dwType"><DWORD /></field>
<field name="Usage"><CTL_USAGE /></field>
} CTL_USAGE_MATCH, *PCTL_USAGE_MATCH;
typedef struct _CERT_CHAIN_PARA {
<field name="cbSize"><DWORD /></field>
<field name="RequestedUsage"><CERT_USAGE_MATCH /></field>
} CERT_CHAIN_PARA, *PCERT_CHAIN_PARA;

BOOL __stdcall CertGetCertificateChain(HCERTCHAINENGINE hChainEngine, PCCERT_CONTEXT pCertContext, LPFILETIME pTime, HCERTSTORE hAdditionalStore, PCERT_CHAIN_PARA pChainPara, DWORD dwFlags, LPVOID pvReserved, PCCERT_CHAIN_CONTEXT* ppChainContext );

void __stdcall CertFreeCertificateChain(PCCERT_CHAIN_CONTEXT pChainContext );

PCCERT_CHAIN_CONTEXT __stdcall CertDuplicateCertificateChain(PCCERT_CHAIN_CONTEXT pChainContext );
struct _CERT_REVOCATION_CHAIN_PARA {
<field name="cbSize"><DWORD /></field>
<field name="hChainEngine"><HCERTCHAINENGINE /></field>
<field name="hAdditionalStore"><HCERTSTORE /></field>
<field name="dwChainFlags"><DWORD /></field>
<field name="dwUrlRetrievalTimeout"><DWORD /></field>
<field name="pftCurrentTime"><LPFILETIME /></field>
<field name="pftCacheResync"><LPFILETIME /></field>
<field name="cbMaxUrlRetrievalByteCount"><DWORD /></field>
};
typedef struct _CRL_REVOCATION_INFO {
<field name="pCrlEntry"><PCRL_ENTRY /></field>
<field name="pCrlContext"><PCCRL_CONTEXT /></field>
<field name="pCrlIssuerChain"><PCCERT_CHAIN_CONTEXT /></field>
} CRL_REVOCATION_INFO, *PCRL_REVOCATION_INFO;

PCCERT_CHAIN_CONTEXT __stdcall CertFindChainInStore( HCERTSTORE hCertStore, DWORD dwCertEncodingType, DWORD dwFindFlags, DWORD dwFindType, const void *pvFindPara, PCCERT_CHAIN_CONTEXT pPrevChainContext );
typedef BOOL (__stdcall *PFN_CERT_CHAIN_FIND_BY_ISSUER_CALLBACK)( PCCERT_CONTEXT pCert, void *pvFindArg );
typedef struct _CERT_CHAIN_FIND_BY_ISSUER_PARA {
<field name="cbSize"><DWORD /></field>
<field name="pszUsageIdentifier"><LPCSTR /></field>
<field name="dwKeySpec"><DWORD /></field>
<field name="dwAcquirePrivateKeyFlags"><DWORD /></field>
<field name="cIssuer"><DWORD /></field>
<field name="rgIssuer"><ptr><CERT_NAME_BLOB /></ptr></field>
<field name="pfnFindCallback"><PFN_CERT_CHAIN_FIND_BY_ISSUER_CALLBACK /></field>
<field name="pvFindArg"><ptr><void /></ptr></field>
} CERT_CHAIN_FIND_ISSUER_PARA, *PCERT_CHAIN_FIND_ISSUER_PARA, CERT_CHAIN_FIND_BY_ISSUER_PARA, *PCERT_CHAIN_FIND_BY_ISSUER_PARA;
typedef struct _CERT_CHAIN_POLICY_PARA {
<field name="cbSize"><DWORD /></field>
<field name="dwFlags"><DWORD /></field>
<field name="pvExtraPolicyPara"><ptr><void /></ptr></field>
} CERT_CHAIN_POLICY_PARA, *PCERT_CHAIN_POLICY_PARA;
typedef struct _CERT_CHAIN_POLICY_STATUS {
<field name="cbSize"><DWORD /></field>
<field name="dwError"><DWORD /></field>
<field name="lChainIndex"><LONG /></field>
<field name="lElementIndex"><LONG /></field>
<field name="pvExtraPolicyStatus"><ptr><void /></ptr></field>
} CERT_CHAIN_POLICY_STATUS, *PCERT_CHAIN_POLICY_STATUS;

BOOL __stdcall CertVerifyCertificateChainPolicy( LPCSTR pszPolicyOID, PCCERT_CHAIN_CONTEXT pChainContext, PCERT_CHAIN_POLICY_PARA pPolicyPara, PCERT_CHAIN_POLICY_STATUS pPolicyStatus );
typedef struct _AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_PARA {
<field name="cbSize"><DWORD /></field>
<field name="dwRegPolicySettings"><DWORD /></field>
<field name="pSignerInfo"><PCMSG_SIGNER_INFO /></field>
} AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_PARA, *PAUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_PARA;
typedef struct _AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_STATUS {
<field name="cbSize"><DWORD /></field>
<field name="fCommercial"><BOOL /></field>
} AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_STATUS, *PAUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_STATUS;
typedef struct _AUTHENTICODE_TS_EXTRA_CERT_CHAIN_POLICY_PARA {
<field name="cbSize"><DWORD /></field>
<field name="dwRegPolicySettings"><DWORD /></field>
<field name="fCommercial"><BOOL /></field>
} AUTHENTICODE_TS_EXTRA_CERT_CHAIN_POLICY_PARA, *PAUTHENTICODE_TS_EXTRA_CERT_CHAIN_POLICY_PARA;
typedef struct _HTTPSPolicyCallbackData {
union {
<field name="cbStruct"><DWORD /></field>
<field name="cbSize"><DWORD /></field>
} ;
<field name="dwAuthType"><DWORD /></field>
<field name="fdwChecks"><DWORD /></field>
<field name="pwszServerName"><ptr><WCHAR /></ptr></field>
} HTTPSPolicyCallbackData, *PHTTPSPolicyCallbackData, SSL_EXTRA_CERT_CHAIN_POLICY_PARA, *PSSL_EXTRA_CERT_CHAIN_POLICY_PARA;
typedef struct _EV_EXTRA_CERT_CHAIN_POLICY_PARA {
<field name="cbSize"><DWORD /></field>
<field name="dwRootProgramQualifierFlags"><DWORD /></field>
} EV_EXTRA_CERT_CHAIN_POLICY_PARA, *PEV_EXTRA_CERT_CHAIN_POLICY_PARA;
typedef struct _EV_EXTRA_CERT_CHAIN_POLICY_STATUS {
<field name="cbSize"><DWORD /></field>
<field name="dwQualifiers"><DWORD /></field>
<field name="dwIssuanceUsageIndex"><DWORD /></field>
} EV_EXTRA_CERT_CHAIN_POLICY_STATUS, *PEV_EXTRA_CERT_CHAIN_POLICY_STATUS;

BOOL __stdcall CryptStringToBinaryA( LPCSTR pszString, DWORD cchString, DWORD dwFlags, BYTE *pbBinary, DWORD *pcbBinary, DWORD *pdwSkip, DWORD *pdwFlags );

BOOL __stdcall CryptStringToBinaryW( LPCWSTR pszString, DWORD cchString, DWORD dwFlags, BYTE *pbBinary, DWORD *pcbBinary, DWORD *pdwSkip, DWORD *pdwFlags );

BOOL __stdcall CryptBinaryToStringA( const BYTE *pbBinary, DWORD cbBinary, DWORD dwFlags, LPSTR pszString, DWORD *pcchString );

BOOL __stdcall CryptBinaryToStringW( const BYTE *pbBinary, DWORD cbBinary, DWORD dwFlags, LPWSTR pszString, DWORD *pcchString );
typedef struct _CRYPT_PKCS12_PBE_PARAMS {
<field name="iIterations"><int32 /></field>
<field name="cbSalt"><ULONG /></field>
} CRYPT_PKCS12_PBE_PARAMS;

HCERTSTORE __stdcall PFXImportCertStore( CRYPT_DATA_BLOB* pPFX, LPCWSTR szPassword, DWORD dwFlags);

BOOL __stdcall PFXIsPFXBlob( CRYPT_DATA_BLOB* pPFX);

BOOL __stdcall PFXVerifyPassword( CRYPT_DATA_BLOB* pPFX, LPCWSTR szPassword, DWORD dwFlags);

BOOL __stdcall PFXExportCertStoreEx( HCERTSTORE hStore, CRYPT_DATA_BLOB* pPFX, LPCWSTR szPassword, void* pvReserved, DWORD dwFlags);

BOOL __stdcall PFXExportCertStore( HCERTSTORE hStore, CRYPT_DATA_BLOB* pPFX, LPCWSTR szPassword, DWORD dwFlags);
<typedef name="HCERT_SERVER_OCSP_RESPONSE"><ptr><void /></ptr></typedef>

HCERT_SERVER_OCSP_RESPONSE __stdcall CertOpenServerOcspResponse( PCCERT_CHAIN_CONTEXT pChainContext, DWORD dwFlags, LPVOID pvReserved );

void __stdcall CertAddRefServerOcspResponse( HCERT_SERVER_OCSP_RESPONSE hServerOcspResponse );

void __stdcall CertCloseServerOcspResponse( HCERT_SERVER_OCSP_RESPONSE hServerOcspResponse, DWORD dwFlags );
typedef struct _CERT_SERVER_OCSP_RESPONSE_CONTEXT CERT_SERVER_OCSP_RESPONSE_CONTEXT, *PCERT_SERVER_OCSP_RESPONSE_CONTEXT;
<typedef name="PCCERT_SERVER_OCSP_RESPONSE_CONTEXT"><ptr const="true"><CERT_SERVER_OCSP_RESPONSE_CONTEXT /></ptr></typedef>
struct _CERT_SERVER_OCSP_RESPONSE_CONTEXT {
<field name="cbSize"><DWORD /></field>
<field name="pbEncodedOcspResponse"><ptr><BYTE /></ptr></field>
<field name="cbEncodedOcspResponse"><DWORD /></field>
};

PCCERT_SERVER_OCSP_RESPONSE_CONTEXT __stdcall CertGetServerOcspResponseContext( HCERT_SERVER_OCSP_RESPONSE hServerOcspResponse, DWORD dwFlags, LPVOID pvReserved );

void __stdcall CertAddRefServerOcspResponseContext( PCCERT_SERVER_OCSP_RESPONSE_CONTEXT pServerOcspResponseContext );

void __stdcall CertFreeServerOcspResponseContext( PCCERT_SERVER_OCSP_RESPONSE_CONTEXT pServerOcspResponseContext );

BOOL __stdcall CertRetrieveLogoOrBiometricInfo( PCCERT_CONTEXT pCertContext, LPCSTR lpszLogoOrBiometricType, DWORD dwRetrievalFlags, DWORD dwTimeout, DWORD dwFlags, void *pvReserved, BYTE **ppbData, DWORD *pcbData, LPWSTR *ppwszMimeType );
typedef struct _CERT_SELECT_CHAIN_PARA {
<field name="hChainEngine"><HCERTCHAINENGINE /></field>
<field name="pTime"><PFILETIME /></field>
<field name="hAdditionalStore"><HCERTSTORE /></field>
<field name="pChainPara"><PCERT_CHAIN_PARA /></field>
<field name="dwFlags"><DWORD /></field>
} CERT_SELECT_CHAIN_PARA, *PCERT_SELECT_CHAIN_PARA;
<typedef name="PCCERT_SELECT_CHAIN_PARA"><ptr const="true"><CERT_SELECT_CHAIN_PARA /></ptr></typedef>
typedef struct _CERT_SELECT_CRITERIA {
<field name="dwType"><DWORD /></field>
<field name="cPara"><DWORD /></field>
void** ppPara;
} CERT_SELECT_CRITERIA, *PCERT_SELECT_CRITERIA;
<typedef name="PCCERT_SELECT_CRITERIA"><ptr const="true"><CERT_SELECT_CRITERIA /></ptr></typedef>

BOOL __stdcall CertSelectCertificateChains( LPCGUID pSelectionContext, DWORD dwFlags, PCCERT_SELECT_CHAIN_PARA pChainParameters, DWORD cCriteria, PCCERT_SELECT_CRITERIA rgpCriteria, HCERTSTORE hStore, PDWORD pcSelection, PCCERT_CHAIN_CONTEXT** pprgpSelection );

void __stdcall CertFreeCertificateChainList( PCCERT_CHAIN_CONTEXT* prgpSelection );
typedef struct _CRYPT_TIMESTAMP_REQUEST {
<field name="dwVersion"><DWORD /></field>
<field name="HashAlgorithm"><CRYPT_ALGORITHM_IDENTIFIER /></field>
<field name="HashedMessage"><CRYPT_DER_BLOB /></field>
<field name="pszTSAPolicyId"><LPSTR /></field>
<field name="Nonce"><CRYPT_INTEGER_BLOB /></field>
<field name="fCertReq"><BOOL /></field>
<field name="cExtension"><DWORD /></field>
<field name="rgExtension"><PCERT_EXTENSION /></field>
} CRYPT_TIMESTAMP_REQUEST, *PCRYPT_TIMESTAMP_REQUEST;
typedef struct _CRYPT_TIMESTAMP_RESPONSE {
<field name="dwStatus"><DWORD /></field>
<field name="cFreeText"><DWORD /></field>
<field name="rgFreeText"><ptr><LPWSTR /></ptr></field>
<field name="FailureInfo"><CRYPT_BIT_BLOB /></field>
<field name="ContentInfo"><CRYPT_DER_BLOB /></field>
} CRYPT_TIMESTAMP_RESPONSE, *PCRYPT_TIMESTAMP_RESPONSE;
typedef struct _CRYPT_TIMESTAMP_ACCURACY {
<field name="dwSeconds"><DWORD /></field>
<field name="dwMillis"><DWORD /></field>
<field name="dwMicros"><DWORD /></field>
} CRYPT_TIMESTAMP_ACCURACY, *PCRYPT_TIMESTAMP_ACCURACY;
typedef struct _CRYPT_TIMESTAMP_INFO {
<field name="dwVersion"><DWORD /></field>
<field name="pszTSAPolicyId"><LPSTR /></field>
<field name="HashAlgorithm"><CRYPT_ALGORITHM_IDENTIFIER /></field>
<field name="HashedMessage"><CRYPT_DER_BLOB /></field>
<field name="SerialNumber"><CRYPT_INTEGER_BLOB /></field>
<field name="ftTime"><FILETIME /></field>
<field name="pvAccuracy"><PCRYPT_TIMESTAMP_ACCURACY /></field>
<field name="fOrdering"><BOOL /></field>
<field name="Nonce"><CRYPT_DER_BLOB /></field>
<field name="Tsa"><CRYPT_DER_BLOB /></field>
<field name="cExtension"><DWORD /></field>
<field name="rgExtension"><PCERT_EXTENSION /></field>
} CRYPT_TIMESTAMP_INFO, *PCRYPT_TIMESTAMP_INFO;
typedef struct _CRYPT_TIMESTAMP_CONTEXT {
<field name="cbEncoded"><DWORD /></field>
<field name="pbEncoded"><ptr><BYTE /></ptr></field>
<field name="pTimeStamp"><PCRYPT_TIMESTAMP_INFO /></field>
} CRYPT_TIMESTAMP_CONTEXT, *PCRYPT_TIMESTAMP_CONTEXT;
typedef struct _CRYPT_TIMESTAMP_PARA {
<field name="pszTSAPolicyId"><LPCSTR /></field>
<field name="fRequestCerts"><BOOL /></field>
<field name="Nonce"><CRYPT_INTEGER_BLOB /></field>
<field name="cExtension"><DWORD /></field>
<field name="rgExtension"><PCERT_EXTENSION /></field>
} CRYPT_TIMESTAMP_PARA, *PCRYPT_TIMESTAMP_PARA;
BOOL __stdcall CryptRetrieveTimeStamp( LPCWSTR wszUrl, DWORD dwRetrievalFlags, DWORD dwTimeout, LPCSTR pszHashId, const CRYPT_TIMESTAMP_PARA *pPara, const BYTE *pbData, DWORD cbData, PCRYPT_TIMESTAMP_CONTEXT *ppTsContext, PCCERT_CONTEXT *ppTsSigner, HCERTSTORE *phStore );
BOOL __stdcall CryptVerifyTimeStampSignature(const BYTE *pbTSContentInfo, DWORD cbTSContentInfo, const BYTE *pbData, DWORD cbData, HCERTSTORE hAdditionalStore, PCRYPT_TIMESTAMP_CONTEXT *ppTsContext, PCCERT_CONTEXT *ppTsSigner, HCERTSTORE *phStore );
typedef struct _CERTIFICATE_BLOB {
<field name="dwCertEncodingType"><DWORD /></field>
<field name="cbData"><DWORD /></field>
<field name="pbData"><PBYTE /></field>
} EFS_CERTIFICATE_BLOB, *PEFS_CERTIFICATE_BLOB;
typedef struct _EFS_HASH_BLOB {
<field name="cbData"><DWORD /></field>
<field name="pbData"><PBYTE /></field>
} EFS_HASH_BLOB, *PEFS_HASH_BLOB;
typedef struct _EFS_RPC_BLOB {
<field name="cbData"><DWORD /></field>
<field name="pbData"><PBYTE /></field>
} EFS_RPC_BLOB, *PEFS_RPC_BLOB;
typedef struct _EFS_PIN_BLOB {
<field name="cbPadding"><DWORD /></field>
<field name="cbData"><DWORD /></field>
<field name="pbData"><PBYTE /></field>
} EFS_PIN_BLOB, *PEFS_PIN_BLOB;
typedef struct _EFS_KEY_INFO {
<field name="dwVersion"><DWORD /></field>
<field name="Entropy"><ULONG /></field>
<field name="Algorithm"><ALG_ID /></field>
<field name="KeyLength"><ULONG /></field>
} EFS_KEY_INFO, *PEFS_KEY_INFO;
typedef struct _EFS_COMPATIBILITY_INFO {
<field name="EfsVersion"><DWORD /></field>
} EFS_COMPATIBILITY_INFO, *PEFS_COMPATIBILITY_INFO;
typedef struct _EFS_DECRYPTION_STATUS_INFO { DWORD dwDecryptionError;
<field name="dwHashOffset"><DWORD /></field>
<field name="cbHash"><DWORD /></field>
} EFS_DECRYPTION_STATUS_INFO, *PEFS_DECRYPTION_STATUS_INFO;
typedef struct _EFS_ENCRYPTION_STATUS_INFO { BOOL bHasCurrentKey;
<field name="dwEncryptionError"><DWORD /></field>
} EFS_ENCRYPTION_STATUS_INFO, *PEFS_ENCRYPTION_STATUS_INFO;
typedef struct _ENCRYPTION_CERTIFICATE {
<field name="cbTotalLength"><DWORD /></field>
<field name="pUserSid"><ptr><SID /></ptr></field>
<field name="pCertBlob"><PEFS_CERTIFICATE_BLOB /></field>
} ENCRYPTION_CERTIFICATE, *PENCRYPTION_CERTIFICATE;
typedef struct _ENCRYPTION_CERTIFICATE_HASH {
<field name="cbTotalLength"><DWORD /></field>
<field name="pUserSid"><ptr><SID /></ptr></field>
<field name="pHash"><PEFS_HASH_BLOB /></field>
<field name="lpDisplayInformation"><LPWSTR /></field>
} ENCRYPTION_CERTIFICATE_HASH, *PENCRYPTION_CERTIFICATE_HASH;
typedef struct _ENCRYPTION_CERTIFICATE_HASH_LIST {
<field name="nCert_Hash"><DWORD /></field>
<field name="pUsers"><ptr><PENCRYPTION_CERTIFICATE_HASH /></ptr></field>
} ENCRYPTION_CERTIFICATE_HASH_LIST, *PENCRYPTION_CERTIFICATE_HASH_LIST;
typedef struct _ENCRYPTION_CERTIFICATE_LIST { DWORD nUsers;
<field name="pUsers"><ptr><PENCRYPTION_CERTIFICATE /></ptr></field>
} ENCRYPTION_CERTIFICATE_LIST, *PENCRYPTION_CERTIFICATE_LIST;
typedef struct _ENCRYPTED_FILE_METADATA_SIGNATURE { DWORD dwEfsAccessType;
<field name="pCertificatesAdded"><PENCRYPTION_CERTIFICATE_HASH_LIST /></field>
<field name="pEncryptionCertificate"><PENCRYPTION_CERTIFICATE /></field>
<field name="pEfsStreamSignature"><PEFS_RPC_BLOB /></field>
} ENCRYPTED_FILE_METADATA_SIGNATURE, *PENCRYPTED_FILE_METADATA_SIGNATURE;

DWORD __stdcall QueryUsersOnEncryptedFile( LPCWSTR lpFileName, PENCRYPTION_CERTIFICATE_HASH_LIST *pUsers );

DWORD __stdcall QueryRecoveryAgentsOnEncryptedFile( LPCWSTR lpFileName, PENCRYPTION_CERTIFICATE_HASH_LIST *pRecoveryAgents );

DWORD __stdcall RemoveUsersFromEncryptedFile( LPCWSTR lpFileName, PENCRYPTION_CERTIFICATE_HASH_LIST pHashes );

DWORD __stdcall AddUsersToEncryptedFile( LPCWSTR lpFileName, PENCRYPTION_CERTIFICATE_LIST pEncryptionCertificates );

DWORD __stdcall SetUserFileEncryptionKey( PENCRYPTION_CERTIFICATE pEncryptionCertificate );

DWORD __stdcall SetUserFileEncryptionKeyEx( PENCRYPTION_CERTIFICATE pEncryptionCertificate, DWORD dwCapabilities, DWORD dwFlags, LPVOID pvReserved );

void __stdcall FreeEncryptionCertificateHashList( PENCRYPTION_CERTIFICATE_HASH_LIST pUsers );

BOOL __stdcall EncryptionDisable( LPCWSTR DirPath, BOOL Disable );

DWORD __stdcall DuplicateEncryptionInfoFile( LPCWSTR SrcFileName, LPCWSTR DstFileName, DWORD dwCreationDistribution, DWORD dwAttributes, const LPSECURITY_ATTRIBUTES lpSecurityAttributes );
__declspec(deprecated) 
DWORD __stdcall GetEncryptedFileMetadata( LPCWSTR lpFileName, PDWORD pcbMetadata, PBYTE *ppbMetadata );
__declspec(deprecated) 
DWORD __stdcall SetEncryptedFileMetadata( LPCWSTR lpFileName, PBYTE pbOldMetadata, PBYTE pbNewMetadata, PENCRYPTION_CERTIFICATE_HASH pOwnerHash, DWORD dwOperation, PENCRYPTION_CERTIFICATE_HASH_LIST pCertificatesAdded );
__declspec(deprecated) 
void __stdcall FreeEncryptedFileMetadata( PBYTE pbMetadata );
typedef struct {
<field name="LookupContext"><RPC_NS_HANDLE /></field>
<field name="ProposedHandle"><RPC_BINDING_HANDLE /></field>
<field name="Bindings"><ptr><RPC_BINDING_VECTOR /></ptr></field>
} RPC_IMPORT_CONTEXT_P, * PRPC_IMPORT_CONTEXT_P;

RPC_STATUS __stdcall I_RpcNsGetBuffer( PRPC_MESSAGE Message );

RPC_STATUS __stdcall I_RpcNsSendReceive( PRPC_MESSAGE Message, RPC_BINDING_HANDLE * Handle );

void __stdcall I_RpcNsRaiseException( PRPC_MESSAGE Message, RPC_STATUS Status );

RPC_STATUS __stdcall I_RpcReBindBuffer( PRPC_MESSAGE Message );

RPC_STATUS __stdcall I_NsServerBindSearch( void );

RPC_STATUS __stdcall I_NsClientBindSearch( void );

void __stdcall I_NsClientBindDone( void );
<typedef name="byte"><byte /></typedef>
<typedef name="cs_byte"><byte /></typedef>
<typedef name="boolean"><byte /></typedef>
void * __stdcall MIDL_user_allocate(size_t size);
void __stdcall MIDL_user_free( void * );
void * __stdcall I_RpcDefaultAllocate( handle_t bh, size_t size, void * (* RealAlloc)(size_t) );
void __stdcall I_RpcDefaultFree( handle_t bh, void *, void (*RealFree)(void *) );
<typedef name="NDR_CCONTEXT"><ptr><void /></ptr></typedef>
typedef struct {
void * pad[2];
<field name="userContext"><ptr><void /></ptr></field>
} * NDR_SCONTEXT;
typedef void (__stdcall * NDR_RUNDOWN)(void * context);
typedef void (__stdcall * NDR_NOTIFY_ROUTINE)();
typedef void (__stdcall * NDR_NOTIFY2_ROUTINE)(boolean flag);
typedef struct _SCONTEXT_QUEUE {
<field name="NumberOfObjects"><uint32 /></field>
<field name="ArrayOfObjects"><ptr><NDR_SCONTEXT /></ptr></field>
} SCONTEXT_QUEUE, * PSCONTEXT_QUEUE;

RPC_BINDING_HANDLE __stdcall NDRCContextBinding(NDR_CCONTEXT CContext );

void __stdcall NDRCContextMarshall(NDR_CCONTEXT CContext, void *pBuff );

void __stdcall NDRCContextUnmarshall(NDR_CCONTEXT * pCContext, RPC_BINDING_HANDLE hBinding, void * pBuff, uint32 DataRepresentation );

void __stdcall NDRCContextUnmarshall2(NDR_CCONTEXT * pCContext, RPC_BINDING_HANDLE hBinding, void * pBuff, uint32 DataRepresentation );

void __stdcall NDRSContextMarshall(NDR_SCONTEXT CContext, void * pBuff, NDR_RUNDOWN userRunDownIn );

NDR_SCONTEXT __stdcall NDRSContextUnmarshall(void * pBuff, uint32 DataRepresentation );

void __stdcall NDRSContextMarshallEx(RPC_BINDING_HANDLE BindingHandle, NDR_SCONTEXT CContext, void * pBuff, NDR_RUNDOWN userRunDownIn );

void __stdcall NDRSContextMarshall2(RPC_BINDING_HANDLE BindingHandle, NDR_SCONTEXT CContext, void * pBuff, NDR_RUNDOWN userRunDownIn, void * CtxGuard, uint32 Flags );

NDR_SCONTEXT __stdcall NDRSContextUnmarshallEx(RPC_BINDING_HANDLE BindingHandle, void * pBuff, uint32 DataRepresentation );

NDR_SCONTEXT __stdcall NDRSContextUnmarshall2( RPC_BINDING_HANDLE BindingHandle, void * pBuff, uint32 DataRepresentation, void * CtxGuard, uint32 Flags );

void __stdcall RpcSsDestroyClientContext(void * * ContextHandle );
<typedef name="error_status_t"><uint32 /></typedef>
<struct name="_MIDL_STUB_MESSAGE" />
<struct name="_MIDL_STUB_DESC" />
<struct name="_FULL_PTR_XLAT_TABLES" />
<typedef name="RPC_BUFPTR"><ptr><byte /></ptr></typedef>
<typedef name="RPC_LENGTH"><uint32 /></typedef>
typedef void (__stdcall * EXPR_EVAL)( struct _MIDL_STUB_MESSAGE * );
<typedef name="PFORMAT_STRING"><ptr const="true"><byte /></ptr></typedef>
typedef struct {
<field name="Dimension"><long /></field>
<field name="BufferConformanceMark"><ptr><uint32 /></ptr></field>
<field name="BufferVarianceMark"><ptr><uint32 /></ptr></field>
<field name="MaxCountArray"><ptr><uint32 /></ptr></field>
<field name="OffsetArray"><ptr><uint32 /></ptr></field>
<field name="ActualCountArray"><ptr><uint32 /></ptr></field>
} ARRAY_INFO, *PARRAY_INFO;
<typedef name="PNDR_ASYNC_MESSAGE"><ptr><_NDR_ASYNC_MESSAGE /></ptr></typedef>
typedef struct _NDR_CORRELATION_INFO *PNDR_CORRELATION_INFO;
<typedef name="PFORMAT_STRING"><ptr const="true"><byte /></ptr></typedef>
typedef struct _MIDL_SYNTAX_INFO MIDL_SYNTAX_INFO, *PMIDL_SYNTAX_INFO;
<struct name="NDR_ALLOC_ALL_NODES_CONTEXT" />
<struct name="NDR_POINTER_QUEUE_STATE" />
<struct name="_NDR_PROC_CONTEXT" />
typedef struct _MIDL_STUB_MESSAGE {
<field name="RpcMsg"><PRPC_MESSAGE /></field>
<field name="Buffer"><ptr><byte /></ptr></field>
<field name="BufferStart"><ptr><byte /></ptr></field>
<field name="BufferEnd"><ptr><byte /></ptr></field>
<field name="BufferMark"><ptr><byte /></ptr></field>
<field name="BufferLength"><uint32 /></field>
<field name="MemorySize"><uint32 /></field>
<field name="Memory"><ptr><byte /></ptr></field>
<field name="IsClient"><byte /></field>
<field name="Pad"><byte /></field>
<field name="uFlags2"><uint16 /></field>
<field name="ReuseBuffer"><int32 /></field>
struct NDR_ALLOC_ALL_NODES_CONTEXT *pAllocAllNodesContext;
struct NDR_POINTER_QUEUE_STATE *pPointerQueueState;
<field name="IgnoreEmbeddedPointers"><int32 /></field>
<field name="PointerBufferMark"><ptr><byte /></ptr></field>
<field name="CorrDespIncrement"><byte /></field>
<field name="uFlags"><byte /></field>
<field name="UniquePtrCount"><uint16 /></field>
<field name="MaxCount"><ULONG_PTR /></field>
<field name="Offset"><uint32 /></field>
<field name="ActualCount"><uint32 /></field>
void *(__stdcall * pfnAllocate)( size_t );
void(__stdcall * pfnFree)(void *);
<field name="StackTop"><ptr><byte /></ptr></field>
<field name="pPresentedType"><ptr><byte /></ptr></field>
<field name="pTransmitType"><ptr><byte /></ptr></field>
<field name="SavedHandle"><handle_t /></field>
const struct _MIDL_STUB_DESC * StubDesc;
struct _FULL_PTR_XLAT_TABLES * FullPtrXlatTables;
<field name="FullPtrRefId"><uint32 /></field>
<field name="PointerLength"><uint32 /></field>
<bitfield name="fInDontFree" bits="1"><int32 /></bitfield>
<bitfield name="fDontCallFreeInst" bits="1"><int32 /></bitfield>
<bitfield name="fInOnlyParam" bits="1"><int32 /></bitfield>
<bitfield name="fHasReturn" bits="1"><int32 /></bitfield>
<bitfield name="fHasExtensions" bits="1"><int32 /></bitfield>
<bitfield name="fHasNewCorrDesc" bits="1"><int32 /></bitfield>
<bitfield name="fIsIn" bits="1"><int32 /></bitfield>
<bitfield name="fIsOut" bits="1"><int32 /></bitfield>
<bitfield name="fIsOicf" bits="1"><int32 /></bitfield>
<bitfield name="fBufferValid" bits="1"><int32 /></bitfield>
<bitfield name="fHasMemoryValidateCallback" bits="1"><int32 /></bitfield>
<bitfield name="fInFree" bits="1"><int32 /></bitfield>
<bitfield name="fNeedMCCP" bits="1"><int32 /></bitfield>
<bitfield name="fUnused" bits="3"><int32 /></bitfield>
<bitfield name="fUnused2" bits="16"><int32 /></bitfield>
<field name="dwDestContext"><uint32 /></field>
<field name="pvDestContext"><ptr><void /></ptr></field>
<field name="SavedContextHandles"><ptr><NDR_SCONTEXT /></ptr></field>
<field name="ParamNumber"><long /></field>
struct IRpcChannelBuffer * pRpcChannelBuffer;
<field name="pArrayInfo"><PARRAY_INFO /></field>
<field name="SizePtrCountArray"><ptr><uint32 /></ptr></field>
<field name="SizePtrOffsetArray"><ptr><uint32 /></ptr></field>
<field name="SizePtrLengthArray"><ptr><uint32 /></ptr></field>
<field name="pArgQueue"><ptr><void /></ptr></field>
<field name="dwStubPhase"><uint32 /></field>
<field name="LowStackMark"><ptr><void /></ptr></field>
<field name="pAsyncMsg"><PNDR_ASYNC_MESSAGE /></field>
<field name="pCorrInfo"><PNDR_CORRELATION_INFO /></field>
<field name="pCorrMemory"><ptr><byte /></ptr></field>
<field name="pMemoryList"><ptr><void /></ptr></field>
<field name="pCSInfo"><INT_PTR /></field>
<field name="ConformanceMark"><ptr><byte /></ptr></field>
<field name="VarianceMark"><ptr><byte /></ptr></field>
<field name="Unused"><INT_PTR /></field>
struct _NDR_PROC_CONTEXT * pContext;
<field name="ContextHandleHash"><ptr><void /></ptr></field>
<field name="pUserMarshalList"><ptr><void /></ptr></field>
<field name="Reserved51_3"><INT_PTR /></field>
<field name="Reserved51_4"><INT_PTR /></field>
<field name="Reserved51_5"><INT_PTR /></field>
} MIDL_STUB_MESSAGE, *PMIDL_STUB_MESSAGE;
typedef struct _MIDL_STUB_MESSAGE MIDL_STUB_MESSAGE, *PMIDL_STUB_MESSAGE;
typedef void *(__stdcall * GENERIC_BINDING_ROUTINE) (void *);
typedef void(__stdcall * GENERIC_UNBIND_ROUTINE) (void *, byte *);
typedef struct _GENERIC_BINDING_ROUTINE_PAIR {
<field name="pfnBind"><GENERIC_BINDING_ROUTINE /></field>
<field name="pfnUnbind"><GENERIC_UNBIND_ROUTINE /></field>
} GENERIC_BINDING_ROUTINE_PAIR, *PGENERIC_BINDING_ROUTINE_PAIR;
typedef struct __GENERIC_BINDING_INFO {
<field name="pObj"><ptr><void /></ptr></field>
<field name="Size"><uint32 /></field>
<field name="pfnBind"><GENERIC_BINDING_ROUTINE /></field>
<field name="pfnUnbind"><GENERIC_UNBIND_ROUTINE /></field>
} GENERIC_BINDING_INFO, *PGENERIC_BINDING_INFO;
typedef void(__stdcall * XMIT_HELPER_ROUTINE)(PMIDL_STUB_MESSAGE );
typedef struct _XMIT_ROUTINE_QUINTUPLE {
<field name="pfnTranslateToXmit"><XMIT_HELPER_ROUTINE /></field>
<field name="pfnTranslateFromXmit"><XMIT_HELPER_ROUTINE /></field>
<field name="pfnFreeXmit"><XMIT_HELPER_ROUTINE /></field>
<field name="pfnFreeInst"><XMIT_HELPER_ROUTINE /></field>
} XMIT_ROUTINE_QUINTUPLE, *PXMIT_ROUTINE_QUINTUPLE;
typedef uint32(__stdcall * USER_MARSHAL_SIZING_ROUTINE) (uint32 *, uint32, void * );
typedef byte *(__stdcall * USER_MARSHAL_MARSHALLING_ROUTINE) (uint32 *, byte *, void * );
typedef byte *(__stdcall * USER_MARSHAL_UNMARSHALLING_ROUTINE) (uint32 *, byte *, void * );
typedef void(__stdcall * USER_MARSHAL_FREEING_ROUTINE) (uint32 *, void * );
typedef struct _USER_MARSHAL_ROUTINE_QUADRUPLE {
<field name="pfnBufferSize"><USER_MARSHAL_SIZING_ROUTINE /></field>
<field name="pfnMarshall"><USER_MARSHAL_MARSHALLING_ROUTINE /></field>
<field name="pfnUnmarshall"><USER_MARSHAL_UNMARSHALLING_ROUTINE /></field>
<field name="pfnFree"><USER_MARSHAL_FREEING_ROUTINE /></field>
} USER_MARSHAL_ROUTINE_QUADRUPLE;
typedef enum _USER_MARSHAL_CB_TYPE {
USER_MARSHAL_CB_BUFFER_SIZE, USER_MARSHAL_CB_MARSHALL, USER_MARSHAL_CB_UNMARSHALL, USER_MARSHAL_CB_FREE } USER_MARSHAL_CB_TYPE;
typedef struct _USER_MARSHAL_CB {
<field name="Flags"><uint32 /></field>
<field name="pStubMsg"><PMIDL_STUB_MESSAGE /></field>
<field name="pReserve"><PFORMAT_STRING /></field>
<field name="Signature"><uint32 /></field>
<field name="CBType"><USER_MARSHAL_CB_TYPE /></field>
<field name="pFormat"><PFORMAT_STRING /></field>
<field name="pTypeFormat"><PFORMAT_STRING /></field>
} USER_MARSHAL_CB;
typedef struct _MALLOC_FREE_STRUCT {
void *(__stdcall * pfnAllocate)(size_t);
void(__stdcall * pfnFree)(void *);
} MALLOC_FREE_STRUCT;
typedef struct _COMM_FAULT_OFFSETS {
<field name="CommOffset"><short /></field>
<field name="FaultOffset"><short /></field>
} COMM_FAULT_OFFSETS;
typedef enum _IDL_CS_CONVERT {
IDL_CS_NO_CONVERT, IDL_CS_IN_PLACE_CONVERT, IDL_CS_NEW_BUFFER_CONVERT } IDL_CS_CONVERT;
typedef void(__stdcall * CS_TYPE_NET_SIZE_ROUTINE) (RPC_BINDING_HANDLE hBinding, uint32 ulNetworkCodeSet, uint32 ulLocalBufferSize, IDL_CS_CONVERT * conversionType, uint32 * pulNetworkBufferSize, error_status_t * pStatus);
typedef void(__stdcall * CS_TYPE_LOCAL_SIZE_ROUTINE) (RPC_BINDING_HANDLE hBinding, uint32 ulNetworkCodeSet, uint32 ulNetworkBufferSize, IDL_CS_CONVERT * conversionType, uint32 * pulLocalBufferSize, error_status_t * pStatus);
typedef void(__stdcall * CS_TYPE_TO_NETCS_ROUTINE) (RPC_BINDING_HANDLE hBinding, uint32 ulNetworkCodeSet, void * pLocalData, uint32 ulLocalDataLength, byte * pNetworkData, uint32 * pulNetworkDataLength, error_status_t * pStatus);
typedef void(__stdcall * CS_TYPE_FROM_NETCS_ROUTINE) (RPC_BINDING_HANDLE hBinding, uint32 ulNetworkCodeSet, byte * pNetworkData, uint32 ulNetworkDataLength, uint32 ulLocalBufferSize, void * pLocalData, uint32 * pulLocalDataLength, error_status_t * pStatus);
typedef void(__stdcall * CS_TAG_GETTING_ROUTINE) (RPC_BINDING_HANDLE hBinding, int32 fServerSide, uint32 * pulSendingTag, uint32 * pulDesiredReceivingTag, uint32 * pulReceivingTag, error_status_t * pStatus);
void __stdcall RpcCsGetTags( RPC_BINDING_HANDLE hBinding, int32 fServerSide, uint32 * pulSendingTag, uint32 * pulDesiredReceivingTag, uint32 * pulReceivingTag, error_status_t * pStatus);
typedef struct _NDR_CS_SIZE_CONVERT_ROUTINES {
<field name="pfnNetSize"><CS_TYPE_NET_SIZE_ROUTINE /></field>
<field name="pfnToNetCs"><CS_TYPE_TO_NETCS_ROUTINE /></field>
<field name="pfnLocalSize"><CS_TYPE_LOCAL_SIZE_ROUTINE /></field>
<field name="pfnFromNetCs"><CS_TYPE_FROM_NETCS_ROUTINE /></field>
} NDR_CS_SIZE_CONVERT_ROUTINES;
typedef struct _NDR_CS_ROUTINES {
<field name="pSizeConvertRoutines"><ptr><NDR_CS_SIZE_CONVERT_ROUTINES /></ptr></field>
<field name="pTagGettingRoutines"><ptr><CS_TAG_GETTING_ROUTINE /></ptr></field>
} NDR_CS_ROUTINES;
typedef struct _NDR_EXPR_DESC {
<field name="pOffset"><ptr const="true"><uint16 /></ptr></field>
<field name="pFormatExpr"><PFORMAT_STRING /></field>
} NDR_EXPR_DESC;
typedef struct _MIDL_STUB_DESC {
<field name="RpcInterfaceInformation"><ptr><void /></ptr></field>
void *(__stdcall * pfnAllocate)(size_t);
void(__stdcall * pfnFree)(void *);
union {
<field name="pAutoHandle"><ptr><handle_t /></ptr></field>
<field name="pPrimitiveHandle"><ptr><handle_t /></ptr></field>
<field name="pGenericBindingInfo"><PGENERIC_BINDING_INFO /></field>
} IMPLICIT_HANDLE_INFO;
<field name="apfnNdrRundownRoutines"><ptr const="true"><NDR_RUNDOWN /></ptr></field>
<field name="aGenericBindingRoutinePairs"><ptr const="true"><GENERIC_BINDING_ROUTINE_PAIR /></ptr></field>
<field name="apfnExprEval"><ptr const="true"><EXPR_EVAL /></ptr></field>
<field name="aXmitQuintuple"><ptr const="true"><XMIT_ROUTINE_QUINTUPLE /></ptr></field>
<field name="pFormatTypes"><ptr const="true"><byte /></ptr></field>
<field name="fCheckBounds"><int32 /></field>
<field name="Version"><uint32 /></field>
<field name="pMallocFreeStruct"><ptr><MALLOC_FREE_STRUCT /></ptr></field>
<field name="MIDLVersion"><long /></field>
<field name="CommFaultOffsets"><ptr const="true"><COMM_FAULT_OFFSETS /></ptr></field>
<field name="aUserMarshalQuadruple"><ptr const="true"><USER_MARSHAL_ROUTINE_QUADRUPLE /></ptr></field>
<field name="NotifyRoutineTable"><ptr const="true"><NDR_NOTIFY_ROUTINE /></ptr></field>
<field name="mFlags"><ULONG_PTR /></field>
<field name="CsRoutineTables"><ptr const="true"><NDR_CS_ROUTINES /></ptr></field>
<field name="ProxyServerInfo"><ptr><void /></ptr></field>
<field name="pExprInfo"><ptr const="true"><NDR_EXPR_DESC /></ptr></field>
} MIDL_STUB_DESC;
<typedef name="PMIDL_STUB_DESC"><ptr const="true"><MIDL_STUB_DESC /></ptr></typedef>
<typedef name="PMIDL_XMIT_TYPE"><ptr><void /></ptr></typedef>
typedef struct _MIDL_FORMAT_STRING {
<field name="Pad"><short /></field>
byte Format[];
} MIDL_FORMAT_STRING;
typedef void(__stdcall * STUB_THUNK)( PMIDL_STUB_MESSAGE );
typedef long(__stdcall * SERVER_ROUTINE)();
typedef struct _MIDL_SERVER_INFO_ {
<field name="pStubDesc"><PMIDL_STUB_DESC /></field>
<field name="DispatchTable"><ptr const="true"><SERVER_ROUTINE /></ptr></field>
<field name="ProcString"><PFORMAT_STRING /></field>
<field name="FmtStringOffset"><ptr const="true"><uint16 /></ptr></field>
<field name="ThunkTable"><ptr const="true"><STUB_THUNK /></ptr></field>
<field name="pTransferSyntax"><PRPC_SYNTAX_IDENTIFIER /></field>
<field name="nCount"><ULONG_PTR /></field>
<field name="pSyntaxInfo"><PMIDL_SYNTAX_INFO /></field>
} MIDL_SERVER_INFO, *PMIDL_SERVER_INFO;
typedef struct _MIDL_STUBLESS_PROXY_INFO {
<field name="pStubDesc"><PMIDL_STUB_DESC /></field>
<field name="ProcFormatString"><PFORMAT_STRING /></field>
<field name="FormatStringOffset"><ptr const="true"><uint16 /></ptr></field>
<field name="pTransferSyntax"><PRPC_SYNTAX_IDENTIFIER /></field>
<field name="nCount"><ULONG_PTR /></field>
<field name="pSyntaxInfo"><PMIDL_SYNTAX_INFO /></field>
} MIDL_STUBLESS_PROXY_INFO;
<typedef name="PMIDL_STUBLESS_PROXY_INFO"><ptr><MIDL_STUBLESS_PROXY_INFO /></ptr></typedef>
typedef struct _MIDL_SYNTAX_INFO {
<field name="TransferSyntax"><RPC_SYNTAX_IDENTIFIER /></field>
<field name="DispatchTable"><ptr><RPC_DISPATCH_TABLE /></ptr></field>
<field name="ProcString"><PFORMAT_STRING /></field>
<field name="FmtStringOffset"><ptr const="true"><uint16 /></ptr></field>
<field name="TypeString"><PFORMAT_STRING /></field>
<field name="aUserMarshalQuadruple"><ptr const="true"><void /></ptr></field>
<field name="pReserved1"><ULONG_PTR /></field>
<field name="pReserved2"><ULONG_PTR /></field>
} MIDL_SYNTAX_INFO, *PMIDL_SYNTAX_INFO;
typedef uint16 * PARAM_OFFSETTABLE, *PPARAM_OFFSETTABLE;
typedef union _CLIENT_CALL_RETURN {
<field name="Pointer"><ptr><void /></ptr></field>
<field name="Simple"><LONG_PTR /></field>
} CLIENT_CALL_RETURN;
typedef enum {
XLAT_SERVER = 1, XLAT_CLIENT } XLAT_SIDE;
typedef struct _FULL_PTR_XLAT_TABLES {
<field name="RefIdToPointer"><ptr><void /></ptr></field>
<field name="PointerToRefId"><ptr><void /></ptr></field>
<field name="NextRefId"><uint32 /></field>
<field name="XlatSide"><XLAT_SIDE /></field>
} FULL_PTR_XLAT_TABLES, *PFULL_PTR_XLAT_TABLES;
RPC_STATUS __stdcall NdrClientGetSupportedSyntaxes( RPC_CLIENT_INTERFACE * pInf, uint32 * pCount, MIDL_SYNTAX_INFO ** pArr );
RPC_STATUS __stdcall NdrServerGetSupportedSyntaxes( RPC_SERVER_INTERFACE * pInf, uint32 * pCount, MIDL_SYNTAX_INFO ** pArr, uint32 * pPreferSyntaxIndex);

void __stdcall NdrSimpleTypeMarshall( PMIDL_STUB_MESSAGE pStubMsg, byte * pMemory, byte FormatChar );

byte * __stdcall NdrPointerMarshall( PMIDL_STUB_MESSAGE pStubMsg, byte * pMemory, PFORMAT_STRING pFormat );

byte * __stdcall NdrCsArrayMarshall( PMIDL_STUB_MESSAGE pStubMsg, byte * pMemory, PFORMAT_STRING pFormat );

byte * __stdcall NdrCsTagMarshall( PMIDL_STUB_MESSAGE pStubMsg, byte * pMemory, PFORMAT_STRING pFormat );

byte * __stdcall NdrSimpleStructMarshall( PMIDL_STUB_MESSAGE pStubMsg, byte * pMemory, PFORMAT_STRING pFormat );

byte * __stdcall NdrConformantStructMarshall( PMIDL_STUB_MESSAGE pStubMsg, byte * pMemory, PFORMAT_STRING pFormat );

byte * __stdcall NdrConformantVaryingStructMarshall( PMIDL_STUB_MESSAGE pStubMsg, byte * pMemory, PFORMAT_STRING pFormat );

byte * __stdcall NdrComplexStructMarshall( PMIDL_STUB_MESSAGE pStubMsg, byte * pMemory, PFORMAT_STRING pFormat );

byte * __stdcall NdrFixedArrayMarshall( PMIDL_STUB_MESSAGE pStubMsg, byte * pMemory, PFORMAT_STRING pFormat );

byte * __stdcall NdrConformantArrayMarshall( PMIDL_STUB_MESSAGE pStubMsg, byte * pMemory, PFORMAT_STRING pFormat );

byte * __stdcall NdrConformantVaryingArrayMarshall( PMIDL_STUB_MESSAGE pStubMsg, byte * pMemory, PFORMAT_STRING pFormat );

byte * __stdcall NdrVaryingArrayMarshall( PMIDL_STUB_MESSAGE pStubMsg, byte * pMemory, PFORMAT_STRING pFormat );

byte * __stdcall NdrComplexArrayMarshall( PMIDL_STUB_MESSAGE pStubMsg, byte * pMemory, PFORMAT_STRING pFormat );

byte * __stdcall NdrNonConformantStringMarshall( PMIDL_STUB_MESSAGE pStubMsg, byte * pMemory, PFORMAT_STRING pFormat );

byte * __stdcall NdrConformantStringMarshall( PMIDL_STUB_MESSAGE pStubMsg, byte * pMemory, PFORMAT_STRING pFormat );

byte * __stdcall NdrEncapsulatedUnionMarshall( PMIDL_STUB_MESSAGE pStubMsg, byte * pMemory, PFORMAT_STRING pFormat );

byte * __stdcall NdrNonEncapsulatedUnionMarshall( PMIDL_STUB_MESSAGE pStubMsg, byte * pMemory, PFORMAT_STRING pFormat );

byte * __stdcall NdrByteCountPointerMarshall( PMIDL_STUB_MESSAGE pStubMsg, byte * pMemory, PFORMAT_STRING pFormat );

byte * __stdcall NdrXmitOrRepAsMarshall( PMIDL_STUB_MESSAGE pStubMsg, byte * pMemory, PFORMAT_STRING pFormat );

byte * __stdcall NdrUserMarshalMarshall( PMIDL_STUB_MESSAGE pStubMsg, byte * pMemory, PFORMAT_STRING pFormat );

byte * __stdcall NdrInterfacePointerMarshall( PMIDL_STUB_MESSAGE pStubMsg, byte * pMemory, PFORMAT_STRING pFormat );

void __stdcall NdrClientContextMarshall( PMIDL_STUB_MESSAGE pStubMsg, NDR_CCONTEXT ContextHandle, int32 fCheck );

void __stdcall NdrServerContextMarshall( PMIDL_STUB_MESSAGE pStubMsg, NDR_SCONTEXT ContextHandle, NDR_RUNDOWN RundownRoutine );

void __stdcall NdrServerContextNewMarshall( PMIDL_STUB_MESSAGE pStubMsg, NDR_SCONTEXT ContextHandle, NDR_RUNDOWN RundownRoutine, PFORMAT_STRING pFormat );

void __stdcall NdrSimpleTypeUnmarshall( PMIDL_STUB_MESSAGE pStubMsg, byte * pMemory, byte FormatChar );

byte * __stdcall __stdcall NdrCsArrayUnmarshall( PMIDL_STUB_MESSAGE pStubMsg, byte ** ppMemory, PFORMAT_STRING pFormat, byte fMustAlloc );

byte * __stdcall __stdcall NdrCsTagUnmarshall( PMIDL_STUB_MESSAGE pStubMsg, byte ** ppMemory, PFORMAT_STRING pFormat, byte fMustAlloc );

byte * __stdcall NdrRangeUnmarshall( PMIDL_STUB_MESSAGE pStubMsg, byte ** ppMemory, PFORMAT_STRING pFormat, byte fMustAlloc );

void __stdcall NdrCorrelationInitialize( PMIDL_STUB_MESSAGE pStubMsg, void * pMemory, uint32 CacheSize, uint32 flags );

void __stdcall NdrCorrelationPass( PMIDL_STUB_MESSAGE pStubMsg );

void __stdcall NdrCorrelationFree( PMIDL_STUB_MESSAGE pStubMsg );

byte * __stdcall NdrPointerUnmarshall( PMIDL_STUB_MESSAGE pStubMsg, byte * * ppMemory, PFORMAT_STRING pFormat, byte fMustAlloc );

byte * __stdcall NdrSimpleStructUnmarshall( PMIDL_STUB_MESSAGE pStubMsg, byte * * ppMemory, PFORMAT_STRING pFormat, byte fMustAlloc );

byte * __stdcall NdrConformantStructUnmarshall( PMIDL_STUB_MESSAGE pStubMsg, byte * * ppMemory, PFORMAT_STRING pFormat, byte fMustAlloc );

byte * __stdcall NdrConformantVaryingStructUnmarshall( PMIDL_STUB_MESSAGE pStubMsg, byte * * ppMemory, PFORMAT_STRING pFormat, byte fMustAlloc );

byte * __stdcall NdrComplexStructUnmarshall( PMIDL_STUB_MESSAGE pStubMsg, byte * * ppMemory, PFORMAT_STRING pFormat, byte fMustAlloc );

byte * __stdcall NdrFixedArrayUnmarshall( PMIDL_STUB_MESSAGE pStubMsg, byte * * ppMemory, PFORMAT_STRING pFormat, byte fMustAlloc );

byte * __stdcall NdrConformantArrayUnmarshall( PMIDL_STUB_MESSAGE pStubMsg, byte * * ppMemory, PFORMAT_STRING pFormat, byte fMustAlloc );

byte * __stdcall NdrConformantVaryingArrayUnmarshall( PMIDL_STUB_MESSAGE pStubMsg, byte * * ppMemory, PFORMAT_STRING pFormat, byte fMustAlloc );

byte * __stdcall NdrVaryingArrayUnmarshall( PMIDL_STUB_MESSAGE pStubMsg, byte * * ppMemory, PFORMAT_STRING pFormat, byte fMustAlloc );

byte * __stdcall NdrComplexArrayUnmarshall( PMIDL_STUB_MESSAGE pStubMsg, byte * * ppMemory, PFORMAT_STRING pFormat, byte fMustAlloc );

byte * __stdcall NdrNonConformantStringUnmarshall( PMIDL_STUB_MESSAGE pStubMsg, byte * * ppMemory, PFORMAT_STRING pFormat, byte fMustAlloc );

byte * __stdcall NdrConformantStringUnmarshall( PMIDL_STUB_MESSAGE pStubMsg, byte * * ppMemory, PFORMAT_STRING pFormat, byte fMustAlloc );

byte * __stdcall NdrEncapsulatedUnionUnmarshall( PMIDL_STUB_MESSAGE pStubMsg, byte * * ppMemory, PFORMAT_STRING pFormat, byte fMustAlloc );

byte * __stdcall NdrNonEncapsulatedUnionUnmarshall( PMIDL_STUB_MESSAGE pStubMsg, byte * * ppMemory, PFORMAT_STRING pFormat, byte fMustAlloc );

byte * __stdcall NdrByteCountPointerUnmarshall( PMIDL_STUB_MESSAGE pStubMsg, byte * * ppMemory, PFORMAT_STRING pFormat, byte fMustAlloc );

byte * __stdcall NdrXmitOrRepAsUnmarshall( PMIDL_STUB_MESSAGE pStubMsg, byte * * ppMemory, PFORMAT_STRING pFormat, byte fMustAlloc );

byte * __stdcall NdrUserMarshalUnmarshall( PMIDL_STUB_MESSAGE pStubMsg, byte * * ppMemory, PFORMAT_STRING pFormat, byte fMustAlloc );

byte * __stdcall NdrInterfacePointerUnmarshall( PMIDL_STUB_MESSAGE pStubMsg, byte * * ppMemory, PFORMAT_STRING pFormat, byte fMustAlloc );

void __stdcall NdrClientContextUnmarshall( PMIDL_STUB_MESSAGE pStubMsg, NDR_CCONTEXT * pContextHandle, RPC_BINDING_HANDLE BindHandle );

NDR_SCONTEXT __stdcall NdrServerContextUnmarshall( PMIDL_STUB_MESSAGE pStubMsg );

NDR_SCONTEXT __stdcall NdrContextHandleInitialize( PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat );

NDR_SCONTEXT __stdcall NdrServerContextNewUnmarshall( PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat );

void __stdcall NdrPointerBufferSize( PMIDL_STUB_MESSAGE pStubMsg, byte * pMemory, PFORMAT_STRING pFormat );

void __stdcall NdrCsArrayBufferSize( PMIDL_STUB_MESSAGE pStubMsg, byte * pMemory, PFORMAT_STRING pFormat );

void __stdcall NdrCsTagBufferSize( PMIDL_STUB_MESSAGE pStubMsg, byte * pMemory, PFORMAT_STRING pFormat );

void __stdcall NdrSimpleStructBufferSize( PMIDL_STUB_MESSAGE pStubMsg, byte * pMemory, PFORMAT_STRING pFormat );

void __stdcall NdrConformantStructBufferSize( PMIDL_STUB_MESSAGE pStubMsg, byte * pMemory, PFORMAT_STRING pFormat );

void __stdcall NdrConformantVaryingStructBufferSize( PMIDL_STUB_MESSAGE pStubMsg, byte * pMemory, PFORMAT_STRING pFormat );

void __stdcall NdrComplexStructBufferSize( PMIDL_STUB_MESSAGE pStubMsg, byte * pMemory, PFORMAT_STRING pFormat );

void __stdcall NdrFixedArrayBufferSize( PMIDL_STUB_MESSAGE pStubMsg, byte * pMemory, PFORMAT_STRING pFormat );

void __stdcall NdrConformantArrayBufferSize( PMIDL_STUB_MESSAGE pStubMsg, byte * pMemory, PFORMAT_STRING pFormat );

void __stdcall NdrConformantVaryingArrayBufferSize( PMIDL_STUB_MESSAGE pStubMsg, byte * pMemory, PFORMAT_STRING pFormat );

void __stdcall NdrVaryingArrayBufferSize( PMIDL_STUB_MESSAGE pStubMsg, byte * pMemory, PFORMAT_STRING pFormat );

void __stdcall NdrComplexArrayBufferSize( PMIDL_STUB_MESSAGE pStubMsg, byte * pMemory, PFORMAT_STRING pFormat );

void __stdcall NdrConformantStringBufferSize( PMIDL_STUB_MESSAGE pStubMsg, byte * pMemory, PFORMAT_STRING pFormat );

void __stdcall NdrNonConformantStringBufferSize( PMIDL_STUB_MESSAGE pStubMsg, byte * pMemory, PFORMAT_STRING pFormat );

void __stdcall NdrEncapsulatedUnionBufferSize( PMIDL_STUB_MESSAGE pStubMsg, byte * pMemory, PFORMAT_STRING pFormat );

void __stdcall NdrNonEncapsulatedUnionBufferSize( PMIDL_STUB_MESSAGE pStubMsg, byte * pMemory, PFORMAT_STRING pFormat );

void __stdcall NdrByteCountPointerBufferSize( PMIDL_STUB_MESSAGE pStubMsg, byte * pMemory, PFORMAT_STRING pFormat );

void __stdcall NdrXmitOrRepAsBufferSize( PMIDL_STUB_MESSAGE pStubMsg, byte * pMemory, PFORMAT_STRING pFormat );

void __stdcall NdrUserMarshalBufferSize( PMIDL_STUB_MESSAGE pStubMsg, byte * pMemory, PFORMAT_STRING pFormat );

void __stdcall NdrInterfacePointerBufferSize( PMIDL_STUB_MESSAGE pStubMsg, byte * pMemory, PFORMAT_STRING pFormat );

void __stdcall NdrContextHandleSize( PMIDL_STUB_MESSAGE pStubMsg, byte * pMemory, PFORMAT_STRING pFormat );

uint32 __stdcall NdrPointerMemorySize( PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat );

uint32 __stdcall NdrContextHandleMemorySize( PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat );

uint32 __stdcall NdrCsArrayMemorySize( PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat );

uint32 __stdcall NdrCsTagMemorySize( PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat );

uint32 __stdcall NdrSimpleStructMemorySize( PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat );

uint32 __stdcall NdrConformantStructMemorySize( PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat );

uint32 __stdcall NdrConformantVaryingStructMemorySize( PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat );

uint32 __stdcall NdrComplexStructMemorySize( PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat );

uint32 __stdcall NdrFixedArrayMemorySize( PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat );

uint32 __stdcall NdrConformantArrayMemorySize( PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat );

uint32 __stdcall NdrConformantVaryingArrayMemorySize( PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat );

uint32 __stdcall NdrVaryingArrayMemorySize( PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat );

uint32 __stdcall NdrComplexArrayMemorySize( PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat );

uint32 __stdcall NdrConformantStringMemorySize( PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat );

uint32 __stdcall NdrNonConformantStringMemorySize( PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat );

uint32 __stdcall NdrEncapsulatedUnionMemorySize( PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat );

uint32 __stdcall NdrNonEncapsulatedUnionMemorySize( PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat );

uint32 __stdcall NdrXmitOrRepAsMemorySize( PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat );

uint32 __stdcall NdrUserMarshalMemorySize( PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat );

uint32 __stdcall NdrInterfacePointerMemorySize( PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat );

void __stdcall NdrPointerFree( PMIDL_STUB_MESSAGE pStubMsg, byte * pMemory, PFORMAT_STRING pFormat );

void __stdcall NdrCsArrayFree( PMIDL_STUB_MESSAGE pStubMsg, byte * pMemory, PFORMAT_STRING pFormat );

void __stdcall NdrSimpleStructFree( PMIDL_STUB_MESSAGE pStubMsg, byte * pMemory, PFORMAT_STRING pFormat );

void __stdcall NdrConformantStructFree( PMIDL_STUB_MESSAGE pStubMsg, byte * pMemory, PFORMAT_STRING pFormat );

void __stdcall NdrConformantVaryingStructFree( PMIDL_STUB_MESSAGE pStubMsg, byte * pMemory, PFORMAT_STRING pFormat );

void __stdcall NdrComplexStructFree( PMIDL_STUB_MESSAGE pStubMsg, byte * pMemory, PFORMAT_STRING pFormat );

void __stdcall NdrFixedArrayFree( PMIDL_STUB_MESSAGE pStubMsg, byte * pMemory, PFORMAT_STRING pFormat );

void __stdcall NdrConformantArrayFree( PMIDL_STUB_MESSAGE pStubMsg, byte * pMemory, PFORMAT_STRING pFormat );

void __stdcall NdrConformantVaryingArrayFree( PMIDL_STUB_MESSAGE pStubMsg, byte * pMemory, PFORMAT_STRING pFormat );

void __stdcall NdrVaryingArrayFree( PMIDL_STUB_MESSAGE pStubMsg, byte * pMemory, PFORMAT_STRING pFormat );

void __stdcall NdrComplexArrayFree( PMIDL_STUB_MESSAGE pStubMsg, byte * pMemory, PFORMAT_STRING pFormat );

void __stdcall NdrEncapsulatedUnionFree( PMIDL_STUB_MESSAGE pStubMsg, byte * pMemory, PFORMAT_STRING pFormat );

void __stdcall NdrNonEncapsulatedUnionFree( PMIDL_STUB_MESSAGE pStubMsg, byte * pMemory, PFORMAT_STRING pFormat );

void __stdcall NdrByteCountPointerFree( PMIDL_STUB_MESSAGE pStubMsg, byte * pMemory, PFORMAT_STRING pFormat );

void __stdcall NdrXmitOrRepAsFree( PMIDL_STUB_MESSAGE pStubMsg, byte * pMemory, PFORMAT_STRING pFormat );

void __stdcall NdrUserMarshalFree( PMIDL_STUB_MESSAGE pStubMsg, byte * pMemory, PFORMAT_STRING pFormat );

void __stdcall NdrInterfacePointerFree( PMIDL_STUB_MESSAGE pStubMsg, byte * pMemory, PFORMAT_STRING pFormat );

void __stdcall NdrConvert2( PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat, long NumberParams );

void __stdcall NdrConvert( PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat );

byte * __stdcall NdrUserMarshalSimpleTypeConvert( uint32 * pFlags, byte * pBuffer, byte FormatChar );

void __stdcall NdrClientInitializeNew( PRPC_MESSAGE pRpcMsg, PMIDL_STUB_MESSAGE pStubMsg, PMIDL_STUB_DESC pStubDescriptor, uint32 ProcNum );

byte * __stdcall NdrServerInitializeNew( PRPC_MESSAGE pRpcMsg, PMIDL_STUB_MESSAGE pStubMsg, PMIDL_STUB_DESC pStubDescriptor );

void __stdcall NdrServerInitializePartial( PRPC_MESSAGE pRpcMsg, PMIDL_STUB_MESSAGE pStubMsg, PMIDL_STUB_DESC pStubDescriptor, uint32 RequestedBufferSize );

void __stdcall NdrClientInitialize( PRPC_MESSAGE pRpcMsg, PMIDL_STUB_MESSAGE pStubMsg, PMIDL_STUB_DESC pStubDescriptor, uint32 ProcNum );

byte * __stdcall NdrServerInitialize( PRPC_MESSAGE pRpcMsg, PMIDL_STUB_MESSAGE pStubMsg, PMIDL_STUB_DESC pStubDescriptor );

byte * __stdcall NdrServerInitializeUnmarshall(PMIDL_STUB_MESSAGE pStubMsg, PMIDL_STUB_DESC pStubDescriptor, PRPC_MESSAGE pRpcMsg );

void __stdcall NdrServerInitializeMarshall(PRPC_MESSAGE pRpcMsg, PMIDL_STUB_MESSAGE pStubMsg );

byte * __stdcall NdrGetBuffer( PMIDL_STUB_MESSAGE pStubMsg, uint32 BufferLength, RPC_BINDING_HANDLE Handle );

byte * __stdcall NdrNsGetBuffer( PMIDL_STUB_MESSAGE pStubMsg, uint32 BufferLength, RPC_BINDING_HANDLE Handle );

byte * __stdcall NdrSendReceive( PMIDL_STUB_MESSAGE pStubMsg, byte * pBufferEnd );

byte * __stdcall NdrNsSendReceive( PMIDL_STUB_MESSAGE pStubMsg, byte * pBufferEnd, RPC_BINDING_HANDLE * pAutoHandle );

void __stdcall NdrFreeBuffer( PMIDL_STUB_MESSAGE pStubMsg );

RPC_STATUS __stdcall NdrGetDcomProtocolVersion( PMIDL_STUB_MESSAGE pStubMsg, RPC_VERSION * pVersion );
CLIENT_CALL_RETURN __cdecl NdrClientCall2( PMIDL_STUB_DESC pStubDescriptor, PFORMAT_STRING pFormat, ... );
CLIENT_CALL_RETURN __cdecl NdrClientCall( PMIDL_STUB_DESC pStubDescriptor, PFORMAT_STRING pFormat, ... );
CLIENT_CALL_RETURN __cdecl NdrAsyncClientCall( PMIDL_STUB_DESC pStubDescriptor, PFORMAT_STRING pFormat, ... );
CLIENT_CALL_RETURN __cdecl NdrDcomAsyncClientCall( PMIDL_STUB_DESC pStubDescriptor, PFORMAT_STRING pFormat, ... );
typedef enum {
STUB_UNMARSHAL, STUB_CALL_SERVER, STUB_MARSHAL, STUB_CALL_SERVER_NO_HRESULT }STUB_PHASE;
typedef enum {
PROXY_CALCSIZE, PROXY_GETBUFFER, PROXY_MARSHAL, PROXY_SENDRECEIVE, PROXY_UNMARSHAL }PROXY_PHASE;
<struct name="IRpcStubBuffer" /> 
void __stdcall NdrAsyncServerCall( PRPC_MESSAGE pRpcMsg );

long __stdcall NdrAsyncStubCall( struct IRpcStubBuffer * pThis, struct IRpcChannelBuffer * pChannel, PRPC_MESSAGE pRpcMsg, uint32 * pdwStubPhase );

long __stdcall NdrDcomAsyncStubCall( struct IRpcStubBuffer * pThis, struct IRpcChannelBuffer * pChannel, PRPC_MESSAGE pRpcMsg, uint32 * pdwStubPhase );

long __stdcall NdrStubCall2( void * pThis, void * pChannel, PRPC_MESSAGE pRpcMsg, uint32 * pdwStubPhase );

void __stdcall NdrServerCall2( PRPC_MESSAGE pRpcMsg );

long __stdcall NdrStubCall(void * pThis, void * pChannel, PRPC_MESSAGE pRpcMsg, uint32 * pdwStubPhase );

void __stdcall NdrServerCall( PRPC_MESSAGE pRpcMsg );

int32 __stdcall NdrServerUnmarshall( void * pChannel, PRPC_MESSAGE pRpcMsg, PMIDL_STUB_MESSAGE pStubMsg, PMIDL_STUB_DESC pStubDescriptor, PFORMAT_STRING pFormat, void * pParamList );

void __stdcall NdrServerMarshall( void * pThis, void * pChannel, PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat );

RPC_STATUS __stdcall NdrMapCommAndFaultStatus( PMIDL_STUB_MESSAGE pStubMsg, uint32 * pCommStatus, uint32 * pFaultStatus, RPC_STATUS Status );
<typedef name="RPC_SS_THREAD_HANDLE"><ptr><void /></ptr></typedef>
typedef void * __stdcall RPC_CLIENT_ALLOC(size_t Size );
typedef void __stdcall RPC_CLIENT_FREE(void * Ptr );

void * __stdcall RpcSsAllocate(size_t Size );

void __stdcall RpcSsDisableAllocate(void );

void __stdcall RpcSsEnableAllocate(void );

void __stdcall RpcSsFree(void * NodeToFree );

RPC_SS_THREAD_HANDLE __stdcall RpcSsGetThreadHandle(void );

void __stdcall RpcSsSetClientAllocFree(RPC_CLIENT_ALLOC * ClientAlloc, RPC_CLIENT_FREE * ClientFree );

void __stdcall RpcSsSetThreadHandle(RPC_SS_THREAD_HANDLE Id );

void __stdcall RpcSsSwapClientAllocFree(RPC_CLIENT_ALLOC * ClientAlloc, RPC_CLIENT_FREE * ClientFree, RPC_CLIENT_ALLOC * * OldClientAlloc, RPC_CLIENT_FREE * * OldClientFree );

void * __stdcall RpcSmAllocate(size_t Size, RPC_STATUS * pStatus );

RPC_STATUS __stdcall RpcSmClientFree(void * pNodeToFree );

RPC_STATUS __stdcall RpcSmDestroyClientContext(void * * ContextHandle );

RPC_STATUS __stdcall RpcSmDisableAllocate(void );

RPC_STATUS __stdcall RpcSmEnableAllocate(void );

RPC_STATUS __stdcall RpcSmFree(void * NodeToFree );

RPC_SS_THREAD_HANDLE __stdcall RpcSmGetThreadHandle(RPC_STATUS * pStatus );

RPC_STATUS __stdcall RpcSmSetClientAllocFree(RPC_CLIENT_ALLOC * ClientAlloc, RPC_CLIENT_FREE * ClientFree );

RPC_STATUS __stdcall RpcSmSetThreadHandle(RPC_SS_THREAD_HANDLE Id );

RPC_STATUS __stdcall RpcSmSwapClientAllocFree(RPC_CLIENT_ALLOC * ClientAlloc, RPC_CLIENT_FREE * ClientFree, RPC_CLIENT_ALLOC * * OldClientAlloc, RPC_CLIENT_FREE * * OldClientFree );

void __stdcall NdrRpcSsEnableAllocate( PMIDL_STUB_MESSAGE pMessage );

void __stdcall NdrRpcSsDisableAllocate( PMIDL_STUB_MESSAGE pMessage );

void __stdcall NdrRpcSmSetClientToOsf( PMIDL_STUB_MESSAGE pMessage );

void * __stdcall NdrRpcSmClientAllocate(size_t Size );

void __stdcall NdrRpcSmClientFree(void * NodeToFree );

void * __stdcall NdrRpcSsDefaultAllocate(size_t Size );

void __stdcall NdrRpcSsDefaultFree(void * NodeToFree );

PFULL_PTR_XLAT_TABLES __stdcall NdrFullPointerXlatInit( uint32 NumberOfPointers, XLAT_SIDE XlatSide );

void __stdcall NdrFullPointerXlatFree( PFULL_PTR_XLAT_TABLES pXlatTables );

void * __stdcall NdrAllocate( PMIDL_STUB_MESSAGE pStubMsg, size_t Len );

void __stdcall NdrClearOutParameters( PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat, void * ArgAddr );

void * __stdcall NdrOleAllocate(size_t Size );

void __stdcall NdrOleFree(void * NodeToFree );
typedef struct _NDR_USER_MARSHAL_INFO_LEVEL1 {
<field name="Buffer"><ptr><void /></ptr></field>
<field name="BufferSize"><uint32 /></field>
void *(__stdcall * pfnAllocate)(size_t);
void (__stdcall * pfnFree)(void *);
struct IRpcChannelBuffer * pRpcChannelBuffer;
<field name="Reserved"><arr length="5"><ULONG_PTR /></arr></field>
} NDR_USER_MARSHAL_INFO_LEVEL1;
typedef struct _NDR_USER_MARSHAL_INFO {
<field name="InformationLevel"><uint32 /></field>
union {
<field name="Level1"><NDR_USER_MARSHAL_INFO_LEVEL1 /></field>
} ;
} NDR_USER_MARSHAL_INFO;
RPC_STATUS __stdcall NdrGetUserMarshalInfo(uint32 * pFlags, uint32 InformationLevel, NDR_USER_MARSHAL_INFO * pMarshalInfo );
RPC_STATUS __stdcall NdrCreateServerInterfaceFromStub( struct IRpcStubBuffer* pStub, RPC_SERVER_INTERFACE *pServerIf );
CLIENT_CALL_RETURN __cdecl NdrClientCall3( MIDL_STUBLESS_PROXY_INFO *pProxyInfo, uint32 nProcNum, void * pReturnValue, ... );
CLIENT_CALL_RETURN __cdecl Ndr64AsyncClientCall( MIDL_STUBLESS_PROXY_INFO *pProxyInfo, uint32 nProcNum, void * pReturnValue, ... );
CLIENT_CALL_RETURN __cdecl Ndr64DcomAsyncClientCall( MIDL_STUBLESS_PROXY_INFO *pProxyInfo, uint32 nProcNum, void * pReturnValue, ... );
<struct name="IRpcStubBuffer" /> 
void __stdcall Ndr64AsyncServerCall( PRPC_MESSAGE pRpcMsg );

void __stdcall Ndr64AsyncServerCall64( PRPC_MESSAGE pRpcMsg );

void __stdcall Ndr64AsyncServerCallAll( PRPC_MESSAGE pRpcMsg );

long __stdcall Ndr64AsyncStubCall( struct IRpcStubBuffer * pThis, struct IRpcChannelBuffer * pChannel, PRPC_MESSAGE pRpcMsg, uint32 * pdwStubPhase );

long __stdcall Ndr64DcomAsyncStubCall( struct IRpcStubBuffer * pThis, struct IRpcChannelBuffer * pChannel, PRPC_MESSAGE pRpcMsg, uint32 * pdwStubPhase );

long __stdcall NdrStubCall3(void * pThis, void * pChannel, PRPC_MESSAGE pRpcMsg, uint32 * pdwStubPhase );

void __stdcall NdrServerCallAll( PRPC_MESSAGE pRpcMsg );

void __stdcall NdrServerCallNdr64( PRPC_MESSAGE pRpcMsg );

void __stdcall NdrServerCall3( PRPC_MESSAGE pRpcMsg );

void __stdcall NdrPartialIgnoreClientMarshall( PMIDL_STUB_MESSAGE pStubMsg, void * pMemory );

void __stdcall NdrPartialIgnoreServerUnmarshall( PMIDL_STUB_MESSAGE pStubMsg, void ** ppMemory );

void __stdcall NdrPartialIgnoreClientBufferSize( PMIDL_STUB_MESSAGE pStubMsg, void * pMemory );

void __stdcall NdrPartialIgnoreServerInitialize( PMIDL_STUB_MESSAGE pStubMsg, void ** ppMemory, PFORMAT_STRING pFormat );
void __stdcall RpcUserFree( handle_t AsyncHandle, void * pBuffer );
extern RPC_IF_HANDLE __MIDL_itf_wtypes_0000_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_wtypes_0000_0000_v0_0_s_ifspec;
typedef struct tagRemHGLOBAL {
<field name="fNullHGlobal"><long /></field>
<field name="cbData"><uint32 /></field>
<field name="data"><arr length=" 1 "><byte /></arr></field>
} RemHGLOBAL;
typedef struct tagRemHMETAFILEPICT {
<field name="mm"><long /></field>
<field name="xExt"><long /></field>
<field name="yExt"><long /></field>
<field name="cbData"><uint32 /></field>
<field name="data"><arr length=" 1 "><byte /></arr></field>
} RemHMETAFILEPICT;
typedef struct tagRemHENHMETAFILE {
<field name="cbData"><uint32 /></field>
<field name="data"><arr length=" 1 "><byte /></arr></field>
} RemHENHMETAFILE;
typedef struct tagRemHBITMAP {
<field name="cbData"><uint32 /></field>
<field name="data"><arr length=" 1 "><byte /></arr></field>
} RemHBITMAP;
typedef struct tagRemHPALETTE {
<field name="cbData"><uint32 /></field>
<field name="data"><arr length=" 1 "><byte /></arr></field>
} RemHPALETTE;
typedef struct tagRemBRUSH {
<field name="cbData"><uint32 /></field>
<field name="data"><arr length=" 1 "><byte /></arr></field>
} RemHBRUSH;
<typedef name="OLECHAR"><WCHAR /></typedef>
<typedef name="LPOLESTR"><ptr><OLECHAR /></ptr></typedef>
<typedef name="LPCOLESTR"><ptr const="true"><OLECHAR /></ptr></typedef>
<typedef name="UCHAR"><byte /></typedef>
<typedef name="SHORT"><short /></typedef>
<typedef name="USHORT"><uint16 /></typedef>
<typedef name="ULONG"><DWORD /></typedef>
<typedef name="DOUBLE"><double /></typedef>
typedef struct _COAUTHIDENTITY {
<field name="User"><ptr><USHORT /></ptr></field>
<field name="UserLength"><ULONG /></field>
<field name="Domain"><ptr><USHORT /></ptr></field>
<field name="DomainLength"><ULONG /></field>
<field name="Password"><ptr><USHORT /></ptr></field>
<field name="PasswordLength"><ULONG /></field>
<field name="Flags"><ULONG /></field>
} COAUTHIDENTITY;
typedef struct _COAUTHINFO {
<field name="dwAuthnSvc"><DWORD /></field>
<field name="dwAuthzSvc"><DWORD /></field>
<field name="pwszServerPrincName"><LPWSTR /></field>
<field name="dwAuthnLevel"><DWORD /></field>
<field name="dwImpersonationLevel"><DWORD /></field>
<field name="pAuthIdentityData"><ptr><COAUTHIDENTITY /></ptr></field>
<field name="dwCapabilities"><DWORD /></field>
} COAUTHINFO;
<typedef name="SCODE"><LONG /></typedef>
<typedef name="PSCODE"><ptr><SCODE /></ptr></typedef>
typedef enum tagMEMCTX { MEMCTX_TASK = 1, MEMCTX_SHARED = 2, MEMCTX_MACSYSTEM = 3, MEMCTX_UNKNOWN = -1, MEMCTX_SAME = -2 } MEMCTX;
typedef enum tagCLSCTX { CLSCTX_INPROC_SERVER = 0x1, CLSCTX_INPROC_HANDLER = 0x2, CLSCTX_LOCAL_SERVER = 0x4, CLSCTX_INPROC_SERVER16 = 0x8, CLSCTX_REMOTE_SERVER = 0x10, CLSCTX_INPROC_HANDLER16 = 0x20, CLSCTX_RESERVED1 = 0x40, CLSCTX_RESERVED2 = 0x80, CLSCTX_RESERVED3 = 0x100, CLSCTX_RESERVED4 = 0x200, CLSCTX_NO_CODE_DOWNLOAD = 0x400, CLSCTX_RESERVED5 = 0x800, CLSCTX_NO_CUSTOM_MARSHAL = 0x1000, CLSCTX_ENABLE_CODE_DOWNLOAD = 0x2000, CLSCTX_NO_FAILURE_LOG = 0x4000, CLSCTX_DISABLE_AAA = 0x8000, CLSCTX_ENABLE_AAA = 0x10000, CLSCTX_FROM_DEFAULT_CONTEXT = 0x20000, CLSCTX_ACTIVATE_32_BIT_SERVER = 0x40000, CLSCTX_ACTIVATE_64_BIT_SERVER = 0x80000, CLSCTX_ENABLE_CLOAKING = 0x100000, CLSCTX_PS_DLL =(int32 )0x80000000 } CLSCTX;
typedef enum tagMSHLFLAGS { MSHLFLAGS_NORMAL = 0, MSHLFLAGS_TABLESTRONG = 1, MSHLFLAGS_TABLEWEAK = 2, MSHLFLAGS_NOPING = 4, MSHLFLAGS_RESERVED1 = 8, MSHLFLAGS_RESERVED2 = 16, MSHLFLAGS_RESERVED3 = 32, MSHLFLAGS_RESERVED4 = 64 } MSHLFLAGS;
typedef enum tagMSHCTX { MSHCTX_LOCAL = 0, MSHCTX_NOSHAREDMEM = 1, MSHCTX_DIFFERENTMACHINE = 2, MSHCTX_INPROC = 3, MSHCTX_CROSSCTX = 4 } MSHCTX;
typedef enum tagDVASPECT { DVASPECT_CONTENT = 1, DVASPECT_THUMBNAIL = 2, DVASPECT_ICON = 4, DVASPECT_DOCPRINT = 8 } DVASPECT;
typedef enum tagSTGC { STGC_DEFAULT = 0, STGC_OVERWRITE = 1, STGC_ONLYIFCURRENT = 2, STGC_DANGEROUSLYCOMMITMERELYTODISKCACHE = 4, STGC_CONSOLIDATE = 8 } STGC;
typedef enum tagSTGMOVE { STGMOVE_MOVE = 0, STGMOVE_COPY = 1, STGMOVE_SHALLOWCOPY = 2 } STGMOVE;
typedef enum tagSTATFLAG { STATFLAG_DEFAULT = 0, STATFLAG_NONAME = 1, STATFLAG_NOOPEN = 2 } STATFLAG;
<typedef name="HCONTEXT"><ptr><void /></ptr></typedef>
<typedef name="LCID"><DWORD /></typedef>
<typedef name="LANGID"><USHORT /></typedef>
typedef struct _BYTE_BLOB {
<field name="clSize"><uint32 /></field>
<field name="abData"><arr length=" 1 "><byte /></arr></field>
} BYTE_BLOB;
<typedef name="UP_BYTE_BLOB"><ptr><BYTE_BLOB /></ptr></typedef>
typedef struct _WORD_BLOB {
<field name="clSize"><uint32 /></field>
<field name="asData"><arr length=" 1 "><uint16 /></arr></field>
} WORD_BLOB;
<typedef name="UP_WORD_BLOB"><ptr><WORD_BLOB /></ptr></typedef>
typedef struct _DWORD_BLOB {
<field name="clSize"><uint32 /></field>
<field name="alData"><arr length=" 1 "><uint32 /></arr></field>
} DWORD_BLOB;
<typedef name="UP_DWORD_BLOB"><ptr><DWORD_BLOB /></ptr></typedef>
typedef struct _FLAGGED_BYTE_BLOB {
<field name="fFlags"><uint32 /></field>
<field name="clSize"><uint32 /></field>
<field name="abData"><arr length=" 1 "><byte /></arr></field>
} FLAGGED_BYTE_BLOB;
<typedef name="UP_FLAGGED_BYTE_BLOB"><ptr><FLAGGED_BYTE_BLOB /></ptr></typedef>
typedef struct _FLAGGED_WORD_BLOB {
<field name="fFlags"><uint32 /></field>
<field name="clSize"><uint32 /></field>
<field name="asData"><arr length=" 1 "><uint16 /></arr></field>
} FLAGGED_WORD_BLOB;
<typedef name="UP_FLAGGED_WORD_BLOB"><ptr><FLAGGED_WORD_BLOB /></ptr></typedef>
typedef struct _BYTE_SIZEDARR {
<field name="clSize"><uint32 /></field>
<field name="pData"><ptr><byte /></ptr></field>
} BYTE_SIZEDARR;
typedef struct _SHORT_SIZEDARR {
<field name="clSize"><uint32 /></field>
<field name="pData"><ptr><uint16 /></ptr></field>
} WORD_SIZEDARR;
typedef struct _LONG_SIZEDARR {
<field name="clSize"><uint32 /></field>
<field name="pData"><ptr><uint32 /></ptr></field>
} DWORD_SIZEDARR;
typedef struct _HYPER_SIZEDARR {
<field name="clSize"><uint32 /></field>
<field name="pData"><ptr><__int64 /></ptr></field>
} HYPER_SIZEDARR;
typedef struct _userCLIPFORMAT {
<field name="fContext"><long /></field>
union __MIDL_IWinTypes_0001 {
<field name="dwValue"><DWORD /></field>
<field name="pwszName"><ptr><wchar_t /></ptr></field>
} u;
} userCLIPFORMAT;
<typedef name="wireCLIPFORMAT"><ptr><userCLIPFORMAT /></ptr></typedef>
<typedef name="CLIPFORMAT"><WORD /></typedef>
typedef struct _GDI_NONREMOTE {
<field name="fContext"><long /></field>
union __MIDL_IWinTypes_0002 {
<field name="hInproc"><long /></field>
<field name="hRemote"><ptr><DWORD_BLOB /></ptr></field>
} u;
} GDI_NONREMOTE;
typedef struct _userHGLOBAL {
<field name="fContext"><long /></field>
union __MIDL_IWinTypes_0003 {
<field name="hInproc"><long /></field>
<field name="hRemote"><ptr><FLAGGED_BYTE_BLOB /></ptr></field>
<field name="hInproc64"><__int64 /></field>
} u;
} userHGLOBAL;
<typedef name="wireHGLOBAL"><ptr><userHGLOBAL /></ptr></typedef>
typedef struct _userHMETAFILE {
<field name="fContext"><long /></field>
union __MIDL_IWinTypes_0004 {
<field name="hInproc"><long /></field>
<field name="hRemote"><ptr><BYTE_BLOB /></ptr></field>
<field name="hInproc64"><__int64 /></field>
} u;
} userHMETAFILE;
typedef struct _remoteMETAFILEPICT {
<field name="mm"><long /></field>
<field name="xExt"><long /></field>
<field name="yExt"><long /></field>
<field name="hMF"><ptr><userHMETAFILE /></ptr></field>
} remoteMETAFILEPICT;
typedef struct _userHMETAFILEPICT {
<field name="fContext"><long /></field>
union __MIDL_IWinTypes_0005 {
<field name="hInproc"><long /></field>
<field name="hRemote"><ptr><remoteMETAFILEPICT /></ptr></field>
<field name="hInproc64"><__int64 /></field>
} u;
} userHMETAFILEPICT;
typedef struct _userHENHMETAFILE {
<field name="fContext"><long /></field>
union __MIDL_IWinTypes_0006 {
<field name="hInproc"><long /></field>
<field name="hRemote"><ptr><BYTE_BLOB /></ptr></field>
<field name="hInproc64"><__int64 /></field>
} u;
} userHENHMETAFILE;
typedef struct _userBITMAP {
<field name="bmType"><LONG /></field>
<field name="bmWidth"><LONG /></field>
<field name="bmHeight"><LONG /></field>
<field name="bmWidthBytes"><LONG /></field>
<field name="bmPlanes"><WORD /></field>
<field name="bmBitsPixel"><WORD /></field>
<field name="cbSize"><ULONG /></field>
<field name="pBuffer"><arr length=" 1 "><byte /></arr></field>
} userBITMAP;
typedef struct _userHBITMAP {
<field name="fContext"><long /></field>
union __MIDL_IWinTypes_0007 {
<field name="hInproc"><long /></field>
<field name="hRemote"><ptr><userBITMAP /></ptr></field>
<field name="hInproc64"><__int64 /></field>
} u;
} userHBITMAP;
typedef struct _userHPALETTE {
<field name="fContext"><long /></field>
union __MIDL_IWinTypes_0008 {
<field name="hInproc"><long /></field>
<field name="hRemote"><ptr><LOGPALETTE /></ptr></field>
<field name="hInproc64"><__int64 /></field>
} u;
} userHPALETTE;
typedef struct _RemotableHandle {
<field name="fContext"><long /></field>
union __MIDL_IWinTypes_0009 {
<field name="hInproc"><long /></field>
<field name="hRemote"><long /></field>
} u;
} RemotableHandle;
<typedef name="wireHWND"><ptr><RemotableHandle /></ptr></typedef>
<typedef name="wireHMENU"><ptr><RemotableHandle /></ptr></typedef>
<typedef name="wireHACCEL"><ptr><RemotableHandle /></ptr></typedef>
<typedef name="wireHBRUSH"><ptr><RemotableHandle /></ptr></typedef>
<typedef name="wireHFONT"><ptr><RemotableHandle /></ptr></typedef>
<typedef name="wireHDC"><ptr><RemotableHandle /></ptr></typedef>
<typedef name="wireHICON"><ptr><RemotableHandle /></ptr></typedef>
<typedef name="wireHRGN"><ptr><RemotableHandle /></ptr></typedef>
<typedef name="wireHBITMAP"><ptr><userHBITMAP /></ptr></typedef>
<typedef name="wireHPALETTE"><ptr><userHPALETTE /></ptr></typedef>
<typedef name="wireHENHMETAFILE"><ptr><userHENHMETAFILE /></ptr></typedef>
<typedef name="wireHMETAFILE"><ptr><userHMETAFILE /></ptr></typedef>
<typedef name="wireHMETAFILEPICT"><ptr><userHMETAFILEPICT /></ptr></typedef>
<typedef name="HMETAFILEPICT"><ptr><void /></ptr></typedef>
extern RPC_IF_HANDLE IWinTypes_v0_1_c_ifspec;
extern RPC_IF_HANDLE IWinTypes_v0_1_s_ifspec;
<typedef name="DATE"><double /></typedef>
typedef union tagCY {
struct {
<field name="Lo"><uint32 /></field>
<field name="Hi"><long /></field>
} ;
<field name="int64"><LONGLONG /></field>
} CY;
<typedef name="LPCY"><ptr><CY /></ptr></typedef>
typedef struct tagDEC {
<field name="wReserved"><USHORT /></field>
union {
struct {
<field name="scale"><BYTE /></field>
<field name="sign"><BYTE /></field>
} ;
<field name="signscale"><USHORT /></field>
} ;
<field name="Hi32"><ULONG /></field>
union {
struct {
<field name="Lo32"><ULONG /></field>
<field name="Mid32"><ULONG /></field>
} ;
<field name="Lo64"><ULONGLONG /></field>
} ;
} DECIMAL;
<typedef name="LPDECIMAL"><ptr><DECIMAL /></ptr></typedef>
<typedef name="wireBSTR"><ptr><FLAGGED_WORD_BLOB /></ptr></typedef>
<typedef name="BSTR"><ptr><OLECHAR /></ptr></typedef>
<typedef name="LPBSTR"><ptr><BSTR /></ptr></typedef>
<typedef name="VARIANT_BOOL"><short /></typedef>
<typedef name="BOOLEAN"><boolean /></typedef>
typedef struct tagBSTRBLOB {
<field name="cbSize"><ULONG /></field>
<field name="pData"><ptr><BYTE /></ptr></field>
} BSTRBLOB;
typedef struct tagBSTRBLOB *LPBSTRBLOB;
typedef struct tagBLOB {
<field name="cbSize"><ULONG /></field>
<field name="pBlobData"><ptr><BYTE /></ptr></field>
} BLOB;
typedef struct tagBLOB *LPBLOB;
typedef struct tagCLIPDATA {
<field name="cbSize"><ULONG /></field>
<field name="ulClipFmt"><long /></field>
<field name="pClipData"><ptr><BYTE /></ptr></field>
} CLIPDATA;
<typedef name="VARTYPE"><uint16 /></typedef>
enum VARENUM { VT_EMPTY = 0, VT_NULL = 1, VT_I2 = 2, VT_I4 = 3, VT_R4 = 4, VT_R8 = 5, VT_CY = 6, VT_DATE = 7, VT_BSTR = 8, VT_DISPATCH = 9, VT_ERROR = 10, VT_BOOL = 11, VT_VARIANT = 12, VT_UNKNOWN = 13, VT_DECIMAL = 14, VT_I1 = 16, VT_UI1 = 17, VT_UI2 = 18, VT_UI4 = 19, VT_I8 = 20, VT_UI8 = 21, VT_INT = 22, VT_UINT = 23, VT_VOID = 24, VT_HRESULT = 25, VT_PTR = 26, VT_SAFEARRAY = 27, VT_CARRAY = 28, VT_USERDEFINED = 29, VT_LPSTR = 30, VT_LPWSTR = 31, VT_RECORD = 36, VT_INT_PTR = 37, VT_UINT_PTR = 38, VT_FILETIME = 64, VT_BLOB = 65, VT_STREAM = 66, VT_STORAGE = 67, VT_STREAMED_OBJECT = 68, VT_STORED_OBJECT = 69, VT_BLOB_OBJECT = 70, VT_CF = 71, VT_CLSID = 72, VT_VERSIONED_STREAM = 73, VT_BSTR_BLOB = 0xfff, VT_VECTOR = 0x1000, VT_ARRAY = 0x2000, VT_BYREF = 0x4000, VT_RESERVED = 0x8000, VT_ILLEGAL = 0xffff, VT_ILLEGALMASKED = 0xfff, VT_TYPEMASK = 0xfff } ;
<typedef name="PROPID"><ULONG /></typedef>
typedef struct _tagpropertykey {
<field name="fmtid"><GUID /></field>
<field name="pid"><DWORD /></field>
} PROPERTYKEY;
typedef struct tagCSPLATFORM {
<field name="dwPlatformId"><DWORD /></field>
<field name="dwVersionHi"><DWORD /></field>
<field name="dwVersionLo"><DWORD /></field>
<field name="dwProcessorArch"><DWORD /></field>
} CSPLATFORM;
typedef struct tagQUERYCONTEXT {
<field name="dwContext"><DWORD /></field>
<field name="Platform"><CSPLATFORM /></field>
<field name="Locale"><LCID /></field>
<field name="dwVersionHi"><DWORD /></field>
<field name="dwVersionLo"><DWORD /></field>
} QUERYCONTEXT;
typedef enum tagTYSPEC { TYSPEC_CLSID = 0, TYSPEC_FILEEXT =(TYSPEC_CLSID + 1 ), TYSPEC_MIMETYPE =(TYSPEC_FILEEXT + 1 ), TYSPEC_FILENAME =(TYSPEC_MIMETYPE + 1 ), TYSPEC_PROGID =(TYSPEC_FILENAME + 1 ), TYSPEC_PACKAGENAME =(TYSPEC_PROGID + 1 ), TYSPEC_OBJECTID =(TYSPEC_PACKAGENAME + 1 ) } TYSPEC;
typedef struct __MIDL___MIDL_itf_wtypes_0000_0001_0001 {
<field name="tyspec"><DWORD /></field>
union __MIDL___MIDL_itf_wtypes_0000_0001_0005 {
<field name="clsid"><CLSID /></field>
<field name="pFileExt"><LPOLESTR /></field>
<field name="pMimeType"><LPOLESTR /></field>
<field name="pProgId"><LPOLESTR /></field>
<field name="pFileName"><LPOLESTR /></field>
struct {
<field name="pPackageName"><LPOLESTR /></field>
<field name="PolicyId"><GUID /></field>
} ByName;
struct {
<field name="ObjectId"><GUID /></field>
<field name="PolicyId"><GUID /></field>
} ByObjectId;
} tagged_union;
} uCLSSPEC;
extern RPC_IF_HANDLE __MIDL_itf_wtypes_0000_0001_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_wtypes_0000_0001_v0_0_s_ifspec;
extern const GUID GUID_DEVINTERFACE_DISK;
extern const GUID GUID_DEVINTERFACE_CDROM;
extern const GUID GUID_DEVINTERFACE_PARTITION;
extern const GUID GUID_DEVINTERFACE_TAPE;
extern const GUID GUID_DEVINTERFACE_WRITEONCEDISK;
extern const GUID GUID_DEVINTERFACE_VOLUME;
extern const GUID GUID_DEVINTERFACE_MEDIUMCHANGER;
extern const GUID GUID_DEVINTERFACE_FLOPPY;
extern const GUID GUID_DEVINTERFACE_CDCHANGER;
extern const GUID GUID_DEVINTERFACE_STORAGEPORT;
extern const GUID GUID_DEVINTERFACE_HIDDEN_VOLUME;
extern const GUID GUID_DEVINTERFACE_COMPORT;
extern const GUID GUID_DEVINTERFACE_SERENUM_BUS_ENUMERATOR;
typedef struct _STORAGE_HOTPLUG_INFO {
<field name="Size"><DWORD /></field>
<field name="MediaRemovable"><BOOLEAN /></field>
<field name="MediaHotplug"><BOOLEAN /></field>
<field name="DeviceHotplug"><BOOLEAN /></field>
<field name="WriteCacheEnableOverride"><BOOLEAN /></field>
} STORAGE_HOTPLUG_INFO, *PSTORAGE_HOTPLUG_INFO;
typedef struct _STORAGE_DEVICE_NUMBER {
<field name="DeviceType"><DWORD /></field>
<field name="DeviceNumber"><DWORD /></field>
<field name="PartitionNumber"><DWORD /></field>
} STORAGE_DEVICE_NUMBER, *PSTORAGE_DEVICE_NUMBER;
typedef struct _STORAGE_BUS_RESET_REQUEST {
<field name="PathId"><BYTE /></field>
} STORAGE_BUS_RESET_REQUEST, *PSTORAGE_BUS_RESET_REQUEST;
typedef struct STORAGE_BREAK_RESERVATION_REQUEST {
<field name="Length"><DWORD /></field>
<field name="_unused"><BYTE /></field>
<field name="PathId"><BYTE /></field>
<field name="TargetId"><BYTE /></field>
<field name="Lun"><BYTE /></field>
} STORAGE_BREAK_RESERVATION_REQUEST, *PSTORAGE_BREAK_RESERVATION_REQUEST;
typedef struct _PREVENT_MEDIA_REMOVAL {
<field name="PreventMediaRemoval"><BOOLEAN /></field>
} PREVENT_MEDIA_REMOVAL, *PPREVENT_MEDIA_REMOVAL;
typedef struct _CLASS_MEDIA_CHANGE_CONTEXT {
<field name="MediaChangeCount"><DWORD /></field>
<field name="NewState"><DWORD /></field>
} CLASS_MEDIA_CHANGE_CONTEXT, *PCLASS_MEDIA_CHANGE_CONTEXT;
typedef struct _TAPE_STATISTICS {
<field name="Version"><DWORD /></field>
<field name="Flags"><DWORD /></field>
<field name="RecoveredWrites"><LARGE_INTEGER /></field>
<field name="UnrecoveredWrites"><LARGE_INTEGER /></field>
<field name="RecoveredReads"><LARGE_INTEGER /></field>
<field name="UnrecoveredReads"><LARGE_INTEGER /></field>
<field name="CompressionRatioReads"><BYTE /></field>
<field name="CompressionRatioWrites"><BYTE /></field>
} TAPE_STATISTICS, *PTAPE_STATISTICS;
typedef struct _TAPE_GET_STATISTICS {
<field name="Operation"><DWORD /></field>
} TAPE_GET_STATISTICS, *PTAPE_GET_STATISTICS;
typedef enum _STORAGE_MEDIA_TYPE {
DDS_4mm = 0x20, MiniQic, Travan, QIC, MP_8mm, AME_8mm, AIT1_8mm, DLT, NCTP, IBM_3480, IBM_3490E, IBM_Magstar_3590, IBM_Magstar_MP, STK_DATA_D3, SONY_DTF, DV_6mm, DMI, SONY_D2, CLEANER_CARTRIDGE, CD_ROM, CD_R, CD_RW, DVD_ROM, DVD_R, DVD_RW, MO_3_RW, MO_5_WO, MO_5_RW, MO_5_LIMDOW, PC_5_WO, PC_5_RW, PD_5_RW, ABL_5_WO, PINNACLE_APEX_5_RW, SONY_12_WO, PHILIPS_12_WO, HITACHI_12_WO, CYGNET_12_WO, KODAK_14_WO, MO_NFR_525, NIKON_12_RW, IOMEGA_ZIP, IOMEGA_JAZ, SYQUEST_EZ135, SYQUEST_EZFLYER, SYQUEST_SYJET, AVATAR_F2, MP2_8mm, DST_S, DST_M, DST_L, VXATape_1, VXATape_2, STK_9840, LTO_Ultrium, LTO_Accelis, DVD_RAM, AIT_8mm, ADR_1, ADR_2, STK_9940, SAIT, VXATape }STORAGE_MEDIA_TYPE, *PSTORAGE_MEDIA_TYPE;
typedef enum _STORAGE_BUS_TYPE {
BusTypeUnknown = 0x00, BusTypeScsi, BusTypeAtapi, BusTypeAta, BusType1394, BusTypeSsa, BusTypeFibre, BusTypeUsb, BusTypeRAID, BusTypeiScsi, BusTypeSas, BusTypeSata, BusTypeSd, BusTypeMmc, BusTypeVirtual, BusTypeFileBackedVirtual, BusTypeMax, BusTypeMaxReserved = 0x7F } STORAGE_BUS_TYPE, *PSTORAGE_BUS_TYPE;
typedef struct _DEVICE_MEDIA_INFO {
union {
struct {
<field name="Cylinders"><LARGE_INTEGER /></field>
<field name="MediaType"><STORAGE_MEDIA_TYPE /></field>
<field name="TracksPerCylinder"><DWORD /></field>
<field name="SectorsPerTrack"><DWORD /></field>
<field name="BytesPerSector"><DWORD /></field>
<field name="NumberMediaSides"><DWORD /></field>
<field name="MediaCharacteristics"><DWORD /></field>
} DiskInfo;
struct {
<field name="Cylinders"><LARGE_INTEGER /></field>
<field name="MediaType"><STORAGE_MEDIA_TYPE /></field>
<field name="TracksPerCylinder"><DWORD /></field>
<field name="SectorsPerTrack"><DWORD /></field>
<field name="BytesPerSector"><DWORD /></field>
<field name="NumberMediaSides"><DWORD /></field>
<field name="MediaCharacteristics"><DWORD /></field>
} RemovableDiskInfo;
struct {
<field name="MediaType"><STORAGE_MEDIA_TYPE /></field>
<field name="MediaCharacteristics"><DWORD /></field>
<field name="CurrentBlockSize"><DWORD /></field>
<field name="BusType"><STORAGE_BUS_TYPE /></field>
union {
struct {
<field name="MediumType"><BYTE /></field>
<field name="DensityCode"><BYTE /></field>
} ScsiInformation;
} BusSpecificData;
} TapeInfo;
} DeviceSpecific;
} DEVICE_MEDIA_INFO, *PDEVICE_MEDIA_INFO;
typedef struct _GET_MEDIA_TYPES {
<field name="DeviceType"><DWORD /></field>
<field name="MediaInfoCount"><DWORD /></field>
<field name="MediaInfo"><arr length="1"><DEVICE_MEDIA_INFO /></arr></field>
} GET_MEDIA_TYPES, *PGET_MEDIA_TYPES;
typedef struct _STORAGE_PREDICT_FAILURE {
<field name="PredictFailure"><DWORD /></field>
<field name="VendorSpecific"><arr length="512"><BYTE /></arr></field>
} STORAGE_PREDICT_FAILURE, *PSTORAGE_PREDICT_FAILURE;
typedef enum _STORAGE_QUERY_TYPE {
PropertyStandardQuery = 0, PropertyExistsQuery, PropertyMaskQuery, PropertyQueryMaxDefined } STORAGE_QUERY_TYPE, *PSTORAGE_QUERY_TYPE;
typedef enum _STORAGE_PROPERTY_ID {
StorageDeviceProperty = 0, StorageAdapterProperty, StorageDeviceIdProperty, StorageDeviceUniqueIdProperty, StorageDeviceWriteCacheProperty, StorageMiniportProperty, StorageAccessAlignmentProperty, StorageDeviceSeekPenaltyProperty, StorageDeviceTrimProperty, StorageDeviceWriteAggregationProperty } STORAGE_PROPERTY_ID, *PSTORAGE_PROPERTY_ID;
typedef struct _STORAGE_PROPERTY_QUERY {
<field name="PropertyId"><STORAGE_PROPERTY_ID /></field>
<field name="QueryType"><STORAGE_QUERY_TYPE /></field>
<field name="AdditionalParameters"><arr length="1"><BYTE /></arr></field>
} STORAGE_PROPERTY_QUERY, *PSTORAGE_PROPERTY_QUERY;
typedef struct _STORAGE_DESCRIPTOR_HEADER {
<field name="Version"><DWORD /></field>
<field name="Size"><DWORD /></field>
} STORAGE_DESCRIPTOR_HEADER, *PSTORAGE_DESCRIPTOR_HEADER;
typedef struct _STORAGE_DEVICE_DESCRIPTOR {
<field name="Version"><DWORD /></field>
<field name="Size"><DWORD /></field>
<field name="DeviceType"><BYTE /></field>
<field name="DeviceTypeModifier"><BYTE /></field>
<field name="RemovableMedia"><BOOLEAN /></field>
<field name="CommandQueueing"><BOOLEAN /></field>
<field name="VendorIdOffset"><DWORD /></field>
<field name="ProductIdOffset"><DWORD /></field>
<field name="ProductRevisionOffset"><DWORD /></field>
<field name="SerialNumberOffset"><DWORD /></field>
<field name="BusType"><STORAGE_BUS_TYPE /></field>
<field name="RawPropertiesLength"><DWORD /></field>
<field name="RawDeviceProperties"><arr length="1"><BYTE /></arr></field>
} STORAGE_DEVICE_DESCRIPTOR, *PSTORAGE_DEVICE_DESCRIPTOR;
typedef struct _STORAGE_ADAPTER_DESCRIPTOR {
<field name="Version"><DWORD /></field>
<field name="Size"><DWORD /></field>
<field name="MaximumTransferLength"><DWORD /></field>
<field name="MaximumPhysicalPages"><DWORD /></field>
<field name="AlignmentMask"><DWORD /></field>
<field name="AdapterUsesPio"><BOOLEAN /></field>
<field name="AdapterScansDown"><BOOLEAN /></field>
<field name="CommandQueueing"><BOOLEAN /></field>
<field name="AcceleratedTransfer"><BOOLEAN /></field>
<field name="BusType"><BYTE /></field>
<field name="BusMajorVersion"><WORD /></field>
<field name="BusMinorVersion"><WORD /></field>
} STORAGE_ADAPTER_DESCRIPTOR, *PSTORAGE_ADAPTER_DESCRIPTOR;
typedef struct _STORAGE_ACCESS_ALIGNMENT_DESCRIPTOR {
<field name="Version"><DWORD /></field>
<field name="Size"><DWORD /></field>
<field name="BytesPerCacheLine"><DWORD /></field>
<field name="BytesOffsetForCacheAlignment"><DWORD /></field>
<field name="BytesPerLogicalSector"><DWORD /></field>
<field name="BytesPerPhysicalSector"><DWORD /></field>
<field name="BytesOffsetForSectorAlignment"><DWORD /></field>
} STORAGE_ACCESS_ALIGNMENT_DESCRIPTOR, *PSTORAGE_ACCESS_ALIGNMENT_DESCRIPTOR;
typedef enum _STORAGE_PORT_CODE_SET {
StoragePortCodeSetReserved = 0, StoragePortCodeSetStorport = 1, StoragePortCodeSetSCSIport = 2 } STORAGE_PORT_CODE_SET, *PSTORAGE_PORT_CODE_SET;
typedef struct _STORAGE_MINIPORT_DESCRIPTOR {
<field name="Version"><DWORD /></field>
<field name="Size"><DWORD /></field>
<field name="Portdriver"><STORAGE_PORT_CODE_SET /></field>
<field name="LUNResetSupported"><BOOLEAN /></field>
<field name="TargetResetSupported"><BOOLEAN /></field>
} STORAGE_MINIPORT_DESCRIPTOR, *PSTORAGE_MINIPORT_DESCRIPTOR;
typedef enum _STORAGE_IDENTIFIER_CODE_SET {
StorageIdCodeSetReserved = 0, StorageIdCodeSetBinary = 1, StorageIdCodeSetAscii = 2, StorageIdCodeSetUtf8 = 3 } STORAGE_IDENTIFIER_CODE_SET, *PSTORAGE_IDENTIFIER_CODE_SET;
typedef enum _STORAGE_IDENTIFIER_TYPE {
StorageIdTypeVendorSpecific = 0, StorageIdTypeVendorId = 1, StorageIdTypeEUI64 = 2, StorageIdTypeFCPHName = 3, StorageIdTypePortRelative = 4, StorageIdTypeTargetPortGroup = 5, StorageIdTypeLogicalUnitGroup = 6, StorageIdTypeMD5LogicalUnitIdentifier = 7, StorageIdTypeScsiNameString = 8 } STORAGE_IDENTIFIER_TYPE, *PSTORAGE_IDENTIFIER_TYPE;
typedef enum _STORAGE_ID_NAA_FORMAT {
StorageIdNAAFormatIEEEExtended = 2, StorageIdNAAFormatIEEERegistered = 3, StorageIdNAAFormatIEEEERegisteredExtended = 5 } STORAGE_ID_NAA_FORMAT, *PSTORAGE_ID_NAA_FORMAT;
typedef enum _STORAGE_ASSOCIATION_TYPE {
StorageIdAssocDevice = 0, StorageIdAssocPort = 1, StorageIdAssocTarget = 2 } STORAGE_ASSOCIATION_TYPE, *PSTORAGE_ASSOCIATION_TYPE;
typedef struct _STORAGE_IDENTIFIER {
<field name="CodeSet"><STORAGE_IDENTIFIER_CODE_SET /></field>
<field name="Type"><STORAGE_IDENTIFIER_TYPE /></field>
<field name="IdentifierSize"><WORD /></field>
<field name="NextOffset"><WORD /></field>
<field name="Association"><STORAGE_ASSOCIATION_TYPE /></field>
<field name="Identifier"><arr length="1"><BYTE /></arr></field>
} STORAGE_IDENTIFIER, *PSTORAGE_IDENTIFIER;
typedef struct _STORAGE_DEVICE_ID_DESCRIPTOR {
<field name="Version"><DWORD /></field>
<field name="Size"><DWORD /></field>
<field name="NumberOfIdentifiers"><DWORD /></field>
<field name="Identifiers"><arr length="1"><BYTE /></arr></field>
} STORAGE_DEVICE_ID_DESCRIPTOR, *PSTORAGE_DEVICE_ID_DESCRIPTOR;
typedef struct _DEVICE_SEEK_PENALTY_DESCRIPTOR {
<field name="Version"><DWORD /></field>
<field name="Size"><DWORD /></field>
<field name="IncursSeekPenalty"><BOOLEAN /></field>
} DEVICE_SEEK_PENALTY_DESCRIPTOR, *PDEVICE_SEEK_PENALTY_DESCRIPTOR;
typedef struct _DEVICE_WRITE_AGGREGATION_DESCRIPTOR {
<field name="Version"><DWORD /></field>
<field name="Size"><DWORD /></field>
<field name="BenefitsFromWriteAggregation"><BOOLEAN /></field>
} DEVICE_WRITE_AGGREGATION_DESCRIPTOR, *PDEVICE_WRITE_AGGREGATION_DESCRIPTOR;
typedef struct _DEVICE_TRIM_DESCRIPTOR {
<field name="Version"><DWORD /></field>
<field name="Size"><DWORD /></field>
<field name="TrimEnabled"><BOOLEAN /></field>
} DEVICE_TRIM_DESCRIPTOR, *PDEVICE_TRIM_DESCRIPTOR;
<typedef name="DEVICE_DATA_MANAGEMENT_SET_ACTION"><DWORD /></typedef>
typedef struct _DEVICE_DATA_SET_RANGE {
<field name="StartingOffset"><LONGLONG /></field>
<field name="LengthInBytes"><DWORDLONG /></field>
} DEVICE_DATA_SET_RANGE, *PDEVICE_DATA_SET_RANGE;
typedef struct _DEVICE_MANAGE_DATA_SET_ATTRIBUTES {
<field name="Size"><DWORD /></field>
<field name="Action"><DEVICE_DATA_MANAGEMENT_SET_ACTION /></field>
<field name="Flags"><DWORD /></field>
<field name="ParameterBlockOffset"><DWORD /></field>
<field name="ParameterBlockLength"><DWORD /></field>
<field name="DataSetRangesOffset"><DWORD /></field>
<field name="DataSetRangesLength"><DWORD /></field>
} DEVICE_MANAGE_DATA_SET_ATTRIBUTES, *PDEVICE_MANAGE_DATA_SET_ATTRIBUTES;
typedef struct _DEVICE_DSM_NOTIFICATION_PARAMETERS {
<field name="Size"><DWORD /></field>
<field name="Flags"><DWORD /></field>
<field name="NumFileTypeIDs"><DWORD /></field>
<field name="FileTypeID"><arr length="1"><GUID /></arr></field>
} DEVICE_DSM_NOTIFICATION_PARAMETERS, *PDEVICE_DSM_NOTIFICATION_PARAMETERS;
typedef struct _STORAGE_GET_BC_PROPERTIES_OUTPUT {
<field name="MaximumRequestsPerPeriod"><DWORD /></field>
<field name="MinimumPeriod"><DWORD /></field>
<field name="MaximumRequestSize"><DWORDLONG /></field>
<field name="EstimatedTimePerRequest"><DWORD /></field>
<field name="NumOutStandingRequests"><DWORD /></field>
<field name="RequestSize"><DWORDLONG /></field>
} STORAGE_GET_BC_PROPERTIES_OUTPUT, *PSTORAGE_GET_BC_PROPERTIES_OUTPUT;
typedef struct _STORAGE_ALLOCATE_BC_STREAM_INPUT {
<field name="Version"><DWORD /></field>
<field name="RequestsPerPeriod"><DWORD /></field>
<field name="Period"><DWORD /></field>
<field name="RetryFailures"><BOOLEAN /></field>
<field name="Discardable"><BOOLEAN /></field>
<field name="Reserved1"><arr length="2"><BOOLEAN /></arr></field>
<field name="AccessType"><DWORD /></field>
<field name="AccessMode"><DWORD /></field>
} STORAGE_ALLOCATE_BC_STREAM_INPUT, *PSTORAGE_ALLOCATE_BC_STREAM_INPUT;
typedef struct _STORAGE_ALLOCATE_BC_STREAM_OUTPUT {
<field name="RequestSize"><DWORDLONG /></field>
<field name="NumOutStandingRequests"><DWORD /></field>
} STORAGE_ALLOCATE_BC_STREAM_OUTPUT, *PSTORAGE_ALLOCATE_BC_STREAM_OUTPUT;
typedef struct _STORAGE_PRIORITY_HINT_SUPPORT {
<field name="SupportFlags"><DWORD /></field>
} STORAGE_PRIORITY_HINT_SUPPORT, *PSTORAGE_PRIORITY_HINT_SUPPORT;
typedef struct _STORAGE_MEDIA_SERIAL_NUMBER_DATA {
<field name="Reserved"><WORD /></field>
<field name="SerialNumberLength"><WORD /></field>
<field name="SerialNumber"><arr length="0"><BYTE /></arr></field>
} STORAGE_MEDIA_SERIAL_NUMBER_DATA, *PSTORAGE_MEDIA_SERIAL_NUMBER_DATA;
typedef struct _STORAGE_READ_CAPACITY {
<field name="Version"><DWORD /></field>
<field name="Size"><DWORD /></field>
<field name="BlockLength"><DWORD /></field>
<field name="NumberOfBlocks"><LARGE_INTEGER /></field>
<field name="DiskLength"><LARGE_INTEGER /></field>
} STORAGE_READ_CAPACITY, *PSTORAGE_READ_CAPACITY;
typedef enum _WRITE_CACHE_TYPE {
WriteCacheTypeUnknown, WriteCacheTypeNone, WriteCacheTypeWriteBack, WriteCacheTypeWriteThrough } WRITE_CACHE_TYPE;
typedef enum _WRITE_CACHE_ENABLE {
WriteCacheEnableUnknown, WriteCacheDisabled, WriteCacheEnabled } WRITE_CACHE_ENABLE;
typedef enum _WRITE_CACHE_CHANGE {
WriteCacheChangeUnknown, WriteCacheNotChangeable, WriteCacheChangeable } WRITE_CACHE_CHANGE;
typedef enum _WRITE_THROUGH {
WriteThroughUnknown, WriteThroughNotSupported, WriteThroughSupported } WRITE_THROUGH;
typedef struct _STORAGE_WRITE_CACHE_PROPERTY {
<field name="Version"><DWORD /></field>
<field name="Size"><DWORD /></field>
<field name="WriteCacheType"><WRITE_CACHE_TYPE /></field>
<field name="WriteCacheEnabled"><WRITE_CACHE_ENABLE /></field>
<field name="WriteCacheChangeable"><WRITE_CACHE_CHANGE /></field>
<field name="WriteThroughSupported"><WRITE_THROUGH /></field>
<field name="FlushCacheSupported"><BOOLEAN /></field>
<field name="UserDefinedPowerProtection"><BOOLEAN /></field>
<field name="NVCacheEnabled"><BOOLEAN /></field>
} STORAGE_WRITE_CACHE_PROPERTY, *PSTORAGE_WRITE_CACHE_PROPERTY;
typedef struct _PERSISTENT_RESERVE_COMMAND {
<field name="Version"><DWORD /></field>
<field name="Size"><DWORD /></field>
union {
struct {
<bitfield name="ServiceAction" bits="5"><BYTE /></bitfield>
<bitfield name="Reserved1" bits="3"><BYTE /></bitfield>
<field name="AllocationLength"><WORD /></field>
} PR_IN;
struct {
<bitfield name="ServiceAction" bits="5"><BYTE /></bitfield>
<bitfield name="Reserved1" bits="3"><BYTE /></bitfield>
<bitfield name="Type" bits="4"><BYTE /></bitfield>
<bitfield name="Scope" bits="4"><BYTE /></bitfield>
<field name="ParameterList"><arr length="0"><BYTE /></arr></field>
} PR_OUT;
};
} PERSISTENT_RESERVE_COMMAND, *PPERSISTENT_RESERVE_COMMAND;
typedef enum _MEDIA_TYPE {
Unknown, F5_1Pt2_512, F3_1Pt44_512, F3_2Pt88_512, F3_20Pt8_512, F3_720_512, F5_360_512, F5_320_512, F5_320_1024, F5_180_512, F5_160_512, RemovableMedia, FixedMedia, F3_120M_512, F3_640_512, F5_640_512, F5_720_512, F3_1Pt2_512, F3_1Pt23_1024, F5_1Pt23_1024, F3_128Mb_512, F3_230Mb_512, F8_256_128, F3_200Mb_512, F3_240M_512, F3_32M_512 } MEDIA_TYPE, *PMEDIA_TYPE;
typedef struct _FORMAT_PARAMETERS {
<field name="MediaType"><MEDIA_TYPE /></field>
<field name="StartCylinderNumber"><DWORD /></field>
<field name="EndCylinderNumber"><DWORD /></field>
<field name="StartHeadNumber"><DWORD /></field>
<field name="EndHeadNumber"><DWORD /></field>
} FORMAT_PARAMETERS, *PFORMAT_PARAMETERS;
<typedef name="BAD_TRACK_NUMBER"><WORD /></typedef>
<typedef name="PBAD_TRACK_NUMBER"><ptr><WORD /></ptr></typedef>
typedef struct _FORMAT_EX_PARAMETERS {
<field name="MediaType"><MEDIA_TYPE /></field>
<field name="StartCylinderNumber"><DWORD /></field>
<field name="EndCylinderNumber"><DWORD /></field>
<field name="StartHeadNumber"><DWORD /></field>
<field name="EndHeadNumber"><DWORD /></field>
<field name="FormatGapLength"><WORD /></field>
<field name="SectorsPerTrack"><WORD /></field>
<field name="SectorNumber"><arr length="1"><WORD /></arr></field>
} FORMAT_EX_PARAMETERS, *PFORMAT_EX_PARAMETERS;
typedef struct _DISK_GEOMETRY {
<field name="Cylinders"><LARGE_INTEGER /></field>
<field name="MediaType"><MEDIA_TYPE /></field>
<field name="TracksPerCylinder"><DWORD /></field>
<field name="SectorsPerTrack"><DWORD /></field>
<field name="BytesPerSector"><DWORD /></field>
} DISK_GEOMETRY, *PDISK_GEOMETRY;
typedef struct _PARTITION_INFORMATION {
<field name="StartingOffset"><LARGE_INTEGER /></field>
<field name="PartitionLength"><LARGE_INTEGER /></field>
<field name="HiddenSectors"><DWORD /></field>
<field name="PartitionNumber"><DWORD /></field>
<field name="PartitionType"><BYTE /></field>
<field name="BootIndicator"><BOOLEAN /></field>
<field name="RecognizedPartition"><BOOLEAN /></field>
<field name="RewritePartition"><BOOLEAN /></field>
} PARTITION_INFORMATION, *PPARTITION_INFORMATION;
typedef struct _SET_PARTITION_INFORMATION {
<field name="PartitionType"><BYTE /></field>
} SET_PARTITION_INFORMATION, *PSET_PARTITION_INFORMATION;
typedef struct _DRIVE_LAYOUT_INFORMATION {
<field name="PartitionCount"><DWORD /></field>
<field name="Signature"><DWORD /></field>
<field name="PartitionEntry"><arr length="1"><PARTITION_INFORMATION /></arr></field>
} DRIVE_LAYOUT_INFORMATION, *PDRIVE_LAYOUT_INFORMATION;
typedef struct _VERIFY_INFORMATION {
<field name="StartingOffset"><LARGE_INTEGER /></field>
<field name="Length"><DWORD /></field>
} VERIFY_INFORMATION, *PVERIFY_INFORMATION;
typedef struct _REASSIGN_BLOCKS {
<field name="Reserved"><WORD /></field>
<field name="Count"><WORD /></field>
<field name="BlockNumber"><arr length="1"><DWORD /></arr></field>
} REASSIGN_BLOCKS, *PREASSIGN_BLOCKS;
typedef struct _REASSIGN_BLOCKS_EX {
<field name="Reserved"><WORD /></field>
<field name="Count"><WORD /></field>
<field name="BlockNumber"><arr length="1"><LARGE_INTEGER /></arr></field>
} REASSIGN_BLOCKS_EX, *PREASSIGN_BLOCKS_EX;
typedef enum _PARTITION_STYLE {
PARTITION_STYLE_MBR, PARTITION_STYLE_GPT, PARTITION_STYLE_RAW } PARTITION_STYLE;
typedef struct _PARTITION_INFORMATION_GPT {
<field name="PartitionType"><GUID /></field>
<field name="PartitionId"><GUID /></field>
<field name="Attributes"><DWORD64 /></field>
WCHAR Name [36];
} PARTITION_INFORMATION_GPT, *PPARTITION_INFORMATION_GPT;
typedef struct _PARTITION_INFORMATION_MBR {
<field name="PartitionType"><BYTE /></field>
<field name="BootIndicator"><BOOLEAN /></field>
<field name="RecognizedPartition"><BOOLEAN /></field>
<field name="HiddenSectors"><DWORD /></field>
} PARTITION_INFORMATION_MBR, *PPARTITION_INFORMATION_MBR;
<typedef name="SET_PARTITION_INFORMATION_MBR"><SET_PARTITION_INFORMATION /></typedef>
<typedef name="SET_PARTITION_INFORMATION_GPT"><PARTITION_INFORMATION_GPT /></typedef>
typedef struct _SET_PARTITION_INFORMATION_EX {
<field name="PartitionStyle"><PARTITION_STYLE /></field>
union {
<field name="Mbr"><SET_PARTITION_INFORMATION_MBR /></field>
<field name="Gpt"><SET_PARTITION_INFORMATION_GPT /></field>
} ;
} SET_PARTITION_INFORMATION_EX, *PSET_PARTITION_INFORMATION_EX;
typedef struct _CREATE_DISK_GPT {
<field name="DiskId"><GUID /></field>
<field name="MaxPartitionCount"><DWORD /></field>
} CREATE_DISK_GPT, *PCREATE_DISK_GPT;
typedef struct _CREATE_DISK_MBR {
<field name="Signature"><DWORD /></field>
} CREATE_DISK_MBR, *PCREATE_DISK_MBR;
typedef struct _CREATE_DISK {
<field name="PartitionStyle"><PARTITION_STYLE /></field>
union {
<field name="Mbr"><CREATE_DISK_MBR /></field>
<field name="Gpt"><CREATE_DISK_GPT /></field>
} ;
} CREATE_DISK, *PCREATE_DISK;
typedef struct _GET_LENGTH_INFORMATION {
<field name="Length"><LARGE_INTEGER /></field>
} GET_LENGTH_INFORMATION, *PGET_LENGTH_INFORMATION;
typedef struct _PARTITION_INFORMATION_EX {
<field name="PartitionStyle"><PARTITION_STYLE /></field>
<field name="StartingOffset"><LARGE_INTEGER /></field>
<field name="PartitionLength"><LARGE_INTEGER /></field>
<field name="PartitionNumber"><DWORD /></field>
<field name="RewritePartition"><BOOLEAN /></field>
union {
<field name="Mbr"><PARTITION_INFORMATION_MBR /></field>
<field name="Gpt"><PARTITION_INFORMATION_GPT /></field>
} ;
} PARTITION_INFORMATION_EX, *PPARTITION_INFORMATION_EX;
typedef struct _DRIVE_LAYOUT_INFORMATION_GPT {
<field name="DiskId"><GUID /></field>
<field name="StartingUsableOffset"><LARGE_INTEGER /></field>
<field name="UsableLength"><LARGE_INTEGER /></field>
<field name="MaxPartitionCount"><DWORD /></field>
} DRIVE_LAYOUT_INFORMATION_GPT, *PDRIVE_LAYOUT_INFORMATION_GPT;
typedef struct _DRIVE_LAYOUT_INFORMATION_MBR {
<field name="Signature"><DWORD /></field>
} DRIVE_LAYOUT_INFORMATION_MBR, *PDRIVE_LAYOUT_INFORMATION_MBR;
typedef struct _DRIVE_LAYOUT_INFORMATION_EX {
<field name="PartitionStyle"><DWORD /></field>
<field name="PartitionCount"><DWORD /></field>
union {
<field name="Mbr"><DRIVE_LAYOUT_INFORMATION_MBR /></field>
<field name="Gpt"><DRIVE_LAYOUT_INFORMATION_GPT /></field>
} ;
<field name="PartitionEntry"><arr length="1"><PARTITION_INFORMATION_EX /></arr></field>
} DRIVE_LAYOUT_INFORMATION_EX, *PDRIVE_LAYOUT_INFORMATION_EX;
typedef enum _DETECTION_TYPE {
DetectNone, DetectInt13, DetectExInt13 } DETECTION_TYPE;
typedef struct _DISK_INT13_INFO {
<field name="DriveSelect"><WORD /></field>
<field name="MaxCylinders"><DWORD /></field>
<field name="SectorsPerTrack"><WORD /></field>
<field name="MaxHeads"><WORD /></field>
<field name="NumberDrives"><WORD /></field>
} DISK_INT13_INFO, *PDISK_INT13_INFO;
typedef struct _DISK_EX_INT13_INFO {
<field name="ExBufferSize"><WORD /></field>
<field name="ExFlags"><WORD /></field>
<field name="ExCylinders"><DWORD /></field>
<field name="ExHeads"><DWORD /></field>
<field name="ExSectorsPerTrack"><DWORD /></field>
<field name="ExSectorsPerDrive"><DWORD64 /></field>
<field name="ExSectorSize"><WORD /></field>
<field name="ExReserved"><WORD /></field>
} DISK_EX_INT13_INFO, *PDISK_EX_INT13_INFO;
typedef struct _DISK_DETECTION_INFO {
<field name="SizeOfDetectInfo"><DWORD /></field>
<field name="DetectionType"><DETECTION_TYPE /></field>
union {
struct {
<field name="Int13"><DISK_INT13_INFO /></field>
<field name="ExInt13"><DISK_EX_INT13_INFO /></field>
} ;
} ;
} DISK_DETECTION_INFO, *PDISK_DETECTION_INFO;
typedef struct _DISK_PARTITION_INFO {
<field name="SizeOfPartitionInfo"><DWORD /></field>
<field name="PartitionStyle"><PARTITION_STYLE /></field>
union {
struct { DWORD Signature;
<field name="CheckSum"><DWORD /></field>
} Mbr;
struct { GUID DiskId;
} Gpt;
} ;
} DISK_PARTITION_INFO, *PDISK_PARTITION_INFO;
typedef struct _DISK_GEOMETRY_EX {
<field name="Geometry"><DISK_GEOMETRY /></field>
<field name="DiskSize"><LARGE_INTEGER /></field>
<field name="Data"><arr length="1"><BYTE /></arr></field>
} DISK_GEOMETRY_EX, *PDISK_GEOMETRY_EX;
typedef struct _DISK_CONTROLLER_NUMBER {
<field name="ControllerNumber"><DWORD /></field>
<field name="DiskNumber"><DWORD /></field>
} DISK_CONTROLLER_NUMBER, *PDISK_CONTROLLER_NUMBER;
typedef enum {
EqualPriority, KeepPrefetchedData, KeepReadData } DISK_CACHE_RETENTION_PRIORITY;
typedef struct _DISK_CACHE_INFORMATION {
<field name="ParametersSavable"><BOOLEAN /></field>
<field name="ReadCacheEnabled"><BOOLEAN /></field>
<field name="WriteCacheEnabled"><BOOLEAN /></field>
<field name="ReadRetentionPriority"><DISK_CACHE_RETENTION_PRIORITY /></field>
<field name="WriteRetentionPriority"><DISK_CACHE_RETENTION_PRIORITY /></field>
<field name="DisablePrefetchTransferLength"><WORD /></field>
<field name="PrefetchScalar"><BOOLEAN /></field>
union {
struct {
<field name="Minimum"><WORD /></field>
<field name="Maximum"><WORD /></field>
<field name="MaximumBlocks"><WORD /></field>
} ScalarPrefetch;
struct {
<field name="Minimum"><WORD /></field>
<field name="Maximum"><WORD /></field>
} BlockPrefetch;
} ;
} DISK_CACHE_INFORMATION, *PDISK_CACHE_INFORMATION;
typedef struct _DISK_GROW_PARTITION {
<field name="PartitionNumber"><DWORD /></field>
<field name="BytesToGrow"><LARGE_INTEGER /></field>
} DISK_GROW_PARTITION, *PDISK_GROW_PARTITION;
typedef struct _HISTOGRAM_BUCKET {
<field name="Reads"><DWORD /></field>
<field name="Writes"><DWORD /></field>
} HISTOGRAM_BUCKET, *PHISTOGRAM_BUCKET;
typedef struct _DISK_HISTOGRAM {
<field name="DiskSize"><LARGE_INTEGER /></field>
<field name="Start"><LARGE_INTEGER /></field>
<field name="End"><LARGE_INTEGER /></field>
<field name="Average"><LARGE_INTEGER /></field>
<field name="AverageRead"><LARGE_INTEGER /></field>
<field name="AverageWrite"><LARGE_INTEGER /></field>
<field name="Granularity"><DWORD /></field>
<field name="Size"><DWORD /></field>
<field name="ReadCount"><DWORD /></field>
<field name="WriteCount"><DWORD /></field>
<field name="Histogram"><PHISTOGRAM_BUCKET /></field>
} DISK_HISTOGRAM, *PDISK_HISTOGRAM;
typedef struct _DISK_PERFORMANCE {
<field name="BytesRead"><LARGE_INTEGER /></field>
<field name="BytesWritten"><LARGE_INTEGER /></field>
<field name="ReadTime"><LARGE_INTEGER /></field>
<field name="WriteTime"><LARGE_INTEGER /></field>
<field name="IdleTime"><LARGE_INTEGER /></field>
<field name="ReadCount"><DWORD /></field>
<field name="WriteCount"><DWORD /></field>
<field name="QueueDepth"><DWORD /></field>
<field name="SplitCount"><DWORD /></field>
<field name="QueryTime"><LARGE_INTEGER /></field>
<field name="StorageDeviceNumber"><DWORD /></field>
<field name="StorageManagerName"><arr length="8"><WCHAR /></arr></field>
} DISK_PERFORMANCE, *PDISK_PERFORMANCE;
typedef struct _DISK_RECORD {
<field name="ByteOffset"><LARGE_INTEGER /></field>
<field name="StartTime"><LARGE_INTEGER /></field>
<field name="EndTime"><LARGE_INTEGER /></field>
<field name="VirtualAddress"><PVOID /></field>
<field name="NumberOfBytes"><DWORD /></field>
<field name="DeviceNumber"><BYTE /></field>
<field name="ReadRequest"><BOOLEAN /></field>
} DISK_RECORD, *PDISK_RECORD;
typedef struct _DISK_LOGGING {
<field name="Function"><BYTE /></field>
<field name="BufferAddress"><PVOID /></field>
<field name="BufferSize"><DWORD /></field>
} DISK_LOGGING, *PDISK_LOGGING;
typedef enum _BIN_TYPES {
RequestSize, RequestLocation } BIN_TYPES;
typedef struct _BIN_RANGE {
<field name="StartValue"><LARGE_INTEGER /></field>
<field name="Length"><LARGE_INTEGER /></field>
} BIN_RANGE, *PBIN_RANGE;
typedef struct _PERF_BIN {
<field name="NumberOfBins"><DWORD /></field>
<field name="TypeOfBin"><DWORD /></field>
<field name="BinsRanges"><arr length="1"><BIN_RANGE /></arr></field>
} PERF_BIN, *PPERF_BIN ;
typedef struct _BIN_COUNT {
<field name="BinRange"><BIN_RANGE /></field>
<field name="BinCount"><DWORD /></field>
} BIN_COUNT, *PBIN_COUNT;
typedef struct _BIN_RESULTS {
<field name="NumberOfBins"><DWORD /></field>
<field name="BinCounts"><arr length="1"><BIN_COUNT /></arr></field>
} BIN_RESULTS, *PBIN_RESULTS;
typedef struct _GETVERSIONINPARAMS {
<field name="bVersion"><BYTE /></field>
<field name="bRevision"><BYTE /></field>
<field name="bReserved"><BYTE /></field>
<field name="bIDEDeviceMap"><BYTE /></field>
<field name="fCapabilities"><DWORD /></field>
<field name="dwReserved"><arr length="4"><DWORD /></arr></field>
} GETVERSIONINPARAMS, *PGETVERSIONINPARAMS, *LPGETVERSIONINPARAMS;
typedef struct _IDEREGS {
<field name="bFeaturesReg"><BYTE /></field>
<field name="bSectorCountReg"><BYTE /></field>
<field name="bSectorNumberReg"><BYTE /></field>
<field name="bCylLowReg"><BYTE /></field>
<field name="bCylHighReg"><BYTE /></field>
<field name="bDriveHeadReg"><BYTE /></field>
<field name="bCommandReg"><BYTE /></field>
<field name="bReserved"><BYTE /></field>
} IDEREGS, *PIDEREGS, *LPIDEREGS;
typedef struct _SENDCMDINPARAMS {
<field name="cBufferSize"><DWORD /></field>
<field name="irDriveRegs"><IDEREGS /></field>
<field name="bDriveNumber"><BYTE /></field>
<field name="bReserved"><arr length="3"><BYTE /></arr></field>
<field name="dwReserved"><arr length="4"><DWORD /></arr></field>
<field name="bBuffer"><arr length="1"><BYTE /></arr></field>
} SENDCMDINPARAMS, *PSENDCMDINPARAMS, *LPSENDCMDINPARAMS;
typedef struct _DRIVERSTATUS {
<field name="bDriverError"><BYTE /></field>
<field name="bIDEError"><BYTE /></field>
<field name="bReserved"><arr length="2"><BYTE /></arr></field>
<field name="dwReserved"><arr length="2"><DWORD /></arr></field>
} DRIVERSTATUS, *PDRIVERSTATUS, *LPDRIVERSTATUS;
typedef struct _SENDCMDOUTPARAMS {
<field name="cBufferSize"><DWORD /></field>
<field name="DriverStatus"><DRIVERSTATUS /></field>
<field name="bBuffer"><arr length="1"><BYTE /></arr></field>
} SENDCMDOUTPARAMS, *PSENDCMDOUTPARAMS, *LPSENDCMDOUTPARAMS;
typedef enum _ELEMENT_TYPE {
AllElements, ChangerTransport, ChangerSlot, ChangerIEPort, ChangerDrive, ChangerDoor, ChangerKeypad, ChangerMaxElement } ELEMENT_TYPE, *PELEMENT_TYPE;
typedef struct _CHANGER_ELEMENT {
<field name="ElementType"><ELEMENT_TYPE /></field>
<field name="ElementAddress"><DWORD /></field>
} CHANGER_ELEMENT, *PCHANGER_ELEMENT;
typedef struct _CHANGER_ELEMENT_LIST {
<field name="Element"><CHANGER_ELEMENT /></field>
<field name="NumberOfElements"><DWORD /></field>
} CHANGER_ELEMENT_LIST, *PCHANGER_ELEMENT_LIST;
typedef struct _GET_CHANGER_PARAMETERS {
<field name="Size"><DWORD /></field>
<field name="NumberTransportElements"><WORD /></field>
<field name="NumberStorageElements"><WORD /></field>
<field name="NumberCleanerSlots"><WORD /></field>
<field name="NumberIEElements"><WORD /></field>
<field name="NumberDataTransferElements"><WORD /></field>
<field name="NumberOfDoors"><WORD /></field>
<field name="FirstSlotNumber"><WORD /></field>
<field name="FirstDriveNumber"><WORD /></field>
<field name="FirstTransportNumber"><WORD /></field>
<field name="FirstIEPortNumber"><WORD /></field>
<field name="FirstCleanerSlotAddress"><WORD /></field>
<field name="MagazineSize"><WORD /></field>
<field name="DriveCleanTimeout"><DWORD /></field>
<field name="Features0"><DWORD /></field>
<field name="Features1"><DWORD /></field>
<field name="MoveFromTransport"><BYTE /></field>
<field name="MoveFromSlot"><BYTE /></field>
<field name="MoveFromIePort"><BYTE /></field>
<field name="MoveFromDrive"><BYTE /></field>
<field name="ExchangeFromTransport"><BYTE /></field>
<field name="ExchangeFromSlot"><BYTE /></field>
<field name="ExchangeFromIePort"><BYTE /></field>
<field name="ExchangeFromDrive"><BYTE /></field>
<field name="LockUnlockCapabilities"><BYTE /></field>
<field name="PositionCapabilities"><BYTE /></field>
<field name="Reserved1"><arr length="2"><BYTE /></arr></field>
<field name="Reserved2"><arr length="2"><DWORD /></arr></field>
} GET_CHANGER_PARAMETERS, * PGET_CHANGER_PARAMETERS;
typedef struct _CHANGER_PRODUCT_DATA {
<field name="VendorId"><arr length="8"><BYTE /></arr></field>
<field name="ProductId"><arr length="16"><BYTE /></arr></field>
<field name="Revision"><arr length="4"><BYTE /></arr></field>
<field name="SerialNumber"><arr length="32"><BYTE /></arr></field>
<field name="DeviceType"><BYTE /></field>
} CHANGER_PRODUCT_DATA, *PCHANGER_PRODUCT_DATA;
typedef struct _CHANGER_SET_ACCESS {
<field name="Element"><CHANGER_ELEMENT /></field>
<field name="Control"><DWORD /></field>
} CHANGER_SET_ACCESS, *PCHANGER_SET_ACCESS;
typedef struct _CHANGER_READ_ELEMENT_STATUS {
<field name="ElementList"><CHANGER_ELEMENT_LIST /></field>
<field name="VolumeTagInfo"><BOOLEAN /></field>
} CHANGER_READ_ELEMENT_STATUS, *PCHANGER_READ_ELEMENT_STATUS;
typedef struct _CHANGER_ELEMENT_STATUS {
<field name="Element"><CHANGER_ELEMENT /></field>
<field name="SrcElementAddress"><CHANGER_ELEMENT /></field>
<field name="Flags"><DWORD /></field>
<field name="ExceptionCode"><DWORD /></field>
<field name="TargetId"><BYTE /></field>
<field name="Lun"><BYTE /></field>
<field name="Reserved"><WORD /></field>
<field name="PrimaryVolumeID"><arr length="36"><BYTE /></arr></field>
<field name="AlternateVolumeID"><arr length="36"><BYTE /></arr></field>
} CHANGER_ELEMENT_STATUS, *PCHANGER_ELEMENT_STATUS;
typedef struct _CHANGER_ELEMENT_STATUS_EX {
<field name="Element"><CHANGER_ELEMENT /></field>
<field name="SrcElementAddress"><CHANGER_ELEMENT /></field>
<field name="Flags"><DWORD /></field>
<field name="ExceptionCode"><DWORD /></field>
<field name="TargetId"><BYTE /></field>
<field name="Lun"><BYTE /></field>
<field name="Reserved"><WORD /></field>
<field name="PrimaryVolumeID"><arr length="36"><BYTE /></arr></field>
<field name="AlternateVolumeID"><arr length="36"><BYTE /></arr></field>
<field name="VendorIdentification"><arr length="8"><BYTE /></arr></field>
<field name="ProductIdentification"><arr length="16"><BYTE /></arr></field>
<field name="SerialNumber"><arr length="32"><BYTE /></arr></field>
} CHANGER_ELEMENT_STATUS_EX, *PCHANGER_ELEMENT_STATUS_EX;
typedef struct _CHANGER_INITIALIZE_ELEMENT_STATUS {
<field name="ElementList"><CHANGER_ELEMENT_LIST /></field>
<field name="BarCodeScan"><BOOLEAN /></field>
} CHANGER_INITIALIZE_ELEMENT_STATUS, *PCHANGER_INITIALIZE_ELEMENT_STATUS;
typedef struct _CHANGER_SET_POSITION {
<field name="Transport"><CHANGER_ELEMENT /></field>
<field name="Destination"><CHANGER_ELEMENT /></field>
<field name="Flip"><BOOLEAN /></field>
} CHANGER_SET_POSITION, *PCHANGER_SET_POSITION;
typedef struct _CHANGER_EXCHANGE_MEDIUM {
<field name="Transport"><CHANGER_ELEMENT /></field>
<field name="Source"><CHANGER_ELEMENT /></field>
<field name="Destination1"><CHANGER_ELEMENT /></field>
<field name="Destination2"><CHANGER_ELEMENT /></field>
<field name="Flip1"><BOOLEAN /></field>
<field name="Flip2"><BOOLEAN /></field>
} CHANGER_EXCHANGE_MEDIUM, *PCHANGER_EXCHANGE_MEDIUM;
typedef struct _CHANGER_MOVE_MEDIUM {
<field name="Transport"><CHANGER_ELEMENT /></field>
<field name="Source"><CHANGER_ELEMENT /></field>
<field name="Destination"><CHANGER_ELEMENT /></field>
<field name="Flip"><BOOLEAN /></field>
} CHANGER_MOVE_MEDIUM, *PCHANGER_MOVE_MEDIUM;
typedef struct _CHANGER_SEND_VOLUME_TAG_INFORMATION {
<field name="StartingElement"><CHANGER_ELEMENT /></field>
<field name="ActionCode"><DWORD /></field>
<field name="VolumeIDTemplate"><arr length="40"><BYTE /></arr></field>
} CHANGER_SEND_VOLUME_TAG_INFORMATION, *PCHANGER_SEND_VOLUME_TAG_INFORMATION;
typedef struct _READ_ELEMENT_ADDRESS_INFO {
<field name="NumberOfElements"><DWORD /></field>
<field name="ElementStatus"><arr length="1"><CHANGER_ELEMENT_STATUS /></arr></field>
} READ_ELEMENT_ADDRESS_INFO, *PREAD_ELEMENT_ADDRESS_INFO;
typedef enum _CHANGER_DEVICE_PROBLEM_TYPE {
DeviceProblemNone, DeviceProblemHardware, DeviceProblemCHMError, DeviceProblemDoorOpen, DeviceProblemCalibrationError, DeviceProblemTargetFailure, DeviceProblemCHMMoveError, DeviceProblemCHMZeroError, DeviceProblemCartridgeInsertError, DeviceProblemPositionError, DeviceProblemSensorError, DeviceProblemCartridgeEjectError, DeviceProblemGripperError, DeviceProblemDriveError } CHANGER_DEVICE_PROBLEM_TYPE, *PCHANGER_DEVICE_PROBLEM_TYPE;
typedef struct _CSV_NAMESPACE_INFO {
<field name="Version"><DWORD /></field>
<field name="DeviceNumber"><DWORD /></field>
<field name="StartingOffset"><LARGE_INTEGER /></field>
<field name="SectorSize"><DWORD /></field>
} CSV_NAMESPACE_INFO, *PCSV_NAMESPACE_INFO;
typedef struct _PATHNAME_BUFFER {
<field name="PathNameLength"><DWORD /></field>
<field name="Name"><arr length="1"><WCHAR /></arr></field>
} PATHNAME_BUFFER, *PPATHNAME_BUFFER;
typedef struct _FSCTL_QUERY_FAT_BPB_BUFFER {
<field name="First0x24BytesOfBootSector"><arr length="0x24"><BYTE /></arr></field>
} FSCTL_QUERY_FAT_BPB_BUFFER, *PFSCTL_QUERY_FAT_BPB_BUFFER;
typedef struct {
<field name="VolumeSerialNumber"><LARGE_INTEGER /></field>
<field name="NumberSectors"><LARGE_INTEGER /></field>
<field name="TotalClusters"><LARGE_INTEGER /></field>
<field name="FreeClusters"><LARGE_INTEGER /></field>
<field name="TotalReserved"><LARGE_INTEGER /></field>
<field name="BytesPerSector"><DWORD /></field>
<field name="BytesPerCluster"><DWORD /></field>
<field name="BytesPerFileRecordSegment"><DWORD /></field>
<field name="ClustersPerFileRecordSegment"><DWORD /></field>
<field name="MftValidDataLength"><LARGE_INTEGER /></field>
<field name="MftStartLcn"><LARGE_INTEGER /></field>
<field name="Mft2StartLcn"><LARGE_INTEGER /></field>
<field name="MftZoneStart"><LARGE_INTEGER /></field>
<field name="MftZoneEnd"><LARGE_INTEGER /></field>
} NTFS_VOLUME_DATA_BUFFER, *PNTFS_VOLUME_DATA_BUFFER;
typedef struct {
<field name="ByteCount"><DWORD /></field>
<field name="MajorVersion"><WORD /></field>
<field name="MinorVersion"><WORD /></field>
} NTFS_EXTENDED_VOLUME_DATA, *PNTFS_EXTENDED_VOLUME_DATA;
typedef struct {
<field name="StartingLcn"><LARGE_INTEGER /></field>
} STARTING_LCN_INPUT_BUFFER, *PSTARTING_LCN_INPUT_BUFFER;
typedef struct {
<field name="StartingLcn"><LARGE_INTEGER /></field>
<field name="BitmapSize"><LARGE_INTEGER /></field>
<field name="Buffer"><arr length="1"><BYTE /></arr></field>
} VOLUME_BITMAP_BUFFER, *PVOLUME_BITMAP_BUFFER;
typedef struct {
<field name="StartingVcn"><LARGE_INTEGER /></field>
} STARTING_VCN_INPUT_BUFFER, *PSTARTING_VCN_INPUT_BUFFER;
typedef struct RETRIEVAL_POINTERS_BUFFER {
<field name="ExtentCount"><DWORD /></field>
<field name="StartingVcn"><LARGE_INTEGER /></field>
struct {
<field name="NextVcn"><LARGE_INTEGER /></field>
<field name="Lcn"><LARGE_INTEGER /></field>
} Extents[1];
} RETRIEVAL_POINTERS_BUFFER, *PRETRIEVAL_POINTERS_BUFFER;
typedef struct {
<field name="FileReferenceNumber"><LARGE_INTEGER /></field>
} NTFS_FILE_RECORD_INPUT_BUFFER, *PNTFS_FILE_RECORD_INPUT_BUFFER;
typedef struct {
<field name="FileReferenceNumber"><LARGE_INTEGER /></field>
<field name="FileRecordLength"><DWORD /></field>
<field name="FileRecordBuffer"><arr length="1"><BYTE /></arr></field>
} NTFS_FILE_RECORD_OUTPUT_BUFFER, *PNTFS_FILE_RECORD_OUTPUT_BUFFER;
typedef struct {
<field name="FileHandle"><HANDLE /></field>
<field name="StartingVcn"><LARGE_INTEGER /></field>
<field name="StartingLcn"><LARGE_INTEGER /></field>
<field name="ClusterCount"><DWORD /></field>
} MOVE_FILE_DATA, *PMOVE_FILE_DATA;
typedef struct {
<field name="FileHandle"><HANDLE /></field>
<field name="SourceFileRecord"><LARGE_INTEGER /></field>
<field name="TargetFileRecord"><LARGE_INTEGER /></field>
} MOVE_FILE_RECORD_DATA, *PMOVE_FILE_RECORD_DATA;
typedef struct {
<field name="Restart"><DWORD /></field>
<field name="Sid"><SID /></field>
} FIND_BY_SID_DATA, *PFIND_BY_SID_DATA;
typedef struct {
<field name="NextEntryOffset"><DWORD /></field>
<field name="FileIndex"><DWORD /></field>
<field name="FileNameLength"><DWORD /></field>
<field name="FileName"><arr length="1"><WCHAR /></arr></field>
} FIND_BY_SID_OUTPUT, *PFIND_BY_SID_OUTPUT;
typedef struct {
<field name="StartFileReferenceNumber"><DWORDLONG /></field>
<field name="LowUsn"><USN /></field>
<field name="HighUsn"><USN /></field>
} MFT_ENUM_DATA, *PMFT_ENUM_DATA;
typedef struct {
<field name="MaximumSize"><DWORDLONG /></field>
<field name="AllocationDelta"><DWORDLONG /></field>
} CREATE_USN_JOURNAL_DATA, *PCREATE_USN_JOURNAL_DATA;
typedef struct {
<field name="StartUsn"><USN /></field>
<field name="ReasonMask"><DWORD /></field>
<field name="ReturnOnlyOnClose"><DWORD /></field>
<field name="Timeout"><DWORDLONG /></field>
<field name="BytesToWaitFor"><DWORDLONG /></field>
<field name="UsnJournalID"><DWORDLONG /></field>
} READ_USN_JOURNAL_DATA, *PREAD_USN_JOURNAL_DATA;
typedef struct {
<field name="RecordLength"><DWORD /></field>
<field name="MajorVersion"><WORD /></field>
<field name="MinorVersion"><WORD /></field>
<field name="FileReferenceNumber"><DWORDLONG /></field>
<field name="ParentFileReferenceNumber"><DWORDLONG /></field>
<field name="Usn"><USN /></field>
<field name="TimeStamp"><LARGE_INTEGER /></field>
<field name="Reason"><DWORD /></field>
<field name="SourceInfo"><DWORD /></field>
<field name="SecurityId"><DWORD /></field>
<field name="FileAttributes"><DWORD /></field>
<field name="FileNameLength"><WORD /></field>
<field name="FileNameOffset"><WORD /></field>
<field name="FileName"><arr length="1"><WCHAR /></arr></field>
} USN_RECORD, *PUSN_RECORD;
typedef struct {
<field name="UsnJournalID"><DWORDLONG /></field>
<field name="FirstUsn"><USN /></field>
<field name="NextUsn"><USN /></field>
<field name="LowestValidUsn"><USN /></field>
<field name="MaxUsn"><USN /></field>
<field name="MaximumSize"><DWORDLONG /></field>
<field name="AllocationDelta"><DWORDLONG /></field>
} USN_JOURNAL_DATA, *PUSN_JOURNAL_DATA;
typedef struct {
<field name="UsnJournalID"><DWORDLONG /></field>
<field name="DeleteFlags"><DWORD /></field>
} DELETE_USN_JOURNAL_DATA, *PDELETE_USN_JOURNAL_DATA;
typedef struct {
<field name="UsnSourceInfo"><DWORD /></field>
<field name="VolumeHandle"><HANDLE /></field>
<field name="HandleInfo"><DWORD /></field>
} MARK_HANDLE_INFO, *PMARK_HANDLE_INFO;
typedef struct {
<field name="DesiredAccess"><ACCESS_MASK /></field>
<field name="SecurityIds"><arr length="1"><DWORD /></arr></field>
} BULK_SECURITY_TEST_DATA, *PBULK_SECURITY_TEST_DATA;
typedef struct _FILE_PREFETCH {
<field name="Type"><DWORD /></field>
<field name="Count"><DWORD /></field>
<field name="Prefetch"><arr length="1"><DWORDLONG /></arr></field>
} FILE_PREFETCH, *PFILE_PREFETCH;
typedef struct _FILE_PREFETCH_EX {
<field name="Type"><DWORD /></field>
<field name="Count"><DWORD /></field>
<field name="Context"><PVOID /></field>
<field name="Prefetch"><arr length="1"><DWORDLONG /></arr></field>
} FILE_PREFETCH_EX, *PFILE_PREFETCH_EX;
typedef struct _FILESYSTEM_STATISTICS {
<field name="FileSystemType"><WORD /></field>
<field name="Version"><WORD /></field>
<field name="SizeOfCompleteStructure"><DWORD /></field>
<field name="UserFileReads"><DWORD /></field>
<field name="UserFileReadBytes"><DWORD /></field>
<field name="UserDiskReads"><DWORD /></field>
<field name="UserFileWrites"><DWORD /></field>
<field name="UserFileWriteBytes"><DWORD /></field>
<field name="UserDiskWrites"><DWORD /></field>
<field name="MetaDataReads"><DWORD /></field>
<field name="MetaDataReadBytes"><DWORD /></field>
<field name="MetaDataDiskReads"><DWORD /></field>
<field name="MetaDataWrites"><DWORD /></field>
<field name="MetaDataWriteBytes"><DWORD /></field>
<field name="MetaDataDiskWrites"><DWORD /></field>
} FILESYSTEM_STATISTICS, *PFILESYSTEM_STATISTICS;
typedef struct _FAT_STATISTICS {
<field name="CreateHits"><DWORD /></field>
<field name="SuccessfulCreates"><DWORD /></field>
<field name="FailedCreates"><DWORD /></field>
<field name="NonCachedReads"><DWORD /></field>
<field name="NonCachedReadBytes"><DWORD /></field>
<field name="NonCachedWrites"><DWORD /></field>
<field name="NonCachedWriteBytes"><DWORD /></field>
<field name="NonCachedDiskReads"><DWORD /></field>
<field name="NonCachedDiskWrites"><DWORD /></field>
} FAT_STATISTICS, *PFAT_STATISTICS;
typedef struct _EXFAT_STATISTICS {
<field name="CreateHits"><DWORD /></field>
<field name="SuccessfulCreates"><DWORD /></field>
<field name="FailedCreates"><DWORD /></field>
<field name="NonCachedReads"><DWORD /></field>
<field name="NonCachedReadBytes"><DWORD /></field>
<field name="NonCachedWrites"><DWORD /></field>
<field name="NonCachedWriteBytes"><DWORD /></field>
<field name="NonCachedDiskReads"><DWORD /></field>
<field name="NonCachedDiskWrites"><DWORD /></field>
} EXFAT_STATISTICS, *PEXFAT_STATISTICS;
typedef struct _NTFS_STATISTICS {
<field name="LogFileFullExceptions"><DWORD /></field>
<field name="OtherExceptions"><DWORD /></field>
<field name="MftReads"><DWORD /></field>
<field name="MftReadBytes"><DWORD /></field>
<field name="MftWrites"><DWORD /></field>
<field name="MftWriteBytes"><DWORD /></field>
struct {
<field name="Write"><WORD /></field>
<field name="Create"><WORD /></field>
<field name="SetInfo"><WORD /></field>
<field name="Flush"><WORD /></field>
} MftWritesUserLevel;
<field name="MftWritesFlushForLogFileFull"><WORD /></field>
<field name="MftWritesLazyWriter"><WORD /></field>
<field name="MftWritesUserRequest"><WORD /></field>
<field name="Mft2Writes"><DWORD /></field>
<field name="Mft2WriteBytes"><DWORD /></field>
struct {
<field name="Write"><WORD /></field>
<field name="Create"><WORD /></field>
<field name="SetInfo"><WORD /></field>
<field name="Flush"><WORD /></field>
} Mft2WritesUserLevel;
<field name="Mft2WritesFlushForLogFileFull"><WORD /></field>
<field name="Mft2WritesLazyWriter"><WORD /></field>
<field name="Mft2WritesUserRequest"><WORD /></field>
<field name="RootIndexReads"><DWORD /></field>
<field name="RootIndexReadBytes"><DWORD /></field>
<field name="RootIndexWrites"><DWORD /></field>
<field name="RootIndexWriteBytes"><DWORD /></field>
<field name="BitmapReads"><DWORD /></field>
<field name="BitmapReadBytes"><DWORD /></field>
<field name="BitmapWrites"><DWORD /></field>
<field name="BitmapWriteBytes"><DWORD /></field>
<field name="BitmapWritesFlushForLogFileFull"><WORD /></field>
<field name="BitmapWritesLazyWriter"><WORD /></field>
<field name="BitmapWritesUserRequest"><WORD /></field>
struct {
<field name="Write"><WORD /></field>
<field name="Create"><WORD /></field>
<field name="SetInfo"><WORD /></field>
} BitmapWritesUserLevel;
<field name="MftBitmapReads"><DWORD /></field>
<field name="MftBitmapReadBytes"><DWORD /></field>
<field name="MftBitmapWrites"><DWORD /></field>
<field name="MftBitmapWriteBytes"><DWORD /></field>
<field name="MftBitmapWritesFlushForLogFileFull"><WORD /></field>
<field name="MftBitmapWritesLazyWriter"><WORD /></field>
<field name="MftBitmapWritesUserRequest"><WORD /></field>
struct {
<field name="Write"><WORD /></field>
<field name="Create"><WORD /></field>
<field name="SetInfo"><WORD /></field>
<field name="Flush"><WORD /></field>
} MftBitmapWritesUserLevel;
<field name="UserIndexReads"><DWORD /></field>
<field name="UserIndexReadBytes"><DWORD /></field>
<field name="UserIndexWrites"><DWORD /></field>
<field name="UserIndexWriteBytes"><DWORD /></field>
<field name="LogFileReads"><DWORD /></field>
<field name="LogFileReadBytes"><DWORD /></field>
<field name="LogFileWrites"><DWORD /></field>
<field name="LogFileWriteBytes"><DWORD /></field>
struct {
<field name="Calls"><DWORD /></field>
<field name="Clusters"><DWORD /></field>
<field name="Hints"><DWORD /></field>
<field name="RunsReturned"><DWORD /></field>
<field name="HintsHonored"><DWORD /></field>
<field name="HintsClusters"><DWORD /></field>
<field name="Cache"><DWORD /></field>
<field name="CacheClusters"><DWORD /></field>
<field name="CacheMiss"><DWORD /></field>
<field name="CacheMissClusters"><DWORD /></field>
} Allocate;
} NTFS_STATISTICS, *PNTFS_STATISTICS;
typedef struct _FILE_OBJECTID_BUFFER {
<field name="ObjectId"><arr length="16"><BYTE /></arr></field>
union {
struct {
<field name="BirthVolumeId"><arr length="16"><BYTE /></arr></field>
<field name="BirthObjectId"><arr length="16"><BYTE /></arr></field>
<field name="DomainId"><arr length="16"><BYTE /></arr></field>
} ;
<field name="ExtendedInfo"><arr length="48"><BYTE /></arr></field>
} ;
} FILE_OBJECTID_BUFFER, *PFILE_OBJECTID_BUFFER;
typedef struct _FILE_SET_SPARSE_BUFFER {
<field name="SetSparse"><BOOLEAN /></field>
} FILE_SET_SPARSE_BUFFER, *PFILE_SET_SPARSE_BUFFER;
typedef struct _FILE_ZERO_DATA_INFORMATION {
<field name="FileOffset"><LARGE_INTEGER /></field>
<field name="BeyondFinalZero"><LARGE_INTEGER /></field>
} FILE_ZERO_DATA_INFORMATION, *PFILE_ZERO_DATA_INFORMATION;
typedef struct _FILE_ALLOCATED_RANGE_BUFFER {
<field name="FileOffset"><LARGE_INTEGER /></field>
<field name="Length"><LARGE_INTEGER /></field>
} FILE_ALLOCATED_RANGE_BUFFER, *PFILE_ALLOCATED_RANGE_BUFFER;
typedef struct _ENCRYPTION_BUFFER {
<field name="EncryptionOperation"><DWORD /></field>
<field name="Private"><arr length="1"><BYTE /></arr></field>
} ENCRYPTION_BUFFER, *PENCRYPTION_BUFFER;
typedef struct _DECRYPTION_STATUS_BUFFER {
<field name="NoEncryptedStreams"><BOOLEAN /></field>
} DECRYPTION_STATUS_BUFFER, *PDECRYPTION_STATUS_BUFFER;
typedef struct _REQUEST_RAW_ENCRYPTED_DATA {
<field name="FileOffset"><LONGLONG /></field>
<field name="Length"><DWORD /></field>
} REQUEST_RAW_ENCRYPTED_DATA, *PREQUEST_RAW_ENCRYPTED_DATA;
typedef struct _ENCRYPTED_DATA_INFO {
<field name="StartingFileOffset"><DWORDLONG /></field>
<field name="OutputBufferOffset"><DWORD /></field>
<field name="BytesWithinFileSize"><DWORD /></field>
<field name="BytesWithinValidDataLength"><DWORD /></field>
<field name="CompressionFormat"><WORD /></field>
<field name="DataUnitShift"><BYTE /></field>
<field name="ChunkShift"><BYTE /></field>
<field name="ClusterShift"><BYTE /></field>
<field name="EncryptionFormat"><BYTE /></field>
<field name="NumberOfDataBlocks"><WORD /></field>
<field name="DataBlockSize"><arr length="1"><DWORD /></arr></field>
} ENCRYPTED_DATA_INFO;
<typedef name="PENCRYPTED_DATA_INFO"><ptr><ENCRYPTED_DATA_INFO /></ptr></typedef>
typedef struct _PLEX_READ_DATA_REQUEST {
<field name="ByteOffset"><LARGE_INTEGER /></field>
<field name="ByteLength"><DWORD /></field>
<field name="PlexNumber"><DWORD /></field>
} PLEX_READ_DATA_REQUEST, *PPLEX_READ_DATA_REQUEST;
typedef struct _SI_COPYFILE {
<field name="SourceFileNameLength"><DWORD /></field>
<field name="DestinationFileNameLength"><DWORD /></field>
<field name="Flags"><DWORD /></field>
<field name="FileNameBuffer"><arr length="1"><WCHAR /></arr></field>
} SI_COPYFILE, *PSI_COPYFILE;
typedef struct _FILE_MAKE_COMPATIBLE_BUFFER {
<field name="CloseDisc"><BOOLEAN /></field>
} FILE_MAKE_COMPATIBLE_BUFFER, *PFILE_MAKE_COMPATIBLE_BUFFER;
typedef struct _FILE_SET_DEFECT_MGMT_BUFFER {
<field name="Disable"><BOOLEAN /></field>
} FILE_SET_DEFECT_MGMT_BUFFER, *PFILE_SET_DEFECT_MGMT_BUFFER;
typedef struct _FILE_QUERY_SPARING_BUFFER {
<field name="SparingUnitBytes"><DWORD /></field>
<field name="SoftwareSparing"><BOOLEAN /></field>
<field name="TotalSpareBlocks"><DWORD /></field>
<field name="FreeSpareBlocks"><DWORD /></field>
} FILE_QUERY_SPARING_BUFFER, *PFILE_QUERY_SPARING_BUFFER;
typedef struct _FILE_QUERY_ON_DISK_VOL_INFO_BUFFER {
<field name="DirectoryCount"><LARGE_INTEGER /></field>
<field name="FileCount"><LARGE_INTEGER /></field>
<field name="FsFormatMajVersion"><WORD /></field>
<field name="FsFormatMinVersion"><WORD /></field>
<field name="FsFormatName"><arr length=" 12"><WCHAR /></arr></field>
<field name="FormatTime"><LARGE_INTEGER /></field>
<field name="LastUpdateTime"><LARGE_INTEGER /></field>
<field name="CopyrightInfo"><arr length=" 34"><WCHAR /></arr></field>
<field name="AbstractInfo"><arr length=" 34"><WCHAR /></arr></field>
<field name="FormattingImplementationInfo"><arr length=" 34"><WCHAR /></arr></field>
<field name="LastModifyingImplementationInfo"><arr length=" 34"><WCHAR /></arr></field>
} FILE_QUERY_ON_DISK_VOL_INFO_BUFFER, *PFILE_QUERY_ON_DISK_VOL_INFO_BUFFER;
typedef enum _SHRINK_VOLUME_REQUEST_TYPES {
ShrinkPrepare = 1, ShrinkCommit, ShrinkAbort } SHRINK_VOLUME_REQUEST_TYPES, *PSHRINK_VOLUME_REQUEST_TYPES;
typedef struct _SHRINK_VOLUME_INFORMATION {
<field name="ShrinkRequestType"><SHRINK_VOLUME_REQUEST_TYPES /></field>
<field name="Flags"><DWORDLONG /></field>
<field name="NewNumberOfSectors"><LONGLONG /></field>
} SHRINK_VOLUME_INFORMATION, *PSHRINK_VOLUME_INFORMATION;
typedef struct _TXFS_MODIFY_RM {
<field name="Flags"><DWORD /></field>
<field name="LogContainerCountMax"><DWORD /></field>
<field name="LogContainerCountMin"><DWORD /></field>
<field name="LogContainerCount"><DWORD /></field>
<field name="LogGrowthIncrement"><DWORD /></field>
<field name="LogAutoShrinkPercentage"><DWORD /></field>
<field name="Reserved"><DWORDLONG /></field>
<field name="LoggingMode"><WORD /></field>
} TXFS_MODIFY_RM, *PTXFS_MODIFY_RM;
typedef struct _TXFS_QUERY_RM_INFORMATION {
<field name="BytesRequired"><DWORD /></field>
<field name="TailLsn"><DWORDLONG /></field>
<field name="CurrentLsn"><DWORDLONG /></field>
<field name="ArchiveTailLsn"><DWORDLONG /></field>
<field name="LogContainerSize"><DWORDLONG /></field>
<field name="HighestVirtualClock"><LARGE_INTEGER /></field>
<field name="LogContainerCount"><DWORD /></field>
<field name="LogContainerCountMax"><DWORD /></field>
<field name="LogContainerCountMin"><DWORD /></field>
<field name="LogGrowthIncrement"><DWORD /></field>
<field name="LogAutoShrinkPercentage"><DWORD /></field>
<field name="Flags"><DWORD /></field>
<field name="LoggingMode"><WORD /></field>
<field name="Reserved"><WORD /></field>
<field name="RmState"><DWORD /></field>
<field name="LogCapacity"><DWORDLONG /></field>
<field name="LogFree"><DWORDLONG /></field>
<field name="TopsSize"><DWORDLONG /></field>
<field name="TopsUsed"><DWORDLONG /></field>
<field name="TransactionCount"><DWORDLONG /></field>
<field name="OnePCCount"><DWORDLONG /></field>
<field name="TwoPCCount"><DWORDLONG /></field>
<field name="NumberLogFileFull"><DWORDLONG /></field>
<field name="OldestTransactionAge"><DWORDLONG /></field>
<field name="RMName"><GUID /></field>
<field name="TmLogPathOffset"><DWORD /></field>
} TXFS_QUERY_RM_INFORMATION, *PTXFS_QUERY_RM_INFORMATION;
typedef struct _TXFS_ROLLFORWARD_REDO_INFORMATION {
<field name="LastVirtualClock"><LARGE_INTEGER /></field>
<field name="LastRedoLsn"><DWORDLONG /></field>
<field name="HighestRecoveryLsn"><DWORDLONG /></field>
<field name="Flags"><DWORD /></field>
} TXFS_ROLLFORWARD_REDO_INFORMATION, *PTXFS_ROLLFORWARD_REDO_INFORMATION;
typedef struct _TXFS_START_RM_INFORMATION {
<field name="Flags"><DWORD /></field>
<field name="LogContainerSize"><DWORDLONG /></field>
<field name="LogContainerCountMin"><DWORD /></field>
<field name="LogContainerCountMax"><DWORD /></field>
<field name="LogGrowthIncrement"><DWORD /></field>
<field name="LogAutoShrinkPercentage"><DWORD /></field>
<field name="TmLogPathOffset"><DWORD /></field>
<field name="TmLogPathLength"><WORD /></field>
<field name="LoggingMode"><WORD /></field>
<field name="LogPathLength"><WORD /></field>
<field name="Reserved"><WORD /></field>
<field name="LogPath"><arr length="1"><WCHAR /></arr></field>
} TXFS_START_RM_INFORMATION, *PTXFS_START_RM_INFORMATION;
typedef struct _TXFS_GET_METADATA_INFO_OUT {
struct {
<field name="LowPart"><LONGLONG /></field>
<field name="HighPart"><LONGLONG /></field>
} TxfFileId;
<field name="LockingTransaction"><GUID /></field>
<field name="LastLsn"><DWORDLONG /></field>
<field name="TransactionState"><DWORD /></field>
} TXFS_GET_METADATA_INFO_OUT, *PTXFS_GET_METADATA_INFO_OUT;
typedef struct _TXFS_LIST_TRANSACTION_LOCKED_FILES_ENTRY {
<field name="Offset"><DWORDLONG /></field>
<field name="NameFlags"><DWORD /></field>
<field name="FileId"><LONGLONG /></field>
<field name="Reserved1"><DWORD /></field>
<field name="Reserved2"><DWORD /></field>
<field name="Reserved3"><LONGLONG /></field>
<field name="FileName"><arr length="1"><WCHAR /></arr></field>
} TXFS_LIST_TRANSACTION_LOCKED_FILES_ENTRY, *PTXFS_LIST_TRANSACTION_LOCKED_FILES_ENTRY;
typedef struct _TXFS_LIST_TRANSACTION_LOCKED_FILES {
<field name="KtmTransaction"><GUID /></field>
<field name="NumberOfFiles"><DWORDLONG /></field>
<field name="BufferSizeRequired"><DWORDLONG /></field>
<field name="Offset"><DWORDLONG /></field>
} TXFS_LIST_TRANSACTION_LOCKED_FILES, *PTXFS_LIST_TRANSACTION_LOCKED_FILES;
typedef struct _TXFS_LIST_TRANSACTIONS_ENTRY {
<field name="TransactionId"><GUID /></field>
<field name="TransactionState"><DWORD /></field>
<field name="Reserved1"><DWORD /></field>
<field name="Reserved2"><DWORD /></field>
<field name="Reserved3"><LONGLONG /></field>
} TXFS_LIST_TRANSACTIONS_ENTRY, *PTXFS_LIST_TRANSACTIONS_ENTRY;
typedef struct _TXFS_LIST_TRANSACTIONS {
<field name="NumberOfTransactions"><DWORDLONG /></field>
<field name="BufferSizeRequired"><DWORDLONG /></field>
} TXFS_LIST_TRANSACTIONS, *PTXFS_LIST_TRANSACTIONS;
typedef struct _TXFS_READ_BACKUP_INFORMATION_OUT {
union {
<field name="BufferLength"><DWORD /></field>
<field name="Buffer"><arr length="1"><BYTE /></arr></field>
} ;
} TXFS_READ_BACKUP_INFORMATION_OUT, *PTXFS_READ_BACKUP_INFORMATION_OUT;
typedef struct _TXFS_WRITE_BACKUP_INFORMATION {
<field name="Buffer"><arr length="1"><BYTE /></arr></field>
} TXFS_WRITE_BACKUP_INFORMATION, *PTXFS_WRITE_BACKUP_INFORMATION;
typedef struct _TXFS_GET_TRANSACTED_VERSION {
<field name="ThisBaseVersion"><DWORD /></field>
<field name="LatestVersion"><DWORD /></field>
<field name="ThisMiniVersion"><WORD /></field>
<field name="FirstMiniVersion"><WORD /></field>
<field name="LatestMiniVersion"><WORD /></field>
} TXFS_GET_TRANSACTED_VERSION, *PTXFS_GET_TRANSACTED_VERSION;
typedef struct _TXFS_SAVEPOINT_INFORMATION {
<field name="KtmTransaction"><HANDLE /></field>
<field name="ActionCode"><DWORD /></field>
<field name="SavepointId"><DWORD /></field>
} TXFS_SAVEPOINT_INFORMATION, *PTXFS_SAVEPOINT_INFORMATION;
typedef struct _TXFS_CREATE_MINIVERSION_INFO {
<field name="StructureVersion"><WORD /></field>
<field name="StructureLength"><WORD /></field>
<field name="BaseVersion"><DWORD /></field>
<field name="MiniVersion"><WORD /></field>
} TXFS_CREATE_MINIVERSION_INFO, *PTXFS_CREATE_MINIVERSION_INFO;
typedef struct _TXFS_TRANSACTION_ACTIVE_INFO {
<field name="TransactionsActiveAtSnapshot"><BOOLEAN /></field>
} TXFS_TRANSACTION_ACTIVE_INFO, *PTXFS_TRANSACTION_ACTIVE_INFO;
typedef struct _BOOT_AREA_INFO {
<field name="BootSectorCount"><DWORD /></field>
struct {
<field name="Offset"><LARGE_INTEGER /></field>
} BootSectors[2];
} BOOT_AREA_INFO, *PBOOT_AREA_INFO;
typedef struct _RETRIEVAL_POINTER_BASE {
<field name="FileAreaOffset"><LARGE_INTEGER /></field>
} RETRIEVAL_POINTER_BASE, *PRETRIEVAL_POINTER_BASE;
typedef struct _FILE_FS_PERSISTENT_VOLUME_INFORMATION {
<field name="VolumeFlags"><DWORD /></field>
<field name="FlagMask"><DWORD /></field>
<field name="Version"><DWORD /></field>
<field name="Reserved"><DWORD /></field>
} FILE_FS_PERSISTENT_VOLUME_INFORMATION, *PFILE_FS_PERSISTENT_VOLUME_INFORMATION;
typedef struct _FILE_SYSTEM_RECOGNITION_INFORMATION {
<field name="FileSystem"><arr length="9"><CHAR /></arr></field>
} FILE_SYSTEM_RECOGNITION_INFORMATION, *PFILE_SYSTEM_RECOGNITION_INFORMATION;
typedef struct _REQUEST_OPLOCK_INPUT_BUFFER {
<field name="StructureVersion"><WORD /></field>
<field name="StructureLength"><WORD /></field>
<field name="RequestedOplockLevel"><DWORD /></field>
<field name="Flags"><DWORD /></field>
} REQUEST_OPLOCK_INPUT_BUFFER, *PREQUEST_OPLOCK_INPUT_BUFFER;
typedef struct _REQUEST_OPLOCK_OUTPUT_BUFFER {
<field name="StructureVersion"><WORD /></field>
<field name="StructureLength"><WORD /></field>
<field name="OriginalOplockLevel"><DWORD /></field>
<field name="NewOplockLevel"><DWORD /></field>
<field name="Flags"><DWORD /></field>
<field name="AccessMode"><ACCESS_MASK /></field>
<field name="ShareMode"><WORD /></field>
} REQUEST_OPLOCK_OUTPUT_BUFFER, *PREQUEST_OPLOCK_OUTPUT_BUFFER;
typedef struct _SD_CHANGE_MACHINE_SID_INPUT {
<field name="CurrentMachineSIDOffset"><WORD /></field>
<field name="CurrentMachineSIDLength"><WORD /></field>
<field name="NewMachineSIDOffset"><WORD /></field>
<field name="NewMachineSIDLength"><WORD /></field>
} SD_CHANGE_MACHINE_SID_INPUT, *PSD_CHANGE_MACHINE_SID_INPUT;
typedef struct _SD_CHANGE_MACHINE_SID_OUTPUT {
<field name="NumSDChangedSuccess"><DWORDLONG /></field>
<field name="NumSDChangedFail"><DWORDLONG /></field>
<field name="NumSDUnused"><DWORDLONG /></field>
<field name="NumSDTotal"><DWORDLONG /></field>
<field name="NumMftSDChangedSuccess"><DWORDLONG /></field>
<field name="NumMftSDChangedFail"><DWORDLONG /></field>
<field name="NumMftSDTotal"><DWORDLONG /></field>
} SD_CHANGE_MACHINE_SID_OUTPUT, *PSD_CHANGE_MACHINE_SID_OUTPUT;
typedef struct _SD_GLOBAL_CHANGE_INPUT {
<field name="Flags"><DWORD /></field>
<field name="ChangeType"><DWORD /></field>
union {
<field name="SdChange"><SD_CHANGE_MACHINE_SID_INPUT /></field>
};
} SD_GLOBAL_CHANGE_INPUT, *PSD_GLOBAL_CHANGE_INPUT;
typedef struct _SD_GLOBAL_CHANGE_OUTPUT {
<field name="Flags"><DWORD /></field>
<field name="ChangeType"><DWORD /></field>
union {
<field name="SdChange"><SD_CHANGE_MACHINE_SID_OUTPUT /></field>
};
} SD_GLOBAL_CHANGE_OUTPUT, *PSD_GLOBAL_CHANGE_OUTPUT;
typedef struct _EXTENDED_ENCRYPTED_DATA_INFO {
<field name="ExtendedCode"><DWORD /></field>
<field name="Length"><DWORD /></field>
<field name="Flags"><DWORD /></field>
<field name="Reserved"><DWORD /></field>
} EXTENDED_ENCRYPTED_DATA_INFO, *PEXTENDED_ENCRYPTED_DATA_INFO;
typedef struct _LOOKUP_STREAM_FROM_CLUSTER_INPUT {
<field name="Flags"><DWORD /></field>
<field name="NumberOfClusters"><DWORD /></field>
<field name="Cluster"><arr length="1"><LARGE_INTEGER /></arr></field>
} LOOKUP_STREAM_FROM_CLUSTER_INPUT, *PLOOKUP_STREAM_FROM_CLUSTER_INPUT;
typedef struct _LOOKUP_STREAM_FROM_CLUSTER_OUTPUT {
<field name="Offset"><DWORD /></field>
<field name="NumberOfMatches"><DWORD /></field>
<field name="BufferSizeRequired"><DWORD /></field>
} LOOKUP_STREAM_FROM_CLUSTER_OUTPUT, *PLOOKUP_STREAM_FROM_CLUSTER_OUTPUT;
typedef struct _LOOKUP_STREAM_FROM_CLUSTER_ENTRY {
<field name="OffsetToNext"><DWORD /></field>
<field name="Flags"><DWORD /></field>
<field name="Reserved"><LARGE_INTEGER /></field>
<field name="Cluster"><LARGE_INTEGER /></field>
<field name="FileName"><arr length="1"><WCHAR /></arr></field>
} LOOKUP_STREAM_FROM_CLUSTER_ENTRY, *PLOOKUP_STREAM_FROM_CLUSTER_ENTRY;
typedef struct _FILE_TYPE_NOTIFICATION_INPUT {
<field name="Flags"><DWORD /></field>
<field name="NumFileTypeIDs"><DWORD /></field>
<field name="FileTypeID"><arr length="1"><GUID /></arr></field>
} FILE_TYPE_NOTIFICATION_INPUT, *PFILE_TYPE_NOTIFICATION_INPUT;
extern const GUID FILE_TYPE_NOTIFICATION_GUID_PAGE_FILE;
extern const GUID FILE_TYPE_NOTIFICATION_GUID_HIBERNATION_FILE;
extern const GUID FILE_TYPE_NOTIFICATION_GUID_CRASHDUMP_FILE;
typedef struct _DISK_EXTENT {
<field name="DiskNumber"><DWORD /></field>
<field name="StartingOffset"><LARGE_INTEGER /></field>
<field name="ExtentLength"><LARGE_INTEGER /></field>
} DISK_EXTENT, *PDISK_EXTENT;
typedef struct _VOLUME_DISK_EXTENTS {
<field name="NumberOfDiskExtents"><DWORD /></field>
<field name="Extents"><arr length="1"><DISK_EXTENT /></arr></field>
} VOLUME_DISK_EXTENTS, *PVOLUME_DISK_EXTENTS;
typedef struct _VOLUME_GET_GPT_ATTRIBUTES_INFORMATION {
<field name="GptAttributes"><DWORDLONG /></field>
} VOLUME_GET_GPT_ATTRIBUTES_INFORMATION, *PVOLUME_GET_GPT_ATTRIBUTES_INFORMATION;
<typedef name="ULONG"><DWORD /></typedef>
<typedef name="UWORD"><WORD /></typedef>
<typedef name="UCHAR"><BYTE /></typedef>
typedef struct _SCARD_IO_REQUEST{
<field name="dwProtocol"><DWORD /></field>
<field name="cbPciLength"><DWORD /></field>
} SCARD_IO_REQUEST, *PSCARD_IO_REQUEST, *LPSCARD_IO_REQUEST;
<typedef name="LPCSCARD_IO_REQUEST"><ptr const="true"><SCARD_IO_REQUEST /></ptr></typedef>
typedef struct {
BYTE bCla, bIns, bP1, bP2, bP3;
} SCARD_T0_COMMAND, *LPSCARD_T0_COMMAND;
typedef struct {
<field name="ioRequest"><SCARD_IO_REQUEST /></field>
BYTE bSw1, bSw2;
union {
<field name="CmdBytes"><SCARD_T0_COMMAND /></field>
<field name="rgbHeader"><arr length="5"><BYTE /></arr></field>
} ;
} SCARD_T0_REQUEST;
typedef SCARD_T0_REQUEST *PSCARD_T0_REQUEST, *LPSCARD_T0_REQUEST;
typedef struct {
<field name="ioRequest"><SCARD_IO_REQUEST /></field>
} SCARD_T1_REQUEST;
typedef SCARD_T1_REQUEST *PSCARD_T1_REQUEST, *LPSCARD_T1_REQUEST;
<typedef name="LPCBYTE"><ptr const="true"><BYTE /></ptr></typedef>
<typedef name="LPCVOID"><ptr const="true"><void /></ptr></typedef>
extern const SCARD_IO_REQUEST g_rgSCardT0Pci, g_rgSCardT1Pci, g_rgSCardRawPci;
<typedef name="SCARDCONTEXT"><ULONG_PTR /></typedef>
typedef SCARDCONTEXT *PSCARDCONTEXT, *LPSCARDCONTEXT;
<typedef name="SCARDHANDLE"><ULONG_PTR /></typedef>
typedef SCARDHANDLE *PSCARDHANDLE, *LPSCARDHANDLE;
extern LONG __stdcall SCardEstablishContext( DWORD dwScope, LPCVOID pvReserved1, LPCVOID pvReserved2, LPSCARDCONTEXT phContext);
extern LONG __stdcall SCardReleaseContext( SCARDCONTEXT hContext);
extern LONG __stdcall SCardIsValidContext( SCARDCONTEXT hContext);
extern LONG __stdcall SCardListReaderGroupsA( SCARDCONTEXT hContext, LPSTR mszGroups, LPDWORD pcchGroups);
extern LONG __stdcall SCardListReaderGroupsW( SCARDCONTEXT hContext, LPWSTR mszGroups, LPDWORD pcchGroups);
extern LONG __stdcall SCardListReadersA( SCARDCONTEXT hContext, LPCSTR mszGroups, LPSTR mszReaders, LPDWORD pcchReaders);
extern LONG __stdcall SCardListReadersW( SCARDCONTEXT hContext, LPCWSTR mszGroups, LPWSTR mszReaders, LPDWORD pcchReaders);
extern LONG __stdcall SCardListCardsA( SCARDCONTEXT hContext, LPCBYTE pbAtr, LPCGUID rgquidInterfaces, DWORD cguidInterfaceCount, LPSTR mszCards, LPDWORD pcchCards);
extern LONG __stdcall SCardListCardsW( SCARDCONTEXT hContext, LPCBYTE pbAtr, LPCGUID rgquidInterfaces, DWORD cguidInterfaceCount, LPWSTR mszCards, LPDWORD pcchCards);
extern LONG __stdcall SCardListInterfacesA( SCARDCONTEXT hContext, LPCSTR szCard, LPGUID pguidInterfaces, LPDWORD pcguidInterfaces);
extern LONG __stdcall SCardListInterfacesW( SCARDCONTEXT hContext, LPCWSTR szCard, LPGUID pguidInterfaces, LPDWORD pcguidInterfaces);
extern LONG __stdcall SCardGetProviderIdA( SCARDCONTEXT hContext, LPCSTR szCard, LPGUID pguidProviderId);
extern LONG __stdcall SCardGetProviderIdW( SCARDCONTEXT hContext, LPCWSTR szCard, LPGUID pguidProviderId);
extern LONG __stdcall SCardGetCardTypeProviderNameA( SCARDCONTEXT hContext, LPCSTR szCardName, DWORD dwProviderId, LPSTR szProvider, LPDWORD pcchProvider);
extern LONG __stdcall SCardGetCardTypeProviderNameW( SCARDCONTEXT hContext, LPCWSTR szCardName, DWORD dwProviderId, LPWSTR szProvider, LPDWORD pcchProvider);
extern LONG __stdcall SCardIntroduceReaderGroupA( SCARDCONTEXT hContext, LPCSTR szGroupName);
extern LONG __stdcall SCardIntroduceReaderGroupW( SCARDCONTEXT hContext, LPCWSTR szGroupName);
extern LONG __stdcall SCardForgetReaderGroupA( SCARDCONTEXT hContext, LPCSTR szGroupName);
extern LONG __stdcall SCardForgetReaderGroupW( SCARDCONTEXT hContext, LPCWSTR szGroupName);
extern LONG __stdcall SCardIntroduceReaderA( SCARDCONTEXT hContext, LPCSTR szReaderName, LPCSTR szDeviceName);
extern LONG __stdcall SCardIntroduceReaderW( SCARDCONTEXT hContext, LPCWSTR szReaderName, LPCWSTR szDeviceName);
extern LONG __stdcall SCardForgetReaderA( SCARDCONTEXT hContext, LPCSTR szReaderName);
extern LONG __stdcall SCardForgetReaderW( SCARDCONTEXT hContext, LPCWSTR szReaderName);
extern LONG __stdcall SCardAddReaderToGroupA( SCARDCONTEXT hContext, LPCSTR szReaderName, LPCSTR szGroupName);
extern LONG __stdcall SCardAddReaderToGroupW( SCARDCONTEXT hContext, LPCWSTR szReaderName, LPCWSTR szGroupName);
extern LONG __stdcall SCardRemoveReaderFromGroupA( SCARDCONTEXT hContext, LPCSTR szReaderName, LPCSTR szGroupName);
extern LONG __stdcall SCardRemoveReaderFromGroupW( SCARDCONTEXT hContext, LPCWSTR szReaderName, LPCWSTR szGroupName);
extern LONG __stdcall SCardIntroduceCardTypeA( SCARDCONTEXT hContext, LPCSTR szCardName, LPCGUID pguidPrimaryProvider, LPCGUID rgguidInterfaces, DWORD dwInterfaceCount, LPCBYTE pbAtr, LPCBYTE pbAtrMask, DWORD cbAtrLen);
extern LONG __stdcall SCardIntroduceCardTypeW( SCARDCONTEXT hContext, LPCWSTR szCardName, LPCGUID pguidPrimaryProvider, LPCGUID rgguidInterfaces, DWORD dwInterfaceCount, LPCBYTE pbAtr, LPCBYTE pbAtrMask, DWORD cbAtrLen);
extern LONG __stdcall SCardSetCardTypeProviderNameA( SCARDCONTEXT hContext, LPCSTR szCardName, DWORD dwProviderId, LPCSTR szProvider);
extern LONG __stdcall SCardSetCardTypeProviderNameW( SCARDCONTEXT hContext, LPCWSTR szCardName, DWORD dwProviderId, LPCWSTR szProvider);
extern LONG __stdcall SCardForgetCardTypeA( SCARDCONTEXT hContext, LPCSTR szCardName);
extern LONG __stdcall SCardForgetCardTypeW( SCARDCONTEXT hContext, LPCWSTR szCardName);
extern LONG __stdcall SCardFreeMemory( SCARDCONTEXT hContext, LPCVOID pvMem);
extern HANDLE __stdcall SCardAccessStartedEvent();
extern void __stdcall SCardReleaseStartedEvent();
typedef struct {
<field name="szReader"><LPCSTR /></field>
<field name="pvUserData"><LPVOID /></field>
<field name="dwCurrentState"><DWORD /></field>
<field name="dwEventState"><DWORD /></field>
<field name="cbAtr"><DWORD /></field>
<field name="rgbAtr"><arr length="36"><BYTE /></arr></field>
} SCARD_READERSTATEA, *PSCARD_READERSTATEA, *LPSCARD_READERSTATEA;
typedef struct {
<field name="szReader"><LPCWSTR /></field>
<field name="pvUserData"><LPVOID /></field>
<field name="dwCurrentState"><DWORD /></field>
<field name="dwEventState"><DWORD /></field>
<field name="cbAtr"><DWORD /></field>
<field name="rgbAtr"><arr length="36"><BYTE /></arr></field>
} SCARD_READERSTATEW, *PSCARD_READERSTATEW, *LPSCARD_READERSTATEW;
<typedef name="SCARD_READERSTATE"><SCARD_READERSTATEA /></typedef>
<typedef name="PSCARD_READERSTATE"><PSCARD_READERSTATEA /></typedef>
<typedef name="LPSCARD_READERSTATE"><LPSCARD_READERSTATEA /></typedef>
extern LONG __stdcall SCardLocateCardsA( SCARDCONTEXT hContext, LPCSTR mszCards, LPSCARD_READERSTATEA rgReaderStates, DWORD cReaders);
extern LONG __stdcall SCardLocateCardsW( SCARDCONTEXT hContext, LPCWSTR mszCards, LPSCARD_READERSTATEW rgReaderStates, DWORD cReaders);
typedef struct _SCARD_ATRMASK {
<field name="cbAtr"><DWORD /></field>
<field name="rgbAtr"><arr length="36"><BYTE /></arr></field>
<field name="rgbMask"><arr length="36"><BYTE /></arr></field>
} SCARD_ATRMASK, *PSCARD_ATRMASK, *LPSCARD_ATRMASK;
extern LONG __stdcall SCardLocateCardsByATRA( SCARDCONTEXT hContext, LPSCARD_ATRMASK rgAtrMasks, DWORD cAtrs, LPSCARD_READERSTATEA rgReaderStates, DWORD cReaders);
extern LONG __stdcall SCardLocateCardsByATRW( SCARDCONTEXT hContext, LPSCARD_ATRMASK rgAtrMasks, DWORD cAtrs, LPSCARD_READERSTATEW rgReaderStates, DWORD cReaders);
extern LONG __stdcall SCardGetStatusChangeA( SCARDCONTEXT hContext, DWORD dwTimeout, LPSCARD_READERSTATEA rgReaderStates, DWORD cReaders);
extern LONG __stdcall SCardGetStatusChangeW( SCARDCONTEXT hContext, DWORD dwTimeout, LPSCARD_READERSTATEW rgReaderStates, DWORD cReaders);
extern LONG __stdcall SCardCancel( SCARDCONTEXT hContext);
extern LONG __stdcall SCardConnectA( SCARDCONTEXT hContext, LPCSTR szReader, DWORD dwShareMode, DWORD dwPreferredProtocols, LPSCARDHANDLE phCard, LPDWORD pdwActiveProtocol);
extern LONG __stdcall SCardConnectW( SCARDCONTEXT hContext, LPCWSTR szReader, DWORD dwShareMode, DWORD dwPreferredProtocols, LPSCARDHANDLE phCard, LPDWORD pdwActiveProtocol);
extern LONG __stdcall SCardReconnect( SCARDHANDLE hCard, DWORD dwShareMode, DWORD dwPreferredProtocols, DWORD dwInitialization, LPDWORD pdwActiveProtocol);
extern LONG __stdcall SCardDisconnect( SCARDHANDLE hCard, DWORD dwDisposition);
extern LONG __stdcall SCardBeginTransaction( SCARDHANDLE hCard);
extern LONG __stdcall SCardEndTransaction( SCARDHANDLE hCard, DWORD dwDisposition);
extern LONG __stdcall SCardCancelTransaction( SCARDHANDLE hCard);
extern LONG __stdcall SCardState( SCARDHANDLE hCard, LPDWORD pdwState, LPDWORD pdwProtocol, LPBYTE pbAtr, LPDWORD pcbAtrLen);
extern LONG __stdcall SCardStatusA( SCARDHANDLE hCard, LPSTR mszReaderNames, LPDWORD pcchReaderLen, LPDWORD pdwState, LPDWORD pdwProtocol, LPBYTE pbAtr, LPDWORD pcbAtrLen);
extern LONG __stdcall SCardStatusW( SCARDHANDLE hCard, LPWSTR mszReaderNames, LPDWORD pcchReaderLen, LPDWORD pdwState, LPDWORD pdwProtocol, LPBYTE pbAtr, LPDWORD pcbAtrLen);
extern LONG __stdcall SCardTransmit( SCARDHANDLE hCard, LPCSCARD_IO_REQUEST pioSendPci, LPCBYTE pbSendBuffer, DWORD cbSendLength, LPSCARD_IO_REQUEST pioRecvPci, LPBYTE pbRecvBuffer, LPDWORD pcbRecvLength);
extern LONG __stdcall SCardGetTransmitCount( SCARDHANDLE hCard, LPDWORD pcTransmitCount);
extern LONG __stdcall SCardControl( SCARDHANDLE hCard, DWORD dwControlCode, LPCVOID lpInBuffer, DWORD cbInBufferSize, LPVOID lpOutBuffer, DWORD cbOutBufferSize, LPDWORD lpBytesReturned);
extern LONG __stdcall SCardGetAttrib( SCARDHANDLE hCard, DWORD dwAttrId, LPBYTE pbAttr, LPDWORD pcbAttrLen);
extern LONG __stdcall SCardSetAttrib( SCARDHANDLE hCard, DWORD dwAttrId, LPCBYTE pbAttr, DWORD cbAttrLen);
typedef SCARDHANDLE (__stdcall *LPOCNCONNPROCA)(SCARDCONTEXT, LPSTR, LPSTR, PVOID);
typedef SCARDHANDLE (__stdcall *LPOCNCONNPROCW)(SCARDCONTEXT, LPWSTR, LPWSTR, PVOID);
typedef BOOL (__stdcall *LPOCNCHKPROC)(SCARDCONTEXT, SCARDHANDLE, PVOID);
typedef void (__stdcall *LPOCNDSCPROC)(SCARDCONTEXT, SCARDHANDLE, PVOID);
typedef struct {
<field name="dwStructSize"><DWORD /></field>
<field name="lpstrGroupNames"><LPSTR /></field>
<field name="nMaxGroupNames"><DWORD /></field>
<field name="rgguidInterfaces"><LPCGUID /></field>
<field name="cguidInterfaces"><DWORD /></field>
<field name="lpstrCardNames"><LPSTR /></field>
<field name="nMaxCardNames"><DWORD /></field>
<field name="lpfnCheck"><LPOCNCHKPROC /></field>
<field name="lpfnConnect"><LPOCNCONNPROCA /></field>
<field name="lpfnDisconnect"><LPOCNDSCPROC /></field>
<field name="pvUserData"><LPVOID /></field>
<field name="dwShareMode"><DWORD /></field>
<field name="dwPreferredProtocols"><DWORD /></field>
} OPENCARD_SEARCH_CRITERIAA, *POPENCARD_SEARCH_CRITERIAA, *LPOPENCARD_SEARCH_CRITERIAA;
typedef struct {
<field name="dwStructSize"><DWORD /></field>
<field name="lpstrGroupNames"><LPWSTR /></field>
<field name="nMaxGroupNames"><DWORD /></field>
<field name="rgguidInterfaces"><LPCGUID /></field>
<field name="cguidInterfaces"><DWORD /></field>
<field name="lpstrCardNames"><LPWSTR /></field>
<field name="nMaxCardNames"><DWORD /></field>
<field name="lpfnCheck"><LPOCNCHKPROC /></field>
<field name="lpfnConnect"><LPOCNCONNPROCW /></field>
<field name="lpfnDisconnect"><LPOCNDSCPROC /></field>
<field name="pvUserData"><LPVOID /></field>
<field name="dwShareMode"><DWORD /></field>
<field name="dwPreferredProtocols"><DWORD /></field>
} OPENCARD_SEARCH_CRITERIAW, *POPENCARD_SEARCH_CRITERIAW, *LPOPENCARD_SEARCH_CRITERIAW;
<typedef name="OPENCARD_SEARCH_CRITERIA"><OPENCARD_SEARCH_CRITERIAA /></typedef>
<typedef name="POPENCARD_SEARCH_CRITERIA"><POPENCARD_SEARCH_CRITERIAA /></typedef>
<typedef name="LPOPENCARD_SEARCH_CRITERIA"><LPOPENCARD_SEARCH_CRITERIAA /></typedef>
typedef struct {
<field name="dwStructSize"><DWORD /></field>
<field name="hSCardContext"><SCARDCONTEXT /></field>
<field name="hwndOwner"><HWND /></field>
<field name="dwFlags"><DWORD /></field>
<field name="lpstrTitle"><LPCSTR /></field>
<field name="lpstrSearchDesc"><LPCSTR /></field>
<field name="hIcon"><HICON /></field>
<field name="pOpenCardSearchCriteria"><POPENCARD_SEARCH_CRITERIAA /></field>
<field name="lpfnConnect"><LPOCNCONNPROCA /></field>
<field name="pvUserData"><LPVOID /></field>
<field name="dwShareMode"><DWORD /></field>
<field name="dwPreferredProtocols"><DWORD /></field>
<field name="lpstrRdr"><LPSTR /></field>
<field name="nMaxRdr"><DWORD /></field>
<field name="lpstrCard"><LPSTR /></field>
<field name="nMaxCard"><DWORD /></field>
<field name="dwActiveProtocol"><DWORD /></field>
<field name="hCardHandle"><SCARDHANDLE /></field>
} OPENCARDNAME_EXA, *POPENCARDNAME_EXA, *LPOPENCARDNAME_EXA;
typedef struct {
<field name="dwStructSize"><DWORD /></field>
<field name="hSCardContext"><SCARDCONTEXT /></field>
<field name="hwndOwner"><HWND /></field>
<field name="dwFlags"><DWORD /></field>
<field name="lpstrTitle"><LPCWSTR /></field>
<field name="lpstrSearchDesc"><LPCWSTR /></field>
<field name="hIcon"><HICON /></field>
<field name="pOpenCardSearchCriteria"><POPENCARD_SEARCH_CRITERIAW /></field>
<field name="lpfnConnect"><LPOCNCONNPROCW /></field>
<field name="pvUserData"><LPVOID /></field>
<field name="dwShareMode"><DWORD /></field>
<field name="dwPreferredProtocols"><DWORD /></field>
<field name="lpstrRdr"><LPWSTR /></field>
<field name="nMaxRdr"><DWORD /></field>
<field name="lpstrCard"><LPWSTR /></field>
<field name="nMaxCard"><DWORD /></field>
<field name="dwActiveProtocol"><DWORD /></field>
<field name="hCardHandle"><SCARDHANDLE /></field>
} OPENCARDNAME_EXW, *POPENCARDNAME_EXW, *LPOPENCARDNAME_EXW;
<typedef name="OPENCARDNAME_EX"><OPENCARDNAME_EXA /></typedef>
<typedef name="POPENCARDNAME_EX"><POPENCARDNAME_EXA /></typedef>
<typedef name="LPOPENCARDNAME_EX"><LPOPENCARDNAME_EXA /></typedef>
extern LONG __stdcall SCardUIDlgSelectCardA( LPOPENCARDNAME_EXA);
extern LONG __stdcall SCardUIDlgSelectCardW( LPOPENCARDNAME_EXW);
typedef struct {
<field name="dwStructSize"><DWORD /></field>
<field name="hwndOwner"><HWND /></field>
<field name="hSCardContext"><SCARDCONTEXT /></field>
<field name="lpstrGroupNames"><LPSTR /></field>
<field name="nMaxGroupNames"><DWORD /></field>
<field name="lpstrCardNames"><LPSTR /></field>
<field name="nMaxCardNames"><DWORD /></field>
<field name="rgguidInterfaces"><LPCGUID /></field>
<field name="cguidInterfaces"><DWORD /></field>
<field name="lpstrRdr"><LPSTR /></field>
<field name="nMaxRdr"><DWORD /></field>
<field name="lpstrCard"><LPSTR /></field>
<field name="nMaxCard"><DWORD /></field>
<field name="lpstrTitle"><LPCSTR /></field>
<field name="dwFlags"><DWORD /></field>
<field name="pvUserData"><LPVOID /></field>
<field name="dwShareMode"><DWORD /></field>
<field name="dwPreferredProtocols"><DWORD /></field>
<field name="dwActiveProtocol"><DWORD /></field>
<field name="lpfnConnect"><LPOCNCONNPROCA /></field>
<field name="lpfnCheck"><LPOCNCHKPROC /></field>
<field name="lpfnDisconnect"><LPOCNDSCPROC /></field>
<field name="hCardHandle"><SCARDHANDLE /></field>
} OPENCARDNAMEA, *POPENCARDNAMEA, *LPOPENCARDNAMEA;
typedef struct {
<field name="dwStructSize"><DWORD /></field>
<field name="hwndOwner"><HWND /></field>
<field name="hSCardContext"><SCARDCONTEXT /></field>
<field name="lpstrGroupNames"><LPWSTR /></field>
<field name="nMaxGroupNames"><DWORD /></field>
<field name="lpstrCardNames"><LPWSTR /></field>
<field name="nMaxCardNames"><DWORD /></field>
<field name="rgguidInterfaces"><LPCGUID /></field>
<field name="cguidInterfaces"><DWORD /></field>
<field name="lpstrRdr"><LPWSTR /></field>
<field name="nMaxRdr"><DWORD /></field>
<field name="lpstrCard"><LPWSTR /></field>
<field name="nMaxCard"><DWORD /></field>
<field name="lpstrTitle"><LPCWSTR /></field>
<field name="dwFlags"><DWORD /></field>
<field name="pvUserData"><LPVOID /></field>
<field name="dwShareMode"><DWORD /></field>
<field name="dwPreferredProtocols"><DWORD /></field>
<field name="dwActiveProtocol"><DWORD /></field>
<field name="lpfnConnect"><LPOCNCONNPROCW /></field>
<field name="lpfnCheck"><LPOCNCHKPROC /></field>
<field name="lpfnDisconnect"><LPOCNDSCPROC /></field>
<field name="hCardHandle"><SCARDHANDLE /></field>
} OPENCARDNAMEW, *POPENCARDNAMEW, *LPOPENCARDNAMEW;
<typedef name="OPENCARDNAME"><OPENCARDNAMEA /></typedef>
<typedef name="POPENCARDNAME"><POPENCARDNAMEA /></typedef>
<typedef name="LPOPENCARDNAME"><LPOPENCARDNAMEA /></typedef>
extern LONG __stdcall GetOpenCardNameA( LPOPENCARDNAMEA);
extern LONG __stdcall GetOpenCardNameW( LPOPENCARDNAMEW);
extern LONG __stdcall SCardDlgExtendedError ();
extern LONG __stdcall SCardReadCacheA( SCARDCONTEXT hContext, UUID *CardIdentifier, DWORD FreshnessCounter, LPSTR LookupName, PBYTE Data, DWORD *DataLen);
extern LONG __stdcall SCardReadCacheW( SCARDCONTEXT hContext, UUID *CardIdentifier, DWORD FreshnessCounter, LPWSTR LookupName, PBYTE Data, DWORD *DataLen);
extern LONG __stdcall SCardWriteCacheA( SCARDCONTEXT hContext, UUID *CardIdentifier, DWORD FreshnessCounter, LPSTR LookupName, PBYTE Data, DWORD DataLen);
extern LONG __stdcall SCardWriteCacheW( SCARDCONTEXT hContext, UUID *CardIdentifier, DWORD FreshnessCounter, LPWSTR LookupName, PBYTE Data, DWORD DataLen);
<struct name="_PSP" />
<typedef name="HPROPSHEETPAGE"><ptr><_PSP /></ptr></typedef>
<struct name="_PROPSHEETPAGEA" />
<struct name="_PROPSHEETPAGEW" />
typedef UINT (__stdcall *LPFNPSPCALLBACKA)(HWND hwnd, UINT uMsg, struct _PROPSHEETPAGEA *ppsp);
typedef UINT (__stdcall *LPFNPSPCALLBACKW)(HWND hwnd, UINT uMsg, struct _PROPSHEETPAGEW *ppsp);
<typedef name="PROPSHEETPAGE_RESOURCE"><LPCDLGTEMPLATE /></typedef>
typedef struct _PROPSHEETPAGEA_V1 {
<field name="dwSize"><DWORD /></field>
<field name="dwFlags"><DWORD /></field>
<field name="hInstance"><HINSTANCE /></field>
union { LPCSTR pszTemplate;
<field name="pResource"><PROPSHEETPAGE_RESOURCE /></field>
} ;
union { HICON hIcon;
<field name="pszIcon"><LPCSTR /></field>
} ;
<field name="pszTitle"><LPCSTR /></field>
<field name="pfnDlgProc"><DLGPROC /></field>
<field name="lParam"><LPARAM /></field>
<field name="pfnCallback"><LPFNPSPCALLBACKA /></field>
<field name="pcRefParent"><ptr><UINT /></ptr></field>
} PROPSHEETPAGEA_V1, *LPPROPSHEETPAGEA_V1;
<typedef name="LPCPROPSHEETPAGEA_V1"><ptr const="true"><PROPSHEETPAGEA_V1 /></ptr></typedef>
typedef struct _PROPSHEETPAGEA_V2 {
<field name="dwSize"><DWORD /></field>
<field name="dwFlags"><DWORD /></field>
<field name="hInstance"><HINSTANCE /></field>
union { LPCSTR pszTemplate;
<field name="pResource"><PROPSHEETPAGE_RESOURCE /></field>
} ;
union { HICON hIcon;
<field name="pszIcon"><LPCSTR /></field>
} ;
<field name="pszTitle"><LPCSTR /></field>
<field name="pfnDlgProc"><DLGPROC /></field>
<field name="lParam"><LPARAM /></field>
<field name="pfnCallback"><LPFNPSPCALLBACKA /></field>
<field name="pcRefParent"><ptr><UINT /></ptr></field>
<field name="pszHeaderTitle"><LPCSTR /></field>
<field name="pszHeaderSubTitle"><LPCSTR /></field>
} PROPSHEETPAGEA_V2, *LPPROPSHEETPAGEA_V2;
<typedef name="LPCPROPSHEETPAGEA_V2"><ptr const="true"><PROPSHEETPAGEA_V2 /></ptr></typedef>
typedef struct _PROPSHEETPAGEA_V3 {
<field name="dwSize"><DWORD /></field>
<field name="dwFlags"><DWORD /></field>
<field name="hInstance"><HINSTANCE /></field>
union { LPCSTR pszTemplate;
<field name="pResource"><PROPSHEETPAGE_RESOURCE /></field>
} ;
union { HICON hIcon;
<field name="pszIcon"><LPCSTR /></field>
} ;
<field name="pszTitle"><LPCSTR /></field>
<field name="pfnDlgProc"><DLGPROC /></field>
<field name="lParam"><LPARAM /></field>
<field name="pfnCallback"><LPFNPSPCALLBACKA /></field>
<field name="pcRefParent"><ptr><UINT /></ptr></field>
<field name="pszHeaderTitle"><LPCSTR /></field>
<field name="pszHeaderSubTitle"><LPCSTR /></field>
<field name="hActCtx"><HANDLE /></field>
} PROPSHEETPAGEA_V3, *LPPROPSHEETPAGEA_V3;
<typedef name="LPCPROPSHEETPAGEA_V3"><ptr const="true"><PROPSHEETPAGEA_V3 /></ptr></typedef>
typedef struct _PROPSHEETPAGEA {
<field name="dwSize"><DWORD /></field>
<field name="dwFlags"><DWORD /></field>
<field name="hInstance"><HINSTANCE /></field>
union { LPCSTR pszTemplate;
<field name="pResource"><PROPSHEETPAGE_RESOURCE /></field>
} ;
union { HICON hIcon;
<field name="pszIcon"><LPCSTR /></field>
} ;
<field name="pszTitle"><LPCSTR /></field>
<field name="pfnDlgProc"><DLGPROC /></field>
<field name="lParam"><LPARAM /></field>
<field name="pfnCallback"><LPFNPSPCALLBACKA /></field>
<field name="pcRefParent"><ptr><UINT /></ptr></field>
<field name="pszHeaderTitle"><LPCSTR /></field>
<field name="pszHeaderSubTitle"><LPCSTR /></field>
<field name="hActCtx"><HANDLE /></field>
union {
<field name="hbmHeader"><HBITMAP /></field>
<field name="pszbmHeader"><LPCSTR /></field>
} ;
} PROPSHEETPAGEA_V4, *LPPROPSHEETPAGEA_V4;
<typedef name="LPCPROPSHEETPAGEA_V4"><ptr const="true"><PROPSHEETPAGEA_V4 /></ptr></typedef>
typedef struct _PROPSHEETPAGEW_V1 {
<field name="dwSize"><DWORD /></field>
<field name="dwFlags"><DWORD /></field>
<field name="hInstance"><HINSTANCE /></field>
union { LPCWSTR pszTemplate;
<field name="pResource"><PROPSHEETPAGE_RESOURCE /></field>
} ;
union { HICON hIcon;
<field name="pszIcon"><LPCWSTR /></field>
} ;
<field name="pszTitle"><LPCWSTR /></field>
<field name="pfnDlgProc"><DLGPROC /></field>
<field name="lParam"><LPARAM /></field>
<field name="pfnCallback"><LPFNPSPCALLBACKW /></field>
<field name="pcRefParent"><ptr><UINT /></ptr></field>
} PROPSHEETPAGEW_V1, *LPPROPSHEETPAGEW_V1;
<typedef name="LPCPROPSHEETPAGEW_V1"><ptr const="true"><PROPSHEETPAGEW_V1 /></ptr></typedef>
typedef struct _PROPSHEETPAGEW_V2 {
<field name="dwSize"><DWORD /></field>
<field name="dwFlags"><DWORD /></field>
<field name="hInstance"><HINSTANCE /></field>
union { LPCWSTR pszTemplate;
<field name="pResource"><PROPSHEETPAGE_RESOURCE /></field>
} ;
union { HICON hIcon;
<field name="pszIcon"><LPCWSTR /></field>
} ;
<field name="pszTitle"><LPCWSTR /></field>
<field name="pfnDlgProc"><DLGPROC /></field>
<field name="lParam"><LPARAM /></field>
<field name="pfnCallback"><LPFNPSPCALLBACKW /></field>
<field name="pcRefParent"><ptr><UINT /></ptr></field>
<field name="pszHeaderTitle"><LPCWSTR /></field>
<field name="pszHeaderSubTitle"><LPCWSTR /></field>
} PROPSHEETPAGEW_V2, *LPPROPSHEETPAGEW_V2;
<typedef name="LPCPROPSHEETPAGEW_V2"><ptr const="true"><PROPSHEETPAGEW_V2 /></ptr></typedef>
typedef struct _PROPSHEETPAGEW_V3 {
<field name="dwSize"><DWORD /></field>
<field name="dwFlags"><DWORD /></field>
<field name="hInstance"><HINSTANCE /></field>
union { LPCWSTR pszTemplate;
<field name="pResource"><PROPSHEETPAGE_RESOURCE /></field>
} ;
union { HICON hIcon;
<field name="pszIcon"><LPCWSTR /></field>
} ;
<field name="pszTitle"><LPCWSTR /></field>
<field name="pfnDlgProc"><DLGPROC /></field>
<field name="lParam"><LPARAM /></field>
<field name="pfnCallback"><LPFNPSPCALLBACKW /></field>
<field name="pcRefParent"><ptr><UINT /></ptr></field>
<field name="pszHeaderTitle"><LPCWSTR /></field>
<field name="pszHeaderSubTitle"><LPCWSTR /></field>
<field name="hActCtx"><HANDLE /></field>
} PROPSHEETPAGEW_V3, *LPPROPSHEETPAGEW_V3;
<typedef name="LPCPROPSHEETPAGEW_V3"><ptr const="true"><PROPSHEETPAGEW_V3 /></ptr></typedef>
typedef struct _PROPSHEETPAGEW {
<field name="dwSize"><DWORD /></field>
<field name="dwFlags"><DWORD /></field>
<field name="hInstance"><HINSTANCE /></field>
union { LPCWSTR pszTemplate;
<field name="pResource"><PROPSHEETPAGE_RESOURCE /></field>
} ;
union { HICON hIcon;
<field name="pszIcon"><LPCWSTR /></field>
} ;
<field name="pszTitle"><LPCWSTR /></field>
<field name="pfnDlgProc"><DLGPROC /></field>
<field name="lParam"><LPARAM /></field>
<field name="pfnCallback"><LPFNPSPCALLBACKW /></field>
<field name="pcRefParent"><ptr><UINT /></ptr></field>
<field name="pszHeaderTitle"><LPCWSTR /></field>
<field name="pszHeaderSubTitle"><LPCWSTR /></field>
<field name="hActCtx"><HANDLE /></field>
union {
<field name="hbmHeader"><HBITMAP /></field>
<field name="pszbmHeader"><LPCWSTR /></field>
} ;
} PROPSHEETPAGEW_V4, *LPPROPSHEETPAGEW_V4;
<typedef name="LPCPROPSHEETPAGEW_V4"><ptr const="true"><PROPSHEETPAGEW_V4 /></ptr></typedef>
<typedef name="PROPSHEETPAGEA_LATEST"><PROPSHEETPAGEA_V4 /></typedef>
<typedef name="PROPSHEETPAGEW_LATEST"><PROPSHEETPAGEW_V4 /></typedef>
<typedef name="LPPROPSHEETPAGEA_LATEST"><LPPROPSHEETPAGEA_V4 /></typedef>
<typedef name="LPPROPSHEETPAGEW_LATEST"><LPPROPSHEETPAGEW_V4 /></typedef>
<typedef name="LPCPROPSHEETPAGEA_LATEST"><LPCPROPSHEETPAGEA_V4 /></typedef>
<typedef name="LPCPROPSHEETPAGEW_LATEST"><LPCPROPSHEETPAGEW_V4 /></typedef>
<typedef name="PROPSHEETPAGEA"><PROPSHEETPAGEA_V4 /></typedef>
<typedef name="PROPSHEETPAGEW"><PROPSHEETPAGEW_V4 /></typedef>
<typedef name="LPPROPSHEETPAGEA"><LPPROPSHEETPAGEA_V4 /></typedef>
<typedef name="LPPROPSHEETPAGEW"><LPPROPSHEETPAGEW_V4 /></typedef>
<typedef name="LPCPROPSHEETPAGEA"><LPCPROPSHEETPAGEA_V4 /></typedef>
<typedef name="LPCPROPSHEETPAGEW"><LPCPROPSHEETPAGEW_V4 /></typedef>
typedef int32 (__stdcall *PFNPROPSHEETCALLBACK)(HWND, UINT, LPARAM);
typedef struct _PROPSHEETHEADERA_V1 {
<field name="dwSize"><DWORD /></field>
<field name="dwFlags"><DWORD /></field>
<field name="hwndParent"><HWND /></field>
<field name="hInstance"><HINSTANCE /></field>
union { HICON hIcon;
<field name="pszIcon"><LPCSTR /></field>
} ;
<field name="pszCaption"><LPCSTR /></field>
<field name="nPages"><UINT /></field>
union { UINT nStartPage;
<field name="pStartPage"><LPCSTR /></field>
} ;
union { LPCPROPSHEETPAGEA ppsp;
<field name="phpage"><ptr><HPROPSHEETPAGE /></ptr></field>
} ;
<field name="pfnCallback"><PFNPROPSHEETCALLBACK /></field>
} PROPSHEETHEADERA_V1, *LPPROPSHEETHEADERA_V1;
<typedef name="LPCPROPSHEETHEADERA_V1"><ptr const="true"><PROPSHEETHEADERA_V1 /></ptr></typedef>
typedef struct _PROPSHEETHEADERA_V2 {
<field name="dwSize"><DWORD /></field>
<field name="dwFlags"><DWORD /></field>
<field name="hwndParent"><HWND /></field>
<field name="hInstance"><HINSTANCE /></field>
union { HICON hIcon;
<field name="pszIcon"><LPCSTR /></field>
} ;
<field name="pszCaption"><LPCSTR /></field>
<field name="nPages"><UINT /></field>
union { UINT nStartPage;
<field name="pStartPage"><LPCSTR /></field>
} ;
union { LPCPROPSHEETPAGEA ppsp;
<field name="phpage"><ptr><HPROPSHEETPAGE /></ptr></field>
} ;
<field name="pfnCallback"><PFNPROPSHEETCALLBACK /></field>
union {
<field name="hbmWatermark"><HBITMAP /></field>
<field name="pszbmWatermark"><LPCSTR /></field>
} ;
<field name="hplWatermark"><HPALETTE /></field>
union {
<field name="hbmHeader"><HBITMAP /></field>
<field name="pszbmHeader"><LPCSTR /></field>
} ;
} PROPSHEETHEADERA_V2, *LPPROPSHEETHEADERA_V2;
<typedef name="LPCPROPSHEETHEADERA_V2"><ptr const="true"><PROPSHEETHEADERA_V2 /></ptr></typedef>
typedef struct _PROPSHEETHEADERW_V1 {
<field name="dwSize"><DWORD /></field>
<field name="dwFlags"><DWORD /></field>
<field name="hwndParent"><HWND /></field>
<field name="hInstance"><HINSTANCE /></field>
union { HICON hIcon;
<field name="pszIcon"><LPCWSTR /></field>
} ;
<field name="pszCaption"><LPCWSTR /></field>
<field name="nPages"><UINT /></field>
union { UINT nStartPage;
<field name="pStartPage"><LPCWSTR /></field>
} ;
union { LPCPROPSHEETPAGEW ppsp;
<field name="phpage"><ptr><HPROPSHEETPAGE /></ptr></field>
} ;
<field name="pfnCallback"><PFNPROPSHEETCALLBACK /></field>
} PROPSHEETHEADERW_V1, *LPPROPSHEETHEADERW_V1;
<typedef name="LPCPROPSHEETHEADERW_V1"><ptr const="true"><PROPSHEETHEADERW_V1 /></ptr></typedef>
typedef struct _PROPSHEETHEADERW_V2 {
<field name="dwSize"><DWORD /></field>
<field name="dwFlags"><DWORD /></field>
<field name="hwndParent"><HWND /></field>
<field name="hInstance"><HINSTANCE /></field>
union { HICON hIcon;
<field name="pszIcon"><LPCWSTR /></field>
} ;
<field name="pszCaption"><LPCWSTR /></field>
<field name="nPages"><UINT /></field>
union { UINT nStartPage;
<field name="pStartPage"><LPCWSTR /></field>
} ;
union { LPCPROPSHEETPAGEW ppsp;
<field name="phpage"><ptr><HPROPSHEETPAGE /></ptr></field>
} ;
<field name="pfnCallback"><PFNPROPSHEETCALLBACK /></field>
union {
<field name="hbmWatermark"><HBITMAP /></field>
<field name="pszbmWatermark"><LPCWSTR /></field>
} ;
<field name="hplWatermark"><HPALETTE /></field>
union {
<field name="hbmHeader"><HBITMAP /></field>
<field name="pszbmHeader"><LPCWSTR /></field>
} ;
} PROPSHEETHEADERW_V2, *LPPROPSHEETHEADERW_V2;
<typedef name="LPCPROPSHEETHEADERW_V2"><ptr const="true"><PROPSHEETHEADERW_V2 /></ptr></typedef>
<typedef name="PROPSHEETHEADERA"><PROPSHEETHEADERA_V2 /></typedef>
<typedef name="PROPSHEETHEADERW"><PROPSHEETHEADERW_V2 /></typedef>
<typedef name="LPPROPSHEETHEADERA"><LPPROPSHEETHEADERA_V2 /></typedef>
<typedef name="LPPROPSHEETHEADERW"><LPPROPSHEETHEADERW_V2 /></typedef>
<typedef name="LPCPROPSHEETHEADERA"><LPCPROPSHEETHEADERA_V2 /></typedef>
<typedef name="LPCPROPSHEETHEADERW"><LPCPROPSHEETHEADERW_V2 /></typedef>
HPROPSHEETPAGE __stdcall CreatePropertySheetPageA(LPCPROPSHEETPAGEA constPropSheetPagePointer);
HPROPSHEETPAGE __stdcall CreatePropertySheetPageW(LPCPROPSHEETPAGEW constPropSheetPagePointer);
BOOL __stdcall DestroyPropertySheetPage(HPROPSHEETPAGE);
INT_PTR __stdcall PropertySheetA(LPCPROPSHEETHEADERA);
INT_PTR __stdcall PropertySheetW(LPCPROPSHEETHEADERW);
typedef BOOL (__stdcall *LPFNADDPROPSHEETPAGE)(HPROPSHEETPAGE, LPARAM);
typedef BOOL (__stdcall *LPFNADDPROPSHEETPAGES)(LPVOID, LPFNADDPROPSHEETPAGE, LPARAM);
typedef struct _PSHNOTIFY {
<field name="hdr"><NMHDR /></field>
<field name="lParam"><LPARAM /></field>
} PSHNOTIFY, *LPPSHNOTIFY;
typedef struct _PRINTER_INFO_1A {
<field name="Flags"><DWORD /></field>
<field name="pDescription"><LPSTR /></field>
<field name="pName"><LPSTR /></field>
<field name="pComment"><LPSTR /></field>
} PRINTER_INFO_1A, *PPRINTER_INFO_1A, *LPPRINTER_INFO_1A;
typedef struct _PRINTER_INFO_1W {
<field name="Flags"><DWORD /></field>
<field name="pDescription"><LPWSTR /></field>
<field name="pName"><LPWSTR /></field>
<field name="pComment"><LPWSTR /></field>
} PRINTER_INFO_1W, *PPRINTER_INFO_1W, *LPPRINTER_INFO_1W;
<typedef name="PRINTER_INFO_1"><PRINTER_INFO_1A /></typedef>
<typedef name="PPRINTER_INFO_1"><PPRINTER_INFO_1A /></typedef>
<typedef name="LPPRINTER_INFO_1"><LPPRINTER_INFO_1A /></typedef>
typedef struct _PRINTER_INFO_2A {
<field name="pServerName"><LPSTR /></field>
<field name="pPrinterName"><LPSTR /></field>
<field name="pShareName"><LPSTR /></field>
<field name="pPortName"><LPSTR /></field>
<field name="pDriverName"><LPSTR /></field>
<field name="pComment"><LPSTR /></field>
<field name="pLocation"><LPSTR /></field>
<field name="pDevMode"><LPDEVMODEA /></field>
<field name="pSepFile"><LPSTR /></field>
<field name="pPrintProcessor"><LPSTR /></field>
<field name="pDatatype"><LPSTR /></field>
<field name="pParameters"><LPSTR /></field>
<field name="pSecurityDescriptor"><PSECURITY_DESCRIPTOR /></field>
<field name="Attributes"><DWORD /></field>
<field name="Priority"><DWORD /></field>
<field name="DefaultPriority"><DWORD /></field>
<field name="StartTime"><DWORD /></field>
<field name="UntilTime"><DWORD /></field>
<field name="Status"><DWORD /></field>
<field name="cJobs"><DWORD /></field>
<field name="AveragePPM"><DWORD /></field>
} PRINTER_INFO_2A, *PPRINTER_INFO_2A, *LPPRINTER_INFO_2A;
typedef struct _PRINTER_INFO_2W {
<field name="pServerName"><LPWSTR /></field>
<field name="pPrinterName"><LPWSTR /></field>
<field name="pShareName"><LPWSTR /></field>
<field name="pPortName"><LPWSTR /></field>
<field name="pDriverName"><LPWSTR /></field>
<field name="pComment"><LPWSTR /></field>
<field name="pLocation"><LPWSTR /></field>
<field name="pDevMode"><LPDEVMODEW /></field>
<field name="pSepFile"><LPWSTR /></field>
<field name="pPrintProcessor"><LPWSTR /></field>
<field name="pDatatype"><LPWSTR /></field>
<field name="pParameters"><LPWSTR /></field>
<field name="pSecurityDescriptor"><PSECURITY_DESCRIPTOR /></field>
<field name="Attributes"><DWORD /></field>
<field name="Priority"><DWORD /></field>
<field name="DefaultPriority"><DWORD /></field>
<field name="StartTime"><DWORD /></field>
<field name="UntilTime"><DWORD /></field>
<field name="Status"><DWORD /></field>
<field name="cJobs"><DWORD /></field>
<field name="AveragePPM"><DWORD /></field>
} PRINTER_INFO_2W, *PPRINTER_INFO_2W, *LPPRINTER_INFO_2W;
<typedef name="PRINTER_INFO_2"><PRINTER_INFO_2A /></typedef>
<typedef name="PPRINTER_INFO_2"><PPRINTER_INFO_2A /></typedef>
<typedef name="LPPRINTER_INFO_2"><LPPRINTER_INFO_2A /></typedef>
typedef struct _PRINTER_INFO_3 {
<field name="pSecurityDescriptor"><PSECURITY_DESCRIPTOR /></field>
} PRINTER_INFO_3, *PPRINTER_INFO_3, *LPPRINTER_INFO_3;
typedef struct _PRINTER_INFO_4A {
<field name="pPrinterName"><LPSTR /></field>
<field name="pServerName"><LPSTR /></field>
<field name="Attributes"><DWORD /></field>
} PRINTER_INFO_4A, *PPRINTER_INFO_4A, *LPPRINTER_INFO_4A;
typedef struct _PRINTER_INFO_4W {
<field name="pPrinterName"><LPWSTR /></field>
<field name="pServerName"><LPWSTR /></field>
<field name="Attributes"><DWORD /></field>
} PRINTER_INFO_4W, *PPRINTER_INFO_4W, *LPPRINTER_INFO_4W;
<typedef name="PRINTER_INFO_4"><PRINTER_INFO_4A /></typedef>
<typedef name="PPRINTER_INFO_4"><PPRINTER_INFO_4A /></typedef>
<typedef name="LPPRINTER_INFO_4"><LPPRINTER_INFO_4A /></typedef>
typedef struct _PRINTER_INFO_5A {
<field name="pPrinterName"><LPSTR /></field>
<field name="pPortName"><LPSTR /></field>
<field name="Attributes"><DWORD /></field>
<field name="DeviceNotSelectedTimeout"><DWORD /></field>
<field name="TransmissionRetryTimeout"><DWORD /></field>
} PRINTER_INFO_5A, *PPRINTER_INFO_5A, *LPPRINTER_INFO_5A;
typedef struct _PRINTER_INFO_5W {
<field name="pPrinterName"><LPWSTR /></field>
<field name="pPortName"><LPWSTR /></field>
<field name="Attributes"><DWORD /></field>
<field name="DeviceNotSelectedTimeout"><DWORD /></field>
<field name="TransmissionRetryTimeout"><DWORD /></field>
} PRINTER_INFO_5W, *PPRINTER_INFO_5W, *LPPRINTER_INFO_5W;
<typedef name="PRINTER_INFO_5"><PRINTER_INFO_5A /></typedef>
<typedef name="PPRINTER_INFO_5"><PPRINTER_INFO_5A /></typedef>
<typedef name="LPPRINTER_INFO_5"><LPPRINTER_INFO_5A /></typedef>
typedef struct _PRINTER_INFO_6 {
<field name="dwStatus"><DWORD /></field>
} PRINTER_INFO_6, *PPRINTER_INFO_6, *LPPRINTER_INFO_6;
typedef struct _PRINTER_INFO_7A {
<field name="pszObjectGUID"><LPSTR /></field>
<field name="dwAction"><DWORD /></field>
} PRINTER_INFO_7A, *PPRINTER_INFO_7A, *LPPRINTER_INFO_7A;
typedef struct _PRINTER_INFO_7W {
<field name="pszObjectGUID"><LPWSTR /></field>
<field name="dwAction"><DWORD /></field>
} PRINTER_INFO_7W, *PPRINTER_INFO_7W, *LPPRINTER_INFO_7W;
<typedef name="PRINTER_INFO_7"><PRINTER_INFO_7A /></typedef>
<typedef name="PPRINTER_INFO_7"><PPRINTER_INFO_7A /></typedef>
<typedef name="LPPRINTER_INFO_7"><LPPRINTER_INFO_7A /></typedef>
typedef struct _PRINTER_INFO_8A {
<field name="pDevMode"><LPDEVMODEA /></field>
} PRINTER_INFO_8A, *PPRINTER_INFO_8A, *LPPRINTER_INFO_8A;
typedef struct _PRINTER_INFO_8W {
<field name="pDevMode"><LPDEVMODEW /></field>
} PRINTER_INFO_8W, *PPRINTER_INFO_8W, *LPPRINTER_INFO_8W;
<typedef name="PRINTER_INFO_8"><PRINTER_INFO_8A /></typedef>
<typedef name="PPRINTER_INFO_8"><PPRINTER_INFO_8A /></typedef>
<typedef name="LPPRINTER_INFO_8"><LPPRINTER_INFO_8A /></typedef>
typedef struct _PRINTER_INFO_9A {
<field name="pDevMode"><LPDEVMODEA /></field>
} PRINTER_INFO_9A, *PPRINTER_INFO_9A, *LPPRINTER_INFO_9A;
typedef struct _PRINTER_INFO_9W {
<field name="pDevMode"><LPDEVMODEW /></field>
} PRINTER_INFO_9W, *PPRINTER_INFO_9W, *LPPRINTER_INFO_9W;
<typedef name="PRINTER_INFO_9"><PRINTER_INFO_9A /></typedef>
<typedef name="PPRINTER_INFO_9"><PPRINTER_INFO_9A /></typedef>
<typedef name="LPPRINTER_INFO_9"><LPPRINTER_INFO_9A /></typedef>
typedef struct _JOB_INFO_1A {
<field name="JobId"><DWORD /></field>
<field name="pPrinterName"><LPSTR /></field>
<field name="pMachineName"><LPSTR /></field>
<field name="pUserName"><LPSTR /></field>
<field name="pDocument"><LPSTR /></field>
<field name="pDatatype"><LPSTR /></field>
<field name="pStatus"><LPSTR /></field>
<field name="Status"><DWORD /></field>
<field name="Priority"><DWORD /></field>
<field name="Position"><DWORD /></field>
<field name="TotalPages"><DWORD /></field>
<field name="PagesPrinted"><DWORD /></field>
<field name="Submitted"><SYSTEMTIME /></field>
} JOB_INFO_1A, *PJOB_INFO_1A, *LPJOB_INFO_1A;
typedef struct _JOB_INFO_1W {
<field name="JobId"><DWORD /></field>
<field name="pPrinterName"><LPWSTR /></field>
<field name="pMachineName"><LPWSTR /></field>
<field name="pUserName"><LPWSTR /></field>
<field name="pDocument"><LPWSTR /></field>
<field name="pDatatype"><LPWSTR /></field>
<field name="pStatus"><LPWSTR /></field>
<field name="Status"><DWORD /></field>
<field name="Priority"><DWORD /></field>
<field name="Position"><DWORD /></field>
<field name="TotalPages"><DWORD /></field>
<field name="PagesPrinted"><DWORD /></field>
<field name="Submitted"><SYSTEMTIME /></field>
} JOB_INFO_1W, *PJOB_INFO_1W, *LPJOB_INFO_1W;
<typedef name="JOB_INFO_1"><JOB_INFO_1A /></typedef>
<typedef name="PJOB_INFO_1"><PJOB_INFO_1A /></typedef>
<typedef name="LPJOB_INFO_1"><LPJOB_INFO_1A /></typedef>
typedef struct _JOB_INFO_2A {
<field name="JobId"><DWORD /></field>
<field name="pPrinterName"><LPSTR /></field>
<field name="pMachineName"><LPSTR /></field>
<field name="pUserName"><LPSTR /></field>
<field name="pDocument"><LPSTR /></field>
<field name="pNotifyName"><LPSTR /></field>
<field name="pDatatype"><LPSTR /></field>
<field name="pPrintProcessor"><LPSTR /></field>
<field name="pParameters"><LPSTR /></field>
<field name="pDriverName"><LPSTR /></field>
<field name="pDevMode"><LPDEVMODEA /></field>
<field name="pStatus"><LPSTR /></field>
<field name="pSecurityDescriptor"><PSECURITY_DESCRIPTOR /></field>
<field name="Status"><DWORD /></field>
<field name="Priority"><DWORD /></field>
<field name="Position"><DWORD /></field>
<field name="StartTime"><DWORD /></field>
<field name="UntilTime"><DWORD /></field>
<field name="TotalPages"><DWORD /></field>
<field name="Size"><DWORD /></field>
<field name="Submitted"><SYSTEMTIME /></field>
<field name="Time"><DWORD /></field>
<field name="PagesPrinted"><DWORD /></field>
} JOB_INFO_2A, *PJOB_INFO_2A, *LPJOB_INFO_2A;
typedef struct _JOB_INFO_2W {
<field name="JobId"><DWORD /></field>
<field name="pPrinterName"><LPWSTR /></field>
<field name="pMachineName"><LPWSTR /></field>
<field name="pUserName"><LPWSTR /></field>
<field name="pDocument"><LPWSTR /></field>
<field name="pNotifyName"><LPWSTR /></field>
<field name="pDatatype"><LPWSTR /></field>
<field name="pPrintProcessor"><LPWSTR /></field>
<field name="pParameters"><LPWSTR /></field>
<field name="pDriverName"><LPWSTR /></field>
<field name="pDevMode"><LPDEVMODEW /></field>
<field name="pStatus"><LPWSTR /></field>
<field name="pSecurityDescriptor"><PSECURITY_DESCRIPTOR /></field>
<field name="Status"><DWORD /></field>
<field name="Priority"><DWORD /></field>
<field name="Position"><DWORD /></field>
<field name="StartTime"><DWORD /></field>
<field name="UntilTime"><DWORD /></field>
<field name="TotalPages"><DWORD /></field>
<field name="Size"><DWORD /></field>
<field name="Submitted"><SYSTEMTIME /></field>
<field name="Time"><DWORD /></field>
<field name="PagesPrinted"><DWORD /></field>
} JOB_INFO_2W, *PJOB_INFO_2W, *LPJOB_INFO_2W;
<typedef name="JOB_INFO_2"><JOB_INFO_2A /></typedef>
<typedef name="PJOB_INFO_2"><PJOB_INFO_2A /></typedef>
<typedef name="LPJOB_INFO_2"><LPJOB_INFO_2A /></typedef>
typedef struct _JOB_INFO_3 {
<field name="JobId"><DWORD /></field>
<field name="NextJobId"><DWORD /></field>
<field name="Reserved"><DWORD /></field>
} JOB_INFO_3, *PJOB_INFO_3, *LPJOB_INFO_3;
typedef struct _JOB_INFO_4A {
<field name="JobId"><DWORD /></field>
<field name="pPrinterName"><LPSTR /></field>
<field name="pMachineName"><LPSTR /></field>
<field name="pUserName"><LPSTR /></field>
<field name="pDocument"><LPSTR /></field>
<field name="pNotifyName"><LPSTR /></field>
<field name="pDatatype"><LPSTR /></field>
<field name="pPrintProcessor"><LPSTR /></field>
<field name="pParameters"><LPSTR /></field>
<field name="pDriverName"><LPSTR /></field>
<field name="pDevMode"><LPDEVMODEA /></field>
<field name="pStatus"><LPSTR /></field>
<field name="pSecurityDescriptor"><PSECURITY_DESCRIPTOR /></field>
<field name="Status"><DWORD /></field>
<field name="Priority"><DWORD /></field>
<field name="Position"><DWORD /></field>
<field name="StartTime"><DWORD /></field>
<field name="UntilTime"><DWORD /></field>
<field name="TotalPages"><DWORD /></field>
<field name="Size"><DWORD /></field>
<field name="Submitted"><SYSTEMTIME /></field>
<field name="Time"><DWORD /></field>
<field name="PagesPrinted"><DWORD /></field>
<field name="SizeHigh"><LONG /></field>
} JOB_INFO_4A, *PJOB_INFO_4A, *LPJOB_INFO_4A;
typedef struct _JOB_INFO_4W {
<field name="JobId"><DWORD /></field>
<field name="pPrinterName"><LPWSTR /></field>
<field name="pMachineName"><LPWSTR /></field>
<field name="pUserName"><LPWSTR /></field>
<field name="pDocument"><LPWSTR /></field>
<field name="pNotifyName"><LPWSTR /></field>
<field name="pDatatype"><LPWSTR /></field>
<field name="pPrintProcessor"><LPWSTR /></field>
<field name="pParameters"><LPWSTR /></field>
<field name="pDriverName"><LPWSTR /></field>
<field name="pDevMode"><LPDEVMODEW /></field>
<field name="pStatus"><LPWSTR /></field>
<field name="pSecurityDescriptor"><PSECURITY_DESCRIPTOR /></field>
<field name="Status"><DWORD /></field>
<field name="Priority"><DWORD /></field>
<field name="Position"><DWORD /></field>
<field name="StartTime"><DWORD /></field>
<field name="UntilTime"><DWORD /></field>
<field name="TotalPages"><DWORD /></field>
<field name="Size"><DWORD /></field>
<field name="Submitted"><SYSTEMTIME /></field>
<field name="Time"><DWORD /></field>
<field name="PagesPrinted"><DWORD /></field>
<field name="SizeHigh"><LONG /></field>
} JOB_INFO_4W, *PJOB_INFO_4W, *LPJOB_INFO_4W;
<typedef name="JOB_INFO_4"><JOB_INFO_4A /></typedef>
<typedef name="PJOB_INFO_4"><PJOB_INFO_4A /></typedef>
<typedef name="LPJOB_INFO_4"><LPJOB_INFO_4A /></typedef>
typedef struct _ADDJOB_INFO_1A {
<field name="Path"><LPSTR /></field>
<field name="JobId"><DWORD /></field>
} ADDJOB_INFO_1A, *PADDJOB_INFO_1A, *LPADDJOB_INFO_1A;
typedef struct _ADDJOB_INFO_1W {
<field name="Path"><LPWSTR /></field>
<field name="JobId"><DWORD /></field>
} ADDJOB_INFO_1W, *PADDJOB_INFO_1W, *LPADDJOB_INFO_1W;
<typedef name="ADDJOB_INFO_1"><ADDJOB_INFO_1A /></typedef>
<typedef name="PADDJOB_INFO_1"><PADDJOB_INFO_1A /></typedef>
<typedef name="LPADDJOB_INFO_1"><LPADDJOB_INFO_1A /></typedef>
typedef struct _DRIVER_INFO_1A {
<field name="pName"><LPSTR /></field>
} DRIVER_INFO_1A, *PDRIVER_INFO_1A, *LPDRIVER_INFO_1A;
typedef struct _DRIVER_INFO_1W {
<field name="pName"><LPWSTR /></field>
} DRIVER_INFO_1W, *PDRIVER_INFO_1W, *LPDRIVER_INFO_1W;
<typedef name="DRIVER_INFO_1"><DRIVER_INFO_1A /></typedef>
<typedef name="PDRIVER_INFO_1"><PDRIVER_INFO_1A /></typedef>
<typedef name="LPDRIVER_INFO_1"><LPDRIVER_INFO_1A /></typedef>
typedef struct _DRIVER_INFO_2A {
<field name="cVersion"><DWORD /></field>
<field name="pName"><LPSTR /></field>
<field name="pEnvironment"><LPSTR /></field>
<field name="pDriverPath"><LPSTR /></field>
<field name="pDataFile"><LPSTR /></field>
<field name="pConfigFile"><LPSTR /></field>
} DRIVER_INFO_2A, *PDRIVER_INFO_2A, *LPDRIVER_INFO_2A;
typedef struct _DRIVER_INFO_2W {
<field name="cVersion"><DWORD /></field>
<field name="pName"><LPWSTR /></field>
<field name="pEnvironment"><LPWSTR /></field>
<field name="pDriverPath"><LPWSTR /></field>
<field name="pDataFile"><LPWSTR /></field>
<field name="pConfigFile"><LPWSTR /></field>
} DRIVER_INFO_2W, *PDRIVER_INFO_2W, *LPDRIVER_INFO_2W;
<typedef name="DRIVER_INFO_2"><DRIVER_INFO_2A /></typedef>
<typedef name="PDRIVER_INFO_2"><PDRIVER_INFO_2A /></typedef>
<typedef name="LPDRIVER_INFO_2"><LPDRIVER_INFO_2A /></typedef>
typedef struct _DRIVER_INFO_3A {
<field name="cVersion"><DWORD /></field>
<field name="pName"><LPSTR /></field>
<field name="pEnvironment"><LPSTR /></field>
<field name="pDriverPath"><LPSTR /></field>
<field name="pDataFile"><LPSTR /></field>
<field name="pConfigFile"><LPSTR /></field>
<field name="pHelpFile"><LPSTR /></field>
<field name="pDependentFiles"><LPSTR /></field>
<field name="pMonitorName"><LPSTR /></field>
<field name="pDefaultDataType"><LPSTR /></field>
} DRIVER_INFO_3A, *PDRIVER_INFO_3A, *LPDRIVER_INFO_3A;
typedef struct _DRIVER_INFO_3W {
<field name="cVersion"><DWORD /></field>
<field name="pName"><LPWSTR /></field>
<field name="pEnvironment"><LPWSTR /></field>
<field name="pDriverPath"><LPWSTR /></field>
<field name="pDataFile"><LPWSTR /></field>
<field name="pConfigFile"><LPWSTR /></field>
<field name="pHelpFile"><LPWSTR /></field>
<field name="pDependentFiles"><LPWSTR /></field>
<field name="pMonitorName"><LPWSTR /></field>
<field name="pDefaultDataType"><LPWSTR /></field>
} DRIVER_INFO_3W, *PDRIVER_INFO_3W, *LPDRIVER_INFO_3W;
<typedef name="DRIVER_INFO_3"><DRIVER_INFO_3A /></typedef>
<typedef name="PDRIVER_INFO_3"><PDRIVER_INFO_3A /></typedef>
<typedef name="LPDRIVER_INFO_3"><LPDRIVER_INFO_3A /></typedef>
typedef struct _DRIVER_INFO_4A {
<field name="cVersion"><DWORD /></field>
<field name="pName"><LPSTR /></field>
<field name="pEnvironment"><LPSTR /></field>
<field name="pDriverPath"><LPSTR /></field>
<field name="pDataFile"><LPSTR /></field>
<field name="pConfigFile"><LPSTR /></field>
<field name="pHelpFile"><LPSTR /></field>
<field name="pDependentFiles"><LPSTR /></field>
<field name="pMonitorName"><LPSTR /></field>
<field name="pDefaultDataType"><LPSTR /></field>
<field name="pszzPreviousNames"><LPSTR /></field>
} DRIVER_INFO_4A, *PDRIVER_INFO_4A, *LPDRIVER_INFO_4A;
typedef struct _DRIVER_INFO_4W {
<field name="cVersion"><DWORD /></field>
<field name="pName"><LPWSTR /></field>
<field name="pEnvironment"><LPWSTR /></field>
<field name="pDriverPath"><LPWSTR /></field>
<field name="pDataFile"><LPWSTR /></field>
<field name="pConfigFile"><LPWSTR /></field>
<field name="pHelpFile"><LPWSTR /></field>
<field name="pDependentFiles"><LPWSTR /></field>
<field name="pMonitorName"><LPWSTR /></field>
<field name="pDefaultDataType"><LPWSTR /></field>
<field name="pszzPreviousNames"><LPWSTR /></field>
} DRIVER_INFO_4W, *PDRIVER_INFO_4W, *LPDRIVER_INFO_4W;
<typedef name="DRIVER_INFO_4"><DRIVER_INFO_4A /></typedef>
<typedef name="PDRIVER_INFO_4"><PDRIVER_INFO_4A /></typedef>
<typedef name="LPDRIVER_INFO_4"><LPDRIVER_INFO_4A /></typedef>
typedef struct _DRIVER_INFO_5A {
<field name="cVersion"><DWORD /></field>
<field name="pName"><LPSTR /></field>
<field name="pEnvironment"><LPSTR /></field>
<field name="pDriverPath"><LPSTR /></field>
<field name="pDataFile"><LPSTR /></field>
<field name="pConfigFile"><LPSTR /></field>
<field name="dwDriverAttributes"><DWORD /></field>
<field name="dwConfigVersion"><DWORD /></field>
<field name="dwDriverVersion"><DWORD /></field>
} DRIVER_INFO_5A, *PDRIVER_INFO_5A, *LPDRIVER_INFO_5A;
typedef struct _DRIVER_INFO_5W {
<field name="cVersion"><DWORD /></field>
<field name="pName"><LPWSTR /></field>
<field name="pEnvironment"><LPWSTR /></field>
<field name="pDriverPath"><LPWSTR /></field>
<field name="pDataFile"><LPWSTR /></field>
<field name="pConfigFile"><LPWSTR /></field>
<field name="dwDriverAttributes"><DWORD /></field>
<field name="dwConfigVersion"><DWORD /></field>
<field name="dwDriverVersion"><DWORD /></field>
} DRIVER_INFO_5W, *PDRIVER_INFO_5W, *LPDRIVER_INFO_5W;
<typedef name="DRIVER_INFO_5"><DRIVER_INFO_5A /></typedef>
<typedef name="PDRIVER_INFO_5"><PDRIVER_INFO_5A /></typedef>
<typedef name="LPDRIVER_INFO_5"><LPDRIVER_INFO_5A /></typedef>
typedef struct _DRIVER_INFO_6A {
<field name="cVersion"><DWORD /></field>
<field name="pName"><LPSTR /></field>
<field name="pEnvironment"><LPSTR /></field>
<field name="pDriverPath"><LPSTR /></field>
<field name="pDataFile"><LPSTR /></field>
<field name="pConfigFile"><LPSTR /></field>
<field name="pHelpFile"><LPSTR /></field>
<field name="pDependentFiles"><LPSTR /></field>
<field name="pMonitorName"><LPSTR /></field>
<field name="pDefaultDataType"><LPSTR /></field>
<field name="pszzPreviousNames"><LPSTR /></field>
<field name="ftDriverDate"><FILETIME /></field>
<field name="dwlDriverVersion"><DWORDLONG /></field>
<field name="pszMfgName"><LPSTR /></field>
<field name="pszOEMUrl"><LPSTR /></field>
<field name="pszHardwareID"><LPSTR /></field>
<field name="pszProvider"><LPSTR /></field>
} DRIVER_INFO_6A, *PDRIVER_INFO_6A, *LPDRIVER_INFO_6A;
typedef struct _DRIVER_INFO_6W {
<field name="cVersion"><DWORD /></field>
<field name="pName"><LPWSTR /></field>
<field name="pEnvironment"><LPWSTR /></field>
<field name="pDriverPath"><LPWSTR /></field>
<field name="pDataFile"><LPWSTR /></field>
<field name="pConfigFile"><LPWSTR /></field>
<field name="pHelpFile"><LPWSTR /></field>
<field name="pDependentFiles"><LPWSTR /></field>
<field name="pMonitorName"><LPWSTR /></field>
<field name="pDefaultDataType"><LPWSTR /></field>
<field name="pszzPreviousNames"><LPWSTR /></field>
<field name="ftDriverDate"><FILETIME /></field>
<field name="dwlDriverVersion"><DWORDLONG /></field>
<field name="pszMfgName"><LPWSTR /></field>
<field name="pszOEMUrl"><LPWSTR /></field>
<field name="pszHardwareID"><LPWSTR /></field>
<field name="pszProvider"><LPWSTR /></field>
} DRIVER_INFO_6W, *PDRIVER_INFO_6W, *LPDRIVER_INFO_6W;
<typedef name="DRIVER_INFO_6"><DRIVER_INFO_6A /></typedef>
<typedef name="PDRIVER_INFO_6"><PDRIVER_INFO_6A /></typedef>
<typedef name="LPDRIVER_INFO_6"><LPDRIVER_INFO_6A /></typedef>
typedef struct _DRIVER_INFO_8A {
<field name="cVersion"><DWORD /></field>
<field name="pName"><LPSTR /></field>
<field name="pEnvironment"><LPSTR /></field>
<field name="pDriverPath"><LPSTR /></field>
<field name="pDataFile"><LPSTR /></field>
<field name="pConfigFile"><LPSTR /></field>
<field name="pHelpFile"><LPSTR /></field>
<field name="pDependentFiles"><LPSTR /></field>
<field name="pMonitorName"><LPSTR /></field>
<field name="pDefaultDataType"><LPSTR /></field>
<field name="pszzPreviousNames"><LPSTR /></field>
<field name="ftDriverDate"><FILETIME /></field>
<field name="dwlDriverVersion"><DWORDLONG /></field>
<field name="pszMfgName"><LPSTR /></field>
<field name="pszOEMUrl"><LPSTR /></field>
<field name="pszHardwareID"><LPSTR /></field>
<field name="pszProvider"><LPSTR /></field>
<field name="pszPrintProcessor"><LPSTR /></field>
<field name="pszVendorSetup"><LPSTR /></field>
<field name="pszzColorProfiles"><LPSTR /></field>
<field name="pszInfPath"><LPSTR /></field>
<field name="dwPrinterDriverAttributes"><DWORD /></field>
<field name="pszzCoreDriverDependencies"><LPSTR /></field>
<field name="ftMinInboxDriverVerDate"><FILETIME /></field>
<field name="dwlMinInboxDriverVerVersion"><DWORDLONG /></field>
} DRIVER_INFO_8A, *PDRIVER_INFO_8A, *LPDRIVER_INFO_8A;
typedef struct _DRIVER_INFO_8W {
<field name="cVersion"><DWORD /></field>
<field name="pName"><LPWSTR /></field>
<field name="pEnvironment"><LPWSTR /></field>
<field name="pDriverPath"><LPWSTR /></field>
<field name="pDataFile"><LPWSTR /></field>
<field name="pConfigFile"><LPWSTR /></field>
<field name="pHelpFile"><LPWSTR /></field>
<field name="pDependentFiles"><LPWSTR /></field>
<field name="pMonitorName"><LPWSTR /></field>
<field name="pDefaultDataType"><LPWSTR /></field>
<field name="pszzPreviousNames"><LPWSTR /></field>
<field name="ftDriverDate"><FILETIME /></field>
<field name="dwlDriverVersion"><DWORDLONG /></field>
<field name="pszMfgName"><LPWSTR /></field>
<field name="pszOEMUrl"><LPWSTR /></field>
<field name="pszHardwareID"><LPWSTR /></field>
<field name="pszProvider"><LPWSTR /></field>
<field name="pszPrintProcessor"><LPWSTR /></field>
<field name="pszVendorSetup"><LPWSTR /></field>
<field name="pszzColorProfiles"><LPWSTR /></field>
<field name="pszInfPath"><LPWSTR /></field>
<field name="dwPrinterDriverAttributes"><DWORD /></field>
<field name="pszzCoreDriverDependencies"><LPWSTR /></field>
<field name="ftMinInboxDriverVerDate"><FILETIME /></field>
<field name="dwlMinInboxDriverVerVersion"><DWORDLONG /></field>
} DRIVER_INFO_8W, *PDRIVER_INFO_8W, *LPDRIVER_INFO_8W;
<typedef name="DRIVER_INFO_8"><DRIVER_INFO_8A /></typedef>
<typedef name="PDRIVER_INFO_8"><PDRIVER_INFO_8A /></typedef>
<typedef name="LPDRIVER_INFO_8"><LPDRIVER_INFO_8A /></typedef>
typedef struct _DOC_INFO_1A {
<field name="pDocName"><LPSTR /></field>
<field name="pOutputFile"><LPSTR /></field>
<field name="pDatatype"><LPSTR /></field>
} DOC_INFO_1A, *PDOC_INFO_1A, *LPDOC_INFO_1A;
typedef struct _DOC_INFO_1W {
<field name="pDocName"><LPWSTR /></field>
<field name="pOutputFile"><LPWSTR /></field>
<field name="pDatatype"><LPWSTR /></field>
} DOC_INFO_1W, *PDOC_INFO_1W, *LPDOC_INFO_1W;
<typedef name="DOC_INFO_1"><DOC_INFO_1A /></typedef>
<typedef name="PDOC_INFO_1"><PDOC_INFO_1A /></typedef>
<typedef name="LPDOC_INFO_1"><LPDOC_INFO_1A /></typedef>
typedef struct _FORM_INFO_1A {
<field name="Flags"><DWORD /></field>
<field name="pName"><LPSTR /></field>
<field name="Size"><SIZEL /></field>
<field name="ImageableArea"><RECTL /></field>
} FORM_INFO_1A, *PFORM_INFO_1A, *LPFORM_INFO_1A;
typedef struct _FORM_INFO_1W {
<field name="Flags"><DWORD /></field>
<field name="pName"><LPWSTR /></field>
<field name="Size"><SIZEL /></field>
<field name="ImageableArea"><RECTL /></field>
} FORM_INFO_1W, *PFORM_INFO_1W, *LPFORM_INFO_1W;
<typedef name="FORM_INFO_1"><FORM_INFO_1A /></typedef>
<typedef name="PFORM_INFO_1"><PFORM_INFO_1A /></typedef>
<typedef name="LPFORM_INFO_1"><LPFORM_INFO_1A /></typedef>
typedef struct _FORM_INFO_2A {
<field name="Flags"><DWORD /></field>
<field name="pName"><LPCSTR /></field>
<field name="Size"><SIZEL /></field>
<field name="ImageableArea"><RECTL /></field>
<field name="pKeyword"><LPCSTR /></field>
<field name="StringType"><DWORD /></field>
<field name="pMuiDll"><LPCSTR /></field>
<field name="dwResourceId"><DWORD /></field>
<field name="pDisplayName"><LPCSTR /></field>
<field name="wLangId"><LANGID /></field>
} FORM_INFO_2A, *PFORM_INFO_2A, *LPFORM_INFO_2A;
typedef struct _FORM_INFO_2W {
<field name="Flags"><DWORD /></field>
<field name="pName"><LPCWSTR /></field>
<field name="Size"><SIZEL /></field>
<field name="ImageableArea"><RECTL /></field>
<field name="pKeyword"><LPCSTR /></field>
<field name="StringType"><DWORD /></field>
<field name="pMuiDll"><LPCWSTR /></field>
<field name="dwResourceId"><DWORD /></field>
<field name="pDisplayName"><LPCWSTR /></field>
<field name="wLangId"><LANGID /></field>
} FORM_INFO_2W, *PFORM_INFO_2W, *LPFORM_INFO_2W;
<typedef name="FORM_INFO_2"><FORM_INFO_2A /></typedef>
<typedef name="PFORM_INFO_2"><PFORM_INFO_2A /></typedef>
<typedef name="LPFORM_INFO_2"><LPFORM_INFO_2A /></typedef>
typedef struct _DOC_INFO_2A {
<field name="pDocName"><LPSTR /></field>
<field name="pOutputFile"><LPSTR /></field>
<field name="pDatatype"><LPSTR /></field>
<field name="dwMode"><DWORD /></field>
<field name="JobId"><DWORD /></field>
} DOC_INFO_2A, *PDOC_INFO_2A, *LPDOC_INFO_2A;
typedef struct _DOC_INFO_2W {
<field name="pDocName"><LPWSTR /></field>
<field name="pOutputFile"><LPWSTR /></field>
<field name="pDatatype"><LPWSTR /></field>
<field name="dwMode"><DWORD /></field>
<field name="JobId"><DWORD /></field>
} DOC_INFO_2W, *PDOC_INFO_2W, *LPDOC_INFO_2W;
<typedef name="DOC_INFO_2"><DOC_INFO_2A /></typedef>
<typedef name="PDOC_INFO_2"><PDOC_INFO_2A /></typedef>
<typedef name="LPDOC_INFO_2"><LPDOC_INFO_2A /></typedef>
typedef struct _DOC_INFO_3A {
<field name="pDocName"><LPSTR /></field>
<field name="pOutputFile"><LPSTR /></field>
<field name="pDatatype"><LPSTR /></field>
<field name="dwFlags"><DWORD /></field>
} DOC_INFO_3A, *PDOC_INFO_3A, *LPDOC_INFO_3A;
typedef struct _DOC_INFO_3W {
<field name="pDocName"><LPWSTR /></field>
<field name="pOutputFile"><LPWSTR /></field>
<field name="pDatatype"><LPWSTR /></field>
<field name="dwFlags"><DWORD /></field>
} DOC_INFO_3W, *PDOC_INFO_3W, *LPDOC_INFO_3W;
<typedef name="DOC_INFO_3"><DOC_INFO_3A /></typedef>
<typedef name="PDOC_INFO_3"><PDOC_INFO_3A /></typedef>
<typedef name="LPDOC_INFO_3"><LPDOC_INFO_3A /></typedef>
typedef struct _PRINTPROCESSOR_INFO_1A {
<field name="pName"><LPSTR /></field>
} PRINTPROCESSOR_INFO_1A, *PPRINTPROCESSOR_INFO_1A, *LPPRINTPROCESSOR_INFO_1A;
typedef struct _PRINTPROCESSOR_INFO_1W {
<field name="pName"><LPWSTR /></field>
} PRINTPROCESSOR_INFO_1W, *PPRINTPROCESSOR_INFO_1W, *LPPRINTPROCESSOR_INFO_1W;
<typedef name="PRINTPROCESSOR_INFO_1"><PRINTPROCESSOR_INFO_1A /></typedef>
<typedef name="PPRINTPROCESSOR_INFO_1"><PPRINTPROCESSOR_INFO_1A /></typedef>
<typedef name="LPPRINTPROCESSOR_INFO_1"><LPPRINTPROCESSOR_INFO_1A /></typedef>
typedef struct _PRINTPROCESSOR_CAPS_1 {
<field name="dwLevel"><DWORD /></field>
<field name="dwNupOptions"><DWORD /></field>
<field name="dwPageOrderFlags"><DWORD /></field>
<field name="dwNumberOfCopies"><DWORD /></field>
} PRINTPROCESSOR_CAPS_1, *PPRINTPROCESSOR_CAPS_1;
typedef struct _PRINTPROCESSOR_CAPS_2 {
<field name="dwLevel"><DWORD /></field>
<field name="dwNupOptions"><DWORD /></field>
<field name="dwPageOrderFlags"><DWORD /></field>
<field name="dwNumberOfCopies"><DWORD /></field>
<field name="dwDuplexHandlingCaps"><DWORD /></field>
<field name="dwNupDirectionCaps"><DWORD /></field>
<field name="dwNupBorderCaps"><DWORD /></field>
<field name="dwBookletHandlingCaps"><DWORD /></field>
<field name="dwScalingCaps"><DWORD /></field>
} PRINTPROCESSOR_CAPS_2, *PPRINTPROCESSOR_CAPS_2;
typedef struct _PORT_INFO_1A {
<field name="pName"><LPSTR /></field>
} PORT_INFO_1A, *PPORT_INFO_1A, *LPPORT_INFO_1A;
typedef struct _PORT_INFO_1W {
<field name="pName"><LPWSTR /></field>
} PORT_INFO_1W, *PPORT_INFO_1W, *LPPORT_INFO_1W;
<typedef name="PORT_INFO_1"><PORT_INFO_1A /></typedef>
<typedef name="PPORT_INFO_1"><PPORT_INFO_1A /></typedef>
<typedef name="LPPORT_INFO_1"><LPPORT_INFO_1A /></typedef>
typedef struct _PORT_INFO_2A {
<field name="pPortName"><LPSTR /></field>
<field name="pMonitorName"><LPSTR /></field>
<field name="pDescription"><LPSTR /></field>
<field name="fPortType"><DWORD /></field>
<field name="Reserved"><DWORD /></field>
} PORT_INFO_2A, *PPORT_INFO_2A, *LPPORT_INFO_2A;
typedef struct _PORT_INFO_2W {
<field name="pPortName"><LPWSTR /></field>
<field name="pMonitorName"><LPWSTR /></field>
<field name="pDescription"><LPWSTR /></field>
<field name="fPortType"><DWORD /></field>
<field name="Reserved"><DWORD /></field>
} PORT_INFO_2W, *PPORT_INFO_2W, *LPPORT_INFO_2W;
<typedef name="PORT_INFO_2"><PORT_INFO_2A /></typedef>
<typedef name="PPORT_INFO_2"><PPORT_INFO_2A /></typedef>
<typedef name="LPPORT_INFO_2"><LPPORT_INFO_2A /></typedef>
typedef struct _PORT_INFO_3A {
<field name="dwStatus"><DWORD /></field>
<field name="pszStatus"><LPSTR /></field>
<field name="dwSeverity"><DWORD /></field>
} PORT_INFO_3A, *PPORT_INFO_3A, *LPPORT_INFO_3A;
typedef struct _PORT_INFO_3W {
<field name="dwStatus"><DWORD /></field>
<field name="pszStatus"><LPWSTR /></field>
<field name="dwSeverity"><DWORD /></field>
} PORT_INFO_3W, *PPORT_INFO_3W, *LPPORT_INFO_3W;
<typedef name="PORT_INFO_3"><PORT_INFO_3A /></typedef>
<typedef name="PPORT_INFO_3"><PPORT_INFO_3A /></typedef>
<typedef name="LPPORT_INFO_3"><LPPORT_INFO_3A /></typedef>
typedef struct _MONITOR_INFO_1A{
<field name="pName"><LPSTR /></field>
} MONITOR_INFO_1A, *PMONITOR_INFO_1A, *LPMONITOR_INFO_1A;
typedef struct _MONITOR_INFO_1W{
<field name="pName"><LPWSTR /></field>
} MONITOR_INFO_1W, *PMONITOR_INFO_1W, *LPMONITOR_INFO_1W;
<typedef name="MONITOR_INFO_1"><MONITOR_INFO_1A /></typedef>
<typedef name="PMONITOR_INFO_1"><PMONITOR_INFO_1A /></typedef>
<typedef name="LPMONITOR_INFO_1"><LPMONITOR_INFO_1A /></typedef>
typedef struct _MONITOR_INFO_2A{
<field name="pName"><LPSTR /></field>
<field name="pEnvironment"><LPSTR /></field>
<field name="pDLLName"><LPSTR /></field>
} MONITOR_INFO_2A, *PMONITOR_INFO_2A, *LPMONITOR_INFO_2A;
typedef struct _MONITOR_INFO_2W{
<field name="pName"><LPWSTR /></field>
<field name="pEnvironment"><LPWSTR /></field>
<field name="pDLLName"><LPWSTR /></field>
} MONITOR_INFO_2W, *PMONITOR_INFO_2W, *LPMONITOR_INFO_2W;
<typedef name="MONITOR_INFO_2"><MONITOR_INFO_2A /></typedef>
<typedef name="PMONITOR_INFO_2"><PMONITOR_INFO_2A /></typedef>
<typedef name="LPMONITOR_INFO_2"><LPMONITOR_INFO_2A /></typedef>
typedef struct _DATATYPES_INFO_1A{
<field name="pName"><LPSTR /></field>
} DATATYPES_INFO_1A, *PDATATYPES_INFO_1A, *LPDATATYPES_INFO_1A;
typedef struct _DATATYPES_INFO_1W{
<field name="pName"><LPWSTR /></field>
} DATATYPES_INFO_1W, *PDATATYPES_INFO_1W, *LPDATATYPES_INFO_1W;
<typedef name="DATATYPES_INFO_1"><DATATYPES_INFO_1A /></typedef>
<typedef name="PDATATYPES_INFO_1"><PDATATYPES_INFO_1A /></typedef>
<typedef name="LPDATATYPES_INFO_1"><LPDATATYPES_INFO_1A /></typedef>
typedef struct _PRINTER_DEFAULTSA{
<field name="pDatatype"><LPSTR /></field>
<field name="pDevMode"><LPDEVMODEA /></field>
<field name="DesiredAccess"><ACCESS_MASK /></field>
} PRINTER_DEFAULTSA, *PPRINTER_DEFAULTSA, *LPPRINTER_DEFAULTSA;
typedef struct _PRINTER_DEFAULTSW{
<field name="pDatatype"><LPWSTR /></field>
<field name="pDevMode"><LPDEVMODEW /></field>
<field name="DesiredAccess"><ACCESS_MASK /></field>
} PRINTER_DEFAULTSW, *PPRINTER_DEFAULTSW, *LPPRINTER_DEFAULTSW;
<typedef name="PRINTER_DEFAULTS"><PRINTER_DEFAULTSA /></typedef>
<typedef name="PPRINTER_DEFAULTS"><PPRINTER_DEFAULTSA /></typedef>
<typedef name="LPPRINTER_DEFAULTS"><LPPRINTER_DEFAULTSA /></typedef>
typedef struct _PRINTER_ENUM_VALUESA {
<field name="pValueName"><LPSTR /></field>
<field name="cbValueName"><DWORD /></field>
<field name="dwType"><DWORD /></field>
<field name="pData"><LPBYTE /></field>
<field name="cbData"><DWORD /></field>
} PRINTER_ENUM_VALUESA, *PPRINTER_ENUM_VALUESA, *LPPRINTER_ENUM_VALUESA;
typedef struct _PRINTER_ENUM_VALUESW {
<field name="pValueName"><LPWSTR /></field>
<field name="cbValueName"><DWORD /></field>
<field name="dwType"><DWORD /></field>
<field name="pData"><LPBYTE /></field>
<field name="cbData"><DWORD /></field>
} PRINTER_ENUM_VALUESW, *PPRINTER_ENUM_VALUESW, *LPPRINTER_ENUM_VALUESW;
<typedef name="PRINTER_ENUM_VALUES"><PRINTER_ENUM_VALUESA /></typedef>
<typedef name="PPRINTER_ENUM_VALUES"><PPRINTER_ENUM_VALUESA /></typedef>
<typedef name="LPPRINTER_ENUM_VALUES"><LPPRINTER_ENUM_VALUESA /></typedef>
BOOL __stdcall EnumPrintersA( DWORD Flags, LPSTR Name, DWORD Level, LPBYTE pPrinterEnum, DWORD cbBuf, LPDWORD pcbNeeded, LPDWORD pcReturned );
BOOL __stdcall EnumPrintersW( DWORD Flags, LPWSTR Name, DWORD Level, LPBYTE pPrinterEnum, DWORD cbBuf, LPDWORD pcbNeeded, LPDWORD pcReturned );
HANDLE __stdcall GetSpoolFileHandle( HANDLE hPrinter );
HANDLE __stdcall CommitSpoolData( HANDLE hPrinter, HANDLE hSpoolFile, DWORD cbCommit );
BOOL __stdcall CloseSpoolFileHandle( HANDLE hPrinter, HANDLE hSpoolFile );
BOOL __stdcall OpenPrinterA( LPSTR pPrinterName, LPHANDLE phPrinter, LPPRINTER_DEFAULTSA pDefault );
BOOL __stdcall OpenPrinterW( LPWSTR pPrinterName, LPHANDLE phPrinter, LPPRINTER_DEFAULTSW pDefault );
BOOL __stdcall ResetPrinterA( HANDLE hPrinter, LPPRINTER_DEFAULTSA pDefault );
BOOL __stdcall ResetPrinterW( HANDLE hPrinter, LPPRINTER_DEFAULTSW pDefault );
BOOL __stdcall SetJobA( HANDLE hPrinter, DWORD JobId, DWORD Level, LPBYTE pJob, DWORD Command );
BOOL __stdcall SetJobW( HANDLE hPrinter, DWORD JobId, DWORD Level, LPBYTE pJob, DWORD Command );
BOOL __stdcall GetJobA( HANDLE hPrinter, DWORD JobId, DWORD Level, LPBYTE pJob, DWORD cbBuf, LPDWORD pcbNeeded );
BOOL __stdcall GetJobW( HANDLE hPrinter, DWORD JobId, DWORD Level, LPBYTE pJob, DWORD cbBuf, LPDWORD pcbNeeded );
BOOL __stdcall EnumJobsA( HANDLE hPrinter, DWORD FirstJob, DWORD NoJobs, DWORD Level, LPBYTE pJob, DWORD cbBuf, LPDWORD pcbNeeded, LPDWORD pcReturned );
BOOL __stdcall EnumJobsW( HANDLE hPrinter, DWORD FirstJob, DWORD NoJobs, DWORD Level, LPBYTE pJob, DWORD cbBuf, LPDWORD pcbNeeded, LPDWORD pcReturned );
HANDLE __stdcall AddPrinterA( LPSTR pName, DWORD Level, LPBYTE pPrinter );
HANDLE __stdcall AddPrinterW( LPWSTR pName, DWORD Level, LPBYTE pPrinter );
BOOL __stdcall DeletePrinter( HANDLE hPrinter );
BOOL __stdcall SetPrinterA( HANDLE hPrinter, DWORD Level, LPBYTE pPrinter, DWORD Command );
BOOL __stdcall SetPrinterW( HANDLE hPrinter, DWORD Level, LPBYTE pPrinter, DWORD Command );
BOOL __stdcall GetPrinterA( HANDLE hPrinter, DWORD Level, LPBYTE pPrinter, DWORD cbBuf, LPDWORD pcbNeeded );
BOOL __stdcall GetPrinterW( HANDLE hPrinter, DWORD Level, LPBYTE pPrinter, DWORD cbBuf, LPDWORD pcbNeeded );
BOOL __stdcall AddPrinterDriverA( LPSTR pName, DWORD Level, LPBYTE pDriverInfo );
BOOL __stdcall AddPrinterDriverW( LPWSTR pName, DWORD Level, LPBYTE pDriverInfo );
BOOL __stdcall AddPrinterDriverExA( LPSTR pName, DWORD Level, LPBYTE pDriverInfo, DWORD dwFileCopyFlags );
BOOL __stdcall AddPrinterDriverExW( LPWSTR pName, DWORD Level, LPBYTE pDriverInfo, DWORD dwFileCopyFlags );
BOOL __stdcall EnumPrinterDriversA( LPSTR pName, LPSTR pEnvironment, DWORD Level, LPBYTE pDriverInfo, DWORD cbBuf, LPDWORD pcbNeeded, LPDWORD pcReturned );
BOOL __stdcall EnumPrinterDriversW( LPWSTR pName, LPWSTR pEnvironment, DWORD Level, LPBYTE pDriverInfo, DWORD cbBuf, LPDWORD pcbNeeded, LPDWORD pcReturned );
BOOL __stdcall GetPrinterDriverA( HANDLE hPrinter, LPSTR pEnvironment, DWORD Level, LPBYTE pDriverInfo, DWORD cbBuf, LPDWORD pcbNeeded );
BOOL __stdcall GetPrinterDriverW( HANDLE hPrinter, LPWSTR pEnvironment, DWORD Level, LPBYTE pDriverInfo, DWORD cbBuf, LPDWORD pcbNeeded );
BOOL __stdcall GetPrinterDriverDirectoryA( LPSTR pName, LPSTR pEnvironment, DWORD Level, LPBYTE pDriverDirectory, DWORD cbBuf, LPDWORD pcbNeeded );
BOOL __stdcall GetPrinterDriverDirectoryW( LPWSTR pName, LPWSTR pEnvironment, DWORD Level, LPBYTE pDriverDirectory, DWORD cbBuf, LPDWORD pcbNeeded );
BOOL __stdcall DeletePrinterDriverA( LPSTR pName, LPSTR pEnvironment, LPSTR pDriverName );
BOOL __stdcall DeletePrinterDriverW( LPWSTR pName, LPWSTR pEnvironment, LPWSTR pDriverName );
BOOL __stdcall DeletePrinterDriverExA( LPSTR pName, LPSTR pEnvironment, LPSTR pDriverName, DWORD dwDeleteFlag, DWORD dwVersionFlag );
BOOL __stdcall DeletePrinterDriverExW( LPWSTR pName, LPWSTR pEnvironment, LPWSTR pDriverName, DWORD dwDeleteFlag, DWORD dwVersionFlag );
BOOL __stdcall AddPrintProcessorA( LPSTR pName, LPSTR pEnvironment, LPSTR pPathName, LPSTR pPrintProcessorName );
BOOL __stdcall AddPrintProcessorW( LPWSTR pName, LPWSTR pEnvironment, LPWSTR pPathName, LPWSTR pPrintProcessorName );
BOOL __stdcall EnumPrintProcessorsA( LPSTR pName, LPSTR pEnvironment, DWORD Level, LPBYTE pPrintProcessorInfo, DWORD cbBuf, LPDWORD pcbNeeded, LPDWORD pcReturned );
BOOL __stdcall EnumPrintProcessorsW( LPWSTR pName, LPWSTR pEnvironment, DWORD Level, LPBYTE pPrintProcessorInfo, DWORD cbBuf, LPDWORD pcbNeeded, LPDWORD pcReturned );
BOOL __stdcall GetPrintProcessorDirectoryA( LPSTR pName, LPSTR pEnvironment, DWORD Level, LPBYTE pPrintProcessorInfo, DWORD cbBuf, LPDWORD pcbNeeded );
BOOL __stdcall GetPrintProcessorDirectoryW( LPWSTR pName, LPWSTR pEnvironment, DWORD Level, LPBYTE pPrintProcessorInfo, DWORD cbBuf, LPDWORD pcbNeeded );
BOOL __stdcall EnumPrintProcessorDatatypesA( LPSTR pName, LPSTR pPrintProcessorName, DWORD Level, LPBYTE pDatatypes, DWORD cbBuf, LPDWORD pcbNeeded, LPDWORD pcReturned );
BOOL __stdcall EnumPrintProcessorDatatypesW( LPWSTR pName, LPWSTR pPrintProcessorName, DWORD Level, LPBYTE pDatatypes, DWORD cbBuf, LPDWORD pcbNeeded, LPDWORD pcReturned );
BOOL __stdcall DeletePrintProcessorA( LPSTR pName, LPSTR pEnvironment, LPSTR pPrintProcessorName );
BOOL __stdcall DeletePrintProcessorW( LPWSTR pName, LPWSTR pEnvironment, LPWSTR pPrintProcessorName );
DWORD __stdcall StartDocPrinterA( HANDLE hPrinter, DWORD Level, LPBYTE pDocInfo );
DWORD __stdcall StartDocPrinterW( HANDLE hPrinter, DWORD Level, LPBYTE pDocInfo );
BOOL __stdcall StartPagePrinter( HANDLE hPrinter );
BOOL __stdcall WritePrinter( HANDLE hPrinter, LPVOID pBuf, DWORD cbBuf, LPDWORD pcWritten );
BOOL __stdcall FlushPrinter( HANDLE hPrinter, LPVOID pBuf, DWORD cbBuf, LPDWORD pcWritten, DWORD cSleep );
BOOL __stdcall EndPagePrinter( HANDLE hPrinter );
BOOL __stdcall AbortPrinter( HANDLE hPrinter );
BOOL __stdcall ReadPrinter( HANDLE hPrinter, LPVOID pBuf, DWORD cbBuf, LPDWORD pNoBytesRead );
BOOL __stdcall EndDocPrinter( HANDLE hPrinter );
BOOL __stdcall AddJobA( HANDLE hPrinter, DWORD Level, LPBYTE pData, DWORD cbBuf, LPDWORD pcbNeeded );
BOOL __stdcall AddJobW( HANDLE hPrinter, DWORD Level, LPBYTE pData, DWORD cbBuf, LPDWORD pcbNeeded );
BOOL __stdcall ScheduleJob( HANDLE hPrinter, DWORD JobId );
BOOL __stdcall PrinterProperties( HWND hWnd, HANDLE hPrinter );
LONG __stdcall DocumentPropertiesA( HWND hWnd, HANDLE hPrinter, LPSTR pDeviceName, PDEVMODEA pDevModeOutput, PDEVMODEA pDevModeInput, DWORD fMode );
LONG __stdcall DocumentPropertiesW( HWND hWnd, HANDLE hPrinter, LPWSTR pDeviceName, PDEVMODEW pDevModeOutput, PDEVMODEW pDevModeInput, DWORD fMode );
LONG __stdcall AdvancedDocumentPropertiesA( HWND hWnd, HANDLE hPrinter, LPSTR pDeviceName, PDEVMODEA pDevModeOutput, PDEVMODEA pDevModeInput );
LONG __stdcall AdvancedDocumentPropertiesW( HWND hWnd, HANDLE hPrinter, LPWSTR pDeviceName, PDEVMODEW pDevModeOutput, PDEVMODEW pDevModeInput );
LONG ExtDeviceMode( HWND hWnd, HANDLE hInst, LPDEVMODEA pDevModeOutput, LPSTR pDeviceName, LPSTR pPort, LPDEVMODEA pDevModeInput, LPSTR pProfile, DWORD fMode );
DWORD __stdcall GetPrinterDataA( HANDLE hPrinter, LPSTR pValueName, LPDWORD pType, LPBYTE pData, DWORD nSize, LPDWORD pcbNeeded );
DWORD __stdcall GetPrinterDataW( HANDLE hPrinter, LPWSTR pValueName, LPDWORD pType, LPBYTE pData, DWORD nSize, LPDWORD pcbNeeded );
DWORD __stdcall GetPrinterDataExA( HANDLE hPrinter, LPCSTR pKeyName, LPCSTR pValueName, LPDWORD pType, LPBYTE pData, DWORD nSize, LPDWORD pcbNeeded );
DWORD __stdcall GetPrinterDataExW( HANDLE hPrinter, LPCWSTR pKeyName, LPCWSTR pValueName, LPDWORD pType, LPBYTE pData, DWORD nSize, LPDWORD pcbNeeded );
DWORD __stdcall EnumPrinterDataA( HANDLE hPrinter, DWORD dwIndex, LPSTR pValueName, DWORD cbValueName, LPDWORD pcbValueName, LPDWORD pType, LPBYTE pData, DWORD cbData, LPDWORD pcbData );
DWORD __stdcall EnumPrinterDataW( HANDLE hPrinter, DWORD dwIndex, LPWSTR pValueName, DWORD cbValueName, LPDWORD pcbValueName, LPDWORD pType, LPBYTE pData, DWORD cbData, LPDWORD pcbData );
DWORD __stdcall EnumPrinterDataExA( HANDLE hPrinter, LPCSTR pKeyName, LPBYTE pEnumValues, DWORD cbEnumValues, LPDWORD pcbEnumValues, LPDWORD pnEnumValues );
DWORD __stdcall EnumPrinterDataExW( HANDLE hPrinter, LPCWSTR pKeyName, LPBYTE pEnumValues, DWORD cbEnumValues, LPDWORD pcbEnumValues, LPDWORD pnEnumValues );
DWORD __stdcall EnumPrinterKeyA( HANDLE hPrinter, LPCSTR pKeyName, LPSTR pSubkey, DWORD cbSubkey, LPDWORD pcbSubkey );
DWORD __stdcall EnumPrinterKeyW( HANDLE hPrinter, LPCWSTR pKeyName, LPWSTR pSubkey, DWORD cbSubkey, LPDWORD pcbSubkey );
DWORD __stdcall SetPrinterDataA( HANDLE hPrinter, LPSTR pValueName, DWORD Type, LPBYTE pData, DWORD cbData );
DWORD __stdcall SetPrinterDataW( HANDLE hPrinter, LPWSTR pValueName, DWORD Type, LPBYTE pData, DWORD cbData );
DWORD __stdcall SetPrinterDataExA( HANDLE hPrinter, LPCSTR pKeyName, LPCSTR pValueName, DWORD Type, LPBYTE pData, DWORD cbData );
DWORD __stdcall SetPrinterDataExW( HANDLE hPrinter, LPCWSTR pKeyName, LPCWSTR pValueName, DWORD Type, LPBYTE pData, DWORD cbData );
DWORD __stdcall DeletePrinterDataA( HANDLE hPrinter, LPSTR pValueName );
DWORD __stdcall DeletePrinterDataW( HANDLE hPrinter, LPWSTR pValueName );
DWORD __stdcall DeletePrinterDataExA( HANDLE hPrinter, LPCSTR pKeyName, LPCSTR pValueName );
DWORD __stdcall DeletePrinterDataExW( HANDLE hPrinter, LPCWSTR pKeyName, LPCWSTR pValueName );
DWORD __stdcall DeletePrinterKeyA( HANDLE hPrinter, LPCSTR pKeyName );
DWORD __stdcall DeletePrinterKeyW( HANDLE hPrinter, LPCWSTR pKeyName );
typedef struct _PRINTER_NOTIFY_OPTIONS_TYPE {
<field name="Type"><WORD /></field>
<field name="Reserved0"><WORD /></field>
<field name="Reserved1"><DWORD /></field>
<field name="Reserved2"><DWORD /></field>
<field name="Count"><DWORD /></field>
<field name="pFields"><PWORD /></field>
} PRINTER_NOTIFY_OPTIONS_TYPE, *PPRINTER_NOTIFY_OPTIONS_TYPE, *LPPRINTER_NOTIFY_OPTIONS_TYPE;
typedef struct _PRINTER_NOTIFY_OPTIONS {
<field name="Version"><DWORD /></field>
<field name="Flags"><DWORD /></field>
<field name="Count"><DWORD /></field>
<field name="pTypes"><PPRINTER_NOTIFY_OPTIONS_TYPE /></field>
} PRINTER_NOTIFY_OPTIONS, *PPRINTER_NOTIFY_OPTIONS, *LPPRINTER_NOTIFY_OPTIONS;
typedef struct _PRINTER_NOTIFY_INFO_DATA {
<field name="Type"><WORD /></field>
<field name="Field"><WORD /></field>
<field name="Reserved"><DWORD /></field>
<field name="Id"><DWORD /></field>
union {
<field name="adwData"><arr length="2"><DWORD /></arr></field>
struct {
<field name="cbBuf"><DWORD /></field>
<field name="pBuf"><LPVOID /></field>
} Data;
} NotifyData;
} PRINTER_NOTIFY_INFO_DATA, *PPRINTER_NOTIFY_INFO_DATA, *LPPRINTER_NOTIFY_INFO_DATA;
typedef struct _PRINTER_NOTIFY_INFO {
<field name="Version"><DWORD /></field>
<field name="Flags"><DWORD /></field>
<field name="Count"><DWORD /></field>
<field name="aData"><arr length="1"><PRINTER_NOTIFY_INFO_DATA /></arr></field>
} PRINTER_NOTIFY_INFO, *PPRINTER_NOTIFY_INFO, *LPPRINTER_NOTIFY_INFO;
typedef struct _BINARY_CONTAINER{
<field name="cbBuf"><DWORD /></field>
<field name="pData"><LPBYTE /></field>
} BINARY_CONTAINER, *PBINARY_CONTAINER;
typedef struct _BIDI_DATA{
<field name="dwBidiType"><DWORD /></field>
union {
<field name="bData"><BOOL /></field>
<field name="iData"><LONG /></field>
<field name="sData"><LPWSTR /></field>
<field name="fData"><FLOAT /></field>
<field name="biData"><BINARY_CONTAINER /></field>
}u;
} BIDI_DATA, *PBIDI_DATA, *LPBIDI_DATA;
typedef struct _BIDI_REQUEST_DATA{
<field name="dwReqNumber"><DWORD /></field>
<field name="pSchema"><LPWSTR /></field>
<field name="data"><BIDI_DATA /></field>
} BIDI_REQUEST_DATA, *PBIDI_REQUEST_DATA, *LPBIDI_REQUEST_DATA;
typedef struct _BIDI_REQUEST_CONTAINER{
<field name="Version"><DWORD /></field>
<field name="Flags"><DWORD /></field>
<field name="Count"><DWORD /></field>
<field name="aData"><arr length=" 1 "><BIDI_REQUEST_DATA /></arr></field>
}BIDI_REQUEST_CONTAINER, *PBIDI_REQUEST_CONTAINER, *LPBIDI_REQUEST_CONTAINER;
typedef struct _BIDI_RESPONSE_DATA{
<field name="dwResult"><DWORD /></field>
<field name="dwReqNumber"><DWORD /></field>
<field name="pSchema"><LPWSTR /></field>
<field name="data"><BIDI_DATA /></field>
} BIDI_RESPONSE_DATA, *PBIDI_RESPONSE_DATA, *LPBIDI_RESPONSE_DATA;
typedef struct _BIDI_RESPONSE_CONTAINER{
<field name="Version"><DWORD /></field>
<field name="Flags"><DWORD /></field>
<field name="Count"><DWORD /></field>
<field name="aData"><arr length=" 1 "><BIDI_RESPONSE_DATA /></arr></field>
} BIDI_RESPONSE_CONTAINER, *PBIDI_RESPONSE_CONTAINER, *LPBIDI_RESPONSE_CONTAINER;
typedef enum {
BIDI_NULL = 0, BIDI_INT = 1, BIDI_FLOAT = 2, BIDI_BOOL = 3, BIDI_STRING = 4, BIDI_TEXT = 5, BIDI_ENUM = 6, BIDI_BLOB = 7 } BIDI_TYPE;
DWORD __stdcall WaitForPrinterChange( HANDLE hPrinter, DWORD Flags );
HANDLE __stdcall FindFirstPrinterChangeNotification( HANDLE hPrinter, DWORD fdwFilter, DWORD fdwOptions, PVOID pPrinterNotifyOptions );
BOOL __stdcall FindNextPrinterChangeNotification( HANDLE hChange, PDWORD pdwChange, LPVOID pvReserved, LPVOID *ppPrinterNotifyInfo );
BOOL __stdcall FreePrinterNotifyInfo( PPRINTER_NOTIFY_INFO pPrinterNotifyInfo );
BOOL __stdcall FindClosePrinterChangeNotification( HANDLE hChange );
DWORD __stdcall PrinterMessageBoxA( HANDLE hPrinter, DWORD Error, HWND hWnd, LPSTR pText, LPSTR pCaption, DWORD dwType );
DWORD __stdcall PrinterMessageBoxW( HANDLE hPrinter, DWORD Error, HWND hWnd, LPWSTR pText, LPWSTR pCaption, DWORD dwType );
BOOL __stdcall ClosePrinter( HANDLE hPrinter );
BOOL __stdcall AddFormA( HANDLE hPrinter, DWORD Level, LPBYTE pForm );
BOOL __stdcall AddFormW( HANDLE hPrinter, DWORD Level, LPBYTE pForm );
BOOL __stdcall DeleteFormA( HANDLE hPrinter, LPSTR pFormName );
BOOL __stdcall DeleteFormW( HANDLE hPrinter, LPWSTR pFormName );
BOOL __stdcall GetFormA( HANDLE hPrinter, LPSTR pFormName, DWORD Level, LPBYTE pForm, DWORD cbBuf, LPDWORD pcbNeeded );
BOOL __stdcall GetFormW( HANDLE hPrinter, LPWSTR pFormName, DWORD Level, LPBYTE pForm, DWORD cbBuf, LPDWORD pcbNeeded );
BOOL __stdcall SetFormA( HANDLE hPrinter, LPSTR pFormName, DWORD Level, LPBYTE pForm );
BOOL __stdcall SetFormW( HANDLE hPrinter, LPWSTR pFormName, DWORD Level, LPBYTE pForm );
BOOL __stdcall EnumFormsA( HANDLE hPrinter, DWORD Level, LPBYTE pForm, DWORD cbBuf, LPDWORD pcbNeeded, LPDWORD pcReturned );
BOOL __stdcall EnumFormsW( HANDLE hPrinter, DWORD Level, LPBYTE pForm, DWORD cbBuf, LPDWORD pcbNeeded, LPDWORD pcReturned );
BOOL __stdcall EnumMonitorsA( LPSTR pName, DWORD Level, LPBYTE pMonitor, DWORD cbBuf, LPDWORD pcbNeeded, LPDWORD pcReturned );
BOOL __stdcall EnumMonitorsW( LPWSTR pName, DWORD Level, LPBYTE pMonitor, DWORD cbBuf, LPDWORD pcbNeeded, LPDWORD pcReturned );
BOOL __stdcall AddMonitorA( LPSTR pName, DWORD Level, LPBYTE pMonitors );
BOOL __stdcall AddMonitorW( LPWSTR pName, DWORD Level, LPBYTE pMonitors );
BOOL __stdcall DeleteMonitorA( LPSTR pName, LPSTR pEnvironment, LPSTR pMonitorName );
BOOL __stdcall DeleteMonitorW( LPWSTR pName, LPWSTR pEnvironment, LPWSTR pMonitorName );
BOOL __stdcall EnumPortsA( LPSTR pName, DWORD Level, LPBYTE pPort, DWORD cbBuf, LPDWORD pcbNeeded, LPDWORD pcReturned );
BOOL __stdcall EnumPortsW( LPWSTR pName, DWORD Level, LPBYTE pPort, DWORD cbBuf, LPDWORD pcbNeeded, LPDWORD pcReturned );
BOOL __stdcall AddPortA( LPSTR pName, HWND hWnd, LPSTR pMonitorName );
BOOL __stdcall AddPortW( LPWSTR pName, HWND hWnd, LPWSTR pMonitorName );
BOOL __stdcall ConfigurePortA( LPSTR pName, HWND hWnd, LPSTR pPortName );
BOOL __stdcall ConfigurePortW( LPWSTR pName, HWND hWnd, LPWSTR pPortName );
BOOL __stdcall DeletePortA( LPSTR pName, HWND hWnd, LPSTR pPortName );
BOOL __stdcall DeletePortW( LPWSTR pName, HWND hWnd, LPWSTR pPortName );
BOOL __stdcall XcvDataW( HANDLE hXcv, PCWSTR pszDataName, PBYTE pInputData, DWORD cbInputData, PBYTE pOutputData, DWORD cbOutputData, PDWORD pcbOutputNeeded, PDWORD pdwStatus );
BOOL __stdcall GetDefaultPrinterA( LPSTR pszBuffer, LPDWORD pcchBuffer );
BOOL __stdcall GetDefaultPrinterW( LPWSTR pszBuffer, LPDWORD pcchBuffer );
BOOL __stdcall SetDefaultPrinterA( LPCSTR pszPrinter );
BOOL __stdcall SetDefaultPrinterW( LPCWSTR pszPrinter );
BOOL __stdcall SetPortA( LPSTR pName, LPSTR pPortName, DWORD dwLevel, LPBYTE pPortInfo );
BOOL __stdcall SetPortW( LPWSTR pName, LPWSTR pPortName, DWORD dwLevel, LPBYTE pPortInfo );
BOOL __stdcall AddPrinterConnectionA( LPSTR pName );
BOOL __stdcall AddPrinterConnectionW( LPWSTR pName );
BOOL __stdcall DeletePrinterConnectionA( LPSTR pName );
BOOL __stdcall DeletePrinterConnectionW( LPWSTR pName );
HANDLE __stdcall ConnectToPrinterDlg( HWND hwnd, DWORD Flags );
typedef struct _PROVIDOR_INFO_1A{
<field name="pName"><LPSTR /></field>
<field name="pEnvironment"><LPSTR /></field>
<field name="pDLLName"><LPSTR /></field>
} PROVIDOR_INFO_1A, *PPROVIDOR_INFO_1A, *LPPROVIDOR_INFO_1A;
typedef struct _PROVIDOR_INFO_1W{
<field name="pName"><LPWSTR /></field>
<field name="pEnvironment"><LPWSTR /></field>
<field name="pDLLName"><LPWSTR /></field>
} PROVIDOR_INFO_1W, *PPROVIDOR_INFO_1W, *LPPROVIDOR_INFO_1W;
<typedef name="PROVIDOR_INFO_1"><PROVIDOR_INFO_1A /></typedef>
<typedef name="PPROVIDOR_INFO_1"><PPROVIDOR_INFO_1A /></typedef>
<typedef name="LPPROVIDOR_INFO_1"><LPPROVIDOR_INFO_1A /></typedef>
typedef struct _PROVIDOR_INFO_2A{
<field name="pOrder"><LPSTR /></field>
} PROVIDOR_INFO_2A, *PPROVIDOR_INFO_2A, *LPPROVIDOR_INFO_2A;
typedef struct _PROVIDOR_INFO_2W{
<field name="pOrder"><LPWSTR /></field>
} PROVIDOR_INFO_2W, *PPROVIDOR_INFO_2W, *LPPROVIDOR_INFO_2W;
<typedef name="PROVIDOR_INFO_2"><PROVIDOR_INFO_2A /></typedef>
<typedef name="PPROVIDOR_INFO_2"><PPROVIDOR_INFO_2A /></typedef>
<typedef name="LPPROVIDOR_INFO_2"><LPPROVIDOR_INFO_2A /></typedef>
BOOL __stdcall AddPrintProvidorA( LPSTR pName, DWORD level, LPBYTE pProvidorInfo );
BOOL __stdcall AddPrintProvidorW( LPWSTR pName, DWORD level, LPBYTE pProvidorInfo );
BOOL __stdcall DeletePrintProvidorA( LPSTR pName, LPSTR pEnvironment, LPSTR pPrintProvidorName );
BOOL __stdcall DeletePrintProvidorW( LPWSTR pName, LPWSTR pEnvironment, LPWSTR pPrintProvidorName );
BOOL __stdcall IsValidDevmodeA( PDEVMODEA pDevmode, size_t DevmodeSize );
BOOL __stdcall IsValidDevmodeW( PDEVMODEW pDevmode, size_t DevmodeSize );
typedef enum _PRINTER_OPTION_FLAGS {
PRINTER_OPTION_NO_CACHE = 1 << 0, PRINTER_OPTION_CACHE = 1 << 1, PRINTER_OPTION_CLIENT_CHANGE = 1 << 2, PRINTER_OPTION_NO_CLIENT_DATA = 1 << 3, } PRINTER_OPTION_FLAGS;
typedef struct _PRINTER_OPTIONSA {
<field name="cbSize"><UINT /></field>
<field name="dwFlags"><DWORD /></field>
} PRINTER_OPTIONSA, *PPRINTER_OPTIONSA, *LPPRINTER_OPTIONSA;
typedef struct _PRINTER_OPTIONSW {
<field name="cbSize"><UINT /></field>
<field name="dwFlags"><DWORD /></field>
} PRINTER_OPTIONSW, *PPRINTER_OPTIONSW, *LPPRINTER_OPTIONSW;
<typedef name="PRINTER_OPTIONS"><PRINTER_OPTIONSA /></typedef>
<typedef name="PPRINTER_OPTIONS"><PPRINTER_OPTIONSA /></typedef>
<typedef name="LPPRINTER_OPTIONS"><LPPRINTER_OPTIONSA /></typedef>
BOOL __stdcall OpenPrinter2A( LPCSTR pPrinterName, LPHANDLE phPrinter, PPRINTER_DEFAULTSA pDefault, PPRINTER_OPTIONSA pOptions );
BOOL __stdcall OpenPrinter2W( LPCWSTR pPrinterName, LPHANDLE phPrinter, PPRINTER_DEFAULTSW pDefault, PPRINTER_OPTIONSW pOptions );
typedef struct _PRINTER_CONNECTION_INFO_1A {
<field name="dwFlags"><DWORD /></field>
<field name="pszDriverName"><LPSTR /></field>
} PRINTER_CONNECTION_INFO_1A, *PPRINTER_CONNECTION_INFO_1A;
typedef struct _PRINTER_CONNECTION_INFO_1W {
<field name="dwFlags"><DWORD /></field>
<field name="pszDriverName"><LPWSTR /></field>
} PRINTER_CONNECTION_INFO_1W, *PPRINTER_CONNECTION_INFO_1W;
<typedef name="PRINTER_CONNECTION_INFO_1"><PRINTER_CONNECTION_INFO_1A /></typedef>
<typedef name="PPRINTER_CONNECTION_INFO_1"><PPRINTER_CONNECTION_INFO_1A /></typedef>
BOOL __stdcall AddPrinterConnection2A( HWND hWnd, LPCSTR pszName, DWORD dwLevel, PVOID pConnectionInfo );
BOOL __stdcall AddPrinterConnection2W( HWND hWnd, LPCWSTR pszName, DWORD dwLevel, PVOID pConnectionInfo );
HRESULT __stdcall InstallPrinterDriverFromPackageA( LPCSTR pszServer, LPCSTR pszInfPath, LPCSTR pszDriverName, LPCSTR pszEnvironment, DWORD dwFlags );
HRESULT __stdcall InstallPrinterDriverFromPackageW( LPCWSTR pszServer, LPCWSTR pszInfPath, LPCWSTR pszDriverName, LPCWSTR pszEnvironment, DWORD dwFlags );
HRESULT __stdcall UploadPrinterDriverPackageA( LPCSTR pszServer, LPCSTR pszInfPath, LPCSTR pszEnvironment, DWORD dwFlags, HWND hwnd, LPSTR pszDestInfPath, PULONG pcchDestInfPath );
HRESULT __stdcall UploadPrinterDriverPackageW( LPCWSTR pszServer, LPCWSTR pszInfPath, LPCWSTR pszEnvironment, DWORD dwFlags, HWND hwnd, LPWSTR pszDestInfPath, PULONG pcchDestInfPath );
typedef struct _CORE_PRINTER_DRIVERA {
<field name="CoreDriverGUID"><GUID /></field>
<field name="ftDriverDate"><FILETIME /></field>
<field name="dwlDriverVersion"><DWORDLONG /></field>
<field name="szPackageID"><arr length="260"><CHAR /></arr></field>
} CORE_PRINTER_DRIVERA, *PCORE_PRINTER_DRIVERA;
typedef struct _CORE_PRINTER_DRIVERW {
<field name="CoreDriverGUID"><GUID /></field>
<field name="ftDriverDate"><FILETIME /></field>
<field name="dwlDriverVersion"><DWORDLONG /></field>
<field name="szPackageID"><arr length="260"><WCHAR /></arr></field>
} CORE_PRINTER_DRIVERW, *PCORE_PRINTER_DRIVERW;
<typedef name="CORE_PRINTER_DRIVER"><CORE_PRINTER_DRIVERA /></typedef>
<typedef name="PCORE_PRINTER_DRIVER"><PCORE_PRINTER_DRIVERA /></typedef>
HRESULT __stdcall GetCorePrinterDriversA( LPCSTR pszServer, LPCSTR pszEnvironment, LPCSTR pszzCoreDriverDependencies, DWORD cCorePrinterDrivers, PCORE_PRINTER_DRIVERA pCorePrinterDrivers );
HRESULT __stdcall GetCorePrinterDriversW( LPCWSTR pszServer, LPCWSTR pszEnvironment, LPCWSTR pszzCoreDriverDependencies, DWORD cCorePrinterDrivers, PCORE_PRINTER_DRIVERW pCorePrinterDrivers );
HRESULT __stdcall CorePrinterDriverInstalledA( LPCSTR pszServer, LPCSTR pszEnvironment, GUID CoreDriverGUID, FILETIME ftDriverDate, DWORDLONG dwlDriverVersion, BOOL *pbDriverInstalled );
HRESULT __stdcall CorePrinterDriverInstalledW( LPCWSTR pszServer, LPCWSTR pszEnvironment, GUID CoreDriverGUID, FILETIME ftDriverDate, DWORDLONG dwlDriverVersion, BOOL *pbDriverInstalled );
HRESULT __stdcall GetPrinterDriverPackagePathA( LPCSTR pszServer, LPCSTR pszEnvironment, LPCSTR pszLanguage, LPCSTR pszPackageID, LPSTR pszDriverPackageCab, DWORD cchDriverPackageCab, LPDWORD pcchRequiredSize );
HRESULT __stdcall GetPrinterDriverPackagePathW( LPCWSTR pszServer, LPCWSTR pszEnvironment, LPCWSTR pszLanguage, LPCWSTR pszPackageID, LPWSTR pszDriverPackageCab, DWORD cchDriverPackageCab, LPDWORD pcchRequiredSize );
HRESULT __stdcall DeletePrinterDriverPackageA( LPCSTR pszServer, LPCSTR pszInfPath, LPCSTR pszEnvironment );
HRESULT __stdcall DeletePrinterDriverPackageW( LPCWSTR pszServer, LPCWSTR pszInfPath, LPCWSTR pszEnvironment );
typedef enum {
kPropertyTypeString = 1, kPropertyTypeInt32, kPropertyTypeInt64, kPropertyTypeByte, kPropertyTypeTime, kPropertyTypeDevMode, kPropertyTypeSD, kPropertyTypeNotificationReply, kPropertyTypeNotificationOptions, kPropertyTypeBuffer } EPrintPropertyType;
typedef enum {
kAddingDocumentSequence = 0, kDocumentSequenceAdded = 1, kAddingFixedDocument = 2, kFixedDocumentAdded = 3, kAddingFixedPage = 4, kFixedPageAdded = 5, kResourceAdded = 6, kFontAdded = 7, kImageAdded = 8, kXpsDocumentCommitted = 9 } EPrintXPSJobProgress;
typedef enum {
kJobProduction = 1, kJobConsumption } EPrintXPSJobOperation;
typedef struct {
<field name="ePropertyType"><EPrintPropertyType /></field>
union {
<field name="propertyByte"><BYTE /></field>
<field name="propertyString"><PWSTR /></field>
<field name="propertyInt32"><LONG /></field>
<field name="propertyInt64"><LONGLONG /></field>
struct {
<field name="cbBuf"><DWORD /></field>
<field name="pBuf"><LPVOID /></field>
} propertyBlob;
} value;
}PrintPropertyValue;
typedef struct {
<field name="propertyName"><ptr><WCHAR /></ptr></field>
<field name="propertyValue"><PrintPropertyValue /></field>
}PrintNamedProperty;
typedef struct {
<field name="numberOfProperties"><ULONG /></field>
<field name="propertiesCollection"><ptr><PrintNamedProperty /></ptr></field>
}PrintPropertiesCollection;
HRESULT __stdcall ReportJobProcessingProgress( HANDLE printerHandle, ULONG jobId, EPrintXPSJobOperation jobOperation, EPrintXPSJobProgress jobProgress );
BOOL __stdcall GetPrinterDriver2A( HWND hWnd, HANDLE hPrinter, LPSTR pEnvironment, DWORD Level, LPBYTE pDriverInfo, DWORD cbBuf, LPDWORD pcbNeeded );
BOOL __stdcall GetPrinterDriver2W( HWND hWnd, HANDLE hPrinter, LPWSTR pEnvironment, DWORD Level, LPBYTE pDriverInfo, DWORD cbBuf, LPDWORD pcbNeeded );
typedef enum {
PRINT_EXECUTION_CONTEXT_APPLICATION = 0, PRINT_EXECUTION_CONTEXT_SPOOLER_SERVICE = 1, PRINT_EXECUTION_CONTEXT_SPOOLER_ISOLATION_HOST = 2, PRINT_EXECUTION_CONTEXT_FILTER_PIPELINE = 3, PRINT_EXECUTION_CONTEXT_WOW64 = 4 } PRINT_EXECUTION_CONTEXT;
typedef struct {
<field name="context"><PRINT_EXECUTION_CONTEXT /></field>
<field name="clientAppPID"><DWORD /></field>
} PRINT_EXECUTION_DATA;
BOOL __stdcall GetPrintExecutionData( PRINT_EXECUTION_DATA *pData );
typedef int32 (__cdecl * _onexit_t)();
typedef struct _div_t {
<field name="quot"><int32 /></field>
<field name="rem"><int32 /></field>
} div_t;
typedef struct _ldiv_t {
<field name="quot"><long /></field>
<field name="rem"><long /></field>
} ldiv_t;
typedef struct _lldiv_t {
long long quot;
long long rem;
} lldiv_t;
typedef struct {
<field name="ld"><arr length="10"><byte /></arr></field>
} _LDOUBLE;
typedef struct {
<field name="x"><double /></field>
} _CRT_DOUBLE;
typedef struct {
<field name="f"><float /></field>
} _CRT_FLOAT;
typedef struct {
long double x;
} _LONGDOUBLE;
typedef struct {
<field name="ld12"><arr length="12"><byte /></arr></field>
} _LDBL12;
typedef void (__cdecl *_purecall_handler)();
_purecall_handler __cdecl _set_purecall_handler( _purecall_handler _Handler);
_purecall_handler __cdecl _get_purecall_handler();
typedef void (__cdecl *_invalid_parameter_handler)(const wchar_t *, const wchar_t *, const wchar_t *, uint32, uintptr_t);
_invalid_parameter_handler __cdecl _set_invalid_parameter_handler( _invalid_parameter_handler _Handler);
_invalid_parameter_handler __cdecl _get_invalid_parameter_handler();
extern int32 * __cdecl _errno();
errno_t __cdecl _set_errno( int32 _Value);
errno_t __cdecl _get_errno( int32 * _Value);
uint32 * __cdecl __doserrno();
errno_t __cdecl _set_doserrno( uint32 _Value);
errno_t __cdecl _get_doserrno( uint32 * _Value);
char ** __cdecl __sys_errlist();
int32 * __cdecl __sys_nerr();
extern int32 __argc;
extern char ** __argv;
extern wchar_t ** __wargv;
extern char ** _environ;
extern wchar_t ** _wenviron;
extern char * _pgmptr;
extern wchar_t * _wpgmptr;
errno_t __cdecl _get_pgmptr( char ** _Value);
errno_t __cdecl _get_wpgmptr( wchar_t ** _Value);
extern int32 _fmode;
errno_t __cdecl _set_fmode( int32 _Mode);
errno_t __cdecl _get_fmode( int32 * _PMode);
__declspec(noreturn) void __cdecl exit( int32 _Code);
__declspec(noreturn) void __cdecl _exit( int32 _Code);
<procedure name="abort"><signature convention="__cdecl"</signature></procedure>
uint32 __cdecl _set_abort_behavior( uint32 _Flags, uint32 _Mask);
int32 __cdecl abs( int32 _X);
long __cdecl labs( long _X);
long long __cdecl llabs( long long _X);
__int64 __cdecl _abs64(__int64);
int32 __cdecl atexit(void (__cdecl *)());
double __cdecl atof( const char *_String);
double __cdecl _atof_l( const char *_String, _locale_t _Locale);
int32 __cdecl atoi( const char *_Str);
int32 __cdecl _atoi_l( const char *_Str, _locale_t _Locale);
long __cdecl atol( const char *_Str);
long __cdecl _atol_l( const char *_Str, _locale_t _Locale);
void * __cdecl bsearch_s( const void * _Key, const void * _Base, rsize_t _NumOfElements, rsize_t _SizeOfElements, int32 (__cdecl * _PtFuncCompare)(void *, const void *, const void *), void * _Context);
void * __cdecl bsearch( const void * _Key, const void * _Base, size_t _NumOfElements, size_t _SizeOfElements, int32 (__cdecl * _PtFuncCompare)(const void *, const void *));
<procedure name="qsort_s"><signature convention="__cdecl"> void * _Base, rsize_t _NumOfElements, rsize_t _SizeOfElements, int32 (__cdecl * _PtFuncCompare)(void *, const void *, const void *), void *_Context);
<procedure name="qsort"><signature convention="__cdecl"> void * _Base, size_t _NumOfElements, size_t _SizeOfElements, int32 (__cdecl * _PtFuncCompare)(const void *, const void *));
uint16 __cdecl _byteswap_ushort( uint16 _Short);
uint32 __cdecl _byteswap_ulong(uint32 _Long);
uint64 __cdecl _byteswap_uint64( uint64 _Int64);
div_t __cdecl div( int32 _Numerator, int32 _Denominator);
char * __cdecl getenv( const char * _VarName);
errno_t __cdecl getenv_s( size_t * _ReturnSize, char * _DstBuf, rsize_t _DstSize, const char * _VarName);
errno_t __cdecl _dupenv_s( char **_PBuffer, size_t * _PBufferSizeInBytes, const char * _VarName);
errno_t __cdecl _itoa_s( int32 _Value, char * _DstBuf, size_t _Size, int32 _Radix);
char * __cdecl _itoa( int32 _Value, char *_Dest, int32 _Radix);
errno_t __cdecl _i64toa_s( __int64 _Val, char * _DstBuf, size_t _Size, int32 _Radix);
char * __cdecl _i64toa( __int64 _Val, char * _DstBuf, int32 _Radix);
errno_t __cdecl _ui64toa_s( uint64 _Val, char * _DstBuf, size_t _Size, int32 _Radix);
char * __cdecl _ui64toa( uint64 _Val, char * _DstBuf, int32 _Radix);
__int64 __cdecl _atoi64( const char * _String);
__int64 __cdecl _atoi64_l( const char * _String, _locale_t _Locale);
__int64 __cdecl _strtoi64( const char * _String, char ** _EndPtr, int32 _Radix);
__int64 __cdecl _strtoi64_l( const char * _String, char ** _EndPtr, int32 _Radix, _locale_t _Locale);
uint64 __cdecl _strtoui64( const char * _String, char ** _EndPtr, int32 _Radix);
uint64 __cdecl _strtoui64_l( const char * _String, char ** _EndPtr, int32 _Radix, _locale_t _Locale);
ldiv_t __cdecl ldiv( long _Numerator, long _Denominator);
lldiv_t __cdecl lldiv( long long _Numerator, long long _Denominator);
errno_t __cdecl _ltoa_s( long _Val, char * _DstBuf, size_t _Size, int32 _Radix);
char * __cdecl _ltoa( long _Value, char *_Dest, int32 _Radix);
int32 __cdecl mblen( const char * _Ch, size_t _MaxCount);
int32 __cdecl _mblen_l( const char * _Ch, size_t _MaxCount, _locale_t _Locale);
size_t __cdecl _mbstrlen( const char * _Str);
size_t __cdecl _mbstrlen_l( const char *_Str, _locale_t _Locale);
size_t __cdecl _mbstrnlen( const char *_Str, size_t _MaxCount);
size_t __cdecl _mbstrnlen_l( const char *_Str, size_t _MaxCount, _locale_t _Locale);
int32 __cdecl mbtowc( wchar_t * _DstCh, const char * _SrcCh, size_t _SrcSizeInBytes);
int32 __cdecl _mbtowc_l( wchar_t * _DstCh, const char * _SrcCh, size_t _SrcSizeInBytes, _locale_t _Locale);
errno_t __cdecl mbstowcs_s( size_t * _PtNumOfCharConverted, wchar_t * _DstBuf, size_t _SizeInWords, const char * _SrcBuf, size_t _MaxCount );
size_t __cdecl mbstowcs( wchar_t *_Dest, const char * _Source, size_t _MaxCount);
errno_t __cdecl _mbstowcs_s_l( size_t * _PtNumOfCharConverted, wchar_t * _DstBuf, size_t _SizeInWords, const char * _SrcBuf, size_t _MaxCount, _locale_t _Locale);
size_t __cdecl _mbstowcs_l( wchar_t *_Dest, const char * _Source, size_t _MaxCount, _locale_t _Locale);
int32 __cdecl rand();
int32 __cdecl _set_error_mode( int32 _Mode);
<procedure name="srand"><signature convention="__cdecl"> uint32 _Seed);
double __cdecl strtod( const char * _Str, char ** _EndPtr);
double __cdecl _strtod_l( const char * _Str, char ** _EndPtr, _locale_t _Locale);
long __cdecl strtol( const char * _Str, char ** _EndPtr, int32 _Radix );
long __cdecl _strtol_l( const char *_Str, char **_EndPtr, int32 _Radix, _locale_t _Locale);
uint32 __cdecl strtoul( const char * _Str, char ** _EndPtr, int32 _Radix);
uint32 __cdecl _strtoul_l(const char * _Str, char **_EndPtr, int32 _Radix, _locale_t _Locale);
int32 __cdecl system( const char * _Command);
errno_t __cdecl _ultoa_s( uint32 _Val, char * _DstBuf, size_t _Size, int32 _Radix);
char * __cdecl _ultoa( uint32 _Value, char *_Dest, int32 _Radix);
int32 __cdecl wctomb( char * _MbCh, wchar_t _WCh);
int32 __cdecl _wctomb_l( char * _MbCh, wchar_t _WCh, _locale_t _Locale);
errno_t __cdecl wctomb_s( int32 * _SizeConverted, char * _MbCh, rsize_t _SizeInBytes, wchar_t _WCh);
errno_t __cdecl _wctomb_s_l( int32 * _SizeConverted, char * _MbCh, size_t _SizeInBytes, wchar_t _WCh, _locale_t _Locale);
errno_t __cdecl wcstombs_s( size_t * _PtNumOfCharConverted, char * _Dst, size_t _DstSizeInBytes, const wchar_t * _Src, size_t _MaxCountInBytes);
size_t __cdecl wcstombs( char *_Dest, const wchar_t * _Source, size_t _MaxCount);
errno_t __cdecl _wcstombs_s_l( size_t * _PtNumOfCharConverted, char * _Dst, size_t _DstSizeInBytes, const wchar_t * _Src, size_t _MaxCountInBytes, _locale_t _Locale);
size_t __cdecl _wcstombs_l( char *_Dest, const wchar_t * _Source, size_t _MaxCount, _locale_t _Locale);
__declspec(noalias) __declspec(restrict) void * __cdecl calloc( size_t _Count, size_t _Size);
__declspec(noalias) void __cdecl free( void * _Memory);
__declspec(noalias) __declspec(restrict) void * __cdecl malloc( size_t _Size);
__declspec(noalias) __declspec(restrict) void * __cdecl realloc( void * _Memory, size_t _NewSize);
__declspec(noalias) __declspec(restrict) void * __cdecl _recalloc( void * _Memory, size_t _Count, size_t _Size);
__declspec(noalias) void __cdecl _aligned_free( void * _Memory);
__declspec(noalias) __declspec(restrict) void * __cdecl _aligned_malloc( size_t _Size, size_t _Alignment);
__declspec(noalias) __declspec(restrict) void * __cdecl _aligned_offset_malloc( size_t _Size, size_t _Alignment, size_t _Offset);
__declspec(noalias) __declspec(restrict) void * __cdecl _aligned_realloc( void * _Memory, size_t _NewSize, size_t _Alignment);
__declspec(noalias) __declspec(restrict) void * __cdecl _aligned_recalloc( void * _Memory, size_t _Count, size_t _Size, size_t _Alignment);
__declspec(noalias) __declspec(restrict) void * __cdecl _aligned_offset_realloc( void * _Memory, size_t _NewSize, size_t _Alignment, size_t _Offset);
__declspec(noalias) __declspec(restrict) void * __cdecl _aligned_offset_recalloc( void * _Memory, size_t _Count, size_t _Size, size_t _Alignment, size_t _Offset);
size_t __cdecl _aligned_msize( void * _Memory, size_t _Alignment, size_t _Offset);
errno_t __cdecl _itow_s(int32 _Val, wchar_t * _DstBuf, size_t _SizeInWords, int32 _Radix);
wchar_t * __cdecl _itow( int32 _Value, wchar_t *_Dest, int32 _Radix);
errno_t __cdecl _ltow_s(long _Val, wchar_t * _DstBuf, size_t _SizeInWords, int32 _Radix);
wchar_t * __cdecl _ltow( long _Value, wchar_t *_Dest, int32 _Radix);
errno_t __cdecl _ultow_s(uint32 _Val, wchar_t * _DstBuf, size_t _SizeInWords, int32 _Radix);
wchar_t * __cdecl _ultow( uint32 _Value, wchar_t *_Dest, int32 _Radix);
double __cdecl wcstod( const wchar_t * _Str, wchar_t ** _EndPtr);
double __cdecl _wcstod_l( const wchar_t *_Str, wchar_t ** _EndPtr, _locale_t _Locale);
long __cdecl wcstol( const wchar_t *_Str, wchar_t ** _EndPtr, int32 _Radix);
long __cdecl _wcstol_l( const wchar_t *_Str, wchar_t **_EndPtr, int32 _Radix, _locale_t _Locale);
uint32 __cdecl wcstoul( const wchar_t *_Str, wchar_t ** _EndPtr, int32 _Radix);
uint32 __cdecl _wcstoul_l( const wchar_t *_Str, wchar_t **_EndPtr, int32 _Radix, _locale_t _Locale);
wchar_t * __cdecl _wgetenv( const wchar_t * _VarName);
errno_t __cdecl _wgetenv_s( size_t * _ReturnSize, wchar_t * _DstBuf, size_t _DstSizeInWords, const wchar_t * _VarName);
errno_t __cdecl _wdupenv_s( wchar_t **_Buffer, size_t *_BufferSizeInWords, const wchar_t *_VarName);
int32 __cdecl _wsystem( const wchar_t * _Command);
double __cdecl _wtof( const wchar_t *_Str);
double __cdecl _wtof_l( const wchar_t *_Str, _locale_t _Locale);
int32 __cdecl _wtoi( const wchar_t *_Str);
int32 __cdecl _wtoi_l( const wchar_t *_Str, _locale_t _Locale);
long __cdecl _wtol( const wchar_t *_Str);
long __cdecl _wtol_l( const wchar_t *_Str, _locale_t _Locale);
errno_t __cdecl _i64tow_s( __int64 _Val, wchar_t * _DstBuf, size_t _SizeInWords, int32 _Radix);
wchar_t * __cdecl _i64tow( __int64 _Val, wchar_t * _DstBuf, int32 _Radix);
errno_t __cdecl _ui64tow_s( uint64 _Val, wchar_t * _DstBuf, size_t _SizeInWords, int32 _Radix);
wchar_t * __cdecl _ui64tow( uint64 _Val, wchar_t * _DstBuf, int32 _Radix);
__int64 __cdecl _wtoi64( const wchar_t *_Str);
__int64 __cdecl _wtoi64_l( const wchar_t *_Str, _locale_t _Locale);
__int64 __cdecl _wcstoi64( const wchar_t * _Str, wchar_t ** _EndPtr, int32 _Radix);
__int64 __cdecl _wcstoi64_l( const wchar_t * _Str, wchar_t ** _EndPtr, int32 _Radix, _locale_t _Locale);
uint64 __cdecl _wcstoui64( const wchar_t * _Str, wchar_t ** _EndPtr, int32 _Radix);
uint64 __cdecl _wcstoui64_l( const wchar_t *_Str, wchar_t ** _EndPtr, int32 _Radix, _locale_t _Locale);
char * __cdecl _fullpath( char * _FullPath, const char * _Path, size_t _SizeInBytes);
errno_t __cdecl _ecvt_s( char * _DstBuf, size_t _Size, double _Val, int32 _NumOfDights, int32 * _PtDec, int32 * _PtSign);
char * __cdecl _ecvt( double _Val, int32 _NumOfDigits, int32 * _PtDec, int32 * _PtSign);
errno_t __cdecl _fcvt_s( char * _DstBuf, size_t _Size, double _Val, int32 _NumOfDec, int32 * _PtDec, int32 * _PtSign);
char * __cdecl _fcvt( double _Val, int32 _NumOfDec, int32 * _PtDec, int32 * _PtSign);
errno_t __cdecl _gcvt_s( char * _DstBuf, size_t _Size, double _Val, int32 _NumOfDigits);
char * __cdecl _gcvt( double _Val, int32 _NumOfDigits, char * _DstBuf);
int32 __cdecl _atodbl( _CRT_DOUBLE * _Result, char * _Str);
int32 __cdecl _atoldbl( _LDOUBLE * _Result, char * _Str);
int32 __cdecl _atoflt( _CRT_FLOAT * _Result, char * _Str);
int32 __cdecl _atodbl_l( _CRT_DOUBLE * _Result, char * _Str, _locale_t _Locale);
int32 __cdecl _atoldbl_l( _LDOUBLE * _Result, char * _Str, _locale_t _Locale);
int32 __cdecl _atoflt_l( _CRT_FLOAT * _Result, char * _Str, _locale_t _Locale);
uint32 __cdecl _lrotl( uint32 _Val, int32 _Shift);
uint32 __cdecl _lrotr( uint32 _Val, int32 _Shift);
errno_t __cdecl _makepath_s( char * _PathResult, size_t _SizeInWords, const char * _Drive, const char * _Dir, const char * _Filename, const char * _Ext);
void __cdecl _makepath( char *_Path, const char * _Drive, const char * _Dir, const char * _Filename, const char * _Ext);
_onexit_t __cdecl _onexit( _onexit_t _Func);
<procedure name="perror"><signature convention="__cdecl"> const char * _ErrMsg);
int32 __cdecl _putenv( const char * _EnvString);
errno_t __cdecl _putenv_s( const char * _Name, const char * _Value);
uint32 __cdecl _rotl( uint32 _Val, int32 _Shift);
uint64 __cdecl _rotl64( uint64 _Val, int32 _Shift);
uint32 __cdecl _rotr( uint32 _Val, int32 _Shift);
uint64 __cdecl _rotr64( uint64 _Val, int32 _Shift);
errno_t __cdecl _searchenv_s( const char * _Filename, const char * _EnvVar, char * _ResultPath, size_t _SizeInBytes);
void __cdecl _searchenv( const char * _Filename, const char * _EnvVar, char *_ResultPath);
void __cdecl _splitpath( const char * _FullPath, char * _Drive, char * _Dir, char * _Filename, char * _Ext);
errno_t __cdecl _splitpath_s( const char * _FullPath, char * _Drive, size_t _DriveSize, char * _Dir, size_t _DirSize, char * _Filename, size_t _FilenameSize, char * _Ext, size_t _ExtSize);
<procedure name="_swab"><signature convention="__cdecl"> char * _Buf1, char * _Buf2, int32 _SizeInBytes);
wchar_t * __cdecl _wfullpath( wchar_t * _FullPath, const wchar_t * _Path, size_t _SizeInWords);
errno_t __cdecl _wmakepath_s( wchar_t * _PathResult, size_t _SIZE, const wchar_t * _Drive, const wchar_t * _Dir, const wchar_t * _Filename, const wchar_t * _Ext);
void __cdecl _wmakepath( wchar_t *_ResultPath, const wchar_t * _Drive, const wchar_t * _Dir, const wchar_t * _Filename, const wchar_t * _Ext);
<procedure name="_wperror"><signature convention="__cdecl"> const wchar_t * _ErrMsg);
int32 __cdecl _wputenv( const wchar_t * _EnvString);
errno_t __cdecl _wputenv_s( const wchar_t * _Name, const wchar_t * _Value);
errno_t __cdecl _wsearchenv_s( const wchar_t * _Filename, const wchar_t * _EnvVar, wchar_t * _ResultPath, size_t _SizeInWords);
void __cdecl _wsearchenv( const wchar_t * _Filename, const wchar_t * _EnvVar, wchar_t *_ResultPath);
void __cdecl _wsplitpath( const wchar_t * _FullPath, wchar_t * _Drive, wchar_t * _Dir, wchar_t * _Filename, wchar_t * _Ext);
errno_t __cdecl _wsplitpath_s( const wchar_t * _FullPath, wchar_t * _Drive, size_t _DriveSize, wchar_t * _Dir, size_t _DirSize, wchar_t * _Filename, size_t _FilenameSize, wchar_t * _Ext, size_t _ExtSize);
void __cdecl _seterrormode( int32 _Mode);
void __cdecl _beep( unsigned _Frequency, unsigned _Duration);
void __cdecl _sleep( uint32 _Duration);
char * __cdecl ecvt( double _Val, int32 _NumOfDigits, int32 * _PtDec, int32 * _PtSign);
char * __cdecl fcvt( double _Val, int32 _NumOfDec, int32 * _PtDec, int32 * _PtSign);
char * __cdecl gcvt( double _Val, int32 _NumOfDigits, char * _DstBuf);
char * __cdecl itoa( int32 _Val, char * _DstBuf, int32 _Radix);
char * __cdecl ltoa( long _Val, char * _DstBuf, int32 _Radix);
int32 __cdecl putenv( const char * _EnvString);
void __cdecl swab( char * _Buf1, char * _Buf2, int32 _SizeInBytes);
char * __cdecl ultoa( uint32 _Val, char * _Dstbuf, int32 _Radix);
_onexit_t __cdecl onexit( _onexit_t _Func);
typedef enum tagREGCLS {
REGCLS_SINGLEUSE = 0, REGCLS_MULTIPLEUSE = 1, REGCLS_MULTI_SEPARATE = 2, REGCLS_SUSPENDED = 4, REGCLS_SURROGATE = 8 } REGCLS;
<typedef name="STGFMT"><DWORD /></typedef>
<typedef name="IRpcStubBuffer"><struct name="IRpcStubBuffer" /></typedef>
<typedef name="IRpcChannelBuffer"><struct name="IRpcChannelBuffer" /></typedef>
<typedef name="IUnknown"><struct name="IUnknown" /></typedef>
<typedef name="AsyncIUnknown"><struct name="AsyncIUnknown" /></typedef>
<typedef name="IClassFactory"><struct name="IClassFactory" /></typedef>
extern RPC_IF_HANDLE __MIDL_itf_unknwn_0000_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_unknwn_0000_0000_v0_0_s_ifspec;
<typedef name="LPUNKNOWN"><ptr><IUnknown /></ptr></typedef>
extern const IID IID_IUnknown;
typedef struct IUnknownVtbl {
HRESULT(__stdcall *QueryInterface )( IUnknown * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( IUnknown * This);
ULONG(__stdcall *Release )( IUnknown * This);
} IUnknownVtbl;
struct IUnknown {
struct IUnknownVtbl *lpVtbl;
};
HRESULT __stdcall IUnknown_QueryInterface_Proxy( IUnknown * This, const IID * const riid, void **ppvObject);
void __stdcall IUnknown_QueryInterface_Stub( IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
ULONG __stdcall IUnknown_AddRef_Proxy( IUnknown * This);
void __stdcall IUnknown_AddRef_Stub( IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
ULONG __stdcall IUnknown_Release_Proxy( IUnknown * This);
void __stdcall IUnknown_Release_Stub( IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
extern RPC_IF_HANDLE __MIDL_itf_unknwn_0000_0001_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_unknwn_0000_0001_v0_0_s_ifspec;
extern const IID IID_AsyncIUnknown;
typedef struct AsyncIUnknownVtbl {
HRESULT(__stdcall *QueryInterface )( AsyncIUnknown * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( AsyncIUnknown * This);
ULONG(__stdcall *Release )( AsyncIUnknown * This);
HRESULT(__stdcall *Begin_QueryInterface )( AsyncIUnknown * This, const IID * const riid);
HRESULT(__stdcall *Finish_QueryInterface )( AsyncIUnknown * This, void **ppvObject);
HRESULT(__stdcall *Begin_AddRef )( AsyncIUnknown * This);
ULONG(__stdcall *Finish_AddRef )( AsyncIUnknown * This);
HRESULT(__stdcall *Begin_Release )( AsyncIUnknown * This);
ULONG(__stdcall *Finish_Release )( AsyncIUnknown * This);
} AsyncIUnknownVtbl;
struct AsyncIUnknown {
struct AsyncIUnknownVtbl *lpVtbl;
};
<typedef name="LPCLASSFACTORY"><ptr><IClassFactory /></ptr></typedef>
extern const IID IID_IClassFactory;
typedef struct IClassFactoryVtbl {
HRESULT(__stdcall *QueryInterface )( IClassFactory * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( IClassFactory * This);
ULONG(__stdcall *Release )( IClassFactory * This);
HRESULT(__stdcall *CreateInstance )( IClassFactory * This, IUnknown *pUnkOuter, const IID * const riid, void **ppvObject);
HRESULT(__stdcall *LockServer )( IClassFactory * This, BOOL fLock);
} IClassFactoryVtbl;
struct IClassFactory {
struct IClassFactoryVtbl *lpVtbl;
};
HRESULT __stdcall IClassFactory_RemoteCreateInstance_Proxy( IClassFactory * This, const IID * const riid, IUnknown **ppvObject);
void __stdcall IClassFactory_RemoteCreateInstance_Stub( IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
HRESULT __stdcall IClassFactory_RemoteLockServer_Proxy( IClassFactory * This, BOOL fLock);
void __stdcall IClassFactory_RemoteLockServer_Stub( IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
HRESULT __stdcall IClassFactory_CreateInstance_Proxy( IClassFactory * This, IUnknown *pUnkOuter, const IID * const riid, void **ppvObject);
HRESULT __stdcall IClassFactory_CreateInstance_Stub( IClassFactory * This, const IID * const riid, IUnknown **ppvObject);
HRESULT __stdcall IClassFactory_LockServer_Proxy( IClassFactory * This, BOOL fLock);
HRESULT __stdcall IClassFactory_LockServer_Stub( IClassFactory * This, BOOL fLock);
<typedef name="IMarshal"><struct name="IMarshal" /></typedef>
<typedef name="IMarshal2"><struct name="IMarshal2" /></typedef>
<typedef name="IMalloc"><struct name="IMalloc" /></typedef>
<typedef name="IMallocSpy"><struct name="IMallocSpy" /></typedef>
<typedef name="IStdMarshalInfo"><struct name="IStdMarshalInfo" /></typedef>
<typedef name="IExternalConnection"><struct name="IExternalConnection" /></typedef>
<typedef name="IMultiQI"><struct name="IMultiQI" /></typedef>
<typedef name="AsyncIMultiQI"><struct name="AsyncIMultiQI" /></typedef>
<typedef name="IInternalUnknown"><struct name="IInternalUnknown" /></typedef>
<typedef name="IEnumUnknown"><struct name="IEnumUnknown" /></typedef>
<typedef name="IBindCtx"><struct name="IBindCtx" /></typedef>
<typedef name="IEnumMoniker"><struct name="IEnumMoniker" /></typedef>
<typedef name="IRunnableObject"><struct name="IRunnableObject" /></typedef>
<typedef name="IRunningObjectTable"><struct name="IRunningObjectTable" /></typedef>
<typedef name="IPersist"><struct name="IPersist" /></typedef>
<typedef name="IPersistStream"><struct name="IPersistStream" /></typedef>
<typedef name="IMoniker"><struct name="IMoniker" /></typedef>
<typedef name="IROTData"><struct name="IROTData" /></typedef>
<typedef name="IEnumString"><struct name="IEnumString" /></typedef>
<typedef name="ISequentialStream"><struct name="ISequentialStream" /></typedef>
<typedef name="IStream"><struct name="IStream" /></typedef>
<typedef name="IEnumSTATSTG"><struct name="IEnumSTATSTG" /></typedef>
<typedef name="IStorage"><struct name="IStorage" /></typedef>
<typedef name="IPersistFile"><struct name="IPersistFile" /></typedef>
<typedef name="IPersistStorage"><struct name="IPersistStorage" /></typedef>
<typedef name="ILockBytes"><struct name="ILockBytes" /></typedef>
<typedef name="IEnumFORMATETC"><struct name="IEnumFORMATETC" /></typedef>
<typedef name="IEnumSTATDATA"><struct name="IEnumSTATDATA" /></typedef>
<typedef name="IRootStorage"><struct name="IRootStorage" /></typedef>
<typedef name="IAdviseSink"><struct name="IAdviseSink" /></typedef>
<typedef name="AsyncIAdviseSink"><struct name="AsyncIAdviseSink" /></typedef>
<typedef name="IAdviseSink2"><struct name="IAdviseSink2" /></typedef>
<typedef name="AsyncIAdviseSink2"><struct name="AsyncIAdviseSink2" /></typedef>
<typedef name="IDataObject"><struct name="IDataObject" /></typedef>
<typedef name="IDataAdviseHolder"><struct name="IDataAdviseHolder" /></typedef>
<typedef name="IMessageFilter"><struct name="IMessageFilter" /></typedef>
<typedef name="IRpcChannelBuffer"><struct name="IRpcChannelBuffer" /></typedef>
<typedef name="IRpcChannelBuffer2"><struct name="IRpcChannelBuffer2" /></typedef>
<typedef name="IAsyncRpcChannelBuffer"><struct name="IAsyncRpcChannelBuffer" /></typedef>
<typedef name="IRpcChannelBuffer3"><struct name="IRpcChannelBuffer3" /></typedef>
<typedef name="IRpcSyntaxNegotiate"><struct name="IRpcSyntaxNegotiate" /></typedef>
<typedef name="IRpcProxyBuffer"><struct name="IRpcProxyBuffer" /></typedef>
<typedef name="IRpcStubBuffer"><struct name="IRpcStubBuffer" /></typedef>
<typedef name="IPSFactoryBuffer"><struct name="IPSFactoryBuffer" /></typedef>
<typedef name="IChannelHook"><struct name="IChannelHook" /></typedef>
<typedef name="IClientSecurity"><struct name="IClientSecurity" /></typedef>
<typedef name="IServerSecurity"><struct name="IServerSecurity" /></typedef>
<typedef name="IClassActivator"><struct name="IClassActivator" /></typedef>
<typedef name="IRpcOptions"><struct name="IRpcOptions" /></typedef>
<typedef name="IGlobalOptions"><struct name="IGlobalOptions" /></typedef>
<typedef name="IFillLockBytes"><struct name="IFillLockBytes" /></typedef>
<typedef name="IProgressNotify"><struct name="IProgressNotify" /></typedef>
<typedef name="ILayoutStorage"><struct name="ILayoutStorage" /></typedef>
<typedef name="IBlockingLock"><struct name="IBlockingLock" /></typedef>
<typedef name="ITimeAndNoticeControl"><struct name="ITimeAndNoticeControl" /></typedef>
<typedef name="IOplockStorage"><struct name="IOplockStorage" /></typedef>
<typedef name="ISurrogate"><struct name="ISurrogate" /></typedef>
<typedef name="IGlobalInterfaceTable"><struct name="IGlobalInterfaceTable" /></typedef>
<typedef name="IDirectWriterLock"><struct name="IDirectWriterLock" /></typedef>
<typedef name="ISynchronize"><struct name="ISynchronize" /></typedef>
<typedef name="ISynchronizeHandle"><struct name="ISynchronizeHandle" /></typedef>
<typedef name="ISynchronizeEvent"><struct name="ISynchronizeEvent" /></typedef>
<typedef name="ISynchronizeContainer"><struct name="ISynchronizeContainer" /></typedef>
<typedef name="ISynchronizeMutex"><struct name="ISynchronizeMutex" /></typedef>
<typedef name="ICancelMethodCalls"><struct name="ICancelMethodCalls" /></typedef>
<typedef name="IAsyncManager"><struct name="IAsyncManager" /></typedef>
<typedef name="ICallFactory"><struct name="ICallFactory" /></typedef>
<typedef name="IRpcHelper"><struct name="IRpcHelper" /></typedef>
<typedef name="IReleaseMarshalBuffers"><struct name="IReleaseMarshalBuffers" /></typedef>
<typedef name="IWaitMultiple"><struct name="IWaitMultiple" /></typedef>
<typedef name="IUrlMon"><struct name="IUrlMon" /></typedef>
<typedef name="IForegroundTransfer"><struct name="IForegroundTransfer" /></typedef>
<typedef name="IAddrTrackingControl"><struct name="IAddrTrackingControl" /></typedef>
<typedef name="IAddrExclusionControl"><struct name="IAddrExclusionControl" /></typedef>
<typedef name="IPipeByte"><struct name="IPipeByte" /></typedef>
<typedef name="AsyncIPipeByte"><struct name="AsyncIPipeByte" /></typedef>
<typedef name="IPipeLong"><struct name="IPipeLong" /></typedef>
<typedef name="AsyncIPipeLong"><struct name="AsyncIPipeLong" /></typedef>
<typedef name="IPipeDouble"><struct name="IPipeDouble" /></typedef>
<typedef name="AsyncIPipeDouble"><struct name="AsyncIPipeDouble" /></typedef>
<typedef name="IThumbnailExtractor"><struct name="IThumbnailExtractor" /></typedef>
<typedef name="IDummyHICONIncluder"><struct name="IDummyHICONIncluder" /></typedef>
<typedef name="IEnumContextProps"><struct name="IEnumContextProps" /></typedef>
<typedef name="IContext"><struct name="IContext" /></typedef>
<typedef name="IObjContext"><struct name="IObjContext" /></typedef>
<typedef name="IProcessLock"><struct name="IProcessLock" /></typedef>
<typedef name="ISurrogateService"><struct name="ISurrogateService" /></typedef>
<typedef name="IComThreadingInfo"><struct name="IComThreadingInfo" /></typedef>
<typedef name="IProcessInitControl"><struct name="IProcessInitControl" /></typedef>
<typedef name="IInitializeSpy"><struct name="IInitializeSpy" /></typedef>
typedef struct _COSERVERINFO {
<field name="dwReserved1"><DWORD /></field>
<field name="pwszName"><LPWSTR /></field>
<field name="pAuthInfo"><ptr><COAUTHINFO /></ptr></field>
<field name="dwReserved2"><DWORD /></field>
} COSERVERINFO;
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0000_v0_0_s_ifspec;
<typedef name="LPMARSHAL"><ptr><IMarshal /></ptr></typedef>
extern const IID IID_IMarshal;
typedef struct IMarshalVtbl {
HRESULT(__stdcall *QueryInterface )( IMarshal * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( IMarshal * This);
ULONG(__stdcall *Release )( IMarshal * This);
HRESULT(__stdcall *GetUnmarshalClass )( IMarshal * This, const IID * const riid, void *pv, DWORD dwDestContext, void *pvDestContext, DWORD mshlflags, CLSID *pCid);
HRESULT(__stdcall *GetMarshalSizeMax )( IMarshal * This, const IID * const riid, void *pv, DWORD dwDestContext, void *pvDestContext, DWORD mshlflags, DWORD *pSize);
HRESULT(__stdcall *MarshalInterface )( IMarshal * This, IStream *pStm, const IID * const riid, void *pv, DWORD dwDestContext, void *pvDestContext, DWORD mshlflags);
HRESULT(__stdcall *UnmarshalInterface )( IMarshal * This, IStream *pStm, const IID * const riid, void **ppv);
HRESULT(__stdcall *ReleaseMarshalData )( IMarshal * This, IStream *pStm);
HRESULT(__stdcall *DisconnectObject )( IMarshal * This, DWORD dwReserved);
} IMarshalVtbl;
struct IMarshal {
struct IMarshalVtbl *lpVtbl;
};
<typedef name="LPMARSHAL2"><ptr><IMarshal2 /></ptr></typedef>
extern const IID IID_IMarshal2;
typedef struct IMarshal2Vtbl {
HRESULT(__stdcall *QueryInterface )( IMarshal2 * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( IMarshal2 * This);
ULONG(__stdcall *Release )( IMarshal2 * This);
HRESULT(__stdcall *GetUnmarshalClass )( IMarshal2 * This, const IID * const riid, void *pv, DWORD dwDestContext, void *pvDestContext, DWORD mshlflags, CLSID *pCid);
HRESULT(__stdcall *GetMarshalSizeMax )( IMarshal2 * This, const IID * const riid, void *pv, DWORD dwDestContext, void *pvDestContext, DWORD mshlflags, DWORD *pSize);
HRESULT(__stdcall *MarshalInterface )( IMarshal2 * This, IStream *pStm, const IID * const riid, void *pv, DWORD dwDestContext, void *pvDestContext, DWORD mshlflags);
HRESULT(__stdcall *UnmarshalInterface )( IMarshal2 * This, IStream *pStm, const IID * const riid, void **ppv);
HRESULT(__stdcall *ReleaseMarshalData )( IMarshal2 * This, IStream *pStm);
HRESULT(__stdcall *DisconnectObject )( IMarshal2 * This, DWORD dwReserved);
} IMarshal2Vtbl;
struct IMarshal2 {
struct IMarshal2Vtbl *lpVtbl;
};
<typedef name="LPMALLOC"><ptr><IMalloc /></ptr></typedef>
extern const IID IID_IMalloc;
typedef struct IMallocVtbl {
HRESULT(__stdcall *QueryInterface )( IMalloc * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( IMalloc * This);
ULONG(__stdcall *Release )( IMalloc * This);
void *( __stdcall *Alloc )( IMalloc * This, SIZE_T cb);
void *( __stdcall *Realloc )( IMalloc * This, void *pv, SIZE_T cb);
void(__stdcall *Free )( IMalloc * This, void *pv);
SIZE_T(__stdcall *GetSize )( IMalloc * This, void *pv);
int32(__stdcall *DidAlloc )( IMalloc * This, void *pv);
void(__stdcall *HeapMinimize )( IMalloc * This);
} IMallocVtbl;
struct IMalloc {
struct IMallocVtbl *lpVtbl;
};
<typedef name="LPMALLOCSPY"><ptr><IMallocSpy /></ptr></typedef>
extern const IID IID_IMallocSpy;
typedef struct IMallocSpyVtbl {
HRESULT(__stdcall *QueryInterface )( IMallocSpy * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( IMallocSpy * This);
ULONG(__stdcall *Release )( IMallocSpy * This);
SIZE_T(__stdcall *PreAlloc )( IMallocSpy * This, SIZE_T cbRequest);
void *( __stdcall *PostAlloc )( IMallocSpy * This, void *pActual);
void *( __stdcall *PreFree )( IMallocSpy * This, void *pRequest, BOOL fSpyed);
void(__stdcall *PostFree )( IMallocSpy * This, BOOL fSpyed);
SIZE_T(__stdcall *PreRealloc )( IMallocSpy * This, void *pRequest, SIZE_T cbRequest, void **ppNewRequest, BOOL fSpyed);
void *( __stdcall *PostRealloc )( IMallocSpy * This, void *pActual, BOOL fSpyed);
void *( __stdcall *PreGetSize )( IMallocSpy * This, void *pRequest, BOOL fSpyed);
SIZE_T(__stdcall *PostGetSize )( IMallocSpy * This, SIZE_T cbActual, BOOL fSpyed);
void *( __stdcall *PreDidAlloc )( IMallocSpy * This, void *pRequest, BOOL fSpyed);
int32(__stdcall *PostDidAlloc )( IMallocSpy * This, void *pRequest, BOOL fSpyed, int32 fActual);
void(__stdcall *PreHeapMinimize )( IMallocSpy * This);
void(__stdcall *PostHeapMinimize )( IMallocSpy * This);
} IMallocSpyVtbl;
struct IMallocSpy {
struct IMallocSpyVtbl *lpVtbl;
};
<typedef name="LPSTDMARSHALINFO"><ptr><IStdMarshalInfo /></ptr></typedef>
extern const IID IID_IStdMarshalInfo;
typedef struct IStdMarshalInfoVtbl {
HRESULT(__stdcall *QueryInterface )( IStdMarshalInfo * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( IStdMarshalInfo * This);
ULONG(__stdcall *Release )( IStdMarshalInfo * This);
HRESULT(__stdcall *GetClassForHandler )( IStdMarshalInfo * This, DWORD dwDestContext, void *pvDestContext, CLSID *pClsid);
} IStdMarshalInfoVtbl;
struct IStdMarshalInfo {
struct IStdMarshalInfoVtbl *lpVtbl;
};
<typedef name="LPEXTERNALCONNECTION"><ptr><IExternalConnection /></ptr></typedef>
typedef enum tagEXTCONN { EXTCONN_STRONG = 0x1, EXTCONN_WEAK = 0x2, EXTCONN_CALLABLE = 0x4 } EXTCONN;
extern const IID IID_IExternalConnection;
typedef struct IExternalConnectionVtbl {
HRESULT(__stdcall *QueryInterface )( IExternalConnection * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( IExternalConnection * This);
ULONG(__stdcall *Release )( IExternalConnection * This);
DWORD(__stdcall *AddConnection )( IExternalConnection * This, DWORD extconn, DWORD reserved);
DWORD(__stdcall *ReleaseConnection )( IExternalConnection * This, DWORD extconn, DWORD reserved, BOOL fLastReleaseCloses);
} IExternalConnectionVtbl;
struct IExternalConnection {
struct IExternalConnectionVtbl *lpVtbl;
};
<typedef name="LPMULTIQI"><ptr><IMultiQI /></ptr></typedef>
typedef struct tagMULTI_QI {
<field name="pIID"><ptr const="true"><IID /></ptr></field>
<field name="pItf"><ptr><IUnknown /></ptr></field>
<field name="hr"><HRESULT /></field>
} MULTI_QI;
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0006_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0006_v0_0_s_ifspec;
extern const IID IID_IMultiQI;
typedef struct IMultiQIVtbl {
HRESULT(__stdcall *QueryInterface )( IMultiQI * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( IMultiQI * This);
ULONG(__stdcall *Release )( IMultiQI * This);
HRESULT(__stdcall *QueryMultipleInterfaces )( IMultiQI * This, ULONG cMQIs, MULTI_QI *pMQIs);
} IMultiQIVtbl;
struct IMultiQI {
struct IMultiQIVtbl *lpVtbl;
};
extern const IID IID_AsyncIMultiQI;
typedef struct AsyncIMultiQIVtbl {
HRESULT(__stdcall *QueryInterface )( AsyncIMultiQI * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( AsyncIMultiQI * This);
ULONG(__stdcall *Release )( AsyncIMultiQI * This);
HRESULT(__stdcall *Begin_QueryMultipleInterfaces )( AsyncIMultiQI * This, ULONG cMQIs, MULTI_QI *pMQIs);
HRESULT(__stdcall *Finish_QueryMultipleInterfaces )( AsyncIMultiQI * This, MULTI_QI *pMQIs);
} AsyncIMultiQIVtbl;
struct AsyncIMultiQI {
struct AsyncIMultiQIVtbl *lpVtbl;
};
extern const IID IID_IInternalUnknown;
typedef struct IInternalUnknownVtbl {
HRESULT(__stdcall *QueryInterface )( IInternalUnknown * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( IInternalUnknown * This);
ULONG(__stdcall *Release )( IInternalUnknown * This);
HRESULT(__stdcall *QueryInternalInterface )( IInternalUnknown * This, const IID * const riid, void **ppv);
} IInternalUnknownVtbl;
struct IInternalUnknown {
struct IInternalUnknownVtbl *lpVtbl;
};
<typedef name="LPENUMUNKNOWN"><ptr><IEnumUnknown /></ptr></typedef>
extern const IID IID_IEnumUnknown;
typedef struct IEnumUnknownVtbl {
HRESULT(__stdcall *QueryInterface )( IEnumUnknown * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( IEnumUnknown * This);
ULONG(__stdcall *Release )( IEnumUnknown * This);
HRESULT(__stdcall *Next )( IEnumUnknown * This, ULONG celt, IUnknown **rgelt, ULONG *pceltFetched);
HRESULT(__stdcall *Skip )( IEnumUnknown * This, ULONG celt);
HRESULT(__stdcall *Reset )( IEnumUnknown * This);
HRESULT(__stdcall *Clone )( IEnumUnknown * This, IEnumUnknown **ppenum);
} IEnumUnknownVtbl;
struct IEnumUnknown {
struct IEnumUnknownVtbl *lpVtbl;
};
HRESULT __stdcall IEnumUnknown_RemoteNext_Proxy( IEnumUnknown * This, ULONG celt, IUnknown **rgelt, ULONG *pceltFetched);
void __stdcall IEnumUnknown_RemoteNext_Stub( IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
<typedef name="LPBC"><ptr><IBindCtx /></ptr></typedef>
<typedef name="LPBINDCTX"><ptr><IBindCtx /></ptr></typedef>
typedef struct tagBIND_OPTS {
<field name="cbStruct"><DWORD /></field>
<field name="grfFlags"><DWORD /></field>
<field name="grfMode"><DWORD /></field>
<field name="dwTickCountDeadline"><DWORD /></field>
} BIND_OPTS;
typedef struct tagBIND_OPTS *LPBIND_OPTS;
typedef struct tagBIND_OPTS2 {
<field name="cbStruct"><DWORD /></field>
<field name="grfFlags"><DWORD /></field>
<field name="grfMode"><DWORD /></field>
<field name="dwTickCountDeadline"><DWORD /></field>
<field name="dwTrackFlags"><DWORD /></field>
<field name="dwClassContext"><DWORD /></field>
<field name="locale"><LCID /></field>
<field name="pServerInfo"><ptr><COSERVERINFO /></ptr></field>
} BIND_OPTS2;
typedef struct tagBIND_OPTS2 *LPBIND_OPTS2;
typedef struct tagBIND_OPTS3 {
<field name="cbStruct"><DWORD /></field>
<field name="grfFlags"><DWORD /></field>
<field name="grfMode"><DWORD /></field>
<field name="dwTickCountDeadline"><DWORD /></field>
<field name="dwTrackFlags"><DWORD /></field>
<field name="dwClassContext"><DWORD /></field>
<field name="locale"><LCID /></field>
<field name="pServerInfo"><ptr><COSERVERINFO /></ptr></field>
<field name="hwnd"><HWND /></field>
} BIND_OPTS3;
typedef struct tagBIND_OPTS3 *LPBIND_OPTS3;
typedef enum tagBIND_FLAGS { BIND_MAYBOTHERUSER = 1, BIND_JUSTTESTEXISTENCE = 2 } BIND_FLAGS;
extern const IID IID_IBindCtx;
typedef struct IBindCtxVtbl {
HRESULT(__stdcall *QueryInterface )( IBindCtx * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( IBindCtx * This);
ULONG(__stdcall *Release )( IBindCtx * This);
HRESULT(__stdcall *RegisterObjectBound )( IBindCtx * This, IUnknown *punk);
HRESULT(__stdcall *RevokeObjectBound )( IBindCtx * This, IUnknown *punk);
HRESULT(__stdcall *ReleaseBoundObjects )( IBindCtx * This);
HRESULT(__stdcall *SetBindOptions )( IBindCtx * This, BIND_OPTS *pbindopts);
HRESULT(__stdcall *GetBindOptions )( IBindCtx * This, BIND_OPTS *pbindopts);
HRESULT(__stdcall *GetRunningObjectTable )( IBindCtx * This, IRunningObjectTable **pprot);
HRESULT(__stdcall *RegisterObjectParam )( IBindCtx * This, LPOLESTR pszKey, IUnknown *punk);
HRESULT(__stdcall *GetObjectParam )( IBindCtx * This, LPOLESTR pszKey, IUnknown **ppunk);
HRESULT(__stdcall *EnumObjectParam )( IBindCtx * This, IEnumString **ppenum);
HRESULT(__stdcall *RevokeObjectParam )( IBindCtx * This, LPOLESTR pszKey);
} IBindCtxVtbl;
struct IBindCtx {
struct IBindCtxVtbl *lpVtbl;
};
HRESULT __stdcall IBindCtx_RemoteSetBindOptions_Proxy( IBindCtx * This, BIND_OPTS2 *pbindopts);
void __stdcall IBindCtx_RemoteSetBindOptions_Stub( IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
HRESULT __stdcall IBindCtx_RemoteGetBindOptions_Proxy( IBindCtx * This, BIND_OPTS2 *pbindopts);
void __stdcall IBindCtx_RemoteGetBindOptions_Stub( IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
<typedef name="LPENUMMONIKER"><ptr><IEnumMoniker /></ptr></typedef>
extern const IID IID_IEnumMoniker;
typedef struct IEnumMonikerVtbl {
HRESULT(__stdcall *QueryInterface )( IEnumMoniker * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( IEnumMoniker * This);
ULONG(__stdcall *Release )( IEnumMoniker * This);
HRESULT(__stdcall *Next )( IEnumMoniker * This, ULONG celt, IMoniker **rgelt, ULONG *pceltFetched);
HRESULT(__stdcall *Skip )( IEnumMoniker * This, ULONG celt);
HRESULT(__stdcall *Reset )( IEnumMoniker * This);
HRESULT(__stdcall *Clone )( IEnumMoniker * This, IEnumMoniker **ppenum);
} IEnumMonikerVtbl;
struct IEnumMoniker {
struct IEnumMonikerVtbl *lpVtbl;
};
HRESULT __stdcall IEnumMoniker_RemoteNext_Proxy( IEnumMoniker * This, ULONG celt, IMoniker **rgelt, ULONG *pceltFetched);
void __stdcall IEnumMoniker_RemoteNext_Stub( IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
<typedef name="LPRUNNABLEOBJECT"><ptr><IRunnableObject /></ptr></typedef>
extern const IID IID_IRunnableObject;
typedef struct IRunnableObjectVtbl {
HRESULT(__stdcall *QueryInterface )( IRunnableObject * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( IRunnableObject * This);
ULONG(__stdcall *Release )( IRunnableObject * This);
HRESULT(__stdcall *GetRunningClass )( IRunnableObject * This, LPCLSID lpClsid);
HRESULT(__stdcall *Run )( IRunnableObject * This, LPBINDCTX pbc);
BOOL(__stdcall *IsRunning )( IRunnableObject * This);
HRESULT(__stdcall *LockRunning )( IRunnableObject * This, BOOL fLock, BOOL fLastUnlockCloses);
HRESULT(__stdcall *SetContainedObject )( IRunnableObject * This, BOOL fContained);
} IRunnableObjectVtbl;
struct IRunnableObject {
struct IRunnableObjectVtbl *lpVtbl;
};
HRESULT __stdcall IRunnableObject_RemoteIsRunning_Proxy( IRunnableObject * This);
void __stdcall IRunnableObject_RemoteIsRunning_Stub( IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
<typedef name="LPRUNNINGOBJECTTABLE"><ptr><IRunningObjectTable /></ptr></typedef>
extern const IID IID_IRunningObjectTable;
typedef struct IRunningObjectTableVtbl {
HRESULT(__stdcall *QueryInterface )( IRunningObjectTable * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( IRunningObjectTable * This);
ULONG(__stdcall *Release )( IRunningObjectTable * This);
HRESULT(__stdcall *Register )( IRunningObjectTable * This, DWORD grfFlags, IUnknown *punkObject, IMoniker *pmkObjectName, DWORD *pdwRegister);
HRESULT(__stdcall *Revoke )( IRunningObjectTable * This, DWORD dwRegister);
HRESULT(__stdcall *IsRunning )( IRunningObjectTable * This, IMoniker *pmkObjectName);
HRESULT(__stdcall *GetObjectA )( IRunningObjectTable * This, IMoniker *pmkObjectName, IUnknown **ppunkObject);
HRESULT(__stdcall *NoteChangeTime )( IRunningObjectTable * This, DWORD dwRegister, FILETIME *pfiletime);
HRESULT(__stdcall *GetTimeOfLastChange )( IRunningObjectTable * This, IMoniker *pmkObjectName, FILETIME *pfiletime);
HRESULT(__stdcall *EnumRunning )( IRunningObjectTable * This, IEnumMoniker **ppenumMoniker);
} IRunningObjectTableVtbl;
struct IRunningObjectTable {
struct IRunningObjectTableVtbl *lpVtbl;
};
<typedef name="LPPERSIST"><ptr><IPersist /></ptr></typedef>
extern const IID IID_IPersist;
typedef struct IPersistVtbl {
HRESULT(__stdcall *QueryInterface )( IPersist * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( IPersist * This);
ULONG(__stdcall *Release )( IPersist * This);
HRESULT(__stdcall *GetClassID )( IPersist * This, CLSID *pClassID);
} IPersistVtbl;
struct IPersist {
struct IPersistVtbl *lpVtbl;
};
<typedef name="LPPERSISTSTREAM"><ptr><IPersistStream /></ptr></typedef>
extern const IID IID_IPersistStream;
typedef struct IPersistStreamVtbl {
HRESULT(__stdcall *QueryInterface )( IPersistStream * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( IPersistStream * This);
ULONG(__stdcall *Release )( IPersistStream * This);
HRESULT(__stdcall *GetClassID )( IPersistStream * This, CLSID *pClassID);
HRESULT(__stdcall *IsDirty )( IPersistStream * This);
HRESULT(__stdcall *Load )( IPersistStream * This, IStream *pStm);
HRESULT(__stdcall *Save )( IPersistStream * This, IStream *pStm, BOOL fClearDirty);
HRESULT(__stdcall *GetSizeMax )( IPersistStream * This, ULARGE_INTEGER *pcbSize);
} IPersistStreamVtbl;
struct IPersistStream {
struct IPersistStreamVtbl *lpVtbl;
};
<typedef name="LPMONIKER"><ptr><IMoniker /></ptr></typedef>
typedef enum tagMKSYS { MKSYS_NONE = 0, MKSYS_GENERICCOMPOSITE = 1, MKSYS_FILEMONIKER = 2, MKSYS_ANTIMONIKER = 3, MKSYS_ITEMMONIKER = 4, MKSYS_POINTERMONIKER = 5, MKSYS_CLASSMONIKER = 7, MKSYS_OBJREFMONIKER = 8, MKSYS_SESSIONMONIKER = 9, MKSYS_LUAMONIKER = 10 } MKSYS;
typedef enum tagMKREDUCE { MKRREDUCE_ONE =(3 << 16 ), MKRREDUCE_TOUSER =(2 << 16 ), MKRREDUCE_THROUGHUSER =(1 << 16 ), MKRREDUCE_ALL = 0 } MKRREDUCE;
extern const IID IID_IMoniker;
typedef struct IMonikerVtbl {
HRESULT(__stdcall *QueryInterface )( IMoniker * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( IMoniker * This);
ULONG(__stdcall *Release )( IMoniker * This);
HRESULT(__stdcall *GetClassID )( IMoniker * This, CLSID *pClassID);
HRESULT(__stdcall *IsDirty )( IMoniker * This);
HRESULT(__stdcall *Load )( IMoniker * This, IStream *pStm);
HRESULT(__stdcall *Save )( IMoniker * This, IStream *pStm, BOOL fClearDirty);
HRESULT(__stdcall *GetSizeMax )( IMoniker * This, ULARGE_INTEGER *pcbSize);
HRESULT(__stdcall *BindToObject )( IMoniker * This, IBindCtx *pbc, IMoniker *pmkToLeft, const IID * const riidResult, void **ppvResult);
HRESULT(__stdcall *BindToStorage )( IMoniker * This, IBindCtx *pbc, IMoniker *pmkToLeft, const IID * const riid, void **ppvObj);
HRESULT(__stdcall *Reduce )( IMoniker * This, IBindCtx *pbc, DWORD dwReduceHowFar, IMoniker **ppmkToLeft, IMoniker **ppmkReduced);
HRESULT(__stdcall *ComposeWith )( IMoniker * This, IMoniker *pmkRight, BOOL fOnlyIfNotGeneric, IMoniker **ppmkComposite);
HRESULT(__stdcall *Enum )( IMoniker * This, BOOL fForward, IEnumMoniker **ppenumMoniker);
HRESULT(__stdcall *IsEqual )( IMoniker * This, IMoniker *pmkOtherMoniker);
HRESULT(__stdcall *Hash )( IMoniker * This, DWORD *pdwHash);
HRESULT(__stdcall *IsRunning )( IMoniker * This, IBindCtx *pbc, IMoniker *pmkToLeft, IMoniker *pmkNewlyRunning);
HRESULT(__stdcall *GetTimeOfLastChange )( IMoniker * This, IBindCtx *pbc, IMoniker *pmkToLeft, FILETIME *pFileTime);
HRESULT(__stdcall *Inverse )( IMoniker * This, IMoniker **ppmk);
HRESULT(__stdcall *CommonPrefixWith )( IMoniker * This, IMoniker *pmkOther, IMoniker **ppmkPrefix);
HRESULT(__stdcall *RelativePathTo )( IMoniker * This, IMoniker *pmkOther, IMoniker **ppmkRelPath);
HRESULT(__stdcall *GetDisplayName )( IMoniker * This, IBindCtx *pbc, IMoniker *pmkToLeft, LPOLESTR *ppszDisplayName);
HRESULT(__stdcall *ParseDisplayName )( IMoniker * This, IBindCtx *pbc, IMoniker *pmkToLeft, LPOLESTR pszDisplayName, ULONG *pchEaten, IMoniker **ppmkOut);
HRESULT(__stdcall *IsSystemMoniker )( IMoniker * This, DWORD *pdwMksys);
} IMonikerVtbl;
struct IMoniker {
struct IMonikerVtbl *lpVtbl;
};
HRESULT __stdcall IMoniker_RemoteBindToObject_Proxy( IMoniker * This, IBindCtx *pbc, IMoniker *pmkToLeft, const IID * const riidResult, IUnknown **ppvResult);
void __stdcall IMoniker_RemoteBindToObject_Stub( IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
HRESULT __stdcall IMoniker_RemoteBindToStorage_Proxy( IMoniker * This, IBindCtx *pbc, IMoniker *pmkToLeft, const IID * const riid, IUnknown **ppvObj);
void __stdcall IMoniker_RemoteBindToStorage_Stub( IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
extern const IID IID_IROTData;
typedef struct IROTDataVtbl {
HRESULT(__stdcall *QueryInterface )( IROTData * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( IROTData * This);
ULONG(__stdcall *Release )( IROTData * This);
HRESULT(__stdcall *GetComparisonData )( IROTData * This, byte *pbData, ULONG cbMax, ULONG *pcbData);
} IROTDataVtbl;
struct IROTData {
struct IROTDataVtbl *lpVtbl;
};
<typedef name="LPENUMSTRING"><ptr><IEnumString /></ptr></typedef>
extern const IID IID_IEnumString;
typedef struct IEnumStringVtbl {
HRESULT(__stdcall *QueryInterface )( IEnumString * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( IEnumString * This);
ULONG(__stdcall *Release )( IEnumString * This);
HRESULT(__stdcall *Next )( IEnumString * This, ULONG celt, LPOLESTR *rgelt, ULONG *pceltFetched);
HRESULT(__stdcall *Skip )( IEnumString * This, ULONG celt);
HRESULT(__stdcall *Reset )( IEnumString * This);
HRESULT(__stdcall *Clone )( IEnumString * This, IEnumString **ppenum);
} IEnumStringVtbl;
struct IEnumString {
struct IEnumStringVtbl *lpVtbl;
};
HRESULT __stdcall IEnumString_RemoteNext_Proxy( IEnumString * This, ULONG celt, LPOLESTR *rgelt, ULONG *pceltFetched);
void __stdcall IEnumString_RemoteNext_Stub( IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
extern const IID IID_ISequentialStream;
typedef struct ISequentialStreamVtbl {
HRESULT(__stdcall *QueryInterface )( ISequentialStream * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( ISequentialStream * This);
ULONG(__stdcall *Release )( ISequentialStream * This);
HRESULT(__stdcall *Read )( ISequentialStream * This, void *pv, ULONG cb, ULONG *pcbRead);
HRESULT(__stdcall *Write )( ISequentialStream * This, const void *pv, ULONG cb, ULONG *pcbWritten);
} ISequentialStreamVtbl;
struct ISequentialStream {
struct ISequentialStreamVtbl *lpVtbl;
};
HRESULT __stdcall ISequentialStream_RemoteRead_Proxy( ISequentialStream * This, byte *pv, ULONG cb, ULONG *pcbRead);
void __stdcall ISequentialStream_RemoteRead_Stub( IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
HRESULT __stdcall ISequentialStream_RemoteWrite_Proxy( ISequentialStream * This, const byte *pv, ULONG cb, ULONG *pcbWritten);
void __stdcall ISequentialStream_RemoteWrite_Stub( IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
<typedef name="LPSTREAM"><ptr><IStream /></ptr></typedef>
typedef struct tagSTATSTG {
<field name="pwcsName"><LPOLESTR /></field>
<field name="type"><DWORD /></field>
<field name="cbSize"><ULARGE_INTEGER /></field>
<field name="mtime"><FILETIME /></field>
<field name="ctime"><FILETIME /></field>
<field name="atime"><FILETIME /></field>
<field name="grfMode"><DWORD /></field>
<field name="grfLocksSupported"><DWORD /></field>
<field name="clsid"><CLSID /></field>
<field name="grfStateBits"><DWORD /></field>
<field name="reserved"><DWORD /></field>
} STATSTG;
typedef enum tagSTGTY { STGTY_STORAGE = 1, STGTY_STREAM = 2, STGTY_LOCKBYTES = 3, STGTY_PROPERTY = 4 } STGTY;
typedef enum tagSTREAM_SEEK { STREAM_SEEK_SET = 0, STREAM_SEEK_CUR = 1, STREAM_SEEK_END = 2 } STREAM_SEEK;
typedef enum tagLOCKTYPE { LOCK_WRITE = 1, LOCK_EXCLUSIVE = 2, LOCK_ONLYONCE = 4 } LOCKTYPE;
extern const IID IID_IStream;
typedef struct IStreamVtbl {
HRESULT(__stdcall *QueryInterface )( IStream * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( IStream * This);
ULONG(__stdcall *Release )( IStream * This);
HRESULT(__stdcall *Read )( IStream * This, void *pv, ULONG cb, ULONG *pcbRead);
HRESULT(__stdcall *Write )( IStream * This, const void *pv, ULONG cb, ULONG *pcbWritten);
HRESULT(__stdcall *Seek )( IStream * This, LARGE_INTEGER dlibMove, DWORD dwOrigin, ULARGE_INTEGER *plibNewPosition);
HRESULT(__stdcall *SetSize )( IStream * This, ULARGE_INTEGER libNewSize);
HRESULT(__stdcall *CopyTo )( IStream * This, IStream *pstm, ULARGE_INTEGER cb, ULARGE_INTEGER *pcbRead, ULARGE_INTEGER *pcbWritten);
HRESULT(__stdcall *Commit )( IStream * This, DWORD grfCommitFlags);
HRESULT(__stdcall *Revert )( IStream * This);
HRESULT(__stdcall *LockRegion )( IStream * This, ULARGE_INTEGER libOffset, ULARGE_INTEGER cb, DWORD dwLockType);
HRESULT(__stdcall *UnlockRegion )( IStream * This, ULARGE_INTEGER libOffset, ULARGE_INTEGER cb, DWORD dwLockType);
HRESULT(__stdcall *Stat )( IStream * This, STATSTG *pstatstg, DWORD grfStatFlag);
HRESULT(__stdcall *Clone )( IStream * This, IStream **ppstm);
} IStreamVtbl;
struct IStream {
struct IStreamVtbl *lpVtbl;
};
HRESULT __stdcall IStream_RemoteSeek_Proxy( IStream * This, LARGE_INTEGER dlibMove, DWORD dwOrigin, ULARGE_INTEGER *plibNewPosition);
void __stdcall IStream_RemoteSeek_Stub( IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
HRESULT __stdcall IStream_RemoteCopyTo_Proxy( IStream * This, IStream *pstm, ULARGE_INTEGER cb, ULARGE_INTEGER *pcbRead, ULARGE_INTEGER *pcbWritten);
void __stdcall IStream_RemoteCopyTo_Stub( IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
<typedef name="LPENUMSTATSTG"><ptr><IEnumSTATSTG /></ptr></typedef>
extern const IID IID_IEnumSTATSTG;
typedef struct IEnumSTATSTGVtbl {
HRESULT(__stdcall *QueryInterface )( IEnumSTATSTG * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( IEnumSTATSTG * This);
ULONG(__stdcall *Release )( IEnumSTATSTG * This);
HRESULT(__stdcall *Next )( IEnumSTATSTG * This, ULONG celt, STATSTG *rgelt, ULONG *pceltFetched);
HRESULT(__stdcall *Skip )( IEnumSTATSTG * This, ULONG celt);
HRESULT(__stdcall *Reset )( IEnumSTATSTG * This);
HRESULT(__stdcall *Clone )( IEnumSTATSTG * This, IEnumSTATSTG **ppenum);
} IEnumSTATSTGVtbl;
struct IEnumSTATSTG {
struct IEnumSTATSTGVtbl *lpVtbl;
};
HRESULT __stdcall IEnumSTATSTG_RemoteNext_Proxy( IEnumSTATSTG * This, ULONG celt, STATSTG *rgelt, ULONG *pceltFetched);
void __stdcall IEnumSTATSTG_RemoteNext_Stub( IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
<typedef name="LPSTORAGE"><ptr><IStorage /></ptr></typedef>
typedef struct tagRemSNB {
<field name="ulCntStr"><uint32 /></field>
<field name="ulCntChar"><uint32 /></field>
<field name="rgString"><arr length=" 1 "><OLECHAR /></arr></field>
} RemSNB;
<typedef name="wireSNB"><ptr><RemSNB /></ptr></typedef>
<typedef name="SNB"><ptr><LPOLESTR /></ptr></typedef>
extern const IID IID_IStorage;
typedef struct IStorageVtbl {
HRESULT(__stdcall *QueryInterface )( IStorage * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( IStorage * This);
ULONG(__stdcall *Release )( IStorage * This);
HRESULT(__stdcall *CreateStream )( IStorage * This, const OLECHAR *pwcsName, DWORD grfMode, DWORD reserved1, DWORD reserved2, IStream **ppstm);
HRESULT(__stdcall *OpenStream )( IStorage * This, const OLECHAR *pwcsName, void *reserved1, DWORD grfMode, DWORD reserved2, IStream **ppstm);
HRESULT(__stdcall *CreateStorage )( IStorage * This, const OLECHAR *pwcsName, DWORD grfMode, DWORD reserved1, DWORD reserved2, IStorage **ppstg);
HRESULT(__stdcall *OpenStorage )( IStorage * This, const OLECHAR *pwcsName, IStorage *pstgPriority, DWORD grfMode, SNB snbExclude, DWORD reserved, IStorage **ppstg);
HRESULT(__stdcall *CopyTo )( IStorage * This, DWORD ciidExclude, const IID *rgiidExclude, SNB snbExclude, IStorage *pstgDest);
HRESULT(__stdcall *MoveElementTo )( IStorage * This, const OLECHAR *pwcsName, IStorage *pstgDest, const OLECHAR *pwcsNewName, DWORD grfFlags);
HRESULT(__stdcall *Commit )( IStorage * This, DWORD grfCommitFlags);
HRESULT(__stdcall *Revert )( IStorage * This);
HRESULT(__stdcall *EnumElements )( IStorage * This, DWORD reserved1, void *reserved2, DWORD reserved3, IEnumSTATSTG **ppenum);
HRESULT(__stdcall *DestroyElement )( IStorage * This, const OLECHAR *pwcsName);
HRESULT(__stdcall *RenameElement )( IStorage * This, const OLECHAR *pwcsOldName, const OLECHAR *pwcsNewName);
HRESULT(__stdcall *SetElementTimes )( IStorage * This, const OLECHAR *pwcsName, const FILETIME *pctime, const FILETIME *patime, const FILETIME *pmtime);
HRESULT(__stdcall *SetClass )( IStorage * This, const IID * const clsid);
HRESULT(__stdcall *SetStateBits )( IStorage * This, DWORD grfStateBits, DWORD grfMask);
HRESULT(__stdcall *Stat )( IStorage * This, STATSTG *pstatstg, DWORD grfStatFlag);
} IStorageVtbl;
struct IStorage {
struct IStorageVtbl *lpVtbl;
};
HRESULT __stdcall IStorage_RemoteOpenStream_Proxy( IStorage * This, const OLECHAR *pwcsName, uint32 cbReserved1, byte *reserved1, DWORD grfMode, DWORD reserved2, IStream **ppstm);
void __stdcall IStorage_RemoteOpenStream_Stub( IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
HRESULT __stdcall IStorage_RemoteCopyTo_Proxy( IStorage * This, DWORD ciidExclude, const IID *rgiidExclude, SNB snbExclude, IStorage *pstgDest);
void __stdcall IStorage_RemoteCopyTo_Stub( IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
HRESULT __stdcall IStorage_RemoteEnumElements_Proxy( IStorage * This, DWORD reserved1, uint32 cbReserved2, byte *reserved2, DWORD reserved3, IEnumSTATSTG **ppenum);
void __stdcall IStorage_RemoteEnumElements_Stub( IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
<typedef name="LPPERSISTFILE"><ptr><IPersistFile /></ptr></typedef>
extern const IID IID_IPersistFile;
typedef struct IPersistFileVtbl {
HRESULT(__stdcall *QueryInterface )( IPersistFile * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( IPersistFile * This);
ULONG(__stdcall *Release )( IPersistFile * This);
HRESULT(__stdcall *GetClassID )( IPersistFile * This, CLSID *pClassID);
HRESULT(__stdcall *IsDirty )( IPersistFile * This);
HRESULT(__stdcall *Load )( IPersistFile * This, LPCOLESTR pszFileName, DWORD dwMode);
HRESULT(__stdcall *Save )( IPersistFile * This, LPCOLESTR pszFileName, BOOL fRemember);
HRESULT(__stdcall *SaveCompleted )( IPersistFile * This, LPCOLESTR pszFileName);
HRESULT(__stdcall *GetCurFile )( IPersistFile * This, LPOLESTR *ppszFileName);
} IPersistFileVtbl;
struct IPersistFile {
struct IPersistFileVtbl *lpVtbl;
};
<typedef name="LPPERSISTSTORAGE"><ptr><IPersistStorage /></ptr></typedef>
extern const IID IID_IPersistStorage;
typedef struct IPersistStorageVtbl {
HRESULT(__stdcall *QueryInterface )( IPersistStorage * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( IPersistStorage * This);
ULONG(__stdcall *Release )( IPersistStorage * This);
HRESULT(__stdcall *GetClassID )( IPersistStorage * This, CLSID *pClassID);
HRESULT(__stdcall *IsDirty )( IPersistStorage * This);
HRESULT(__stdcall *InitNew )( IPersistStorage * This, IStorage *pStg);
HRESULT(__stdcall *Load )( IPersistStorage * This, IStorage *pStg);
HRESULT(__stdcall *Save )( IPersistStorage * This, IStorage *pStgSave, BOOL fSameAsLoad);
HRESULT(__stdcall *SaveCompleted )( IPersistStorage * This, IStorage *pStgNew);
HRESULT(__stdcall *HandsOffStorage )( IPersistStorage * This);
} IPersistStorageVtbl;
struct IPersistStorage {
struct IPersistStorageVtbl *lpVtbl;
};
<typedef name="LPLOCKBYTES"><ptr><ILockBytes /></ptr></typedef>
extern const IID IID_ILockBytes;
typedef struct ILockBytesVtbl {
HRESULT(__stdcall *QueryInterface )( ILockBytes * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( ILockBytes * This);
ULONG(__stdcall *Release )( ILockBytes * This);
HRESULT(__stdcall *ReadAt )( ILockBytes * This, ULARGE_INTEGER ulOffset, void *pv, ULONG cb, ULONG *pcbRead);
HRESULT(__stdcall *WriteAt )( ILockBytes * This, ULARGE_INTEGER ulOffset, const void *pv, ULONG cb, ULONG *pcbWritten);
HRESULT(__stdcall *Flush )( ILockBytes * This);
HRESULT(__stdcall *SetSize )( ILockBytes * This, ULARGE_INTEGER cb);
HRESULT(__stdcall *LockRegion )( ILockBytes * This, ULARGE_INTEGER libOffset, ULARGE_INTEGER cb, DWORD dwLockType);
HRESULT(__stdcall *UnlockRegion )( ILockBytes * This, ULARGE_INTEGER libOffset, ULARGE_INTEGER cb, DWORD dwLockType);
HRESULT(__stdcall *Stat )( ILockBytes * This, STATSTG *pstatstg, DWORD grfStatFlag);
} ILockBytesVtbl;
struct ILockBytes {
struct ILockBytesVtbl *lpVtbl;
};
HRESULT __stdcall ILockBytes_RemoteReadAt_Proxy( ILockBytes * This, ULARGE_INTEGER ulOffset, byte *pv, ULONG cb, ULONG *pcbRead);
void __stdcall ILockBytes_RemoteReadAt_Stub( IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
HRESULT __stdcall ILockBytes_RemoteWriteAt_Proxy( ILockBytes * This, ULARGE_INTEGER ulOffset, const byte *pv, ULONG cb, ULONG *pcbWritten);
void __stdcall ILockBytes_RemoteWriteAt_Stub( IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
<typedef name="LPENUMFORMATETC"><ptr><IEnumFORMATETC /></ptr></typedef>
typedef struct tagDVTARGETDEVICE {
<field name="tdSize"><DWORD /></field>
<field name="tdDriverNameOffset"><WORD /></field>
<field name="tdDeviceNameOffset"><WORD /></field>
<field name="tdPortNameOffset"><WORD /></field>
<field name="tdExtDevmodeOffset"><WORD /></field>
<field name="tdData"><arr length=" 1 "><BYTE /></arr></field>
} DVTARGETDEVICE;
<typedef name="LPCLIPFORMAT"><ptr><CLIPFORMAT /></ptr></typedef>
typedef struct tagFORMATETC {
<field name="cfFormat"><CLIPFORMAT /></field>
<field name="ptd"><ptr><DVTARGETDEVICE /></ptr></field>
<field name="dwAspect"><DWORD /></field>
<field name="lindex"><LONG /></field>
<field name="tymed"><DWORD /></field>
} FORMATETC;
typedef struct tagFORMATETC *LPFORMATETC;
extern const IID IID_IEnumFORMATETC;
typedef struct IEnumFORMATETCVtbl {
HRESULT(__stdcall *QueryInterface )( IEnumFORMATETC * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( IEnumFORMATETC * This);
ULONG(__stdcall *Release )( IEnumFORMATETC * This);
HRESULT(__stdcall *Next )( IEnumFORMATETC * This, ULONG celt, FORMATETC *rgelt, ULONG *pceltFetched);
HRESULT(__stdcall *Skip )( IEnumFORMATETC * This, ULONG celt);
HRESULT(__stdcall *Reset )( IEnumFORMATETC * This);
HRESULT(__stdcall *Clone )( IEnumFORMATETC * This, IEnumFORMATETC **ppenum);
} IEnumFORMATETCVtbl;
struct IEnumFORMATETC {
struct IEnumFORMATETCVtbl *lpVtbl;
};
HRESULT __stdcall IEnumFORMATETC_RemoteNext_Proxy( IEnumFORMATETC * This, ULONG celt, FORMATETC *rgelt, ULONG *pceltFetched);
void __stdcall IEnumFORMATETC_RemoteNext_Stub( IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
<typedef name="LPENUMSTATDATA"><ptr><IEnumSTATDATA /></ptr></typedef>
typedef enum tagADVF { ADVF_NODATA = 1, ADVF_PRIMEFIRST = 2, ADVF_ONLYONCE = 4, ADVF_DATAONSTOP = 64, ADVFCACHE_NOHANDLER = 8, ADVFCACHE_FORCEBUILTIN = 16, ADVFCACHE_ONSAVE = 32 } ADVF;
typedef struct tagSTATDATA {
<field name="formatetc"><FORMATETC /></field>
<field name="advf"><DWORD /></field>
<field name="pAdvSink"><ptr><IAdviseSink /></ptr></field>
<field name="dwConnection"><DWORD /></field>
} STATDATA;
<typedef name="LPSTATDATA"><ptr><STATDATA /></ptr></typedef>
extern const IID IID_IEnumSTATDATA;
typedef struct IEnumSTATDATAVtbl {
HRESULT(__stdcall *QueryInterface )( IEnumSTATDATA * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( IEnumSTATDATA * This);
ULONG(__stdcall *Release )( IEnumSTATDATA * This);
HRESULT(__stdcall *Next )( IEnumSTATDATA * This, ULONG celt, STATDATA *rgelt, ULONG *pceltFetched);
HRESULT(__stdcall *Skip )( IEnumSTATDATA * This, ULONG celt);
HRESULT(__stdcall *Reset )( IEnumSTATDATA * This);
HRESULT(__stdcall *Clone )( IEnumSTATDATA * This, IEnumSTATDATA **ppenum);
} IEnumSTATDATAVtbl;
struct IEnumSTATDATA {
struct IEnumSTATDATAVtbl *lpVtbl;
};
HRESULT __stdcall IEnumSTATDATA_RemoteNext_Proxy( IEnumSTATDATA * This, ULONG celt, STATDATA *rgelt, ULONG *pceltFetched);
void __stdcall IEnumSTATDATA_RemoteNext_Stub( IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
<typedef name="LPROOTSTORAGE"><ptr><IRootStorage /></ptr></typedef>
extern const IID IID_IRootStorage;
typedef struct IRootStorageVtbl {
HRESULT(__stdcall *QueryInterface )( IRootStorage * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( IRootStorage * This);
ULONG(__stdcall *Release )( IRootStorage * This);
HRESULT(__stdcall *SwitchToFile )( IRootStorage * This, LPOLESTR pszFile);
} IRootStorageVtbl;
struct IRootStorage {
struct IRootStorageVtbl *lpVtbl;
};
<typedef name="LPADVISESINK"><ptr><IAdviseSink /></ptr></typedef>
typedef enum tagTYMED { TYMED_HGLOBAL = 1, TYMED_FILE = 2, TYMED_ISTREAM = 4, TYMED_ISTORAGE = 8, TYMED_GDI = 16, TYMED_MFPICT = 32, TYMED_ENHMF = 64, TYMED_NULL = 0 } TYMED;
typedef struct tagRemSTGMEDIUM {
<field name="tymed"><DWORD /></field>
<field name="dwHandleType"><DWORD /></field>
<field name="pData"><uint32 /></field>
<field name="pUnkForRelease"><uint32 /></field>
<field name="cbData"><uint32 /></field>
<field name="data"><arr length=" 1 "><byte /></arr></field>
} RemSTGMEDIUM;
typedef struct tagSTGMEDIUM {
<field name="tymed"><DWORD /></field>
union {
<field name="hBitmap"><HBITMAP /></field>
<field name="hMetaFilePict"><HMETAFILEPICT /></field>
<field name="hEnhMetaFile"><HENHMETAFILE /></field>
<field name="hGlobal"><HGLOBAL /></field>
<field name="lpszFileName"><LPOLESTR /></field>
<field name="pstm"><ptr><IStream /></ptr></field>
<field name="pstg"><ptr><IStorage /></ptr></field>
} ;
<field name="pUnkForRelease"><ptr><IUnknown /></ptr></field>
} uSTGMEDIUM;
typedef struct _GDI_OBJECT {
<field name="ObjectType"><DWORD /></field>
union __MIDL_IAdviseSink_0002 {
<field name="hBitmap"><wireHBITMAP /></field>
<field name="hPalette"><wireHPALETTE /></field>
<field name="hGeneric"><wireHGLOBAL /></field>
} u;
} GDI_OBJECT;
typedef struct _userSTGMEDIUM {
struct _STGMEDIUM_UNION {
<field name="tymed"><DWORD /></field>
union __MIDL_IAdviseSink_0003 {
<field name="hMetaFilePict"><wireHMETAFILEPICT /></field>
<field name="hHEnhMetaFile"><wireHENHMETAFILE /></field>
<field name="hGdiHandle"><ptr><GDI_OBJECT /></ptr></field>
<field name="hGlobal"><wireHGLOBAL /></field>
<field name="lpszFileName"><LPOLESTR /></field>
<field name="pstm"><ptr><BYTE_BLOB /></ptr></field>
<field name="pstg"><ptr><BYTE_BLOB /></ptr></field>
} u;
} ;
<field name="pUnkForRelease"><ptr><IUnknown /></ptr></field>
} userSTGMEDIUM;
<typedef name="wireSTGMEDIUM"><ptr><userSTGMEDIUM /></ptr></typedef>
<typedef name="STGMEDIUM"><uSTGMEDIUM /></typedef>
<typedef name="wireASYNC_STGMEDIUM"><ptr><userSTGMEDIUM /></ptr></typedef>
<typedef name="ASYNC_STGMEDIUM"><STGMEDIUM /></typedef>
<typedef name="LPSTGMEDIUM"><ptr><STGMEDIUM /></ptr></typedef>
typedef struct _userFLAG_STGMEDIUM {
<field name="ContextFlags"><long /></field>
<field name="fPassOwnership"><long /></field>
<field name="Stgmed"><userSTGMEDIUM /></field>
} userFLAG_STGMEDIUM;
<typedef name="wireFLAG_STGMEDIUM"><ptr><userFLAG_STGMEDIUM /></ptr></typedef>
typedef struct _FLAG_STGMEDIUM {
<field name="ContextFlags"><long /></field>
<field name="fPassOwnership"><long /></field>
<field name="Stgmed"><STGMEDIUM /></field>
} FLAG_STGMEDIUM;
extern const IID IID_IAdviseSink;
typedef struct IAdviseSinkVtbl {
HRESULT(__stdcall *QueryInterface )( IAdviseSink * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( IAdviseSink * This);
ULONG(__stdcall *Release )( IAdviseSink * This);
void(__stdcall *OnDataChange )( IAdviseSink * This, FORMATETC *pFormatetc, STGMEDIUM *pStgmed);
void(__stdcall *OnViewChange )( IAdviseSink * This, DWORD dwAspect, LONG lindex);
void(__stdcall *OnRename )( IAdviseSink * This, IMoniker *pmk);
void(__stdcall *OnSave )( IAdviseSink * This);
void(__stdcall *OnClose )( IAdviseSink * This);
} IAdviseSinkVtbl;
struct IAdviseSink {
struct IAdviseSinkVtbl *lpVtbl;
};
HRESULT __stdcall IAdviseSink_RemoteOnDataChange_Proxy( IAdviseSink * This, FORMATETC *pFormatetc, ASYNC_STGMEDIUM *pStgmed);
void __stdcall IAdviseSink_RemoteOnDataChange_Stub( IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
HRESULT __stdcall IAdviseSink_RemoteOnViewChange_Proxy( IAdviseSink * This, DWORD dwAspect, LONG lindex);
void __stdcall IAdviseSink_RemoteOnViewChange_Stub( IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
HRESULT __stdcall IAdviseSink_RemoteOnRename_Proxy( IAdviseSink * This, IMoniker *pmk);
void __stdcall IAdviseSink_RemoteOnRename_Stub( IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
HRESULT __stdcall IAdviseSink_RemoteOnSave_Proxy( IAdviseSink * This);
void __stdcall IAdviseSink_RemoteOnSave_Stub( IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
HRESULT __stdcall IAdviseSink_RemoteOnClose_Proxy( IAdviseSink * This);
void __stdcall IAdviseSink_RemoteOnClose_Stub( IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
extern const IID IID_AsyncIAdviseSink;
typedef struct AsyncIAdviseSinkVtbl {
HRESULT(__stdcall *QueryInterface )( AsyncIAdviseSink * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( AsyncIAdviseSink * This);
ULONG(__stdcall *Release )( AsyncIAdviseSink * This);
void(__stdcall *Begin_OnDataChange )( AsyncIAdviseSink * This, FORMATETC *pFormatetc, STGMEDIUM *pStgmed);
void(__stdcall *Finish_OnDataChange )( AsyncIAdviseSink * This);
void(__stdcall *Begin_OnViewChange )( AsyncIAdviseSink * This, DWORD dwAspect, LONG lindex);
void(__stdcall *Finish_OnViewChange )( AsyncIAdviseSink * This);
void(__stdcall *Begin_OnRename )( AsyncIAdviseSink * This, IMoniker *pmk);
void(__stdcall *Finish_OnRename )( AsyncIAdviseSink * This);
void(__stdcall *Begin_OnSave )( AsyncIAdviseSink * This);
void(__stdcall *Finish_OnSave )( AsyncIAdviseSink * This);
void(__stdcall *Begin_OnClose )( AsyncIAdviseSink * This);
void(__stdcall *Finish_OnClose )( AsyncIAdviseSink * This);
} AsyncIAdviseSinkVtbl;
struct AsyncIAdviseSink {
struct AsyncIAdviseSinkVtbl *lpVtbl;
};
HRESULT __stdcall AsyncIAdviseSink_Begin_RemoteOnDataChange_Proxy( AsyncIAdviseSink * This, FORMATETC *pFormatetc, ASYNC_STGMEDIUM *pStgmed);
void __stdcall AsyncIAdviseSink_Begin_RemoteOnDataChange_Stub( IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
HRESULT __stdcall AsyncIAdviseSink_Finish_RemoteOnDataChange_Proxy( AsyncIAdviseSink * This);
void __stdcall AsyncIAdviseSink_Finish_RemoteOnDataChange_Stub( IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
HRESULT __stdcall AsyncIAdviseSink_Begin_RemoteOnViewChange_Proxy( AsyncIAdviseSink * This, DWORD dwAspect, LONG lindex);
void __stdcall AsyncIAdviseSink_Begin_RemoteOnViewChange_Stub( IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
HRESULT __stdcall AsyncIAdviseSink_Finish_RemoteOnViewChange_Proxy( AsyncIAdviseSink * This);
void __stdcall AsyncIAdviseSink_Finish_RemoteOnViewChange_Stub( IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
HRESULT __stdcall AsyncIAdviseSink_Begin_RemoteOnRename_Proxy( AsyncIAdviseSink * This, IMoniker *pmk);
void __stdcall AsyncIAdviseSink_Begin_RemoteOnRename_Stub( IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
HRESULT __stdcall AsyncIAdviseSink_Finish_RemoteOnRename_Proxy( AsyncIAdviseSink * This);
void __stdcall AsyncIAdviseSink_Finish_RemoteOnRename_Stub( IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
HRESULT __stdcall AsyncIAdviseSink_Begin_RemoteOnSave_Proxy( AsyncIAdviseSink * This);
void __stdcall AsyncIAdviseSink_Begin_RemoteOnSave_Stub( IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
HRESULT __stdcall AsyncIAdviseSink_Finish_RemoteOnSave_Proxy( AsyncIAdviseSink * This);
void __stdcall AsyncIAdviseSink_Finish_RemoteOnSave_Stub( IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
HRESULT __stdcall AsyncIAdviseSink_Begin_RemoteOnClose_Proxy( AsyncIAdviseSink * This);
void __stdcall AsyncIAdviseSink_Begin_RemoteOnClose_Stub( IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
HRESULT __stdcall AsyncIAdviseSink_Finish_RemoteOnClose_Proxy( AsyncIAdviseSink * This);
void __stdcall AsyncIAdviseSink_Finish_RemoteOnClose_Stub( IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
<typedef name="LPADVISESINK2"><ptr><IAdviseSink2 /></ptr></typedef>
extern const IID IID_IAdviseSink2;
typedef struct IAdviseSink2Vtbl {
HRESULT(__stdcall *QueryInterface )( IAdviseSink2 * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( IAdviseSink2 * This);
ULONG(__stdcall *Release )( IAdviseSink2 * This);
void(__stdcall *OnDataChange )( IAdviseSink2 * This, FORMATETC *pFormatetc, STGMEDIUM *pStgmed);
void(__stdcall *OnViewChange )( IAdviseSink2 * This, DWORD dwAspect, LONG lindex);
void(__stdcall *OnRename )( IAdviseSink2 * This, IMoniker *pmk);
void(__stdcall *OnSave )( IAdviseSink2 * This);
void(__stdcall *OnClose )( IAdviseSink2 * This);
void(__stdcall *OnLinkSrcChange )( IAdviseSink2 * This, IMoniker *pmk);
} IAdviseSink2Vtbl;
struct IAdviseSink2 {
struct IAdviseSink2Vtbl *lpVtbl;
};
HRESULT __stdcall IAdviseSink2_RemoteOnLinkSrcChange_Proxy( IAdviseSink2 * This, IMoniker *pmk);
void __stdcall IAdviseSink2_RemoteOnLinkSrcChange_Stub( IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
extern const IID IID_AsyncIAdviseSink2;
typedef struct AsyncIAdviseSink2Vtbl {
HRESULT(__stdcall *QueryInterface )( AsyncIAdviseSink2 * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( AsyncIAdviseSink2 * This);
ULONG(__stdcall *Release )( AsyncIAdviseSink2 * This);
void(__stdcall *Begin_OnDataChange )( AsyncIAdviseSink2 * This, FORMATETC *pFormatetc, STGMEDIUM *pStgmed);
void(__stdcall *Finish_OnDataChange )( AsyncIAdviseSink2 * This);
void(__stdcall *Begin_OnViewChange )( AsyncIAdviseSink2 * This, DWORD dwAspect, LONG lindex);
void(__stdcall *Finish_OnViewChange )( AsyncIAdviseSink2 * This);
void(__stdcall *Begin_OnRename )( AsyncIAdviseSink2 * This, IMoniker *pmk);
void(__stdcall *Finish_OnRename )( AsyncIAdviseSink2 * This);
void(__stdcall *Begin_OnSave )( AsyncIAdviseSink2 * This);
void(__stdcall *Finish_OnSave )( AsyncIAdviseSink2 * This);
void(__stdcall *Begin_OnClose )( AsyncIAdviseSink2 * This);
void(__stdcall *Finish_OnClose )( AsyncIAdviseSink2 * This);
void(__stdcall *Begin_OnLinkSrcChange )( AsyncIAdviseSink2 * This, IMoniker *pmk);
void(__stdcall *Finish_OnLinkSrcChange )( AsyncIAdviseSink2 * This);
} AsyncIAdviseSink2Vtbl;
struct AsyncIAdviseSink2 {
struct AsyncIAdviseSink2Vtbl *lpVtbl;
};
HRESULT __stdcall AsyncIAdviseSink2_Begin_RemoteOnLinkSrcChange_Proxy( AsyncIAdviseSink2 * This, IMoniker *pmk);
void __stdcall AsyncIAdviseSink2_Begin_RemoteOnLinkSrcChange_Stub( IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
HRESULT __stdcall AsyncIAdviseSink2_Finish_RemoteOnLinkSrcChange_Proxy( AsyncIAdviseSink2 * This);
void __stdcall AsyncIAdviseSink2_Finish_RemoteOnLinkSrcChange_Stub( IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
<typedef name="LPDATAOBJECT"><ptr><IDataObject /></ptr></typedef>
typedef enum tagDATADIR { DATADIR_GET = 1, DATADIR_SET = 2 } DATADIR;
extern const IID IID_IDataObject;
typedef struct IDataObjectVtbl {
HRESULT(__stdcall *QueryInterface )( IDataObject * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( IDataObject * This);
ULONG(__stdcall *Release )( IDataObject * This);
HRESULT(__stdcall *GetData )( IDataObject * This, FORMATETC *pformatetcIn, STGMEDIUM *pmedium);
HRESULT(__stdcall *GetDataHere )( IDataObject * This, FORMATETC *pformatetc, STGMEDIUM *pmedium);
HRESULT(__stdcall *QueryGetData )( IDataObject * This, FORMATETC *pformatetc);
HRESULT(__stdcall *GetCanonicalFormatEtc )( IDataObject * This, FORMATETC *pformatectIn, FORMATETC *pformatetcOut);
HRESULT(__stdcall *SetData )( IDataObject * This, FORMATETC *pformatetc, STGMEDIUM *pmedium, BOOL fRelease);
HRESULT(__stdcall *EnumFormatEtc )( IDataObject * This, DWORD dwDirection, IEnumFORMATETC **ppenumFormatEtc);
HRESULT(__stdcall *DAdvise )( IDataObject * This, FORMATETC *pformatetc, DWORD advf, IAdviseSink *pAdvSink, DWORD *pdwConnection);
HRESULT(__stdcall *DUnadvise )( IDataObject * This, DWORD dwConnection);
HRESULT(__stdcall *EnumDAdvise )( IDataObject * This, IEnumSTATDATA **ppenumAdvise);
} IDataObjectVtbl;
struct IDataObject {
struct IDataObjectVtbl *lpVtbl;
};
HRESULT __stdcall IDataObject_RemoteGetData_Proxy( IDataObject * This, FORMATETC *pformatetcIn, STGMEDIUM *pRemoteMedium);
void __stdcall IDataObject_RemoteGetData_Stub( IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
HRESULT __stdcall IDataObject_RemoteGetDataHere_Proxy( IDataObject * This, FORMATETC *pformatetc, STGMEDIUM *pRemoteMedium);
void __stdcall IDataObject_RemoteGetDataHere_Stub( IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
HRESULT __stdcall IDataObject_RemoteSetData_Proxy( IDataObject * This, FORMATETC *pformatetc, FLAG_STGMEDIUM *pmedium, BOOL fRelease);
void __stdcall IDataObject_RemoteSetData_Stub( IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
<typedef name="LPDATAADVISEHOLDER"><ptr><IDataAdviseHolder /></ptr></typedef>
extern const IID IID_IDataAdviseHolder;
typedef struct IDataAdviseHolderVtbl {
HRESULT(__stdcall *QueryInterface )( IDataAdviseHolder * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( IDataAdviseHolder * This);
ULONG(__stdcall *Release )( IDataAdviseHolder * This);
HRESULT(__stdcall *Advise )( IDataAdviseHolder * This, IDataObject *pDataObject, FORMATETC *pFetc, DWORD advf, IAdviseSink *pAdvise, DWORD *pdwConnection);
HRESULT(__stdcall *Unadvise )( IDataAdviseHolder * This, DWORD dwConnection);
HRESULT(__stdcall *EnumAdvise )( IDataAdviseHolder * This, IEnumSTATDATA **ppenumAdvise);
HRESULT(__stdcall *SendOnDataChange )( IDataAdviseHolder * This, IDataObject *pDataObject, DWORD dwReserved, DWORD advf);
} IDataAdviseHolderVtbl;
struct IDataAdviseHolder {
struct IDataAdviseHolderVtbl *lpVtbl;
};
<typedef name="LPMESSAGEFILTER"><ptr><IMessageFilter /></ptr></typedef>
typedef enum tagCALLTYPE { CALLTYPE_TOPLEVEL = 1, CALLTYPE_NESTED = 2, CALLTYPE_ASYNC = 3, CALLTYPE_TOPLEVEL_CALLPENDING = 4, CALLTYPE_ASYNC_CALLPENDING = 5 } CALLTYPE;
typedef enum tagSERVERCALL { SERVERCALL_ISHANDLED = 0, SERVERCALL_REJECTED = 1, SERVERCALL_RETRYLATER = 2 } SERVERCALL;
typedef enum tagPENDINGTYPE { PENDINGTYPE_TOPLEVEL = 1, PENDINGTYPE_NESTED = 2 } PENDINGTYPE;
typedef enum tagPENDINGMSG { PENDINGMSG_CANCELCALL = 0, PENDINGMSG_WAITNOPROCESS = 1, PENDINGMSG_WAITDEFPROCESS = 2 } PENDINGMSG;
typedef struct tagINTERFACEINFO {
<field name="pUnk"><ptr><IUnknown /></ptr></field>
<field name="iid"><IID /></field>
<field name="wMethod"><WORD /></field>
} INTERFACEINFO;
typedef struct tagINTERFACEINFO *LPINTERFACEINFO;
extern const IID IID_IMessageFilter;
typedef struct IMessageFilterVtbl {
HRESULT(__stdcall *QueryInterface )( IMessageFilter * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( IMessageFilter * This);
ULONG(__stdcall *Release )( IMessageFilter * This);
DWORD(__stdcall *HandleInComingCall )( IMessageFilter * This, DWORD dwCallType, HTASK htaskCaller, DWORD dwTickCount, LPINTERFACEINFO lpInterfaceInfo);
DWORD(__stdcall *RetryRejectedCall )( IMessageFilter * This, HTASK htaskCallee, DWORD dwTickCount, DWORD dwRejectType);
DWORD(__stdcall *MessagePending )( IMessageFilter * This, HTASK htaskCallee, DWORD dwTickCount, DWORD dwPendingType);
} IMessageFilterVtbl;
struct IMessageFilter {
struct IMessageFilterVtbl *lpVtbl;
};
<typedef name="RPCOLEDATAREP"><uint32 /></typedef>
typedef struct tagRPCOLEMESSAGE {
<field name="reserved1"><ptr><void /></ptr></field>
<field name="dataRepresentation"><RPCOLEDATAREP /></field>
<field name="Buffer"><ptr><void /></ptr></field>
<field name="cbBuffer"><ULONG /></field>
<field name="iMethod"><ULONG /></field>
void *reserved2[ 5 ];
<field name="rpcFlags"><ULONG /></field>
} RPCOLEMESSAGE;
<typedef name="PRPCOLEMESSAGE"><ptr><RPCOLEMESSAGE /></ptr></typedef>
extern const IID IID_IRpcChannelBuffer;
typedef struct IRpcChannelBufferVtbl {
HRESULT(__stdcall *QueryInterface )( IRpcChannelBuffer * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( IRpcChannelBuffer * This);
ULONG(__stdcall *Release )( IRpcChannelBuffer * This);
HRESULT(__stdcall *GetBuffer )( IRpcChannelBuffer * This, RPCOLEMESSAGE *pMessage, const IID * const riid);
HRESULT(__stdcall *SendReceive )( IRpcChannelBuffer * This, RPCOLEMESSAGE *pMessage, ULONG *pStatus);
HRESULT(__stdcall *FreeBuffer )( IRpcChannelBuffer * This, RPCOLEMESSAGE *pMessage);
HRESULT(__stdcall *GetDestCtx )( IRpcChannelBuffer * This, DWORD *pdwDestContext, void **ppvDestContext);
HRESULT(__stdcall *IsConnected )( IRpcChannelBuffer * This);
} IRpcChannelBufferVtbl;
struct IRpcChannelBuffer {
struct IRpcChannelBufferVtbl *lpVtbl;
};
extern const IID IID_IRpcChannelBuffer2;
typedef struct IRpcChannelBuffer2Vtbl {
HRESULT(__stdcall *QueryInterface )( IRpcChannelBuffer2 * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( IRpcChannelBuffer2 * This);
ULONG(__stdcall *Release )( IRpcChannelBuffer2 * This);
HRESULT(__stdcall *GetBuffer )( IRpcChannelBuffer2 * This, RPCOLEMESSAGE *pMessage, const IID * const riid);
HRESULT(__stdcall *SendReceive )( IRpcChannelBuffer2 * This, RPCOLEMESSAGE *pMessage, ULONG *pStatus);
HRESULT(__stdcall *FreeBuffer )( IRpcChannelBuffer2 * This, RPCOLEMESSAGE *pMessage);
HRESULT(__stdcall *GetDestCtx )( IRpcChannelBuffer2 * This, DWORD *pdwDestContext, void **ppvDestContext);
HRESULT(__stdcall *IsConnected )( IRpcChannelBuffer2 * This);
HRESULT(__stdcall *GetProtocolVersion )( IRpcChannelBuffer2 * This, DWORD *pdwVersion);
} IRpcChannelBuffer2Vtbl;
struct IRpcChannelBuffer2 {
struct IRpcChannelBuffer2Vtbl *lpVtbl;
};
extern const IID IID_IAsyncRpcChannelBuffer;
typedef struct IAsyncRpcChannelBufferVtbl {
HRESULT(__stdcall *QueryInterface )( IAsyncRpcChannelBuffer * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( IAsyncRpcChannelBuffer * This);
ULONG(__stdcall *Release )( IAsyncRpcChannelBuffer * This);
HRESULT(__stdcall *GetBuffer )( IAsyncRpcChannelBuffer * This, RPCOLEMESSAGE *pMessage, const IID * const riid);
HRESULT(__stdcall *SendReceive )( IAsyncRpcChannelBuffer * This, RPCOLEMESSAGE *pMessage, ULONG *pStatus);
HRESULT(__stdcall *FreeBuffer )( IAsyncRpcChannelBuffer * This, RPCOLEMESSAGE *pMessage);
HRESULT(__stdcall *GetDestCtx )( IAsyncRpcChannelBuffer * This, DWORD *pdwDestContext, void **ppvDestContext);
HRESULT(__stdcall *IsConnected )( IAsyncRpcChannelBuffer * This);
HRESULT(__stdcall *GetProtocolVersion )( IAsyncRpcChannelBuffer * This, DWORD *pdwVersion);
HRESULT(__stdcall *Send )( IAsyncRpcChannelBuffer * This, RPCOLEMESSAGE *pMsg, ISynchronize *pSync, ULONG *pulStatus);
HRESULT(__stdcall *Receive )( IAsyncRpcChannelBuffer * This, RPCOLEMESSAGE *pMsg, ULONG *pulStatus);
HRESULT(__stdcall *GetDestCtxEx )( IAsyncRpcChannelBuffer * This, RPCOLEMESSAGE *pMsg, DWORD *pdwDestContext, void **ppvDestContext);
} IAsyncRpcChannelBufferVtbl;
struct IAsyncRpcChannelBuffer {
struct IAsyncRpcChannelBufferVtbl *lpVtbl;
};
extern const IID IID_IRpcChannelBuffer3;
typedef struct IRpcChannelBuffer3Vtbl {
HRESULT(__stdcall *QueryInterface )( IRpcChannelBuffer3 * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( IRpcChannelBuffer3 * This);
ULONG(__stdcall *Release )( IRpcChannelBuffer3 * This);
HRESULT(__stdcall *GetBuffer )( IRpcChannelBuffer3 * This, RPCOLEMESSAGE *pMessage, const IID * const riid);
HRESULT(__stdcall *SendReceive )( IRpcChannelBuffer3 * This, RPCOLEMESSAGE *pMessage, ULONG *pStatus);
HRESULT(__stdcall *FreeBuffer )( IRpcChannelBuffer3 * This, RPCOLEMESSAGE *pMessage);
HRESULT(__stdcall *GetDestCtx )( IRpcChannelBuffer3 * This, DWORD *pdwDestContext, void **ppvDestContext);
HRESULT(__stdcall *IsConnected )( IRpcChannelBuffer3 * This);
HRESULT(__stdcall *GetProtocolVersion )( IRpcChannelBuffer3 * This, DWORD *pdwVersion);
HRESULT(__stdcall *Send )( IRpcChannelBuffer3 * This, RPCOLEMESSAGE *pMsg, ULONG *pulStatus);
HRESULT(__stdcall *Receive )( IRpcChannelBuffer3 * This, RPCOLEMESSAGE *pMsg, ULONG ulSize, ULONG *pulStatus);
HRESULT(__stdcall *Cancel )( IRpcChannelBuffer3 * This, RPCOLEMESSAGE *pMsg);
HRESULT(__stdcall *GetCallContext )( IRpcChannelBuffer3 * This, RPCOLEMESSAGE *pMsg, const IID * const riid, void **pInterface);
HRESULT(__stdcall *GetDestCtxEx )( IRpcChannelBuffer3 * This, RPCOLEMESSAGE *pMsg, DWORD *pdwDestContext, void **ppvDestContext);
HRESULT(__stdcall *GetState )( IRpcChannelBuffer3 * This, RPCOLEMESSAGE *pMsg, DWORD *pState);
HRESULT(__stdcall *RegisterAsync )( IRpcChannelBuffer3 * This, RPCOLEMESSAGE *pMsg, IAsyncManager *pAsyncMgr);
} IRpcChannelBuffer3Vtbl;
struct IRpcChannelBuffer3 {
struct IRpcChannelBuffer3Vtbl *lpVtbl;
};
extern const IID IID_IRpcSyntaxNegotiate;
typedef struct IRpcSyntaxNegotiateVtbl {
HRESULT(__stdcall *QueryInterface )( IRpcSyntaxNegotiate * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( IRpcSyntaxNegotiate * This);
ULONG(__stdcall *Release )( IRpcSyntaxNegotiate * This);
HRESULT(__stdcall *NegotiateSyntax )( IRpcSyntaxNegotiate * This, RPCOLEMESSAGE *pMsg);
} IRpcSyntaxNegotiateVtbl;
struct IRpcSyntaxNegotiate {
struct IRpcSyntaxNegotiateVtbl *lpVtbl;
};
extern const IID IID_IRpcProxyBuffer;
typedef struct IRpcProxyBufferVtbl {
HRESULT(__stdcall *QueryInterface )( IRpcProxyBuffer * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( IRpcProxyBuffer * This);
ULONG(__stdcall *Release )( IRpcProxyBuffer * This);
HRESULT(__stdcall *Connect )( IRpcProxyBuffer * This, IRpcChannelBuffer *pRpcChannelBuffer);
void(__stdcall *Disconnect )( IRpcProxyBuffer * This);
} IRpcProxyBufferVtbl;
struct IRpcProxyBuffer {
struct IRpcProxyBufferVtbl *lpVtbl;
};
extern const IID IID_IRpcStubBuffer;
typedef struct IRpcStubBufferVtbl {
HRESULT(__stdcall *QueryInterface )( IRpcStubBuffer * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( IRpcStubBuffer * This);
ULONG(__stdcall *Release )( IRpcStubBuffer * This);
HRESULT(__stdcall *Connect )( IRpcStubBuffer * This, IUnknown *pUnkServer);
void(__stdcall *Disconnect )( IRpcStubBuffer * This);
HRESULT(__stdcall *Invoke )( IRpcStubBuffer * This, RPCOLEMESSAGE *_prpcmsg, IRpcChannelBuffer *_pRpcChannelBuffer);
IRpcStubBuffer *( __stdcall *IsIIDSupported )( IRpcStubBuffer * This, const IID * const riid);
ULONG(__stdcall *CountRefs )( IRpcStubBuffer * This);
HRESULT(__stdcall *DebugServerQueryInterface )( IRpcStubBuffer * This, void **ppv);
void(__stdcall *DebugServerRelease )( IRpcStubBuffer * This, void *pv);
} IRpcStubBufferVtbl;
struct IRpcStubBuffer {
struct IRpcStubBufferVtbl *lpVtbl;
};
extern const IID IID_IPSFactoryBuffer;
typedef struct IPSFactoryBufferVtbl {
HRESULT(__stdcall *QueryInterface )( IPSFactoryBuffer * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( IPSFactoryBuffer * This);
ULONG(__stdcall *Release )( IPSFactoryBuffer * This);
HRESULT(__stdcall *CreateProxy )( IPSFactoryBuffer * This, IUnknown *pUnkOuter, const IID * const riid, IRpcProxyBuffer **ppProxy, void **ppv);
HRESULT(__stdcall *CreateStub )( IPSFactoryBuffer * This, const IID * const riid, IUnknown *pUnkServer, IRpcStubBuffer **ppStub);
} IPSFactoryBufferVtbl;
struct IPSFactoryBuffer {
struct IPSFactoryBufferVtbl *lpVtbl;
};
typedef struct SChannelHookCallInfo {
<field name="iid"><IID /></field>
<field name="cbSize"><DWORD /></field>
<field name="uCausality"><GUID /></field>
<field name="dwServerPid"><DWORD /></field>
<field name="iMethod"><DWORD /></field>
<field name="pObject"><ptr><void /></ptr></field>
} SChannelHookCallInfo;
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0041_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0041_v0_0_s_ifspec;
extern const IID IID_IChannelHook;
typedef struct IChannelHookVtbl {
HRESULT(__stdcall *QueryInterface )( IChannelHook * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( IChannelHook * This);
ULONG(__stdcall *Release )( IChannelHook * This);
void(__stdcall *ClientGetSize )( IChannelHook * This, const GUID * const uExtent, const IID * const riid, ULONG *pDataSize);
void(__stdcall *ClientFillBuffer )( IChannelHook * This, const GUID * const uExtent, const IID * const riid, ULONG *pDataSize, void *pDataBuffer);
void(__stdcall *ClientNotify )( IChannelHook * This, const GUID * const uExtent, const IID * const riid, ULONG cbDataSize, void *pDataBuffer, DWORD lDataRep, HRESULT hrFault);
void(__stdcall *ServerNotify )( IChannelHook * This, const GUID * const uExtent, const IID * const riid, ULONG cbDataSize, void *pDataBuffer, DWORD lDataRep);
void(__stdcall *ServerGetSize )( IChannelHook * This, const GUID * const uExtent, const IID * const riid, HRESULT hrFault, ULONG *pDataSize);
void(__stdcall *ServerFillBuffer )( IChannelHook * This, const GUID * const uExtent, const IID * const riid, ULONG *pDataSize, void *pDataBuffer, HRESULT hrFault);
} IChannelHookVtbl;
struct IChannelHook {
struct IChannelHookVtbl *lpVtbl;
};
extern const FMTID FMTID_SummaryInformation;
extern const FMTID FMTID_DocSummaryInformation;
extern const FMTID FMTID_UserDefinedProperties;
extern const FMTID FMTID_DiscardableInformation;
extern const FMTID FMTID_ImageSummaryInformation;
extern const FMTID FMTID_AudioSummaryInformation;
extern const FMTID FMTID_VideoSummaryInformation;
extern const FMTID FMTID_MediaFileSummaryInformation;
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0042_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0042_v0_0_s_ifspec;
typedef struct tagSOLE_AUTHENTICATION_SERVICE {
<field name="dwAuthnSvc"><DWORD /></field>
<field name="dwAuthzSvc"><DWORD /></field>
<field name="pPrincipalName"><ptr><OLECHAR /></ptr></field>
<field name="hr"><HRESULT /></field>
} SOLE_AUTHENTICATION_SERVICE;
<typedef name="PSOLE_AUTHENTICATION_SERVICE"><ptr><SOLE_AUTHENTICATION_SERVICE /></ptr></typedef>
typedef enum tagEOLE_AUTHENTICATION_CAPABILITIES { EOAC_NONE = 0, EOAC_MUTUAL_AUTH = 0x1, EOAC_STATIC_CLOAKING = 0x20, EOAC_DYNAMIC_CLOAKING = 0x40, EOAC_ANY_AUTHORITY = 0x80, EOAC_MAKE_FULLSIC = 0x100, EOAC_DEFAULT = 0x800, EOAC_SECURE_REFS = 0x2, EOAC_ACCESS_CONTROL = 0x4, EOAC_APPID = 0x8, EOAC_DYNAMIC = 0x10, EOAC_REQUIRE_FULLSIC = 0x200, EOAC_AUTO_IMPERSONATE = 0x400, EOAC_NO_CUSTOM_MARSHAL = 0x2000, EOAC_DISABLE_AAA = 0x1000 } EOLE_AUTHENTICATION_CAPABILITIES;
typedef struct tagSOLE_AUTHENTICATION_INFO {
<field name="dwAuthnSvc"><DWORD /></field>
<field name="dwAuthzSvc"><DWORD /></field>
<field name="pAuthInfo"><ptr><void /></ptr></field>
} SOLE_AUTHENTICATION_INFO;
typedef struct tagSOLE_AUTHENTICATION_INFO *PSOLE_AUTHENTICATION_INFO;
typedef struct tagSOLE_AUTHENTICATION_LIST {
<field name="cAuthInfo"><DWORD /></field>
<field name="aAuthInfo"><ptr><SOLE_AUTHENTICATION_INFO /></ptr></field>
} SOLE_AUTHENTICATION_LIST;
typedef struct tagSOLE_AUTHENTICATION_LIST *PSOLE_AUTHENTICATION_LIST;
extern const IID IID_IClientSecurity;
typedef struct IClientSecurityVtbl {
HRESULT(__stdcall *QueryInterface )( IClientSecurity * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( IClientSecurity * This);
ULONG(__stdcall *Release )( IClientSecurity * This);
HRESULT(__stdcall *QueryBlanket )( IClientSecurity * This, IUnknown *pProxy, DWORD *pAuthnSvc, DWORD *pAuthzSvc, OLECHAR **pServerPrincName, DWORD *pAuthnLevel, DWORD *pImpLevel, void **pAuthInfo, DWORD *pCapabilites);
HRESULT(__stdcall *SetBlanket )( IClientSecurity * This, IUnknown *pProxy, DWORD dwAuthnSvc, DWORD dwAuthzSvc, OLECHAR *pServerPrincName, DWORD dwAuthnLevel, DWORD dwImpLevel, void *pAuthInfo, DWORD dwCapabilities);
HRESULT(__stdcall *CopyProxy )( IClientSecurity * This, IUnknown *pProxy, IUnknown **ppCopy);
} IClientSecurityVtbl;
struct IClientSecurity {
struct IClientSecurityVtbl *lpVtbl;
};
extern const IID IID_IServerSecurity;
typedef struct IServerSecurityVtbl {
HRESULT(__stdcall *QueryInterface )( IServerSecurity * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( IServerSecurity * This);
ULONG(__stdcall *Release )( IServerSecurity * This);
HRESULT(__stdcall *QueryBlanket )( IServerSecurity * This, DWORD *pAuthnSvc, DWORD *pAuthzSvc, OLECHAR **pServerPrincName, DWORD *pAuthnLevel, DWORD *pImpLevel, void **pPrivs, DWORD *pCapabilities);
HRESULT(__stdcall *ImpersonateClient )( IServerSecurity * This);
HRESULT(__stdcall *RevertToSelf )( IServerSecurity * This);
BOOL(__stdcall *IsImpersonating )( IServerSecurity * This);
} IServerSecurityVtbl;
struct IServerSecurity {
struct IServerSecurityVtbl *lpVtbl;
};
extern const IID IID_IClassActivator;
typedef struct IClassActivatorVtbl {
HRESULT(__stdcall *QueryInterface )( IClassActivator * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( IClassActivator * This);
ULONG(__stdcall *Release )( IClassActivator * This);
HRESULT(__stdcall *GetClassObject )( IClassActivator * This, const IID * const rclsid, DWORD dwClassContext, LCID locale, const IID * const riid, void **ppv);
} IClassActivatorVtbl;
struct IClassActivator {
struct IClassActivatorVtbl *lpVtbl;
};
typedef enum tagRPCOPT_PROPERTIES { COMBND_RPCTIMEOUT = 0x1, COMBND_SERVER_LOCALITY = 0x2 } RPCOPT_PROPERTIES;
typedef enum tagRPCOPT_SERVER_LOCALITY_VALUES { SERVER_LOCALITY_PROCESS_LOCAL = 0, SERVER_LOCALITY_MACHINE_LOCAL = 1, SERVER_LOCALITY_REMOTE = 2 } RPCOPT_SERVER_LOCALITY_VALUES;
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0045_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0045_v0_0_s_ifspec;
extern const IID IID_IRpcOptions;
typedef struct IRpcOptionsVtbl {
HRESULT(__stdcall *QueryInterface )( IRpcOptions * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( IRpcOptions * This);
ULONG(__stdcall *Release )( IRpcOptions * This);
HRESULT(__stdcall *Set )( IRpcOptions * This, IUnknown *pPrx, RPCOPT_PROPERTIES dwProperty, ULONG_PTR dwValue);
HRESULT(__stdcall *Query )( IRpcOptions * This, IUnknown *pPrx, RPCOPT_PROPERTIES dwProperty, ULONG_PTR *pdwValue);
} IRpcOptionsVtbl;
struct IRpcOptions {
struct IRpcOptionsVtbl *lpVtbl;
};
typedef enum tagGLOBALOPT_PROPERTIES { COMGLB_EXCEPTION_HANDLING = 1, COMGLB_APPID = 2, COMGLB_RPC_THREADPOOL_SETTING = 3 } GLOBALOPT_PROPERTIES;
typedef enum tagGLOBALOPT_EH_VALUES { COMGLB_EXCEPTION_HANDLE = 0, COMGLB_EXCEPTION_DONOT_HANDLE_FATAL = 1, COMGLB_EXCEPTION_DONOT_HANDLE = COMGLB_EXCEPTION_DONOT_HANDLE_FATAL, COMGLB_EXCEPTION_DONOT_HANDLE_ANY = 2 } GLOBALOPT_EH_VALUES;
typedef enum tagGLOBALOPT_RPCTP_VALUES { COMGLB_RPC_THREADPOOL_SETTING_DEFAULT_POOL = 0, COMGLB_RPC_THREADPOOL_SETTING_PRIVATE_POOL = 1 } GLOBALOPT_RPCTP_VALUES;
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0046_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0046_v0_0_s_ifspec;
extern const IID IID_IGlobalOptions;
typedef struct IGlobalOptionsVtbl {
HRESULT(__stdcall *QueryInterface )( IGlobalOptions * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( IGlobalOptions * This);
ULONG(__stdcall *Release )( IGlobalOptions * This);
HRESULT(__stdcall *Set )( IGlobalOptions * This, GLOBALOPT_PROPERTIES dwProperty, ULONG_PTR dwValue);
HRESULT(__stdcall *Query )( IGlobalOptions * This, GLOBALOPT_PROPERTIES dwProperty, ULONG_PTR *pdwValue);
} IGlobalOptionsVtbl;
struct IGlobalOptions {
struct IGlobalOptionsVtbl *lpVtbl;
};
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0047_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0047_v0_0_s_ifspec;
extern const IID IID_IFillLockBytes;
typedef struct IFillLockBytesVtbl {
HRESULT(__stdcall *QueryInterface )( IFillLockBytes * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( IFillLockBytes * This);
ULONG(__stdcall *Release )( IFillLockBytes * This);
HRESULT(__stdcall *FillAppend )( IFillLockBytes * This, const void *pv, ULONG cb, ULONG *pcbWritten);
HRESULT(__stdcall *FillAt )( IFillLockBytes * This, ULARGE_INTEGER ulOffset, const void *pv, ULONG cb, ULONG *pcbWritten);
HRESULT(__stdcall *SetFillSize )( IFillLockBytes * This, ULARGE_INTEGER ulSize);
HRESULT(__stdcall *Terminate )( IFillLockBytes * This, BOOL bCanceled);
} IFillLockBytesVtbl;
struct IFillLockBytes {
struct IFillLockBytesVtbl *lpVtbl;
};
HRESULT __stdcall IFillLockBytes_RemoteFillAppend_Proxy( IFillLockBytes * This, const byte *pv, ULONG cb, ULONG *pcbWritten);
void __stdcall IFillLockBytes_RemoteFillAppend_Stub( IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
HRESULT __stdcall IFillLockBytes_RemoteFillAt_Proxy( IFillLockBytes * This, ULARGE_INTEGER ulOffset, const byte *pv, ULONG cb, ULONG *pcbWritten);
void __stdcall IFillLockBytes_RemoteFillAt_Stub( IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
extern const IID IID_IProgressNotify;
typedef struct IProgressNotifyVtbl {
HRESULT(__stdcall *QueryInterface )( IProgressNotify * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( IProgressNotify * This);
ULONG(__stdcall *Release )( IProgressNotify * This);
HRESULT(__stdcall *OnProgress )( IProgressNotify * This, DWORD dwProgressCurrent, DWORD dwProgressMaximum, BOOL fAccurate, BOOL fOwner);
} IProgressNotifyVtbl;
struct IProgressNotify {
struct IProgressNotifyVtbl *lpVtbl;
};
typedef struct tagStorageLayout {
<field name="LayoutType"><DWORD /></field>
<field name="pwcsElementName"><ptr><OLECHAR /></ptr></field>
<field name="cOffset"><LARGE_INTEGER /></field>
<field name="cBytes"><LARGE_INTEGER /></field>
} StorageLayout;
extern const IID IID_ILayoutStorage;
typedef struct ILayoutStorageVtbl {
HRESULT(__stdcall *QueryInterface )( ILayoutStorage * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( ILayoutStorage * This);
ULONG(__stdcall *Release )( ILayoutStorage * This);
HRESULT(__stdcall *LayoutScript )( ILayoutStorage * This, StorageLayout *pStorageLayout, DWORD nEntries, DWORD glfInterleavedFlag);
HRESULT(__stdcall *BeginMonitor )( ILayoutStorage * This);
HRESULT(__stdcall *EndMonitor )( ILayoutStorage * This);
HRESULT(__stdcall *ReLayoutDocfile )( ILayoutStorage * This, OLECHAR *pwcsNewDfName);
HRESULT(__stdcall *ReLayoutDocfileOnILockBytes )( ILayoutStorage * This, ILockBytes *pILockBytes);
} ILayoutStorageVtbl;
struct ILayoutStorage {
struct ILayoutStorageVtbl *lpVtbl;
};
extern const IID IID_IBlockingLock;
typedef struct IBlockingLockVtbl {
HRESULT(__stdcall *QueryInterface )( IBlockingLock * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( IBlockingLock * This);
ULONG(__stdcall *Release )( IBlockingLock * This);
HRESULT(__stdcall *Lock )( IBlockingLock * This, DWORD dwTimeout);
HRESULT(__stdcall *Unlock )( IBlockingLock * This);
} IBlockingLockVtbl;
struct IBlockingLock {
struct IBlockingLockVtbl *lpVtbl;
};
extern const IID IID_ITimeAndNoticeControl;
typedef struct ITimeAndNoticeControlVtbl {
HRESULT(__stdcall *QueryInterface )( ITimeAndNoticeControl * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( ITimeAndNoticeControl * This);
ULONG(__stdcall *Release )( ITimeAndNoticeControl * This);
HRESULT(__stdcall *SuppressChanges )( ITimeAndNoticeControl * This, DWORD res1, DWORD res2);
} ITimeAndNoticeControlVtbl;
struct ITimeAndNoticeControl {
struct ITimeAndNoticeControlVtbl *lpVtbl;
};
extern const IID IID_IOplockStorage;
typedef struct IOplockStorageVtbl {
HRESULT(__stdcall *QueryInterface )( IOplockStorage * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( IOplockStorage * This);
ULONG(__stdcall *Release )( IOplockStorage * This);
HRESULT(__stdcall *CreateStorageEx )( IOplockStorage * This, LPCWSTR pwcsName, DWORD grfMode, DWORD stgfmt, DWORD grfAttrs, const IID * const riid, void **ppstgOpen);
HRESULT(__stdcall *OpenStorageEx )( IOplockStorage * This, LPCWSTR pwcsName, DWORD grfMode, DWORD stgfmt, DWORD grfAttrs, const IID * const riid, void **ppstgOpen);
} IOplockStorageVtbl;
struct IOplockStorage {
struct IOplockStorageVtbl *lpVtbl;
};
<typedef name="LPSURROGATE"><ptr><ISurrogate /></ptr></typedef>
extern const IID IID_ISurrogate;
typedef struct ISurrogateVtbl {
HRESULT(__stdcall *QueryInterface )( ISurrogate * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( ISurrogate * This);
ULONG(__stdcall *Release )( ISurrogate * This);
HRESULT(__stdcall *LoadDllServer )( ISurrogate * This, const IID * const Clsid);
HRESULT(__stdcall *FreeSurrogate )( ISurrogate * This);
} ISurrogateVtbl;
struct ISurrogate {
struct ISurrogateVtbl *lpVtbl;
};
<typedef name="LPGLOBALINTERFACETABLE"><ptr><IGlobalInterfaceTable /></ptr></typedef>
extern const IID IID_IGlobalInterfaceTable;
typedef struct IGlobalInterfaceTableVtbl {
HRESULT(__stdcall *QueryInterface )( IGlobalInterfaceTable * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( IGlobalInterfaceTable * This);
ULONG(__stdcall *Release )( IGlobalInterfaceTable * This);
HRESULT(__stdcall *RegisterInterfaceInGlobal )( IGlobalInterfaceTable * This, IUnknown *pUnk, const IID * const riid, DWORD *pdwCookie);
HRESULT(__stdcall *RevokeInterfaceFromGlobal )( IGlobalInterfaceTable * This, DWORD dwCookie);
HRESULT(__stdcall *GetInterfaceFromGlobal )( IGlobalInterfaceTable * This, DWORD dwCookie, const IID * const riid, void **ppv);
} IGlobalInterfaceTableVtbl;
struct IGlobalInterfaceTable {
struct IGlobalInterfaceTableVtbl *lpVtbl;
};
extern const IID IID_IDirectWriterLock;
typedef struct IDirectWriterLockVtbl {
HRESULT(__stdcall *QueryInterface )( IDirectWriterLock * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( IDirectWriterLock * This);
ULONG(__stdcall *Release )( IDirectWriterLock * This);
HRESULT(__stdcall *WaitForWriteAccess )( IDirectWriterLock * This, DWORD dwTimeout);
HRESULT(__stdcall *ReleaseWriteAccess )( IDirectWriterLock * This);
HRESULT(__stdcall *HaveWriteAccess )( IDirectWriterLock * This);
} IDirectWriterLockVtbl;
struct IDirectWriterLock {
struct IDirectWriterLockVtbl *lpVtbl;
};
extern const IID IID_ISynchronize;
typedef struct ISynchronizeVtbl {
HRESULT(__stdcall *QueryInterface )( ISynchronize * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( ISynchronize * This);
ULONG(__stdcall *Release )( ISynchronize * This);
HRESULT(__stdcall *Wait )( ISynchronize * This, DWORD dwFlags, DWORD dwMilliseconds);
HRESULT(__stdcall *Signal )( ISynchronize * This);
HRESULT(__stdcall *Reset )( ISynchronize * This);
} ISynchronizeVtbl;
struct ISynchronize {
struct ISynchronizeVtbl *lpVtbl;
};
extern const IID IID_ISynchronizeHandle;
typedef struct ISynchronizeHandleVtbl {
HRESULT(__stdcall *QueryInterface )( ISynchronizeHandle * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( ISynchronizeHandle * This);
ULONG(__stdcall *Release )( ISynchronizeHandle * This);
HRESULT(__stdcall *GetHandle )( ISynchronizeHandle * This, HANDLE *ph);
} ISynchronizeHandleVtbl;
struct ISynchronizeHandle {
struct ISynchronizeHandleVtbl *lpVtbl;
};
extern const IID IID_ISynchronizeEvent;
typedef struct ISynchronizeEventVtbl {
HRESULT(__stdcall *QueryInterface )( ISynchronizeEvent * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( ISynchronizeEvent * This);
ULONG(__stdcall *Release )( ISynchronizeEvent * This);
HRESULT(__stdcall *GetHandle )( ISynchronizeEvent * This, HANDLE *ph);
HRESULT(__stdcall *SetEventHandle )( ISynchronizeEvent * This, HANDLE *ph);
} ISynchronizeEventVtbl;
struct ISynchronizeEvent {
struct ISynchronizeEventVtbl *lpVtbl;
};
extern const IID IID_ISynchronizeContainer;
typedef struct ISynchronizeContainerVtbl {
HRESULT(__stdcall *QueryInterface )( ISynchronizeContainer * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( ISynchronizeContainer * This);
ULONG(__stdcall *Release )( ISynchronizeContainer * This);
HRESULT(__stdcall *AddSynchronize )( ISynchronizeContainer * This, ISynchronize *pSync);
HRESULT(__stdcall *WaitMultiple )( ISynchronizeContainer * This, DWORD dwFlags, DWORD dwTimeOut, ISynchronize **ppSync);
} ISynchronizeContainerVtbl;
struct ISynchronizeContainer {
struct ISynchronizeContainerVtbl *lpVtbl;
};
extern const IID IID_ISynchronizeMutex;
typedef struct ISynchronizeMutexVtbl {
HRESULT(__stdcall *QueryInterface )( ISynchronizeMutex * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( ISynchronizeMutex * This);
ULONG(__stdcall *Release )( ISynchronizeMutex * This);
HRESULT(__stdcall *Wait )( ISynchronizeMutex * This, DWORD dwFlags, DWORD dwMilliseconds);
HRESULT(__stdcall *Signal )( ISynchronizeMutex * This);
HRESULT(__stdcall *Reset )( ISynchronizeMutex * This);
HRESULT(__stdcall *ReleaseMutex )( ISynchronizeMutex * This);
} ISynchronizeMutexVtbl;
struct ISynchronizeMutex {
struct ISynchronizeMutexVtbl *lpVtbl;
};
<typedef name="LPCANCELMETHODCALLS"><ptr><ICancelMethodCalls /></ptr></typedef>
extern const IID IID_ICancelMethodCalls;
typedef struct ICancelMethodCallsVtbl {
HRESULT(__stdcall *QueryInterface )( ICancelMethodCalls * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( ICancelMethodCalls * This);
ULONG(__stdcall *Release )( ICancelMethodCalls * This);
HRESULT(__stdcall *Cancel )( ICancelMethodCalls * This, ULONG ulSeconds);
HRESULT(__stdcall *TestCancel )( ICancelMethodCalls * This);
} ICancelMethodCallsVtbl;
struct ICancelMethodCalls {
struct ICancelMethodCallsVtbl *lpVtbl;
};
typedef enum tagDCOM_CALL_STATE { DCOM_NONE = 0, DCOM_CALL_COMPLETE = 0x1, DCOM_CALL_CANCELED = 0x2 } DCOM_CALL_STATE;
extern const IID IID_IAsyncManager;
typedef struct IAsyncManagerVtbl {
HRESULT(__stdcall *QueryInterface )( IAsyncManager * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( IAsyncManager * This);
ULONG(__stdcall *Release )( IAsyncManager * This);
HRESULT(__stdcall *CompleteCall )( IAsyncManager * This, HRESULT Result);
HRESULT(__stdcall *GetCallContext )( IAsyncManager * This, const IID * const riid, void **pInterface);
HRESULT(__stdcall *GetState )( IAsyncManager * This, ULONG *pulStateFlags);
} IAsyncManagerVtbl;
struct IAsyncManager {
struct IAsyncManagerVtbl *lpVtbl;
};
extern const IID IID_ICallFactory;
typedef struct ICallFactoryVtbl {
HRESULT(__stdcall *QueryInterface )( ICallFactory * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( ICallFactory * This);
ULONG(__stdcall *Release )( ICallFactory * This);
HRESULT(__stdcall *CreateCall )( ICallFactory * This, const IID * const riid, IUnknown *pCtrlUnk, const IID * const riid2, IUnknown **ppv);
} ICallFactoryVtbl;
struct ICallFactory {
struct ICallFactoryVtbl *lpVtbl;
};
extern const IID IID_IRpcHelper;
typedef struct IRpcHelperVtbl {
HRESULT(__stdcall *QueryInterface )( IRpcHelper * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( IRpcHelper * This);
ULONG(__stdcall *Release )( IRpcHelper * This);
HRESULT(__stdcall *GetDCOMProtocolVersion )( IRpcHelper * This, DWORD *pComVersion);
HRESULT(__stdcall *GetIIDFromOBJREF )( IRpcHelper * This, void *pObjRef, IID **piid);
} IRpcHelperVtbl;
struct IRpcHelper {
struct IRpcHelperVtbl *lpVtbl;
};
extern const IID IID_IReleaseMarshalBuffers;
typedef struct IReleaseMarshalBuffersVtbl {
HRESULT(__stdcall *QueryInterface )( IReleaseMarshalBuffers * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( IReleaseMarshalBuffers * This);
ULONG(__stdcall *Release )( IReleaseMarshalBuffers * This);
HRESULT(__stdcall *ReleaseMarshalBuffer )( IReleaseMarshalBuffers * This, RPCOLEMESSAGE *pMsg, DWORD dwFlags, IUnknown *pChnl);
} IReleaseMarshalBuffersVtbl;
struct IReleaseMarshalBuffers {
struct IReleaseMarshalBuffersVtbl *lpVtbl;
};
extern const IID IID_IWaitMultiple;
typedef struct IWaitMultipleVtbl {
HRESULT(__stdcall *QueryInterface )( IWaitMultiple * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( IWaitMultiple * This);
ULONG(__stdcall *Release )( IWaitMultiple * This);
HRESULT(__stdcall *WaitMultiple )( IWaitMultiple * This, DWORD timeout, ISynchronize **pSync);
HRESULT(__stdcall *AddSynchronize )( IWaitMultiple * This, ISynchronize *pSync);
} IWaitMultipleVtbl;
struct IWaitMultiple {
struct IWaitMultipleVtbl *lpVtbl;
};
extern const IID IID_IUrlMon;
typedef struct IUrlMonVtbl {
HRESULT(__stdcall *QueryInterface )( IUrlMon * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( IUrlMon * This);
ULONG(__stdcall *Release )( IUrlMon * This);
HRESULT(__stdcall *AsyncGetClassBits )( IUrlMon * This, const IID * const rclsid, LPCWSTR pszTYPE, LPCWSTR pszExt, DWORD dwFileVersionMS, DWORD dwFileVersionLS, LPCWSTR pszCodeBase, IBindCtx *pbc, DWORD dwClassContext, const IID * const riid, DWORD flags);
} IUrlMonVtbl;
struct IUrlMon {
struct IUrlMonVtbl *lpVtbl;
};
extern const IID IID_IForegroundTransfer;
typedef struct IForegroundTransferVtbl {
HRESULT(__stdcall *QueryInterface )( IForegroundTransfer * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( IForegroundTransfer * This);
ULONG(__stdcall *Release )( IForegroundTransfer * This);
HRESULT(__stdcall *AllowForegroundTransfer )( IForegroundTransfer * This, void *lpvReserved);
} IForegroundTransferVtbl;
struct IForegroundTransfer {
struct IForegroundTransferVtbl *lpVtbl;
};
<typedef name="LPADDRTRACKINGCONTROL"><ptr><IAddrTrackingControl /></ptr></typedef>
extern const IID IID_IAddrTrackingControl;
typedef struct IAddrTrackingControlVtbl {
HRESULT(__stdcall *QueryInterface )( IAddrTrackingControl * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( IAddrTrackingControl * This);
ULONG(__stdcall *Release )( IAddrTrackingControl * This);
HRESULT(__stdcall *EnableCOMDynamicAddrTracking )( IAddrTrackingControl * This);
HRESULT(__stdcall *DisableCOMDynamicAddrTracking )( IAddrTrackingControl * This);
} IAddrTrackingControlVtbl;
struct IAddrTrackingControl {
struct IAddrTrackingControlVtbl *lpVtbl;
};
<typedef name="LPADDREXCLUSIONCONTROL"><ptr><IAddrExclusionControl /></ptr></typedef>
extern const IID IID_IAddrExclusionControl;
typedef struct IAddrExclusionControlVtbl {
HRESULT(__stdcall *QueryInterface )( IAddrExclusionControl * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( IAddrExclusionControl * This);
ULONG(__stdcall *Release )( IAddrExclusionControl * This);
HRESULT(__stdcall *GetCurrentAddrExclusionList )( IAddrExclusionControl * This, const IID * const riid, void **ppEnumerator);
HRESULT(__stdcall *UpdateAddrExclusionList )( IAddrExclusionControl * This, IUnknown *pEnumerator);
} IAddrExclusionControlVtbl;
struct IAddrExclusionControl {
struct IAddrExclusionControlVtbl *lpVtbl;
};
extern const IID IID_IPipeByte;
typedef struct IPipeByteVtbl {
HRESULT(__stdcall *QueryInterface )( IPipeByte * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( IPipeByte * This);
ULONG(__stdcall *Release )( IPipeByte * This);
HRESULT(__stdcall *Pull )( IPipeByte * This, BYTE *buf, ULONG cRequest, ULONG *pcReturned);
HRESULT(__stdcall *Push )( IPipeByte * This, BYTE *buf, ULONG cSent);
} IPipeByteVtbl;
struct IPipeByte {
struct IPipeByteVtbl *lpVtbl;
};
extern const IID IID_AsyncIPipeByte;
typedef struct AsyncIPipeByteVtbl {
HRESULT(__stdcall *QueryInterface )( AsyncIPipeByte * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( AsyncIPipeByte * This);
ULONG(__stdcall *Release )( AsyncIPipeByte * This);
HRESULT(__stdcall *Begin_Pull )( AsyncIPipeByte * This, ULONG cRequest);
HRESULT(__stdcall *Finish_Pull )( AsyncIPipeByte * This, BYTE *buf, ULONG *pcReturned);
HRESULT(__stdcall *Begin_Push )( AsyncIPipeByte * This, BYTE *buf, ULONG cSent);
HRESULT(__stdcall *Finish_Push )( AsyncIPipeByte * This);
} AsyncIPipeByteVtbl;
struct AsyncIPipeByte {
struct AsyncIPipeByteVtbl *lpVtbl;
};
extern const IID IID_IPipeLong;
typedef struct IPipeLongVtbl {
HRESULT(__stdcall *QueryInterface )( IPipeLong * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( IPipeLong * This);
ULONG(__stdcall *Release )( IPipeLong * This);
HRESULT(__stdcall *Pull )( IPipeLong * This, LONG *buf, ULONG cRequest, ULONG *pcReturned);
HRESULT(__stdcall *Push )( IPipeLong * This, LONG *buf, ULONG cSent);
} IPipeLongVtbl;
struct IPipeLong {
struct IPipeLongVtbl *lpVtbl;
};
extern const IID IID_AsyncIPipeLong;
typedef struct AsyncIPipeLongVtbl {
HRESULT(__stdcall *QueryInterface )( AsyncIPipeLong * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( AsyncIPipeLong * This);
ULONG(__stdcall *Release )( AsyncIPipeLong * This);
HRESULT(__stdcall *Begin_Pull )( AsyncIPipeLong * This, ULONG cRequest);
HRESULT(__stdcall *Finish_Pull )( AsyncIPipeLong * This, LONG *buf, ULONG *pcReturned);
HRESULT(__stdcall *Begin_Push )( AsyncIPipeLong * This, LONG *buf, ULONG cSent);
HRESULT(__stdcall *Finish_Push )( AsyncIPipeLong * This);
} AsyncIPipeLongVtbl;
struct AsyncIPipeLong {
struct AsyncIPipeLongVtbl *lpVtbl;
};
extern const IID IID_IPipeDouble;
typedef struct IPipeDoubleVtbl {
HRESULT(__stdcall *QueryInterface )( IPipeDouble * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( IPipeDouble * This);
ULONG(__stdcall *Release )( IPipeDouble * This);
HRESULT(__stdcall *Pull )( IPipeDouble * This, DOUBLE *buf, ULONG cRequest, ULONG *pcReturned);
HRESULT(__stdcall *Push )( IPipeDouble * This, DOUBLE *buf, ULONG cSent);
} IPipeDoubleVtbl;
struct IPipeDouble {
struct IPipeDoubleVtbl *lpVtbl;
};
extern const IID IID_AsyncIPipeDouble;
typedef struct AsyncIPipeDoubleVtbl {
HRESULT(__stdcall *QueryInterface )( AsyncIPipeDouble * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( AsyncIPipeDouble * This);
ULONG(__stdcall *Release )( AsyncIPipeDouble * This);
HRESULT(__stdcall *Begin_Pull )( AsyncIPipeDouble * This, ULONG cRequest);
HRESULT(__stdcall *Finish_Pull )( AsyncIPipeDouble * This, DOUBLE *buf, ULONG *pcReturned);
HRESULT(__stdcall *Begin_Push )( AsyncIPipeDouble * This, DOUBLE *buf, ULONG cSent);
HRESULT(__stdcall *Finish_Push )( AsyncIPipeDouble * This);
} AsyncIPipeDoubleVtbl;
struct AsyncIPipeDouble {
struct AsyncIPipeDoubleVtbl *lpVtbl;
};
extern const IID IID_IThumbnailExtractor;
typedef struct IThumbnailExtractorVtbl {
HRESULT(__stdcall *QueryInterface )( IThumbnailExtractor * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( IThumbnailExtractor * This);
ULONG(__stdcall *Release )( IThumbnailExtractor * This);
HRESULT(__stdcall *ExtractThumbnail )( IThumbnailExtractor * This, IStorage *pStg, ULONG ulLength, ULONG ulHeight, ULONG *pulOutputLength, ULONG *pulOutputHeight, HBITMAP *phOutputBitmap);
HRESULT(__stdcall *OnFileUpdated )( IThumbnailExtractor * This, IStorage *pStg);
} IThumbnailExtractorVtbl;
struct IThumbnailExtractor {
struct IThumbnailExtractorVtbl *lpVtbl;
};
extern const IID IID_IDummyHICONIncluder;
typedef struct IDummyHICONIncluderVtbl {
HRESULT(__stdcall *QueryInterface )( IDummyHICONIncluder * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( IDummyHICONIncluder * This);
ULONG(__stdcall *Release )( IDummyHICONIncluder * This);
HRESULT(__stdcall *Dummy )( IDummyHICONIncluder * This, HICON h1, HDC h2);
} IDummyHICONIncluderVtbl;
struct IDummyHICONIncluder {
struct IDummyHICONIncluderVtbl *lpVtbl;
};
typedef enum tagApplicationType { ServerApplication = 0, LibraryApplication =(ServerApplication + 1 ) } ApplicationType;
typedef enum tagShutdownType { IdleShutdown = 0, ForcedShutdown =(IdleShutdown + 1 ) } ShutdownType;
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0079_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0079_v0_0_s_ifspec;
extern const IID IID_IProcessLock;
typedef struct IProcessLockVtbl {
HRESULT(__stdcall *QueryInterface )( IProcessLock * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( IProcessLock * This);
ULONG(__stdcall *Release )( IProcessLock * This);
ULONG(__stdcall *AddRefOnProcess )( IProcessLock * This);
ULONG(__stdcall *ReleaseRefOnProcess )( IProcessLock * This);
} IProcessLockVtbl;
struct IProcessLock {
struct IProcessLockVtbl *lpVtbl;
};
extern const IID IID_ISurrogateService;
typedef struct ISurrogateServiceVtbl {
HRESULT(__stdcall *QueryInterface )( ISurrogateService * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( ISurrogateService * This);
ULONG(__stdcall *Release )( ISurrogateService * This);
HRESULT(__stdcall *Init )( ISurrogateService * This, const GUID * const rguidProcessID, IProcessLock *pProcessLock, BOOL *pfApplicationAware);
HRESULT(__stdcall *ApplicationLaunch )( ISurrogateService * This, const GUID * const rguidApplID, ApplicationType appType);
HRESULT(__stdcall *ApplicationFree )( ISurrogateService * This, const GUID * const rguidApplID);
HRESULT(__stdcall *CatalogRefresh )( ISurrogateService * This, ULONG ulReserved);
HRESULT(__stdcall *ProcessShutdown )( ISurrogateService * This, ShutdownType shutdownType);
} ISurrogateServiceVtbl;
struct ISurrogateService {
struct ISurrogateServiceVtbl *lpVtbl;
};
typedef enum _APTTYPEQUALIFIER { APTTYPEQUALIFIER_NONE = 0, APTTYPEQUALIFIER_IMPLICIT_MTA = 1, APTTYPEQUALIFIER_NA_ON_MTA = 2, APTTYPEQUALIFIER_NA_ON_STA = 3, APTTYPEQUALIFIER_NA_ON_IMPLICIT_MTA = 4, APTTYPEQUALIFIER_NA_ON_MAINSTA = 5 } APTTYPEQUALIFIER;
typedef enum _APTTYPE { APTTYPE_CURRENT = -1, APTTYPE_STA = 0, APTTYPE_MTA = 1, APTTYPE_NA = 2, APTTYPE_MAINSTA = 3 } APTTYPE;
typedef enum _THDTYPE { THDTYPE_BLOCKMESSAGES = 0, THDTYPE_PROCESSMESSAGES = 1 } THDTYPE;
<typedef name="APARTMENTID"><DWORD /></typedef>
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0081_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0081_v0_0_s_ifspec;
extern const IID IID_IComThreadingInfo;
typedef struct IComThreadingInfoVtbl {
HRESULT(__stdcall *QueryInterface )( IComThreadingInfo * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( IComThreadingInfo * This);
ULONG(__stdcall *Release )( IComThreadingInfo * This);
HRESULT(__stdcall *GetCurrentApartmentType )( IComThreadingInfo * This, APTTYPE *pAptType);
HRESULT(__stdcall *GetCurrentThreadType )( IComThreadingInfo * This, THDTYPE *pThreadType);
HRESULT(__stdcall *GetCurrentLogicalThreadId )( IComThreadingInfo * This, GUID *pguidLogicalThreadId);
HRESULT(__stdcall *SetCurrentLogicalThreadId )( IComThreadingInfo * This, const GUID * const rguid);
} IComThreadingInfoVtbl;
struct IComThreadingInfo {
struct IComThreadingInfoVtbl *lpVtbl;
};
extern const IID IID_IProcessInitControl;
typedef struct IProcessInitControlVtbl {
HRESULT(__stdcall *QueryInterface )( IProcessInitControl * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( IProcessInitControl * This);
ULONG(__stdcall *Release )( IProcessInitControl * This);
HRESULT(__stdcall *ResetInitializerTimeout )( IProcessInitControl * This, DWORD dwSecondsRemaining);
} IProcessInitControlVtbl;
struct IProcessInitControl {
struct IProcessInitControlVtbl *lpVtbl;
};
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0083_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0083_v0_0_s_ifspec;
<typedef name="LPINITIALIZESPY"><ptr><IInitializeSpy /></ptr></typedef>
extern const IID IID_IInitializeSpy;
typedef struct IInitializeSpyVtbl {
HRESULT(__stdcall *QueryInterface )( IInitializeSpy * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( IInitializeSpy * This);
ULONG(__stdcall *Release )( IInitializeSpy * This);
HRESULT(__stdcall *PreInitialize )( IInitializeSpy * This, DWORD dwCoInit, DWORD dwCurThreadAptRefs);
HRESULT(__stdcall *PostInitialize )( IInitializeSpy * This, HRESULT hrCoInit, DWORD dwCoInit, DWORD dwNewThreadAptRefs);
HRESULT(__stdcall *PreUninitialize )( IInitializeSpy * This, DWORD dwCurThreadAptRefs);
HRESULT(__stdcall *PostUninitialize )( IInitializeSpy * This, DWORD dwNewThreadAptRefs);
} IInitializeSpyVtbl;
struct IInitializeSpy {
struct IInitializeSpyVtbl *lpVtbl;
};
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0084_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0084_v0_0_s_ifspec;
uint32 __stdcall ASYNC_STGMEDIUM_UserSize( uint32 *, uint32, ASYNC_STGMEDIUM * );
byte * __stdcall ASYNC_STGMEDIUM_UserMarshal( uint32 *, byte *, ASYNC_STGMEDIUM * );
byte * __stdcall ASYNC_STGMEDIUM_UserUnmarshal( uint32 *, byte *, ASYNC_STGMEDIUM * );
void __stdcall ASYNC_STGMEDIUM_UserFree( uint32 *, ASYNC_STGMEDIUM * );
uint32 __stdcall CLIPFORMAT_UserSize( uint32 *, uint32, CLIPFORMAT * );
byte * __stdcall CLIPFORMAT_UserMarshal( uint32 *, byte *, CLIPFORMAT * );
byte * __stdcall CLIPFORMAT_UserUnmarshal( uint32 *, byte *, CLIPFORMAT * );
void __stdcall CLIPFORMAT_UserFree( uint32 *, CLIPFORMAT * );
uint32 __stdcall FLAG_STGMEDIUM_UserSize( uint32 *, uint32, FLAG_STGMEDIUM * );
byte * __stdcall FLAG_STGMEDIUM_UserMarshal( uint32 *, byte *, FLAG_STGMEDIUM * );
byte * __stdcall FLAG_STGMEDIUM_UserUnmarshal( uint32 *, byte *, FLAG_STGMEDIUM * );
void __stdcall FLAG_STGMEDIUM_UserFree( uint32 *, FLAG_STGMEDIUM * );
uint32 __stdcall HBITMAP_UserSize( uint32 *, uint32, HBITMAP * );
byte * __stdcall HBITMAP_UserMarshal( uint32 *, byte *, HBITMAP * );
byte * __stdcall HBITMAP_UserUnmarshal( uint32 *, byte *, HBITMAP * );
void __stdcall HBITMAP_UserFree( uint32 *, HBITMAP * );
uint32 __stdcall HDC_UserSize( uint32 *, uint32, HDC * );
byte * __stdcall HDC_UserMarshal( uint32 *, byte *, HDC * );
byte * __stdcall HDC_UserUnmarshal( uint32 *, byte *, HDC * );
void __stdcall HDC_UserFree( uint32 *, HDC * );
uint32 __stdcall HICON_UserSize( uint32 *, uint32, HICON * );
byte * __stdcall HICON_UserMarshal( uint32 *, byte *, HICON * );
byte * __stdcall HICON_UserUnmarshal( uint32 *, byte *, HICON * );
void __stdcall HICON_UserFree( uint32 *, HICON * );
uint32 __stdcall SNB_UserSize( uint32 *, uint32, SNB * );
byte * __stdcall SNB_UserMarshal( uint32 *, byte *, SNB * );
byte * __stdcall SNB_UserUnmarshal( uint32 *, byte *, SNB * );
void __stdcall SNB_UserFree( uint32 *, SNB * );
uint32 __stdcall STGMEDIUM_UserSize( uint32 *, uint32, STGMEDIUM * );
byte * __stdcall STGMEDIUM_UserMarshal( uint32 *, byte *, STGMEDIUM * );
byte * __stdcall STGMEDIUM_UserUnmarshal( uint32 *, byte *, STGMEDIUM * );
void __stdcall STGMEDIUM_UserFree( uint32 *, STGMEDIUM * );
uint32 __stdcall ASYNC_STGMEDIUM_UserSize64( uint32 *, uint32, ASYNC_STGMEDIUM * );
byte * __stdcall ASYNC_STGMEDIUM_UserMarshal64( uint32 *, byte *, ASYNC_STGMEDIUM * );
byte * __stdcall ASYNC_STGMEDIUM_UserUnmarshal64( uint32 *, byte *, ASYNC_STGMEDIUM * );
void __stdcall ASYNC_STGMEDIUM_UserFree64( uint32 *, ASYNC_STGMEDIUM * );
uint32 __stdcall CLIPFORMAT_UserSize64( uint32 *, uint32, CLIPFORMAT * );
byte * __stdcall CLIPFORMAT_UserMarshal64( uint32 *, byte *, CLIPFORMAT * );
byte * __stdcall CLIPFORMAT_UserUnmarshal64( uint32 *, byte *, CLIPFORMAT * );
void __stdcall CLIPFORMAT_UserFree64( uint32 *, CLIPFORMAT * );
uint32 __stdcall FLAG_STGMEDIUM_UserSize64( uint32 *, uint32, FLAG_STGMEDIUM * );
byte * __stdcall FLAG_STGMEDIUM_UserMarshal64( uint32 *, byte *, FLAG_STGMEDIUM * );
byte * __stdcall FLAG_STGMEDIUM_UserUnmarshal64( uint32 *, byte *, FLAG_STGMEDIUM * );
void __stdcall FLAG_STGMEDIUM_UserFree64( uint32 *, FLAG_STGMEDIUM * );
uint32 __stdcall HBITMAP_UserSize64( uint32 *, uint32, HBITMAP * );
byte * __stdcall HBITMAP_UserMarshal64( uint32 *, byte *, HBITMAP * );
byte * __stdcall HBITMAP_UserUnmarshal64( uint32 *, byte *, HBITMAP * );
void __stdcall HBITMAP_UserFree64( uint32 *, HBITMAP * );
uint32 __stdcall HDC_UserSize64( uint32 *, uint32, HDC * );
byte * __stdcall HDC_UserMarshal64( uint32 *, byte *, HDC * );
byte * __stdcall HDC_UserUnmarshal64( uint32 *, byte *, HDC * );
void __stdcall HDC_UserFree64( uint32 *, HDC * );
uint32 __stdcall HICON_UserSize64( uint32 *, uint32, HICON * );
byte * __stdcall HICON_UserMarshal64( uint32 *, byte *, HICON * );
byte * __stdcall HICON_UserUnmarshal64( uint32 *, byte *, HICON * );
void __stdcall HICON_UserFree64( uint32 *, HICON * );
uint32 __stdcall SNB_UserSize64( uint32 *, uint32, SNB * );
byte * __stdcall SNB_UserMarshal64( uint32 *, byte *, SNB * );
byte * __stdcall SNB_UserUnmarshal64( uint32 *, byte *, SNB * );
void __stdcall SNB_UserFree64( uint32 *, SNB * );
uint32 __stdcall STGMEDIUM_UserSize64( uint32 *, uint32, STGMEDIUM * );
byte * __stdcall STGMEDIUM_UserMarshal64( uint32 *, byte *, STGMEDIUM * );
byte * __stdcall STGMEDIUM_UserUnmarshal64( uint32 *, byte *, STGMEDIUM * );
void __stdcall STGMEDIUM_UserFree64( uint32 *, STGMEDIUM * );
HRESULT __stdcall IEnumUnknown_Next_Proxy( IEnumUnknown * This, ULONG celt, IUnknown **rgelt, ULONG *pceltFetched);
HRESULT __stdcall IEnumUnknown_Next_Stub( IEnumUnknown * This, ULONG celt, IUnknown **rgelt, ULONG *pceltFetched);
HRESULT __stdcall IBindCtx_SetBindOptions_Proxy( IBindCtx * This, BIND_OPTS *pbindopts);
HRESULT __stdcall IBindCtx_SetBindOptions_Stub( IBindCtx * This, BIND_OPTS2 *pbindopts);
HRESULT __stdcall IBindCtx_GetBindOptions_Proxy( IBindCtx * This, BIND_OPTS *pbindopts);
HRESULT __stdcall IBindCtx_GetBindOptions_Stub( IBindCtx * This, BIND_OPTS2 *pbindopts);
HRESULT __stdcall IEnumMoniker_Next_Proxy( IEnumMoniker * This, ULONG celt, IMoniker **rgelt, ULONG *pceltFetched);
HRESULT __stdcall IEnumMoniker_Next_Stub( IEnumMoniker * This, ULONG celt, IMoniker **rgelt, ULONG *pceltFetched);
BOOL __stdcall IRunnableObject_IsRunning_Proxy( IRunnableObject * This);
HRESULT __stdcall IRunnableObject_IsRunning_Stub( IRunnableObject * This);
HRESULT __stdcall IMoniker_BindToObject_Proxy( IMoniker * This, IBindCtx *pbc, IMoniker *pmkToLeft, const IID * const riidResult, void **ppvResult);
HRESULT __stdcall IMoniker_BindToObject_Stub( IMoniker * This, IBindCtx *pbc, IMoniker *pmkToLeft, const IID * const riidResult, IUnknown **ppvResult);
HRESULT __stdcall IMoniker_BindToStorage_Proxy( IMoniker * This, IBindCtx *pbc, IMoniker *pmkToLeft, const IID * const riid, void **ppvObj);
HRESULT __stdcall IMoniker_BindToStorage_Stub( IMoniker * This, IBindCtx *pbc, IMoniker *pmkToLeft, const IID * const riid, IUnknown **ppvObj);
HRESULT __stdcall IEnumString_Next_Proxy( IEnumString * This, ULONG celt, LPOLESTR *rgelt, ULONG *pceltFetched);
HRESULT __stdcall IEnumString_Next_Stub( IEnumString * This, ULONG celt, LPOLESTR *rgelt, ULONG *pceltFetched);
HRESULT __stdcall ISequentialStream_Read_Proxy( ISequentialStream * This, void *pv, ULONG cb, ULONG *pcbRead);
HRESULT __stdcall ISequentialStream_Read_Stub( ISequentialStream * This, byte *pv, ULONG cb, ULONG *pcbRead);
HRESULT __stdcall ISequentialStream_Write_Proxy( ISequentialStream * This, const void *pv, ULONG cb, ULONG *pcbWritten);
HRESULT __stdcall ISequentialStream_Write_Stub( ISequentialStream * This, const byte *pv, ULONG cb, ULONG *pcbWritten);
HRESULT __stdcall IStream_Seek_Proxy( IStream * This, LARGE_INTEGER dlibMove, DWORD dwOrigin, ULARGE_INTEGER *plibNewPosition);
HRESULT __stdcall IStream_Seek_Stub( IStream * This, LARGE_INTEGER dlibMove, DWORD dwOrigin, ULARGE_INTEGER *plibNewPosition);
HRESULT __stdcall IStream_CopyTo_Proxy( IStream * This, IStream *pstm, ULARGE_INTEGER cb, ULARGE_INTEGER *pcbRead, ULARGE_INTEGER *pcbWritten);
HRESULT __stdcall IStream_CopyTo_Stub( IStream * This, IStream *pstm, ULARGE_INTEGER cb, ULARGE_INTEGER *pcbRead, ULARGE_INTEGER *pcbWritten);
HRESULT __stdcall IEnumSTATSTG_Next_Proxy( IEnumSTATSTG * This, ULONG celt, STATSTG *rgelt, ULONG *pceltFetched);
HRESULT __stdcall IEnumSTATSTG_Next_Stub( IEnumSTATSTG * This, ULONG celt, STATSTG *rgelt, ULONG *pceltFetched);
HRESULT __stdcall IStorage_OpenStream_Proxy( IStorage * This, const OLECHAR *pwcsName, void *reserved1, DWORD grfMode, DWORD reserved2, IStream **ppstm);
HRESULT __stdcall IStorage_OpenStream_Stub( IStorage * This, const OLECHAR *pwcsName, uint32 cbReserved1, byte *reserved1, DWORD grfMode, DWORD reserved2, IStream **ppstm);
HRESULT __stdcall IStorage_CopyTo_Proxy( IStorage * This, DWORD ciidExclude, const IID *rgiidExclude, SNB snbExclude, IStorage *pstgDest);
HRESULT __stdcall IStorage_CopyTo_Stub( IStorage * This, DWORD ciidExclude, const IID *rgiidExclude, SNB snbExclude, IStorage *pstgDest);
HRESULT __stdcall IStorage_EnumElements_Proxy( IStorage * This, DWORD reserved1, void *reserved2, DWORD reserved3, IEnumSTATSTG **ppenum);
HRESULT __stdcall IStorage_EnumElements_Stub( IStorage * This, DWORD reserved1, uint32 cbReserved2, byte *reserved2, DWORD reserved3, IEnumSTATSTG **ppenum);
HRESULT __stdcall ILockBytes_ReadAt_Proxy( ILockBytes * This, ULARGE_INTEGER ulOffset, void *pv, ULONG cb, ULONG *pcbRead);
HRESULT __stdcall ILockBytes_ReadAt_Stub( ILockBytes * This, ULARGE_INTEGER ulOffset, byte *pv, ULONG cb, ULONG *pcbRead);
HRESULT __stdcall ILockBytes_WriteAt_Proxy( ILockBytes * This, ULARGE_INTEGER ulOffset, const void *pv, ULONG cb, ULONG *pcbWritten);
HRESULT __stdcall ILockBytes_WriteAt_Stub( ILockBytes * This, ULARGE_INTEGER ulOffset, const byte *pv, ULONG cb, ULONG *pcbWritten);
HRESULT __stdcall IEnumFORMATETC_Next_Proxy( IEnumFORMATETC * This, ULONG celt, FORMATETC *rgelt, ULONG *pceltFetched);
HRESULT __stdcall IEnumFORMATETC_Next_Stub( IEnumFORMATETC * This, ULONG celt, FORMATETC *rgelt, ULONG *pceltFetched);
HRESULT __stdcall IEnumSTATDATA_Next_Proxy( IEnumSTATDATA * This, ULONG celt, STATDATA *rgelt, ULONG *pceltFetched);
HRESULT __stdcall IEnumSTATDATA_Next_Stub( IEnumSTATDATA * This, ULONG celt, STATDATA *rgelt, ULONG *pceltFetched);
void __stdcall IAdviseSink_OnDataChange_Proxy( IAdviseSink * This, FORMATETC *pFormatetc, STGMEDIUM *pStgmed);
HRESULT __stdcall IAdviseSink_OnDataChange_Stub( IAdviseSink * This, FORMATETC *pFormatetc, ASYNC_STGMEDIUM *pStgmed);
void __stdcall IAdviseSink_OnViewChange_Proxy( IAdviseSink * This, DWORD dwAspect, LONG lindex);
HRESULT __stdcall IAdviseSink_OnViewChange_Stub( IAdviseSink * This, DWORD dwAspect, LONG lindex);
void __stdcall IAdviseSink_OnRename_Proxy( IAdviseSink * This, IMoniker *pmk);
HRESULT __stdcall IAdviseSink_OnRename_Stub( IAdviseSink * This, IMoniker *pmk);
void __stdcall IAdviseSink_OnSave_Proxy( IAdviseSink * This);
HRESULT __stdcall IAdviseSink_OnSave_Stub( IAdviseSink * This);
void __stdcall IAdviseSink_OnClose_Proxy( IAdviseSink * This);
HRESULT __stdcall IAdviseSink_OnClose_Stub( IAdviseSink * This);
void __stdcall IAdviseSink2_OnLinkSrcChange_Proxy( IAdviseSink2 * This, IMoniker *pmk);
HRESULT __stdcall IAdviseSink2_OnLinkSrcChange_Stub( IAdviseSink2 * This, IMoniker *pmk);
HRESULT __stdcall IDataObject_GetData_Proxy( IDataObject * This, FORMATETC *pformatetcIn, STGMEDIUM *pmedium);
HRESULT __stdcall IDataObject_GetData_Stub( IDataObject * This, FORMATETC *pformatetcIn, STGMEDIUM *pRemoteMedium);
HRESULT __stdcall IDataObject_GetDataHere_Proxy( IDataObject * This, FORMATETC *pformatetc, STGMEDIUM *pmedium);
HRESULT __stdcall IDataObject_GetDataHere_Stub( IDataObject * This, FORMATETC *pformatetc, STGMEDIUM *pRemoteMedium);
HRESULT __stdcall IDataObject_SetData_Proxy( IDataObject * This, FORMATETC *pformatetc, STGMEDIUM *pmedium, BOOL fRelease);
HRESULT __stdcall IDataObject_SetData_Stub( IDataObject * This, FORMATETC *pformatetc, FLAG_STGMEDIUM *pmedium, BOOL fRelease);
HRESULT __stdcall IFillLockBytes_FillAppend_Proxy( IFillLockBytes * This, const void *pv, ULONG cb, ULONG *pcbWritten);
HRESULT __stdcall IFillLockBytes_FillAppend_Stub( IFillLockBytes * This, const byte *pv, ULONG cb, ULONG *pcbWritten);
HRESULT __stdcall IFillLockBytes_FillAt_Proxy( IFillLockBytes * This, ULARGE_INTEGER ulOffset, const void *pv, ULONG cb, ULONG *pcbWritten);
HRESULT __stdcall IFillLockBytes_FillAt_Stub( IFillLockBytes * This, ULARGE_INTEGER ulOffset, const byte *pv, ULONG cb, ULONG *pcbWritten);
void __stdcall AsyncIAdviseSink_Begin_OnDataChange_Proxy( AsyncIAdviseSink * This, FORMATETC *pFormatetc, STGMEDIUM *pStgmed);
HRESULT __stdcall AsyncIAdviseSink_Begin_OnDataChange_Stub( AsyncIAdviseSink * This, FORMATETC *pFormatetc, ASYNC_STGMEDIUM *pStgmed);
void __stdcall AsyncIAdviseSink_Finish_OnDataChange_Proxy( AsyncIAdviseSink * This);
HRESULT __stdcall AsyncIAdviseSink_Finish_OnDataChange_Stub( AsyncIAdviseSink * This);
void __stdcall AsyncIAdviseSink_Begin_OnViewChange_Proxy( AsyncIAdviseSink * This, DWORD dwAspect, LONG lindex);
HRESULT __stdcall AsyncIAdviseSink_Begin_OnViewChange_Stub( AsyncIAdviseSink * This, DWORD dwAspect, LONG lindex);
void __stdcall AsyncIAdviseSink_Finish_OnViewChange_Proxy( AsyncIAdviseSink * This);
HRESULT __stdcall AsyncIAdviseSink_Finish_OnViewChange_Stub( AsyncIAdviseSink * This);
void __stdcall AsyncIAdviseSink_Begin_OnRename_Proxy( AsyncIAdviseSink * This, IMoniker *pmk);
HRESULT __stdcall AsyncIAdviseSink_Begin_OnRename_Stub( AsyncIAdviseSink * This, IMoniker *pmk);
void __stdcall AsyncIAdviseSink_Finish_OnRename_Proxy( AsyncIAdviseSink * This);
HRESULT __stdcall AsyncIAdviseSink_Finish_OnRename_Stub( AsyncIAdviseSink * This);
void __stdcall AsyncIAdviseSink_Begin_OnSave_Proxy( AsyncIAdviseSink * This);
HRESULT __stdcall AsyncIAdviseSink_Begin_OnSave_Stub( AsyncIAdviseSink * This);
void __stdcall AsyncIAdviseSink_Finish_OnSave_Proxy( AsyncIAdviseSink * This);
HRESULT __stdcall AsyncIAdviseSink_Finish_OnSave_Stub( AsyncIAdviseSink * This);
void __stdcall AsyncIAdviseSink_Begin_OnClose_Proxy( AsyncIAdviseSink * This);
HRESULT __stdcall AsyncIAdviseSink_Begin_OnClose_Stub( AsyncIAdviseSink * This);
void __stdcall AsyncIAdviseSink_Finish_OnClose_Proxy( AsyncIAdviseSink * This);
HRESULT __stdcall AsyncIAdviseSink_Finish_OnClose_Stub( AsyncIAdviseSink * This);
void __stdcall AsyncIAdviseSink2_Begin_OnLinkSrcChange_Proxy( AsyncIAdviseSink2 * This, IMoniker *pmk);
HRESULT __stdcall AsyncIAdviseSink2_Begin_OnLinkSrcChange_Stub( AsyncIAdviseSink2 * This, IMoniker *pmk);
void __stdcall AsyncIAdviseSink2_Finish_OnLinkSrcChange_Proxy( AsyncIAdviseSink2 * This);
HRESULT __stdcall AsyncIAdviseSink2_Finish_OnLinkSrcChange_Stub( AsyncIAdviseSink2 * This);
extern const IID GUID_NULL;
extern const IID CATID_MARSHALER;
extern const IID IID_IRpcChannel;
extern const IID IID_IRpcStub;
extern const IID IID_IStubManager;
extern const IID IID_IRpcProxy;
extern const IID IID_IProxyManager;
extern const IID IID_IPSFactory;
extern const IID IID_IInternalMoniker;
extern const IID IID_IDfReserved1;
extern const IID IID_IDfReserved2;
extern const IID IID_IDfReserved3;
extern const CLSID CLSID_StdMarshal;
extern const CLSID CLSID_AggStdMarshal;
extern const CLSID CLSID_StdAsyncActManager;
extern const IID IID_IStub;
extern const IID IID_IProxy;
extern const IID IID_IEnumGeneric;
extern const IID IID_IEnumHolder;
extern const IID IID_IEnumCallback;
extern const IID IID_IOleManager;
extern const IID IID_IOlePresObj;
extern const IID IID_IDebug;
extern const IID IID_IDebugStream;
extern const CLSID CLSID_PSGenObject;
extern const CLSID CLSID_PSClientSite;
extern const CLSID CLSID_PSClassObject;
extern const CLSID CLSID_PSInPlaceActive;
extern const CLSID CLSID_PSInPlaceFrame;
extern const CLSID CLSID_PSDragDrop;
extern const CLSID CLSID_PSBindCtx;
extern const CLSID CLSID_PSEnumerators;
extern const CLSID CLSID_StaticMetafile;
extern const CLSID CLSID_StaticDib;
extern const CLSID CID_CDfsVolume;
extern const CLSID CLSID_DCOMAccessControl;
extern const CLSID CLSID_GlobalOptions;
extern const CLSID CLSID_StdGlobalInterfaceTable;
extern const CLSID CLSID_ComBinding;
extern const CLSID CLSID_StdEvent;
extern const CLSID CLSID_ManualResetEvent;
extern const CLSID CLSID_SynchronizeContainer;
extern const CLSID CLSID_AddrControl;
extern const CLSID CLSID_ContextSwitcher;
extern const CLSID CLSID_CCDFormKrnl;
extern const CLSID CLSID_CCDPropertyPage;
extern const CLSID CLSID_CCDFormDialog;
extern const CLSID CLSID_CCDCommandButton;
extern const CLSID CLSID_CCDComboBox;
extern const CLSID CLSID_CCDTextBox;
extern const CLSID CLSID_CCDCheckBox;
extern const CLSID CLSID_CCDLabel;
extern const CLSID CLSID_CCDOptionButton;
extern const CLSID CLSID_CCDListBox;
extern const CLSID CLSID_CCDScrollBar;
extern const CLSID CLSID_CCDGroupBox;
extern const CLSID CLSID_CCDGeneralPropertyPage;
extern const CLSID CLSID_CCDGenericPropertyPage;
extern const CLSID CLSID_CCDFontPropertyPage;
extern const CLSID CLSID_CCDColorPropertyPage;
extern const CLSID CLSID_CCDLabelPropertyPage;
extern const CLSID CLSID_CCDCheckBoxPropertyPage;
extern const CLSID CLSID_CCDTextBoxPropertyPage;
extern const CLSID CLSID_CCDOptionButtonPropertyPage;
extern const CLSID CLSID_CCDListBoxPropertyPage;
extern const CLSID CLSID_CCDCommandButtonPropertyPage;
extern const CLSID CLSID_CCDComboBoxPropertyPage;
extern const CLSID CLSID_CCDScrollBarPropertyPage;
extern const CLSID CLSID_CCDGroupBoxPropertyPage;
extern const CLSID CLSID_CCDXObjectPropertyPage;
extern const CLSID CLSID_CStdPropertyFrame;
extern const CLSID CLSID_CFormPropertyPage;
extern const CLSID CLSID_CGridPropertyPage;
extern const CLSID CLSID_CWSJArticlePage;
extern const CLSID CLSID_CSystemPage;
extern const CLSID CLSID_IdentityUnmarshal;
extern const CLSID CLSID_InProcFreeMarshaler;
extern const CLSID CLSID_Picture_Metafile;
extern const CLSID CLSID_Picture_EnhMetafile;
extern const CLSID CLSID_Picture_Dib;
extern const GUID GUID_TRISTATE;
typedef enum tagCOINIT {
COINIT_APARTMENTTHREADED = 0x2, COINIT_MULTITHREADED = 0x0, COINIT_DISABLE_OLE1DDE = 0x4, COINIT_SPEED_OVER_MEMORY = 0x8, } COINIT;
extern DWORD __stdcall CoBuildVersion( void );
extern HRESULT __stdcall CoInitialize( LPVOID pvReserved);
extern void __stdcall CoUninitialize();
extern HRESULT __stdcall CoGetMalloc( DWORD dwMemContext, LPMALLOC * ppMalloc);
extern DWORD __stdcall CoGetCurrentProcess();
extern HRESULT __stdcall CoRegisterMallocSpy( LPMALLOCSPY pMallocSpy);
extern HRESULT __stdcall CoRevokeMallocSpy();
extern HRESULT __stdcall CoCreateStandardMalloc( DWORD memctx, IMalloc * * ppMalloc);
extern HRESULT __stdcall CoInitializeEx( LPVOID pvReserved, DWORD dwCoInit);
extern HRESULT __stdcall CoGetCallerTID( LPDWORD lpdwTID );
extern HRESULT __stdcall CoGetCurrentLogicalThreadId( GUID *pguid);
extern HRESULT __stdcall CoRegisterInitializeSpy( LPINITIALIZESPY pSpy, ULARGE_INTEGER *puliCookie);
extern HRESULT __stdcall CoRevokeInitializeSpy( ULARGE_INTEGER uliCookie);
extern HRESULT __stdcall CoGetContextToken( ULONG_PTR* pToken);
typedef enum tagCOMSD {
SD_LAUNCHPERMISSIONS = 0, SD_ACCESSPERMISSIONS = 1, SD_LAUNCHRESTRICTIONS = 2, SD_ACCESSRESTRICTIONS = 3 } COMSD;
extern HRESULT __stdcall CoGetSystemSecurityPermissions(COMSD comSDType, PSECURITY_DESCRIPTOR *ppSD);
extern HRESULT __stdcall CoGetApartmentType( APTTYPE * pAptType, APTTYPEQUALIFIER * pAptQualifier);
typedef struct tagSOleTlsDataPublic {
void *pvReserved0[2];
<field name="dwReserved0"><arr length="3"><DWORD /></arr></field>
void *pvReserved1[1];
<field name="dwReserved1"><arr length="3"><DWORD /></arr></field>
void *pvReserved2[4];
<field name="dwReserved2"><arr length="1"><DWORD /></arr></field>
<field name="pCurrentCtx"><ptr><void /></ptr></field>
} SOleTlsDataPublic;
extern HRESULT __stdcall CoGetObjectContext( const IID * const riid, LPVOID * ppv);
extern HRESULT __stdcall CoGetClassObject( const IID * const rclsid, DWORD dwClsContext, LPVOID pvReserved, const IID * const riid, LPVOID * ppv);
extern HRESULT __stdcall CoRegisterClassObject( const IID * const rclsid, LPUNKNOWN pUnk, DWORD dwClsContext, DWORD flags, LPDWORD lpdwRegister);
extern HRESULT __stdcall CoRevokeClassObject( DWORD dwRegister);
extern HRESULT __stdcall CoResumeClassObjects();
extern HRESULT __stdcall CoSuspendClassObjects();
extern ULONG __stdcall CoAddRefServerProcess();
extern ULONG __stdcall CoReleaseServerProcess();
extern HRESULT __stdcall CoGetPSClsid( const IID * const riid, CLSID *pClsid);
extern HRESULT __stdcall CoRegisterPSClsid( const IID * const riid, const IID * const rclsid);
extern HRESULT __stdcall CoRegisterSurrogate( LPSURROGATE pSurrogate);
extern HRESULT __stdcall CoGetMarshalSizeMax( ULONG *pulSize, const IID * const riid, LPUNKNOWN pUnk, DWORD dwDestContext, LPVOID pvDestContext, DWORD mshlflags);
extern HRESULT __stdcall CoMarshalInterface( LPSTREAM pStm, const IID * const riid, LPUNKNOWN pUnk, DWORD dwDestContext, LPVOID pvDestContext, DWORD mshlflags);
extern HRESULT __stdcall CoUnmarshalInterface( LPSTREAM pStm, const IID * const riid, LPVOID * ppv);
extern HRESULT __stdcall CoMarshalHresult( LPSTREAM pstm, HRESULT hresult);
extern HRESULT __stdcall CoUnmarshalHresult( LPSTREAM pstm, HRESULT * phresult);
extern HRESULT __stdcall CoReleaseMarshalData( LPSTREAM pStm);
extern HRESULT __stdcall CoDisconnectObject( LPUNKNOWN pUnk, DWORD dwReserved);
extern HRESULT __stdcall CoLockObjectExternal( LPUNKNOWN pUnk, BOOL fLock, BOOL fLastUnlockReleases);
extern HRESULT __stdcall CoGetStandardMarshal( const IID * const riid, LPUNKNOWN pUnk, DWORD dwDestContext, LPVOID pvDestContext, DWORD mshlflags, LPMARSHAL * ppMarshal);
extern HRESULT __stdcall CoGetStdMarshalEx( LPUNKNOWN pUnkOuter, DWORD smexflags, LPUNKNOWN * ppUnkInner);
typedef enum tagSTDMSHLFLAGS {
SMEXF_SERVER = 0x01, SMEXF_HANDLER = 0x02 } STDMSHLFLAGS;
extern BOOL __stdcall CoIsHandlerConnected( LPUNKNOWN pUnk);
extern HRESULT __stdcall CoMarshalInterThreadInterfaceInStream( const IID * const riid, LPUNKNOWN pUnk, LPSTREAM *ppStm);
extern HRESULT __stdcall CoGetInterfaceAndReleaseStream( LPSTREAM pStm, const IID * const iid, LPVOID * ppv);
extern HRESULT __stdcall CoCreateFreeThreadedMarshaler( LPUNKNOWN punkOuter, LPUNKNOWN *ppunkMarshal);
extern HINSTANCE __stdcall CoLoadLibrary( LPOLESTR lpszLibName, BOOL bAutoFree);
extern void __stdcall CoFreeLibrary( HINSTANCE hInst);
extern void __stdcall CoFreeAllLibraries();
extern void __stdcall CoFreeUnusedLibraries();
extern void __stdcall CoFreeUnusedLibrariesEx( DWORD dwUnloadDelay, DWORD dwReserved);
extern HRESULT __stdcall CoDisconnectContext(DWORD dwTimeout);
extern HRESULT __stdcall CoInitializeSecurity( PSECURITY_DESCRIPTOR pSecDesc, LONG cAuthSvc, SOLE_AUTHENTICATION_SERVICE *asAuthSvc, void *pReserved1, DWORD dwAuthnLevel, DWORD dwImpLevel, void *pAuthList, DWORD dwCapabilities, void *pReserved3 );
extern HRESULT __stdcall CoGetCallContext( const IID * const riid, void **ppInterface );
extern HRESULT __stdcall CoQueryProxyBlanket( IUnknown *pProxy, DWORD *pwAuthnSvc, DWORD *pAuthzSvc, OLECHAR **pServerPrincName, DWORD *pAuthnLevel, DWORD *pImpLevel, RPC_AUTH_IDENTITY_HANDLE *pAuthInfo, DWORD *pCapabilites );
extern HRESULT __stdcall CoSetProxyBlanket( IUnknown *pProxy, DWORD dwAuthnSvc, DWORD dwAuthzSvc, OLECHAR *pServerPrincName, DWORD dwAuthnLevel, DWORD dwImpLevel, RPC_AUTH_IDENTITY_HANDLE pAuthInfo, DWORD dwCapabilities );
extern HRESULT __stdcall CoCopyProxy( IUnknown *pProxy, IUnknown **ppCopy );
extern HRESULT __stdcall CoQueryClientBlanket( DWORD *pAuthnSvc, DWORD *pAuthzSvc, OLECHAR **pServerPrincName, DWORD *pAuthnLevel, DWORD *pImpLevel, RPC_AUTHZ_HANDLE *pPrivs, DWORD *pCapabilities );
extern HRESULT __stdcall CoImpersonateClient();
extern HRESULT __stdcall CoRevertToSelf();
extern HRESULT __stdcall CoQueryAuthenticationServices( DWORD *pcAuthSvc, SOLE_AUTHENTICATION_SERVICE **asAuthSvc );
extern HRESULT __stdcall CoSwitchCallContext( IUnknown *pNewObject, IUnknown **ppOldObject );
extern HRESULT __stdcall CoCreateInstance( const IID * const rclsid, LPUNKNOWN pUnkOuter, DWORD dwClsContext, const IID * const riid, LPVOID * ppv);
extern HRESULT __stdcall CoGetInstanceFromFile( COSERVERINFO * pServerInfo, CLSID * pClsid, IUnknown * punkOuter, DWORD dwClsCtx, DWORD grfMode, OLECHAR * pwszName, DWORD dwCount, MULTI_QI * pResults );
extern HRESULT __stdcall CoGetInstanceFromIStorage( COSERVERINFO * pServerInfo, CLSID * pClsid, IUnknown * punkOuter, DWORD dwClsCtx, struct IStorage * pstg, DWORD dwCount, MULTI_QI * pResults );
extern HRESULT __stdcall CoCreateInstanceEx( const IID * const Clsid, IUnknown * punkOuter, DWORD dwClsCtx, COSERVERINFO * pServerInfo, DWORD dwCount, MULTI_QI * pResults );
extern HRESULT __stdcall CoGetCancelObject( DWORD dwThreadId, const IID * const iid, void **ppUnk);
extern HRESULT __stdcall CoSetCancelObject( IUnknown *pUnk);
extern HRESULT __stdcall CoCancelCall( DWORD dwThreadId, ULONG ulTimeout);
extern HRESULT __stdcall CoTestCancel();
extern HRESULT __stdcall CoEnableCallCancellation( LPVOID pReserved);
extern HRESULT __stdcall CoDisableCallCancellation( LPVOID pReserved);
extern HRESULT __stdcall CoAllowSetForegroundWindow( IUnknown *pUnk, LPVOID lpvReserved);
extern HRESULT __stdcall DcomChannelSetHResult( LPVOID pvReserved, ULONG* pulReserved, HRESULT appsHR);
extern HRESULT __stdcall StringFromCLSID( const IID * const rclsid, LPOLESTR * lplpsz);
extern HRESULT __stdcall CLSIDFromString( LPCOLESTR lpsz, LPCLSID pclsid);
extern HRESULT __stdcall StringFromIID( const IID * const rclsid, LPOLESTR * lplpsz);
extern HRESULT __stdcall IIDFromString( LPCOLESTR lpsz, LPIID lpiid);
extern BOOL __stdcall CoIsOle1Class( const IID * const rclsid);
extern HRESULT __stdcall ProgIDFromCLSID(const IID * const clsid, LPOLESTR * lplpszProgID);
extern HRESULT __stdcall CLSIDFromProgID(LPCOLESTR lpszProgID, LPCLSID lpclsid);
extern HRESULT __stdcall CLSIDFromProgIDEx(LPCOLESTR lpszProgID, LPCLSID lpclsid);
extern int32 __stdcall StringFromGUID2( const GUID * const rguid, LPOLESTR lpsz, int32 cchMax);
extern HRESULT __stdcall CoCreateGuid( GUID *pguid);
extern BOOL __stdcall CoFileTimeToDosDateTime( FILETIME * lpFileTime, LPWORD lpDosDate, LPWORD lpDosTime);
extern BOOL __stdcall CoDosDateTimeToFileTime( WORD nDosDate, WORD nDosTime, FILETIME * lpFileTime);
extern HRESULT __stdcall CoFileTimeNow( FILETIME * lpFileTime );
extern HRESULT __stdcall CoRegisterMessageFilter( LPMESSAGEFILTER lpMessageFilter, LPMESSAGEFILTER * lplpMessageFilter );
extern HRESULT __stdcall CoRegisterChannelHook( const GUID * const ExtensionUuid, IChannelHook *pChannelHook );
extern HRESULT __stdcall CoWaitForMultipleHandles(DWORD dwFlags, DWORD dwTimeout, ULONG cHandles, LPHANDLE pHandles, LPDWORD lpdwindex);
typedef enum tagCOWAIT_FLAGS {
COWAIT_WAITALL = 1, COWAIT_ALERTABLE = 2, COWAIT_INPUTAVAILABLE = 4 }COWAIT_FLAGS;
extern HRESULT __stdcall CoInvalidateRemoteMachineBindings( LPOLESTR pszMachineName);
extern HRESULT __stdcall CoGetTreatAsClass( const IID * const clsidOld, LPCLSID pClsidNew);
extern HRESULT __stdcall CoTreatAsClass( const IID * const clsidOld, const IID * const clsidNew);
typedef HRESULT (__stdcall * LPFNGETCLASSOBJECT) (const IID * const, const IID * const, LPVOID *);
typedef HRESULT (__stdcall * LPFNCANUNLOADNOW)();
extern HRESULT __stdcall DllGetClassObject( const IID * const rclsid, const IID * const riid, LPVOID * ppv);
extern HRESULT __stdcall DllCanUnloadNow();
extern LPVOID __stdcall CoTaskMemAlloc( SIZE_T cb);
extern LPVOID __stdcall CoTaskMemRealloc( LPVOID pv, SIZE_T cb);
extern void __stdcall CoTaskMemFree( LPVOID pv );
extern HRESULT __stdcall CreateDataAdviseHolder( LPDATAADVISEHOLDER * ppDAHolder);
extern HRESULT __stdcall CreateDataCache( LPUNKNOWN pUnkOuter, const IID * const rclsid, const IID * const iid, LPVOID * ppv);
extern HRESULT __stdcall StgCreateDocfile( const WCHAR* pwcsName, DWORD grfMode, DWORD reserved, IStorage** ppstgOpen);
extern HRESULT __stdcall StgCreateDocfileOnILockBytes( ILockBytes* plkbyt, DWORD grfMode, DWORD reserved, IStorage** ppstgOpen);
extern HRESULT __stdcall StgOpenStorage( const WCHAR* pwcsName, IStorage* pstgPriority, DWORD grfMode, SNB snbExclude, DWORD reserved, IStorage** ppstgOpen);
extern HRESULT __stdcall StgOpenStorageOnILockBytes( ILockBytes* plkbyt, IStorage* pstgPriority, DWORD grfMode, SNB snbExclude, DWORD reserved, IStorage** ppstgOpen);
extern HRESULT __stdcall StgIsStorageFile( const WCHAR* pwcsName);
extern HRESULT __stdcall StgIsStorageILockBytes( ILockBytes* plkbyt);
extern HRESULT __stdcall StgSetTimes( const WCHAR* lpszName, const FILETIME* pctime, const FILETIME* patime, const FILETIME* pmtime);
extern HRESULT __stdcall StgOpenAsyncDocfileOnIFillLockBytes( IFillLockBytes *pflb, DWORD grfMode, DWORD asyncFlags, IStorage** ppstgOpen);
extern HRESULT __stdcall StgGetIFillLockBytesOnILockBytes( ILockBytes *pilb, IFillLockBytes** ppflb);
extern HRESULT __stdcall StgGetIFillLockBytesOnFile( OLECHAR const *pwcsName, IFillLockBytes** ppflb);
extern HRESULT __stdcall StgOpenLayoutDocfile( OLECHAR const *pwcsDfName, DWORD grfMode, DWORD reserved, IStorage** ppstgOpen);
typedef struct tagSTGOPTIONS {
<field name="usVersion"><USHORT /></field>
<field name="reserved"><USHORT /></field>
<field name="ulSectorSize"><ULONG /></field>
<field name="pwcsTemplateFile"><ptr const="true"><WCHAR /></ptr></field>
} STGOPTIONS;
extern HRESULT __stdcall StgCreateStorageEx(const WCHAR* pwcsName, DWORD grfMode, DWORD stgfmt, DWORD grfAttrs, STGOPTIONS* pStgOptions, PSECURITY_DESCRIPTOR pSecurityDescriptor, const IID * const riid, void** ppObjectOpen);
extern HRESULT __stdcall StgOpenStorageEx(const WCHAR* pwcsName, DWORD grfMode, DWORD stgfmt, DWORD grfAttrs, STGOPTIONS* pStgOptions, PSECURITY_DESCRIPTOR pSecurityDescriptor, const IID * const riid, void** ppObjectOpen);
extern HRESULT __stdcall BindMoniker( LPMONIKER pmk, DWORD grfOpt, const IID * const iidResult, LPVOID * ppvResult);
extern HRESULT __stdcall CoInstall( IBindCtx * pbc, DWORD dwFlags, uCLSSPEC * pClassSpec, QUERYCONTEXT * pQuery, LPWSTR pszCodeBase);
extern HRESULT __stdcall CoGetObject( LPCWSTR pszName, BIND_OPTS *pBindOptions, const IID * const riid, void **ppv);
extern HRESULT __stdcall MkParseDisplayName( LPBC pbc, LPCOLESTR szUserName, ULONG * pchEaten, LPMONIKER * ppmk);
extern HRESULT __stdcall MonikerRelativePathTo( LPMONIKER pmkSrc, LPMONIKER pmkDest, LPMONIKER * ppmkRelPath, BOOL dwReserved);
extern HRESULT __stdcall MonikerCommonPrefixWith( LPMONIKER pmkThis, LPMONIKER pmkOther, LPMONIKER * ppmkCommon);
extern HRESULT __stdcall CreateBindCtx( DWORD reserved, LPBC * ppbc);
extern HRESULT __stdcall CreateGenericComposite( LPMONIKER pmkFirst, LPMONIKER pmkRest, LPMONIKER * ppmkComposite);
extern HRESULT __stdcall GetClassFile(LPCOLESTR szFilename, CLSID * pclsid);
extern HRESULT __stdcall CreateClassMoniker( const IID * const rclsid, LPMONIKER * ppmk);
extern HRESULT __stdcall CreateFileMoniker( LPCOLESTR lpszPathName, LPMONIKER * ppmk);
extern HRESULT __stdcall CreateItemMoniker( LPCOLESTR lpszDelim, LPCOLESTR lpszItem, LPMONIKER * ppmk);
extern HRESULT __stdcall CreateAntiMoniker( LPMONIKER * ppmk);
extern HRESULT __stdcall CreatePointerMoniker( LPUNKNOWN punk, LPMONIKER * ppmk);
extern HRESULT __stdcall CreateObjrefMoniker( LPUNKNOWN punk, LPMONIKER * ppmk);
extern HRESULT __stdcall GetRunningObjectTable( DWORD reserved, LPRUNNINGOBJECTTABLE * pprot);
<typedef name="IPersistMoniker"><struct name="IPersistMoniker" /></typedef>
<typedef name="IMonikerProp"><struct name="IMonikerProp" /></typedef>
<typedef name="IBindProtocol"><struct name="IBindProtocol" /></typedef>
<typedef name="IBinding"><struct name="IBinding" /></typedef>
<typedef name="IBindStatusCallback"><struct name="IBindStatusCallback" /></typedef>
<typedef name="IBindStatusCallbackEx"><struct name="IBindStatusCallbackEx" /></typedef>
<typedef name="IAuthenticate"><struct name="IAuthenticate" /></typedef>
<typedef name="IAuthenticateEx"><struct name="IAuthenticateEx" /></typedef>
<typedef name="IHttpNegotiate"><struct name="IHttpNegotiate" /></typedef>
<typedef name="IHttpNegotiate2"><struct name="IHttpNegotiate2" /></typedef>
<typedef name="IHttpNegotiate3"><struct name="IHttpNegotiate3" /></typedef>
<typedef name="IWinInetFileStream"><struct name="IWinInetFileStream" /></typedef>
<typedef name="IWindowForBindingUI"><struct name="IWindowForBindingUI" /></typedef>
<typedef name="ICodeInstall"><struct name="ICodeInstall" /></typedef>
<typedef name="IUri"><struct name="IUri" /></typedef>
<typedef name="IUriContainer"><struct name="IUriContainer" /></typedef>
<typedef name="IUriBuilder"><struct name="IUriBuilder" /></typedef>
<typedef name="IUriBuilderFactory"><struct name="IUriBuilderFactory" /></typedef>
<typedef name="IWinInetInfo"><struct name="IWinInetInfo" /></typedef>
<typedef name="IHttpSecurity"><struct name="IHttpSecurity" /></typedef>
<typedef name="IWinInetHttpInfo"><struct name="IWinInetHttpInfo" /></typedef>
<typedef name="IWinInetCacheHints"><struct name="IWinInetCacheHints" /></typedef>
<typedef name="IWinInetCacheHints2"><struct name="IWinInetCacheHints2" /></typedef>
<typedef name="IBindHost"><struct name="IBindHost" /></typedef>
<typedef name="IInternet"><struct name="IInternet" /></typedef>
<typedef name="IInternetBindInfo"><struct name="IInternetBindInfo" /></typedef>
<typedef name="IInternetBindInfoEx"><struct name="IInternetBindInfoEx" /></typedef>
<typedef name="IInternetProtocolRoot"><struct name="IInternetProtocolRoot" /></typedef>
<typedef name="IInternetProtocol"><struct name="IInternetProtocol" /></typedef>
<typedef name="IInternetProtocolEx"><struct name="IInternetProtocolEx" /></typedef>
<typedef name="IInternetProtocolSink"><struct name="IInternetProtocolSink" /></typedef>
<typedef name="IInternetProtocolSinkStackable"><struct name="IInternetProtocolSinkStackable" /></typedef>
<typedef name="IInternetSession"><struct name="IInternetSession" /></typedef>
<typedef name="IInternetThreadSwitch"><struct name="IInternetThreadSwitch" /></typedef>
<typedef name="IInternetPriority"><struct name="IInternetPriority" /></typedef>
<typedef name="IInternetProtocolInfo"><struct name="IInternetProtocolInfo" /></typedef>
<typedef name="IInternetSecurityMgrSite"><struct name="IInternetSecurityMgrSite" /></typedef>
<typedef name="IInternetSecurityManager"><struct name="IInternetSecurityManager" /></typedef>
<typedef name="IInternetSecurityManagerEx"><struct name="IInternetSecurityManagerEx" /></typedef>
<typedef name="IInternetSecurityManagerEx2"><struct name="IInternetSecurityManagerEx2" /></typedef>
<typedef name="IZoneIdentifier"><struct name="IZoneIdentifier" /></typedef>
<typedef name="IInternetHostSecurityManager"><struct name="IInternetHostSecurityManager" /></typedef>
<typedef name="IInternetZoneManager"><struct name="IInternetZoneManager" /></typedef>
<typedef name="IInternetZoneManagerEx"><struct name="IInternetZoneManagerEx" /></typedef>
<typedef name="IInternetZoneManagerEx2"><struct name="IInternetZoneManagerEx2" /></typedef>
<typedef name="ISoftDistExt"><struct name="ISoftDistExt" /></typedef>
<typedef name="ICatalogFileInfo"><struct name="ICatalogFileInfo" /></typedef>
<typedef name="IDataFilter"><struct name="IDataFilter" /></typedef>
<typedef name="IEncodingFilterFactory"><struct name="IEncodingFilterFactory" /></typedef>
<typedef name="IWrappedProtocol"><struct name="IWrappedProtocol" /></typedef>
<typedef name="IOleAdviseHolder"><struct name="IOleAdviseHolder" /></typedef>
<typedef name="IOleCache"><struct name="IOleCache" /></typedef>
<typedef name="IOleCache2"><struct name="IOleCache2" /></typedef>
<typedef name="IOleCacheControl"><struct name="IOleCacheControl" /></typedef>
<typedef name="IParseDisplayName"><struct name="IParseDisplayName" /></typedef>
<typedef name="IOleContainer"><struct name="IOleContainer" /></typedef>
<typedef name="IOleClientSite"><struct name="IOleClientSite" /></typedef>
<typedef name="IOleObject"><struct name="IOleObject" /></typedef>
<typedef name="IOleWindow"><struct name="IOleWindow" /></typedef>
<typedef name="IOleLink"><struct name="IOleLink" /></typedef>
<typedef name="IOleItemContainer"><struct name="IOleItemContainer" /></typedef>
<typedef name="IOleInPlaceUIWindow"><struct name="IOleInPlaceUIWindow" /></typedef>
<typedef name="IOleInPlaceActiveObject"><struct name="IOleInPlaceActiveObject" /></typedef>
<typedef name="IOleInPlaceFrame"><struct name="IOleInPlaceFrame" /></typedef>
<typedef name="IOleInPlaceObject"><struct name="IOleInPlaceObject" /></typedef>
<typedef name="IOleInPlaceSite"><struct name="IOleInPlaceSite" /></typedef>
<typedef name="IContinue"><struct name="IContinue" /></typedef>
<typedef name="IViewObject"><struct name="IViewObject" /></typedef>
<typedef name="IViewObject2"><struct name="IViewObject2" /></typedef>
<typedef name="IDropSource"><struct name="IDropSource" /></typedef>
<typedef name="IDropTarget"><struct name="IDropTarget" /></typedef>
<typedef name="IDropSourceNotify"><struct name="IDropSourceNotify" /></typedef>
<typedef name="IEnumOLEVERB"><struct name="IEnumOLEVERB" /></typedef>
extern RPC_IF_HANDLE __MIDL_itf_oleidl_0000_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_oleidl_0000_0000_v0_0_s_ifspec;
<typedef name="LPOLEADVISEHOLDER"><ptr><IOleAdviseHolder /></ptr></typedef>
extern const IID IID_IOleAdviseHolder;
typedef struct IOleAdviseHolderVtbl {
HRESULT(__stdcall *QueryInterface )( IOleAdviseHolder * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( IOleAdviseHolder * This);
ULONG(__stdcall *Release )( IOleAdviseHolder * This);
HRESULT(__stdcall *Advise )( IOleAdviseHolder * This, IAdviseSink *pAdvise, DWORD *pdwConnection);
HRESULT(__stdcall *Unadvise )( IOleAdviseHolder * This, DWORD dwConnection);
HRESULT(__stdcall *EnumAdvise )( IOleAdviseHolder * This, IEnumSTATDATA **ppenumAdvise);
HRESULT(__stdcall *SendOnRename )( IOleAdviseHolder * This, IMoniker *pmk);
HRESULT(__stdcall *SendOnSave )( IOleAdviseHolder * This);
HRESULT(__stdcall *SendOnClose )( IOleAdviseHolder * This);
} IOleAdviseHolderVtbl;
struct IOleAdviseHolder {
struct IOleAdviseHolderVtbl *lpVtbl;
};
<typedef name="LPOLECACHE"><ptr><IOleCache /></ptr></typedef>
extern const IID IID_IOleCache;
typedef struct IOleCacheVtbl {
HRESULT(__stdcall *QueryInterface )( IOleCache * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( IOleCache * This);
ULONG(__stdcall *Release )( IOleCache * This);
HRESULT(__stdcall *Cache )( IOleCache * This, FORMATETC *pformatetc, DWORD advf, DWORD *pdwConnection);
HRESULT(__stdcall *Uncache )( IOleCache * This, DWORD dwConnection);
HRESULT(__stdcall *EnumCache )( IOleCache * This, IEnumSTATDATA **ppenumSTATDATA);
HRESULT(__stdcall *InitCache )( IOleCache * This, IDataObject *pDataObject);
HRESULT(__stdcall *SetData )( IOleCache * This, FORMATETC *pformatetc, STGMEDIUM *pmedium, BOOL fRelease);
} IOleCacheVtbl;
struct IOleCache {
struct IOleCacheVtbl *lpVtbl;
};
<typedef name="LPOLECACHE2"><ptr><IOleCache2 /></ptr></typedef>
typedef enum tagDISCARDCACHE { DISCARDCACHE_SAVEIFDIRTY = 0, DISCARDCACHE_NOSAVE = 1 } DISCARDCACHE;
extern const IID IID_IOleCache2;
typedef struct IOleCache2Vtbl {
HRESULT(__stdcall *QueryInterface )( IOleCache2 * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( IOleCache2 * This);
ULONG(__stdcall *Release )( IOleCache2 * This);
HRESULT(__stdcall *Cache )( IOleCache2 * This, FORMATETC *pformatetc, DWORD advf, DWORD *pdwConnection);
HRESULT(__stdcall *Uncache )( IOleCache2 * This, DWORD dwConnection);
HRESULT(__stdcall *EnumCache )( IOleCache2 * This, IEnumSTATDATA **ppenumSTATDATA);
HRESULT(__stdcall *InitCache )( IOleCache2 * This, IDataObject *pDataObject);
HRESULT(__stdcall *SetData )( IOleCache2 * This, FORMATETC *pformatetc, STGMEDIUM *pmedium, BOOL fRelease);
HRESULT(__stdcall *UpdateCache )( IOleCache2 * This, LPDATAOBJECT pDataObject, DWORD grfUpdf, LPVOID pReserved);
HRESULT(__stdcall *DiscardCache )( IOleCache2 * This, DWORD dwDiscardOptions);
} IOleCache2Vtbl;
struct IOleCache2 {
struct IOleCache2Vtbl *lpVtbl;
};
HRESULT __stdcall IOleCache2_RemoteUpdateCache_Proxy( IOleCache2 * This, LPDATAOBJECT pDataObject, DWORD grfUpdf, LONG_PTR pReserved);
void __stdcall IOleCache2_RemoteUpdateCache_Stub( IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
<typedef name="LPOLECACHECONTROL"><ptr><IOleCacheControl /></ptr></typedef>
extern const IID IID_IOleCacheControl;
typedef struct IOleCacheControlVtbl {
HRESULT(__stdcall *QueryInterface )( IOleCacheControl * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( IOleCacheControl * This);
ULONG(__stdcall *Release )( IOleCacheControl * This);
HRESULT(__stdcall *OnRun )( IOleCacheControl * This, LPDATAOBJECT pDataObject);
HRESULT(__stdcall *OnStop )( IOleCacheControl * This);
} IOleCacheControlVtbl;
struct IOleCacheControl {
struct IOleCacheControlVtbl *lpVtbl;
};
<typedef name="LPPARSEDISPLAYNAME"><ptr><IParseDisplayName /></ptr></typedef>
extern const IID IID_IParseDisplayName;
typedef struct IParseDisplayNameVtbl {
HRESULT(__stdcall *QueryInterface )( IParseDisplayName * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( IParseDisplayName * This);
ULONG(__stdcall *Release )( IParseDisplayName * This);
HRESULT(__stdcall *ParseDisplayName )( IParseDisplayName * This, IBindCtx *pbc, LPOLESTR pszDisplayName, ULONG *pchEaten, IMoniker **ppmkOut);
} IParseDisplayNameVtbl;
struct IParseDisplayName {
struct IParseDisplayNameVtbl *lpVtbl;
};
<typedef name="LPOLECONTAINER"><ptr><IOleContainer /></ptr></typedef>
extern const IID IID_IOleContainer;
typedef struct IOleContainerVtbl {
HRESULT(__stdcall *QueryInterface )( IOleContainer * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( IOleContainer * This);
ULONG(__stdcall *Release )( IOleContainer * This);
HRESULT(__stdcall *ParseDisplayName )( IOleContainer * This, IBindCtx *pbc, LPOLESTR pszDisplayName, ULONG *pchEaten, IMoniker **ppmkOut);
HRESULT(__stdcall *EnumObjects )( IOleContainer * This, DWORD grfFlags, IEnumUnknown **ppenum);
HRESULT(__stdcall *LockContainer )( IOleContainer * This, BOOL fLock);
} IOleContainerVtbl;
struct IOleContainer {
struct IOleContainerVtbl *lpVtbl;
};
<typedef name="LPOLECLIENTSITE"><ptr><IOleClientSite /></ptr></typedef>
extern const IID IID_IOleClientSite;
typedef struct IOleClientSiteVtbl {
HRESULT(__stdcall *QueryInterface )( IOleClientSite * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( IOleClientSite * This);
ULONG(__stdcall *Release )( IOleClientSite * This);
HRESULT(__stdcall *SaveObject )( IOleClientSite * This);
HRESULT(__stdcall *GetMoniker )( IOleClientSite * This, DWORD dwAssign, DWORD dwWhichMoniker, IMoniker **ppmk);
HRESULT(__stdcall *GetContainer )( IOleClientSite * This, IOleContainer **ppContainer);
HRESULT(__stdcall *ShowObject )( IOleClientSite * This);
HRESULT(__stdcall *OnShowWindow )( IOleClientSite * This, BOOL fShow);
HRESULT(__stdcall *RequestNewObjectLayout )( IOleClientSite * This);
} IOleClientSiteVtbl;
struct IOleClientSite {
struct IOleClientSiteVtbl *lpVtbl;
};
<typedef name="LPOLEOBJECT"><ptr><IOleObject /></ptr></typedef>
typedef enum tagOLEGETMONIKER { OLEGETMONIKER_ONLYIFTHERE = 1, OLEGETMONIKER_FORCEASSIGN = 2, OLEGETMONIKER_UNASSIGN = 3, OLEGETMONIKER_TEMPFORUSER = 4 } OLEGETMONIKER;
typedef enum tagOLEWHICHMK { OLEWHICHMK_CONTAINER = 1, OLEWHICHMK_OBJREL = 2, OLEWHICHMK_OBJFULL = 3 } OLEWHICHMK;
typedef enum tagUSERCLASSTYPE { USERCLASSTYPE_FULL = 1, USERCLASSTYPE_SHORT = 2, USERCLASSTYPE_APPNAME = 3 } USERCLASSTYPE;
typedef enum tagOLEMISC { OLEMISC_RECOMPOSEONRESIZE = 0x1, OLEMISC_ONLYICONIC = 0x2, OLEMISC_INSERTNOTREPLACE = 0x4, OLEMISC_STATIC = 0x8, OLEMISC_CANTLINKINSIDE = 0x10, OLEMISC_CANLINKBYOLE1 = 0x20, OLEMISC_ISLINKOBJECT = 0x40, OLEMISC_INSIDEOUT = 0x80, OLEMISC_ACTIVATEWHENVISIBLE = 0x100, OLEMISC_RENDERINGISDEVICEINDEPENDENT = 0x200, OLEMISC_INVISIBLEATRUNTIME = 0x400, OLEMISC_ALWAYSRUN = 0x800, OLEMISC_ACTSLIKEBUTTON = 0x1000, OLEMISC_ACTSLIKELABEL = 0x2000, OLEMISC_NOUIACTIVATE = 0x4000, OLEMISC_ALIGNABLE = 0x8000, OLEMISC_SIMPLEFRAME = 0x10000, OLEMISC_SETCLIENTSITEFIRST = 0x20000, OLEMISC_IMEMODE = 0x40000, OLEMISC_IGNOREACTIVATEWHENVISIBLE = 0x80000, OLEMISC_WANTSTOMENUMERGE = 0x100000, OLEMISC_SUPPORTSMULTILEVELUNDO = 0x200000 } OLEMISC;
typedef enum tagOLECLOSE { OLECLOSE_SAVEIFDIRTY = 0, OLECLOSE_NOSAVE = 1, OLECLOSE_PROMPTSAVE = 2 } OLECLOSE;
extern const IID IID_IOleObject;
typedef struct IOleObjectVtbl {
HRESULT(__stdcall *QueryInterface )( IOleObject * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( IOleObject * This);
ULONG(__stdcall *Release )( IOleObject * This);
HRESULT(__stdcall *SetClientSite )( IOleObject * This, IOleClientSite *pClientSite);
HRESULT(__stdcall *GetClientSite )( IOleObject * This, IOleClientSite **ppClientSite);
HRESULT(__stdcall *SetHostNames )( IOleObject * This, LPCOLESTR szContainerApp, LPCOLESTR szContainerObj);
HRESULT(__stdcall *Close )( IOleObject * This, DWORD dwSaveOption);
HRESULT(__stdcall *SetMoniker )( IOleObject * This, DWORD dwWhichMoniker, IMoniker *pmk);
HRESULT(__stdcall *GetMoniker )( IOleObject * This, DWORD dwAssign, DWORD dwWhichMoniker, IMoniker **ppmk);
HRESULT(__stdcall *InitFromData )( IOleObject * This, IDataObject *pDataObject, BOOL fCreation, DWORD dwReserved);
HRESULT(__stdcall *GetClipboardData )( IOleObject * This, DWORD dwReserved, IDataObject **ppDataObject);
HRESULT(__stdcall *DoVerb )( IOleObject * This, LONG iVerb, LPMSG lpmsg, IOleClientSite *pActiveSite, LONG lindex, HWND hwndParent, LPCRECT lprcPosRect);
HRESULT(__stdcall *EnumVerbs )( IOleObject * This, IEnumOLEVERB **ppEnumOleVerb);
HRESULT(__stdcall *Update )( IOleObject * This);
HRESULT(__stdcall *IsUpToDate )( IOleObject * This);
HRESULT(__stdcall *GetUserClassID )( IOleObject * This, CLSID *pClsid);
HRESULT(__stdcall *GetUserType )( IOleObject * This, DWORD dwFormOfType, LPOLESTR *pszUserType);
HRESULT(__stdcall *SetExtent )( IOleObject * This, DWORD dwDrawAspect, SIZEL *psizel);
HRESULT(__stdcall *GetExtent )( IOleObject * This, DWORD dwDrawAspect, SIZEL *psizel);
HRESULT(__stdcall *Advise )( IOleObject * This, IAdviseSink *pAdvSink, DWORD *pdwConnection);
HRESULT(__stdcall *Unadvise )( IOleObject * This, DWORD dwConnection);
HRESULT(__stdcall *EnumAdvise )( IOleObject * This, IEnumSTATDATA **ppenumAdvise);
HRESULT(__stdcall *GetMiscStatus )( IOleObject * This, DWORD dwAspect, DWORD *pdwStatus);
HRESULT(__stdcall *SetColorScheme )( IOleObject * This, LOGPALETTE *pLogpal);
} IOleObjectVtbl;
struct IOleObject {
struct IOleObjectVtbl *lpVtbl;
};
typedef enum tagOLERENDER { OLERENDER_NONE = 0, OLERENDER_DRAW = 1, OLERENDER_FORMAT = 2, OLERENDER_ASIS = 3 } OLERENDER;
<typedef name="LPOLERENDER"><ptr><OLERENDER /></ptr></typedef>
typedef struct tagOBJECTDESCRIPTOR {
<field name="cbSize"><ULONG /></field>
<field name="clsid"><CLSID /></field>
<field name="dwDrawAspect"><DWORD /></field>
<field name="sizel"><SIZEL /></field>
<field name="pointl"><POINTL /></field>
<field name="dwStatus"><DWORD /></field>
<field name="dwFullUserTypeName"><DWORD /></field>
<field name="dwSrcOfCopy"><DWORD /></field>
} OBJECTDESCRIPTOR;
typedef struct tagOBJECTDESCRIPTOR *POBJECTDESCRIPTOR;
typedef struct tagOBJECTDESCRIPTOR *LPOBJECTDESCRIPTOR;
<typedef name="LINKSRCDESCRIPTOR"><struct name="tagOBJECTDESCRIPTOR" /></typedef>
typedef struct tagOBJECTDESCRIPTOR *PLINKSRCDESCRIPTOR;
typedef struct tagOBJECTDESCRIPTOR *LPLINKSRCDESCRIPTOR;
extern RPC_IF_HANDLE IOLETypes_v0_0_c_ifspec;
extern RPC_IF_HANDLE IOLETypes_v0_0_s_ifspec;
<typedef name="LPOLEWINDOW"><ptr><IOleWindow /></ptr></typedef>
extern const IID IID_IOleWindow;
typedef struct IOleWindowVtbl {
HRESULT(__stdcall *QueryInterface )( IOleWindow * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( IOleWindow * This);
ULONG(__stdcall *Release )( IOleWindow * This);
HRESULT(__stdcall *GetWindow )( IOleWindow * This, HWND *phwnd);
HRESULT(__stdcall *ContextSensitiveHelp )( IOleWindow * This, BOOL fEnterMode);
} IOleWindowVtbl;
struct IOleWindow {
struct IOleWindowVtbl *lpVtbl;
};
<typedef name="LPOLELINK"><ptr><IOleLink /></ptr></typedef>
typedef enum tagOLEUPDATE { OLEUPDATE_ALWAYS = 1, OLEUPDATE_ONCALL = 3 } OLEUPDATE;
<typedef name="LPOLEUPDATE"><ptr><OLEUPDATE /></ptr></typedef>
<typedef name="POLEUPDATE"><ptr><OLEUPDATE /></ptr></typedef>
typedef enum tagOLELINKBIND { OLELINKBIND_EVENIFCLASSDIFF = 1 } OLELINKBIND;
extern const IID IID_IOleLink;
typedef struct IOleLinkVtbl {
HRESULT(__stdcall *QueryInterface )( IOleLink * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( IOleLink * This);
ULONG(__stdcall *Release )( IOleLink * This);
HRESULT(__stdcall *SetUpdateOptions )( IOleLink * This, DWORD dwUpdateOpt);
HRESULT(__stdcall *GetUpdateOptions )( IOleLink * This, DWORD *pdwUpdateOpt);
HRESULT(__stdcall *SetSourceMoniker )( IOleLink * This, IMoniker *pmk, const IID * const rclsid);
HRESULT(__stdcall *GetSourceMoniker )( IOleLink * This, IMoniker **ppmk);
HRESULT(__stdcall *SetSourceDisplayName )( IOleLink * This, LPCOLESTR pszStatusText);
HRESULT(__stdcall *GetSourceDisplayName )( IOleLink * This, LPOLESTR *ppszDisplayName);
HRESULT(__stdcall *BindToSource )( IOleLink * This, DWORD bindflags, IBindCtx *pbc);
HRESULT(__stdcall *BindIfRunning )( IOleLink * This);
HRESULT(__stdcall *GetBoundSource )( IOleLink * This, IUnknown **ppunk);
HRESULT(__stdcall *UnbindSource )( IOleLink * This);
HRESULT(__stdcall *Update )( IOleLink * This, IBindCtx *pbc);
} IOleLinkVtbl;
struct IOleLink {
struct IOleLinkVtbl *lpVtbl;
};
<typedef name="LPOLEITEMCONTAINER"><ptr><IOleItemContainer /></ptr></typedef>
typedef enum tagBINDSPEED { BINDSPEED_INDEFINITE = 1, BINDSPEED_MODERATE = 2, BINDSPEED_IMMEDIATE = 3 } BINDSPEED;
typedef enum tagOLECONTF { OLECONTF_EMBEDDINGS = 1, OLECONTF_LINKS = 2, OLECONTF_OTHERS = 4, OLECONTF_ONLYUSER = 8, OLECONTF_ONLYIFRUNNING = 16 } OLECONTF;
extern const IID IID_IOleItemContainer;
typedef struct IOleItemContainerVtbl {
HRESULT(__stdcall *QueryInterface )( IOleItemContainer * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( IOleItemContainer * This);
ULONG(__stdcall *Release )( IOleItemContainer * This);
HRESULT(__stdcall *ParseDisplayName )( IOleItemContainer * This, IBindCtx *pbc, LPOLESTR pszDisplayName, ULONG *pchEaten, IMoniker **ppmkOut);
HRESULT(__stdcall *EnumObjects )( IOleItemContainer * This, DWORD grfFlags, IEnumUnknown **ppenum);
HRESULT(__stdcall *LockContainer )( IOleItemContainer * This, BOOL fLock);
HRESULT(__stdcall *GetObjectA )( IOleItemContainer * This, LPOLESTR pszItem, DWORD dwSpeedNeeded, IBindCtx *pbc, const IID * const riid, void **ppvObject);
HRESULT(__stdcall *GetObjectStorage )( IOleItemContainer * This, LPOLESTR pszItem, IBindCtx *pbc, const IID * const riid, void **ppvStorage);
HRESULT(__stdcall *IsRunning )( IOleItemContainer * This, LPOLESTR pszItem);
} IOleItemContainerVtbl;
struct IOleItemContainer {
struct IOleItemContainerVtbl *lpVtbl;
};
<typedef name="LPOLEINPLACEUIWINDOW"><ptr><IOleInPlaceUIWindow /></ptr></typedef>
<typedef name="BORDERWIDTHS"><RECT /></typedef>
<typedef name="LPBORDERWIDTHS"><LPRECT /></typedef>
<typedef name="LPCBORDERWIDTHS"><LPCRECT /></typedef>
extern const IID IID_IOleInPlaceUIWindow;
typedef struct IOleInPlaceUIWindowVtbl {
HRESULT(__stdcall *QueryInterface )( IOleInPlaceUIWindow * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( IOleInPlaceUIWindow * This);
ULONG(__stdcall *Release )( IOleInPlaceUIWindow * This);
HRESULT(__stdcall *GetWindow )( IOleInPlaceUIWindow * This, HWND *phwnd);
HRESULT(__stdcall *ContextSensitiveHelp )( IOleInPlaceUIWindow * This, BOOL fEnterMode);
HRESULT(__stdcall *GetBorder )( IOleInPlaceUIWindow * This, LPRECT lprectBorder);
HRESULT(__stdcall *RequestBorderSpace )( IOleInPlaceUIWindow * This, LPCBORDERWIDTHS pborderwidths);
HRESULT(__stdcall *SetBorderSpace )( IOleInPlaceUIWindow * This, LPCBORDERWIDTHS pborderwidths);
HRESULT(__stdcall *SetActiveObject )( IOleInPlaceUIWindow * This, IOleInPlaceActiveObject *pActiveObject, LPCOLESTR pszObjName);
} IOleInPlaceUIWindowVtbl;
struct IOleInPlaceUIWindow {
struct IOleInPlaceUIWindowVtbl *lpVtbl;
};
<typedef name="LPOLEINPLACEACTIVEOBJECT"><ptr><IOleInPlaceActiveObject /></ptr></typedef>
extern const IID IID_IOleInPlaceActiveObject;
typedef struct IOleInPlaceActiveObjectVtbl {
HRESULT(__stdcall *QueryInterface )( IOleInPlaceActiveObject * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( IOleInPlaceActiveObject * This);
ULONG(__stdcall *Release )( IOleInPlaceActiveObject * This);
HRESULT(__stdcall *GetWindow )( IOleInPlaceActiveObject * This, HWND *phwnd);
HRESULT(__stdcall *ContextSensitiveHelp )( IOleInPlaceActiveObject * This, BOOL fEnterMode);
HRESULT(__stdcall *TranslateAcceleratorA )( IOleInPlaceActiveObject * This, LPMSG lpmsg);
HRESULT(__stdcall *OnFrameWindowActivate )( IOleInPlaceActiveObject * This, BOOL fActivate);
HRESULT(__stdcall *OnDocWindowActivate )( IOleInPlaceActiveObject * This, BOOL fActivate);
HRESULT(__stdcall *ResizeBorder )( IOleInPlaceActiveObject * This, LPCRECT prcBorder, IOleInPlaceUIWindow *pUIWindow, BOOL fFrameWindow);
HRESULT(__stdcall *EnableModeless )( IOleInPlaceActiveObject * This, BOOL fEnable);
} IOleInPlaceActiveObjectVtbl;
struct IOleInPlaceActiveObject {
struct IOleInPlaceActiveObjectVtbl *lpVtbl;
};
HRESULT __stdcall IOleInPlaceActiveObject_RemoteTranslateAccelerator_Proxy( IOleInPlaceActiveObject * This);
void __stdcall IOleInPlaceActiveObject_RemoteTranslateAccelerator_Stub( IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
HRESULT __stdcall IOleInPlaceActiveObject_RemoteResizeBorder_Proxy( IOleInPlaceActiveObject * This, LPCRECT prcBorder, const IID * const riid, IOleInPlaceUIWindow *pUIWindow, BOOL fFrameWindow);
void __stdcall IOleInPlaceActiveObject_RemoteResizeBorder_Stub( IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
<typedef name="LPOLEINPLACEFRAME"><ptr><IOleInPlaceFrame /></ptr></typedef>
typedef struct tagOIFI {
<field name="cb"><UINT /></field>
<field name="fMDIApp"><BOOL /></field>
<field name="hwndFrame"><HWND /></field>
<field name="haccel"><HACCEL /></field>
<field name="cAccelEntries"><UINT /></field>
} OLEINPLACEFRAMEINFO;
typedef struct tagOIFI *LPOLEINPLACEFRAMEINFO;
typedef struct tagOleMenuGroupWidths {
<field name="width"><arr length=" 6 "><LONG /></arr></field>
} OLEMENUGROUPWIDTHS;
typedef struct tagOleMenuGroupWidths *LPOLEMENUGROUPWIDTHS;
<typedef name="HOLEMENU"><HGLOBAL /></typedef>
extern const IID IID_IOleInPlaceFrame;
typedef struct IOleInPlaceFrameVtbl {
HRESULT(__stdcall *QueryInterface )( IOleInPlaceFrame * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( IOleInPlaceFrame * This);
ULONG(__stdcall *Release )( IOleInPlaceFrame * This);
HRESULT(__stdcall *GetWindow )( IOleInPlaceFrame * This, HWND *phwnd);
HRESULT(__stdcall *ContextSensitiveHelp )( IOleInPlaceFrame * This, BOOL fEnterMode);
HRESULT(__stdcall *GetBorder )( IOleInPlaceFrame * This, LPRECT lprectBorder);
HRESULT(__stdcall *RequestBorderSpace )( IOleInPlaceFrame * This, LPCBORDERWIDTHS pborderwidths);
HRESULT(__stdcall *SetBorderSpace )( IOleInPlaceFrame * This, LPCBORDERWIDTHS pborderwidths);
HRESULT(__stdcall *SetActiveObject )( IOleInPlaceFrame * This, IOleInPlaceActiveObject *pActiveObject, LPCOLESTR pszObjName);
HRESULT(__stdcall *InsertMenus )( IOleInPlaceFrame * This, HMENU hmenuShared, LPOLEMENUGROUPWIDTHS lpMenuWidths);
HRESULT(__stdcall *SetMenu )( IOleInPlaceFrame * This, HMENU hmenuShared, HOLEMENU holemenu, HWND hwndActiveObject);
HRESULT(__stdcall *RemoveMenus )( IOleInPlaceFrame * This, HMENU hmenuShared);
HRESULT(__stdcall *SetStatusText )( IOleInPlaceFrame * This, LPCOLESTR pszStatusText);
HRESULT(__stdcall *EnableModeless )( IOleInPlaceFrame * This, BOOL fEnable);
HRESULT(__stdcall *TranslateAcceleratorA )( IOleInPlaceFrame * This, LPMSG lpmsg, WORD wID);
} IOleInPlaceFrameVtbl;
struct IOleInPlaceFrame {
struct IOleInPlaceFrameVtbl *lpVtbl;
};
<typedef name="LPOLEINPLACEOBJECT"><ptr><IOleInPlaceObject /></ptr></typedef>
extern const IID IID_IOleInPlaceObject;
typedef struct IOleInPlaceObjectVtbl {
HRESULT(__stdcall *QueryInterface )( IOleInPlaceObject * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( IOleInPlaceObject * This);
ULONG(__stdcall *Release )( IOleInPlaceObject * This);
HRESULT(__stdcall *GetWindow )( IOleInPlaceObject * This, HWND *phwnd);
HRESULT(__stdcall *ContextSensitiveHelp )( IOleInPlaceObject * This, BOOL fEnterMode);
HRESULT(__stdcall *InPlaceDeactivate )( IOleInPlaceObject * This);
HRESULT(__stdcall *UIDeactivate )( IOleInPlaceObject * This);
HRESULT(__stdcall *SetObjectRects )( IOleInPlaceObject * This, LPCRECT lprcPosRect, LPCRECT lprcClipRect);
HRESULT(__stdcall *ReactivateAndUndo )( IOleInPlaceObject * This);
} IOleInPlaceObjectVtbl;
struct IOleInPlaceObject {
struct IOleInPlaceObjectVtbl *lpVtbl;
};
<typedef name="LPOLEINPLACESITE"><ptr><IOleInPlaceSite /></ptr></typedef>
extern const IID IID_IOleInPlaceSite;
typedef struct IOleInPlaceSiteVtbl {
HRESULT(__stdcall *QueryInterface )( IOleInPlaceSite * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( IOleInPlaceSite * This);
ULONG(__stdcall *Release )( IOleInPlaceSite * This);
HRESULT(__stdcall *GetWindow )( IOleInPlaceSite * This, HWND *phwnd);
HRESULT(__stdcall *ContextSensitiveHelp )( IOleInPlaceSite * This, BOOL fEnterMode);
HRESULT(__stdcall *CanInPlaceActivate )( IOleInPlaceSite * This);
HRESULT(__stdcall *OnInPlaceActivate )( IOleInPlaceSite * This);
HRESULT(__stdcall *OnUIActivate )( IOleInPlaceSite * This);
HRESULT(__stdcall *GetWindowContext )( IOleInPlaceSite * This, IOleInPlaceFrame **ppFrame, IOleInPlaceUIWindow **ppDoc, LPRECT lprcPosRect, LPRECT lprcClipRect, LPOLEINPLACEFRAMEINFO lpFrameInfo);
HRESULT(__stdcall *Scroll )( IOleInPlaceSite * This, SIZE scrollExtant);
HRESULT(__stdcall *OnUIDeactivate )( IOleInPlaceSite * This, BOOL fUndoable);
HRESULT(__stdcall *OnInPlaceDeactivate )( IOleInPlaceSite * This);
HRESULT(__stdcall *DiscardUndoState )( IOleInPlaceSite * This);
HRESULT(__stdcall *DeactivateAndUndo )( IOleInPlaceSite * This);
HRESULT(__stdcall *OnPosRectChange )( IOleInPlaceSite * This, LPCRECT lprcPosRect);
} IOleInPlaceSiteVtbl;
struct IOleInPlaceSite {
struct IOleInPlaceSiteVtbl *lpVtbl;
};
extern const IID IID_IContinue;
typedef struct IContinueVtbl {
HRESULT(__stdcall *QueryInterface )( IContinue * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( IContinue * This);
ULONG(__stdcall *Release )( IContinue * This);
HRESULT(__stdcall *FContinue )( IContinue * This);
} IContinueVtbl;
struct IContinue {
struct IContinueVtbl *lpVtbl;
};
<typedef name="LPVIEWOBJECT"><ptr><IViewObject /></ptr></typedef>
extern const IID IID_IViewObject;
typedef struct IViewObjectVtbl {
HRESULT(__stdcall *QueryInterface )( IViewObject * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( IViewObject * This);
ULONG(__stdcall *Release )( IViewObject * This);
HRESULT(__stdcall *Draw )( IViewObject * This, DWORD dwDrawAspect, LONG lindex, void *pvAspect, DVTARGETDEVICE *ptd, HDC hdcTargetDev, HDC hdcDraw, LPCRECTL lprcBounds, LPCRECTL lprcWBounds, BOOL(__stdcall *pfnContinue )( ULONG_PTR dwContinue), ULONG_PTR dwContinue);
HRESULT(__stdcall *GetColorSet )( IViewObject * This, DWORD dwDrawAspect, LONG lindex, void *pvAspect, DVTARGETDEVICE *ptd, HDC hicTargetDev, LOGPALETTE **ppColorSet);
HRESULT(__stdcall *Freeze )( IViewObject * This, DWORD dwDrawAspect, LONG lindex, void *pvAspect, DWORD *pdwFreeze);
HRESULT(__stdcall *Unfreeze )( IViewObject * This, DWORD dwFreeze);
HRESULT(__stdcall *SetAdvise )( IViewObject * This, DWORD aspects, DWORD advf, IAdviseSink *pAdvSink);
HRESULT(__stdcall *GetAdvise )( IViewObject * This, DWORD *pAspects, DWORD *pAdvf, IAdviseSink **ppAdvSink);
} IViewObjectVtbl;
struct IViewObject {
struct IViewObjectVtbl *lpVtbl;
};
HRESULT __stdcall IViewObject_RemoteDraw_Proxy( IViewObject * This, DWORD dwDrawAspect, LONG lindex, ULONG_PTR pvAspect, DVTARGETDEVICE *ptd, HDC hdcTargetDev, HDC hdcDraw, LPCRECTL lprcBounds, LPCRECTL lprcWBounds, IContinue *pContinue);
void __stdcall IViewObject_RemoteDraw_Stub( IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
HRESULT __stdcall IViewObject_RemoteGetColorSet_Proxy( IViewObject * This, DWORD dwDrawAspect, LONG lindex, ULONG_PTR pvAspect, DVTARGETDEVICE *ptd, ULONG_PTR hicTargetDev, LOGPALETTE **ppColorSet);
void __stdcall IViewObject_RemoteGetColorSet_Stub( IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
HRESULT __stdcall IViewObject_RemoteFreeze_Proxy( IViewObject * This, DWORD dwDrawAspect, LONG lindex, ULONG_PTR pvAspect, DWORD *pdwFreeze);
void __stdcall IViewObject_RemoteFreeze_Stub( IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
HRESULT __stdcall IViewObject_RemoteGetAdvise_Proxy( IViewObject * This, DWORD *pAspects, DWORD *pAdvf, IAdviseSink **ppAdvSink);
void __stdcall IViewObject_RemoteGetAdvise_Stub( IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
<typedef name="LPVIEWOBJECT2"><ptr><IViewObject2 /></ptr></typedef>
extern const IID IID_IViewObject2;
typedef struct IViewObject2Vtbl {
HRESULT(__stdcall *QueryInterface )( IViewObject2 * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( IViewObject2 * This);
ULONG(__stdcall *Release )( IViewObject2 * This);
HRESULT(__stdcall *Draw )( IViewObject2 * This, DWORD dwDrawAspect, LONG lindex, void *pvAspect, DVTARGETDEVICE *ptd, HDC hdcTargetDev, HDC hdcDraw, LPCRECTL lprcBounds, LPCRECTL lprcWBounds, BOOL(__stdcall *pfnContinue )( ULONG_PTR dwContinue), ULONG_PTR dwContinue);
HRESULT(__stdcall *GetColorSet )( IViewObject2 * This, DWORD dwDrawAspect, LONG lindex, void *pvAspect, DVTARGETDEVICE *ptd, HDC hicTargetDev, LOGPALETTE **ppColorSet);
HRESULT(__stdcall *Freeze )( IViewObject2 * This, DWORD dwDrawAspect, LONG lindex, void *pvAspect, DWORD *pdwFreeze);
HRESULT(__stdcall *Unfreeze )( IViewObject2 * This, DWORD dwFreeze);
HRESULT(__stdcall *SetAdvise )( IViewObject2 * This, DWORD aspects, DWORD advf, IAdviseSink *pAdvSink);
HRESULT(__stdcall *GetAdvise )( IViewObject2 * This, DWORD *pAspects, DWORD *pAdvf, IAdviseSink **ppAdvSink);
HRESULT(__stdcall *GetExtent )( IViewObject2 * This, DWORD dwDrawAspect, LONG lindex, DVTARGETDEVICE *ptd, LPSIZEL lpsizel);
} IViewObject2Vtbl;
struct IViewObject2 {
struct IViewObject2Vtbl *lpVtbl;
};
<typedef name="LPDROPSOURCE"><ptr><IDropSource /></ptr></typedef>
extern const IID IID_IDropSource;
typedef struct IDropSourceVtbl {
HRESULT(__stdcall *QueryInterface )( IDropSource * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( IDropSource * This);
ULONG(__stdcall *Release )( IDropSource * This);
HRESULT(__stdcall *QueryContinueDrag )( IDropSource * This, BOOL fEscapePressed, DWORD grfKeyState);
HRESULT(__stdcall *GiveFeedback )( IDropSource * This, DWORD dwEffect);
} IDropSourceVtbl;
struct IDropSource {
struct IDropSourceVtbl *lpVtbl;
};
<typedef name="LPDROPTARGET"><ptr><IDropTarget /></ptr></typedef>
extern const IID IID_IDropTarget;
typedef struct IDropTargetVtbl {
HRESULT(__stdcall *QueryInterface )( IDropTarget * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( IDropTarget * This);
ULONG(__stdcall *Release )( IDropTarget * This);
HRESULT(__stdcall *DragEnter )( IDropTarget * This, IDataObject *pDataObj, DWORD grfKeyState, POINTL pt, DWORD *pdwEffect);
HRESULT(__stdcall *DragOver )( IDropTarget * This, DWORD grfKeyState, POINTL pt, DWORD *pdwEffect);
HRESULT(__stdcall *DragLeave )( IDropTarget * This);
HRESULT(__stdcall *Drop )( IDropTarget * This, IDataObject *pDataObj, DWORD grfKeyState, POINTL pt, DWORD *pdwEffect);
} IDropTargetVtbl;
struct IDropTarget {
struct IDropTargetVtbl *lpVtbl;
};
extern const IID IID_IDropSourceNotify;
typedef struct IDropSourceNotifyVtbl {
HRESULT(__stdcall *QueryInterface )( IDropSourceNotify * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( IDropSourceNotify * This);
ULONG(__stdcall *Release )( IDropSourceNotify * This);
HRESULT(__stdcall *DragEnterTarget )( IDropSourceNotify * This, HWND hwndTarget);
HRESULT(__stdcall *DragLeaveTarget )( IDropSourceNotify * This);
} IDropSourceNotifyVtbl;
struct IDropSourceNotify {
struct IDropSourceNotifyVtbl *lpVtbl;
};
<typedef name="LPENUMOLEVERB"><ptr><IEnumOLEVERB /></ptr></typedef>
typedef struct tagOLEVERB {
<field name="lVerb"><LONG /></field>
<field name="lpszVerbName"><LPOLESTR /></field>
<field name="fuFlags"><DWORD /></field>
<field name="grfAttribs"><DWORD /></field>
} OLEVERB;
typedef struct tagOLEVERB *LPOLEVERB;
typedef enum tagOLEVERBATTRIB { OLEVERBATTRIB_NEVERDIRTIES = 1, OLEVERBATTRIB_ONCONTAINERMENU = 2 } OLEVERBATTRIB;
extern const IID IID_IEnumOLEVERB;
typedef struct IEnumOLEVERBVtbl {
HRESULT(__stdcall *QueryInterface )( IEnumOLEVERB * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( IEnumOLEVERB * This);
ULONG(__stdcall *Release )( IEnumOLEVERB * This);
HRESULT(__stdcall *Next )( IEnumOLEVERB * This, ULONG celt, LPOLEVERB rgelt, ULONG *pceltFetched);
HRESULT(__stdcall *Skip )( IEnumOLEVERB * This, ULONG celt);
HRESULT(__stdcall *Reset )( IEnumOLEVERB * This);
HRESULT(__stdcall *Clone )( IEnumOLEVERB * This, IEnumOLEVERB **ppenum);
} IEnumOLEVERBVtbl;
struct IEnumOLEVERB {
struct IEnumOLEVERBVtbl *lpVtbl;
};
HRESULT __stdcall IEnumOLEVERB_RemoteNext_Proxy( IEnumOLEVERB * This, ULONG celt, LPOLEVERB rgelt, ULONG *pceltFetched);
void __stdcall IEnumOLEVERB_RemoteNext_Stub( IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
uint32 __stdcall CLIPFORMAT_UserSize( uint32 *, uint32, CLIPFORMAT * );
byte * __stdcall CLIPFORMAT_UserMarshal( uint32 *, byte *, CLIPFORMAT * );
byte * __stdcall CLIPFORMAT_UserUnmarshal( uint32 *, byte *, CLIPFORMAT * );
void __stdcall CLIPFORMAT_UserFree( uint32 *, CLIPFORMAT * );
uint32 __stdcall HACCEL_UserSize( uint32 *, uint32, HACCEL * );
byte * __stdcall HACCEL_UserMarshal( uint32 *, byte *, HACCEL * );
byte * __stdcall HACCEL_UserUnmarshal( uint32 *, byte *, HACCEL * );
void __stdcall HACCEL_UserFree( uint32 *, HACCEL * );
uint32 __stdcall HDC_UserSize( uint32 *, uint32, HDC * );
byte * __stdcall HDC_UserMarshal( uint32 *, byte *, HDC * );
byte * __stdcall HDC_UserUnmarshal( uint32 *, byte *, HDC * );
void __stdcall HDC_UserFree( uint32 *, HDC * );
uint32 __stdcall HGLOBAL_UserSize( uint32 *, uint32, HGLOBAL * );
byte * __stdcall HGLOBAL_UserMarshal( uint32 *, byte *, HGLOBAL * );
byte * __stdcall HGLOBAL_UserUnmarshal( uint32 *, byte *, HGLOBAL * );
void __stdcall HGLOBAL_UserFree( uint32 *, HGLOBAL * );
uint32 __stdcall HMENU_UserSize( uint32 *, uint32, HMENU * );
byte * __stdcall HMENU_UserMarshal( uint32 *, byte *, HMENU * );
byte * __stdcall HMENU_UserUnmarshal( uint32 *, byte *, HMENU * );
void __stdcall HMENU_UserFree( uint32 *, HMENU * );
uint32 __stdcall HWND_UserSize( uint32 *, uint32, HWND * );
byte * __stdcall HWND_UserMarshal( uint32 *, byte *, HWND * );
byte * __stdcall HWND_UserUnmarshal( uint32 *, byte *, HWND * );
void __stdcall HWND_UserFree( uint32 *, HWND * );
uint32 __stdcall STGMEDIUM_UserSize( uint32 *, uint32, STGMEDIUM * );
byte * __stdcall STGMEDIUM_UserMarshal( uint32 *, byte *, STGMEDIUM * );
byte * __stdcall STGMEDIUM_UserUnmarshal( uint32 *, byte *, STGMEDIUM * );
void __stdcall STGMEDIUM_UserFree( uint32 *, STGMEDIUM * );
uint32 __stdcall CLIPFORMAT_UserSize64( uint32 *, uint32, CLIPFORMAT * );
byte * __stdcall CLIPFORMAT_UserMarshal64( uint32 *, byte *, CLIPFORMAT * );
byte * __stdcall CLIPFORMAT_UserUnmarshal64( uint32 *, byte *, CLIPFORMAT * );
void __stdcall CLIPFORMAT_UserFree64( uint32 *, CLIPFORMAT * );
uint32 __stdcall HACCEL_UserSize64( uint32 *, uint32, HACCEL * );
byte * __stdcall HACCEL_UserMarshal64( uint32 *, byte *, HACCEL * );
byte * __stdcall HACCEL_UserUnmarshal64( uint32 *, byte *, HACCEL * );
void __stdcall HACCEL_UserFree64( uint32 *, HACCEL * );
uint32 __stdcall HDC_UserSize64( uint32 *, uint32, HDC * );
byte * __stdcall HDC_UserMarshal64( uint32 *, byte *, HDC * );
byte * __stdcall HDC_UserUnmarshal64( uint32 *, byte *, HDC * );
void __stdcall HDC_UserFree64( uint32 *, HDC * );
uint32 __stdcall HGLOBAL_UserSize64( uint32 *, uint32, HGLOBAL * );
byte * __stdcall HGLOBAL_UserMarshal64( uint32 *, byte *, HGLOBAL * );
byte * __stdcall HGLOBAL_UserUnmarshal64( uint32 *, byte *, HGLOBAL * );
void __stdcall HGLOBAL_UserFree64( uint32 *, HGLOBAL * );
uint32 __stdcall HMENU_UserSize64( uint32 *, uint32, HMENU * );
byte * __stdcall HMENU_UserMarshal64( uint32 *, byte *, HMENU * );
byte * __stdcall HMENU_UserUnmarshal64( uint32 *, byte *, HMENU * );
void __stdcall HMENU_UserFree64( uint32 *, HMENU * );
uint32 __stdcall HWND_UserSize64( uint32 *, uint32, HWND * );
byte * __stdcall HWND_UserMarshal64( uint32 *, byte *, HWND * );
byte * __stdcall HWND_UserUnmarshal64( uint32 *, byte *, HWND * );
void __stdcall HWND_UserFree64( uint32 *, HWND * );
uint32 __stdcall STGMEDIUM_UserSize64( uint32 *, uint32, STGMEDIUM * );
byte * __stdcall STGMEDIUM_UserMarshal64( uint32 *, byte *, STGMEDIUM * );
byte * __stdcall STGMEDIUM_UserUnmarshal64( uint32 *, byte *, STGMEDIUM * );
void __stdcall STGMEDIUM_UserFree64( uint32 *, STGMEDIUM * );
HRESULT __stdcall IOleCache2_UpdateCache_Proxy( IOleCache2 * This, LPDATAOBJECT pDataObject, DWORD grfUpdf, LPVOID pReserved);
HRESULT __stdcall IOleCache2_UpdateCache_Stub( IOleCache2 * This, LPDATAOBJECT pDataObject, DWORD grfUpdf, LONG_PTR pReserved);
HRESULT __stdcall IOleInPlaceActiveObject_TranslateAccelerator_Proxy( IOleInPlaceActiveObject * This, LPMSG lpmsg);
HRESULT __stdcall IOleInPlaceActiveObject_TranslateAccelerator_Stub( IOleInPlaceActiveObject * This);
HRESULT __stdcall IOleInPlaceActiveObject_ResizeBorder_Proxy( IOleInPlaceActiveObject * This, LPCRECT prcBorder, IOleInPlaceUIWindow *pUIWindow, BOOL fFrameWindow);
HRESULT __stdcall IOleInPlaceActiveObject_ResizeBorder_Stub( IOleInPlaceActiveObject * This, LPCRECT prcBorder, const IID * const riid, IOleInPlaceUIWindow *pUIWindow, BOOL fFrameWindow);
HRESULT __stdcall IViewObject_Draw_Proxy( IViewObject * This, DWORD dwDrawAspect, LONG lindex, void *pvAspect, DVTARGETDEVICE *ptd, HDC hdcTargetDev, HDC hdcDraw, LPCRECTL lprcBounds, LPCRECTL lprcWBounds, BOOL(__stdcall *pfnContinue )( ULONG_PTR dwContinue), ULONG_PTR dwContinue);
HRESULT __stdcall IViewObject_Draw_Stub( IViewObject * This, DWORD dwDrawAspect, LONG lindex, ULONG_PTR pvAspect, DVTARGETDEVICE *ptd, HDC hdcTargetDev, HDC hdcDraw, LPCRECTL lprcBounds, LPCRECTL lprcWBounds, IContinue *pContinue);
HRESULT __stdcall IViewObject_GetColorSet_Proxy( IViewObject * This, DWORD dwDrawAspect, LONG lindex, void *pvAspect, DVTARGETDEVICE *ptd, HDC hicTargetDev, LOGPALETTE **ppColorSet);
HRESULT __stdcall IViewObject_GetColorSet_Stub( IViewObject * This, DWORD dwDrawAspect, LONG lindex, ULONG_PTR pvAspect, DVTARGETDEVICE *ptd, ULONG_PTR hicTargetDev, LOGPALETTE **ppColorSet);
HRESULT __stdcall IViewObject_Freeze_Proxy( IViewObject * This, DWORD dwDrawAspect, LONG lindex, void *pvAspect, DWORD *pdwFreeze);
HRESULT __stdcall IViewObject_Freeze_Stub( IViewObject * This, DWORD dwDrawAspect, LONG lindex, ULONG_PTR pvAspect, DWORD *pdwFreeze);
HRESULT __stdcall IViewObject_GetAdvise_Proxy( IViewObject * This, DWORD *pAspects, DWORD *pAdvf, IAdviseSink **ppAdvSink);
HRESULT __stdcall IViewObject_GetAdvise_Stub( IViewObject * This, DWORD *pAspects, DWORD *pAdvf, IAdviseSink **ppAdvSink);
HRESULT __stdcall IEnumOLEVERB_Next_Proxy( IEnumOLEVERB * This, ULONG celt, LPOLEVERB rgelt, ULONG *pceltFetched);
HRESULT __stdcall IEnumOLEVERB_Next_Stub( IEnumOLEVERB * This, ULONG celt, LPOLEVERB rgelt, ULONG *pceltFetched);
<typedef name="IServiceProvider"><struct name="IServiceProvider" /></typedef>
extern RPC_IF_HANDLE __MIDL_itf_servprov_0000_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_servprov_0000_0000_v0_0_s_ifspec;
<typedef name="LPSERVICEPROVIDER"><ptr><IServiceProvider /></ptr></typedef>
extern const IID IID_IServiceProvider;
typedef struct IServiceProviderVtbl {
HRESULT(__stdcall *QueryInterface )( IServiceProvider * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( IServiceProvider * This);
ULONG(__stdcall *Release )( IServiceProvider * This);
HRESULT(__stdcall *QueryService )( IServiceProvider * This, const GUID * const guidService, const IID * const riid, void **ppvObject);
} IServiceProviderVtbl;
struct IServiceProvider {
struct IServiceProviderVtbl *lpVtbl;
};
HRESULT __stdcall IServiceProvider_RemoteQueryService_Proxy( IServiceProvider * This, const GUID * const guidService, const IID * const riid, IUnknown **ppvObject);
void __stdcall IServiceProvider_RemoteQueryService_Stub( IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
extern RPC_IF_HANDLE __MIDL_itf_servprov_0000_0001_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_servprov_0000_0001_v0_0_s_ifspec;
HRESULT __stdcall IServiceProvider_QueryService_Proxy( IServiceProvider * This, const GUID * const guidService, const IID * const riid, void **ppvObject);
HRESULT __stdcall IServiceProvider_QueryService_Stub( IServiceProvider * This, const GUID * const guidService, const IID * const riid, IUnknown **ppvObject);
<typedef name="IXMLDOMImplementation"><struct name="IXMLDOMImplementation" /></typedef>
<typedef name="IXMLDOMNode"><struct name="IXMLDOMNode" /></typedef>
<typedef name="IXMLDOMDocumentFragment"><struct name="IXMLDOMDocumentFragment" /></typedef>
<typedef name="IXMLDOMDocument"><struct name="IXMLDOMDocument" /></typedef>
<typedef name="IXMLDOMNodeList"><struct name="IXMLDOMNodeList" /></typedef>
<typedef name="IXMLDOMNamedNodeMap"><struct name="IXMLDOMNamedNodeMap" /></typedef>
<typedef name="IXMLDOMCharacterData"><struct name="IXMLDOMCharacterData" /></typedef>
<typedef name="IXMLDOMAttribute"><struct name="IXMLDOMAttribute" /></typedef>
<typedef name="IXMLDOMElement"><struct name="IXMLDOMElement" /></typedef>
<typedef name="IXMLDOMText"><struct name="IXMLDOMText" /></typedef>
<typedef name="IXMLDOMComment"><struct name="IXMLDOMComment" /></typedef>
<typedef name="IXMLDOMProcessingInstruction"><struct name="IXMLDOMProcessingInstruction" /></typedef>
<typedef name="IXMLDOMCDATASection"><struct name="IXMLDOMCDATASection" /></typedef>
<typedef name="IXMLDOMDocumentType"><struct name="IXMLDOMDocumentType" /></typedef>
<typedef name="IXMLDOMNotation"><struct name="IXMLDOMNotation" /></typedef>
<typedef name="IXMLDOMEntity"><struct name="IXMLDOMEntity" /></typedef>
<typedef name="IXMLDOMEntityReference"><struct name="IXMLDOMEntityReference" /></typedef>
<typedef name="IXMLDOMParseError"><struct name="IXMLDOMParseError" /></typedef>
<typedef name="IXTLRuntime"><struct name="IXTLRuntime" /></typedef>
<typedef name="XMLDOMDocumentEvents"><struct name="XMLDOMDocumentEvents" /></typedef>
<typedef name="DOMDocument"><struct name="DOMDocument" /></typedef>
<typedef name="DOMFreeThreadedDocument"><struct name="DOMFreeThreadedDocument" /></typedef>
<typedef name="IXMLHttpRequest"><struct name="IXMLHttpRequest" /></typedef>
<typedef name="XMLHTTPRequest"><struct name="XMLHTTPRequest" /></typedef>
<typedef name="IXMLDSOControl"><struct name="IXMLDSOControl" /></typedef>
<typedef name="XMLDSOControl"><struct name="XMLDSOControl" /></typedef>
<typedef name="IXMLElementCollection"><struct name="IXMLElementCollection" /></typedef>
<typedef name="IXMLDocument"><struct name="IXMLDocument" /></typedef>
<typedef name="IXMLDocument2"><struct name="IXMLDocument2" /></typedef>
<typedef name="IXMLElement"><struct name="IXMLElement" /></typedef>
<typedef name="IXMLElement2"><struct name="IXMLElement2" /></typedef>
<typedef name="IXMLAttribute"><struct name="IXMLAttribute" /></typedef>
<typedef name="IXMLError"><struct name="IXMLError" /></typedef>
<typedef name="XMLDocument"><struct name="XMLDocument" /></typedef>
<typedef name="ICreateTypeInfo"><struct name="ICreateTypeInfo" /></typedef>
<typedef name="ICreateTypeInfo2"><struct name="ICreateTypeInfo2" /></typedef>
<typedef name="ICreateTypeLib"><struct name="ICreateTypeLib" /></typedef>
<typedef name="ICreateTypeLib2"><struct name="ICreateTypeLib2" /></typedef>
<typedef name="IDispatch"><struct name="IDispatch" /></typedef>
<typedef name="IEnumVARIANT"><struct name="IEnumVARIANT" /></typedef>
<typedef name="ITypeComp"><struct name="ITypeComp" /></typedef>
<typedef name="ITypeInfo"><struct name="ITypeInfo" /></typedef>
<typedef name="ITypeInfo2"><struct name="ITypeInfo2" /></typedef>
<typedef name="ITypeLib"><struct name="ITypeLib" /></typedef>
<typedef name="ITypeLib2"><struct name="ITypeLib2" /></typedef>
<typedef name="ITypeChangeEvents"><struct name="ITypeChangeEvents" /></typedef>
<typedef name="IErrorInfo"><struct name="IErrorInfo" /></typedef>
<typedef name="ICreateErrorInfo"><struct name="ICreateErrorInfo" /></typedef>
<typedef name="ISupportErrorInfo"><struct name="ISupportErrorInfo" /></typedef>
<typedef name="ITypeFactory"><struct name="ITypeFactory" /></typedef>
<typedef name="ITypeMarshal"><struct name="ITypeMarshal" /></typedef>
<typedef name="IRecordInfo"><struct name="IRecordInfo" /></typedef>
<typedef name="IErrorLog"><struct name="IErrorLog" /></typedef>
<typedef name="IPropertyBag"><struct name="IPropertyBag" /></typedef>
extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0000_v0_0_s_ifspec;
<typedef name="CURRENCY"><CY /></typedef>
typedef struct tagSAFEARRAYBOUND {
<field name="cElements"><ULONG /></field>
<field name="lLbound"><LONG /></field>
} SAFEARRAYBOUND;
typedef struct tagSAFEARRAYBOUND *LPSAFEARRAYBOUND;
typedef struct _wireVARIANT *wireVARIANT;
typedef struct _wireBRECORD *wireBRECORD;
typedef struct _wireSAFEARR_BSTR {
<field name="Size"><ULONG /></field>
<field name="aBstr"><ptr><wireBSTR /></ptr></field>
} SAFEARR_BSTR;
typedef struct _wireSAFEARR_UNKNOWN {
<field name="Size"><ULONG /></field>
IUnknown **apUnknown;
} SAFEARR_UNKNOWN;
typedef struct _wireSAFEARR_DISPATCH {
<field name="Size"><ULONG /></field>
IDispatch **apDispatch;
} SAFEARR_DISPATCH;
typedef struct _wireSAFEARR_VARIANT {
<field name="Size"><ULONG /></field>
<field name="aVariant"><ptr><wireVARIANT /></ptr></field>
} SAFEARR_VARIANT;
typedef struct _wireSAFEARR_BRECORD {
<field name="Size"><ULONG /></field>
<field name="aRecord"><ptr><wireBRECORD /></ptr></field>
} SAFEARR_BRECORD;
typedef struct _wireSAFEARR_HAVEIID {
<field name="Size"><ULONG /></field>
IUnknown **apUnknown;
<field name="iid"><IID /></field>
} SAFEARR_HAVEIID;
typedef enum tagSF_TYPE { SF_ERROR = VT_ERROR, SF_I1 = VT_I1, SF_I2 = VT_I2, SF_I4 = VT_I4, SF_I8 = VT_I8, SF_BSTR = VT_BSTR, SF_UNKNOWN = VT_UNKNOWN, SF_DISPATCH = VT_DISPATCH, SF_VARIANT = VT_VARIANT, SF_RECORD = VT_RECORD, SF_HAVEIID =(VT_UNKNOWN | VT_RESERVED ) } SF_TYPE;
typedef struct _wireSAFEARRAY_UNION {
<field name="sfType"><ULONG /></field>
union __MIDL_IOleAutomationTypes_0001 {
<field name="BstrStr"><SAFEARR_BSTR /></field>
<field name="UnknownStr"><SAFEARR_UNKNOWN /></field>
<field name="DispatchStr"><SAFEARR_DISPATCH /></field>
<field name="VariantStr"><SAFEARR_VARIANT /></field>
<field name="RecordStr"><SAFEARR_BRECORD /></field>
<field name="HaveIidStr"><SAFEARR_HAVEIID /></field>
<field name="ByteStr"><BYTE_SIZEDARR /></field>
<field name="WordStr"><WORD_SIZEDARR /></field>
<field name="LongStr"><DWORD_SIZEDARR /></field>
<field name="HyperStr"><HYPER_SIZEDARR /></field>
} u;
} SAFEARRAYUNION;
typedef struct _wireSAFEARRAY {
<field name="cDims"><USHORT /></field>
<field name="fFeatures"><USHORT /></field>
<field name="cbElements"><ULONG /></field>
<field name="cLocks"><ULONG /></field>
<field name="uArrayStructs"><SAFEARRAYUNION /></field>
<field name="rgsabound"><arr length=" 1 "><SAFEARRAYBOUND /></arr></field>
} *wireSAFEARRAY;
<typedef name="wirePSAFEARRAY"><ptr><wireSAFEARRAY /></ptr></typedef>
typedef struct tagSAFEARRAY {
<field name="cDims"><USHORT /></field>
<field name="fFeatures"><USHORT /></field>
<field name="cbElements"><ULONG /></field>
<field name="cLocks"><ULONG /></field>
<field name="pvData"><PVOID /></field>
<field name="rgsabound"><arr length=" 1 "><SAFEARRAYBOUND /></arr></field>
} SAFEARRAY;
<typedef name="LPSAFEARRAY"><ptr><SAFEARRAY /></ptr></typedef>
<typedef name="VARIANT"><struct name="tagVARIANT" /></typedef>
struct tagVARIANT {
union {
struct {
<field name="vt"><VARTYPE /></field>
<field name="wReserved1"><WORD /></field>
<field name="wReserved2"><WORD /></field>
<field name="wReserved3"><WORD /></field>
union {
<field name="llVal"><LONGLONG /></field>
<field name="lVal"><LONG /></field>
<field name="bVal"><BYTE /></field>
<field name="iVal"><SHORT /></field>
<field name="fltVal"><FLOAT /></field>
<field name="dblVal"><DOUBLE /></field>
<field name="boolVal"><VARIANT_BOOL /></field>
<field name="scode"><SCODE /></field>
<field name="cyVal"><CY /></field>
<field name="date"><DATE /></field>
<field name="bstrVal"><BSTR /></field>
<field name="punkVal"><ptr><IUnknown /></ptr></field>
<field name="pdispVal"><ptr><IDispatch /></ptr></field>
<field name="parray"><ptr><SAFEARRAY /></ptr></field>
<field name="pbVal"><ptr><BYTE /></ptr></field>
<field name="piVal"><ptr><SHORT /></ptr></field>
<field name="plVal"><ptr><LONG /></ptr></field>
<field name="pllVal"><ptr><LONGLONG /></ptr></field>
<field name="pfltVal"><ptr><FLOAT /></ptr></field>
<field name="pdblVal"><ptr><DOUBLE /></ptr></field>
<field name="pboolVal"><ptr><VARIANT_BOOL /></ptr></field>
<field name="pscode"><ptr><SCODE /></ptr></field>
<field name="pcyVal"><ptr><CY /></ptr></field>
<field name="pdate"><ptr><DATE /></ptr></field>
<field name="pbstrVal"><ptr><BSTR /></ptr></field>
IUnknown **ppunkVal;
IDispatch **ppdispVal;
SAFEARRAY **pparray;
<field name="pvarVal"><ptr><VARIANT /></ptr></field>
<field name="byref"><PVOID /></field>
<field name="cVal"><CHAR /></field>
<field name="uiVal"><USHORT /></field>
<field name="ulVal"><ULONG /></field>
<field name="ullVal"><ULONGLONG /></field>
<field name="intVal"><INT /></field>
<field name="uintVal"><UINT /></field>
<field name="pdecVal"><ptr><DECIMAL /></ptr></field>
<field name="pcVal"><ptr><CHAR /></ptr></field>
<field name="puiVal"><ptr><USHORT /></ptr></field>
<field name="pulVal"><ptr><ULONG /></ptr></field>
<field name="pullVal"><ptr><ULONGLONG /></ptr></field>
<field name="pintVal"><ptr><INT /></ptr></field>
<field name="puintVal"><ptr><UINT /></ptr></field>
struct {
<field name="pvRecord"><PVOID /></field>
<field name="pRecInfo"><ptr><IRecordInfo /></ptr></field>
} ;
} ;
} ;
<field name="decVal"><DECIMAL /></field>
} ;
} ;
<typedef name="LPVARIANT"><ptr><VARIANT /></ptr></typedef>
<typedef name="VARIANTARG"><VARIANT /></typedef>
<typedef name="LPVARIANTARG"><ptr><VARIANT /></ptr></typedef>
struct _wireBRECORD {
<field name="fFlags"><ULONG /></field>
<field name="clSize"><ULONG /></field>
<field name="pRecInfo"><ptr><IRecordInfo /></ptr></field>
<field name="pRecord"><ptr><byte /></ptr></field>
} ;
struct _wireVARIANT {
<field name="clSize"><DWORD /></field>
<field name="rpcReserved"><DWORD /></field>
<field name="vt"><USHORT /></field>
<field name="wReserved1"><USHORT /></field>
<field name="wReserved2"><USHORT /></field>
<field name="wReserved3"><USHORT /></field>
union {
<field name="llVal"><LONGLONG /></field>
<field name="lVal"><LONG /></field>
<field name="bVal"><BYTE /></field>
<field name="iVal"><SHORT /></field>
<field name="fltVal"><FLOAT /></field>
<field name="dblVal"><DOUBLE /></field>
<field name="boolVal"><VARIANT_BOOL /></field>
<field name="scode"><SCODE /></field>
<field name="cyVal"><CY /></field>
<field name="date"><DATE /></field>
<field name="bstrVal"><wireBSTR /></field>
<field name="punkVal"><ptr><IUnknown /></ptr></field>
<field name="pdispVal"><ptr><IDispatch /></ptr></field>
<field name="parray"><wirePSAFEARRAY /></field>
<field name="brecVal"><wireBRECORD /></field>
<field name="pbVal"><ptr><BYTE /></ptr></field>
<field name="piVal"><ptr><SHORT /></ptr></field>
<field name="plVal"><ptr><LONG /></ptr></field>
<field name="pllVal"><ptr><LONGLONG /></ptr></field>
<field name="pfltVal"><ptr><FLOAT /></ptr></field>
<field name="pdblVal"><ptr><DOUBLE /></ptr></field>
<field name="pboolVal"><ptr><VARIANT_BOOL /></ptr></field>
<field name="pscode"><ptr><SCODE /></ptr></field>
<field name="pcyVal"><ptr><CY /></ptr></field>
<field name="pdate"><ptr><DATE /></ptr></field>
<field name="pbstrVal"><ptr><wireBSTR /></ptr></field>
IUnknown **ppunkVal;
IDispatch **ppdispVal;
<field name="pparray"><ptr><wirePSAFEARRAY /></ptr></field>
<field name="pvarVal"><ptr><wireVARIANT /></ptr></field>
<field name="cVal"><CHAR /></field>
<field name="uiVal"><USHORT /></field>
<field name="ulVal"><ULONG /></field>
<field name="ullVal"><ULONGLONG /></field>
<field name="intVal"><INT /></field>
<field name="uintVal"><UINT /></field>
<field name="decVal"><DECIMAL /></field>
<field name="pdecVal"><ptr><DECIMAL /></ptr></field>
<field name="pcVal"><ptr><CHAR /></ptr></field>
<field name="puiVal"><ptr><USHORT /></ptr></field>
<field name="pulVal"><ptr><ULONG /></ptr></field>
<field name="pullVal"><ptr><ULONGLONG /></ptr></field>
<field name="pintVal"><ptr><INT /></ptr></field>
<field name="puintVal"><ptr><UINT /></ptr></field>
} ;
} ;
<typedef name="DISPID"><LONG /></typedef>
<typedef name="MEMBERID"><DISPID /></typedef>
<typedef name="HREFTYPE"><DWORD /></typedef>
typedef enum tagTYPEKIND { TKIND_ENUM = 0, TKIND_RECORD =(TKIND_ENUM + 1 ), TKIND_MODULE =(TKIND_RECORD + 1 ), TKIND_INTERFACE =(TKIND_MODULE + 1 ), TKIND_DISPATCH =(TKIND_INTERFACE + 1 ), TKIND_COCLASS =(TKIND_DISPATCH + 1 ), TKIND_ALIAS =(TKIND_COCLASS + 1 ), TKIND_UNION =(TKIND_ALIAS + 1 ), TKIND_MAX =(TKIND_UNION + 1 ) } TYPEKIND;
typedef struct tagTYPEDESC {
union {
struct tagTYPEDESC *lptdesc;
struct tagARRAYDESC *lpadesc;
<field name="hreftype"><HREFTYPE /></field>
} ;
<field name="vt"><VARTYPE /></field>
} TYPEDESC;
typedef struct tagARRAYDESC {
<field name="tdescElem"><TYPEDESC /></field>
<field name="cDims"><USHORT /></field>
<field name="rgbounds"><arr length=" 1 "><SAFEARRAYBOUND /></arr></field>
} ARRAYDESC;
typedef struct tagPARAMDESCEX {
<field name="cBytes"><ULONG /></field>
<field name="varDefaultValue"><VARIANTARG /></field>
} PARAMDESCEX;
typedef struct tagPARAMDESCEX *LPPARAMDESCEX;
typedef struct tagPARAMDESC {
<field name="pparamdescex"><LPPARAMDESCEX /></field>
<field name="wParamFlags"><USHORT /></field>
} PARAMDESC;
typedef struct tagPARAMDESC *LPPARAMDESC;
typedef struct tagIDLDESC {
<field name="dwReserved"><ULONG_PTR /></field>
<field name="wIDLFlags"><USHORT /></field>
} IDLDESC;
typedef struct tagIDLDESC *LPIDLDESC;
typedef struct tagELEMDESC {
<field name="tdesc"><TYPEDESC /></field>
union {
<field name="idldesc"><IDLDESC /></field>
<field name="paramdesc"><PARAMDESC /></field>
} ;
} ELEMDESC, * LPELEMDESC;
typedef struct tagTYPEATTR {
<field name="guid"><GUID /></field>
<field name="lcid"><LCID /></field>
<field name="dwReserved"><DWORD /></field>
<field name="memidConstructor"><MEMBERID /></field>
<field name="memidDestructor"><MEMBERID /></field>
<field name="lpstrSchema"><LPOLESTR /></field>
<field name="cbSizeInstance"><ULONG /></field>
<field name="typekind"><TYPEKIND /></field>
<field name="cFuncs"><WORD /></field>
<field name="cVars"><WORD /></field>
<field name="cImplTypes"><WORD /></field>
<field name="cbSizeVft"><WORD /></field>
<field name="cbAlignment"><WORD /></field>
<field name="wTypeFlags"><WORD /></field>
<field name="wMajorVerNum"><WORD /></field>
<field name="wMinorVerNum"><WORD /></field>
<field name="tdescAlias"><TYPEDESC /></field>
<field name="idldescType"><IDLDESC /></field>
} TYPEATTR;
typedef struct tagTYPEATTR *LPTYPEATTR;
typedef struct tagDISPPARAMS {
<field name="rgvarg"><ptr><VARIANTARG /></ptr></field>
<field name="rgdispidNamedArgs"><ptr><DISPID /></ptr></field>
<field name="cArgs"><UINT /></field>
<field name="cNamedArgs"><UINT /></field>
} DISPPARAMS;
typedef struct tagEXCEPINFO {
<field name="wCode"><WORD /></field>
<field name="wReserved"><WORD /></field>
<field name="bstrSource"><BSTR /></field>
<field name="bstrDescription"><BSTR /></field>
<field name="bstrHelpFile"><BSTR /></field>
<field name="dwHelpContext"><DWORD /></field>
<field name="pvReserved"><PVOID /></field>
HRESULT (__stdcall *pfnDeferredFillIn)(struct tagEXCEPINFO *);
<field name="scode"><SCODE /></field>
} EXCEPINFO, * LPEXCEPINFO;
typedef enum tagCALLCONV { CC_FASTCALL = 0, CC_CDECL = 1, CC_MSCPASCAL =(CC_CDECL + 1 ), CC_PASCAL = CC_MSCPASCAL, CC_MACPASCAL =(CC_PASCAL + 1 ), CC_STDCALL =(CC_MACPASCAL + 1 ), CC_FPFASTCALL =(CC_STDCALL + 1 ), CC_SYSCALL =(CC_FPFASTCALL + 1 ), CC_MPWCDECL =(CC_SYSCALL + 1 ), CC_MPWPASCAL =(CC_MPWCDECL + 1 ), CC_MAX =(CC_MPWPASCAL + 1 ) } CALLCONV;
typedef enum tagFUNCKIND { FUNC_VIRTUAL = 0, FUNC_PUREVIRTUAL =(FUNC_VIRTUAL + 1 ), FUNC_NONVIRTUAL =(FUNC_PUREVIRTUAL + 1 ), FUNC_STATIC =(FUNC_NONVIRTUAL + 1 ), FUNC_DISPATCH =(FUNC_STATIC + 1 ) } FUNCKIND;
typedef enum tagINVOKEKIND { INVOKE_FUNC = 1, INVOKE_PROPERTYGET = 2, INVOKE_PROPERTYPUT = 4, INVOKE_PROPERTYPUTREF = 8 } INVOKEKIND;
typedef struct tagFUNCDESC {
<field name="memid"><MEMBERID /></field>
<field name="lprgscode"><ptr><SCODE /></ptr></field>
<field name="lprgelemdescParam"><ptr><ELEMDESC /></ptr></field>
<field name="funckind"><FUNCKIND /></field>
<field name="invkind"><INVOKEKIND /></field>
<field name="callconv"><CALLCONV /></field>
<field name="cParams"><SHORT /></field>
<field name="cParamsOpt"><SHORT /></field>
<field name="oVft"><SHORT /></field>
<field name="cScodes"><SHORT /></field>
<field name="elemdescFunc"><ELEMDESC /></field>
<field name="wFuncFlags"><WORD /></field>
} FUNCDESC;
typedef struct tagFUNCDESC *LPFUNCDESC;
typedef enum tagVARKIND { VAR_PERINSTANCE = 0, VAR_STATIC =(VAR_PERINSTANCE + 1 ), VAR_CONST =(VAR_STATIC + 1 ), VAR_DISPATCH =(VAR_CONST + 1 ) } VARKIND;
typedef struct tagVARDESC {
<field name="memid"><MEMBERID /></field>
<field name="lpstrSchema"><LPOLESTR /></field>
union {
<field name="oInst"><ULONG /></field>
<field name="lpvarValue"><ptr><VARIANT /></ptr></field>
} ;
<field name="elemdescVar"><ELEMDESC /></field>
<field name="wVarFlags"><WORD /></field>
<field name="varkind"><VARKIND /></field>
} VARDESC;
typedef struct tagVARDESC *LPVARDESC;
typedef enum tagTYPEFLAGS { TYPEFLAG_FAPPOBJECT = 0x1, TYPEFLAG_FCANCREATE = 0x2, TYPEFLAG_FLICENSED = 0x4, TYPEFLAG_FPREDECLID = 0x8, TYPEFLAG_FHIDDEN = 0x10, TYPEFLAG_FCONTROL = 0x20, TYPEFLAG_FDUAL = 0x40, TYPEFLAG_FNONEXTENSIBLE = 0x80, TYPEFLAG_FOLEAUTOMATION = 0x100, TYPEFLAG_FRESTRICTED = 0x200, TYPEFLAG_FAGGREGATABLE = 0x400, TYPEFLAG_FREPLACEABLE = 0x800, TYPEFLAG_FDISPATCHABLE = 0x1000, TYPEFLAG_FREVERSEBIND = 0x2000, TYPEFLAG_FPROXY = 0x4000 } TYPEFLAGS;
typedef enum tagFUNCFLAGS { FUNCFLAG_FRESTRICTED = 0x1, FUNCFLAG_FSOURCE = 0x2, FUNCFLAG_FBINDABLE = 0x4, FUNCFLAG_FREQUESTEDIT = 0x8, FUNCFLAG_FDISPLAYBIND = 0x10, FUNCFLAG_FDEFAULTBIND = 0x20, FUNCFLAG_FHIDDEN = 0x40, FUNCFLAG_FUSESGETLASTERROR = 0x80, FUNCFLAG_FDEFAULTCOLLELEM = 0x100, FUNCFLAG_FUIDEFAULT = 0x200, FUNCFLAG_FNONBROWSABLE = 0x400, FUNCFLAG_FREPLACEABLE = 0x800, FUNCFLAG_FIMMEDIATEBIND = 0x1000 } FUNCFLAGS;
typedef enum tagVARFLAGS { VARFLAG_FREADONLY = 0x1, VARFLAG_FSOURCE = 0x2, VARFLAG_FBINDABLE = 0x4, VARFLAG_FREQUESTEDIT = 0x8, VARFLAG_FDISPLAYBIND = 0x10, VARFLAG_FDEFAULTBIND = 0x20, VARFLAG_FHIDDEN = 0x40, VARFLAG_FRESTRICTED = 0x80, VARFLAG_FDEFAULTCOLLELEM = 0x100, VARFLAG_FUIDEFAULT = 0x200, VARFLAG_FNONBROWSABLE = 0x400, VARFLAG_FREPLACEABLE = 0x800, VARFLAG_FIMMEDIATEBIND = 0x1000 } VARFLAGS;
typedef struct tagCLEANLOCALSTORAGE {
<field name="pInterface"><ptr><IUnknown /></ptr></field>
<field name="pStorage"><PVOID /></field>
<field name="flags"><DWORD /></field>
} CLEANLOCALSTORAGE;
typedef struct tagCUSTDATAITEM {
<field name="guid"><GUID /></field>
<field name="varValue"><VARIANTARG /></field>
} CUSTDATAITEM;
typedef struct tagCUSTDATAITEM *LPCUSTDATAITEM;
typedef struct tagCUSTDATA {
<field name="cCustData"><DWORD /></field>
<field name="prgCustData"><LPCUSTDATAITEM /></field>
} CUSTDATA;
typedef struct tagCUSTDATA *LPCUSTDATA;
extern RPC_IF_HANDLE IOleAutomationTypes_v1_0_c_ifspec;
extern RPC_IF_HANDLE IOleAutomationTypes_v1_0_s_ifspec;
<typedef name="LPCREATETYPEINFO"><ptr><ICreateTypeInfo /></ptr></typedef>
extern const IID IID_ICreateTypeInfo;
typedef struct ICreateTypeInfoVtbl {
HRESULT(__stdcall *QueryInterface )( ICreateTypeInfo * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( ICreateTypeInfo * This);
ULONG(__stdcall *Release )( ICreateTypeInfo * This);
HRESULT(__stdcall *SetGuid )( ICreateTypeInfo * This, const GUID * const guid);
HRESULT(__stdcall *SetTypeFlags )( ICreateTypeInfo * This, UINT uTypeFlags);
HRESULT(__stdcall *SetDocString )( ICreateTypeInfo * This, LPOLESTR pStrDoc);
HRESULT(__stdcall *SetHelpContext )( ICreateTypeInfo * This, DWORD dwHelpContext);
HRESULT(__stdcall *SetVersion )( ICreateTypeInfo * This, WORD wMajorVerNum, WORD wMinorVerNum);
HRESULT(__stdcall *AddRefTypeInfo )( ICreateTypeInfo * This, ITypeInfo *pTInfo, HREFTYPE *phRefType);
HRESULT(__stdcall *AddFuncDesc )( ICreateTypeInfo * This, UINT index, FUNCDESC *pFuncDesc);
HRESULT(__stdcall *AddImplType )( ICreateTypeInfo * This, UINT index, HREFTYPE hRefType);
HRESULT(__stdcall *SetImplTypeFlags )( ICreateTypeInfo * This, UINT index, INT implTypeFlags);
HRESULT(__stdcall *SetAlignment )( ICreateTypeInfo * This, WORD cbAlignment);
HRESULT(__stdcall *SetSchema )( ICreateTypeInfo * This, LPOLESTR pStrSchema);
HRESULT(__stdcall *AddVarDesc )( ICreateTypeInfo * This, UINT index, VARDESC *pVarDesc);
HRESULT(__stdcall *SetFuncAndParamNames )( ICreateTypeInfo * This, UINT index, LPOLESTR *rgszNames, UINT cNames);
HRESULT(__stdcall *SetVarName )( ICreateTypeInfo * This, UINT index, LPOLESTR szName);
HRESULT(__stdcall *SetTypeDescAlias )( ICreateTypeInfo * This, TYPEDESC *pTDescAlias);
HRESULT(__stdcall *DefineFuncAsDllEntry )( ICreateTypeInfo * This, UINT index, LPOLESTR szDllName, LPOLESTR szProcName);
HRESULT(__stdcall *SetFuncDocString )( ICreateTypeInfo * This, UINT index, LPOLESTR szDocString);
HRESULT(__stdcall *SetVarDocString )( ICreateTypeInfo * This, UINT index, LPOLESTR szDocString);
HRESULT(__stdcall *SetFuncHelpContext )( ICreateTypeInfo * This, UINT index, DWORD dwHelpContext);
HRESULT(__stdcall *SetVarHelpContext )( ICreateTypeInfo * This, UINT index, DWORD dwHelpContext);
HRESULT(__stdcall *SetMops )( ICreateTypeInfo * This, UINT index, BSTR bstrMops);
HRESULT(__stdcall *SetTypeIdldesc )( ICreateTypeInfo * This, IDLDESC *pIdlDesc);
HRESULT(__stdcall *LayOut )( ICreateTypeInfo * This);
} ICreateTypeInfoVtbl;
struct ICreateTypeInfo {
struct ICreateTypeInfoVtbl *lpVtbl;
};
<typedef name="LPCREATETYPEINFO2"><ptr><ICreateTypeInfo2 /></ptr></typedef>
extern const IID IID_ICreateTypeInfo2;
typedef struct ICreateTypeInfo2Vtbl {
HRESULT(__stdcall *QueryInterface )( ICreateTypeInfo2 * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( ICreateTypeInfo2 * This);
ULONG(__stdcall *Release )( ICreateTypeInfo2 * This);
HRESULT(__stdcall *SetGuid )( ICreateTypeInfo2 * This, const GUID * const guid);
HRESULT(__stdcall *SetTypeFlags )( ICreateTypeInfo2 * This, UINT uTypeFlags);
HRESULT(__stdcall *SetDocString )( ICreateTypeInfo2 * This, LPOLESTR pStrDoc);
HRESULT(__stdcall *SetHelpContext )( ICreateTypeInfo2 * This, DWORD dwHelpContext);
HRESULT(__stdcall *SetVersion )( ICreateTypeInfo2 * This, WORD wMajorVerNum, WORD wMinorVerNum);
HRESULT(__stdcall *AddRefTypeInfo )( ICreateTypeInfo2 * This, ITypeInfo *pTInfo, HREFTYPE *phRefType);
HRESULT(__stdcall *AddFuncDesc )( ICreateTypeInfo2 * This, UINT index, FUNCDESC *pFuncDesc);
HRESULT(__stdcall *AddImplType )( ICreateTypeInfo2 * This, UINT index, HREFTYPE hRefType);
HRESULT(__stdcall *SetImplTypeFlags )( ICreateTypeInfo2 * This, UINT index, INT implTypeFlags);
HRESULT(__stdcall *SetAlignment )( ICreateTypeInfo2 * This, WORD cbAlignment);
HRESULT(__stdcall *SetSchema )( ICreateTypeInfo2 * This, LPOLESTR pStrSchema);
HRESULT(__stdcall *AddVarDesc )( ICreateTypeInfo2 * This, UINT index, VARDESC *pVarDesc);
HRESULT(__stdcall *SetFuncAndParamNames )( ICreateTypeInfo2 * This, UINT index, LPOLESTR *rgszNames, UINT cNames);
HRESULT(__stdcall *SetVarName )( ICreateTypeInfo2 * This, UINT index, LPOLESTR szName);
HRESULT(__stdcall *SetTypeDescAlias )( ICreateTypeInfo2 * This, TYPEDESC *pTDescAlias);
HRESULT(__stdcall *DefineFuncAsDllEntry )( ICreateTypeInfo2 * This, UINT index, LPOLESTR szDllName, LPOLESTR szProcName);
HRESULT(__stdcall *SetFuncDocString )( ICreateTypeInfo2 * This, UINT index, LPOLESTR szDocString);
HRESULT(__stdcall *SetVarDocString )( ICreateTypeInfo2 * This, UINT index, LPOLESTR szDocString);
HRESULT(__stdcall *SetFuncHelpContext )( ICreateTypeInfo2 * This, UINT index, DWORD dwHelpContext);
HRESULT(__stdcall *SetVarHelpContext )( ICreateTypeInfo2 * This, UINT index, DWORD dwHelpContext);
HRESULT(__stdcall *SetMops )( ICreateTypeInfo2 * This, UINT index, BSTR bstrMops);
HRESULT(__stdcall *SetTypeIdldesc )( ICreateTypeInfo2 * This, IDLDESC *pIdlDesc);
HRESULT(__stdcall *LayOut )( ICreateTypeInfo2 * This);
HRESULT(__stdcall *DeleteFuncDesc )( ICreateTypeInfo2 * This, UINT index);
HRESULT(__stdcall *DeleteFuncDescByMemId )( ICreateTypeInfo2 * This, MEMBERID memid, INVOKEKIND invKind);
HRESULT(__stdcall *DeleteVarDesc )( ICreateTypeInfo2 * This, UINT index);
HRESULT(__stdcall *DeleteVarDescByMemId )( ICreateTypeInfo2 * This, MEMBERID memid);
HRESULT(__stdcall *DeleteImplType )( ICreateTypeInfo2 * This, UINT index);
HRESULT(__stdcall *SetCustData )( ICreateTypeInfo2 * This, const GUID * const guid, VARIANT *pVarVal);
HRESULT(__stdcall *SetFuncCustData )( ICreateTypeInfo2 * This, UINT index, const GUID * const guid, VARIANT *pVarVal);
HRESULT(__stdcall *SetParamCustData )( ICreateTypeInfo2 * This, UINT indexFunc, UINT indexParam, const GUID * const guid, VARIANT *pVarVal);
HRESULT(__stdcall *SetVarCustData )( ICreateTypeInfo2 * This, UINT index, const GUID * const guid, VARIANT *pVarVal);
HRESULT(__stdcall *SetImplTypeCustData )( ICreateTypeInfo2 * This, UINT index, const GUID * const guid, VARIANT *pVarVal);
HRESULT(__stdcall *SetHelpStringContext )( ICreateTypeInfo2 * This, ULONG dwHelpStringContext);
HRESULT(__stdcall *SetFuncHelpStringContext )( ICreateTypeInfo2 * This, UINT index, ULONG dwHelpStringContext);
HRESULT(__stdcall *SetVarHelpStringContext )( ICreateTypeInfo2 * This, UINT index, ULONG dwHelpStringContext);
HRESULT(__stdcall *Invalidate )( ICreateTypeInfo2 * This);
HRESULT(__stdcall *SetName )( ICreateTypeInfo2 * This, LPOLESTR szName);
} ICreateTypeInfo2Vtbl;
struct ICreateTypeInfo2 {
struct ICreateTypeInfo2Vtbl *lpVtbl;
};
<typedef name="LPCREATETYPELIB"><ptr><ICreateTypeLib /></ptr></typedef>
extern const IID IID_ICreateTypeLib;
typedef struct ICreateTypeLibVtbl {
HRESULT(__stdcall *QueryInterface )( ICreateTypeLib * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( ICreateTypeLib * This);
ULONG(__stdcall *Release )( ICreateTypeLib * This);
HRESULT(__stdcall *CreateTypeInfo )( ICreateTypeLib * This, LPOLESTR szName, TYPEKIND tkind, ICreateTypeInfo **ppCTInfo);
HRESULT(__stdcall *SetName )( ICreateTypeLib * This, LPOLESTR szName);
HRESULT(__stdcall *SetVersion )( ICreateTypeLib * This, WORD wMajorVerNum, WORD wMinorVerNum);
HRESULT(__stdcall *SetGuid )( ICreateTypeLib * This, const GUID * const guid);
HRESULT(__stdcall *SetDocString )( ICreateTypeLib * This, LPOLESTR szDoc);
HRESULT(__stdcall *SetHelpFileName )( ICreateTypeLib * This, LPOLESTR szHelpFileName);
HRESULT(__stdcall *SetHelpContext )( ICreateTypeLib * This, DWORD dwHelpContext);
HRESULT(__stdcall *SetLcid )( ICreateTypeLib * This, LCID lcid);
HRESULT(__stdcall *SetLibFlags )( ICreateTypeLib * This, UINT uLibFlags);
HRESULT(__stdcall *SaveAllChanges )( ICreateTypeLib * This);
} ICreateTypeLibVtbl;
struct ICreateTypeLib {
struct ICreateTypeLibVtbl *lpVtbl;
};
<typedef name="LPCREATETYPELIB2"><ptr><ICreateTypeLib2 /></ptr></typedef>
extern const IID IID_ICreateTypeLib2;
typedef struct ICreateTypeLib2Vtbl {
HRESULT(__stdcall *QueryInterface )( ICreateTypeLib2 * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( ICreateTypeLib2 * This);
ULONG(__stdcall *Release )( ICreateTypeLib2 * This);
HRESULT(__stdcall *CreateTypeInfo )( ICreateTypeLib2 * This, LPOLESTR szName, TYPEKIND tkind, ICreateTypeInfo **ppCTInfo);
HRESULT(__stdcall *SetName )( ICreateTypeLib2 * This, LPOLESTR szName);
HRESULT(__stdcall *SetVersion )( ICreateTypeLib2 * This, WORD wMajorVerNum, WORD wMinorVerNum);
HRESULT(__stdcall *SetGuid )( ICreateTypeLib2 * This, const GUID * const guid);
HRESULT(__stdcall *SetDocString )( ICreateTypeLib2 * This, LPOLESTR szDoc);
HRESULT(__stdcall *SetHelpFileName )( ICreateTypeLib2 * This, LPOLESTR szHelpFileName);
HRESULT(__stdcall *SetHelpContext )( ICreateTypeLib2 * This, DWORD dwHelpContext);
HRESULT(__stdcall *SetLcid )( ICreateTypeLib2 * This, LCID lcid);
HRESULT(__stdcall *SetLibFlags )( ICreateTypeLib2 * This, UINT uLibFlags);
HRESULT(__stdcall *SaveAllChanges )( ICreateTypeLib2 * This);
HRESULT(__stdcall *DeleteTypeInfo )( ICreateTypeLib2 * This, LPOLESTR szName);
HRESULT(__stdcall *SetCustData )( ICreateTypeLib2 * This, const GUID * const guid, VARIANT *pVarVal);
HRESULT(__stdcall *SetHelpStringContext )( ICreateTypeLib2 * This, ULONG dwHelpStringContext);
HRESULT(__stdcall *SetHelpStringDll )( ICreateTypeLib2 * This, LPOLESTR szFileName);
} ICreateTypeLib2Vtbl;
struct ICreateTypeLib2 {
struct ICreateTypeLib2Vtbl *lpVtbl;
};
<typedef name="LPDISPATCH"><ptr><IDispatch /></ptr></typedef>
extern const IID IID_IDispatch;
typedef struct IDispatchVtbl {
HRESULT(__stdcall *QueryInterface )( IDispatch * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( IDispatch * This);
ULONG(__stdcall *Release )( IDispatch * This);
HRESULT(__stdcall *GetTypeInfoCount )( IDispatch * This, UINT *pctinfo);
HRESULT(__stdcall *GetTypeInfo )( IDispatch * This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);
HRESULT(__stdcall *GetIDsOfNames )( IDispatch * This, const IID * const riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);
HRESULT(__stdcall *Invoke )( IDispatch * This, DISPID dispIdMember, const IID * const riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);
} IDispatchVtbl;
struct IDispatch {
struct IDispatchVtbl *lpVtbl;
};
HRESULT __stdcall IDispatch_RemoteInvoke_Proxy( IDispatch * This, DISPID dispIdMember, const IID * const riid, LCID lcid, DWORD dwFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *pArgErr, UINT cVarRef, UINT *rgVarRefIdx, VARIANTARG *rgVarRef);
void __stdcall IDispatch_RemoteInvoke_Stub( IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
<typedef name="LPENUMVARIANT"><ptr><IEnumVARIANT /></ptr></typedef>
extern const IID IID_IEnumVARIANT;
typedef struct IEnumVARIANTVtbl {
HRESULT(__stdcall *QueryInterface )( IEnumVARIANT * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( IEnumVARIANT * This);
ULONG(__stdcall *Release )( IEnumVARIANT * This);
HRESULT(__stdcall *Next )( IEnumVARIANT * This, ULONG celt, VARIANT *rgVar, ULONG *pCeltFetched);
HRESULT(__stdcall *Skip )( IEnumVARIANT * This, ULONG celt);
HRESULT(__stdcall *Reset )( IEnumVARIANT * This);
HRESULT(__stdcall *Clone )( IEnumVARIANT * This, IEnumVARIANT **ppEnum);
} IEnumVARIANTVtbl;
struct IEnumVARIANT {
struct IEnumVARIANTVtbl *lpVtbl;
};
HRESULT __stdcall IEnumVARIANT_RemoteNext_Proxy( IEnumVARIANT * This, ULONG celt, VARIANT *rgVar, ULONG *pCeltFetched);
void __stdcall IEnumVARIANT_RemoteNext_Stub( IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
<typedef name="LPTYPECOMP"><ptr><ITypeComp /></ptr></typedef>
typedef enum tagDESCKIND { DESCKIND_NONE = 0, DESCKIND_FUNCDESC =(DESCKIND_NONE + 1 ), DESCKIND_VARDESC =(DESCKIND_FUNCDESC + 1 ), DESCKIND_TYPECOMP =(DESCKIND_VARDESC + 1 ), DESCKIND_IMPLICITAPPOBJ =(DESCKIND_TYPECOMP + 1 ), DESCKIND_MAX =(DESCKIND_IMPLICITAPPOBJ + 1 ) } DESCKIND;
typedef union tagBINDPTR {
<field name="lpfuncdesc"><ptr><FUNCDESC /></ptr></field>
<field name="lpvardesc"><ptr><VARDESC /></ptr></field>
<field name="lptcomp"><ptr><ITypeComp /></ptr></field>
} BINDPTR;
typedef union tagBINDPTR *LPBINDPTR;
extern const IID IID_ITypeComp;
typedef struct ITypeCompVtbl {
HRESULT(__stdcall *QueryInterface )( ITypeComp * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( ITypeComp * This);
ULONG(__stdcall *Release )( ITypeComp * This);
HRESULT(__stdcall *Bind )( ITypeComp * This, LPOLESTR szName, ULONG lHashVal, WORD wFlags, ITypeInfo **ppTInfo, DESCKIND *pDescKind, BINDPTR *pBindPtr);
HRESULT(__stdcall *BindType )( ITypeComp * This, LPOLESTR szName, ULONG lHashVal, ITypeInfo **ppTInfo, ITypeComp **ppTComp);
} ITypeCompVtbl;
struct ITypeComp {
struct ITypeCompVtbl *lpVtbl;
};
HRESULT __stdcall ITypeComp_RemoteBind_Proxy( ITypeComp * This, LPOLESTR szName, ULONG lHashVal, WORD wFlags, ITypeInfo **ppTInfo, DESCKIND *pDescKind, LPFUNCDESC *ppFuncDesc, LPVARDESC *ppVarDesc, ITypeComp **ppTypeComp, CLEANLOCALSTORAGE *pDummy);
void __stdcall ITypeComp_RemoteBind_Stub( IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
HRESULT __stdcall ITypeComp_RemoteBindType_Proxy( ITypeComp * This, LPOLESTR szName, ULONG lHashVal, ITypeInfo **ppTInfo);
void __stdcall ITypeComp_RemoteBindType_Stub( IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
<typedef name="LPTYPEINFO"><ptr><ITypeInfo /></ptr></typedef>
extern const IID IID_ITypeInfo;
typedef struct ITypeInfoVtbl {
HRESULT(__stdcall *QueryInterface )( ITypeInfo * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( ITypeInfo * This);
ULONG(__stdcall *Release )( ITypeInfo * This);
HRESULT(__stdcall *GetTypeAttr )( ITypeInfo * This, TYPEATTR **ppTypeAttr);
HRESULT(__stdcall *GetTypeComp )( ITypeInfo * This, ITypeComp **ppTComp);
HRESULT(__stdcall *GetFuncDesc )( ITypeInfo * This, UINT index, FUNCDESC **ppFuncDesc);
HRESULT(__stdcall *GetVarDesc )( ITypeInfo * This, UINT index, VARDESC **ppVarDesc);
HRESULT(__stdcall *GetNames )( ITypeInfo * This, MEMBERID memid, BSTR *rgBstrNames, UINT cMaxNames, UINT *pcNames);
HRESULT(__stdcall *GetRefTypeOfImplType )( ITypeInfo * This, UINT index, HREFTYPE *pRefType);
HRESULT(__stdcall *GetImplTypeFlags )( ITypeInfo * This, UINT index, INT *pImplTypeFlags);
HRESULT(__stdcall *GetIDsOfNames )( ITypeInfo * This, LPOLESTR *rgszNames, UINT cNames, MEMBERID *pMemId);
HRESULT(__stdcall *Invoke )( ITypeInfo * This, PVOID pvInstance, MEMBERID memid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);
HRESULT(__stdcall *GetDocumentation )( ITypeInfo * This, MEMBERID memid, BSTR *pBstrName, BSTR *pBstrDocString, DWORD *pdwHelpContext, BSTR *pBstrHelpFile);
HRESULT(__stdcall *GetDllEntry )( ITypeInfo * This, MEMBERID memid, INVOKEKIND invKind, BSTR *pBstrDllName, BSTR *pBstrName, WORD *pwOrdinal);
HRESULT(__stdcall *GetRefTypeInfo )( ITypeInfo * This, HREFTYPE hRefType, ITypeInfo **ppTInfo);
HRESULT(__stdcall *AddressOfMember )( ITypeInfo * This, MEMBERID memid, INVOKEKIND invKind, PVOID *ppv);
HRESULT(__stdcall *CreateInstance )( ITypeInfo * This, IUnknown *pUnkOuter, const IID * const riid, PVOID *ppvObj);
HRESULT(__stdcall *GetMops )( ITypeInfo * This, MEMBERID memid, BSTR *pBstrMops);
HRESULT(__stdcall *GetContainingTypeLib )( ITypeInfo * This, ITypeLib **ppTLib, UINT *pIndex);
void(__stdcall *ReleaseTypeAttr )( ITypeInfo * This, TYPEATTR *pTypeAttr);
void(__stdcall *ReleaseFuncDesc )( ITypeInfo * This, FUNCDESC *pFuncDesc);
void(__stdcall *ReleaseVarDesc )( ITypeInfo * This, VARDESC *pVarDesc);
} ITypeInfoVtbl;
struct ITypeInfo {
struct ITypeInfoVtbl *lpVtbl;
};
HRESULT __stdcall ITypeInfo_RemoteGetTypeAttr_Proxy( ITypeInfo * This, LPTYPEATTR *ppTypeAttr, CLEANLOCALSTORAGE *pDummy);
void __stdcall ITypeInfo_RemoteGetTypeAttr_Stub( IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
HRESULT __stdcall ITypeInfo_RemoteGetFuncDesc_Proxy( ITypeInfo * This, UINT index, LPFUNCDESC *ppFuncDesc, CLEANLOCALSTORAGE *pDummy);
void __stdcall ITypeInfo_RemoteGetFuncDesc_Stub( IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
HRESULT __stdcall ITypeInfo_RemoteGetVarDesc_Proxy( ITypeInfo * This, UINT index, LPVARDESC *ppVarDesc, CLEANLOCALSTORAGE *pDummy);
void __stdcall ITypeInfo_RemoteGetVarDesc_Stub( IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
HRESULT __stdcall ITypeInfo_RemoteGetNames_Proxy( ITypeInfo * This, MEMBERID memid, BSTR *rgBstrNames, UINT cMaxNames, UINT *pcNames);
void __stdcall ITypeInfo_RemoteGetNames_Stub( IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
HRESULT __stdcall ITypeInfo_LocalGetIDsOfNames_Proxy( ITypeInfo * This);
void __stdcall ITypeInfo_LocalGetIDsOfNames_Stub( IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
HRESULT __stdcall ITypeInfo_LocalInvoke_Proxy( ITypeInfo * This);
void __stdcall ITypeInfo_LocalInvoke_Stub( IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
HRESULT __stdcall ITypeInfo_RemoteGetDocumentation_Proxy( ITypeInfo * This, MEMBERID memid, DWORD refPtrFlags, BSTR *pBstrName, BSTR *pBstrDocString, DWORD *pdwHelpContext, BSTR *pBstrHelpFile);
void __stdcall ITypeInfo_RemoteGetDocumentation_Stub( IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
HRESULT __stdcall ITypeInfo_RemoteGetDllEntry_Proxy( ITypeInfo * This, MEMBERID memid, INVOKEKIND invKind, DWORD refPtrFlags, BSTR *pBstrDllName, BSTR *pBstrName, WORD *pwOrdinal);
void __stdcall ITypeInfo_RemoteGetDllEntry_Stub( IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
HRESULT __stdcall ITypeInfo_LocalAddressOfMember_Proxy( ITypeInfo * This);
void __stdcall ITypeInfo_LocalAddressOfMember_Stub( IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
HRESULT __stdcall ITypeInfo_RemoteCreateInstance_Proxy( ITypeInfo * This, const IID * const riid, IUnknown **ppvObj);
void __stdcall ITypeInfo_RemoteCreateInstance_Stub( IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
HRESULT __stdcall ITypeInfo_RemoteGetContainingTypeLib_Proxy( ITypeInfo * This, ITypeLib **ppTLib, UINT *pIndex);
void __stdcall ITypeInfo_RemoteGetContainingTypeLib_Stub( IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
HRESULT __stdcall ITypeInfo_LocalReleaseTypeAttr_Proxy( ITypeInfo * This);
void __stdcall ITypeInfo_LocalReleaseTypeAttr_Stub( IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
HRESULT __stdcall ITypeInfo_LocalReleaseFuncDesc_Proxy( ITypeInfo * This);
void __stdcall ITypeInfo_LocalReleaseFuncDesc_Stub( IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
HRESULT __stdcall ITypeInfo_LocalReleaseVarDesc_Proxy( ITypeInfo * This);
void __stdcall ITypeInfo_LocalReleaseVarDesc_Stub( IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
<typedef name="LPTYPEINFO2"><ptr><ITypeInfo2 /></ptr></typedef>
extern const IID IID_ITypeInfo2;
typedef struct ITypeInfo2Vtbl {
HRESULT(__stdcall *QueryInterface )( ITypeInfo2 * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( ITypeInfo2 * This);
ULONG(__stdcall *Release )( ITypeInfo2 * This);
HRESULT(__stdcall *GetTypeAttr )( ITypeInfo2 * This, TYPEATTR **ppTypeAttr);
HRESULT(__stdcall *GetTypeComp )( ITypeInfo2 * This, ITypeComp **ppTComp);
HRESULT(__stdcall *GetFuncDesc )( ITypeInfo2 * This, UINT index, FUNCDESC **ppFuncDesc);
HRESULT(__stdcall *GetVarDesc )( ITypeInfo2 * This, UINT index, VARDESC **ppVarDesc);
HRESULT(__stdcall *GetNames )( ITypeInfo2 * This, MEMBERID memid, BSTR *rgBstrNames, UINT cMaxNames, UINT *pcNames);
HRESULT(__stdcall *GetRefTypeOfImplType )( ITypeInfo2 * This, UINT index, HREFTYPE *pRefType);
HRESULT(__stdcall *GetImplTypeFlags )( ITypeInfo2 * This, UINT index, INT *pImplTypeFlags);
HRESULT(__stdcall *GetIDsOfNames )( ITypeInfo2 * This, LPOLESTR *rgszNames, UINT cNames, MEMBERID *pMemId);
HRESULT(__stdcall *Invoke )( ITypeInfo2 * This, PVOID pvInstance, MEMBERID memid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);
HRESULT(__stdcall *GetDocumentation )( ITypeInfo2 * This, MEMBERID memid, BSTR *pBstrName, BSTR *pBstrDocString, DWORD *pdwHelpContext, BSTR *pBstrHelpFile);
HRESULT(__stdcall *GetDllEntry )( ITypeInfo2 * This, MEMBERID memid, INVOKEKIND invKind, BSTR *pBstrDllName, BSTR *pBstrName, WORD *pwOrdinal);
HRESULT(__stdcall *GetRefTypeInfo )( ITypeInfo2 * This, HREFTYPE hRefType, ITypeInfo **ppTInfo);
HRESULT(__stdcall *AddressOfMember )( ITypeInfo2 * This, MEMBERID memid, INVOKEKIND invKind, PVOID *ppv);
HRESULT(__stdcall *CreateInstance )( ITypeInfo2 * This, IUnknown *pUnkOuter, const IID * const riid, PVOID *ppvObj);
HRESULT(__stdcall *GetMops )( ITypeInfo2 * This, MEMBERID memid, BSTR *pBstrMops);
HRESULT(__stdcall *GetContainingTypeLib )( ITypeInfo2 * This, ITypeLib **ppTLib, UINT *pIndex);
void(__stdcall *ReleaseTypeAttr )( ITypeInfo2 * This, TYPEATTR *pTypeAttr);
void(__stdcall *ReleaseFuncDesc )( ITypeInfo2 * This, FUNCDESC *pFuncDesc);
void(__stdcall *ReleaseVarDesc )( ITypeInfo2 * This, VARDESC *pVarDesc);
HRESULT(__stdcall *GetTypeKind )( ITypeInfo2 * This, TYPEKIND *pTypeKind);
HRESULT(__stdcall *GetTypeFlags )( ITypeInfo2 * This, ULONG *pTypeFlags);
HRESULT(__stdcall *GetFuncIndexOfMemId )( ITypeInfo2 * This, MEMBERID memid, INVOKEKIND invKind, UINT *pFuncIndex);
HRESULT(__stdcall *GetVarIndexOfMemId )( ITypeInfo2 * This, MEMBERID memid, UINT *pVarIndex);
HRESULT(__stdcall *GetCustData )( ITypeInfo2 * This, const GUID * const guid, VARIANT *pVarVal);
HRESULT(__stdcall *GetFuncCustData )( ITypeInfo2 * This, UINT index, const GUID * const guid, VARIANT *pVarVal);
HRESULT(__stdcall *GetParamCustData )( ITypeInfo2 * This, UINT indexFunc, UINT indexParam, const GUID * const guid, VARIANT *pVarVal);
HRESULT(__stdcall *GetVarCustData )( ITypeInfo2 * This, UINT index, const GUID * const guid, VARIANT *pVarVal);
HRESULT(__stdcall *GetImplTypeCustData )( ITypeInfo2 * This, UINT index, const GUID * const guid, VARIANT *pVarVal);
HRESULT(__stdcall *GetDocumentation2 )( ITypeInfo2 * This, MEMBERID memid, LCID lcid, BSTR *pbstrHelpString, DWORD *pdwHelpStringContext, BSTR *pbstrHelpStringDll);
HRESULT(__stdcall *GetAllCustData )( ITypeInfo2 * This, CUSTDATA *pCustData);
HRESULT(__stdcall *GetAllFuncCustData )( ITypeInfo2 * This, UINT index, CUSTDATA *pCustData);
HRESULT(__stdcall *GetAllParamCustData )( ITypeInfo2 * This, UINT indexFunc, UINT indexParam, CUSTDATA *pCustData);
HRESULT(__stdcall *GetAllVarCustData )( ITypeInfo2 * This, UINT index, CUSTDATA *pCustData);
HRESULT(__stdcall *GetAllImplTypeCustData )( ITypeInfo2 * This, UINT index, CUSTDATA *pCustData);
} ITypeInfo2Vtbl;
struct ITypeInfo2 {
struct ITypeInfo2Vtbl *lpVtbl;
};
HRESULT __stdcall ITypeInfo2_RemoteGetDocumentation2_Proxy( ITypeInfo2 * This, MEMBERID memid, LCID lcid, DWORD refPtrFlags, BSTR *pbstrHelpString, DWORD *pdwHelpStringContext, BSTR *pbstrHelpStringDll);
void __stdcall ITypeInfo2_RemoteGetDocumentation2_Stub( IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
typedef enum tagSYSKIND { SYS_WIN16 = 0, SYS_WIN32 =(SYS_WIN16 + 1 ), SYS_MAC =(SYS_WIN32 + 1 ), SYS_WIN64 =(SYS_MAC + 1 ) } SYSKIND;
typedef enum tagLIBFLAGS { LIBFLAG_FRESTRICTED = 0x1, LIBFLAG_FCONTROL = 0x2, LIBFLAG_FHIDDEN = 0x4, LIBFLAG_FHASDISKIMAGE = 0x8 } LIBFLAGS;
<typedef name="LPTYPELIB"><ptr><ITypeLib /></ptr></typedef>
typedef struct tagTLIBATTR {
<field name="guid"><GUID /></field>
<field name="lcid"><LCID /></field>
<field name="syskind"><SYSKIND /></field>
<field name="wMajorVerNum"><WORD /></field>
<field name="wMinorVerNum"><WORD /></field>
<field name="wLibFlags"><WORD /></field>
} TLIBATTR;
typedef struct tagTLIBATTR *LPTLIBATTR;
extern const IID IID_ITypeLib;
typedef struct ITypeLibVtbl {
HRESULT(__stdcall *QueryInterface )( ITypeLib * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( ITypeLib * This);
ULONG(__stdcall *Release )( ITypeLib * This);
UINT(__stdcall *GetTypeInfoCount )( ITypeLib * This);
HRESULT(__stdcall *GetTypeInfo )( ITypeLib * This, UINT index, ITypeInfo **ppTInfo);
HRESULT(__stdcall *GetTypeInfoType )( ITypeLib * This, UINT index, TYPEKIND *pTKind);
HRESULT(__stdcall *GetTypeInfoOfGuid )( ITypeLib * This, const GUID * const guid, ITypeInfo **ppTinfo);
HRESULT(__stdcall *GetLibAttr )( ITypeLib * This, TLIBATTR **ppTLibAttr);
HRESULT(__stdcall *GetTypeComp )( ITypeLib * This, ITypeComp **ppTComp);
HRESULT(__stdcall *GetDocumentation )( ITypeLib * This, INT index, BSTR *pBstrName, BSTR *pBstrDocString, DWORD *pdwHelpContext, BSTR *pBstrHelpFile);
HRESULT(__stdcall *IsName )( ITypeLib * This, LPOLESTR szNameBuf, ULONG lHashVal, BOOL *pfName);
HRESULT(__stdcall *FindName )( ITypeLib * This, LPOLESTR szNameBuf, ULONG lHashVal, ITypeInfo **ppTInfo, MEMBERID *rgMemId, USHORT *pcFound);
void(__stdcall *ReleaseTLibAttr )( ITypeLib * This, TLIBATTR *pTLibAttr);
} ITypeLibVtbl;
struct ITypeLib {
struct ITypeLibVtbl *lpVtbl;
};
HRESULT __stdcall ITypeLib_RemoteGetTypeInfoCount_Proxy( ITypeLib * This, UINT *pcTInfo);
void __stdcall ITypeLib_RemoteGetTypeInfoCount_Stub( IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
HRESULT __stdcall ITypeLib_RemoteGetLibAttr_Proxy( ITypeLib * This, LPTLIBATTR *ppTLibAttr, CLEANLOCALSTORAGE *pDummy);
void __stdcall ITypeLib_RemoteGetLibAttr_Stub( IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
HRESULT __stdcall ITypeLib_RemoteGetDocumentation_Proxy( ITypeLib * This, INT index, DWORD refPtrFlags, BSTR *pBstrName, BSTR *pBstrDocString, DWORD *pdwHelpContext, BSTR *pBstrHelpFile);
void __stdcall ITypeLib_RemoteGetDocumentation_Stub( IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
HRESULT __stdcall ITypeLib_RemoteIsName_Proxy( ITypeLib * This, LPOLESTR szNameBuf, ULONG lHashVal, BOOL *pfName, BSTR *pBstrLibName);
void __stdcall ITypeLib_RemoteIsName_Stub( IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
HRESULT __stdcall ITypeLib_RemoteFindName_Proxy( ITypeLib * This, LPOLESTR szNameBuf, ULONG lHashVal, ITypeInfo **ppTInfo, MEMBERID *rgMemId, USHORT *pcFound, BSTR *pBstrLibName);
void __stdcall ITypeLib_RemoteFindName_Stub( IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
HRESULT __stdcall ITypeLib_LocalReleaseTLibAttr_Proxy( ITypeLib * This);
void __stdcall ITypeLib_LocalReleaseTLibAttr_Stub( IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
<typedef name="LPTYPELIB2"><ptr><ITypeLib2 /></ptr></typedef>
extern const IID IID_ITypeLib2;
typedef struct ITypeLib2Vtbl {
HRESULT(__stdcall *QueryInterface )( ITypeLib2 * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( ITypeLib2 * This);
ULONG(__stdcall *Release )( ITypeLib2 * This);
UINT(__stdcall *GetTypeInfoCount )( ITypeLib2 * This);
HRESULT(__stdcall *GetTypeInfo )( ITypeLib2 * This, UINT index, ITypeInfo **ppTInfo);
HRESULT(__stdcall *GetTypeInfoType )( ITypeLib2 * This, UINT index, TYPEKIND *pTKind);
HRESULT(__stdcall *GetTypeInfoOfGuid )( ITypeLib2 * This, const GUID * const guid, ITypeInfo **ppTinfo);
HRESULT(__stdcall *GetLibAttr )( ITypeLib2 * This, TLIBATTR **ppTLibAttr);
HRESULT(__stdcall *GetTypeComp )( ITypeLib2 * This, ITypeComp **ppTComp);
HRESULT(__stdcall *GetDocumentation )( ITypeLib2 * This, INT index, BSTR *pBstrName, BSTR *pBstrDocString, DWORD *pdwHelpContext, BSTR *pBstrHelpFile);
HRESULT(__stdcall *IsName )( ITypeLib2 * This, LPOLESTR szNameBuf, ULONG lHashVal, BOOL *pfName);
HRESULT(__stdcall *FindName )( ITypeLib2 * This, LPOLESTR szNameBuf, ULONG lHashVal, ITypeInfo **ppTInfo, MEMBERID *rgMemId, USHORT *pcFound);
void(__stdcall *ReleaseTLibAttr )( ITypeLib2 * This, TLIBATTR *pTLibAttr);
HRESULT(__stdcall *GetCustData )( ITypeLib2 * This, const GUID * const guid, VARIANT *pVarVal);
HRESULT(__stdcall *GetLibStatistics )( ITypeLib2 * This, ULONG *pcUniqueNames, ULONG *pcchUniqueNames);
HRESULT(__stdcall *GetDocumentation2 )( ITypeLib2 * This, INT index, LCID lcid, BSTR *pbstrHelpString, DWORD *pdwHelpStringContext, BSTR *pbstrHelpStringDll);
HRESULT(__stdcall *GetAllCustData )( ITypeLib2 * This, CUSTDATA *pCustData);
} ITypeLib2Vtbl;
struct ITypeLib2 {
struct ITypeLib2Vtbl *lpVtbl;
};
HRESULT __stdcall ITypeLib2_RemoteGetLibStatistics_Proxy( ITypeLib2 * This, ULONG *pcUniqueNames, ULONG *pcchUniqueNames);
void __stdcall ITypeLib2_RemoteGetLibStatistics_Stub( IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
HRESULT __stdcall ITypeLib2_RemoteGetDocumentation2_Proxy( ITypeLib2 * This, INT index, LCID lcid, DWORD refPtrFlags, BSTR *pbstrHelpString, DWORD *pdwHelpStringContext, BSTR *pbstrHelpStringDll);
void __stdcall ITypeLib2_RemoteGetDocumentation2_Stub( IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
<typedef name="LPTYPECHANGEEVENTS"><ptr><ITypeChangeEvents /></ptr></typedef>
typedef enum tagCHANGEKIND { CHANGEKIND_ADDMEMBER = 0, CHANGEKIND_DELETEMEMBER =(CHANGEKIND_ADDMEMBER + 1 ), CHANGEKIND_SETNAMES =(CHANGEKIND_DELETEMEMBER + 1 ), CHANGEKIND_SETDOCUMENTATION =(CHANGEKIND_SETNAMES + 1 ), CHANGEKIND_GENERAL =(CHANGEKIND_SETDOCUMENTATION + 1 ), CHANGEKIND_INVALIDATE =(CHANGEKIND_GENERAL + 1 ), CHANGEKIND_CHANGEFAILED =(CHANGEKIND_INVALIDATE + 1 ), CHANGEKIND_MAX =(CHANGEKIND_CHANGEFAILED + 1 ) } CHANGEKIND;
extern const IID IID_ITypeChangeEvents;
typedef struct ITypeChangeEventsVtbl {
HRESULT(__stdcall *QueryInterface )( ITypeChangeEvents * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( ITypeChangeEvents * This);
ULONG(__stdcall *Release )( ITypeChangeEvents * This);
HRESULT(__stdcall *RequestTypeChange )( ITypeChangeEvents * This, CHANGEKIND changeKind, ITypeInfo *pTInfoBefore, LPOLESTR pStrName, INT *pfCancel);
HRESULT(__stdcall *AfterTypeChange )( ITypeChangeEvents * This, CHANGEKIND changeKind, ITypeInfo *pTInfoAfter, LPOLESTR pStrName);
} ITypeChangeEventsVtbl;
struct ITypeChangeEvents {
struct ITypeChangeEventsVtbl *lpVtbl;
};
<typedef name="LPERRORINFO"><ptr><IErrorInfo /></ptr></typedef>
extern const IID IID_IErrorInfo;
typedef struct IErrorInfoVtbl {
HRESULT(__stdcall *QueryInterface )( IErrorInfo * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( IErrorInfo * This);
ULONG(__stdcall *Release )( IErrorInfo * This);
HRESULT(__stdcall *GetGUID )( IErrorInfo * This, GUID *pGUID);
HRESULT(__stdcall *GetSource )( IErrorInfo * This, BSTR *pBstrSource);
HRESULT(__stdcall *GetDescription )( IErrorInfo * This, BSTR *pBstrDescription);
HRESULT(__stdcall *GetHelpFile )( IErrorInfo * This, BSTR *pBstrHelpFile);
HRESULT(__stdcall *GetHelpContext )( IErrorInfo * This, DWORD *pdwHelpContext);
} IErrorInfoVtbl;
struct IErrorInfo {
struct IErrorInfoVtbl *lpVtbl;
};
<typedef name="LPCREATEERRORINFO"><ptr><ICreateErrorInfo /></ptr></typedef>
extern const IID IID_ICreateErrorInfo;
typedef struct ICreateErrorInfoVtbl {
HRESULT(__stdcall *QueryInterface )( ICreateErrorInfo * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( ICreateErrorInfo * This);
ULONG(__stdcall *Release )( ICreateErrorInfo * This);
HRESULT(__stdcall *SetGUID )( ICreateErrorInfo * This, const GUID * const rguid);
HRESULT(__stdcall *SetSource )( ICreateErrorInfo * This, LPOLESTR szSource);
HRESULT(__stdcall *SetDescription )( ICreateErrorInfo * This, LPOLESTR szDescription);
HRESULT(__stdcall *SetHelpFile )( ICreateErrorInfo * This, LPOLESTR szHelpFile);
HRESULT(__stdcall *SetHelpContext )( ICreateErrorInfo * This, DWORD dwHelpContext);
} ICreateErrorInfoVtbl;
struct ICreateErrorInfo {
struct ICreateErrorInfoVtbl *lpVtbl;
};
<typedef name="LPSUPPORTERRORINFO"><ptr><ISupportErrorInfo /></ptr></typedef>
extern const IID IID_ISupportErrorInfo;
typedef struct ISupportErrorInfoVtbl {
HRESULT(__stdcall *QueryInterface )( ISupportErrorInfo * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( ISupportErrorInfo * This);
ULONG(__stdcall *Release )( ISupportErrorInfo * This);
HRESULT(__stdcall *InterfaceSupportsErrorInfo )( ISupportErrorInfo * This, const IID * const riid);
} ISupportErrorInfoVtbl;
struct ISupportErrorInfo {
struct ISupportErrorInfoVtbl *lpVtbl;
};
extern const IID IID_ITypeFactory;
typedef struct ITypeFactoryVtbl {
HRESULT(__stdcall *QueryInterface )( ITypeFactory * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( ITypeFactory * This);
ULONG(__stdcall *Release )( ITypeFactory * This);
HRESULT(__stdcall *CreateFromTypeInfo )( ITypeFactory * This, ITypeInfo *pTypeInfo, const IID * const riid, IUnknown **ppv);
} ITypeFactoryVtbl;
struct ITypeFactory {
struct ITypeFactoryVtbl *lpVtbl;
};
extern const IID IID_ITypeMarshal;
typedef struct ITypeMarshalVtbl {
HRESULT(__stdcall *QueryInterface )( ITypeMarshal * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( ITypeMarshal * This);
ULONG(__stdcall *Release )( ITypeMarshal * This);
HRESULT(__stdcall *Size )( ITypeMarshal * This, PVOID pvType, DWORD dwDestContext, PVOID pvDestContext, ULONG *pSize);
HRESULT(__stdcall *Marshal )( ITypeMarshal * This, PVOID pvType, DWORD dwDestContext, PVOID pvDestContext, ULONG cbBufferLength, BYTE *pBuffer, ULONG *pcbWritten);
HRESULT(__stdcall *Unmarshal )( ITypeMarshal * This, PVOID pvType, DWORD dwFlags, ULONG cbBufferLength, BYTE *pBuffer, ULONG *pcbRead);
HRESULT(__stdcall *Free )( ITypeMarshal * This, PVOID pvType);
} ITypeMarshalVtbl;
struct ITypeMarshal {
struct ITypeMarshalVtbl *lpVtbl;
};
<typedef name="LPRECORDINFO"><ptr><IRecordInfo /></ptr></typedef>
extern const IID IID_IRecordInfo;
typedef struct IRecordInfoVtbl {
HRESULT(__stdcall *QueryInterface )( IRecordInfo * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( IRecordInfo * This);
ULONG(__stdcall *Release )( IRecordInfo * This);
HRESULT(__stdcall *RecordInit )( IRecordInfo * This, PVOID pvNew);
HRESULT(__stdcall *RecordClear )( IRecordInfo * This, PVOID pvExisting);
HRESULT(__stdcall *RecordCopy )( IRecordInfo * This, PVOID pvExisting, PVOID pvNew);
HRESULT(__stdcall *GetGuid )( IRecordInfo * This, GUID *pguid);
HRESULT(__stdcall *GetName )( IRecordInfo * This, BSTR *pbstrName);
HRESULT(__stdcall *GetSize )( IRecordInfo * This, ULONG *pcbSize);
HRESULT(__stdcall *GetTypeInfo )( IRecordInfo * This, ITypeInfo **ppTypeInfo);
HRESULT(__stdcall *GetField )( IRecordInfo * This, PVOID pvData, LPCOLESTR szFieldName, VARIANT *pvarField);
HRESULT(__stdcall *GetFieldNoCopy )( IRecordInfo * This, PVOID pvData, LPCOLESTR szFieldName, VARIANT *pvarField, PVOID *ppvDataCArray);
HRESULT(__stdcall *PutField )( IRecordInfo * This, ULONG wFlags, PVOID pvData, LPCOLESTR szFieldName, VARIANT *pvarField);
HRESULT(__stdcall *PutFieldNoCopy )( IRecordInfo * This, ULONG wFlags, PVOID pvData, LPCOLESTR szFieldName, VARIANT *pvarField);
HRESULT(__stdcall *GetFieldNames )( IRecordInfo * This, ULONG *pcNames, BSTR *rgBstrNames);
BOOL(__stdcall *IsMatchingType )( IRecordInfo * This, IRecordInfo *pRecordInfo);
PVOID(__stdcall *RecordCreate )( IRecordInfo * This);
HRESULT(__stdcall *RecordCreateCopy )( IRecordInfo * This, PVOID pvSource, PVOID *ppvDest);
HRESULT(__stdcall *RecordDestroy )( IRecordInfo * This, PVOID pvRecord);
} IRecordInfoVtbl;
struct IRecordInfo {
struct IRecordInfoVtbl *lpVtbl;
};
<typedef name="LPERRORLOG"><ptr><IErrorLog /></ptr></typedef>
extern const IID IID_IErrorLog;
typedef struct IErrorLogVtbl {
HRESULT(__stdcall *QueryInterface )( IErrorLog * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( IErrorLog * This);
ULONG(__stdcall *Release )( IErrorLog * This);
HRESULT(__stdcall *AddError )( IErrorLog * This, LPCOLESTR pszPropName, EXCEPINFO *pExcepInfo);
} IErrorLogVtbl;
struct IErrorLog {
struct IErrorLogVtbl *lpVtbl;
};
<typedef name="LPPROPERTYBAG"><ptr><IPropertyBag /></ptr></typedef>
extern const IID IID_IPropertyBag;
typedef struct IPropertyBagVtbl {
HRESULT(__stdcall *QueryInterface )( IPropertyBag * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( IPropertyBag * This);
ULONG(__stdcall *Release )( IPropertyBag * This);
HRESULT(__stdcall *Read )( IPropertyBag * This, LPCOLESTR pszPropName, VARIANT *pVar, IErrorLog *pErrorLog);
HRESULT(__stdcall *Write )( IPropertyBag * This, LPCOLESTR pszPropName, VARIANT *pVar);
} IPropertyBagVtbl;
struct IPropertyBag {
struct IPropertyBagVtbl *lpVtbl;
};
HRESULT __stdcall IPropertyBag_RemoteRead_Proxy( IPropertyBag * This, LPCOLESTR pszPropName, VARIANT *pVar, IErrorLog *pErrorLog, DWORD varType, IUnknown *pUnkObj);
void __stdcall IPropertyBag_RemoteRead_Stub( IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0021_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0021_v0_0_s_ifspec;
uint32 __stdcall BSTR_UserSize( uint32 *, uint32, BSTR * );
byte * __stdcall BSTR_UserMarshal( uint32 *, byte *, BSTR * );
byte * __stdcall BSTR_UserUnmarshal( uint32 *, byte *, BSTR * );
void __stdcall BSTR_UserFree( uint32 *, BSTR * );
uint32 __stdcall CLEANLOCALSTORAGE_UserSize( uint32 *, uint32, CLEANLOCALSTORAGE * );
byte * __stdcall CLEANLOCALSTORAGE_UserMarshal( uint32 *, byte *, CLEANLOCALSTORAGE * );
byte * __stdcall CLEANLOCALSTORAGE_UserUnmarshal( uint32 *, byte *, CLEANLOCALSTORAGE * );
void __stdcall CLEANLOCALSTORAGE_UserFree( uint32 *, CLEANLOCALSTORAGE * );
uint32 __stdcall VARIANT_UserSize( uint32 *, uint32, VARIANT * );
byte * __stdcall VARIANT_UserMarshal( uint32 *, byte *, VARIANT * );
byte * __stdcall VARIANT_UserUnmarshal( uint32 *, byte *, VARIANT * );
void __stdcall VARIANT_UserFree( uint32 *, VARIANT * );
uint32 __stdcall BSTR_UserSize64( uint32 *, uint32, BSTR * );
byte * __stdcall BSTR_UserMarshal64( uint32 *, byte *, BSTR * );
byte * __stdcall BSTR_UserUnmarshal64( uint32 *, byte *, BSTR * );
void __stdcall BSTR_UserFree64( uint32 *, BSTR * );
uint32 __stdcall CLEANLOCALSTORAGE_UserSize64( uint32 *, uint32, CLEANLOCALSTORAGE * );
byte * __stdcall CLEANLOCALSTORAGE_UserMarshal64( uint32 *, byte *, CLEANLOCALSTORAGE * );
byte * __stdcall CLEANLOCALSTORAGE_UserUnmarshal64( uint32 *, byte *, CLEANLOCALSTORAGE * );
void __stdcall CLEANLOCALSTORAGE_UserFree64( uint32 *, CLEANLOCALSTORAGE * );
uint32 __stdcall VARIANT_UserSize64( uint32 *, uint32, VARIANT * );
byte * __stdcall VARIANT_UserMarshal64( uint32 *, byte *, VARIANT * );
byte * __stdcall VARIANT_UserUnmarshal64( uint32 *, byte *, VARIANT * );
void __stdcall VARIANT_UserFree64( uint32 *, VARIANT * );
HRESULT __stdcall IDispatch_Invoke_Proxy( IDispatch * This, DISPID dispIdMember, const IID * const riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);
HRESULT __stdcall IDispatch_Invoke_Stub( IDispatch * This, DISPID dispIdMember, const IID * const riid, LCID lcid, DWORD dwFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *pArgErr, UINT cVarRef, UINT *rgVarRefIdx, VARIANTARG *rgVarRef);
HRESULT __stdcall IEnumVARIANT_Next_Proxy( IEnumVARIANT * This, ULONG celt, VARIANT *rgVar, ULONG *pCeltFetched);
HRESULT __stdcall IEnumVARIANT_Next_Stub( IEnumVARIANT * This, ULONG celt, VARIANT *rgVar, ULONG *pCeltFetched);
HRESULT __stdcall ITypeComp_Bind_Proxy( ITypeComp * This, LPOLESTR szName, ULONG lHashVal, WORD wFlags, ITypeInfo **ppTInfo, DESCKIND *pDescKind, BINDPTR *pBindPtr);
HRESULT __stdcall ITypeComp_Bind_Stub( ITypeComp * This, LPOLESTR szName, ULONG lHashVal, WORD wFlags, ITypeInfo **ppTInfo, DESCKIND *pDescKind, LPFUNCDESC *ppFuncDesc, LPVARDESC *ppVarDesc, ITypeComp **ppTypeComp, CLEANLOCALSTORAGE *pDummy);
HRESULT __stdcall ITypeComp_BindType_Proxy( ITypeComp * This, LPOLESTR szName, ULONG lHashVal, ITypeInfo **ppTInfo, ITypeComp **ppTComp);
HRESULT __stdcall ITypeComp_BindType_Stub( ITypeComp * This, LPOLESTR szName, ULONG lHashVal, ITypeInfo **ppTInfo);
HRESULT __stdcall ITypeInfo_GetTypeAttr_Proxy( ITypeInfo * This, TYPEATTR **ppTypeAttr);
HRESULT __stdcall ITypeInfo_GetTypeAttr_Stub( ITypeInfo * This, LPTYPEATTR *ppTypeAttr, CLEANLOCALSTORAGE *pDummy);
HRESULT __stdcall ITypeInfo_GetFuncDesc_Proxy( ITypeInfo * This, UINT index, FUNCDESC **ppFuncDesc);
HRESULT __stdcall ITypeInfo_GetFuncDesc_Stub( ITypeInfo * This, UINT index, LPFUNCDESC *ppFuncDesc, CLEANLOCALSTORAGE *pDummy);
HRESULT __stdcall ITypeInfo_GetVarDesc_Proxy( ITypeInfo * This, UINT index, VARDESC **ppVarDesc);
HRESULT __stdcall ITypeInfo_GetVarDesc_Stub( ITypeInfo * This, UINT index, LPVARDESC *ppVarDesc, CLEANLOCALSTORAGE *pDummy);
HRESULT __stdcall ITypeInfo_GetNames_Proxy( ITypeInfo * This, MEMBERID memid, BSTR *rgBstrNames, UINT cMaxNames, UINT *pcNames);
HRESULT __stdcall ITypeInfo_GetNames_Stub( ITypeInfo * This, MEMBERID memid, BSTR *rgBstrNames, UINT cMaxNames, UINT *pcNames);
HRESULT __stdcall ITypeInfo_GetIDsOfNames_Proxy( ITypeInfo * This, LPOLESTR *rgszNames, UINT cNames, MEMBERID *pMemId);
HRESULT __stdcall ITypeInfo_GetIDsOfNames_Stub( ITypeInfo * This);
HRESULT __stdcall ITypeInfo_Invoke_Proxy( ITypeInfo * This, PVOID pvInstance, MEMBERID memid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);
HRESULT __stdcall ITypeInfo_Invoke_Stub( ITypeInfo * This);
HRESULT __stdcall ITypeInfo_GetDocumentation_Proxy( ITypeInfo * This, MEMBERID memid, BSTR *pBstrName, BSTR *pBstrDocString, DWORD *pdwHelpContext, BSTR *pBstrHelpFile);
HRESULT __stdcall ITypeInfo_GetDocumentation_Stub( ITypeInfo * This, MEMBERID memid, DWORD refPtrFlags, BSTR *pBstrName, BSTR *pBstrDocString, DWORD *pdwHelpContext, BSTR *pBstrHelpFile);
HRESULT __stdcall ITypeInfo_GetDllEntry_Proxy( ITypeInfo * This, MEMBERID memid, INVOKEKIND invKind, BSTR *pBstrDllName, BSTR *pBstrName, WORD *pwOrdinal);
HRESULT __stdcall ITypeInfo_GetDllEntry_Stub( ITypeInfo * This, MEMBERID memid, INVOKEKIND invKind, DWORD refPtrFlags, BSTR *pBstrDllName, BSTR *pBstrName, WORD *pwOrdinal);
HRESULT __stdcall ITypeInfo_AddressOfMember_Proxy( ITypeInfo * This, MEMBERID memid, INVOKEKIND invKind, PVOID *ppv);
HRESULT __stdcall ITypeInfo_AddressOfMember_Stub( ITypeInfo * This);
HRESULT __stdcall ITypeInfo_CreateInstance_Proxy( ITypeInfo * This, IUnknown *pUnkOuter, const IID * const riid, PVOID *ppvObj);
HRESULT __stdcall ITypeInfo_CreateInstance_Stub( ITypeInfo * This, const IID * const riid, IUnknown **ppvObj);
HRESULT __stdcall ITypeInfo_GetContainingTypeLib_Proxy( ITypeInfo * This, ITypeLib **ppTLib, UINT *pIndex);
HRESULT __stdcall ITypeInfo_GetContainingTypeLib_Stub( ITypeInfo * This, ITypeLib **ppTLib, UINT *pIndex);
void __stdcall ITypeInfo_ReleaseTypeAttr_Proxy( ITypeInfo * This, TYPEATTR *pTypeAttr);
HRESULT __stdcall ITypeInfo_ReleaseTypeAttr_Stub( ITypeInfo * This);
void __stdcall ITypeInfo_ReleaseFuncDesc_Proxy( ITypeInfo * This, FUNCDESC *pFuncDesc);
HRESULT __stdcall ITypeInfo_ReleaseFuncDesc_Stub( ITypeInfo * This);
void __stdcall ITypeInfo_ReleaseVarDesc_Proxy( ITypeInfo * This, VARDESC *pVarDesc);
HRESULT __stdcall ITypeInfo_ReleaseVarDesc_Stub( ITypeInfo * This);
HRESULT __stdcall ITypeInfo2_GetDocumentation2_Proxy( ITypeInfo2 * This, MEMBERID memid, LCID lcid, BSTR *pbstrHelpString, DWORD *pdwHelpStringContext, BSTR *pbstrHelpStringDll);
HRESULT __stdcall ITypeInfo2_GetDocumentation2_Stub( ITypeInfo2 * This, MEMBERID memid, LCID lcid, DWORD refPtrFlags, BSTR *pbstrHelpString, DWORD *pdwHelpStringContext, BSTR *pbstrHelpStringDll);
UINT __stdcall ITypeLib_GetTypeInfoCount_Proxy( ITypeLib * This);
HRESULT __stdcall ITypeLib_GetTypeInfoCount_Stub( ITypeLib * This, UINT *pcTInfo);
HRESULT __stdcall ITypeLib_GetLibAttr_Proxy( ITypeLib * This, TLIBATTR **ppTLibAttr);
HRESULT __stdcall ITypeLib_GetLibAttr_Stub( ITypeLib * This, LPTLIBATTR *ppTLibAttr, CLEANLOCALSTORAGE *pDummy);
HRESULT __stdcall ITypeLib_GetDocumentation_Proxy( ITypeLib * This, INT index, BSTR *pBstrName, BSTR *pBstrDocString, DWORD *pdwHelpContext, BSTR *pBstrHelpFile);
HRESULT __stdcall ITypeLib_GetDocumentation_Stub( ITypeLib * This, INT index, DWORD refPtrFlags, BSTR *pBstrName, BSTR *pBstrDocString, DWORD *pdwHelpContext, BSTR *pBstrHelpFile);
HRESULT __stdcall ITypeLib_IsName_Proxy( ITypeLib * This, LPOLESTR szNameBuf, ULONG lHashVal, BOOL *pfName);
HRESULT __stdcall ITypeLib_IsName_Stub( ITypeLib * This, LPOLESTR szNameBuf, ULONG lHashVal, BOOL *pfName, BSTR *pBstrLibName);
HRESULT __stdcall ITypeLib_FindName_Proxy( ITypeLib * This, LPOLESTR szNameBuf, ULONG lHashVal, ITypeInfo **ppTInfo, MEMBERID *rgMemId, USHORT *pcFound);
HRESULT __stdcall ITypeLib_FindName_Stub( ITypeLib * This, LPOLESTR szNameBuf, ULONG lHashVal, ITypeInfo **ppTInfo, MEMBERID *rgMemId, USHORT *pcFound, BSTR *pBstrLibName);
void __stdcall ITypeLib_ReleaseTLibAttr_Proxy( ITypeLib * This, TLIBATTR *pTLibAttr);
HRESULT __stdcall ITypeLib_ReleaseTLibAttr_Stub( ITypeLib * This);
HRESULT __stdcall ITypeLib2_GetLibStatistics_Proxy( ITypeLib2 * This, ULONG *pcUniqueNames, ULONG *pcchUniqueNames);
HRESULT __stdcall ITypeLib2_GetLibStatistics_Stub( ITypeLib2 * This, ULONG *pcUniqueNames, ULONG *pcchUniqueNames);
HRESULT __stdcall ITypeLib2_GetDocumentation2_Proxy( ITypeLib2 * This, INT index, LCID lcid, BSTR *pbstrHelpString, DWORD *pdwHelpStringContext, BSTR *pbstrHelpStringDll);
HRESULT __stdcall ITypeLib2_GetDocumentation2_Stub( ITypeLib2 * This, INT index, LCID lcid, DWORD refPtrFlags, BSTR *pbstrHelpString, DWORD *pdwHelpStringContext, BSTR *pbstrHelpStringDll);
HRESULT __stdcall IPropertyBag_Read_Proxy( IPropertyBag * This, LPCOLESTR pszPropName, VARIANT *pVar, IErrorLog *pErrorLog);
HRESULT __stdcall IPropertyBag_Read_Stub( IPropertyBag * This, LPCOLESTR pszPropName, VARIANT *pVar, IErrorLog *pErrorLog, DWORD varType, IUnknown *pUnkObj);
typedef struct _xml_error {
<field name="_nLine"><uint32 /></field>
<field name="_pchBuf"><BSTR /></field>
<field name="_cchBuf"><uint32 /></field>
<field name="_ich"><uint32 /></field>
<field name="_pszFound"><BSTR /></field>
<field name="_pszExpected"><BSTR /></field>
<field name="_reserved1"><DWORD /></field>
<field name="_reserved2"><DWORD /></field>
} XML_ERROR;
extern RPC_IF_HANDLE __MIDL_itf_msxml_0000_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_msxml_0000_0000_v0_0_s_ifspec;
typedef enum tagDOMNodeType { NODE_INVALID = 0, NODE_ELEMENT =(NODE_INVALID + 1 ), NODE_ATTRIBUTE =(NODE_ELEMENT + 1 ), NODE_TEXT =(NODE_ATTRIBUTE + 1 ), NODE_CDATA_SECTION =(NODE_TEXT + 1 ), NODE_ENTITY_REFERENCE =(NODE_CDATA_SECTION + 1 ), NODE_ENTITY =(NODE_ENTITY_REFERENCE + 1 ), NODE_PROCESSING_INSTRUCTION =(NODE_ENTITY + 1 ), NODE_COMMENT =(NODE_PROCESSING_INSTRUCTION + 1 ), NODE_DOCUMENT =(NODE_COMMENT + 1 ), NODE_DOCUMENT_TYPE =(NODE_DOCUMENT + 1 ), NODE_DOCUMENT_FRAGMENT =(NODE_DOCUMENT_TYPE + 1 ), NODE_NOTATION =(NODE_DOCUMENT_FRAGMENT + 1 ) } DOMNodeType;
typedef enum tagXMLEMEM_TYPE { XMLELEMTYPE_ELEMENT = 0, XMLELEMTYPE_TEXT =(XMLELEMTYPE_ELEMENT + 1 ), XMLELEMTYPE_COMMENT =(XMLELEMTYPE_TEXT + 1 ), XMLELEMTYPE_DOCUMENT =(XMLELEMTYPE_COMMENT + 1 ), XMLELEMTYPE_DTD =(XMLELEMTYPE_DOCUMENT + 1 ), XMLELEMTYPE_PI =(XMLELEMTYPE_DTD + 1 ), XMLELEMTYPE_OTHER =(XMLELEMTYPE_PI + 1 ) } XMLELEM_TYPE;
extern const IID LIBID_MSXML;
extern const IID IID_IXMLDOMImplementation;
typedef struct IXMLDOMImplementationVtbl {
HRESULT(__stdcall *QueryInterface )( IXMLDOMImplementation * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( IXMLDOMImplementation * This);
ULONG(__stdcall *Release )( IXMLDOMImplementation * This);
HRESULT(__stdcall *GetTypeInfoCount )( IXMLDOMImplementation * This, UINT *pctinfo);
HRESULT(__stdcall *GetTypeInfo )( IXMLDOMImplementation * This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);
HRESULT(__stdcall *GetIDsOfNames )( IXMLDOMImplementation * This, const IID * const riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);
HRESULT(__stdcall *Invoke )( IXMLDOMImplementation * This, DISPID dispIdMember, const IID * const riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);
HRESULT(__stdcall *hasFeature )( IXMLDOMImplementation * This, BSTR feature, BSTR version, VARIANT_BOOL *hasFeature);
} IXMLDOMImplementationVtbl;
struct IXMLDOMImplementation {
struct IXMLDOMImplementationVtbl *lpVtbl;
};
extern const IID IID_IXMLDOMNode;
typedef struct IXMLDOMNodeVtbl {
HRESULT(__stdcall *QueryInterface )( IXMLDOMNode * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( IXMLDOMNode * This);
ULONG(__stdcall *Release )( IXMLDOMNode * This);
HRESULT(__stdcall *GetTypeInfoCount )( IXMLDOMNode * This, UINT *pctinfo);
HRESULT(__stdcall *GetTypeInfo )( IXMLDOMNode * This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);
HRESULT(__stdcall *GetIDsOfNames )( IXMLDOMNode * This, const IID * const riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);
HRESULT(__stdcall *Invoke )( IXMLDOMNode * This, DISPID dispIdMember, const IID * const riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);
HRESULT(__stdcall *get_nodeName )( IXMLDOMNode * This, BSTR *name);
HRESULT(__stdcall *get_nodeValue )( IXMLDOMNode * This, VARIANT *value);
HRESULT(__stdcall *put_nodeValue )( IXMLDOMNode * This, VARIANT value);
HRESULT(__stdcall *get_nodeType )( IXMLDOMNode * This, DOMNodeType *type);
HRESULT(__stdcall *get_parentNode )( IXMLDOMNode * This, IXMLDOMNode **parent);
HRESULT(__stdcall *get_childNodes )( IXMLDOMNode * This, IXMLDOMNodeList **childList);
HRESULT(__stdcall *get_firstChild )( IXMLDOMNode * This, IXMLDOMNode **firstChild);
HRESULT(__stdcall *get_lastChild )( IXMLDOMNode * This, IXMLDOMNode **lastChild);
HRESULT(__stdcall *get_previousSibling )( IXMLDOMNode * This, IXMLDOMNode **previousSibling);
HRESULT(__stdcall *get_nextSibling )( IXMLDOMNode * This, IXMLDOMNode **nextSibling);
HRESULT(__stdcall *get_attributes )( IXMLDOMNode * This, IXMLDOMNamedNodeMap **attributeMap);
HRESULT(__stdcall *insertBefore )( IXMLDOMNode * This, IXMLDOMNode *newChild, VARIANT refChild, IXMLDOMNode **outNewChild);
HRESULT(__stdcall *replaceChild )( IXMLDOMNode * This, IXMLDOMNode *newChild, IXMLDOMNode *oldChild, IXMLDOMNode **outOldChild);
HRESULT(__stdcall *removeChild )( IXMLDOMNode * This, IXMLDOMNode *childNode, IXMLDOMNode **oldChild);
HRESULT(__stdcall *appendChild )( IXMLDOMNode * This, IXMLDOMNode *newChild, IXMLDOMNode **outNewChild);
HRESULT(__stdcall *hasChildNodes )( IXMLDOMNode * This, VARIANT_BOOL *hasChild);
HRESULT(__stdcall *get_ownerDocument )( IXMLDOMNode * This, IXMLDOMDocument **XMLDOMDocument);
HRESULT(__stdcall *cloneNode )( IXMLDOMNode * This, VARIANT_BOOL deep, IXMLDOMNode **cloneRoot);
HRESULT(__stdcall *get_nodeTypeString )( IXMLDOMNode * This, BSTR *nodeType);
HRESULT(__stdcall *get_text )( IXMLDOMNode * This, BSTR *text);
HRESULT(__stdcall *put_text )( IXMLDOMNode * This, BSTR text);
HRESULT(__stdcall *get_specified )( IXMLDOMNode * This, VARIANT_BOOL *isSpecified);
HRESULT(__stdcall *get_definition )( IXMLDOMNode * This, IXMLDOMNode **definitionNode);
HRESULT(__stdcall *get_nodeTypedValue )( IXMLDOMNode * This, VARIANT *typedValue);
HRESULT(__stdcall *put_nodeTypedValue )( IXMLDOMNode * This, VARIANT typedValue);
HRESULT(__stdcall *get_dataType )( IXMLDOMNode * This, VARIANT *dataTypeName);
HRESULT(__stdcall *put_dataType )( IXMLDOMNode * This, BSTR dataTypeName);
HRESULT(__stdcall *get_xml )( IXMLDOMNode * This, BSTR *xmlString);
HRESULT(__stdcall *transformNode )( IXMLDOMNode * This, IXMLDOMNode *stylesheet, BSTR *xmlString);
HRESULT(__stdcall *selectNodes )( IXMLDOMNode * This, BSTR queryString, IXMLDOMNodeList **resultList);
HRESULT(__stdcall *selectSingleNode )( IXMLDOMNode * This, BSTR queryString, IXMLDOMNode **resultNode);
HRESULT(__stdcall *get_parsed )( IXMLDOMNode * This, VARIANT_BOOL *isParsed);
HRESULT(__stdcall *get_namespaceURI )( IXMLDOMNode * This, BSTR *namespaceURI);
HRESULT(__stdcall *get_prefix )( IXMLDOMNode * This, BSTR *prefixString);
HRESULT(__stdcall *get_baseName )( IXMLDOMNode * This, BSTR *nameString);
HRESULT(__stdcall *transformNodeToObject )( IXMLDOMNode * This, IXMLDOMNode *stylesheet, VARIANT outputObject);
} IXMLDOMNodeVtbl;
struct IXMLDOMNode {
struct IXMLDOMNodeVtbl *lpVtbl;
};
extern const IID IID_IXMLDOMDocumentFragment;
typedef struct IXMLDOMDocumentFragmentVtbl {
HRESULT(__stdcall *QueryInterface )( IXMLDOMDocumentFragment * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( IXMLDOMDocumentFragment * This);
ULONG(__stdcall *Release )( IXMLDOMDocumentFragment * This);
HRESULT(__stdcall *GetTypeInfoCount )( IXMLDOMDocumentFragment * This, UINT *pctinfo);
HRESULT(__stdcall *GetTypeInfo )( IXMLDOMDocumentFragment * This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);
HRESULT(__stdcall *GetIDsOfNames )( IXMLDOMDocumentFragment * This, const IID * const riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);
HRESULT(__stdcall *Invoke )( IXMLDOMDocumentFragment * This, DISPID dispIdMember, const IID * const riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);
HRESULT(__stdcall *get_nodeName )( IXMLDOMDocumentFragment * This, BSTR *name);
HRESULT(__stdcall *get_nodeValue )( IXMLDOMDocumentFragment * This, VARIANT *value);
HRESULT(__stdcall *put_nodeValue )( IXMLDOMDocumentFragment * This, VARIANT value);
HRESULT(__stdcall *get_nodeType )( IXMLDOMDocumentFragment * This, DOMNodeType *type);
HRESULT(__stdcall *get_parentNode )( IXMLDOMDocumentFragment * This, IXMLDOMNode **parent);
HRESULT(__stdcall *get_childNodes )( IXMLDOMDocumentFragment * This, IXMLDOMNodeList **childList);
HRESULT(__stdcall *get_firstChild )( IXMLDOMDocumentFragment * This, IXMLDOMNode **firstChild);
HRESULT(__stdcall *get_lastChild )( IXMLDOMDocumentFragment * This, IXMLDOMNode **lastChild);
HRESULT(__stdcall *get_previousSibling )( IXMLDOMDocumentFragment * This, IXMLDOMNode **previousSibling);
HRESULT(__stdcall *get_nextSibling )( IXMLDOMDocumentFragment * This, IXMLDOMNode **nextSibling);
HRESULT(__stdcall *get_attributes )( IXMLDOMDocumentFragment * This, IXMLDOMNamedNodeMap **attributeMap);
HRESULT(__stdcall *insertBefore )( IXMLDOMDocumentFragment * This, IXMLDOMNode *newChild, VARIANT refChild, IXMLDOMNode **outNewChild);
HRESULT(__stdcall *replaceChild )( IXMLDOMDocumentFragment * This, IXMLDOMNode *newChild, IXMLDOMNode *oldChild, IXMLDOMNode **outOldChild);
HRESULT(__stdcall *removeChild )( IXMLDOMDocumentFragment * This, IXMLDOMNode *childNode, IXMLDOMNode **oldChild);
HRESULT(__stdcall *appendChild )( IXMLDOMDocumentFragment * This, IXMLDOMNode *newChild, IXMLDOMNode **outNewChild);
HRESULT(__stdcall *hasChildNodes )( IXMLDOMDocumentFragment * This, VARIANT_BOOL *hasChild);
HRESULT(__stdcall *get_ownerDocument )( IXMLDOMDocumentFragment * This, IXMLDOMDocument **XMLDOMDocument);
HRESULT(__stdcall *cloneNode )( IXMLDOMDocumentFragment * This, VARIANT_BOOL deep, IXMLDOMNode **cloneRoot);
HRESULT(__stdcall *get_nodeTypeString )( IXMLDOMDocumentFragment * This, BSTR *nodeType);
HRESULT(__stdcall *get_text )( IXMLDOMDocumentFragment * This, BSTR *text);
HRESULT(__stdcall *put_text )( IXMLDOMDocumentFragment * This, BSTR text);
HRESULT(__stdcall *get_specified )( IXMLDOMDocumentFragment * This, VARIANT_BOOL *isSpecified);
HRESULT(__stdcall *get_definition )( IXMLDOMDocumentFragment * This, IXMLDOMNode **definitionNode);
HRESULT(__stdcall *get_nodeTypedValue )( IXMLDOMDocumentFragment * This, VARIANT *typedValue);
HRESULT(__stdcall *put_nodeTypedValue )( IXMLDOMDocumentFragment * This, VARIANT typedValue);
HRESULT(__stdcall *get_dataType )( IXMLDOMDocumentFragment * This, VARIANT *dataTypeName);
HRESULT(__stdcall *put_dataType )( IXMLDOMDocumentFragment * This, BSTR dataTypeName);
HRESULT(__stdcall *get_xml )( IXMLDOMDocumentFragment * This, BSTR *xmlString);
HRESULT(__stdcall *transformNode )( IXMLDOMDocumentFragment * This, IXMLDOMNode *stylesheet, BSTR *xmlString);
HRESULT(__stdcall *selectNodes )( IXMLDOMDocumentFragment * This, BSTR queryString, IXMLDOMNodeList **resultList);
HRESULT(__stdcall *selectSingleNode )( IXMLDOMDocumentFragment * This, BSTR queryString, IXMLDOMNode **resultNode);
HRESULT(__stdcall *get_parsed )( IXMLDOMDocumentFragment * This, VARIANT_BOOL *isParsed);
HRESULT(__stdcall *get_namespaceURI )( IXMLDOMDocumentFragment * This, BSTR *namespaceURI);
HRESULT(__stdcall *get_prefix )( IXMLDOMDocumentFragment * This, BSTR *prefixString);
HRESULT(__stdcall *get_baseName )( IXMLDOMDocumentFragment * This, BSTR *nameString);
HRESULT(__stdcall *transformNodeToObject )( IXMLDOMDocumentFragment * This, IXMLDOMNode *stylesheet, VARIANT outputObject);
} IXMLDOMDocumentFragmentVtbl;
struct IXMLDOMDocumentFragment {
struct IXMLDOMDocumentFragmentVtbl *lpVtbl;
};
extern const IID IID_IXMLDOMDocument;
typedef struct IXMLDOMDocumentVtbl {
HRESULT(__stdcall *QueryInterface )( IXMLDOMDocument * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( IXMLDOMDocument * This);
ULONG(__stdcall *Release )( IXMLDOMDocument * This);
HRESULT(__stdcall *GetTypeInfoCount )( IXMLDOMDocument * This, UINT *pctinfo);
HRESULT(__stdcall *GetTypeInfo )( IXMLDOMDocument * This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);
HRESULT(__stdcall *GetIDsOfNames )( IXMLDOMDocument * This, const IID * const riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);
HRESULT(__stdcall *Invoke )( IXMLDOMDocument * This, DISPID dispIdMember, const IID * const riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);
HRESULT(__stdcall *get_nodeName )( IXMLDOMDocument * This, BSTR *name);
HRESULT(__stdcall *get_nodeValue )( IXMLDOMDocument * This, VARIANT *value);
HRESULT(__stdcall *put_nodeValue )( IXMLDOMDocument * This, VARIANT value);
HRESULT(__stdcall *get_nodeType )( IXMLDOMDocument * This, DOMNodeType *type);
HRESULT(__stdcall *get_parentNode )( IXMLDOMDocument * This, IXMLDOMNode **parent);
HRESULT(__stdcall *get_childNodes )( IXMLDOMDocument * This, IXMLDOMNodeList **childList);
HRESULT(__stdcall *get_firstChild )( IXMLDOMDocument * This, IXMLDOMNode **firstChild);
HRESULT(__stdcall *get_lastChild )( IXMLDOMDocument * This, IXMLDOMNode **lastChild);
HRESULT(__stdcall *get_previousSibling )( IXMLDOMDocument * This, IXMLDOMNode **previousSibling);
HRESULT(__stdcall *get_nextSibling )( IXMLDOMDocument * This, IXMLDOMNode **nextSibling);
HRESULT(__stdcall *get_attributes )( IXMLDOMDocument * This, IXMLDOMNamedNodeMap **attributeMap);
HRESULT(__stdcall *insertBefore )( IXMLDOMDocument * This, IXMLDOMNode *newChild, VARIANT refChild, IXMLDOMNode **outNewChild);
HRESULT(__stdcall *replaceChild )( IXMLDOMDocument * This, IXMLDOMNode *newChild, IXMLDOMNode *oldChild, IXMLDOMNode **outOldChild);
HRESULT(__stdcall *removeChild )( IXMLDOMDocument * This, IXMLDOMNode *childNode, IXMLDOMNode **oldChild);
HRESULT(__stdcall *appendChild )( IXMLDOMDocument * This, IXMLDOMNode *newChild, IXMLDOMNode **outNewChild);
HRESULT(__stdcall *hasChildNodes )( IXMLDOMDocument * This, VARIANT_BOOL *hasChild);
HRESULT(__stdcall *get_ownerDocument )( IXMLDOMDocument * This, IXMLDOMDocument **XMLDOMDocument);
HRESULT(__stdcall *cloneNode )( IXMLDOMDocument * This, VARIANT_BOOL deep, IXMLDOMNode **cloneRoot);
HRESULT(__stdcall *get_nodeTypeString )( IXMLDOMDocument * This, BSTR *nodeType);
HRESULT(__stdcall *get_text )( IXMLDOMDocument * This, BSTR *text);
HRESULT(__stdcall *put_text )( IXMLDOMDocument * This, BSTR text);
HRESULT(__stdcall *get_specified )( IXMLDOMDocument * This, VARIANT_BOOL *isSpecified);
HRESULT(__stdcall *get_definition )( IXMLDOMDocument * This, IXMLDOMNode **definitionNode);
HRESULT(__stdcall *get_nodeTypedValue )( IXMLDOMDocument * This, VARIANT *typedValue);
HRESULT(__stdcall *put_nodeTypedValue )( IXMLDOMDocument * This, VARIANT typedValue);
HRESULT(__stdcall *get_dataType )( IXMLDOMDocument * This, VARIANT *dataTypeName);
HRESULT(__stdcall *put_dataType )( IXMLDOMDocument * This, BSTR dataTypeName);
HRESULT(__stdcall *get_xml )( IXMLDOMDocument * This, BSTR *xmlString);
HRESULT(__stdcall *transformNode )( IXMLDOMDocument * This, IXMLDOMNode *stylesheet, BSTR *xmlString);
HRESULT(__stdcall *selectNodes )( IXMLDOMDocument * This, BSTR queryString, IXMLDOMNodeList **resultList);
HRESULT(__stdcall *selectSingleNode )( IXMLDOMDocument * This, BSTR queryString, IXMLDOMNode **resultNode);
HRESULT(__stdcall *get_parsed )( IXMLDOMDocument * This, VARIANT_BOOL *isParsed);
HRESULT(__stdcall *get_namespaceURI )( IXMLDOMDocument * This, BSTR *namespaceURI);
HRESULT(__stdcall *get_prefix )( IXMLDOMDocument * This, BSTR *prefixString);
HRESULT(__stdcall *get_baseName )( IXMLDOMDocument * This, BSTR *nameString);
HRESULT(__stdcall *transformNodeToObject )( IXMLDOMDocument * This, IXMLDOMNode *stylesheet, VARIANT outputObject);
HRESULT(__stdcall *get_doctype )( IXMLDOMDocument * This, IXMLDOMDocumentType **documentType);
HRESULT(__stdcall *get_implementation )( IXMLDOMDocument * This, IXMLDOMImplementation **impl);
HRESULT(__stdcall *get_documentElement )( IXMLDOMDocument * This, IXMLDOMElement **DOMElement);
HRESULT(__stdcall *putref_documentElement )( IXMLDOMDocument * This, IXMLDOMElement *DOMElement);
HRESULT(__stdcall *createElement )( IXMLDOMDocument * This, BSTR tagName, IXMLDOMElement **element);
HRESULT(__stdcall *createDocumentFragment )( IXMLDOMDocument * This, IXMLDOMDocumentFragment **docFrag);
HRESULT(__stdcall *createTextNode )( IXMLDOMDocument * This, BSTR data, IXMLDOMText **text);
HRESULT(__stdcall *createComment )( IXMLDOMDocument * This, BSTR data, IXMLDOMComment **comment);
HRESULT(__stdcall *createCDATASection )( IXMLDOMDocument * This, BSTR data, IXMLDOMCDATASection **cdata);
HRESULT(__stdcall *createProcessingInstruction )( IXMLDOMDocument * This, BSTR target, BSTR data, IXMLDOMProcessingInstruction **pi);
HRESULT(__stdcall *createAttribute )( IXMLDOMDocument * This, BSTR name, IXMLDOMAttribute **attribute);
HRESULT(__stdcall *createEntityReference )( IXMLDOMDocument * This, BSTR name, IXMLDOMEntityReference **entityRef);
HRESULT(__stdcall *getElementsByTagName )( IXMLDOMDocument * This, BSTR tagName, IXMLDOMNodeList **resultList);
HRESULT(__stdcall *createNode )( IXMLDOMDocument * This, VARIANT Type, BSTR name, BSTR namespaceURI, IXMLDOMNode **node);
HRESULT(__stdcall *nodeFromID )( IXMLDOMDocument * This, BSTR idString, IXMLDOMNode **node);
HRESULT(__stdcall *load )( IXMLDOMDocument * This, VARIANT xmlSource, VARIANT_BOOL *isSuccessful);
HRESULT(__stdcall *get_readyState )( IXMLDOMDocument * This, long *value);
HRESULT(__stdcall *get_parseError )( IXMLDOMDocument * This, IXMLDOMParseError **errorObj);
HRESULT(__stdcall *get_url )( IXMLDOMDocument * This, BSTR *urlString);
HRESULT(__stdcall *get_async )( IXMLDOMDocument * This, VARIANT_BOOL *isAsync);
HRESULT(__stdcall *put_async )( IXMLDOMDocument * This, VARIANT_BOOL isAsync);
HRESULT(__stdcall *abort )( IXMLDOMDocument * This);
HRESULT(__stdcall *loadXML )( IXMLDOMDocument * This, BSTR bstrXML, VARIANT_BOOL *isSuccessful);
HRESULT(__stdcall *save )( IXMLDOMDocument * This, VARIANT destination);
HRESULT(__stdcall *get_validateOnParse )( IXMLDOMDocument * This, VARIANT_BOOL *isValidating);
HRESULT(__stdcall *put_validateOnParse )( IXMLDOMDocument * This, VARIANT_BOOL isValidating);
HRESULT(__stdcall *get_resolveExternals )( IXMLDOMDocument * This, VARIANT_BOOL *isResolving);
HRESULT(__stdcall *put_resolveExternals )( IXMLDOMDocument * This, VARIANT_BOOL isResolving);
HRESULT(__stdcall *get_preserveWhiteSpace )( IXMLDOMDocument * This, VARIANT_BOOL *isPreserving);
HRESULT(__stdcall *put_preserveWhiteSpace )( IXMLDOMDocument * This, VARIANT_BOOL isPreserving);
HRESULT(__stdcall *put_onreadystatechange )( IXMLDOMDocument * This, VARIANT readystatechangeSink);
HRESULT(__stdcall *put_ondataavailable )( IXMLDOMDocument * This, VARIANT ondataavailableSink);
HRESULT(__stdcall *put_ontransformnode )( IXMLDOMDocument * This, VARIANT ontransformnodeSink);
} IXMLDOMDocumentVtbl;
struct IXMLDOMDocument {
struct IXMLDOMDocumentVtbl *lpVtbl;
};
extern const IID IID_IXMLDOMNodeList;
typedef struct IXMLDOMNodeListVtbl {
HRESULT(__stdcall *QueryInterface )( IXMLDOMNodeList * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( IXMLDOMNodeList * This);
ULONG(__stdcall *Release )( IXMLDOMNodeList * This);
HRESULT(__stdcall *GetTypeInfoCount )( IXMLDOMNodeList * This, UINT *pctinfo);
HRESULT(__stdcall *GetTypeInfo )( IXMLDOMNodeList * This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);
HRESULT(__stdcall *GetIDsOfNames )( IXMLDOMNodeList * This, const IID * const riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);
HRESULT(__stdcall *Invoke )( IXMLDOMNodeList * This, DISPID dispIdMember, const IID * const riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);
HRESULT(__stdcall *get_item )( IXMLDOMNodeList * This, long index, IXMLDOMNode **listItem);
HRESULT(__stdcall *get_length )( IXMLDOMNodeList * This, long *listLength);
HRESULT(__stdcall *nextNode )( IXMLDOMNodeList * This, IXMLDOMNode **nextItem);
HRESULT(__stdcall *reset )( IXMLDOMNodeList * This);
HRESULT(__stdcall *get__newEnum )( IXMLDOMNodeList * This, IUnknown **ppUnk);
} IXMLDOMNodeListVtbl;
struct IXMLDOMNodeList {
struct IXMLDOMNodeListVtbl *lpVtbl;
};
extern const IID IID_IXMLDOMNamedNodeMap;
typedef struct IXMLDOMNamedNodeMapVtbl {
HRESULT(__stdcall *QueryInterface )( IXMLDOMNamedNodeMap * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( IXMLDOMNamedNodeMap * This);
ULONG(__stdcall *Release )( IXMLDOMNamedNodeMap * This);
HRESULT(__stdcall *GetTypeInfoCount )( IXMLDOMNamedNodeMap * This, UINT *pctinfo);
HRESULT(__stdcall *GetTypeInfo )( IXMLDOMNamedNodeMap * This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);
HRESULT(__stdcall *GetIDsOfNames )( IXMLDOMNamedNodeMap * This, const IID * const riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);
HRESULT(__stdcall *Invoke )( IXMLDOMNamedNodeMap * This, DISPID dispIdMember, const IID * const riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);
HRESULT(__stdcall *getNamedItem )( IXMLDOMNamedNodeMap * This, BSTR name, IXMLDOMNode **namedItem);
HRESULT(__stdcall *setNamedItem )( IXMLDOMNamedNodeMap * This, IXMLDOMNode *newItem, IXMLDOMNode **nameItem);
HRESULT(__stdcall *removeNamedItem )( IXMLDOMNamedNodeMap * This, BSTR name, IXMLDOMNode **namedItem);
HRESULT(__stdcall *get_item )( IXMLDOMNamedNodeMap * This, long index, IXMLDOMNode **listItem);
HRESULT(__stdcall *get_length )( IXMLDOMNamedNodeMap * This, long *listLength);
HRESULT(__stdcall *getQualifiedItem )( IXMLDOMNamedNodeMap * This, BSTR baseName, BSTR namespaceURI, IXMLDOMNode **qualifiedItem);
HRESULT(__stdcall *removeQualifiedItem )( IXMLDOMNamedNodeMap * This, BSTR baseName, BSTR namespaceURI, IXMLDOMNode **qualifiedItem);
HRESULT(__stdcall *nextNode )( IXMLDOMNamedNodeMap * This, IXMLDOMNode **nextItem);
HRESULT(__stdcall *reset )( IXMLDOMNamedNodeMap * This);
HRESULT(__stdcall *get__newEnum )( IXMLDOMNamedNodeMap * This, IUnknown **ppUnk);
} IXMLDOMNamedNodeMapVtbl;
struct IXMLDOMNamedNodeMap {
struct IXMLDOMNamedNodeMapVtbl *lpVtbl;
};
extern const IID IID_IXMLDOMCharacterData;
typedef struct IXMLDOMCharacterDataVtbl {
HRESULT(__stdcall *QueryInterface )( IXMLDOMCharacterData * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( IXMLDOMCharacterData * This);
ULONG(__stdcall *Release )( IXMLDOMCharacterData * This);
HRESULT(__stdcall *GetTypeInfoCount )( IXMLDOMCharacterData * This, UINT *pctinfo);
HRESULT(__stdcall *GetTypeInfo )( IXMLDOMCharacterData * This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);
HRESULT(__stdcall *GetIDsOfNames )( IXMLDOMCharacterData * This, const IID * const riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);
HRESULT(__stdcall *Invoke )( IXMLDOMCharacterData * This, DISPID dispIdMember, const IID * const riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);
HRESULT(__stdcall *get_nodeName )( IXMLDOMCharacterData * This, BSTR *name);
HRESULT(__stdcall *get_nodeValue )( IXMLDOMCharacterData * This, VARIANT *value);
HRESULT(__stdcall *put_nodeValue )( IXMLDOMCharacterData * This, VARIANT value);
HRESULT(__stdcall *get_nodeType )( IXMLDOMCharacterData * This, DOMNodeType *type);
HRESULT(__stdcall *get_parentNode )( IXMLDOMCharacterData * This, IXMLDOMNode **parent);
HRESULT(__stdcall *get_childNodes )( IXMLDOMCharacterData * This, IXMLDOMNodeList **childList);
HRESULT(__stdcall *get_firstChild )( IXMLDOMCharacterData * This, IXMLDOMNode **firstChild);
HRESULT(__stdcall *get_lastChild )( IXMLDOMCharacterData * This, IXMLDOMNode **lastChild);
HRESULT(__stdcall *get_previousSibling )( IXMLDOMCharacterData * This, IXMLDOMNode **previousSibling);
HRESULT(__stdcall *get_nextSibling )( IXMLDOMCharacterData * This, IXMLDOMNode **nextSibling);
HRESULT(__stdcall *get_attributes )( IXMLDOMCharacterData * This, IXMLDOMNamedNodeMap **attributeMap);
HRESULT(__stdcall *insertBefore )( IXMLDOMCharacterData * This, IXMLDOMNode *newChild, VARIANT refChild, IXMLDOMNode **outNewChild);
HRESULT(__stdcall *replaceChild )( IXMLDOMCharacterData * This, IXMLDOMNode *newChild, IXMLDOMNode *oldChild, IXMLDOMNode **outOldChild);
HRESULT(__stdcall *removeChild )( IXMLDOMCharacterData * This, IXMLDOMNode *childNode, IXMLDOMNode **oldChild);
HRESULT(__stdcall *appendChild )( IXMLDOMCharacterData * This, IXMLDOMNode *newChild, IXMLDOMNode **outNewChild);
HRESULT(__stdcall *hasChildNodes )( IXMLDOMCharacterData * This, VARIANT_BOOL *hasChild);
HRESULT(__stdcall *get_ownerDocument )( IXMLDOMCharacterData * This, IXMLDOMDocument **XMLDOMDocument);
HRESULT(__stdcall *cloneNode )( IXMLDOMCharacterData * This, VARIANT_BOOL deep, IXMLDOMNode **cloneRoot);
HRESULT(__stdcall *get_nodeTypeString )( IXMLDOMCharacterData * This, BSTR *nodeType);
HRESULT(__stdcall *get_text )( IXMLDOMCharacterData * This, BSTR *text);
HRESULT(__stdcall *put_text )( IXMLDOMCharacterData * This, BSTR text);
HRESULT(__stdcall *get_specified )( IXMLDOMCharacterData * This, VARIANT_BOOL *isSpecified);
HRESULT(__stdcall *get_definition )( IXMLDOMCharacterData * This, IXMLDOMNode **definitionNode);
HRESULT(__stdcall *get_nodeTypedValue )( IXMLDOMCharacterData * This, VARIANT *typedValue);
HRESULT(__stdcall *put_nodeTypedValue )( IXMLDOMCharacterData * This, VARIANT typedValue);
HRESULT(__stdcall *get_dataType )( IXMLDOMCharacterData * This, VARIANT *dataTypeName);
HRESULT(__stdcall *put_dataType )( IXMLDOMCharacterData * This, BSTR dataTypeName);
HRESULT(__stdcall *get_xml )( IXMLDOMCharacterData * This, BSTR *xmlString);
HRESULT(__stdcall *transformNode )( IXMLDOMCharacterData * This, IXMLDOMNode *stylesheet, BSTR *xmlString);
HRESULT(__stdcall *selectNodes )( IXMLDOMCharacterData * This, BSTR queryString, IXMLDOMNodeList **resultList);
HRESULT(__stdcall *selectSingleNode )( IXMLDOMCharacterData * This, BSTR queryString, IXMLDOMNode **resultNode);
HRESULT(__stdcall *get_parsed )( IXMLDOMCharacterData * This, VARIANT_BOOL *isParsed);
HRESULT(__stdcall *get_namespaceURI )( IXMLDOMCharacterData * This, BSTR *namespaceURI);
HRESULT(__stdcall *get_prefix )( IXMLDOMCharacterData * This, BSTR *prefixString);
HRESULT(__stdcall *get_baseName )( IXMLDOMCharacterData * This, BSTR *nameString);
HRESULT(__stdcall *transformNodeToObject )( IXMLDOMCharacterData * This, IXMLDOMNode *stylesheet, VARIANT outputObject);
HRESULT(__stdcall *get_data )( IXMLDOMCharacterData * This, BSTR *data);
HRESULT(__stdcall *put_data )( IXMLDOMCharacterData * This, BSTR data);
HRESULT(__stdcall *get_length )( IXMLDOMCharacterData * This, long *dataLength);
HRESULT(__stdcall *substringData )( IXMLDOMCharacterData * This, long offset, long count, BSTR *data);
HRESULT(__stdcall *appendData )( IXMLDOMCharacterData * This, BSTR data);
HRESULT(__stdcall *insertData )( IXMLDOMCharacterData * This, long offset, BSTR data);
HRESULT(__stdcall *deleteData )( IXMLDOMCharacterData * This, long offset, long count);
HRESULT(__stdcall *replaceData )( IXMLDOMCharacterData * This, long offset, long count, BSTR data);
} IXMLDOMCharacterDataVtbl;
struct IXMLDOMCharacterData {
struct IXMLDOMCharacterDataVtbl *lpVtbl;
};
extern const IID IID_IXMLDOMAttribute;
typedef struct IXMLDOMAttributeVtbl {
HRESULT(__stdcall *QueryInterface )( IXMLDOMAttribute * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( IXMLDOMAttribute * This);
ULONG(__stdcall *Release )( IXMLDOMAttribute * This);
HRESULT(__stdcall *GetTypeInfoCount )( IXMLDOMAttribute * This, UINT *pctinfo);
HRESULT(__stdcall *GetTypeInfo )( IXMLDOMAttribute * This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);
HRESULT(__stdcall *GetIDsOfNames )( IXMLDOMAttribute * This, const IID * const riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);
HRESULT(__stdcall *Invoke )( IXMLDOMAttribute * This, DISPID dispIdMember, const IID * const riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);
HRESULT(__stdcall *get_nodeName )( IXMLDOMAttribute * This, BSTR *name);
HRESULT(__stdcall *get_nodeValue )( IXMLDOMAttribute * This, VARIANT *value);
HRESULT(__stdcall *put_nodeValue )( IXMLDOMAttribute * This, VARIANT value);
HRESULT(__stdcall *get_nodeType )( IXMLDOMAttribute * This, DOMNodeType *type);
HRESULT(__stdcall *get_parentNode )( IXMLDOMAttribute * This, IXMLDOMNode **parent);
HRESULT(__stdcall *get_childNodes )( IXMLDOMAttribute * This, IXMLDOMNodeList **childList);
HRESULT(__stdcall *get_firstChild )( IXMLDOMAttribute * This, IXMLDOMNode **firstChild);
HRESULT(__stdcall *get_lastChild )( IXMLDOMAttribute * This, IXMLDOMNode **lastChild);
HRESULT(__stdcall *get_previousSibling )( IXMLDOMAttribute * This, IXMLDOMNode **previousSibling);
HRESULT(__stdcall *get_nextSibling )( IXMLDOMAttribute * This, IXMLDOMNode **nextSibling);
HRESULT(__stdcall *get_attributes )( IXMLDOMAttribute * This, IXMLDOMNamedNodeMap **attributeMap);
HRESULT(__stdcall *insertBefore )( IXMLDOMAttribute * This, IXMLDOMNode *newChild, VARIANT refChild, IXMLDOMNode **outNewChild);
HRESULT(__stdcall *replaceChild )( IXMLDOMAttribute * This, IXMLDOMNode *newChild, IXMLDOMNode *oldChild, IXMLDOMNode **outOldChild);
HRESULT(__stdcall *removeChild )( IXMLDOMAttribute * This, IXMLDOMNode *childNode, IXMLDOMNode **oldChild);
HRESULT(__stdcall *appendChild )( IXMLDOMAttribute * This, IXMLDOMNode *newChild, IXMLDOMNode **outNewChild);
HRESULT(__stdcall *hasChildNodes )( IXMLDOMAttribute * This, VARIANT_BOOL *hasChild);
HRESULT(__stdcall *get_ownerDocument )( IXMLDOMAttribute * This, IXMLDOMDocument **XMLDOMDocument);
HRESULT(__stdcall *cloneNode )( IXMLDOMAttribute * This, VARIANT_BOOL deep, IXMLDOMNode **cloneRoot);
HRESULT(__stdcall *get_nodeTypeString )( IXMLDOMAttribute * This, BSTR *nodeType);
HRESULT(__stdcall *get_text )( IXMLDOMAttribute * This, BSTR *text);
HRESULT(__stdcall *put_text )( IXMLDOMAttribute * This, BSTR text);
HRESULT(__stdcall *get_specified )( IXMLDOMAttribute * This, VARIANT_BOOL *isSpecified);
HRESULT(__stdcall *get_definition )( IXMLDOMAttribute * This, IXMLDOMNode **definitionNode);
HRESULT(__stdcall *get_nodeTypedValue )( IXMLDOMAttribute * This, VARIANT *typedValue);
HRESULT(__stdcall *put_nodeTypedValue )( IXMLDOMAttribute * This, VARIANT typedValue);
HRESULT(__stdcall *get_dataType )( IXMLDOMAttribute * This, VARIANT *dataTypeName);
HRESULT(__stdcall *put_dataType )( IXMLDOMAttribute * This, BSTR dataTypeName);
HRESULT(__stdcall *get_xml )( IXMLDOMAttribute * This, BSTR *xmlString);
HRESULT(__stdcall *transformNode )( IXMLDOMAttribute * This, IXMLDOMNode *stylesheet, BSTR *xmlString);
HRESULT(__stdcall *selectNodes )( IXMLDOMAttribute * This, BSTR queryString, IXMLDOMNodeList **resultList);
HRESULT(__stdcall *selectSingleNode )( IXMLDOMAttribute * This, BSTR queryString, IXMLDOMNode **resultNode);
HRESULT(__stdcall *get_parsed )( IXMLDOMAttribute * This, VARIANT_BOOL *isParsed);
HRESULT(__stdcall *get_namespaceURI )( IXMLDOMAttribute * This, BSTR *namespaceURI);
HRESULT(__stdcall *get_prefix )( IXMLDOMAttribute * This, BSTR *prefixString);
HRESULT(__stdcall *get_baseName )( IXMLDOMAttribute * This, BSTR *nameString);
HRESULT(__stdcall *transformNodeToObject )( IXMLDOMAttribute * This, IXMLDOMNode *stylesheet, VARIANT outputObject);
HRESULT(__stdcall *get_name )( IXMLDOMAttribute * This, BSTR *attributeName);
HRESULT(__stdcall *get_value )( IXMLDOMAttribute * This, VARIANT *attributeValue);
HRESULT(__stdcall *put_value )( IXMLDOMAttribute * This, VARIANT attributeValue);
} IXMLDOMAttributeVtbl;
struct IXMLDOMAttribute {
struct IXMLDOMAttributeVtbl *lpVtbl;
};
extern const IID IID_IXMLDOMElement;
typedef struct IXMLDOMElementVtbl {
HRESULT(__stdcall *QueryInterface )( IXMLDOMElement * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( IXMLDOMElement * This);
ULONG(__stdcall *Release )( IXMLDOMElement * This);
HRESULT(__stdcall *GetTypeInfoCount )( IXMLDOMElement * This, UINT *pctinfo);
HRESULT(__stdcall *GetTypeInfo )( IXMLDOMElement * This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);
HRESULT(__stdcall *GetIDsOfNames )( IXMLDOMElement * This, const IID * const riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);
HRESULT(__stdcall *Invoke )( IXMLDOMElement * This, DISPID dispIdMember, const IID * const riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);
HRESULT(__stdcall *get_nodeName )( IXMLDOMElement * This, BSTR *name);
HRESULT(__stdcall *get_nodeValue )( IXMLDOMElement * This, VARIANT *value);
HRESULT(__stdcall *put_nodeValue )( IXMLDOMElement * This, VARIANT value);
HRESULT(__stdcall *get_nodeType )( IXMLDOMElement * This, DOMNodeType *type);
HRESULT(__stdcall *get_parentNode )( IXMLDOMElement * This, IXMLDOMNode **parent);
HRESULT(__stdcall *get_childNodes )( IXMLDOMElement * This, IXMLDOMNodeList **childList);
HRESULT(__stdcall *get_firstChild )( IXMLDOMElement * This, IXMLDOMNode **firstChild);
HRESULT(__stdcall *get_lastChild )( IXMLDOMElement * This, IXMLDOMNode **lastChild);
HRESULT(__stdcall *get_previousSibling )( IXMLDOMElement * This, IXMLDOMNode **previousSibling);
HRESULT(__stdcall *get_nextSibling )( IXMLDOMElement * This, IXMLDOMNode **nextSibling);
HRESULT(__stdcall *get_attributes )( IXMLDOMElement * This, IXMLDOMNamedNodeMap **attributeMap);
HRESULT(__stdcall *insertBefore )( IXMLDOMElement * This, IXMLDOMNode *newChild, VARIANT refChild, IXMLDOMNode **outNewChild);
HRESULT(__stdcall *replaceChild )( IXMLDOMElement * This, IXMLDOMNode *newChild, IXMLDOMNode *oldChild, IXMLDOMNode **outOldChild);
HRESULT(__stdcall *removeChild )( IXMLDOMElement * This, IXMLDOMNode *childNode, IXMLDOMNode **oldChild);
HRESULT(__stdcall *appendChild )( IXMLDOMElement * This, IXMLDOMNode *newChild, IXMLDOMNode **outNewChild);
HRESULT(__stdcall *hasChildNodes )( IXMLDOMElement * This, VARIANT_BOOL *hasChild);
HRESULT(__stdcall *get_ownerDocument )( IXMLDOMElement * This, IXMLDOMDocument **XMLDOMDocument);
HRESULT(__stdcall *cloneNode )( IXMLDOMElement * This, VARIANT_BOOL deep, IXMLDOMNode **cloneRoot);
HRESULT(__stdcall *get_nodeTypeString )( IXMLDOMElement * This, BSTR *nodeType);
HRESULT(__stdcall *get_text )( IXMLDOMElement * This, BSTR *text);
HRESULT(__stdcall *put_text )( IXMLDOMElement * This, BSTR text);
HRESULT(__stdcall *get_specified )( IXMLDOMElement * This, VARIANT_BOOL *isSpecified);
HRESULT(__stdcall *get_definition )( IXMLDOMElement * This, IXMLDOMNode **definitionNode);
HRESULT(__stdcall *get_nodeTypedValue )( IXMLDOMElement * This, VARIANT *typedValue);
HRESULT(__stdcall *put_nodeTypedValue )( IXMLDOMElement * This, VARIANT typedValue);
HRESULT(__stdcall *get_dataType )( IXMLDOMElement * This, VARIANT *dataTypeName);
HRESULT(__stdcall *put_dataType )( IXMLDOMElement * This, BSTR dataTypeName);
HRESULT(__stdcall *get_xml )( IXMLDOMElement * This, BSTR *xmlString);
HRESULT(__stdcall *transformNode )( IXMLDOMElement * This, IXMLDOMNode *stylesheet, BSTR *xmlString);
HRESULT(__stdcall *selectNodes )( IXMLDOMElement * This, BSTR queryString, IXMLDOMNodeList **resultList);
HRESULT(__stdcall *selectSingleNode )( IXMLDOMElement * This, BSTR queryString, IXMLDOMNode **resultNode);
HRESULT(__stdcall *get_parsed )( IXMLDOMElement * This, VARIANT_BOOL *isParsed);
HRESULT(__stdcall *get_namespaceURI )( IXMLDOMElement * This, BSTR *namespaceURI);
HRESULT(__stdcall *get_prefix )( IXMLDOMElement * This, BSTR *prefixString);
HRESULT(__stdcall *get_baseName )( IXMLDOMElement * This, BSTR *nameString);
HRESULT(__stdcall *transformNodeToObject )( IXMLDOMElement * This, IXMLDOMNode *stylesheet, VARIANT outputObject);
HRESULT(__stdcall *get_tagName )( IXMLDOMElement * This, BSTR *tagName);
HRESULT(__stdcall *getAttribute )( IXMLDOMElement * This, BSTR name, VARIANT *value);
HRESULT(__stdcall *setAttribute )( IXMLDOMElement * This, BSTR name, VARIANT value);
HRESULT(__stdcall *removeAttribute )( IXMLDOMElement * This, BSTR name);
HRESULT(__stdcall *getAttributeNode )( IXMLDOMElement * This, BSTR name, IXMLDOMAttribute **attributeNode);
HRESULT(__stdcall *setAttributeNode )( IXMLDOMElement * This, IXMLDOMAttribute *DOMAttribute, IXMLDOMAttribute **attributeNode);
HRESULT(__stdcall *removeAttributeNode )( IXMLDOMElement * This, IXMLDOMAttribute *DOMAttribute, IXMLDOMAttribute **attributeNode);
HRESULT(__stdcall *getElementsByTagName )( IXMLDOMElement * This, BSTR tagName, IXMLDOMNodeList **resultList);
HRESULT(__stdcall *normalize )( IXMLDOMElement * This);
} IXMLDOMElementVtbl;
struct IXMLDOMElement {
struct IXMLDOMElementVtbl *lpVtbl;
};
extern const IID IID_IXMLDOMText;
typedef struct IXMLDOMTextVtbl {
HRESULT(__stdcall *QueryInterface )( IXMLDOMText * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( IXMLDOMText * This);
ULONG(__stdcall *Release )( IXMLDOMText * This);
HRESULT(__stdcall *GetTypeInfoCount )( IXMLDOMText * This, UINT *pctinfo);
HRESULT(__stdcall *GetTypeInfo )( IXMLDOMText * This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);
HRESULT(__stdcall *GetIDsOfNames )( IXMLDOMText * This, const IID * const riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);
HRESULT(__stdcall *Invoke )( IXMLDOMText * This, DISPID dispIdMember, const IID * const riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);
HRESULT(__stdcall *get_nodeName )( IXMLDOMText * This, BSTR *name);
HRESULT(__stdcall *get_nodeValue )( IXMLDOMText * This, VARIANT *value);
HRESULT(__stdcall *put_nodeValue )( IXMLDOMText * This, VARIANT value);
HRESULT(__stdcall *get_nodeType )( IXMLDOMText * This, DOMNodeType *type);
HRESULT(__stdcall *get_parentNode )( IXMLDOMText * This, IXMLDOMNode **parent);
HRESULT(__stdcall *get_childNodes )( IXMLDOMText * This, IXMLDOMNodeList **childList);
HRESULT(__stdcall *get_firstChild )( IXMLDOMText * This, IXMLDOMNode **firstChild);
HRESULT(__stdcall *get_lastChild )( IXMLDOMText * This, IXMLDOMNode **lastChild);
HRESULT(__stdcall *get_previousSibling )( IXMLDOMText * This, IXMLDOMNode **previousSibling);
HRESULT(__stdcall *get_nextSibling )( IXMLDOMText * This, IXMLDOMNode **nextSibling);
HRESULT(__stdcall *get_attributes )( IXMLDOMText * This, IXMLDOMNamedNodeMap **attributeMap);
HRESULT(__stdcall *insertBefore )( IXMLDOMText * This, IXMLDOMNode *newChild, VARIANT refChild, IXMLDOMNode **outNewChild);
HRESULT(__stdcall *replaceChild )( IXMLDOMText * This, IXMLDOMNode *newChild, IXMLDOMNode *oldChild, IXMLDOMNode **outOldChild);
HRESULT(__stdcall *removeChild )( IXMLDOMText * This, IXMLDOMNode *childNode, IXMLDOMNode **oldChild);
HRESULT(__stdcall *appendChild )( IXMLDOMText * This, IXMLDOMNode *newChild, IXMLDOMNode **outNewChild);
HRESULT(__stdcall *hasChildNodes )( IXMLDOMText * This, VARIANT_BOOL *hasChild);
HRESULT(__stdcall *get_ownerDocument )( IXMLDOMText * This, IXMLDOMDocument **XMLDOMDocument);
HRESULT(__stdcall *cloneNode )( IXMLDOMText * This, VARIANT_BOOL deep, IXMLDOMNode **cloneRoot);
HRESULT(__stdcall *get_nodeTypeString )( IXMLDOMText * This, BSTR *nodeType);
HRESULT(__stdcall *get_text )( IXMLDOMText * This, BSTR *text);
HRESULT(__stdcall *put_text )( IXMLDOMText * This, BSTR text);
HRESULT(__stdcall *get_specified )( IXMLDOMText * This, VARIANT_BOOL *isSpecified);
HRESULT(__stdcall *get_definition )( IXMLDOMText * This, IXMLDOMNode **definitionNode);
HRESULT(__stdcall *get_nodeTypedValue )( IXMLDOMText * This, VARIANT *typedValue);
HRESULT(__stdcall *put_nodeTypedValue )( IXMLDOMText * This, VARIANT typedValue);
HRESULT(__stdcall *get_dataType )( IXMLDOMText * This, VARIANT *dataTypeName);
HRESULT(__stdcall *put_dataType )( IXMLDOMText * This, BSTR dataTypeName);
HRESULT(__stdcall *get_xml )( IXMLDOMText * This, BSTR *xmlString);
HRESULT(__stdcall *transformNode )( IXMLDOMText * This, IXMLDOMNode *stylesheet, BSTR *xmlString);
HRESULT(__stdcall *selectNodes )( IXMLDOMText * This, BSTR queryString, IXMLDOMNodeList **resultList);
HRESULT(__stdcall *selectSingleNode )( IXMLDOMText * This, BSTR queryString, IXMLDOMNode **resultNode);
HRESULT(__stdcall *get_parsed )( IXMLDOMText * This, VARIANT_BOOL *isParsed);
HRESULT(__stdcall *get_namespaceURI )( IXMLDOMText * This, BSTR *namespaceURI);
HRESULT(__stdcall *get_prefix )( IXMLDOMText * This, BSTR *prefixString);
HRESULT(__stdcall *get_baseName )( IXMLDOMText * This, BSTR *nameString);
HRESULT(__stdcall *transformNodeToObject )( IXMLDOMText * This, IXMLDOMNode *stylesheet, VARIANT outputObject);
HRESULT(__stdcall *get_data )( IXMLDOMText * This, BSTR *data);
HRESULT(__stdcall *put_data )( IXMLDOMText * This, BSTR data);
HRESULT(__stdcall *get_length )( IXMLDOMText * This, long *dataLength);
HRESULT(__stdcall *substringData )( IXMLDOMText * This, long offset, long count, BSTR *data);
HRESULT(__stdcall *appendData )( IXMLDOMText * This, BSTR data);
HRESULT(__stdcall *insertData )( IXMLDOMText * This, long offset, BSTR data);
HRESULT(__stdcall *deleteData )( IXMLDOMText * This, long offset, long count);
HRESULT(__stdcall *replaceData )( IXMLDOMText * This, long offset, long count, BSTR data);
HRESULT(__stdcall *splitText )( IXMLDOMText * This, long offset, IXMLDOMText **rightHandTextNode);
} IXMLDOMTextVtbl;
struct IXMLDOMText {
struct IXMLDOMTextVtbl *lpVtbl;
};
extern const IID IID_IXMLDOMComment;
typedef struct IXMLDOMCommentVtbl {
HRESULT(__stdcall *QueryInterface )( IXMLDOMComment * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( IXMLDOMComment * This);
ULONG(__stdcall *Release )( IXMLDOMComment * This);
HRESULT(__stdcall *GetTypeInfoCount )( IXMLDOMComment * This, UINT *pctinfo);
HRESULT(__stdcall *GetTypeInfo )( IXMLDOMComment * This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);
HRESULT(__stdcall *GetIDsOfNames )( IXMLDOMComment * This, const IID * const riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);
HRESULT(__stdcall *Invoke )( IXMLDOMComment * This, DISPID dispIdMember, const IID * const riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);
HRESULT(__stdcall *get_nodeName )( IXMLDOMComment * This, BSTR *name);
HRESULT(__stdcall *get_nodeValue )( IXMLDOMComment * This, VARIANT *value);
HRESULT(__stdcall *put_nodeValue )( IXMLDOMComment * This, VARIANT value);
HRESULT(__stdcall *get_nodeType )( IXMLDOMComment * This, DOMNodeType *type);
HRESULT(__stdcall *get_parentNode )( IXMLDOMComment * This, IXMLDOMNode **parent);
HRESULT(__stdcall *get_childNodes )( IXMLDOMComment * This, IXMLDOMNodeList **childList);
HRESULT(__stdcall *get_firstChild )( IXMLDOMComment * This, IXMLDOMNode **firstChild);
HRESULT(__stdcall *get_lastChild )( IXMLDOMComment * This, IXMLDOMNode **lastChild);
HRESULT(__stdcall *get_previousSibling )( IXMLDOMComment * This, IXMLDOMNode **previousSibling);
HRESULT(__stdcall *get_nextSibling )( IXMLDOMComment * This, IXMLDOMNode **nextSibling);
HRESULT(__stdcall *get_attributes )( IXMLDOMComment * This, IXMLDOMNamedNodeMap **attributeMap);
HRESULT(__stdcall *insertBefore )( IXMLDOMComment * This, IXMLDOMNode *newChild, VARIANT refChild, IXMLDOMNode **outNewChild);
HRESULT(__stdcall *replaceChild )( IXMLDOMComment * This, IXMLDOMNode *newChild, IXMLDOMNode *oldChild, IXMLDOMNode **outOldChild);
HRESULT(__stdcall *removeChild )( IXMLDOMComment * This, IXMLDOMNode *childNode, IXMLDOMNode **oldChild);
HRESULT(__stdcall *appendChild )( IXMLDOMComment * This, IXMLDOMNode *newChild, IXMLDOMNode **outNewChild);
HRESULT(__stdcall *hasChildNodes )( IXMLDOMComment * This, VARIANT_BOOL *hasChild);
HRESULT(__stdcall *get_ownerDocument )( IXMLDOMComment * This, IXMLDOMDocument **XMLDOMDocument);
HRESULT(__stdcall *cloneNode )( IXMLDOMComment * This, VARIANT_BOOL deep, IXMLDOMNode **cloneRoot);
HRESULT(__stdcall *get_nodeTypeString )( IXMLDOMComment * This, BSTR *nodeType);
HRESULT(__stdcall *get_text )( IXMLDOMComment * This, BSTR *text);
HRESULT(__stdcall *put_text )( IXMLDOMComment * This, BSTR text);
HRESULT(__stdcall *get_specified )( IXMLDOMComment * This, VARIANT_BOOL *isSpecified);
HRESULT(__stdcall *get_definition )( IXMLDOMComment * This, IXMLDOMNode **definitionNode);
HRESULT(__stdcall *get_nodeTypedValue )( IXMLDOMComment * This, VARIANT *typedValue);
HRESULT(__stdcall *put_nodeTypedValue )( IXMLDOMComment * This, VARIANT typedValue);
HRESULT(__stdcall *get_dataType )( IXMLDOMComment * This, VARIANT *dataTypeName);
HRESULT(__stdcall *put_dataType )( IXMLDOMComment * This, BSTR dataTypeName);
HRESULT(__stdcall *get_xml )( IXMLDOMComment * This, BSTR *xmlString);
HRESULT(__stdcall *transformNode )( IXMLDOMComment * This, IXMLDOMNode *stylesheet, BSTR *xmlString);
HRESULT(__stdcall *selectNodes )( IXMLDOMComment * This, BSTR queryString, IXMLDOMNodeList **resultList);
HRESULT(__stdcall *selectSingleNode )( IXMLDOMComment * This, BSTR queryString, IXMLDOMNode **resultNode);
HRESULT(__stdcall *get_parsed )( IXMLDOMComment * This, VARIANT_BOOL *isParsed);
HRESULT(__stdcall *get_namespaceURI )( IXMLDOMComment * This, BSTR *namespaceURI);
HRESULT(__stdcall *get_prefix )( IXMLDOMComment * This, BSTR *prefixString);
HRESULT(__stdcall *get_baseName )( IXMLDOMComment * This, BSTR *nameString);
HRESULT(__stdcall *transformNodeToObject )( IXMLDOMComment * This, IXMLDOMNode *stylesheet, VARIANT outputObject);
HRESULT(__stdcall *get_data )( IXMLDOMComment * This, BSTR *data);
HRESULT(__stdcall *put_data )( IXMLDOMComment * This, BSTR data);
HRESULT(__stdcall *get_length )( IXMLDOMComment * This, long *dataLength);
HRESULT(__stdcall *substringData )( IXMLDOMComment * This, long offset, long count, BSTR *data);
HRESULT(__stdcall *appendData )( IXMLDOMComment * This, BSTR data);
HRESULT(__stdcall *insertData )( IXMLDOMComment * This, long offset, BSTR data);
HRESULT(__stdcall *deleteData )( IXMLDOMComment * This, long offset, long count);
HRESULT(__stdcall *replaceData )( IXMLDOMComment * This, long offset, long count, BSTR data);
} IXMLDOMCommentVtbl;
struct IXMLDOMComment {
struct IXMLDOMCommentVtbl *lpVtbl;
};
extern const IID IID_IXMLDOMProcessingInstruction;
typedef struct IXMLDOMProcessingInstructionVtbl {
HRESULT(__stdcall *QueryInterface )( IXMLDOMProcessingInstruction * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( IXMLDOMProcessingInstruction * This);
ULONG(__stdcall *Release )( IXMLDOMProcessingInstruction * This);
HRESULT(__stdcall *GetTypeInfoCount )( IXMLDOMProcessingInstruction * This, UINT *pctinfo);
HRESULT(__stdcall *GetTypeInfo )( IXMLDOMProcessingInstruction * This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);
HRESULT(__stdcall *GetIDsOfNames )( IXMLDOMProcessingInstruction * This, const IID * const riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);
HRESULT(__stdcall *Invoke )( IXMLDOMProcessingInstruction * This, DISPID dispIdMember, const IID * const riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);
HRESULT(__stdcall *get_nodeName )( IXMLDOMProcessingInstruction * This, BSTR *name);
HRESULT(__stdcall *get_nodeValue )( IXMLDOMProcessingInstruction * This, VARIANT *value);
HRESULT(__stdcall *put_nodeValue )( IXMLDOMProcessingInstruction * This, VARIANT value);
HRESULT(__stdcall *get_nodeType )( IXMLDOMProcessingInstruction * This, DOMNodeType *type);
HRESULT(__stdcall *get_parentNode )( IXMLDOMProcessingInstruction * This, IXMLDOMNode **parent);
HRESULT(__stdcall *get_childNodes )( IXMLDOMProcessingInstruction * This, IXMLDOMNodeList **childList);
HRESULT(__stdcall *get_firstChild )( IXMLDOMProcessingInstruction * This, IXMLDOMNode **firstChild);
HRESULT(__stdcall *get_lastChild )( IXMLDOMProcessingInstruction * This, IXMLDOMNode **lastChild);
HRESULT(__stdcall *get_previousSibling )( IXMLDOMProcessingInstruction * This, IXMLDOMNode **previousSibling);
HRESULT(__stdcall *get_nextSibling )( IXMLDOMProcessingInstruction * This, IXMLDOMNode **nextSibling);
HRESULT(__stdcall *get_attributes )( IXMLDOMProcessingInstruction * This, IXMLDOMNamedNodeMap **attributeMap);
HRESULT(__stdcall *insertBefore )( IXMLDOMProcessingInstruction * This, IXMLDOMNode *newChild, VARIANT refChild, IXMLDOMNode **outNewChild);
HRESULT(__stdcall *replaceChild )( IXMLDOMProcessingInstruction * This, IXMLDOMNode *newChild, IXMLDOMNode *oldChild, IXMLDOMNode **outOldChild);
HRESULT(__stdcall *removeChild )( IXMLDOMProcessingInstruction * This, IXMLDOMNode *childNode, IXMLDOMNode **oldChild);
HRESULT(__stdcall *appendChild )( IXMLDOMProcessingInstruction * This, IXMLDOMNode *newChild, IXMLDOMNode **outNewChild);
HRESULT(__stdcall *hasChildNodes )( IXMLDOMProcessingInstruction * This, VARIANT_BOOL *hasChild);
HRESULT(__stdcall *get_ownerDocument )( IXMLDOMProcessingInstruction * This, IXMLDOMDocument **XMLDOMDocument);
HRESULT(__stdcall *cloneNode )( IXMLDOMProcessingInstruction * This, VARIANT_BOOL deep, IXMLDOMNode **cloneRoot);
HRESULT(__stdcall *get_nodeTypeString )( IXMLDOMProcessingInstruction * This, BSTR *nodeType);
HRESULT(__stdcall *get_text )( IXMLDOMProcessingInstruction * This, BSTR *text);
HRESULT(__stdcall *put_text )( IXMLDOMProcessingInstruction * This, BSTR text);
HRESULT(__stdcall *get_specified )( IXMLDOMProcessingInstruction * This, VARIANT_BOOL *isSpecified);
HRESULT(__stdcall *get_definition )( IXMLDOMProcessingInstruction * This, IXMLDOMNode **definitionNode);
HRESULT(__stdcall *get_nodeTypedValue )( IXMLDOMProcessingInstruction * This, VARIANT *typedValue);
HRESULT(__stdcall *put_nodeTypedValue )( IXMLDOMProcessingInstruction * This, VARIANT typedValue);
HRESULT(__stdcall *get_dataType )( IXMLDOMProcessingInstruction * This, VARIANT *dataTypeName);
HRESULT(__stdcall *put_dataType )( IXMLDOMProcessingInstruction * This, BSTR dataTypeName);
HRESULT(__stdcall *get_xml )( IXMLDOMProcessingInstruction * This, BSTR *xmlString);
HRESULT(__stdcall *transformNode )( IXMLDOMProcessingInstruction * This, IXMLDOMNode *stylesheet, BSTR *xmlString);
HRESULT(__stdcall *selectNodes )( IXMLDOMProcessingInstruction * This, BSTR queryString, IXMLDOMNodeList **resultList);
HRESULT(__stdcall *selectSingleNode )( IXMLDOMProcessingInstruction * This, BSTR queryString, IXMLDOMNode **resultNode);
HRESULT(__stdcall *get_parsed )( IXMLDOMProcessingInstruction * This, VARIANT_BOOL *isParsed);
HRESULT(__stdcall *get_namespaceURI )( IXMLDOMProcessingInstruction * This, BSTR *namespaceURI);
HRESULT(__stdcall *get_prefix )( IXMLDOMProcessingInstruction * This, BSTR *prefixString);
HRESULT(__stdcall *get_baseName )( IXMLDOMProcessingInstruction * This, BSTR *nameString);
HRESULT(__stdcall *transformNodeToObject )( IXMLDOMProcessingInstruction * This, IXMLDOMNode *stylesheet, VARIANT outputObject);
HRESULT(__stdcall *get_target )( IXMLDOMProcessingInstruction * This, BSTR *name);
HRESULT(__stdcall *get_data )( IXMLDOMProcessingInstruction * This, BSTR *value);
HRESULT(__stdcall *put_data )( IXMLDOMProcessingInstruction * This, BSTR value);
} IXMLDOMProcessingInstructionVtbl;
struct IXMLDOMProcessingInstruction {
struct IXMLDOMProcessingInstructionVtbl *lpVtbl;
};
extern const IID IID_IXMLDOMCDATASection;
typedef struct IXMLDOMCDATASectionVtbl {
HRESULT(__stdcall *QueryInterface )( IXMLDOMCDATASection * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( IXMLDOMCDATASection * This);
ULONG(__stdcall *Release )( IXMLDOMCDATASection * This);
HRESULT(__stdcall *GetTypeInfoCount )( IXMLDOMCDATASection * This, UINT *pctinfo);
HRESULT(__stdcall *GetTypeInfo )( IXMLDOMCDATASection * This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);
HRESULT(__stdcall *GetIDsOfNames )( IXMLDOMCDATASection * This, const IID * const riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);
HRESULT(__stdcall *Invoke )( IXMLDOMCDATASection * This, DISPID dispIdMember, const IID * const riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);
HRESULT(__stdcall *get_nodeName )( IXMLDOMCDATASection * This, BSTR *name);
HRESULT(__stdcall *get_nodeValue )( IXMLDOMCDATASection * This, VARIANT *value);
HRESULT(__stdcall *put_nodeValue )( IXMLDOMCDATASection * This, VARIANT value);
HRESULT(__stdcall *get_nodeType )( IXMLDOMCDATASection * This, DOMNodeType *type);
HRESULT(__stdcall *get_parentNode )( IXMLDOMCDATASection * This, IXMLDOMNode **parent);
HRESULT(__stdcall *get_childNodes )( IXMLDOMCDATASection * This, IXMLDOMNodeList **childList);
HRESULT(__stdcall *get_firstChild )( IXMLDOMCDATASection * This, IXMLDOMNode **firstChild);
HRESULT(__stdcall *get_lastChild )( IXMLDOMCDATASection * This, IXMLDOMNode **lastChild);
HRESULT(__stdcall *get_previousSibling )( IXMLDOMCDATASection * This, IXMLDOMNode **previousSibling);
HRESULT(__stdcall *get_nextSibling )( IXMLDOMCDATASection * This, IXMLDOMNode **nextSibling);
HRESULT(__stdcall *get_attributes )( IXMLDOMCDATASection * This, IXMLDOMNamedNodeMap **attributeMap);
HRESULT(__stdcall *insertBefore )( IXMLDOMCDATASection * This, IXMLDOMNode *newChild, VARIANT refChild, IXMLDOMNode **outNewChild);
HRESULT(__stdcall *replaceChild )( IXMLDOMCDATASection * This, IXMLDOMNode *newChild, IXMLDOMNode *oldChild, IXMLDOMNode **outOldChild);
HRESULT(__stdcall *removeChild )( IXMLDOMCDATASection * This, IXMLDOMNode *childNode, IXMLDOMNode **oldChild);
HRESULT(__stdcall *appendChild )( IXMLDOMCDATASection * This, IXMLDOMNode *newChild, IXMLDOMNode **outNewChild);
HRESULT(__stdcall *hasChildNodes )( IXMLDOMCDATASection * This, VARIANT_BOOL *hasChild);
HRESULT(__stdcall *get_ownerDocument )( IXMLDOMCDATASection * This, IXMLDOMDocument **XMLDOMDocument);
HRESULT(__stdcall *cloneNode )( IXMLDOMCDATASection * This, VARIANT_BOOL deep, IXMLDOMNode **cloneRoot);
HRESULT(__stdcall *get_nodeTypeString )( IXMLDOMCDATASection * This, BSTR *nodeType);
HRESULT(__stdcall *get_text )( IXMLDOMCDATASection * This, BSTR *text);
HRESULT(__stdcall *put_text )( IXMLDOMCDATASection * This, BSTR text);
HRESULT(__stdcall *get_specified )( IXMLDOMCDATASection * This, VARIANT_BOOL *isSpecified);
HRESULT(__stdcall *get_definition )( IXMLDOMCDATASection * This, IXMLDOMNode **definitionNode);
HRESULT(__stdcall *get_nodeTypedValue )( IXMLDOMCDATASection * This, VARIANT *typedValue);
HRESULT(__stdcall *put_nodeTypedValue )( IXMLDOMCDATASection * This, VARIANT typedValue);
HRESULT(__stdcall *get_dataType )( IXMLDOMCDATASection * This, VARIANT *dataTypeName);
HRESULT(__stdcall *put_dataType )( IXMLDOMCDATASection * This, BSTR dataTypeName);
HRESULT(__stdcall *get_xml )( IXMLDOMCDATASection * This, BSTR *xmlString);
HRESULT(__stdcall *transformNode )( IXMLDOMCDATASection * This, IXMLDOMNode *stylesheet, BSTR *xmlString);
HRESULT(__stdcall *selectNodes )( IXMLDOMCDATASection * This, BSTR queryString, IXMLDOMNodeList **resultList);
HRESULT(__stdcall *selectSingleNode )( IXMLDOMCDATASection * This, BSTR queryString, IXMLDOMNode **resultNode);
HRESULT(__stdcall *get_parsed )( IXMLDOMCDATASection * This, VARIANT_BOOL *isParsed);
HRESULT(__stdcall *get_namespaceURI )( IXMLDOMCDATASection * This, BSTR *namespaceURI);
HRESULT(__stdcall *get_prefix )( IXMLDOMCDATASection * This, BSTR *prefixString);
HRESULT(__stdcall *get_baseName )( IXMLDOMCDATASection * This, BSTR *nameString);
HRESULT(__stdcall *transformNodeToObject )( IXMLDOMCDATASection * This, IXMLDOMNode *stylesheet, VARIANT outputObject);
HRESULT(__stdcall *get_data )( IXMLDOMCDATASection * This, BSTR *data);
HRESULT(__stdcall *put_data )( IXMLDOMCDATASection * This, BSTR data);
HRESULT(__stdcall *get_length )( IXMLDOMCDATASection * This, long *dataLength);
HRESULT(__stdcall *substringData )( IXMLDOMCDATASection * This, long offset, long count, BSTR *data);
HRESULT(__stdcall *appendData )( IXMLDOMCDATASection * This, BSTR data);
HRESULT(__stdcall *insertData )( IXMLDOMCDATASection * This, long offset, BSTR data);
HRESULT(__stdcall *deleteData )( IXMLDOMCDATASection * This, long offset, long count);
HRESULT(__stdcall *replaceData )( IXMLDOMCDATASection * This, long offset, long count, BSTR data);
HRESULT(__stdcall *splitText )( IXMLDOMCDATASection * This, long offset, IXMLDOMText **rightHandTextNode);
} IXMLDOMCDATASectionVtbl;
struct IXMLDOMCDATASection {
struct IXMLDOMCDATASectionVtbl *lpVtbl;
};
extern const IID IID_IXMLDOMDocumentType;
typedef struct IXMLDOMDocumentTypeVtbl {
HRESULT(__stdcall *QueryInterface )( IXMLDOMDocumentType * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( IXMLDOMDocumentType * This);
ULONG(__stdcall *Release )( IXMLDOMDocumentType * This);
HRESULT(__stdcall *GetTypeInfoCount )( IXMLDOMDocumentType * This, UINT *pctinfo);
HRESULT(__stdcall *GetTypeInfo )( IXMLDOMDocumentType * This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);
HRESULT(__stdcall *GetIDsOfNames )( IXMLDOMDocumentType * This, const IID * const riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);
HRESULT(__stdcall *Invoke )( IXMLDOMDocumentType * This, DISPID dispIdMember, const IID * const riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);
HRESULT(__stdcall *get_nodeName )( IXMLDOMDocumentType * This, BSTR *name);
HRESULT(__stdcall *get_nodeValue )( IXMLDOMDocumentType * This, VARIANT *value);
HRESULT(__stdcall *put_nodeValue )( IXMLDOMDocumentType * This, VARIANT value);
HRESULT(__stdcall *get_nodeType )( IXMLDOMDocumentType * This, DOMNodeType *type);
HRESULT(__stdcall *get_parentNode )( IXMLDOMDocumentType * This, IXMLDOMNode **parent);
HRESULT(__stdcall *get_childNodes )( IXMLDOMDocumentType * This, IXMLDOMNodeList **childList);
HRESULT(__stdcall *get_firstChild )( IXMLDOMDocumentType * This, IXMLDOMNode **firstChild);
HRESULT(__stdcall *get_lastChild )( IXMLDOMDocumentType * This, IXMLDOMNode **lastChild);
HRESULT(__stdcall *get_previousSibling )( IXMLDOMDocumentType * This, IXMLDOMNode **previousSibling);
HRESULT(__stdcall *get_nextSibling )( IXMLDOMDocumentType * This, IXMLDOMNode **nextSibling);
HRESULT(__stdcall *get_attributes )( IXMLDOMDocumentType * This, IXMLDOMNamedNodeMap **attributeMap);
HRESULT(__stdcall *insertBefore )( IXMLDOMDocumentType * This, IXMLDOMNode *newChild, VARIANT refChild, IXMLDOMNode **outNewChild);
HRESULT(__stdcall *replaceChild )( IXMLDOMDocumentType * This, IXMLDOMNode *newChild, IXMLDOMNode *oldChild, IXMLDOMNode **outOldChild);
HRESULT(__stdcall *removeChild )( IXMLDOMDocumentType * This, IXMLDOMNode *childNode, IXMLDOMNode **oldChild);
HRESULT(__stdcall *appendChild )( IXMLDOMDocumentType * This, IXMLDOMNode *newChild, IXMLDOMNode **outNewChild);
HRESULT(__stdcall *hasChildNodes )( IXMLDOMDocumentType * This, VARIANT_BOOL *hasChild);
HRESULT(__stdcall *get_ownerDocument )( IXMLDOMDocumentType * This, IXMLDOMDocument **XMLDOMDocument);
HRESULT(__stdcall *cloneNode )( IXMLDOMDocumentType * This, VARIANT_BOOL deep, IXMLDOMNode **cloneRoot);
HRESULT(__stdcall *get_nodeTypeString )( IXMLDOMDocumentType * This, BSTR *nodeType);
HRESULT(__stdcall *get_text )( IXMLDOMDocumentType * This, BSTR *text);
HRESULT(__stdcall *put_text )( IXMLDOMDocumentType * This, BSTR text);
HRESULT(__stdcall *get_specified )( IXMLDOMDocumentType * This, VARIANT_BOOL *isSpecified);
HRESULT(__stdcall *get_definition )( IXMLDOMDocumentType * This, IXMLDOMNode **definitionNode);
HRESULT(__stdcall *get_nodeTypedValue )( IXMLDOMDocumentType * This, VARIANT *typedValue);
HRESULT(__stdcall *put_nodeTypedValue )( IXMLDOMDocumentType * This, VARIANT typedValue);
HRESULT(__stdcall *get_dataType )( IXMLDOMDocumentType * This, VARIANT *dataTypeName);
HRESULT(__stdcall *put_dataType )( IXMLDOMDocumentType * This, BSTR dataTypeName);
HRESULT(__stdcall *get_xml )( IXMLDOMDocumentType * This, BSTR *xmlString);
HRESULT(__stdcall *transformNode )( IXMLDOMDocumentType * This, IXMLDOMNode *stylesheet, BSTR *xmlString);
HRESULT(__stdcall *selectNodes )( IXMLDOMDocumentType * This, BSTR queryString, IXMLDOMNodeList **resultList);
HRESULT(__stdcall *selectSingleNode )( IXMLDOMDocumentType * This, BSTR queryString, IXMLDOMNode **resultNode);
HRESULT(__stdcall *get_parsed )( IXMLDOMDocumentType * This, VARIANT_BOOL *isParsed);
HRESULT(__stdcall *get_namespaceURI )( IXMLDOMDocumentType * This, BSTR *namespaceURI);
HRESULT(__stdcall *get_prefix )( IXMLDOMDocumentType * This, BSTR *prefixString);
HRESULT(__stdcall *get_baseName )( IXMLDOMDocumentType * This, BSTR *nameString);
HRESULT(__stdcall *transformNodeToObject )( IXMLDOMDocumentType * This, IXMLDOMNode *stylesheet, VARIANT outputObject);
HRESULT(__stdcall *get_name )( IXMLDOMDocumentType * This, BSTR *rootName);
HRESULT(__stdcall *get_entities )( IXMLDOMDocumentType * This, IXMLDOMNamedNodeMap **entityMap);
HRESULT(__stdcall *get_notations )( IXMLDOMDocumentType * This, IXMLDOMNamedNodeMap **notationMap);
} IXMLDOMDocumentTypeVtbl;
struct IXMLDOMDocumentType {
struct IXMLDOMDocumentTypeVtbl *lpVtbl;
};
extern const IID IID_IXMLDOMNotation;
typedef struct IXMLDOMNotationVtbl {
HRESULT(__stdcall *QueryInterface )( IXMLDOMNotation * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( IXMLDOMNotation * This);
ULONG(__stdcall *Release )( IXMLDOMNotation * This);
HRESULT(__stdcall *GetTypeInfoCount )( IXMLDOMNotation * This, UINT *pctinfo);
HRESULT(__stdcall *GetTypeInfo )( IXMLDOMNotation * This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);
HRESULT(__stdcall *GetIDsOfNames )( IXMLDOMNotation * This, const IID * const riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);
HRESULT(__stdcall *Invoke )( IXMLDOMNotation * This, DISPID dispIdMember, const IID * const riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);
HRESULT(__stdcall *get_nodeName )( IXMLDOMNotation * This, BSTR *name);
HRESULT(__stdcall *get_nodeValue )( IXMLDOMNotation * This, VARIANT *value);
HRESULT(__stdcall *put_nodeValue )( IXMLDOMNotation * This, VARIANT value);
HRESULT(__stdcall *get_nodeType )( IXMLDOMNotation * This, DOMNodeType *type);
HRESULT(__stdcall *get_parentNode )( IXMLDOMNotation * This, IXMLDOMNode **parent);
HRESULT(__stdcall *get_childNodes )( IXMLDOMNotation * This, IXMLDOMNodeList **childList);
HRESULT(__stdcall *get_firstChild )( IXMLDOMNotation * This, IXMLDOMNode **firstChild);
HRESULT(__stdcall *get_lastChild )( IXMLDOMNotation * This, IXMLDOMNode **lastChild);
HRESULT(__stdcall *get_previousSibling )( IXMLDOMNotation * This, IXMLDOMNode **previousSibling);
HRESULT(__stdcall *get_nextSibling )( IXMLDOMNotation * This, IXMLDOMNode **nextSibling);
HRESULT(__stdcall *get_attributes )( IXMLDOMNotation * This, IXMLDOMNamedNodeMap **attributeMap);
HRESULT(__stdcall *insertBefore )( IXMLDOMNotation * This, IXMLDOMNode *newChild, VARIANT refChild, IXMLDOMNode **outNewChild);
HRESULT(__stdcall *replaceChild )( IXMLDOMNotation * This, IXMLDOMNode *newChild, IXMLDOMNode *oldChild, IXMLDOMNode **outOldChild);
HRESULT(__stdcall *removeChild )( IXMLDOMNotation * This, IXMLDOMNode *childNode, IXMLDOMNode **oldChild);
HRESULT(__stdcall *appendChild )( IXMLDOMNotation * This, IXMLDOMNode *newChild, IXMLDOMNode **outNewChild);
HRESULT(__stdcall *hasChildNodes )( IXMLDOMNotation * This, VARIANT_BOOL *hasChild);
HRESULT(__stdcall *get_ownerDocument )( IXMLDOMNotation * This, IXMLDOMDocument **XMLDOMDocument);
HRESULT(__stdcall *cloneNode )( IXMLDOMNotation * This, VARIANT_BOOL deep, IXMLDOMNode **cloneRoot);
HRESULT(__stdcall *get_nodeTypeString )( IXMLDOMNotation * This, BSTR *nodeType);
HRESULT(__stdcall *get_text )( IXMLDOMNotation * This, BSTR *text);
HRESULT(__stdcall *put_text )( IXMLDOMNotation * This, BSTR text);
HRESULT(__stdcall *get_specified )( IXMLDOMNotation * This, VARIANT_BOOL *isSpecified);
HRESULT(__stdcall *get_definition )( IXMLDOMNotation * This, IXMLDOMNode **definitionNode);
HRESULT(__stdcall *get_nodeTypedValue )( IXMLDOMNotation * This, VARIANT *typedValue);
HRESULT(__stdcall *put_nodeTypedValue )( IXMLDOMNotation * This, VARIANT typedValue);
HRESULT(__stdcall *get_dataType )( IXMLDOMNotation * This, VARIANT *dataTypeName);
HRESULT(__stdcall *put_dataType )( IXMLDOMNotation * This, BSTR dataTypeName);
HRESULT(__stdcall *get_xml )( IXMLDOMNotation * This, BSTR *xmlString);
HRESULT(__stdcall *transformNode )( IXMLDOMNotation * This, IXMLDOMNode *stylesheet, BSTR *xmlString);
HRESULT(__stdcall *selectNodes )( IXMLDOMNotation * This, BSTR queryString, IXMLDOMNodeList **resultList);
HRESULT(__stdcall *selectSingleNode )( IXMLDOMNotation * This, BSTR queryString, IXMLDOMNode **resultNode);
HRESULT(__stdcall *get_parsed )( IXMLDOMNotation * This, VARIANT_BOOL *isParsed);
HRESULT(__stdcall *get_namespaceURI )( IXMLDOMNotation * This, BSTR *namespaceURI);
HRESULT(__stdcall *get_prefix )( IXMLDOMNotation * This, BSTR *prefixString);
HRESULT(__stdcall *get_baseName )( IXMLDOMNotation * This, BSTR *nameString);
HRESULT(__stdcall *transformNodeToObject )( IXMLDOMNotation * This, IXMLDOMNode *stylesheet, VARIANT outputObject);
HRESULT(__stdcall *get_publicId )( IXMLDOMNotation * This, VARIANT *publicID);
HRESULT(__stdcall *get_systemId )( IXMLDOMNotation * This, VARIANT *systemID);
} IXMLDOMNotationVtbl;
struct IXMLDOMNotation {
struct IXMLDOMNotationVtbl *lpVtbl;
};
extern const IID IID_IXMLDOMEntity;
typedef struct IXMLDOMEntityVtbl {
HRESULT(__stdcall *QueryInterface )( IXMLDOMEntity * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( IXMLDOMEntity * This);
ULONG(__stdcall *Release )( IXMLDOMEntity * This);
HRESULT(__stdcall *GetTypeInfoCount )( IXMLDOMEntity * This, UINT *pctinfo);
HRESULT(__stdcall *GetTypeInfo )( IXMLDOMEntity * This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);
HRESULT(__stdcall *GetIDsOfNames )( IXMLDOMEntity * This, const IID * const riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);
HRESULT(__stdcall *Invoke )( IXMLDOMEntity * This, DISPID dispIdMember, const IID * const riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);
HRESULT(__stdcall *get_nodeName )( IXMLDOMEntity * This, BSTR *name);
HRESULT(__stdcall *get_nodeValue )( IXMLDOMEntity * This, VARIANT *value);
HRESULT(__stdcall *put_nodeValue )( IXMLDOMEntity * This, VARIANT value);
HRESULT(__stdcall *get_nodeType )( IXMLDOMEntity * This, DOMNodeType *type);
HRESULT(__stdcall *get_parentNode )( IXMLDOMEntity * This, IXMLDOMNode **parent);
HRESULT(__stdcall *get_childNodes )( IXMLDOMEntity * This, IXMLDOMNodeList **childList);
HRESULT(__stdcall *get_firstChild )( IXMLDOMEntity * This, IXMLDOMNode **firstChild);
HRESULT(__stdcall *get_lastChild )( IXMLDOMEntity * This, IXMLDOMNode **lastChild);
HRESULT(__stdcall *get_previousSibling )( IXMLDOMEntity * This, IXMLDOMNode **previousSibling);
HRESULT(__stdcall *get_nextSibling )( IXMLDOMEntity * This, IXMLDOMNode **nextSibling);
HRESULT(__stdcall *get_attributes )( IXMLDOMEntity * This, IXMLDOMNamedNodeMap **attributeMap);
HRESULT(__stdcall *insertBefore )( IXMLDOMEntity * This, IXMLDOMNode *newChild, VARIANT refChild, IXMLDOMNode **outNewChild);
HRESULT(__stdcall *replaceChild )( IXMLDOMEntity * This, IXMLDOMNode *newChild, IXMLDOMNode *oldChild, IXMLDOMNode **outOldChild);
HRESULT(__stdcall *removeChild )( IXMLDOMEntity * This, IXMLDOMNode *childNode, IXMLDOMNode **oldChild);
HRESULT(__stdcall *appendChild )( IXMLDOMEntity * This, IXMLDOMNode *newChild, IXMLDOMNode **outNewChild);
HRESULT(__stdcall *hasChildNodes )( IXMLDOMEntity * This, VARIANT_BOOL *hasChild);
HRESULT(__stdcall *get_ownerDocument )( IXMLDOMEntity * This, IXMLDOMDocument **XMLDOMDocument);
HRESULT(__stdcall *cloneNode )( IXMLDOMEntity * This, VARIANT_BOOL deep, IXMLDOMNode **cloneRoot);
HRESULT(__stdcall *get_nodeTypeString )( IXMLDOMEntity * This, BSTR *nodeType);
HRESULT(__stdcall *get_text )( IXMLDOMEntity * This, BSTR *text);
HRESULT(__stdcall *put_text )( IXMLDOMEntity * This, BSTR text);
HRESULT(__stdcall *get_specified )( IXMLDOMEntity * This, VARIANT_BOOL *isSpecified);
HRESULT(__stdcall *get_definition )( IXMLDOMEntity * This, IXMLDOMNode **definitionNode);
HRESULT(__stdcall *get_nodeTypedValue )( IXMLDOMEntity * This, VARIANT *typedValue);
HRESULT(__stdcall *put_nodeTypedValue )( IXMLDOMEntity * This, VARIANT typedValue);
HRESULT(__stdcall *get_dataType )( IXMLDOMEntity * This, VARIANT *dataTypeName);
HRESULT(__stdcall *put_dataType )( IXMLDOMEntity * This, BSTR dataTypeName);
HRESULT(__stdcall *get_xml )( IXMLDOMEntity * This, BSTR *xmlString);
HRESULT(__stdcall *transformNode )( IXMLDOMEntity * This, IXMLDOMNode *stylesheet, BSTR *xmlString);
HRESULT(__stdcall *selectNodes )( IXMLDOMEntity * This, BSTR queryString, IXMLDOMNodeList **resultList);
HRESULT(__stdcall *selectSingleNode )( IXMLDOMEntity * This, BSTR queryString, IXMLDOMNode **resultNode);
HRESULT(__stdcall *get_parsed )( IXMLDOMEntity * This, VARIANT_BOOL *isParsed);
HRESULT(__stdcall *get_namespaceURI )( IXMLDOMEntity * This, BSTR *namespaceURI);
HRESULT(__stdcall *get_prefix )( IXMLDOMEntity * This, BSTR *prefixString);
HRESULT(__stdcall *get_baseName )( IXMLDOMEntity * This, BSTR *nameString);
HRESULT(__stdcall *transformNodeToObject )( IXMLDOMEntity * This, IXMLDOMNode *stylesheet, VARIANT outputObject);
HRESULT(__stdcall *get_publicId )( IXMLDOMEntity * This, VARIANT *publicID);
HRESULT(__stdcall *get_systemId )( IXMLDOMEntity * This, VARIANT *systemID);
HRESULT(__stdcall *get_notationName )( IXMLDOMEntity * This, BSTR *name);
} IXMLDOMEntityVtbl;
struct IXMLDOMEntity {
struct IXMLDOMEntityVtbl *lpVtbl;
};
extern const IID IID_IXMLDOMEntityReference;
typedef struct IXMLDOMEntityReferenceVtbl {
HRESULT(__stdcall *QueryInterface )( IXMLDOMEntityReference * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( IXMLDOMEntityReference * This);
ULONG(__stdcall *Release )( IXMLDOMEntityReference * This);
HRESULT(__stdcall *GetTypeInfoCount )( IXMLDOMEntityReference * This, UINT *pctinfo);
HRESULT(__stdcall *GetTypeInfo )( IXMLDOMEntityReference * This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);
HRESULT(__stdcall *GetIDsOfNames )( IXMLDOMEntityReference * This, const IID * const riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);
HRESULT(__stdcall *Invoke )( IXMLDOMEntityReference * This, DISPID dispIdMember, const IID * const riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);
HRESULT(__stdcall *get_nodeName )( IXMLDOMEntityReference * This, BSTR *name);
HRESULT(__stdcall *get_nodeValue )( IXMLDOMEntityReference * This, VARIANT *value);
HRESULT(__stdcall *put_nodeValue )( IXMLDOMEntityReference * This, VARIANT value);
HRESULT(__stdcall *get_nodeType )( IXMLDOMEntityReference * This, DOMNodeType *type);
HRESULT(__stdcall *get_parentNode )( IXMLDOMEntityReference * This, IXMLDOMNode **parent);
HRESULT(__stdcall *get_childNodes )( IXMLDOMEntityReference * This, IXMLDOMNodeList **childList);
HRESULT(__stdcall *get_firstChild )( IXMLDOMEntityReference * This, IXMLDOMNode **firstChild);
HRESULT(__stdcall *get_lastChild )( IXMLDOMEntityReference * This, IXMLDOMNode **lastChild);
HRESULT(__stdcall *get_previousSibling )( IXMLDOMEntityReference * This, IXMLDOMNode **previousSibling);
HRESULT(__stdcall *get_nextSibling )( IXMLDOMEntityReference * This, IXMLDOMNode **nextSibling);
HRESULT(__stdcall *get_attributes )( IXMLDOMEntityReference * This, IXMLDOMNamedNodeMap **attributeMap);
HRESULT(__stdcall *insertBefore )( IXMLDOMEntityReference * This, IXMLDOMNode *newChild, VARIANT refChild, IXMLDOMNode **outNewChild);
HRESULT(__stdcall *replaceChild )( IXMLDOMEntityReference * This, IXMLDOMNode *newChild, IXMLDOMNode *oldChild, IXMLDOMNode **outOldChild);
HRESULT(__stdcall *removeChild )( IXMLDOMEntityReference * This, IXMLDOMNode *childNode, IXMLDOMNode **oldChild);
HRESULT(__stdcall *appendChild )( IXMLDOMEntityReference * This, IXMLDOMNode *newChild, IXMLDOMNode **outNewChild);
HRESULT(__stdcall *hasChildNodes )( IXMLDOMEntityReference * This, VARIANT_BOOL *hasChild);
HRESULT(__stdcall *get_ownerDocument )( IXMLDOMEntityReference * This, IXMLDOMDocument **XMLDOMDocument);
HRESULT(__stdcall *cloneNode )( IXMLDOMEntityReference * This, VARIANT_BOOL deep, IXMLDOMNode **cloneRoot);
HRESULT(__stdcall *get_nodeTypeString )( IXMLDOMEntityReference * This, BSTR *nodeType);
HRESULT(__stdcall *get_text )( IXMLDOMEntityReference * This, BSTR *text);
HRESULT(__stdcall *put_text )( IXMLDOMEntityReference * This, BSTR text);
HRESULT(__stdcall *get_specified )( IXMLDOMEntityReference * This, VARIANT_BOOL *isSpecified);
HRESULT(__stdcall *get_definition )( IXMLDOMEntityReference * This, IXMLDOMNode **definitionNode);
HRESULT(__stdcall *get_nodeTypedValue )( IXMLDOMEntityReference * This, VARIANT *typedValue);
HRESULT(__stdcall *put_nodeTypedValue )( IXMLDOMEntityReference * This, VARIANT typedValue);
HRESULT(__stdcall *get_dataType )( IXMLDOMEntityReference * This, VARIANT *dataTypeName);
HRESULT(__stdcall *put_dataType )( IXMLDOMEntityReference * This, BSTR dataTypeName);
HRESULT(__stdcall *get_xml )( IXMLDOMEntityReference * This, BSTR *xmlString);
HRESULT(__stdcall *transformNode )( IXMLDOMEntityReference * This, IXMLDOMNode *stylesheet, BSTR *xmlString);
HRESULT(__stdcall *selectNodes )( IXMLDOMEntityReference * This, BSTR queryString, IXMLDOMNodeList **resultList);
HRESULT(__stdcall *selectSingleNode )( IXMLDOMEntityReference * This, BSTR queryString, IXMLDOMNode **resultNode);
HRESULT(__stdcall *get_parsed )( IXMLDOMEntityReference * This, VARIANT_BOOL *isParsed);
HRESULT(__stdcall *get_namespaceURI )( IXMLDOMEntityReference * This, BSTR *namespaceURI);
HRESULT(__stdcall *get_prefix )( IXMLDOMEntityReference * This, BSTR *prefixString);
HRESULT(__stdcall *get_baseName )( IXMLDOMEntityReference * This, BSTR *nameString);
HRESULT(__stdcall *transformNodeToObject )( IXMLDOMEntityReference * This, IXMLDOMNode *stylesheet, VARIANT outputObject);
} IXMLDOMEntityReferenceVtbl;
struct IXMLDOMEntityReference {
struct IXMLDOMEntityReferenceVtbl *lpVtbl;
};
extern const IID IID_IXMLDOMParseError;
typedef struct IXMLDOMParseErrorVtbl {
HRESULT(__stdcall *QueryInterface )( IXMLDOMParseError * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( IXMLDOMParseError * This);
ULONG(__stdcall *Release )( IXMLDOMParseError * This);
HRESULT(__stdcall *GetTypeInfoCount )( IXMLDOMParseError * This, UINT *pctinfo);
HRESULT(__stdcall *GetTypeInfo )( IXMLDOMParseError * This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);
HRESULT(__stdcall *GetIDsOfNames )( IXMLDOMParseError * This, const IID * const riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);
HRESULT(__stdcall *Invoke )( IXMLDOMParseError * This, DISPID dispIdMember, const IID * const riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);
HRESULT(__stdcall *get_errorCode )( IXMLDOMParseError * This, long *errorCode);
HRESULT(__stdcall *get_url )( IXMLDOMParseError * This, BSTR *urlString);
HRESULT(__stdcall *get_reason )( IXMLDOMParseError * This, BSTR *reasonString);
HRESULT(__stdcall *get_srcText )( IXMLDOMParseError * This, BSTR *sourceString);
HRESULT(__stdcall *get_line )( IXMLDOMParseError * This, long *lineNumber);
HRESULT(__stdcall *get_linepos )( IXMLDOMParseError * This, long *linePosition);
HRESULT(__stdcall *get_filepos )( IXMLDOMParseError * This, long *filePosition);
} IXMLDOMParseErrorVtbl;
struct IXMLDOMParseError {
struct IXMLDOMParseErrorVtbl *lpVtbl;
};
extern const IID IID_IXTLRuntime;
typedef struct IXTLRuntimeVtbl {
HRESULT(__stdcall *QueryInterface )( IXTLRuntime * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( IXTLRuntime * This);
ULONG(__stdcall *Release )( IXTLRuntime * This);
HRESULT(__stdcall *GetTypeInfoCount )( IXTLRuntime * This, UINT *pctinfo);
HRESULT(__stdcall *GetTypeInfo )( IXTLRuntime * This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);
HRESULT(__stdcall *GetIDsOfNames )( IXTLRuntime * This, const IID * const riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);
HRESULT(__stdcall *Invoke )( IXTLRuntime * This, DISPID dispIdMember, const IID * const riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);
HRESULT(__stdcall *get_nodeName )( IXTLRuntime * This, BSTR *name);
HRESULT(__stdcall *get_nodeValue )( IXTLRuntime * This, VARIANT *value);
HRESULT(__stdcall *put_nodeValue )( IXTLRuntime * This, VARIANT value);
HRESULT(__stdcall *get_nodeType )( IXTLRuntime * This, DOMNodeType *type);
HRESULT(__stdcall *get_parentNode )( IXTLRuntime * This, IXMLDOMNode **parent);
HRESULT(__stdcall *get_childNodes )( IXTLRuntime * This, IXMLDOMNodeList **childList);
HRESULT(__stdcall *get_firstChild )( IXTLRuntime * This, IXMLDOMNode **firstChild);
HRESULT(__stdcall *get_lastChild )( IXTLRuntime * This, IXMLDOMNode **lastChild);
HRESULT(__stdcall *get_previousSibling )( IXTLRuntime * This, IXMLDOMNode **previousSibling);
HRESULT(__stdcall *get_nextSibling )( IXTLRuntime * This, IXMLDOMNode **nextSibling);
HRESULT(__stdcall *get_attributes )( IXTLRuntime * This, IXMLDOMNamedNodeMap **attributeMap);
HRESULT(__stdcall *insertBefore )( IXTLRuntime * This, IXMLDOMNode *newChild, VARIANT refChild, IXMLDOMNode **outNewChild);
HRESULT(__stdcall *replaceChild )( IXTLRuntime * This, IXMLDOMNode *newChild, IXMLDOMNode *oldChild, IXMLDOMNode **outOldChild);
HRESULT(__stdcall *removeChild )( IXTLRuntime * This, IXMLDOMNode *childNode, IXMLDOMNode **oldChild);
HRESULT(__stdcall *appendChild )( IXTLRuntime * This, IXMLDOMNode *newChild, IXMLDOMNode **outNewChild);
HRESULT(__stdcall *hasChildNodes )( IXTLRuntime * This, VARIANT_BOOL *hasChild);
HRESULT(__stdcall *get_ownerDocument )( IXTLRuntime * This, IXMLDOMDocument **XMLDOMDocument);
HRESULT(__stdcall *cloneNode )( IXTLRuntime * This, VARIANT_BOOL deep, IXMLDOMNode **cloneRoot);
HRESULT(__stdcall *get_nodeTypeString )( IXTLRuntime * This, BSTR *nodeType);
HRESULT(__stdcall *get_text )( IXTLRuntime * This, BSTR *text);
HRESULT(__stdcall *put_text )( IXTLRuntime * This, BSTR text);
HRESULT(__stdcall *get_specified )( IXTLRuntime * This, VARIANT_BOOL *isSpecified);
HRESULT(__stdcall *get_definition )( IXTLRuntime * This, IXMLDOMNode **definitionNode);
HRESULT(__stdcall *get_nodeTypedValue )( IXTLRuntime * This, VARIANT *typedValue);
HRESULT(__stdcall *put_nodeTypedValue )( IXTLRuntime * This, VARIANT typedValue);
HRESULT(__stdcall *get_dataType )( IXTLRuntime * This, VARIANT *dataTypeName);
HRESULT(__stdcall *put_dataType )( IXTLRuntime * This, BSTR dataTypeName);
HRESULT(__stdcall *get_xml )( IXTLRuntime * This, BSTR *xmlString);
HRESULT(__stdcall *transformNode )( IXTLRuntime * This, IXMLDOMNode *stylesheet, BSTR *xmlString);
HRESULT(__stdcall *selectNodes )( IXTLRuntime * This, BSTR queryString, IXMLDOMNodeList **resultList);
HRESULT(__stdcall *selectSingleNode )( IXTLRuntime * This, BSTR queryString, IXMLDOMNode **resultNode);
HRESULT(__stdcall *get_parsed )( IXTLRuntime * This, VARIANT_BOOL *isParsed);
HRESULT(__stdcall *get_namespaceURI )( IXTLRuntime * This, BSTR *namespaceURI);
HRESULT(__stdcall *get_prefix )( IXTLRuntime * This, BSTR *prefixString);
HRESULT(__stdcall *get_baseName )( IXTLRuntime * This, BSTR *nameString);
HRESULT(__stdcall *transformNodeToObject )( IXTLRuntime * This, IXMLDOMNode *stylesheet, VARIANT outputObject);
HRESULT(__stdcall *uniqueID )( IXTLRuntime * This, IXMLDOMNode *pNode, long *pID);
HRESULT(__stdcall *depth )( IXTLRuntime * This, IXMLDOMNode *pNode, long *pDepth);
HRESULT(__stdcall *childNumber )( IXTLRuntime * This, IXMLDOMNode *pNode, long *pNumber);
HRESULT(__stdcall *ancestorChildNumber )( IXTLRuntime * This, BSTR bstrNodeName, IXMLDOMNode *pNode, long *pNumber);
HRESULT(__stdcall *absoluteChildNumber )( IXTLRuntime * This, IXMLDOMNode *pNode, long *pNumber);
HRESULT(__stdcall *formatIndex )( IXTLRuntime * This, long lIndex, BSTR bstrFormat, BSTR *pbstrFormattedString);
HRESULT(__stdcall *formatNumber )( IXTLRuntime * This, double dblNumber, BSTR bstrFormat, BSTR *pbstrFormattedString);
HRESULT(__stdcall *formatDate )( IXTLRuntime * This, VARIANT varDate, BSTR bstrFormat, VARIANT varDestLocale, BSTR *pbstrFormattedString);
HRESULT(__stdcall *formatTime )( IXTLRuntime * This, VARIANT varTime, BSTR bstrFormat, VARIANT varDestLocale, BSTR *pbstrFormattedString);
} IXTLRuntimeVtbl;
struct IXTLRuntime {
struct IXTLRuntimeVtbl *lpVtbl;
};
extern const IID DIID_XMLDOMDocumentEvents;
typedef struct XMLDOMDocumentEventsVtbl {
HRESULT(__stdcall *QueryInterface )( XMLDOMDocumentEvents * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( XMLDOMDocumentEvents * This);
ULONG(__stdcall *Release )( XMLDOMDocumentEvents * This);
HRESULT(__stdcall *GetTypeInfoCount )( XMLDOMDocumentEvents * This, UINT *pctinfo);
HRESULT(__stdcall *GetTypeInfo )( XMLDOMDocumentEvents * This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);
HRESULT(__stdcall *GetIDsOfNames )( XMLDOMDocumentEvents * This, const IID * const riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);
HRESULT(__stdcall *Invoke )( XMLDOMDocumentEvents * This, DISPID dispIdMember, const IID * const riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);
} XMLDOMDocumentEventsVtbl;
struct XMLDOMDocumentEvents {
struct XMLDOMDocumentEventsVtbl *lpVtbl;
};
extern const CLSID CLSID_DOMDocument;
extern const CLSID CLSID_DOMFreeThreadedDocument;
extern const IID IID_IXMLHttpRequest;
typedef struct IXMLHttpRequestVtbl {
HRESULT(__stdcall *QueryInterface )( IXMLHttpRequest * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( IXMLHttpRequest * This);
ULONG(__stdcall *Release )( IXMLHttpRequest * This);
HRESULT(__stdcall *GetTypeInfoCount )( IXMLHttpRequest * This, UINT *pctinfo);
HRESULT(__stdcall *GetTypeInfo )( IXMLHttpRequest * This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);
HRESULT(__stdcall *GetIDsOfNames )( IXMLHttpRequest * This, const IID * const riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);
HRESULT(__stdcall *Invoke )( IXMLHttpRequest * This, DISPID dispIdMember, const IID * const riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);
HRESULT(__stdcall *open )( IXMLHttpRequest * This, BSTR bstrMethod, BSTR bstrUrl, VARIANT varAsync, VARIANT bstrUser, VARIANT bstrPassword);
HRESULT(__stdcall *setRequestHeader )( IXMLHttpRequest * This, BSTR bstrHeader, BSTR bstrValue);
HRESULT(__stdcall *getResponseHeader )( IXMLHttpRequest * This, BSTR bstrHeader, BSTR *pbstrValue);
HRESULT(__stdcall *getAllResponseHeaders )( IXMLHttpRequest * This, BSTR *pbstrHeaders);
HRESULT(__stdcall *send )( IXMLHttpRequest * This, VARIANT varBody);
HRESULT(__stdcall *abort )( IXMLHttpRequest * This);
HRESULT(__stdcall *get_status )( IXMLHttpRequest * This, long *plStatus);
HRESULT(__stdcall *get_statusText )( IXMLHttpRequest * This, BSTR *pbstrStatus);
HRESULT(__stdcall *get_responseXML )( IXMLHttpRequest * This, IDispatch **ppBody);
HRESULT(__stdcall *get_responseText )( IXMLHttpRequest * This, BSTR *pbstrBody);
HRESULT(__stdcall *get_responseBody )( IXMLHttpRequest * This, VARIANT *pvarBody);
HRESULT(__stdcall *get_responseStream )( IXMLHttpRequest * This, VARIANT *pvarBody);
HRESULT(__stdcall *get_readyState )( IXMLHttpRequest * This, long *plState);
HRESULT(__stdcall *put_onreadystatechange )( IXMLHttpRequest * This, IDispatch *pReadyStateSink);
} IXMLHttpRequestVtbl;
struct IXMLHttpRequest {
struct IXMLHttpRequestVtbl *lpVtbl;
};
extern const CLSID CLSID_XMLHTTPRequest;
extern const IID IID_IXMLDSOControl;
typedef struct IXMLDSOControlVtbl {
HRESULT(__stdcall *QueryInterface )( IXMLDSOControl * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( IXMLDSOControl * This);
ULONG(__stdcall *Release )( IXMLDSOControl * This);
HRESULT(__stdcall *GetTypeInfoCount )( IXMLDSOControl * This, UINT *pctinfo);
HRESULT(__stdcall *GetTypeInfo )( IXMLDSOControl * This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);
HRESULT(__stdcall *GetIDsOfNames )( IXMLDSOControl * This, const IID * const riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);
HRESULT(__stdcall *Invoke )( IXMLDSOControl * This, DISPID dispIdMember, const IID * const riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);
HRESULT(__stdcall *get_XMLDocument )( IXMLDSOControl * This, IXMLDOMDocument **ppDoc);
HRESULT(__stdcall *put_XMLDocument )( IXMLDSOControl * This, IXMLDOMDocument *ppDoc);
HRESULT(__stdcall *get_JavaDSOCompatible )( IXMLDSOControl * This, BOOL *fJavaDSOCompatible);
HRESULT(__stdcall *put_JavaDSOCompatible )( IXMLDSOControl * This, BOOL fJavaDSOCompatible);
HRESULT(__stdcall *get_readyState )( IXMLDSOControl * This, long *state);
} IXMLDSOControlVtbl;
struct IXMLDSOControl {
struct IXMLDSOControlVtbl *lpVtbl;
};
extern const CLSID CLSID_XMLDSOControl;
extern const IID IID_IXMLElementCollection;
typedef struct IXMLElementCollectionVtbl {
HRESULT(__stdcall *QueryInterface )( IXMLElementCollection * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( IXMLElementCollection * This);
ULONG(__stdcall *Release )( IXMLElementCollection * This);
HRESULT(__stdcall *GetTypeInfoCount )( IXMLElementCollection * This, UINT *pctinfo);
HRESULT(__stdcall *GetTypeInfo )( IXMLElementCollection * This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);
HRESULT(__stdcall *GetIDsOfNames )( IXMLElementCollection * This, const IID * const riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);
HRESULT(__stdcall *Invoke )( IXMLElementCollection * This, DISPID dispIdMember, const IID * const riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);
HRESULT(__stdcall *put_length )( IXMLElementCollection * This, long v);
HRESULT(__stdcall *get_length )( IXMLElementCollection * This, long *p);
HRESULT(__stdcall *get__newEnum )( IXMLElementCollection * This, IUnknown **ppUnk);
HRESULT(__stdcall *item )( IXMLElementCollection * This, VARIANT var1, VARIANT var2, IDispatch **ppDisp);
} IXMLElementCollectionVtbl;
struct IXMLElementCollection {
struct IXMLElementCollectionVtbl *lpVtbl;
};
extern const IID IID_IXMLDocument;
typedef struct IXMLDocumentVtbl {
HRESULT(__stdcall *QueryInterface )( IXMLDocument * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( IXMLDocument * This);
ULONG(__stdcall *Release )( IXMLDocument * This);
HRESULT(__stdcall *GetTypeInfoCount )( IXMLDocument * This, UINT *pctinfo);
HRESULT(__stdcall *GetTypeInfo )( IXMLDocument * This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);
HRESULT(__stdcall *GetIDsOfNames )( IXMLDocument * This, const IID * const riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);
HRESULT(__stdcall *Invoke )( IXMLDocument * This, DISPID dispIdMember, const IID * const riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);
HRESULT(__stdcall *get_root )( IXMLDocument * This, IXMLElement **p);
HRESULT(__stdcall *get_fileSize )( IXMLDocument * This, BSTR *p);
HRESULT(__stdcall *get_fileModifiedDate )( IXMLDocument * This, BSTR *p);
HRESULT(__stdcall *get_fileUpdatedDate )( IXMLDocument * This, BSTR *p);
HRESULT(__stdcall *get_URL )( IXMLDocument * This, BSTR *p);
HRESULT(__stdcall *put_URL )( IXMLDocument * This, BSTR p);
HRESULT(__stdcall *get_mimeType )( IXMLDocument * This, BSTR *p);
HRESULT(__stdcall *get_readyState )( IXMLDocument * This, long *pl);
HRESULT(__stdcall *get_charset )( IXMLDocument * This, BSTR *p);
HRESULT(__stdcall *put_charset )( IXMLDocument * This, BSTR p);
HRESULT(__stdcall *get_version )( IXMLDocument * This, BSTR *p);
HRESULT(__stdcall *get_doctype )( IXMLDocument * This, BSTR *p);
HRESULT(__stdcall *get_dtdURL )( IXMLDocument * This, BSTR *p);
HRESULT(__stdcall *createElement )( IXMLDocument * This, VARIANT vType, VARIANT var1, IXMLElement **ppElem);
} IXMLDocumentVtbl;
struct IXMLDocument {
struct IXMLDocumentVtbl *lpVtbl;
};
extern const IID IID_IXMLDocument2;
typedef struct IXMLDocument2Vtbl {
HRESULT(__stdcall *QueryInterface )( IXMLDocument2 * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( IXMLDocument2 * This);
ULONG(__stdcall *Release )( IXMLDocument2 * This);
HRESULT(__stdcall *GetTypeInfoCount )( IXMLDocument2 * This, UINT *pctinfo);
HRESULT(__stdcall *GetTypeInfo )( IXMLDocument2 * This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);
HRESULT(__stdcall *GetIDsOfNames )( IXMLDocument2 * This, const IID * const riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);
HRESULT(__stdcall *Invoke )( IXMLDocument2 * This, DISPID dispIdMember, const IID * const riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);
HRESULT(__stdcall *get_root )( IXMLDocument2 * This, IXMLElement2 **p);
HRESULT(__stdcall *get_fileSize )( IXMLDocument2 * This, BSTR *p);
HRESULT(__stdcall *get_fileModifiedDate )( IXMLDocument2 * This, BSTR *p);
HRESULT(__stdcall *get_fileUpdatedDate )( IXMLDocument2 * This, BSTR *p);
HRESULT(__stdcall *get_URL )( IXMLDocument2 * This, BSTR *p);
HRESULT(__stdcall *put_URL )( IXMLDocument2 * This, BSTR p);
HRESULT(__stdcall *get_mimeType )( IXMLDocument2 * This, BSTR *p);
HRESULT(__stdcall *get_readyState )( IXMLDocument2 * This, long *pl);
HRESULT(__stdcall *get_charset )( IXMLDocument2 * This, BSTR *p);
HRESULT(__stdcall *put_charset )( IXMLDocument2 * This, BSTR p);
HRESULT(__stdcall *get_version )( IXMLDocument2 * This, BSTR *p);
HRESULT(__stdcall *get_doctype )( IXMLDocument2 * This, BSTR *p);
HRESULT(__stdcall *get_dtdURL )( IXMLDocument2 * This, BSTR *p);
HRESULT(__stdcall *createElement )( IXMLDocument2 * This, VARIANT vType, VARIANT var1, IXMLElement2 **ppElem);
HRESULT(__stdcall *get_async )( IXMLDocument2 * This, VARIANT_BOOL *pf);
HRESULT(__stdcall *put_async )( IXMLDocument2 * This, VARIANT_BOOL f);
} IXMLDocument2Vtbl;
struct IXMLDocument2 {
struct IXMLDocument2Vtbl *lpVtbl;
};
extern const IID IID_IXMLElement;
typedef struct IXMLElementVtbl {
HRESULT(__stdcall *QueryInterface )( IXMLElement * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( IXMLElement * This);
ULONG(__stdcall *Release )( IXMLElement * This);
HRESULT(__stdcall *GetTypeInfoCount )( IXMLElement * This, UINT *pctinfo);
HRESULT(__stdcall *GetTypeInfo )( IXMLElement * This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);
HRESULT(__stdcall *GetIDsOfNames )( IXMLElement * This, const IID * const riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);
HRESULT(__stdcall *Invoke )( IXMLElement * This, DISPID dispIdMember, const IID * const riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);
HRESULT(__stdcall *get_tagName )( IXMLElement * This, BSTR *p);
HRESULT(__stdcall *put_tagName )( IXMLElement * This, BSTR p);
HRESULT(__stdcall *get_parent )( IXMLElement * This, IXMLElement **ppParent);
HRESULT(__stdcall *setAttribute )( IXMLElement * This, BSTR strPropertyName, VARIANT PropertyValue);
HRESULT(__stdcall *getAttribute )( IXMLElement * This, BSTR strPropertyName, VARIANT *PropertyValue);
HRESULT(__stdcall *removeAttribute )( IXMLElement * This, BSTR strPropertyName);
HRESULT(__stdcall *get_children )( IXMLElement * This, IXMLElementCollection **pp);
HRESULT(__stdcall *get_type )( IXMLElement * This, long *plType);
HRESULT(__stdcall *get_text )( IXMLElement * This, BSTR *p);
HRESULT(__stdcall *put_text )( IXMLElement * This, BSTR p);
HRESULT(__stdcall *addChild )( IXMLElement * This, IXMLElement *pChildElem, long lIndex, long lReserved);
HRESULT(__stdcall *removeChild )( IXMLElement * This, IXMLElement *pChildElem);
} IXMLElementVtbl;
struct IXMLElement {
struct IXMLElementVtbl *lpVtbl;
};
extern const IID IID_IXMLElement2;
typedef struct IXMLElement2Vtbl {
HRESULT(__stdcall *QueryInterface )( IXMLElement2 * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( IXMLElement2 * This);
ULONG(__stdcall *Release )( IXMLElement2 * This);
HRESULT(__stdcall *GetTypeInfoCount )( IXMLElement2 * This, UINT *pctinfo);
HRESULT(__stdcall *GetTypeInfo )( IXMLElement2 * This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);
HRESULT(__stdcall *GetIDsOfNames )( IXMLElement2 * This, const IID * const riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);
HRESULT(__stdcall *Invoke )( IXMLElement2 * This, DISPID dispIdMember, const IID * const riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);
HRESULT(__stdcall *get_tagName )( IXMLElement2 * This, BSTR *p);
HRESULT(__stdcall *put_tagName )( IXMLElement2 * This, BSTR p);
HRESULT(__stdcall *get_parent )( IXMLElement2 * This, IXMLElement2 **ppParent);
HRESULT(__stdcall *setAttribute )( IXMLElement2 * This, BSTR strPropertyName, VARIANT PropertyValue);
HRESULT(__stdcall *getAttribute )( IXMLElement2 * This, BSTR strPropertyName, VARIANT *PropertyValue);
HRESULT(__stdcall *removeAttribute )( IXMLElement2 * This, BSTR strPropertyName);
HRESULT(__stdcall *get_children )( IXMLElement2 * This, IXMLElementCollection **pp);
HRESULT(__stdcall *get_type )( IXMLElement2 * This, long *plType);
HRESULT(__stdcall *get_text )( IXMLElement2 * This, BSTR *p);
HRESULT(__stdcall *put_text )( IXMLElement2 * This, BSTR p);
HRESULT(__stdcall *addChild )( IXMLElement2 * This, IXMLElement2 *pChildElem, long lIndex, long lReserved);
HRESULT(__stdcall *removeChild )( IXMLElement2 * This, IXMLElement2 *pChildElem);
HRESULT(__stdcall *get_attributes )( IXMLElement2 * This, IXMLElementCollection **pp);
} IXMLElement2Vtbl;
struct IXMLElement2 {
struct IXMLElement2Vtbl *lpVtbl;
};
extern const IID IID_IXMLAttribute;
typedef struct IXMLAttributeVtbl {
HRESULT(__stdcall *QueryInterface )( IXMLAttribute * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( IXMLAttribute * This);
ULONG(__stdcall *Release )( IXMLAttribute * This);
HRESULT(__stdcall *GetTypeInfoCount )( IXMLAttribute * This, UINT *pctinfo);
HRESULT(__stdcall *GetTypeInfo )( IXMLAttribute * This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);
HRESULT(__stdcall *GetIDsOfNames )( IXMLAttribute * This, const IID * const riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);
HRESULT(__stdcall *Invoke )( IXMLAttribute * This, DISPID dispIdMember, const IID * const riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);
HRESULT(__stdcall *get_name )( IXMLAttribute * This, BSTR *n);
HRESULT(__stdcall *get_value )( IXMLAttribute * This, BSTR *v);
} IXMLAttributeVtbl;
struct IXMLAttribute {
struct IXMLAttributeVtbl *lpVtbl;
};
extern const IID IID_IXMLError;
typedef struct IXMLErrorVtbl {
HRESULT(__stdcall *QueryInterface )( IXMLError * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( IXMLError * This);
ULONG(__stdcall *Release )( IXMLError * This);
HRESULT(__stdcall *GetErrorInfo )( IXMLError * This, XML_ERROR *pErrorReturn);
} IXMLErrorVtbl;
struct IXMLError {
struct IXMLErrorVtbl *lpVtbl;
};
extern const CLSID CLSID_XMLDocument;
extern const IID CLSID_SBS_StdURLMoniker;
extern const IID CLSID_SBS_HttpProtocol;
extern const IID CLSID_SBS_FtpProtocol;
extern const IID CLSID_SBS_GopherProtocol;
extern const IID CLSID_SBS_HttpSProtocol;
extern const IID CLSID_SBS_FileProtocol;
extern const IID CLSID_SBS_MkProtocol;
extern const IID CLSID_SBS_UrlMkBindCtx;
extern const IID CLSID_SBS_SoftDistExt;
extern const IID CLSID_SBS_StdEncodingFilterFac;
extern const IID CLSID_SBS_DeCompMimeFilter;
extern const IID CLSID_SBS_CdlProtocol;
extern const IID CLSID_SBS_ClassInstallFilter;
extern const IID CLSID_SBS_InternetSecurityManager;
extern const IID CLSID_SBS_InternetZoneManager;
extern const IID IID_IAsyncMoniker;
extern const IID CLSID_StdURLMoniker;
extern const IID CLSID_HttpProtocol;
extern const IID CLSID_FtpProtocol;
extern const IID CLSID_GopherProtocol;
extern const IID CLSID_HttpSProtocol;
extern const IID CLSID_FileProtocol;
extern const IID CLSID_MkProtocol;
extern const IID CLSID_StdURLProtocol;
extern const IID CLSID_UrlMkBindCtx;
extern const IID CLSID_StdEncodingFilterFac;
extern const IID CLSID_DeCompMimeFilter;
extern const IID CLSID_CdlProtocol;
extern const IID CLSID_ClassInstallFilter;
extern const IID IID_IAsyncBindCtx;
extern HRESULT __stdcall CreateURLMoniker(LPMONIKER pMkCtx, LPCWSTR szURL, LPMONIKER * ppmk);
extern HRESULT __stdcall CreateURLMonikerEx(LPMONIKER pMkCtx, LPCWSTR szURL, LPMONIKER * ppmk, DWORD dwFlags);
extern HRESULT __stdcall GetClassURL(LPCWSTR szURL, CLSID *pClsID);
extern HRESULT __stdcall CreateAsyncBindCtx(DWORD reserved, IBindStatusCallback *pBSCb, IEnumFORMATETC *pEFetc, IBindCtx **ppBC);
extern HRESULT __stdcall CreateURLMonikerEx2(LPMONIKER pMkCtx, IUri* pUri, LPMONIKER * ppmk, DWORD dwFlags);
extern HRESULT __stdcall CreateAsyncBindCtxEx(IBindCtx *pbc, DWORD dwOptions, IBindStatusCallback *pBSCb, IEnumFORMATETC *pEnum, IBindCtx **ppBC, DWORD reserved);
extern HRESULT __stdcall MkParseDisplayNameEx(IBindCtx *pbc, LPCWSTR szDisplayName, ULONG *pchEaten, LPMONIKER *ppmk);
extern HRESULT __stdcall RegisterBindStatusCallback(LPBC pBC, IBindStatusCallback *pBSCb, IBindStatusCallback** ppBSCBPrev, DWORD dwReserved);
extern HRESULT __stdcall RevokeBindStatusCallback(LPBC pBC, IBindStatusCallback *pBSCb);
extern HRESULT __stdcall GetClassFileOrMime(LPBC pBC, LPCWSTR szFilename, LPVOID pBuffer, DWORD cbSize, LPCWSTR szMime, DWORD dwReserved, CLSID *pclsid);
extern HRESULT __stdcall IsValidURL(LPBC pBC, LPCWSTR szURL, DWORD dwReserved);
extern HRESULT __stdcall CoGetClassObjectFromURL( const IID * const rCLASSID, LPCWSTR szCODE, DWORD dwFileVersionMS, DWORD dwFileVersionLS, LPCWSTR szTYPE, LPBINDCTX pBindCtx, DWORD dwClsContext, LPVOID pvReserved, const IID * const riid, LPVOID * ppv);
extern HRESULT __stdcall IEInstallScope( LPDWORD pdwScope);
extern HRESULT __stdcall FaultInIEFeature( HWND hWnd, uCLSSPEC *pClassSpec, QUERYCONTEXT *pQuery, DWORD dwFlags);
extern HRESULT __stdcall GetComponentIDFromCLSSPEC( uCLSSPEC *pClassspec, LPSTR * ppszComponentID);
extern HRESULT __stdcall IsAsyncMoniker(IMoniker* pmk);
extern HRESULT __stdcall CreateURLBinding(LPCWSTR lpszUrl, IBindCtx *pbc, IBinding **ppBdg);
extern HRESULT __stdcall RegisterMediaTypes(UINT ctypes, const LPCSTR* rgszTypes, CLIPFORMAT* rgcfTypes);
extern HRESULT __stdcall FindMediaType(LPCSTR rgszTypes, CLIPFORMAT* rgcfTypes);
extern HRESULT __stdcall CreateFormatEnumerator( UINT cfmtetc, FORMATETC* rgfmtetc, IEnumFORMATETC** ppenumfmtetc);
extern HRESULT __stdcall RegisterFormatEnumerator(LPBC pBC, IEnumFORMATETC *pEFetc, DWORD reserved);
extern HRESULT __stdcall RevokeFormatEnumerator(LPBC pBC, IEnumFORMATETC *pEFetc);
extern HRESULT __stdcall RegisterMediaTypeClass(LPBC pBC, UINT ctypes, const LPCSTR* rgszTypes, CLSID *rgclsID, DWORD reserved);
extern HRESULT __stdcall FindMediaTypeClass(LPBC pBC, LPCSTR szType, CLSID *pclsID, DWORD reserved);
extern HRESULT __stdcall UrlMkSetSessionOption(DWORD dwOption, LPVOID pBuffer, DWORD dwBufferLength, DWORD dwReserved);
extern HRESULT __stdcall UrlMkGetSessionOption(DWORD dwOption, LPVOID pBuffer, DWORD dwBufferLength, DWORD *pdwBufferLengthOut, DWORD dwReserved);
extern HRESULT __stdcall FindMimeFromData( LPBC pBC, LPCWSTR pwzUrl, LPVOID pBuffer, DWORD cbSize, LPCWSTR pwzMimeProposed, DWORD dwMimeFlags, LPWSTR *ppwzMimeOut, DWORD dwReserved);
extern HRESULT __stdcall ObtainUserAgentString( DWORD dwOption, LPSTR pszUAOut, DWORD *cbSize);
extern HRESULT __stdcall CompareSecurityIds(BYTE* pbSecurityId1, DWORD dwLen1, BYTE* pbSecurityId2, DWORD dwLen2, DWORD dwReserved);
extern HRESULT __stdcall CompatFlagsFromClsid(CLSID *pclsid, LPDWORD pdwCompatFlags, LPDWORD pdwMiscStatusFlags);
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0000_v0_0_s_ifspec;
<typedef name="LPPERSISTMONIKER"><ptr><IPersistMoniker /></ptr></typedef>
extern const IID IID_IPersistMoniker;
typedef struct IPersistMonikerVtbl {
HRESULT(__stdcall *QueryInterface )( IPersistMoniker * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( IPersistMoniker * This);
ULONG(__stdcall *Release )( IPersistMoniker * This);
HRESULT(__stdcall *GetClassID )( IPersistMoniker * This, CLSID *pClassID);
HRESULT(__stdcall *IsDirty )( IPersistMoniker * This);
HRESULT(__stdcall *Load )( IPersistMoniker * This, BOOL fFullyAvailable, IMoniker *pimkName, LPBC pibc, DWORD grfMode);
HRESULT(__stdcall *Save )( IPersistMoniker * This, IMoniker *pimkName, LPBC pbc, BOOL fRemember);
HRESULT(__stdcall *SaveCompleted )( IPersistMoniker * This, IMoniker *pimkName, LPBC pibc);
HRESULT(__stdcall *GetCurMoniker )( IPersistMoniker * This, IMoniker **ppimkName);
} IPersistMonikerVtbl;
struct IPersistMoniker {
struct IPersistMonikerVtbl *lpVtbl;
};
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0001_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0001_v0_0_s_ifspec;
<typedef name="LPMONIKERPROP"><ptr><IMonikerProp /></ptr></typedef>
typedef enum __MIDL_IMonikerProp_0001 { MIMETYPEPROP = 0, USE_SRC_URL = 0x1, CLASSIDPROP = 0x2, TRUSTEDDOWNLOADPROP = 0x3, POPUPLEVELPROP = 0x4 } MONIKERPROPERTY;
extern const IID IID_IMonikerProp;
typedef struct IMonikerPropVtbl {
HRESULT(__stdcall *QueryInterface )( IMonikerProp * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( IMonikerProp * This);
ULONG(__stdcall *Release )( IMonikerProp * This);
HRESULT(__stdcall *PutProperty )( IMonikerProp * This, MONIKERPROPERTY mkp, LPCWSTR val);
} IMonikerPropVtbl;
struct IMonikerProp {
struct IMonikerPropVtbl *lpVtbl;
};
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0002_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0002_v0_0_s_ifspec;
<typedef name="LPBINDPROTOCOL"><ptr><IBindProtocol /></ptr></typedef>
extern const IID IID_IBindProtocol;
typedef struct IBindProtocolVtbl {
HRESULT(__stdcall *QueryInterface )( IBindProtocol * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( IBindProtocol * This);
ULONG(__stdcall *Release )( IBindProtocol * This);
HRESULT(__stdcall *CreateBinding )( IBindProtocol * This, LPCWSTR szUrl, IBindCtx *pbc, IBinding **ppb);
} IBindProtocolVtbl;
struct IBindProtocol {
struct IBindProtocolVtbl *lpVtbl;
};
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0003_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0003_v0_0_s_ifspec;
<typedef name="LPBINDING"><ptr><IBinding /></ptr></typedef>
extern const IID IID_IBinding;
typedef struct IBindingVtbl {
HRESULT(__stdcall *QueryInterface )( IBinding * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( IBinding * This);
ULONG(__stdcall *Release )( IBinding * This);
HRESULT(__stdcall *Abort )( IBinding * This);
HRESULT(__stdcall *Suspend )( IBinding * This);
HRESULT(__stdcall *Resume )( IBinding * This);
HRESULT(__stdcall *SetPriority )( IBinding * This, LONG nPriority);
HRESULT(__stdcall *GetPriority )( IBinding * This, LONG *pnPriority);
HRESULT(__stdcall *GetBindResult )( IBinding * This, CLSID *pclsidProtocol, DWORD *pdwResult, LPOLESTR *pszResult, DWORD *pdwReserved);
} IBindingVtbl;
struct IBinding {
struct IBindingVtbl *lpVtbl;
};
HRESULT __stdcall IBinding_RemoteGetBindResult_Proxy( IBinding * This, CLSID *pclsidProtocol, DWORD *pdwResult, LPOLESTR *pszResult, DWORD dwReserved);
void __stdcall IBinding_RemoteGetBindResult_Stub( IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0004_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0004_v0_0_s_ifspec;
<typedef name="LPBINDSTATUSCALLBACK"><ptr><IBindStatusCallback /></ptr></typedef>
typedef enum __MIDL_IBindStatusCallback_0001 { BINDVERB_GET = 0, BINDVERB_POST = 0x1, BINDVERB_PUT = 0x2, BINDVERB_CUSTOM = 0x3, BINDVERB_RESERVED1 = 0x4 } BINDVERB;
typedef enum __MIDL_IBindStatusCallback_0002 { BINDINFOF_URLENCODESTGMEDDATA = 0x1, BINDINFOF_URLENCODEDEXTRAINFO = 0x2 } BINDINFOF;
typedef enum __MIDL_IBindStatusCallback_0003 { BINDF_ASYNCHRONOUS = 0x1, BINDF_ASYNCSTORAGE = 0x2, BINDF_NOPROGRESSIVERENDERING = 0x4, BINDF_OFFLINEOPERATION = 0x8, BINDF_GETNEWESTVERSION = 0x10, BINDF_NOWRITECACHE = 0x20, BINDF_NEEDFILE = 0x40, BINDF_PULLDATA = 0x80, BINDF_IGNORESECURITYPROBLEM = 0x100, BINDF_RESYNCHRONIZE = 0x200, BINDF_HYPERLINK = 0x400, BINDF_NO_UI = 0x800, BINDF_SILENTOPERATION = 0x1000, BINDF_PRAGMA_NO_CACHE = 0x2000, BINDF_GETCLASSOBJECT = 0x4000, BINDF_RESERVED_1 = 0x8000, BINDF_FREE_THREADED = 0x10000, BINDF_DIRECT_READ = 0x20000, BINDF_FORMS_SUBMIT = 0x40000, BINDF_GETFROMCACHE_IF_NET_FAIL = 0x80000, BINDF_FROMURLMON = 0x100000, BINDF_FWD_BACK = 0x200000, BINDF_PREFERDEFAULTHANDLER = 0x400000, BINDF_ENFORCERESTRICTED = 0x800000 } BINDF;
typedef enum __MIDL_IBindStatusCallback_0004 { URL_ENCODING_NONE = 0, URL_ENCODING_ENABLE_UTF8 = 0x10000000, URL_ENCODING_DISABLE_UTF8 = 0x20000000 } URL_ENCODING;
typedef struct _tagBINDINFO {
<field name="cbSize"><ULONG /></field>
<field name="szExtraInfo"><LPWSTR /></field>
<field name="stgmedData"><STGMEDIUM /></field>
<field name="grfBindInfoF"><DWORD /></field>
<field name="dwBindVerb"><DWORD /></field>
<field name="szCustomVerb"><LPWSTR /></field>
<field name="cbstgmedData"><DWORD /></field>
<field name="dwOptions"><DWORD /></field>
<field name="dwOptionsFlags"><DWORD /></field>
<field name="dwCodePage"><DWORD /></field>
<field name="securityAttributes"><SECURITY_ATTRIBUTES /></field>
<field name="iid"><IID /></field>
<field name="pUnk"><ptr><IUnknown /></ptr></field>
<field name="dwReserved"><DWORD /></field>
} BINDINFO;
typedef struct _REMSECURITY_ATTRIBUTES {
<field name="nLength"><DWORD /></field>
<field name="lpSecurityDescriptor"><DWORD /></field>
<field name="bInheritHandle"><BOOL /></field>
} REMSECURITY_ATTRIBUTES;
typedef struct _REMSECURITY_ATTRIBUTES *PREMSECURITY_ATTRIBUTES;
typedef struct _REMSECURITY_ATTRIBUTES *LPREMSECURITY_ATTRIBUTES;
typedef struct _tagRemBINDINFO {
<field name="cbSize"><ULONG /></field>
<field name="szExtraInfo"><LPWSTR /></field>
<field name="grfBindInfoF"><DWORD /></field>
<field name="dwBindVerb"><DWORD /></field>
<field name="szCustomVerb"><LPWSTR /></field>
<field name="cbstgmedData"><DWORD /></field>
<field name="dwOptions"><DWORD /></field>
<field name="dwOptionsFlags"><DWORD /></field>
<field name="dwCodePage"><DWORD /></field>
<field name="securityAttributes"><REMSECURITY_ATTRIBUTES /></field>
<field name="iid"><IID /></field>
<field name="pUnk"><ptr><IUnknown /></ptr></field>
<field name="dwReserved"><DWORD /></field>
} RemBINDINFO;
typedef struct tagRemFORMATETC {
<field name="cfFormat"><DWORD /></field>
<field name="ptd"><DWORD /></field>
<field name="dwAspect"><DWORD /></field>
<field name="lindex"><LONG /></field>
<field name="tymed"><DWORD /></field>
} RemFORMATETC;
typedef struct tagRemFORMATETC *LPREMFORMATETC;
typedef enum __MIDL_IBindStatusCallback_0005 { BINDINFO_OPTIONS_WININETFLAG = 0x10000, BINDINFO_OPTIONS_ENABLE_UTF8 = 0x20000, BINDINFO_OPTIONS_DISABLE_UTF8 = 0x40000, BINDINFO_OPTIONS_USE_IE_ENCODING = 0x80000, BINDINFO_OPTIONS_BINDTOOBJECT = 0x100000, BINDINFO_OPTIONS_SECURITYOPTOUT = 0x200000, BINDINFO_OPTIONS_IGNOREMIMETEXTPLAIN = 0x400000, BINDINFO_OPTIONS_USEBINDSTRINGCREDS = 0x800000, BINDINFO_OPTIONS_IGNOREHTTPHTTPSREDIRECTS = 0x1000000, BINDINFO_OPTIONS_IGNORE_SSLERRORS_ONCE = 0x2000000, BINDINFO_WPC_DOWNLOADBLOCKED = 0x8000000, BINDINFO_WPC_LOGGING_ENABLED = 0x10000000, BINDINFO_OPTIONS_ALLOWCONNECTDATA = 0x20000000, BINDINFO_OPTIONS_DISABLEAUTOREDIRECTS = 0x40000000, BINDINFO_OPTIONS_SHDOCVW_NAVIGATE =(int32 )0x80000000 } BINDINFO_OPTIONS;
typedef enum __MIDL_IBindStatusCallback_0006 { BSCF_FIRSTDATANOTIFICATION = 0x1, BSCF_INTERMEDIATEDATANOTIFICATION = 0x2, BSCF_LASTDATANOTIFICATION = 0x4, BSCF_DATAFULLYAVAILABLE = 0x8, BSCF_AVAILABLEDATASIZEUNKNOWN = 0x10, BSCF_SKIPDRAINDATAFORFILEURLS = 0x20, BSCF_64BITLENGTHDOWNLOAD = 0x40 } BSCF;
typedef enum tagBINDSTATUS { BINDSTATUS_FINDINGRESOURCE = 1, BINDSTATUS_CONNECTING =(BINDSTATUS_FINDINGRESOURCE + 1 ), BINDSTATUS_REDIRECTING =(BINDSTATUS_CONNECTING + 1 ), BINDSTATUS_BEGINDOWNLOADDATA =(BINDSTATUS_REDIRECTING + 1 ), BINDSTATUS_DOWNLOADINGDATA =(BINDSTATUS_BEGINDOWNLOADDATA + 1 ), BINDSTATUS_ENDDOWNLOADDATA =(BINDSTATUS_DOWNLOADINGDATA + 1 ), BINDSTATUS_BEGINDOWNLOADCOMPONENTS =(BINDSTATUS_ENDDOWNLOADDATA + 1 ), BINDSTATUS_INSTALLINGCOMPONENTS =(BINDSTATUS_BEGINDOWNLOADCOMPONENTS + 1 ), BINDSTATUS_ENDDOWNLOADCOMPONENTS =(BINDSTATUS_INSTALLINGCOMPONENTS + 1 ), BINDSTATUS_USINGCACHEDCOPY =(BINDSTATUS_ENDDOWNLOADCOMPONENTS + 1 ), BINDSTATUS_SENDINGREQUEST =(BINDSTATUS_USINGCACHEDCOPY + 1 ), BINDSTATUS_CLASSIDAVAILABLE =(BINDSTATUS_SENDINGREQUEST + 1 ), BINDSTATUS_MIMETYPEAVAILABLE =(BINDSTATUS_CLASSIDAVAILABLE + 1 ), BINDSTATUS_CACHEFILENAMEAVAILABLE =(BINDSTATUS_MIMETYPEAVAILABLE + 1 ), BINDSTATUS_BEGINSYNCOPERATION =(BINDSTATUS_CACHEFILENAMEAVAILABLE + 1 ), BINDSTATUS_ENDSYNCOPERATION =(BINDSTATUS_BEGINSYNCOPERATION + 1 ), BINDSTATUS_BEGINUPLOADDATA =(BINDSTATUS_ENDSYNCOPERATION + 1 ), BINDSTATUS_UPLOADINGDATA =(BINDSTATUS_BEGINUPLOADDATA + 1 ), BINDSTATUS_ENDUPLOADDATA =(BINDSTATUS_UPLOADINGDATA + 1 ), BINDSTATUS_PROTOCOLCLASSID =(BINDSTATUS_ENDUPLOADDATA + 1 ), BINDSTATUS_ENCODING =(BINDSTATUS_PROTOCOLCLASSID + 1 ), BINDSTATUS_VERIFIEDMIMETYPEAVAILABLE =(BINDSTATUS_ENCODING + 1 ), BINDSTATUS_CLASSINSTALLLOCATION =(BINDSTATUS_VERIFIEDMIMETYPEAVAILABLE + 1 ), BINDSTATUS_DECODING =(BINDSTATUS_CLASSINSTALLLOCATION + 1 ), BINDSTATUS_LOADINGMIMEHANDLER =(BINDSTATUS_DECODING + 1 ), BINDSTATUS_CONTENTDISPOSITIONATTACH =(BINDSTATUS_LOADINGMIMEHANDLER + 1 ), BINDSTATUS_FILTERREPORTMIMETYPE =(BINDSTATUS_CONTENTDISPOSITIONATTACH + 1 ), BINDSTATUS_CLSIDCANINSTANTIATE =(BINDSTATUS_FILTERREPORTMIMETYPE + 1 ), BINDSTATUS_IUNKNOWNAVAILABLE =(BINDSTATUS_CLSIDCANINSTANTIATE + 1 ), BINDSTATUS_DIRECTBIND =(BINDSTATUS_IUNKNOWNAVAILABLE + 1 ), BINDSTATUS_RAWMIMETYPE =(BINDSTATUS_DIRECTBIND + 1 ), BINDSTATUS_PROXYDETECTING =(BINDSTATUS_RAWMIMETYPE + 1 ), BINDSTATUS_ACCEPTRANGES =(BINDSTATUS_PROXYDETECTING + 1 ), BINDSTATUS_COOKIE_SENT =(BINDSTATUS_ACCEPTRANGES + 1 ), BINDSTATUS_COMPACT_POLICY_RECEIVED =(BINDSTATUS_COOKIE_SENT + 1 ), BINDSTATUS_COOKIE_SUPPRESSED =(BINDSTATUS_COMPACT_POLICY_RECEIVED + 1 ), BINDSTATUS_COOKIE_STATE_UNKNOWN =(BINDSTATUS_COOKIE_SUPPRESSED + 1 ), BINDSTATUS_COOKIE_STATE_ACCEPT =(BINDSTATUS_COOKIE_STATE_UNKNOWN + 1 ), BINDSTATUS_COOKIE_STATE_REJECT =(BINDSTATUS_COOKIE_STATE_ACCEPT + 1 ), BINDSTATUS_COOKIE_STATE_PROMPT =(BINDSTATUS_COOKIE_STATE_REJECT + 1 ), BINDSTATUS_COOKIE_STATE_LEASH =(BINDSTATUS_COOKIE_STATE_PROMPT + 1 ), BINDSTATUS_COOKIE_STATE_DOWNGRADE =(BINDSTATUS_COOKIE_STATE_LEASH + 1 ), BINDSTATUS_POLICY_HREF =(BINDSTATUS_COOKIE_STATE_DOWNGRADE + 1 ), BINDSTATUS_P3P_HEADER =(BINDSTATUS_POLICY_HREF + 1 ), BINDSTATUS_SESSION_COOKIE_RECEIVED =(BINDSTATUS_P3P_HEADER + 1 ), BINDSTATUS_PERSISTENT_COOKIE_RECEIVED =(BINDSTATUS_SESSION_COOKIE_RECEIVED + 1 ), BINDSTATUS_SESSION_COOKIES_ALLOWED =(BINDSTATUS_PERSISTENT_COOKIE_RECEIVED + 1 ), BINDSTATUS_CACHECONTROL =(BINDSTATUS_SESSION_COOKIES_ALLOWED + 1 ), BINDSTATUS_CONTENTDISPOSITIONFILENAME =(BINDSTATUS_CACHECONTROL + 1 ), BINDSTATUS_MIMETEXTPLAINMISMATCH =(BINDSTATUS_CONTENTDISPOSITIONFILENAME + 1 ), BINDSTATUS_PUBLISHERAVAILABLE =(BINDSTATUS_MIMETEXTPLAINMISMATCH + 1 ), BINDSTATUS_DISPLAYNAMEAVAILABLE =(BINDSTATUS_PUBLISHERAVAILABLE + 1 ), BINDSTATUS_SSLUX_NAVBLOCKED =(BINDSTATUS_DISPLAYNAMEAVAILABLE + 1 ), BINDSTATUS_SERVER_MIMETYPEAVAILABLE =(BINDSTATUS_SSLUX_NAVBLOCKED + 1 ), BINDSTATUS_SNIFFED_CLASSIDAVAILABLE =(BINDSTATUS_SERVER_MIMETYPEAVAILABLE + 1 ), BINDSTATUS_64BIT_PROGRESS =(BINDSTATUS_SNIFFED_CLASSIDAVAILABLE + 1 ) } BINDSTATUS;
extern const IID IID_IBindStatusCallback;
typedef struct IBindStatusCallbackVtbl {
HRESULT(__stdcall *QueryInterface )( IBindStatusCallback * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( IBindStatusCallback * This);
ULONG(__stdcall *Release )( IBindStatusCallback * This);
HRESULT(__stdcall *OnStartBinding )( IBindStatusCallback * This, DWORD dwReserved, IBinding *pib);
HRESULT(__stdcall *GetPriority )( IBindStatusCallback * This, LONG *pnPriority);
HRESULT(__stdcall *OnLowResource )( IBindStatusCallback * This, DWORD reserved);
HRESULT(__stdcall *OnProgress )( IBindStatusCallback * This, ULONG ulProgress, ULONG ulProgressMax, ULONG ulStatusCode, LPCWSTR szStatusText);
HRESULT(__stdcall *OnStopBinding )( IBindStatusCallback * This, HRESULT hresult, LPCWSTR szError);
HRESULT(__stdcall *GetBindInfo )( IBindStatusCallback * This, DWORD *grfBINDF, BINDINFO *pbindinfo);
HRESULT(__stdcall *OnDataAvailable )( IBindStatusCallback * This, DWORD grfBSCF, DWORD dwSize, FORMATETC *pformatetc, STGMEDIUM *pstgmed);
HRESULT(__stdcall *OnObjectAvailable )( IBindStatusCallback * This, const IID * const riid, IUnknown *punk);
} IBindStatusCallbackVtbl;
struct IBindStatusCallback {
struct IBindStatusCallbackVtbl *lpVtbl;
};
HRESULT __stdcall IBindStatusCallback_RemoteGetBindInfo_Proxy( IBindStatusCallback * This, DWORD *grfBINDF, RemBINDINFO *pbindinfo, RemSTGMEDIUM *pstgmed);
void __stdcall IBindStatusCallback_RemoteGetBindInfo_Stub( IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
HRESULT __stdcall IBindStatusCallback_RemoteOnDataAvailable_Proxy( IBindStatusCallback * This, DWORD grfBSCF, DWORD dwSize, RemFORMATETC *pformatetc, RemSTGMEDIUM *pstgmed);
void __stdcall IBindStatusCallback_RemoteOnDataAvailable_Stub( IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0005_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0005_v0_0_s_ifspec;
<typedef name="LPBINDSTATUSCALLBACKEX"><ptr><IBindStatusCallbackEx /></ptr></typedef>
typedef enum __MIDL_IBindStatusCallbackEx_0001 { BINDF2_DISABLEBASICOVERHTTP = 0x1, BINDF2_DISABLEAUTOCOOKIEHANDLING = 0x2, BINDF2_READ_DATA_GREATER_THAN_4GB = 0x4, BINDF2_DISABLE_HTTP_REDIRECT_XSECURITYID = 0x8, BINDF2_RESERVED_3 = 0x20000000, BINDF2_RESERVED_2 = 0x40000000, BINDF2_RESERVED_1 = 0x80000000 } BINDF2;
extern const IID IID_IBindStatusCallbackEx;
typedef struct IBindStatusCallbackExVtbl {
HRESULT(__stdcall *QueryInterface )( IBindStatusCallbackEx * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( IBindStatusCallbackEx * This);
ULONG(__stdcall *Release )( IBindStatusCallbackEx * This);
HRESULT(__stdcall *OnStartBinding )( IBindStatusCallbackEx * This, DWORD dwReserved, IBinding *pib);
HRESULT(__stdcall *GetPriority )( IBindStatusCallbackEx * This, LONG *pnPriority);
HRESULT(__stdcall *OnLowResource )( IBindStatusCallbackEx * This, DWORD reserved);
HRESULT(__stdcall *OnProgress )( IBindStatusCallbackEx * This, ULONG ulProgress, ULONG ulProgressMax, ULONG ulStatusCode, LPCWSTR szStatusText);
HRESULT(__stdcall *OnStopBinding )( IBindStatusCallbackEx * This, HRESULT hresult, LPCWSTR szError);
HRESULT(__stdcall *GetBindInfo )( IBindStatusCallbackEx * This, DWORD *grfBINDF, BINDINFO *pbindinfo);
HRESULT(__stdcall *OnDataAvailable )( IBindStatusCallbackEx * This, DWORD grfBSCF, DWORD dwSize, FORMATETC *pformatetc, STGMEDIUM *pstgmed);
HRESULT(__stdcall *OnObjectAvailable )( IBindStatusCallbackEx * This, const IID * const riid, IUnknown *punk);
HRESULT(__stdcall *GetBindInfoEx )( IBindStatusCallbackEx * This, DWORD *grfBINDF, BINDINFO *pbindinfo, DWORD *grfBINDF2, DWORD *pdwReserved);
} IBindStatusCallbackExVtbl;
struct IBindStatusCallbackEx {
struct IBindStatusCallbackExVtbl *lpVtbl;
};
HRESULT __stdcall IBindStatusCallbackEx_RemoteGetBindInfoEx_Proxy( IBindStatusCallbackEx * This, DWORD *grfBINDF, RemBINDINFO *pbindinfo, RemSTGMEDIUM *pstgmed, DWORD *grfBINDF2, DWORD *pdwReserved);
void __stdcall IBindStatusCallbackEx_RemoteGetBindInfoEx_Stub( IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0006_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0006_v0_0_s_ifspec;
<typedef name="LPAUTHENTICATION"><ptr><IAuthenticate /></ptr></typedef>
extern const IID IID_IAuthenticate;
typedef struct IAuthenticateVtbl {
HRESULT(__stdcall *QueryInterface )( IAuthenticate * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( IAuthenticate * This);
ULONG(__stdcall *Release )( IAuthenticate * This);
HRESULT(__stdcall *Authenticate )( IAuthenticate * This, HWND *phwnd, LPWSTR *pszUsername, LPWSTR *pszPassword);
} IAuthenticateVtbl;
struct IAuthenticate {
struct IAuthenticateVtbl *lpVtbl;
};
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0007_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0007_v0_0_s_ifspec;
<typedef name="LPAUTHENTICATIONEX"><ptr><IAuthenticateEx /></ptr></typedef>
typedef enum __MIDL_IAuthenticateEx_0001 { AUTHENTICATEF_PROXY = 0x1, AUTHENTICATEF_BASIC = 0x2, AUTHENTICATEF_HTTP = 0x4 } AUTHENTICATEF;
typedef struct _tagAUTHENTICATEINFO {
<field name="dwFlags"><DWORD /></field>
<field name="dwReserved"><DWORD /></field>
} AUTHENTICATEINFO;
extern const IID IID_IAuthenticateEx;
typedef struct IAuthenticateExVtbl {
HRESULT(__stdcall *QueryInterface )( IAuthenticateEx * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( IAuthenticateEx * This);
ULONG(__stdcall *Release )( IAuthenticateEx * This);
HRESULT(__stdcall *Authenticate )( IAuthenticateEx * This, HWND *phwnd, LPWSTR *pszUsername, LPWSTR *pszPassword);
HRESULT(__stdcall *AuthenticateEx )( IAuthenticateEx * This, HWND *phwnd, LPWSTR *pszUsername, LPWSTR *pszPassword, AUTHENTICATEINFO *pauthinfo);
} IAuthenticateExVtbl;
struct IAuthenticateEx {
struct IAuthenticateExVtbl *lpVtbl;
};
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0008_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0008_v0_0_s_ifspec;
<typedef name="LPHTTPNEGOTIATE"><ptr><IHttpNegotiate /></ptr></typedef>
extern const IID IID_IHttpNegotiate;
typedef struct IHttpNegotiateVtbl {
HRESULT(__stdcall *QueryInterface )( IHttpNegotiate * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( IHttpNegotiate * This);
ULONG(__stdcall *Release )( IHttpNegotiate * This);
HRESULT(__stdcall *BeginningTransaction )( IHttpNegotiate * This, LPCWSTR szURL, LPCWSTR szHeaders, DWORD dwReserved, LPWSTR *pszAdditionalHeaders);
HRESULT(__stdcall *OnResponse )( IHttpNegotiate * This, DWORD dwResponseCode, LPCWSTR szResponseHeaders, LPCWSTR szRequestHeaders, LPWSTR *pszAdditionalRequestHeaders);
} IHttpNegotiateVtbl;
struct IHttpNegotiate {
struct IHttpNegotiateVtbl *lpVtbl;
};
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0009_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0009_v0_0_s_ifspec;
<typedef name="LPHTTPNEGOTIATE2"><ptr><IHttpNegotiate2 /></ptr></typedef>
extern const IID IID_IHttpNegotiate2;
typedef struct IHttpNegotiate2Vtbl {
HRESULT(__stdcall *QueryInterface )( IHttpNegotiate2 * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( IHttpNegotiate2 * This);
ULONG(__stdcall *Release )( IHttpNegotiate2 * This);
HRESULT(__stdcall *BeginningTransaction )( IHttpNegotiate2 * This, LPCWSTR szURL, LPCWSTR szHeaders, DWORD dwReserved, LPWSTR *pszAdditionalHeaders);
HRESULT(__stdcall *OnResponse )( IHttpNegotiate2 * This, DWORD dwResponseCode, LPCWSTR szResponseHeaders, LPCWSTR szRequestHeaders, LPWSTR *pszAdditionalRequestHeaders);
HRESULT(__stdcall *GetRootSecurityId )( IHttpNegotiate2 * This, BYTE *pbSecurityId, DWORD *pcbSecurityId, DWORD_PTR dwReserved);
} IHttpNegotiate2Vtbl;
struct IHttpNegotiate2 {
struct IHttpNegotiate2Vtbl *lpVtbl;
};
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0010_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0010_v0_0_s_ifspec;
<typedef name="LPHTTPNEGOTIATE3"><ptr><IHttpNegotiate3 /></ptr></typedef>
extern const IID IID_IHttpNegotiate3;
typedef struct IHttpNegotiate3Vtbl {
HRESULT(__stdcall *QueryInterface )( IHttpNegotiate3 * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( IHttpNegotiate3 * This);
ULONG(__stdcall *Release )( IHttpNegotiate3 * This);
HRESULT(__stdcall *BeginningTransaction )( IHttpNegotiate3 * This, LPCWSTR szURL, LPCWSTR szHeaders, DWORD dwReserved, LPWSTR *pszAdditionalHeaders);
HRESULT(__stdcall *OnResponse )( IHttpNegotiate3 * This, DWORD dwResponseCode, LPCWSTR szResponseHeaders, LPCWSTR szRequestHeaders, LPWSTR *pszAdditionalRequestHeaders);
HRESULT(__stdcall *GetRootSecurityId )( IHttpNegotiate3 * This, BYTE *pbSecurityId, DWORD *pcbSecurityId, DWORD_PTR dwReserved);
HRESULT(__stdcall *GetSerializedClientCertContext )( IHttpNegotiate3 * This, BYTE **ppbCert, DWORD *pcbCert);
} IHttpNegotiate3Vtbl;
struct IHttpNegotiate3 {
struct IHttpNegotiate3Vtbl *lpVtbl;
};
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0011_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0011_v0_0_s_ifspec;
<typedef name="LPWININETFILESTREAM"><ptr><IWinInetFileStream /></ptr></typedef>
extern const IID IID_IWinInetFileStream;
typedef struct IWinInetFileStreamVtbl {
HRESULT(__stdcall *QueryInterface )( IWinInetFileStream * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( IWinInetFileStream * This);
ULONG(__stdcall *Release )( IWinInetFileStream * This);
HRESULT(__stdcall *SetHandleForUnlock )( IWinInetFileStream * This, DWORD_PTR hWinInetLockHandle, DWORD_PTR dwReserved);
HRESULT(__stdcall *SetDeleteFile )( IWinInetFileStream * This, DWORD_PTR dwReserved);
} IWinInetFileStreamVtbl;
struct IWinInetFileStream {
struct IWinInetFileStreamVtbl *lpVtbl;
};
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0012_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0012_v0_0_s_ifspec;
<typedef name="LPWINDOWFORBINDINGUI"><ptr><IWindowForBindingUI /></ptr></typedef>
extern const IID IID_IWindowForBindingUI;
typedef struct IWindowForBindingUIVtbl {
HRESULT(__stdcall *QueryInterface )( IWindowForBindingUI * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( IWindowForBindingUI * This);
ULONG(__stdcall *Release )( IWindowForBindingUI * This);
HRESULT(__stdcall *GetWindow )( IWindowForBindingUI * This, const GUID * const rguidReason, HWND *phwnd);
} IWindowForBindingUIVtbl;
struct IWindowForBindingUI {
struct IWindowForBindingUIVtbl *lpVtbl;
};
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0013_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0013_v0_0_s_ifspec;
<typedef name="LPCODEINSTALL"><ptr><ICodeInstall /></ptr></typedef>
typedef enum __MIDL_ICodeInstall_0001 { CIP_DISK_FULL = 0, CIP_ACCESS_DENIED =(CIP_DISK_FULL + 1 ), CIP_NEWER_VERSION_EXISTS =(CIP_ACCESS_DENIED + 1 ), CIP_OLDER_VERSION_EXISTS =(CIP_NEWER_VERSION_EXISTS + 1 ), CIP_NAME_CONFLICT =(CIP_OLDER_VERSION_EXISTS + 1 ), CIP_TRUST_VERIFICATION_COMPONENT_MISSING =(CIP_NAME_CONFLICT + 1 ), CIP_EXE_SELF_REGISTERATION_TIMEOUT =(CIP_TRUST_VERIFICATION_COMPONENT_MISSING + 1 ), CIP_UNSAFE_TO_ABORT =(CIP_EXE_SELF_REGISTERATION_TIMEOUT + 1 ), CIP_NEED_REBOOT =(CIP_UNSAFE_TO_ABORT + 1 ), CIP_NEED_REBOOT_UI_PERMISSION =(CIP_NEED_REBOOT + 1 ) } CIP_STATUS;
extern const IID IID_ICodeInstall;
typedef struct ICodeInstallVtbl {
HRESULT(__stdcall *QueryInterface )( ICodeInstall * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( ICodeInstall * This);
ULONG(__stdcall *Release )( ICodeInstall * This);
HRESULT(__stdcall *GetWindow )( ICodeInstall * This, const GUID * const rguidReason, HWND *phwnd);
HRESULT(__stdcall *OnCodeInstallProblem )( ICodeInstall * This, ULONG ulStatusCode, LPCWSTR szDestination, LPCWSTR szSource, DWORD dwReserved);
} ICodeInstallVtbl;
struct ICodeInstall {
struct ICodeInstallVtbl *lpVtbl;
};
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0014_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0014_v0_0_s_ifspec;
typedef enum __MIDL_IUri_0001 { Uri_PROPERTY_ABSOLUTE_URI = 0, Uri_PROPERTY_STRING_START = Uri_PROPERTY_ABSOLUTE_URI, Uri_PROPERTY_AUTHORITY = 1, Uri_PROPERTY_DISPLAY_URI = 2, Uri_PROPERTY_DOMAIN = 3, Uri_PROPERTY_EXTENSION = 4, Uri_PROPERTY_FRAGMENT = 5, Uri_PROPERTY_HOST = 6, Uri_PROPERTY_PASSWORD = 7, Uri_PROPERTY_PATH = 8, Uri_PROPERTY_PATH_AND_QUERY = 9, Uri_PROPERTY_QUERY = 10, Uri_PROPERTY_RAW_URI = 11, Uri_PROPERTY_SCHEME_NAME = 12, Uri_PROPERTY_USER_INFO = 13, Uri_PROPERTY_USER_NAME = 14, Uri_PROPERTY_STRING_LAST = Uri_PROPERTY_USER_NAME, Uri_PROPERTY_HOST_TYPE = 15, Uri_PROPERTY_DWORD_START = Uri_PROPERTY_HOST_TYPE, Uri_PROPERTY_PORT = 16, Uri_PROPERTY_SCHEME = 17, Uri_PROPERTY_ZONE = 18, Uri_PROPERTY_DWORD_LAST = Uri_PROPERTY_ZONE } Uri_PROPERTY;
typedef enum __MIDL_IUri_0002 { Uri_HOST_UNKNOWN = 0, Uri_HOST_DNS =(Uri_HOST_UNKNOWN + 1 ), Uri_HOST_IPV4 =(Uri_HOST_DNS + 1 ), Uri_HOST_IPV6 =(Uri_HOST_IPV4 + 1 ), Uri_HOST_IDN =(Uri_HOST_IPV6 + 1 ) } Uri_HOST_TYPE;
extern const IID IID_IUri;
typedef struct IUriVtbl {
HRESULT(__stdcall *QueryInterface )( IUri * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( IUri * This);
ULONG(__stdcall *Release )( IUri * This);
HRESULT(__stdcall *GetPropertyBSTR )( IUri * This, Uri_PROPERTY uriProp, BSTR *pbstrProperty, DWORD dwFlags);
HRESULT(__stdcall *GetPropertyLength )( IUri * This, Uri_PROPERTY uriProp, DWORD *pcchProperty, DWORD dwFlags);
HRESULT(__stdcall *GetPropertyDWORD )( IUri * This, Uri_PROPERTY uriProp, DWORD *pdwProperty, DWORD dwFlags);
HRESULT(__stdcall *HasProperty )( IUri * This, Uri_PROPERTY uriProp, BOOL *pfHasProperty);
HRESULT(__stdcall *GetAbsoluteUri )( IUri * This, BSTR *pbstrAbsoluteUri);
HRESULT(__stdcall *GetAuthority )( IUri * This, BSTR *pbstrAuthority);
HRESULT(__stdcall *GetDisplayUri )( IUri * This, BSTR *pbstrDisplayString);
HRESULT(__stdcall *GetDomain )( IUri * This, BSTR *pbstrDomain);
HRESULT(__stdcall *GetExtension )( IUri * This, BSTR *pbstrExtension);
HRESULT(__stdcall *GetFragment )( IUri * This, BSTR *pbstrFragment);
HRESULT(__stdcall *GetHost )( IUri * This, BSTR *pbstrHost);
HRESULT(__stdcall *GetPassword )( IUri * This, BSTR *pbstrPassword);
HRESULT(__stdcall *GetPath )( IUri * This, BSTR *pbstrPath);
HRESULT(__stdcall *GetPathAndQuery )( IUri * This, BSTR *pbstrPathAndQuery);
HRESULT(__stdcall *GetQuery )( IUri * This, BSTR *pbstrQuery);
HRESULT(__stdcall *GetRawUri )( IUri * This, BSTR *pbstrRawUri);
HRESULT(__stdcall *GetSchemeName )( IUri * This, BSTR *pbstrSchemeName);
HRESULT(__stdcall *GetUserInfo )( IUri * This, BSTR *pbstrUserInfo);
HRESULT(__stdcall *GetUserNameA )( IUri * This, BSTR *pbstrUserName);
HRESULT(__stdcall *GetHostType )( IUri * This, DWORD *pdwHostType);
HRESULT(__stdcall *GetPort )( IUri * This, DWORD *pdwPort);
HRESULT(__stdcall *GetScheme )( IUri * This, DWORD *pdwScheme);
HRESULT(__stdcall *GetZone )( IUri * This, DWORD *pdwZone);
HRESULT(__stdcall *GetProperties )( IUri * This, LPDWORD pdwFlags);
HRESULT(__stdcall *IsEqual )( IUri * This, IUri *pUri, BOOL *pfEqual);
} IUriVtbl;
struct IUri {
struct IUriVtbl *lpVtbl;
};
extern HRESULT __stdcall CreateUri( LPCWSTR pwzURI, DWORD dwFlags, DWORD_PTR dwReserved, IUri** ppURI);
extern HRESULT __stdcall CreateUriWithFragment( LPCWSTR pwzURI, LPCWSTR pwzFragment, DWORD dwFlags, DWORD_PTR dwReserved, IUri** ppURI);
extern HRESULT __stdcall CreateUriFromMultiByteString( LPCSTR pszANSIInputUri, DWORD dwEncodingFlags, DWORD dwCodePage, DWORD dwCreateFlags, DWORD_PTR dwReserved, IUri** ppUri);
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0015_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0015_v0_0_s_ifspec;
extern const IID IID_IUriContainer;
typedef struct IUriContainerVtbl {
HRESULT(__stdcall *QueryInterface )( IUriContainer * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( IUriContainer * This);
ULONG(__stdcall *Release )( IUriContainer * This);
HRESULT(__stdcall *GetIUri )( IUriContainer * This, IUri **ppIUri);
} IUriContainerVtbl;
struct IUriContainer {
struct IUriContainerVtbl *lpVtbl;
};
extern const IID IID_IUriBuilder;
typedef struct IUriBuilderVtbl {
HRESULT(__stdcall *QueryInterface )( IUriBuilder * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( IUriBuilder * This);
ULONG(__stdcall *Release )( IUriBuilder * This);
HRESULT(__stdcall *CreateUriSimple )( IUriBuilder * This, DWORD dwAllowEncodingPropertyMask, DWORD_PTR dwReserved, IUri **ppIUri);
HRESULT(__stdcall *CreateUri )( IUriBuilder * This, DWORD dwCreateFlags, DWORD dwAllowEncodingPropertyMask, DWORD_PTR dwReserved, IUri **ppIUri);
HRESULT(__stdcall *CreateUriWithFlags )( IUriBuilder * This, DWORD dwCreateFlags, DWORD dwUriBuilderFlags, DWORD dwAllowEncodingPropertyMask, DWORD_PTR dwReserved, IUri **ppIUri);
HRESULT(__stdcall *GetIUri )( IUriBuilder * This, IUri **ppIUri);
HRESULT(__stdcall *SetIUri )( IUriBuilder * This, IUri *pIUri);
HRESULT(__stdcall *GetFragment )( IUriBuilder * This, DWORD *pcchFragment, LPCWSTR *ppwzFragment);
HRESULT(__stdcall *GetHost )( IUriBuilder * This, DWORD *pcchHost, LPCWSTR *ppwzHost);
HRESULT(__stdcall *GetPassword )( IUriBuilder * This, DWORD *pcchPassword, LPCWSTR *ppwzPassword);
HRESULT(__stdcall *GetPath )( IUriBuilder * This, DWORD *pcchPath, LPCWSTR *ppwzPath);
HRESULT(__stdcall *GetPort )( IUriBuilder * This, BOOL *pfHasPort, DWORD *pdwPort);
HRESULT(__stdcall *GetQuery )( IUriBuilder * This, DWORD *pcchQuery, LPCWSTR *ppwzQuery);
HRESULT(__stdcall *GetSchemeName )( IUriBuilder * This, DWORD *pcchSchemeName, LPCWSTR *ppwzSchemeName);
HRESULT(__stdcall *GetUserNameA )( IUriBuilder * This, DWORD *pcchUserName, LPCWSTR *ppwzUserName);
HRESULT(__stdcall *SetFragment )( IUriBuilder * This, LPCWSTR pwzNewValue);
HRESULT(__stdcall *SetHost )( IUriBuilder * This, LPCWSTR pwzNewValue);
HRESULT(__stdcall *SetPassword )( IUriBuilder * This, LPCWSTR pwzNewValue);
HRESULT(__stdcall *SetPath )( IUriBuilder * This, LPCWSTR pwzNewValue);
HRESULT(__stdcall *SetPortA )( IUriBuilder * This, BOOL fHasPort, DWORD dwNewValue);
HRESULT(__stdcall *SetQuery )( IUriBuilder * This, LPCWSTR pwzNewValue);
HRESULT(__stdcall *SetSchemeName )( IUriBuilder * This, LPCWSTR pwzNewValue);
HRESULT(__stdcall *SetUserName )( IUriBuilder * This, LPCWSTR pwzNewValue);
HRESULT(__stdcall *RemoveProperties )( IUriBuilder * This, DWORD dwPropertyMask);
HRESULT(__stdcall *HasBeenModified )( IUriBuilder * This, BOOL *pfModified);
} IUriBuilderVtbl;
struct IUriBuilder {
struct IUriBuilderVtbl *lpVtbl;
};
extern const IID IID_IUriBuilderFactory;
typedef struct IUriBuilderFactoryVtbl {
HRESULT(__stdcall *QueryInterface )( IUriBuilderFactory * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( IUriBuilderFactory * This);
ULONG(__stdcall *Release )( IUriBuilderFactory * This);
HRESULT(__stdcall *CreateIUriBuilder )( IUriBuilderFactory * This, DWORD dwFlags, DWORD_PTR dwReserved, IUriBuilder **ppIUriBuilder);
HRESULT(__stdcall *CreateInitializedIUriBuilder )( IUriBuilderFactory * This, DWORD dwFlags, DWORD_PTR dwReserved, IUriBuilder **ppIUriBuilder);
} IUriBuilderFactoryVtbl;
struct IUriBuilderFactory {
struct IUriBuilderFactoryVtbl *lpVtbl;
};
extern HRESULT __stdcall CreateIUriBuilder( IUri *pIUri, DWORD dwFlags, DWORD_PTR dwReserved, IUriBuilder **ppIUriBuilder );
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0018_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0018_v0_0_s_ifspec;
<typedef name="LPWININETINFO"><ptr><IWinInetInfo /></ptr></typedef>
extern const IID IID_IWinInetInfo;
typedef struct IWinInetInfoVtbl {
HRESULT(__stdcall *QueryInterface )( IWinInetInfo * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( IWinInetInfo * This);
ULONG(__stdcall *Release )( IWinInetInfo * This);
HRESULT(__stdcall *QueryOption )( IWinInetInfo * This, DWORD dwOption, LPVOID pBuffer, DWORD *pcbBuf);
} IWinInetInfoVtbl;
struct IWinInetInfo {
struct IWinInetInfoVtbl *lpVtbl;
};
HRESULT __stdcall IWinInetInfo_RemoteQueryOption_Proxy( IWinInetInfo * This, DWORD dwOption, BYTE *pBuffer, DWORD *pcbBuf);
void __stdcall IWinInetInfo_RemoteQueryOption_Stub( IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0019_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0019_v0_0_s_ifspec;
<typedef name="LPHTTPSECURITY"><ptr><IHttpSecurity /></ptr></typedef>
extern const IID IID_IHttpSecurity;
typedef struct IHttpSecurityVtbl {
HRESULT(__stdcall *QueryInterface )( IHttpSecurity * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( IHttpSecurity * This);
ULONG(__stdcall *Release )( IHttpSecurity * This);
HRESULT(__stdcall *GetWindow )( IHttpSecurity * This, const GUID * const rguidReason, HWND *phwnd);
HRESULT(__stdcall *OnSecurityProblem )( IHttpSecurity * This, DWORD dwProblem);
} IHttpSecurityVtbl;
struct IHttpSecurity {
struct IHttpSecurityVtbl *lpVtbl;
};
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0020_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0020_v0_0_s_ifspec;
<typedef name="LPWININETHTTPINFO"><ptr><IWinInetHttpInfo /></ptr></typedef>
extern const IID IID_IWinInetHttpInfo;
typedef struct IWinInetHttpInfoVtbl {
HRESULT(__stdcall *QueryInterface )( IWinInetHttpInfo * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( IWinInetHttpInfo * This);
ULONG(__stdcall *Release )( IWinInetHttpInfo * This);
HRESULT(__stdcall *QueryOption )( IWinInetHttpInfo * This, DWORD dwOption, LPVOID pBuffer, DWORD *pcbBuf);
HRESULT(__stdcall *QueryInfo )( IWinInetHttpInfo * This, DWORD dwOption, LPVOID pBuffer, DWORD *pcbBuf, DWORD *pdwFlags, DWORD *pdwReserved);
} IWinInetHttpInfoVtbl;
struct IWinInetHttpInfo {
struct IWinInetHttpInfoVtbl *lpVtbl;
};
HRESULT __stdcall IWinInetHttpInfo_RemoteQueryInfo_Proxy( IWinInetHttpInfo * This, DWORD dwOption, BYTE *pBuffer, DWORD *pcbBuf, DWORD *pdwFlags, DWORD *pdwReserved);
void __stdcall IWinInetHttpInfo_RemoteQueryInfo_Stub( IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0021_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0021_v0_0_s_ifspec;
<typedef name="LPWININETCACHEHINTS"><ptr><IWinInetCacheHints /></ptr></typedef>
extern const IID IID_IWinInetCacheHints;
typedef struct IWinInetCacheHintsVtbl {
HRESULT(__stdcall *QueryInterface )( IWinInetCacheHints * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( IWinInetCacheHints * This);
ULONG(__stdcall *Release )( IWinInetCacheHints * This);
HRESULT(__stdcall *SetCacheExtension )( IWinInetCacheHints * This, LPCWSTR pwzExt, LPVOID pszCacheFile, DWORD *pcbCacheFile, DWORD *pdwWinInetError, DWORD *pdwReserved);
} IWinInetCacheHintsVtbl;
struct IWinInetCacheHints {
struct IWinInetCacheHintsVtbl *lpVtbl;
};
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0022_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0022_v0_0_s_ifspec;
<typedef name="LPWININETCACHEHINTS2"><ptr><IWinInetCacheHints2 /></ptr></typedef>
extern const IID IID_IWinInetCacheHints2;
typedef struct IWinInetCacheHints2Vtbl {
HRESULT(__stdcall *QueryInterface )( IWinInetCacheHints2 * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( IWinInetCacheHints2 * This);
ULONG(__stdcall *Release )( IWinInetCacheHints2 * This);
HRESULT(__stdcall *SetCacheExtension )( IWinInetCacheHints2 * This, LPCWSTR pwzExt, LPVOID pszCacheFile, DWORD *pcbCacheFile, DWORD *pdwWinInetError, DWORD *pdwReserved);
HRESULT(__stdcall *SetCacheExtension2 )( IWinInetCacheHints2 * This, LPCWSTR pwzExt, WCHAR *pwzCacheFile, DWORD *pcchCacheFile, DWORD *pdwWinInetError, DWORD *pdwReserved);
} IWinInetCacheHints2Vtbl;
struct IWinInetCacheHints2 {
struct IWinInetCacheHints2Vtbl *lpVtbl;
};
extern const GUID SID_BindHost;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0023_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0023_v0_0_s_ifspec;
<typedef name="LPBINDHOST"><ptr><IBindHost /></ptr></typedef>
extern const IID IID_IBindHost;
typedef struct IBindHostVtbl {
HRESULT(__stdcall *QueryInterface )( IBindHost * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( IBindHost * This);
ULONG(__stdcall *Release )( IBindHost * This);
HRESULT(__stdcall *CreateMoniker )( IBindHost * This, LPOLESTR szName, IBindCtx *pBC, IMoniker **ppmk, DWORD dwReserved);
HRESULT(__stdcall *MonikerBindToStorage )( IBindHost * This, IMoniker *pMk, IBindCtx *pBC, IBindStatusCallback *pBSC, const IID * const riid, void **ppvObj);
HRESULT(__stdcall *MonikerBindToObject )( IBindHost * This, IMoniker *pMk, IBindCtx *pBC, IBindStatusCallback *pBSC, const IID * const riid, void **ppvObj);
} IBindHostVtbl;
struct IBindHost {
struct IBindHostVtbl *lpVtbl;
};
HRESULT __stdcall IBindHost_RemoteMonikerBindToStorage_Proxy( IBindHost * This, IMoniker *pMk, IBindCtx *pBC, IBindStatusCallback *pBSC, const IID * const riid, IUnknown **ppvObj);
void __stdcall IBindHost_RemoteMonikerBindToStorage_Stub( IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
HRESULT __stdcall IBindHost_RemoteMonikerBindToObject_Proxy( IBindHost * This, IMoniker *pMk, IBindCtx *pBC, IBindStatusCallback *pBSC, const IID * const riid, IUnknown **ppvObj);
void __stdcall IBindHost_RemoteMonikerBindToObject_Stub( IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
<field name="IBindStatusCallback"><struct /></field>
extern HRESULT __stdcall HlinkSimpleNavigateToString( LPCWSTR szTarget, LPCWSTR szLocation, LPCWSTR szTargetFrameName, IUnknown *pUnk, IBindCtx *pbc, IBindStatusCallback *, DWORD grfHLNF, DWORD dwReserved );
extern HRESULT __stdcall HlinkSimpleNavigateToMoniker( IMoniker *pmkTarget, LPCWSTR szLocation, LPCWSTR szTargetFrameName, IUnknown *pUnk, IBindCtx *pbc, IBindStatusCallback *, DWORD grfHLNF, DWORD dwReserved );
extern HRESULT __stdcall URLOpenStreamA(LPUNKNOWN, LPCSTR, DWORD, LPBINDSTATUSCALLBACK);
extern HRESULT __stdcall URLOpenStreamW(LPUNKNOWN, LPCWSTR, DWORD, LPBINDSTATUSCALLBACK);
extern HRESULT __stdcall URLOpenPullStreamA(LPUNKNOWN, LPCSTR, DWORD, LPBINDSTATUSCALLBACK);
extern HRESULT __stdcall URLOpenPullStreamW(LPUNKNOWN, LPCWSTR, DWORD, LPBINDSTATUSCALLBACK);
extern HRESULT __stdcall URLDownloadToFileA(LPUNKNOWN, LPCSTR, LPCSTR, DWORD, LPBINDSTATUSCALLBACK);
extern HRESULT __stdcall URLDownloadToFileW(LPUNKNOWN, LPCWSTR, LPCWSTR, DWORD, LPBINDSTATUSCALLBACK);
extern HRESULT __stdcall URLDownloadToCacheFileA( LPUNKNOWN, LPCSTR, LPSTR, DWORD cchFileName, DWORD, LPBINDSTATUSCALLBACK);
extern HRESULT __stdcall URLDownloadToCacheFileW( LPUNKNOWN, LPCWSTR, LPWSTR, DWORD cchFileName, DWORD, LPBINDSTATUSCALLBACK);
extern HRESULT __stdcall URLOpenBlockingStreamA(LPUNKNOWN, LPCSTR, LPSTREAM*, DWORD, LPBINDSTATUSCALLBACK);
extern HRESULT __stdcall URLOpenBlockingStreamW(LPUNKNOWN, LPCWSTR, LPSTREAM*, DWORD, LPBINDSTATUSCALLBACK);
extern HRESULT __stdcall HlinkGoBack(IUnknown *pUnk);
extern HRESULT __stdcall HlinkGoForward(IUnknown *pUnk);
extern HRESULT __stdcall HlinkNavigateString(IUnknown *pUnk, LPCWSTR szTarget);
extern HRESULT __stdcall HlinkNavigateMoniker(IUnknown *pUnk, IMoniker *pmkTarget);
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0024_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0024_v0_0_s_ifspec;
<typedef name="LPIINTERNET"><ptr><IInternet /></ptr></typedef>
extern const IID IID_IInternet;
typedef struct IInternetVtbl {
HRESULT(__stdcall *QueryInterface )( IInternet * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( IInternet * This);
ULONG(__stdcall *Release )( IInternet * This);
} IInternetVtbl;
struct IInternet {
struct IInternetVtbl *lpVtbl;
};
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0025_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0025_v0_0_s_ifspec;
<typedef name="LPIINTERNETBINDINFO"><ptr><IInternetBindInfo /></ptr></typedef>
typedef enum tagBINDSTRING { BINDSTRING_HEADERS = 1, BINDSTRING_ACCEPT_MIMES =(BINDSTRING_HEADERS + 1 ), BINDSTRING_EXTRA_URL =(BINDSTRING_ACCEPT_MIMES + 1 ), BINDSTRING_LANGUAGE =(BINDSTRING_EXTRA_URL + 1 ), BINDSTRING_USERNAME =(BINDSTRING_LANGUAGE + 1 ), BINDSTRING_PASSWORD =(BINDSTRING_USERNAME + 1 ), BINDSTRING_UA_PIXELS =(BINDSTRING_PASSWORD + 1 ), BINDSTRING_UA_COLOR =(BINDSTRING_UA_PIXELS + 1 ), BINDSTRING_OS =(BINDSTRING_UA_COLOR + 1 ), BINDSTRING_USER_AGENT =(BINDSTRING_OS + 1 ), BINDSTRING_ACCEPT_ENCODINGS =(BINDSTRING_USER_AGENT + 1 ), BINDSTRING_POST_COOKIE =(BINDSTRING_ACCEPT_ENCODINGS + 1 ), BINDSTRING_POST_DATA_MIME =(BINDSTRING_POST_COOKIE + 1 ), BINDSTRING_URL =(BINDSTRING_POST_DATA_MIME + 1 ), BINDSTRING_IID =(BINDSTRING_URL + 1 ), BINDSTRING_FLAG_BIND_TO_OBJECT =(BINDSTRING_IID + 1 ), BINDSTRING_PTR_BIND_CONTEXT =(BINDSTRING_FLAG_BIND_TO_OBJECT + 1 ), BINDSTRING_XDR_ORIGIN =(BINDSTRING_PTR_BIND_CONTEXT + 1 ) } BINDSTRING;
extern const IID IID_IInternetBindInfo;
typedef struct IInternetBindInfoVtbl {
HRESULT(__stdcall *QueryInterface )( IInternetBindInfo * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( IInternetBindInfo * This);
ULONG(__stdcall *Release )( IInternetBindInfo * This);
HRESULT(__stdcall *GetBindInfo )( IInternetBindInfo * This, DWORD *grfBINDF, BINDINFO *pbindinfo);
HRESULT(__stdcall *GetBindString )( IInternetBindInfo * This, ULONG ulStringType, LPOLESTR *ppwzStr, ULONG cEl, ULONG *pcElFetched);
} IInternetBindInfoVtbl;
struct IInternetBindInfo {
struct IInternetBindInfoVtbl *lpVtbl;
};
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0026_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0026_v0_0_s_ifspec;
<typedef name="LPIINTERNETBINDINFOEX"><ptr><IInternetBindInfoEx /></ptr></typedef>
extern const IID IID_IInternetBindInfoEx;
typedef struct IInternetBindInfoExVtbl {
HRESULT(__stdcall *QueryInterface )( IInternetBindInfoEx * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( IInternetBindInfoEx * This);
ULONG(__stdcall *Release )( IInternetBindInfoEx * This);
HRESULT(__stdcall *GetBindInfo )( IInternetBindInfoEx * This, DWORD *grfBINDF, BINDINFO *pbindinfo);
HRESULT(__stdcall *GetBindString )( IInternetBindInfoEx * This, ULONG ulStringType, LPOLESTR *ppwzStr, ULONG cEl, ULONG *pcElFetched);
HRESULT(__stdcall *GetBindInfoEx )( IInternetBindInfoEx * This, DWORD *grfBINDF, BINDINFO *pbindinfo, DWORD *grfBINDF2, DWORD *pdwReserved);
} IInternetBindInfoExVtbl;
struct IInternetBindInfoEx {
struct IInternetBindInfoExVtbl *lpVtbl;
};
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0027_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0027_v0_0_s_ifspec;
<typedef name="LPIINTERNETPROTOCOLROOT"><ptr><IInternetProtocolRoot /></ptr></typedef>
typedef enum _tagPI_FLAGS { PI_PARSE_URL = 0x1, PI_FILTER_MODE = 0x2, PI_FORCE_ASYNC = 0x4, PI_USE_WORKERTHREAD = 0x8, PI_MIMEVERIFICATION = 0x10, PI_CLSIDLOOKUP = 0x20, PI_DATAPROGRESS = 0x40, PI_SYNCHRONOUS = 0x80, PI_APARTMENTTHREADED = 0x100, PI_CLASSINSTALL = 0x200, PI_PASSONBINDCTX = 0x2000, PI_NOMIMEHANDLER = 0x8000, PI_LOADAPPDIRECT = 0x4000, PD_FORCE_SWITCH = 0x10000, PI_PREFERDEFAULTHANDLER = 0x20000 } PI_FLAGS;
typedef struct _tagPROTOCOLDATA {
<field name="grfFlags"><DWORD /></field>
<field name="dwState"><DWORD /></field>
<field name="pData"><LPVOID /></field>
<field name="cbData"><ULONG /></field>
} PROTOCOLDATA;
typedef struct _tagStartParam {
<field name="iid"><IID /></field>
<field name="pIBindCtx"><ptr><IBindCtx /></ptr></field>
<field name="pItf"><ptr><IUnknown /></ptr></field>
} StartParam;
extern const IID IID_IInternetProtocolRoot;
typedef struct IInternetProtocolRootVtbl {
HRESULT(__stdcall *QueryInterface )( IInternetProtocolRoot * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( IInternetProtocolRoot * This);
ULONG(__stdcall *Release )( IInternetProtocolRoot * This);
HRESULT(__stdcall *Start )( IInternetProtocolRoot * This, LPCWSTR szUrl, IInternetProtocolSink *pOIProtSink, IInternetBindInfo *pOIBindInfo, DWORD grfPI, HANDLE_PTR dwReserved);
HRESULT(__stdcall *Continue )( IInternetProtocolRoot * This, PROTOCOLDATA *pProtocolData);
HRESULT(__stdcall *Abort )( IInternetProtocolRoot * This, HRESULT hrReason, DWORD dwOptions);
HRESULT(__stdcall *Terminate )( IInternetProtocolRoot * This, DWORD dwOptions);
HRESULT(__stdcall *Suspend )( IInternetProtocolRoot * This);
HRESULT(__stdcall *Resume )( IInternetProtocolRoot * This);
} IInternetProtocolRootVtbl;
struct IInternetProtocolRoot {
struct IInternetProtocolRootVtbl *lpVtbl;
};
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0028_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0028_v0_0_s_ifspec;
<typedef name="LPIINTERNETPROTOCOL"><ptr><IInternetProtocol /></ptr></typedef>
extern const IID IID_IInternetProtocol;
typedef struct IInternetProtocolVtbl {
HRESULT(__stdcall *QueryInterface )( IInternetProtocol * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( IInternetProtocol * This);
ULONG(__stdcall *Release )( IInternetProtocol * This);
HRESULT(__stdcall *Start )( IInternetProtocol * This, LPCWSTR szUrl, IInternetProtocolSink *pOIProtSink, IInternetBindInfo *pOIBindInfo, DWORD grfPI, HANDLE_PTR dwReserved);
HRESULT(__stdcall *Continue )( IInternetProtocol * This, PROTOCOLDATA *pProtocolData);
HRESULT(__stdcall *Abort )( IInternetProtocol * This, HRESULT hrReason, DWORD dwOptions);
HRESULT(__stdcall *Terminate )( IInternetProtocol * This, DWORD dwOptions);
HRESULT(__stdcall *Suspend )( IInternetProtocol * This);
HRESULT(__stdcall *Resume )( IInternetProtocol * This);
HRESULT(__stdcall *Read )( IInternetProtocol * This, void *pv, ULONG cb, ULONG *pcbRead);
HRESULT(__stdcall *Seek )( IInternetProtocol * This, LARGE_INTEGER dlibMove, DWORD dwOrigin, ULARGE_INTEGER *plibNewPosition);
HRESULT(__stdcall *LockRequest )( IInternetProtocol * This, DWORD dwOptions);
HRESULT(__stdcall *UnlockRequest )( IInternetProtocol * This);
} IInternetProtocolVtbl;
struct IInternetProtocol {
struct IInternetProtocolVtbl *lpVtbl;
};
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0029_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0029_v0_0_s_ifspec;
extern const IID IID_IInternetProtocolEx;
typedef struct IInternetProtocolExVtbl {
HRESULT(__stdcall *QueryInterface )( IInternetProtocolEx * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( IInternetProtocolEx * This);
ULONG(__stdcall *Release )( IInternetProtocolEx * This);
HRESULT(__stdcall *Start )( IInternetProtocolEx * This, LPCWSTR szUrl, IInternetProtocolSink *pOIProtSink, IInternetBindInfo *pOIBindInfo, DWORD grfPI, HANDLE_PTR dwReserved);
HRESULT(__stdcall *Continue )( IInternetProtocolEx * This, PROTOCOLDATA *pProtocolData);
HRESULT(__stdcall *Abort )( IInternetProtocolEx * This, HRESULT hrReason, DWORD dwOptions);
HRESULT(__stdcall *Terminate )( IInternetProtocolEx * This, DWORD dwOptions);
HRESULT(__stdcall *Suspend )( IInternetProtocolEx * This);
HRESULT(__stdcall *Resume )( IInternetProtocolEx * This);
HRESULT(__stdcall *Read )( IInternetProtocolEx * This, void *pv, ULONG cb, ULONG *pcbRead);
HRESULT(__stdcall *Seek )( IInternetProtocolEx * This, LARGE_INTEGER dlibMove, DWORD dwOrigin, ULARGE_INTEGER *plibNewPosition);
HRESULT(__stdcall *LockRequest )( IInternetProtocolEx * This, DWORD dwOptions);
HRESULT(__stdcall *UnlockRequest )( IInternetProtocolEx * This);
HRESULT(__stdcall *StartEx )( IInternetProtocolEx * This, IUri *pUri, IInternetProtocolSink *pOIProtSink, IInternetBindInfo *pOIBindInfo, DWORD grfPI, HANDLE_PTR dwReserved);
} IInternetProtocolExVtbl;
struct IInternetProtocolEx {
struct IInternetProtocolExVtbl *lpVtbl;
};
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0030_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0030_v0_0_s_ifspec;
<typedef name="LPIINTERNETPROTOCOLSINK"><ptr><IInternetProtocolSink /></ptr></typedef>
extern const IID IID_IInternetProtocolSink;
typedef struct IInternetProtocolSinkVtbl {
HRESULT(__stdcall *QueryInterface )( IInternetProtocolSink * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( IInternetProtocolSink * This);
ULONG(__stdcall *Release )( IInternetProtocolSink * This);
HRESULT(__stdcall *Switch )( IInternetProtocolSink * This, PROTOCOLDATA *pProtocolData);
HRESULT(__stdcall *ReportProgress )( IInternetProtocolSink * This, ULONG ulStatusCode, LPCWSTR szStatusText);
HRESULT(__stdcall *ReportData )( IInternetProtocolSink * This, DWORD grfBSCF, ULONG ulProgress, ULONG ulProgressMax);
HRESULT(__stdcall *ReportResult )( IInternetProtocolSink * This, HRESULT hrResult, DWORD dwError, LPCWSTR szResult);
} IInternetProtocolSinkVtbl;
struct IInternetProtocolSink {
struct IInternetProtocolSinkVtbl *lpVtbl;
};
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0031_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0031_v0_0_s_ifspec;
<typedef name="LPIINTERNETPROTOCOLSINKStackable"><ptr><IInternetProtocolSinkStackable /></ptr></typedef>
extern const IID IID_IInternetProtocolSinkStackable;
typedef struct IInternetProtocolSinkStackableVtbl {
HRESULT(__stdcall *QueryInterface )( IInternetProtocolSinkStackable * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( IInternetProtocolSinkStackable * This);
ULONG(__stdcall *Release )( IInternetProtocolSinkStackable * This);
HRESULT(__stdcall *SwitchSink )( IInternetProtocolSinkStackable * This, IInternetProtocolSink *pOIProtSink);
HRESULT(__stdcall *CommitSwitch )( IInternetProtocolSinkStackable * This);
HRESULT(__stdcall *RollbackSwitch )( IInternetProtocolSinkStackable * This);
} IInternetProtocolSinkStackableVtbl;
struct IInternetProtocolSinkStackable {
struct IInternetProtocolSinkStackableVtbl *lpVtbl;
};
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0032_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0032_v0_0_s_ifspec;
<typedef name="LPIINTERNETSESSION"><ptr><IInternetSession /></ptr></typedef>
typedef enum _tagOIBDG_FLAGS { OIBDG_APARTMENTTHREADED = 0x100, OIBDG_DATAONLY = 0x1000 } OIBDG_FLAGS;
extern const IID IID_IInternetSession;
typedef struct IInternetSessionVtbl {
HRESULT(__stdcall *QueryInterface )( IInternetSession * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( IInternetSession * This);
ULONG(__stdcall *Release )( IInternetSession * This);
HRESULT(__stdcall *RegisterNameSpace )( IInternetSession * This, IClassFactory *pCF, const IID * const rclsid, LPCWSTR pwzProtocol, ULONG cPatterns, const LPCWSTR *ppwzPatterns, DWORD dwReserved);
HRESULT(__stdcall *UnregisterNameSpace )( IInternetSession * This, IClassFactory *pCF, LPCWSTR pszProtocol);
HRESULT(__stdcall *RegisterMimeFilter )( IInternetSession * This, IClassFactory *pCF, const IID * const rclsid, LPCWSTR pwzType);
HRESULT(__stdcall *UnregisterMimeFilter )( IInternetSession * This, IClassFactory *pCF, LPCWSTR pwzType);
HRESULT(__stdcall *CreateBinding )( IInternetSession * This, LPBC pBC, LPCWSTR szUrl, IUnknown *pUnkOuter, IUnknown **ppUnk, IInternetProtocol **ppOInetProt, DWORD dwOption);
HRESULT(__stdcall *SetSessionOption )( IInternetSession * This, DWORD dwOption, LPVOID pBuffer, DWORD dwBufferLength, DWORD dwReserved);
HRESULT(__stdcall *GetSessionOption )( IInternetSession * This, DWORD dwOption, LPVOID pBuffer, DWORD *pdwBufferLength, DWORD dwReserved);
} IInternetSessionVtbl;
struct IInternetSession {
struct IInternetSessionVtbl *lpVtbl;
};
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0033_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0033_v0_0_s_ifspec;
<typedef name="LPIINTERNETTHREADSWITCH"><ptr><IInternetThreadSwitch /></ptr></typedef>
extern const IID IID_IInternetThreadSwitch;
typedef struct IInternetThreadSwitchVtbl {
HRESULT(__stdcall *QueryInterface )( IInternetThreadSwitch * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( IInternetThreadSwitch * This);
ULONG(__stdcall *Release )( IInternetThreadSwitch * This);
HRESULT(__stdcall *Prepare )( IInternetThreadSwitch * This);
HRESULT(__stdcall *Continue )( IInternetThreadSwitch * This);
} IInternetThreadSwitchVtbl;
struct IInternetThreadSwitch {
struct IInternetThreadSwitchVtbl *lpVtbl;
};
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0034_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0034_v0_0_s_ifspec;
<typedef name="LPIINTERNETPRIORITY"><ptr><IInternetPriority /></ptr></typedef>
extern const IID IID_IInternetPriority;
typedef struct IInternetPriorityVtbl {
HRESULT(__stdcall *QueryInterface )( IInternetPriority * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( IInternetPriority * This);
ULONG(__stdcall *Release )( IInternetPriority * This);
HRESULT(__stdcall *SetPriority )( IInternetPriority * This, LONG nPriority);
HRESULT(__stdcall *GetPriority )( IInternetPriority * This, LONG *pnPriority);
} IInternetPriorityVtbl;
struct IInternetPriority {
struct IInternetPriorityVtbl *lpVtbl;
};
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0035_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0035_v0_0_s_ifspec;
<typedef name="LPIINTERNETPROTOCOLINFO"><ptr><IInternetProtocolInfo /></ptr></typedef>
typedef enum _tagPARSEACTION { PARSE_CANONICALIZE = 1, PARSE_FRIENDLY =(PARSE_CANONICALIZE + 1 ), PARSE_SECURITY_URL =(PARSE_FRIENDLY + 1 ), PARSE_ROOTDOCUMENT =(PARSE_SECURITY_URL + 1 ), PARSE_DOCUMENT =(PARSE_ROOTDOCUMENT + 1 ), PARSE_ANCHOR =(PARSE_DOCUMENT + 1 ), PARSE_ENCODE_IS_UNESCAPE =(PARSE_ANCHOR + 1 ), PARSE_DECODE_IS_ESCAPE =(PARSE_ENCODE_IS_UNESCAPE + 1 ), PARSE_PATH_FROM_URL =(PARSE_DECODE_IS_ESCAPE + 1 ), PARSE_URL_FROM_PATH =(PARSE_PATH_FROM_URL + 1 ), PARSE_MIME =(PARSE_URL_FROM_PATH + 1 ), PARSE_SERVER =(PARSE_MIME + 1 ), PARSE_SCHEMA =(PARSE_SERVER + 1 ), PARSE_SITE =(PARSE_SCHEMA + 1 ), PARSE_DOMAIN =(PARSE_SITE + 1 ), PARSE_LOCATION =(PARSE_DOMAIN + 1 ), PARSE_SECURITY_DOMAIN =(PARSE_LOCATION + 1 ), PARSE_ESCAPE =(PARSE_SECURITY_DOMAIN + 1 ), PARSE_UNESCAPE =(PARSE_ESCAPE + 1 ) } PARSEACTION;
typedef enum _tagPSUACTION { PSU_DEFAULT = 1, PSU_SECURITY_URL_ONLY =(PSU_DEFAULT + 1 ) } PSUACTION;
typedef enum _tagQUERYOPTION { QUERY_EXPIRATION_DATE = 1, QUERY_TIME_OF_LAST_CHANGE =(QUERY_EXPIRATION_DATE + 1 ), QUERY_CONTENT_ENCODING =(QUERY_TIME_OF_LAST_CHANGE + 1 ), QUERY_CONTENT_TYPE =(QUERY_CONTENT_ENCODING + 1 ), QUERY_REFRESH =(QUERY_CONTENT_TYPE + 1 ), QUERY_RECOMBINE =(QUERY_REFRESH + 1 ), QUERY_CAN_NAVIGATE =(QUERY_RECOMBINE + 1 ), QUERY_USES_NETWORK =(QUERY_CAN_NAVIGATE + 1 ), QUERY_IS_CACHED =(QUERY_USES_NETWORK + 1 ), QUERY_IS_INSTALLEDENTRY =(QUERY_IS_CACHED + 1 ), QUERY_IS_CACHED_OR_MAPPED =(QUERY_IS_INSTALLEDENTRY + 1 ), QUERY_USES_CACHE =(QUERY_IS_CACHED_OR_MAPPED + 1 ), QUERY_IS_SECURE =(QUERY_USES_CACHE + 1 ), QUERY_IS_SAFE =(QUERY_IS_SECURE + 1 ), QUERY_USES_HISTORYFOLDER =(QUERY_IS_SAFE + 1 ) } QUERYOPTION;
extern const IID IID_IInternetProtocolInfo;
typedef struct IInternetProtocolInfoVtbl {
HRESULT(__stdcall *QueryInterface )( IInternetProtocolInfo * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( IInternetProtocolInfo * This);
ULONG(__stdcall *Release )( IInternetProtocolInfo * This);
HRESULT(__stdcall *ParseUrl )( IInternetProtocolInfo * This, LPCWSTR pwzUrl, PARSEACTION ParseAction, DWORD dwParseFlags, LPWSTR pwzResult, DWORD cchResult, DWORD *pcchResult, DWORD dwReserved);
HRESULT(__stdcall *CombineUrl )( IInternetProtocolInfo * This, LPCWSTR pwzBaseUrl, LPCWSTR pwzRelativeUrl, DWORD dwCombineFlags, LPWSTR pwzResult, DWORD cchResult, DWORD *pcchResult, DWORD dwReserved);
HRESULT(__stdcall *CompareUrl )( IInternetProtocolInfo * This, LPCWSTR pwzUrl1, LPCWSTR pwzUrl2, DWORD dwCompareFlags);
HRESULT(__stdcall *QueryInfo )( IInternetProtocolInfo * This, LPCWSTR pwzUrl, QUERYOPTION OueryOption, DWORD dwQueryFlags, LPVOID pBuffer, DWORD cbBuffer, DWORD *pcbBuf, DWORD dwReserved);
} IInternetProtocolInfoVtbl;
struct IInternetProtocolInfo {
struct IInternetProtocolInfoVtbl *lpVtbl;
};
extern HRESULT __stdcall CoInternetParseUrl( LPCWSTR pwzUrl, PARSEACTION ParseAction, DWORD dwFlags, LPWSTR pszResult, DWORD cchResult, DWORD *pcchResult, DWORD dwReserved );
extern HRESULT __stdcall CoInternetParseIUri( IUri *pIUri, PARSEACTION ParseAction, DWORD dwFlags, LPWSTR pwzResult, DWORD cchResult, DWORD *pcchResult, DWORD_PTR dwReserved );
extern HRESULT __stdcall CoInternetCombineUrl( LPCWSTR pwzBaseUrl, LPCWSTR pwzRelativeUrl, DWORD dwCombineFlags, LPWSTR pszResult, DWORD cchResult, DWORD *pcchResult, DWORD dwReserved );
extern HRESULT __stdcall CoInternetCombineUrlEx( IUri *pBaseUri, LPCWSTR pwzRelativeUrl, DWORD dwCombineFlags, IUri **ppCombinedUri, DWORD_PTR dwReserved );
extern HRESULT __stdcall CoInternetCombineIUri( IUri *pBaseUri, IUri *pRelativeUri, DWORD dwCombineFlags, IUri **ppCombinedUri, DWORD_PTR dwReserved );
extern HRESULT __stdcall CoInternetCompareUrl( LPCWSTR pwzUrl1, LPCWSTR pwzUrl2, DWORD dwFlags );
extern HRESULT __stdcall CoInternetGetProtocolFlags( LPCWSTR pwzUrl, DWORD *pdwFlags, DWORD dwReserved );
extern HRESULT __stdcall CoInternetQueryInfo( LPCWSTR pwzUrl, QUERYOPTION QueryOptions, DWORD dwQueryFlags, LPVOID pvBuffer, DWORD cbBuffer, DWORD *pcbBuffer, DWORD dwReserved );
extern HRESULT __stdcall CoInternetGetSession( DWORD dwSessionMode, IInternetSession **ppIInternetSession, DWORD dwReserved );
extern HRESULT __stdcall CoInternetGetSecurityUrl( LPCWSTR pwszUrl, LPWSTR *ppwszSecUrl, PSUACTION psuAction, DWORD dwReserved );
extern HRESULT __stdcall AsyncInstallDistributionUnit( LPCWSTR szDistUnit, LPCWSTR szTYPE, LPCWSTR szExt, DWORD dwFileVersionMS, DWORD dwFileVersionLS, LPCWSTR szURL, IBindCtx *pbc, LPVOID pvReserved, DWORD flags );
extern HRESULT __stdcall CoInternetGetSecurityUrlEx( IUri *pUri, IUri **ppSecUri, PSUACTION psuAction, DWORD_PTR dwReserved );
typedef enum _tagINTERNETFEATURELIST { FEATURE_OBJECT_CACHING = 0, FEATURE_ZONE_ELEVATION =(FEATURE_OBJECT_CACHING + 1 ), FEATURE_MIME_HANDLING =(FEATURE_ZONE_ELEVATION + 1 ), FEATURE_MIME_SNIFFING =(FEATURE_MIME_HANDLING + 1 ), FEATURE_WINDOW_RESTRICTIONS =(FEATURE_MIME_SNIFFING + 1 ), FEATURE_WEBOC_POPUPMANAGEMENT =(FEATURE_WINDOW_RESTRICTIONS + 1 ), FEATURE_BEHAVIORS =(FEATURE_WEBOC_POPUPMANAGEMENT + 1 ), FEATURE_DISABLE_MK_PROTOCOL =(FEATURE_BEHAVIORS + 1 ), FEATURE_LOCALMACHINE_LOCKDOWN =(FEATURE_DISABLE_MK_PROTOCOL + 1 ), FEATURE_SECURITYBAND =(FEATURE_LOCALMACHINE_LOCKDOWN + 1 ), FEATURE_RESTRICT_ACTIVEXINSTALL =(FEATURE_SECURITYBAND + 1 ), FEATURE_VALIDATE_NAVIGATE_URL =(FEATURE_RESTRICT_ACTIVEXINSTALL + 1 ), FEATURE_RESTRICT_FILEDOWNLOAD =(FEATURE_VALIDATE_NAVIGATE_URL + 1 ), FEATURE_ADDON_MANAGEMENT =(FEATURE_RESTRICT_FILEDOWNLOAD + 1 ), FEATURE_PROTOCOL_LOCKDOWN =(FEATURE_ADDON_MANAGEMENT + 1 ), FEATURE_HTTP_USERNAME_PASSWORD_DISABLE =(FEATURE_PROTOCOL_LOCKDOWN + 1 ), FEATURE_SAFE_BINDTOOBJECT =(FEATURE_HTTP_USERNAME_PASSWORD_DISABLE + 1 ), FEATURE_UNC_SAVEDFILECHECK =(FEATURE_SAFE_BINDTOOBJECT + 1 ), FEATURE_GET_URL_DOM_FILEPATH_UNENCODED =(FEATURE_UNC_SAVEDFILECHECK + 1 ), FEATURE_TABBED_BROWSING =(FEATURE_GET_URL_DOM_FILEPATH_UNENCODED + 1 ), FEATURE_SSLUX =(FEATURE_TABBED_BROWSING + 1 ), FEATURE_DISABLE_NAVIGATION_SOUNDS =(FEATURE_SSLUX + 1 ), FEATURE_DISABLE_LEGACY_COMPRESSION =(FEATURE_DISABLE_NAVIGATION_SOUNDS + 1 ), FEATURE_FORCE_ADDR_AND_STATUS =(FEATURE_DISABLE_LEGACY_COMPRESSION + 1 ), FEATURE_XMLHTTP =(FEATURE_FORCE_ADDR_AND_STATUS + 1 ), FEATURE_DISABLE_TELNET_PROTOCOL =(FEATURE_XMLHTTP + 1 ), FEATURE_FEEDS =(FEATURE_DISABLE_TELNET_PROTOCOL + 1 ), FEATURE_BLOCK_INPUT_PROMPTS =(FEATURE_FEEDS + 1 ), FEATURE_ENTRY_COUNT =(FEATURE_BLOCK_INPUT_PROMPTS + 1 ) } INTERNETFEATURELIST;
extern HRESULT __stdcall CoInternetSetFeatureEnabled( INTERNETFEATURELIST FeatureEntry, DWORD dwFlags, BOOL fEnable );
extern HRESULT __stdcall CoInternetIsFeatureEnabled( INTERNETFEATURELIST FeatureEntry, DWORD dwFlags );
extern HRESULT __stdcall CoInternetIsFeatureEnabledForUrl( INTERNETFEATURELIST FeatureEntry, DWORD dwFlags, LPCWSTR szURL, IInternetSecurityManager *pSecMgr );
extern HRESULT __stdcall CoInternetIsFeatureEnabledForIUri( INTERNETFEATURELIST FeatureEntry, DWORD dwFlags, IUri * pIUri, IInternetSecurityManagerEx2 *pSecMgr );
extern HRESULT __stdcall CoInternetIsFeatureZoneElevationEnabled( LPCWSTR szFromURL, LPCWSTR szToURL, IInternetSecurityManager *pSecMgr, DWORD dwFlags );
extern HRESULT __stdcall CopyStgMedium(const STGMEDIUM * pcstgmedSrc, STGMEDIUM * pstgmedDest);
extern HRESULT __stdcall CopyBindInfo( const BINDINFO * pcbiSrc, BINDINFO * pbiDest );
extern void __stdcall ReleaseBindInfo( BINDINFO * pbindinfo );
extern HRESULT __stdcall CoInternetCreateSecurityManager(IServiceProvider *pSP, IInternetSecurityManager **ppSM, DWORD dwReserved);
extern HRESULT __stdcall CoInternetCreateZoneManager(IServiceProvider *pSP, IInternetZoneManager **ppZM, DWORD dwReserved);
extern const IID CLSID_InternetSecurityManager;
extern const IID CLSID_InternetZoneManager;
extern const IID CLSID_PersistentZoneIdentifier;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0036_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0036_v0_0_s_ifspec;
extern const IID IID_IInternetSecurityMgrSite;
typedef struct IInternetSecurityMgrSiteVtbl {
HRESULT(__stdcall *QueryInterface )( IInternetSecurityMgrSite * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( IInternetSecurityMgrSite * This);
ULONG(__stdcall *Release )( IInternetSecurityMgrSite * This);
HRESULT(__stdcall *GetWindow )( IInternetSecurityMgrSite * This, HWND *phwnd);
HRESULT(__stdcall *EnableModeless )( IInternetSecurityMgrSite * This, BOOL fEnable);
} IInternetSecurityMgrSiteVtbl;
struct IInternetSecurityMgrSite {
struct IInternetSecurityMgrSiteVtbl *lpVtbl;
};
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0037_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0037_v0_0_s_ifspec;
typedef enum __MIDL_IInternetSecurityManager_0001 { PUAF_DEFAULT = 0, PUAF_NOUI = 0x1, PUAF_ISFILE = 0x2, PUAF_WARN_IF_DENIED = 0x4, PUAF_FORCEUI_FOREGROUND = 0x8, PUAF_CHECK_TIFS = 0x10, PUAF_DONTCHECKBOXINDIALOG = 0x20, PUAF_TRUSTED = 0x40, PUAF_ACCEPT_WILDCARD_SCHEME = 0x80, PUAF_ENFORCERESTRICTED = 0x100, PUAF_NOSAVEDFILECHECK = 0x200, PUAF_REQUIRESAVEDFILECHECK = 0x400, PUAF_DONT_USE_CACHE = 0x1000, PUAF_RESERVED1 = 0x2000, PUAF_RESERVED2 = 0x4000, PUAF_LMZ_UNLOCKED = 0x10000, PUAF_LMZ_LOCKED = 0x20000, PUAF_DEFAULTZONEPOL = 0x40000, PUAF_NPL_USE_LOCKED_IF_RESTRICTED = 0x80000, PUAF_NOUIIFLOCKED = 0x100000, PUAF_DRAGPROTOCOLCHECK = 0x200000 } PUAF;
typedef enum __MIDL_IInternetSecurityManager_0002 { PUAFOUT_DEFAULT = 0, PUAFOUT_ISLOCKZONEPOLICY = 0x1 } PUAFOUT;
typedef enum __MIDL_IInternetSecurityManager_0003 { SZM_CREATE = 0, SZM_DELETE = 0x1 } SZM_FLAGS;
extern const IID IID_IInternetSecurityManager;
typedef struct IInternetSecurityManagerVtbl {
HRESULT(__stdcall *QueryInterface )( IInternetSecurityManager * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( IInternetSecurityManager * This);
ULONG(__stdcall *Release )( IInternetSecurityManager * This);
HRESULT(__stdcall *SetSecuritySite )( IInternetSecurityManager * This, IInternetSecurityMgrSite *pSite);
HRESULT(__stdcall *GetSecuritySite )( IInternetSecurityManager * This, IInternetSecurityMgrSite **ppSite);
HRESULT(__stdcall *MapUrlToZone )( IInternetSecurityManager * This, LPCWSTR pwszUrl, DWORD *pdwZone, DWORD dwFlags);
HRESULT(__stdcall *GetSecurityId )( IInternetSecurityManager * This, LPCWSTR pwszUrl, BYTE *pbSecurityId, DWORD *pcbSecurityId, DWORD_PTR dwReserved);
HRESULT(__stdcall *ProcessUrlAction )( IInternetSecurityManager * This, LPCWSTR pwszUrl, DWORD dwAction, BYTE *pPolicy, DWORD cbPolicy, BYTE *pContext, DWORD cbContext, DWORD dwFlags, DWORD dwReserved);
HRESULT(__stdcall *QueryCustomPolicy )( IInternetSecurityManager * This, LPCWSTR pwszUrl, const GUID * const guidKey, BYTE **ppPolicy, DWORD *pcbPolicy, BYTE *pContext, DWORD cbContext, DWORD dwReserved);
HRESULT(__stdcall *SetZoneMapping )( IInternetSecurityManager * This, DWORD dwZone, LPCWSTR lpszPattern, DWORD dwFlags);
HRESULT(__stdcall *GetZoneMappings )( IInternetSecurityManager * This, DWORD dwZone, IEnumString **ppenumString, DWORD dwFlags);
} IInternetSecurityManagerVtbl;
struct IInternetSecurityManager {
struct IInternetSecurityManagerVtbl *lpVtbl;
};
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0038_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0038_v0_0_s_ifspec;
extern const IID IID_IInternetSecurityManagerEx;
typedef struct IInternetSecurityManagerExVtbl {
HRESULT(__stdcall *QueryInterface )( IInternetSecurityManagerEx * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( IInternetSecurityManagerEx * This);
ULONG(__stdcall *Release )( IInternetSecurityManagerEx * This);
HRESULT(__stdcall *SetSecuritySite )( IInternetSecurityManagerEx * This, IInternetSecurityMgrSite *pSite);
HRESULT(__stdcall *GetSecuritySite )( IInternetSecurityManagerEx * This, IInternetSecurityMgrSite **ppSite);
HRESULT(__stdcall *MapUrlToZone )( IInternetSecurityManagerEx * This, LPCWSTR pwszUrl, DWORD *pdwZone, DWORD dwFlags);
HRESULT(__stdcall *GetSecurityId )( IInternetSecurityManagerEx * This, LPCWSTR pwszUrl, BYTE *pbSecurityId, DWORD *pcbSecurityId, DWORD_PTR dwReserved);
HRESULT(__stdcall *ProcessUrlAction )( IInternetSecurityManagerEx * This, LPCWSTR pwszUrl, DWORD dwAction, BYTE *pPolicy, DWORD cbPolicy, BYTE *pContext, DWORD cbContext, DWORD dwFlags, DWORD dwReserved);
HRESULT(__stdcall *QueryCustomPolicy )( IInternetSecurityManagerEx * This, LPCWSTR pwszUrl, const GUID * const guidKey, BYTE **ppPolicy, DWORD *pcbPolicy, BYTE *pContext, DWORD cbContext, DWORD dwReserved);
HRESULT(__stdcall *SetZoneMapping )( IInternetSecurityManagerEx * This, DWORD dwZone, LPCWSTR lpszPattern, DWORD dwFlags);
HRESULT(__stdcall *GetZoneMappings )( IInternetSecurityManagerEx * This, DWORD dwZone, IEnumString **ppenumString, DWORD dwFlags);
HRESULT(__stdcall *ProcessUrlActionEx )( IInternetSecurityManagerEx * This, LPCWSTR pwszUrl, DWORD dwAction, BYTE *pPolicy, DWORD cbPolicy, BYTE *pContext, DWORD cbContext, DWORD dwFlags, DWORD dwReserved, DWORD *pdwOutFlags);
} IInternetSecurityManagerExVtbl;
struct IInternetSecurityManagerEx {
struct IInternetSecurityManagerExVtbl *lpVtbl;
};
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0039_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0039_v0_0_s_ifspec;
extern const IID IID_IInternetSecurityManagerEx2;
typedef struct IInternetSecurityManagerEx2Vtbl {
HRESULT(__stdcall *QueryInterface )( IInternetSecurityManagerEx2 * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( IInternetSecurityManagerEx2 * This);
ULONG(__stdcall *Release )( IInternetSecurityManagerEx2 * This);
HRESULT(__stdcall *SetSecuritySite )( IInternetSecurityManagerEx2 * This, IInternetSecurityMgrSite *pSite);
HRESULT(__stdcall *GetSecuritySite )( IInternetSecurityManagerEx2 * This, IInternetSecurityMgrSite **ppSite);
HRESULT(__stdcall *MapUrlToZone )( IInternetSecurityManagerEx2 * This, LPCWSTR pwszUrl, DWORD *pdwZone, DWORD dwFlags);
HRESULT(__stdcall *GetSecurityId )( IInternetSecurityManagerEx2 * This, LPCWSTR pwszUrl, BYTE *pbSecurityId, DWORD *pcbSecurityId, DWORD_PTR dwReserved);
HRESULT(__stdcall *ProcessUrlAction )( IInternetSecurityManagerEx2 * This, LPCWSTR pwszUrl, DWORD dwAction, BYTE *pPolicy, DWORD cbPolicy, BYTE *pContext, DWORD cbContext, DWORD dwFlags, DWORD dwReserved);
HRESULT(__stdcall *QueryCustomPolicy )( IInternetSecurityManagerEx2 * This, LPCWSTR pwszUrl, const GUID * const guidKey, BYTE **ppPolicy, DWORD *pcbPolicy, BYTE *pContext, DWORD cbContext, DWORD dwReserved);
HRESULT(__stdcall *SetZoneMapping )( IInternetSecurityManagerEx2 * This, DWORD dwZone, LPCWSTR lpszPattern, DWORD dwFlags);
HRESULT(__stdcall *GetZoneMappings )( IInternetSecurityManagerEx2 * This, DWORD dwZone, IEnumString **ppenumString, DWORD dwFlags);
HRESULT(__stdcall *ProcessUrlActionEx )( IInternetSecurityManagerEx2 * This, LPCWSTR pwszUrl, DWORD dwAction, BYTE *pPolicy, DWORD cbPolicy, BYTE *pContext, DWORD cbContext, DWORD dwFlags, DWORD dwReserved, DWORD *pdwOutFlags);
HRESULT(__stdcall *MapUrlToZoneEx2 )( IInternetSecurityManagerEx2 * This, IUri *pUri, DWORD *pdwZone, DWORD dwFlags, LPWSTR *ppwszMappedUrl, DWORD *pdwOutFlags);
HRESULT(__stdcall *ProcessUrlActionEx2 )( IInternetSecurityManagerEx2 * This, IUri *pUri, DWORD dwAction, BYTE *pPolicy, DWORD cbPolicy, BYTE *pContext, DWORD cbContext, DWORD dwFlags, DWORD_PTR dwReserved, DWORD *pdwOutFlags);
HRESULT(__stdcall *GetSecurityIdEx2 )( IInternetSecurityManagerEx2 * This, IUri *pUri, BYTE *pbSecurityId, DWORD *pcbSecurityId, DWORD_PTR dwReserved);
HRESULT(__stdcall *QueryCustomPolicyEx2 )( IInternetSecurityManagerEx2 * This, IUri *pUri, const GUID * const guidKey, BYTE **ppPolicy, DWORD *pcbPolicy, BYTE *pContext, DWORD cbContext, DWORD_PTR dwReserved);
} IInternetSecurityManagerEx2Vtbl;
struct IInternetSecurityManagerEx2 {
struct IInternetSecurityManagerEx2Vtbl *lpVtbl;
};
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0040_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0040_v0_0_s_ifspec;
extern const IID IID_IZoneIdentifier;
typedef struct IZoneIdentifierVtbl {
HRESULT(__stdcall *QueryInterface )( IZoneIdentifier * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( IZoneIdentifier * This);
ULONG(__stdcall *Release )( IZoneIdentifier * This);
HRESULT(__stdcall *GetId )( IZoneIdentifier * This, DWORD *pdwZone);
HRESULT(__stdcall *SetId )( IZoneIdentifier * This, DWORD dwZone);
HRESULT(__stdcall *Remove )( IZoneIdentifier * This);
} IZoneIdentifierVtbl;
struct IZoneIdentifier {
struct IZoneIdentifierVtbl *lpVtbl;
};
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0041_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0041_v0_0_s_ifspec;
extern const IID IID_IInternetHostSecurityManager;
typedef struct IInternetHostSecurityManagerVtbl {
HRESULT(__stdcall *QueryInterface )( IInternetHostSecurityManager * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( IInternetHostSecurityManager * This);
ULONG(__stdcall *Release )( IInternetHostSecurityManager * This);
HRESULT(__stdcall *GetSecurityId )( IInternetHostSecurityManager * This, BYTE *pbSecurityId, DWORD *pcbSecurityId, DWORD_PTR dwReserved);
HRESULT(__stdcall *ProcessUrlAction )( IInternetHostSecurityManager * This, DWORD dwAction, BYTE *pPolicy, DWORD cbPolicy, BYTE *pContext, DWORD cbContext, DWORD dwFlags, DWORD dwReserved);
HRESULT(__stdcall *QueryCustomPolicy )( IInternetHostSecurityManager * This, const GUID * const guidKey, BYTE **ppPolicy, DWORD *pcbPolicy, BYTE *pContext, DWORD cbContext, DWORD dwReserved);
} IInternetHostSecurityManagerVtbl;
struct IInternetHostSecurityManager {
struct IInternetHostSecurityManagerVtbl *lpVtbl;
};
extern const GUID GUID_CUSTOM_LOCALMACHINEZONEUNLOCKED;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0042_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0042_v0_0_s_ifspec;
<typedef name="LPURLZONEMANAGER"><ptr><IInternetZoneManager /></ptr></typedef>
typedef enum tagURLZONE { URLZONE_INVALID = -1, URLZONE_PREDEFINED_MIN = 0, URLZONE_LOCAL_MACHINE = 0, URLZONE_INTRANET =(URLZONE_LOCAL_MACHINE + 1 ), URLZONE_TRUSTED =(URLZONE_INTRANET + 1 ), URLZONE_INTERNET =(URLZONE_TRUSTED + 1 ), URLZONE_UNTRUSTED =(URLZONE_INTERNET + 1 ), URLZONE_PREDEFINED_MAX = 999, URLZONE_USER_MIN = 1000, URLZONE_USER_MAX = 10000 } URLZONE;
typedef enum tagURLTEMPLATE { URLTEMPLATE_CUSTOM = 0, URLTEMPLATE_PREDEFINED_MIN = 0x10000, URLTEMPLATE_LOW = 0x10000, URLTEMPLATE_MEDLOW = 0x10500, URLTEMPLATE_MEDIUM = 0x11000, URLTEMPLATE_MEDHIGH = 0x11500, URLTEMPLATE_HIGH = 0x12000, URLTEMPLATE_PREDEFINED_MAX = 0x20000 } URLTEMPLATE;
enum __MIDL_IInternetZoneManager_0001 { MAX_ZONE_PATH = 260, MAX_ZONE_DESCRIPTION = 200 } ;
typedef enum __MIDL_IInternetZoneManager_0002 { ZAFLAGS_CUSTOM_EDIT = 0x1, ZAFLAGS_ADD_SITES = 0x2, ZAFLAGS_REQUIRE_VERIFICATION = 0x4, ZAFLAGS_INCLUDE_PROXY_OVERRIDE = 0x8, ZAFLAGS_INCLUDE_INTRANET_SITES = 0x10, ZAFLAGS_NO_UI = 0x20, ZAFLAGS_SUPPORTS_VERIFICATION = 0x40, ZAFLAGS_UNC_AS_INTRANET = 0x80, ZAFLAGS_DETECT_INTRANET = 0x100, ZAFLAGS_USE_LOCKED_ZONES = 0x10000, ZAFLAGS_VERIFY_TEMPLATE_SETTINGS = 0x20000, ZAFLAGS_NO_CACHE = 0x40000 } ZAFLAGS;
typedef struct _ZONEATTRIBUTES {
<field name="cbSize"><ULONG /></field>
<field name="szDisplayName"><arr length=" 260 "><WCHAR /></arr></field>
<field name="szDescription"><arr length=" 200 "><WCHAR /></arr></field>
<field name="szIconPath"><arr length=" 260 "><WCHAR /></arr></field>
<field name="dwTemplateMinLevel"><DWORD /></field>
<field name="dwTemplateRecommended"><DWORD /></field>
<field name="dwTemplateCurrentLevel"><DWORD /></field>
<field name="dwFlags"><DWORD /></field>
} ZONEATTRIBUTES;
typedef struct _ZONEATTRIBUTES *LPZONEATTRIBUTES;
typedef enum _URLZONEREG { URLZONEREG_DEFAULT = 0, URLZONEREG_HKLM =(URLZONEREG_DEFAULT + 1 ), URLZONEREG_HKCU =(URLZONEREG_HKLM + 1 ) } URLZONEREG;
extern const IID IID_IInternetZoneManager;
typedef struct IInternetZoneManagerVtbl {
HRESULT(__stdcall *QueryInterface )( IInternetZoneManager * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( IInternetZoneManager * This);
ULONG(__stdcall *Release )( IInternetZoneManager * This);
HRESULT(__stdcall *GetZoneAttributes )( IInternetZoneManager * This, DWORD dwZone, ZONEATTRIBUTES *pZoneAttributes);
HRESULT(__stdcall *SetZoneAttributes )( IInternetZoneManager * This, DWORD dwZone, ZONEATTRIBUTES *pZoneAttributes);
HRESULT(__stdcall *GetZoneCustomPolicy )( IInternetZoneManager * This, DWORD dwZone, const GUID * const guidKey, BYTE **ppPolicy, DWORD *pcbPolicy, URLZONEREG urlZoneReg);
HRESULT(__stdcall *SetZoneCustomPolicy )( IInternetZoneManager * This, DWORD dwZone, const GUID * const guidKey, BYTE *pPolicy, DWORD cbPolicy, URLZONEREG urlZoneReg);
HRESULT(__stdcall *GetZoneActionPolicy )( IInternetZoneManager * This, DWORD dwZone, DWORD dwAction, BYTE *pPolicy, DWORD cbPolicy, URLZONEREG urlZoneReg);
HRESULT(__stdcall *SetZoneActionPolicy )( IInternetZoneManager * This, DWORD dwZone, DWORD dwAction, BYTE *pPolicy, DWORD cbPolicy, URLZONEREG urlZoneReg);
HRESULT(__stdcall *PromptAction )( IInternetZoneManager * This, DWORD dwAction, HWND hwndParent, LPCWSTR pwszUrl, LPCWSTR pwszText, DWORD dwPromptFlags);
HRESULT(__stdcall *LogAction )( IInternetZoneManager * This, DWORD dwAction, LPCWSTR pwszUrl, LPCWSTR pwszText, DWORD dwLogFlags);
HRESULT(__stdcall *CreateZoneEnumerator )( IInternetZoneManager * This, DWORD *pdwEnum, DWORD *pdwCount, DWORD dwFlags);
HRESULT(__stdcall *GetZoneAt )( IInternetZoneManager * This, DWORD dwEnum, DWORD dwIndex, DWORD *pdwZone);
HRESULT(__stdcall *DestroyZoneEnumerator )( IInternetZoneManager * This, DWORD dwEnum);
HRESULT(__stdcall *CopyTemplatePoliciesToZone )( IInternetZoneManager * This, DWORD dwTemplate, DWORD dwZone, DWORD dwReserved);
} IInternetZoneManagerVtbl;
struct IInternetZoneManager {
struct IInternetZoneManagerVtbl *lpVtbl;
};
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0043_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0043_v0_0_s_ifspec;
extern const IID IID_IInternetZoneManagerEx;
typedef struct IInternetZoneManagerExVtbl {
HRESULT(__stdcall *QueryInterface )( IInternetZoneManagerEx * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( IInternetZoneManagerEx * This);
ULONG(__stdcall *Release )( IInternetZoneManagerEx * This);
HRESULT(__stdcall *GetZoneAttributes )( IInternetZoneManagerEx * This, DWORD dwZone, ZONEATTRIBUTES *pZoneAttributes);
HRESULT(__stdcall *SetZoneAttributes )( IInternetZoneManagerEx * This, DWORD dwZone, ZONEATTRIBUTES *pZoneAttributes);
HRESULT(__stdcall *GetZoneCustomPolicy )( IInternetZoneManagerEx * This, DWORD dwZone, const GUID * const guidKey, BYTE **ppPolicy, DWORD *pcbPolicy, URLZONEREG urlZoneReg);
HRESULT(__stdcall *SetZoneCustomPolicy )( IInternetZoneManagerEx * This, DWORD dwZone, const GUID * const guidKey, BYTE *pPolicy, DWORD cbPolicy, URLZONEREG urlZoneReg);
HRESULT(__stdcall *GetZoneActionPolicy )( IInternetZoneManagerEx * This, DWORD dwZone, DWORD dwAction, BYTE *pPolicy, DWORD cbPolicy, URLZONEREG urlZoneReg);
HRESULT(__stdcall *SetZoneActionPolicy )( IInternetZoneManagerEx * This, DWORD dwZone, DWORD dwAction, BYTE *pPolicy, DWORD cbPolicy, URLZONEREG urlZoneReg);
HRESULT(__stdcall *PromptAction )( IInternetZoneManagerEx * This, DWORD dwAction, HWND hwndParent, LPCWSTR pwszUrl, LPCWSTR pwszText, DWORD dwPromptFlags);
HRESULT(__stdcall *LogAction )( IInternetZoneManagerEx * This, DWORD dwAction, LPCWSTR pwszUrl, LPCWSTR pwszText, DWORD dwLogFlags);
HRESULT(__stdcall *CreateZoneEnumerator )( IInternetZoneManagerEx * This, DWORD *pdwEnum, DWORD *pdwCount, DWORD dwFlags);
HRESULT(__stdcall *GetZoneAt )( IInternetZoneManagerEx * This, DWORD dwEnum, DWORD dwIndex, DWORD *pdwZone);
HRESULT(__stdcall *DestroyZoneEnumerator )( IInternetZoneManagerEx * This, DWORD dwEnum);
HRESULT(__stdcall *CopyTemplatePoliciesToZone )( IInternetZoneManagerEx * This, DWORD dwTemplate, DWORD dwZone, DWORD dwReserved);
HRESULT(__stdcall *GetZoneActionPolicyEx )( IInternetZoneManagerEx * This, DWORD dwZone, DWORD dwAction, BYTE *pPolicy, DWORD cbPolicy, URLZONEREG urlZoneReg, DWORD dwFlags);
HRESULT(__stdcall *SetZoneActionPolicyEx )( IInternetZoneManagerEx * This, DWORD dwZone, DWORD dwAction, BYTE *pPolicy, DWORD cbPolicy, URLZONEREG urlZoneReg, DWORD dwFlags);
} IInternetZoneManagerExVtbl;
struct IInternetZoneManagerEx {
struct IInternetZoneManagerExVtbl *lpVtbl;
};
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0044_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0044_v0_0_s_ifspec;
extern const IID IID_IInternetZoneManagerEx2;
typedef struct IInternetZoneManagerEx2Vtbl {
HRESULT(__stdcall *QueryInterface )( IInternetZoneManagerEx2 * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( IInternetZoneManagerEx2 * This);
ULONG(__stdcall *Release )( IInternetZoneManagerEx2 * This);
HRESULT(__stdcall *GetZoneAttributes )( IInternetZoneManagerEx2 * This, DWORD dwZone, ZONEATTRIBUTES *pZoneAttributes);
HRESULT(__stdcall *SetZoneAttributes )( IInternetZoneManagerEx2 * This, DWORD dwZone, ZONEATTRIBUTES *pZoneAttributes);
HRESULT(__stdcall *GetZoneCustomPolicy )( IInternetZoneManagerEx2 * This, DWORD dwZone, const GUID * const guidKey, BYTE **ppPolicy, DWORD *pcbPolicy, URLZONEREG urlZoneReg);
HRESULT(__stdcall *SetZoneCustomPolicy )( IInternetZoneManagerEx2 * This, DWORD dwZone, const GUID * const guidKey, BYTE *pPolicy, DWORD cbPolicy, URLZONEREG urlZoneReg);
HRESULT(__stdcall *GetZoneActionPolicy )( IInternetZoneManagerEx2 * This, DWORD dwZone, DWORD dwAction, BYTE *pPolicy, DWORD cbPolicy, URLZONEREG urlZoneReg);
HRESULT(__stdcall *SetZoneActionPolicy )( IInternetZoneManagerEx2 * This, DWORD dwZone, DWORD dwAction, BYTE *pPolicy, DWORD cbPolicy, URLZONEREG urlZoneReg);
HRESULT(__stdcall *PromptAction )( IInternetZoneManagerEx2 * This, DWORD dwAction, HWND hwndParent, LPCWSTR pwszUrl, LPCWSTR pwszText, DWORD dwPromptFlags);
HRESULT(__stdcall *LogAction )( IInternetZoneManagerEx2 * This, DWORD dwAction, LPCWSTR pwszUrl, LPCWSTR pwszText, DWORD dwLogFlags);
HRESULT(__stdcall *CreateZoneEnumerator )( IInternetZoneManagerEx2 * This, DWORD *pdwEnum, DWORD *pdwCount, DWORD dwFlags);
HRESULT(__stdcall *GetZoneAt )( IInternetZoneManagerEx2 * This, DWORD dwEnum, DWORD dwIndex, DWORD *pdwZone);
HRESULT(__stdcall *DestroyZoneEnumerator )( IInternetZoneManagerEx2 * This, DWORD dwEnum);
HRESULT(__stdcall *CopyTemplatePoliciesToZone )( IInternetZoneManagerEx2 * This, DWORD dwTemplate, DWORD dwZone, DWORD dwReserved);
HRESULT(__stdcall *GetZoneActionPolicyEx )( IInternetZoneManagerEx2 * This, DWORD dwZone, DWORD dwAction, BYTE *pPolicy, DWORD cbPolicy, URLZONEREG urlZoneReg, DWORD dwFlags);
HRESULT(__stdcall *SetZoneActionPolicyEx )( IInternetZoneManagerEx2 * This, DWORD dwZone, DWORD dwAction, BYTE *pPolicy, DWORD cbPolicy, URLZONEREG urlZoneReg, DWORD dwFlags);
HRESULT(__stdcall *GetZoneAttributesEx )( IInternetZoneManagerEx2 * This, DWORD dwZone, ZONEATTRIBUTES *pZoneAttributes, DWORD dwFlags);
HRESULT(__stdcall *GetZoneSecurityState )( IInternetZoneManagerEx2 * This, DWORD dwZoneIndex, BOOL fRespectPolicy, LPDWORD pdwState, BOOL *pfPolicyEncountered);
HRESULT(__stdcall *GetIESecurityState )( IInternetZoneManagerEx2 * This, BOOL fRespectPolicy, LPDWORD pdwState, BOOL *pfPolicyEncountered, BOOL fNoCache);
HRESULT(__stdcall *FixUnsecureSettings )( IInternetZoneManagerEx2 * This);
} IInternetZoneManagerEx2Vtbl;
struct IInternetZoneManagerEx2 {
struct IInternetZoneManagerEx2Vtbl *lpVtbl;
};
extern const IID CLSID_SoftDistExt;
typedef struct _tagCODEBASEHOLD {
<field name="cbSize"><ULONG /></field>
<field name="szDistUnit"><LPWSTR /></field>
<field name="szCodeBase"><LPWSTR /></field>
<field name="dwVersionMS"><DWORD /></field>
<field name="dwVersionLS"><DWORD /></field>
<field name="dwStyle"><DWORD /></field>
} CODEBASEHOLD;
typedef struct _tagCODEBASEHOLD *LPCODEBASEHOLD;
typedef struct _tagSOFTDISTINFO {
<field name="cbSize"><ULONG /></field>
<field name="dwFlags"><DWORD /></field>
<field name="dwAdState"><DWORD /></field>
<field name="szTitle"><LPWSTR /></field>
<field name="szAbstract"><LPWSTR /></field>
<field name="szHREF"><LPWSTR /></field>
<field name="dwInstalledVersionMS"><DWORD /></field>
<field name="dwInstalledVersionLS"><DWORD /></field>
<field name="dwUpdateVersionMS"><DWORD /></field>
<field name="dwUpdateVersionLS"><DWORD /></field>
<field name="dwAdvertisedVersionMS"><DWORD /></field>
<field name="dwAdvertisedVersionLS"><DWORD /></field>
<field name="dwReserved"><DWORD /></field>
} SOFTDISTINFO;
typedef struct _tagSOFTDISTINFO *LPSOFTDISTINFO;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0045_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0045_v0_0_s_ifspec;
extern const IID IID_ISoftDistExt;
typedef struct ISoftDistExtVtbl {
HRESULT(__stdcall *QueryInterface )( ISoftDistExt * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( ISoftDistExt * This);
ULONG(__stdcall *Release )( ISoftDistExt * This);
HRESULT(__stdcall *ProcessSoftDist )( ISoftDistExt * This, LPCWSTR szCDFURL, IXMLElement *pSoftDistElement, LPSOFTDISTINFO lpsdi);
HRESULT(__stdcall *GetFirstCodeBase )( ISoftDistExt * This, LPWSTR *szCodeBase, LPDWORD dwMaxSize);
HRESULT(__stdcall *GetNextCodeBase )( ISoftDistExt * This, LPWSTR *szCodeBase, LPDWORD dwMaxSize);
HRESULT(__stdcall *AsyncInstallDistributionUnit )( ISoftDistExt * This, IBindCtx *pbc, LPVOID pvReserved, DWORD flags, LPCODEBASEHOLD lpcbh);
} ISoftDistExtVtbl;
struct ISoftDistExt {
struct ISoftDistExtVtbl *lpVtbl;
};
extern HRESULT __stdcall GetSoftwareUpdateInfo( LPCWSTR szDistUnit, LPSOFTDISTINFO psdi );
extern HRESULT __stdcall SetSoftwareUpdateAdvertisementState( LPCWSTR szDistUnit, DWORD dwAdState, DWORD dwAdvertisedVersionMS, DWORD dwAdvertisedVersionLS );
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0046_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0046_v0_0_s_ifspec;
<typedef name="LPCATALOGFILEINFO"><ptr><ICatalogFileInfo /></ptr></typedef>
extern const IID IID_ICatalogFileInfo;
typedef struct ICatalogFileInfoVtbl {
HRESULT(__stdcall *QueryInterface )( ICatalogFileInfo * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( ICatalogFileInfo * This);
ULONG(__stdcall *Release )( ICatalogFileInfo * This);
HRESULT(__stdcall *GetCatalogFile )( ICatalogFileInfo * This, LPSTR *ppszCatalogFile);
HRESULT(__stdcall *GetJavaTrust )( ICatalogFileInfo * This, void **ppJavaTrust);
} ICatalogFileInfoVtbl;
struct ICatalogFileInfo {
struct ICatalogFileInfoVtbl *lpVtbl;
};
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0047_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0047_v0_0_s_ifspec;
<typedef name="LPDATAFILTER"><ptr><IDataFilter /></ptr></typedef>
extern const IID IID_IDataFilter;
typedef struct IDataFilterVtbl {
HRESULT(__stdcall *QueryInterface )( IDataFilter * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( IDataFilter * This);
ULONG(__stdcall *Release )( IDataFilter * This);
HRESULT(__stdcall *DoEncode )( IDataFilter * This, DWORD dwFlags, LONG lInBufferSize, BYTE *pbInBuffer, LONG lOutBufferSize, BYTE *pbOutBuffer, LONG lInBytesAvailable, LONG *plInBytesRead, LONG *plOutBytesWritten, DWORD dwReserved);
HRESULT(__stdcall *DoDecode )( IDataFilter * This, DWORD dwFlags, LONG lInBufferSize, BYTE *pbInBuffer, LONG lOutBufferSize, BYTE *pbOutBuffer, LONG lInBytesAvailable, LONG *plInBytesRead, LONG *plOutBytesWritten, DWORD dwReserved);
HRESULT(__stdcall *SetEncodingLevel )( IDataFilter * This, DWORD dwEncLevel);
} IDataFilterVtbl;
struct IDataFilter {
struct IDataFilterVtbl *lpVtbl;
};
typedef struct _tagPROTOCOLFILTERDATA {
<field name="cbSize"><DWORD /></field>
<field name="pProtocolSink"><ptr><IInternetProtocolSink /></ptr></field>
<field name="pProtocol"><ptr><IInternetProtocol /></ptr></field>
<field name="pUnk"><ptr><IUnknown /></ptr></field>
<field name="dwFilterFlags"><DWORD /></field>
} PROTOCOLFILTERDATA;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0048_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0048_v0_0_s_ifspec;
<typedef name="LPENCODINGFILTERFACTORY"><ptr><IEncodingFilterFactory /></ptr></typedef>
typedef struct _tagDATAINFO {
<field name="ulTotalSize"><ULONG /></field>
<field name="ulavrPacketSize"><ULONG /></field>
<field name="ulConnectSpeed"><ULONG /></field>
<field name="ulProcessorSpeed"><ULONG /></field>
} DATAINFO;
extern const IID IID_IEncodingFilterFactory;
typedef struct IEncodingFilterFactoryVtbl {
HRESULT(__stdcall *QueryInterface )( IEncodingFilterFactory * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( IEncodingFilterFactory * This);
ULONG(__stdcall *Release )( IEncodingFilterFactory * This);
HRESULT(__stdcall *FindBestFilter )( IEncodingFilterFactory * This, LPCWSTR pwzCodeIn, LPCWSTR pwzCodeOut, DATAINFO info, IDataFilter **ppDF);
HRESULT(__stdcall *GetDefaultFilter )( IEncodingFilterFactory * This, LPCWSTR pwzCodeIn, LPCWSTR pwzCodeOut, IDataFilter **ppDF);
} IEncodingFilterFactoryVtbl;
struct IEncodingFilterFactory {
struct IEncodingFilterFactoryVtbl *lpVtbl;
};
BOOL __stdcall IsLoggingEnabledA( LPCSTR pszUrl);
BOOL __stdcall IsLoggingEnabledW( LPCWSTR pwszUrl);
typedef struct _tagHIT_LOGGING_INFO {
<field name="dwStructSize"><DWORD /></field>
<field name="lpszLoggedUrlName"><LPSTR /></field>
<field name="StartTime"><SYSTEMTIME /></field>
<field name="EndTime"><SYSTEMTIME /></field>
<field name="lpszExtendedInfo"><LPSTR /></field>
} HIT_LOGGING_INFO;
typedef struct _tagHIT_LOGGING_INFO *LPHIT_LOGGING_INFO;
BOOL __stdcall WriteHitLogging( LPHIT_LOGGING_INFO lpLogginginfo);
struct CONFIRMSAFETY {
<field name="clsid"><CLSID /></field>
<field name="pUnk"><ptr><IUnknown /></ptr></field>
<field name="dwFlags"><DWORD /></field>
} ;
extern const GUID GUID_CUSTOM_CONFIRMOBJECTSAFETY;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0049_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0049_v0_0_s_ifspec;
<typedef name="LPIWRAPPEDPROTOCOL"><ptr><IWrappedProtocol /></ptr></typedef>
extern const IID IID_IWrappedProtocol;
typedef struct IWrappedProtocolVtbl {
HRESULT(__stdcall *QueryInterface )( IWrappedProtocol * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( IWrappedProtocol * This);
ULONG(__stdcall *Release )( IWrappedProtocol * This);
HRESULT(__stdcall *GetWrapperCode )( IWrappedProtocol * This, LONG *pnCode, DWORD_PTR dwReserved);
} IWrappedProtocolVtbl;
struct IWrappedProtocol {
struct IWrappedProtocolVtbl *lpVtbl;
};
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0050_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0050_v0_0_s_ifspec;
uint32 __stdcall BSTR_UserSize( uint32 *, uint32, BSTR * );
byte * __stdcall BSTR_UserMarshal( uint32 *, byte *, BSTR * );
byte * __stdcall BSTR_UserUnmarshal( uint32 *, byte *, BSTR * );
void __stdcall BSTR_UserFree( uint32 *, BSTR * );
uint32 __stdcall HWND_UserSize( uint32 *, uint32, HWND * );
byte * __stdcall HWND_UserMarshal( uint32 *, byte *, HWND * );
byte * __stdcall HWND_UserUnmarshal( uint32 *, byte *, HWND * );
void __stdcall HWND_UserFree( uint32 *, HWND * );
uint32 __stdcall BSTR_UserSize64( uint32 *, uint32, BSTR * );
byte * __stdcall BSTR_UserMarshal64( uint32 *, byte *, BSTR * );
byte * __stdcall BSTR_UserUnmarshal64( uint32 *, byte *, BSTR * );
void __stdcall BSTR_UserFree64( uint32 *, BSTR * );
uint32 __stdcall HWND_UserSize64( uint32 *, uint32, HWND * );
byte * __stdcall HWND_UserMarshal64( uint32 *, byte *, HWND * );
byte * __stdcall HWND_UserUnmarshal64( uint32 *, byte *, HWND * );
void __stdcall HWND_UserFree64( uint32 *, HWND * );
HRESULT __stdcall IBinding_GetBindResult_Proxy( IBinding * This, CLSID *pclsidProtocol, DWORD *pdwResult, LPOLESTR *pszResult, DWORD *pdwReserved);
HRESULT __stdcall IBinding_GetBindResult_Stub( IBinding * This, CLSID *pclsidProtocol, DWORD *pdwResult, LPOLESTR *pszResult, DWORD dwReserved);
HRESULT __stdcall IBindStatusCallback_GetBindInfo_Proxy( IBindStatusCallback * This, DWORD *grfBINDF, BINDINFO *pbindinfo);
HRESULT __stdcall IBindStatusCallback_GetBindInfo_Stub( IBindStatusCallback * This, DWORD *grfBINDF, RemBINDINFO *pbindinfo, RemSTGMEDIUM *pstgmed);
HRESULT __stdcall IBindStatusCallback_OnDataAvailable_Proxy( IBindStatusCallback * This, DWORD grfBSCF, DWORD dwSize, FORMATETC *pformatetc, STGMEDIUM *pstgmed);
HRESULT __stdcall IBindStatusCallback_OnDataAvailable_Stub( IBindStatusCallback * This, DWORD grfBSCF, DWORD dwSize, RemFORMATETC *pformatetc, RemSTGMEDIUM *pstgmed);
HRESULT __stdcall IBindStatusCallbackEx_GetBindInfoEx_Proxy( IBindStatusCallbackEx * This, DWORD *grfBINDF, BINDINFO *pbindinfo, DWORD *grfBINDF2, DWORD *pdwReserved);
HRESULT __stdcall IBindStatusCallbackEx_GetBindInfoEx_Stub( IBindStatusCallbackEx * This, DWORD *grfBINDF, RemBINDINFO *pbindinfo, RemSTGMEDIUM *pstgmed, DWORD *grfBINDF2, DWORD *pdwReserved);
HRESULT __stdcall IWinInetInfo_QueryOption_Proxy( IWinInetInfo * This, DWORD dwOption, LPVOID pBuffer, DWORD *pcbBuf);
HRESULT __stdcall IWinInetInfo_QueryOption_Stub( IWinInetInfo * This, DWORD dwOption, BYTE *pBuffer, DWORD *pcbBuf);
HRESULT __stdcall IWinInetHttpInfo_QueryInfo_Proxy( IWinInetHttpInfo * This, DWORD dwOption, LPVOID pBuffer, DWORD *pcbBuf, DWORD *pdwFlags, DWORD *pdwReserved);
HRESULT __stdcall IWinInetHttpInfo_QueryInfo_Stub( IWinInetHttpInfo * This, DWORD dwOption, BYTE *pBuffer, DWORD *pcbBuf, DWORD *pdwFlags, DWORD *pdwReserved);
HRESULT __stdcall IBindHost_MonikerBindToStorage_Proxy( IBindHost * This, IMoniker *pMk, IBindCtx *pBC, IBindStatusCallback *pBSC, const IID * const riid, void **ppvObj);
HRESULT __stdcall IBindHost_MonikerBindToStorage_Stub( IBindHost * This, IMoniker *pMk, IBindCtx *pBC, IBindStatusCallback *pBSC, const IID * const riid, IUnknown **ppvObj);
HRESULT __stdcall IBindHost_MonikerBindToObject_Proxy( IBindHost * This, IMoniker *pMk, IBindCtx *pBC, IBindStatusCallback *pBSC, const IID * const riid, void **ppvObj);
HRESULT __stdcall IBindHost_MonikerBindToObject_Stub( IBindHost * This, IMoniker *pMk, IBindCtx *pBC, IBindStatusCallback *pBSC, const IID * const riid, IUnknown **ppvObj);
<typedef name="IPropertyStorage"><struct name="IPropertyStorage" /></typedef>
<typedef name="IPropertySetStorage"><struct name="IPropertySetStorage" /></typedef>
<typedef name="IEnumSTATPROPSTG"><struct name="IEnumSTATPROPSTG" /></typedef>
<typedef name="IEnumSTATPROPSETSTG"><struct name="IEnumSTATPROPSETSTG" /></typedef>
typedef struct tagVersionedStream {
<field name="guidVersion"><GUID /></field>
<field name="pStream"><ptr><IStream /></ptr></field>
} VERSIONEDSTREAM;
typedef struct tagVersionedStream *LPVERSIONEDSTREAM;
<typedef name="PROPVARIANT"><struct name="tagPROPVARIANT" /></typedef>
typedef struct tagCAC {
<field name="cElems"><ULONG /></field>
<field name="pElems"><ptr><CHAR /></ptr></field>
} CAC;
typedef struct tagCAUB {
<field name="cElems"><ULONG /></field>
<field name="pElems"><ptr><UCHAR /></ptr></field>
} CAUB;
typedef struct tagCAI {
<field name="cElems"><ULONG /></field>
<field name="pElems"><ptr><SHORT /></ptr></field>
} CAI;
typedef struct tagCAUI {
<field name="cElems"><ULONG /></field>
<field name="pElems"><ptr><USHORT /></ptr></field>
} CAUI;
typedef struct tagCAL {
<field name="cElems"><ULONG /></field>
<field name="pElems"><ptr><LONG /></ptr></field>
} CAL;
typedef struct tagCAUL {
<field name="cElems"><ULONG /></field>
<field name="pElems"><ptr><ULONG /></ptr></field>
} CAUL;
typedef struct tagCAFLT {
<field name="cElems"><ULONG /></field>
<field name="pElems"><ptr><FLOAT /></ptr></field>
} CAFLT;
typedef struct tagCADBL {
<field name="cElems"><ULONG /></field>
<field name="pElems"><ptr><DOUBLE /></ptr></field>
} CADBL;
typedef struct tagCACY {
<field name="cElems"><ULONG /></field>
<field name="pElems"><ptr><CY /></ptr></field>
} CACY;
typedef struct tagCADATE {
<field name="cElems"><ULONG /></field>
<field name="pElems"><ptr><DATE /></ptr></field>
} CADATE;
typedef struct tagCABSTR {
<field name="cElems"><ULONG /></field>
<field name="pElems"><ptr><BSTR /></ptr></field>
} CABSTR;
typedef struct tagCABSTRBLOB {
<field name="cElems"><ULONG /></field>
<field name="pElems"><ptr><BSTRBLOB /></ptr></field>
} CABSTRBLOB;
typedef struct tagCABOOL {
<field name="cElems"><ULONG /></field>
<field name="pElems"><ptr><VARIANT_BOOL /></ptr></field>
} CABOOL;
typedef struct tagCASCODE {
<field name="cElems"><ULONG /></field>
<field name="pElems"><ptr><SCODE /></ptr></field>
} CASCODE;
typedef struct tagCAPROPVARIANT {
<field name="cElems"><ULONG /></field>
<field name="pElems"><ptr><PROPVARIANT /></ptr></field>
} CAPROPVARIANT;
typedef struct tagCAH {
<field name="cElems"><ULONG /></field>
<field name="pElems"><ptr><LARGE_INTEGER /></ptr></field>
} CAH;
typedef struct tagCAUH {
<field name="cElems"><ULONG /></field>
<field name="pElems"><ptr><ULARGE_INTEGER /></ptr></field>
} CAUH;
typedef struct tagCALPSTR {
<field name="cElems"><ULONG /></field>
<field name="pElems"><ptr><LPSTR /></ptr></field>
} CALPSTR;
typedef struct tagCALPWSTR {
<field name="cElems"><ULONG /></field>
<field name="pElems"><ptr><LPWSTR /></ptr></field>
} CALPWSTR;
typedef struct tagCAFILETIME {
<field name="cElems"><ULONG /></field>
<field name="pElems"><ptr><FILETIME /></ptr></field>
} CAFILETIME;
typedef struct tagCACLIPDATA {
<field name="cElems"><ULONG /></field>
<field name="pElems"><ptr><CLIPDATA /></ptr></field>
} CACLIPDATA;
typedef struct tagCACLSID {
<field name="cElems"><ULONG /></field>
<field name="pElems"><ptr><CLSID /></ptr></field>
} CACLSID;
<typedef name="PROPVAR_PAD1"><WORD /></typedef>
<typedef name="PROPVAR_PAD2"><WORD /></typedef>
<typedef name="PROPVAR_PAD3"><WORD /></typedef>
struct tagPROPVARIANT {
union {
struct {
<field name="vt"><VARTYPE /></field>
<field name="wReserved1"><PROPVAR_PAD1 /></field>
<field name="wReserved2"><PROPVAR_PAD2 /></field>
<field name="wReserved3"><PROPVAR_PAD3 /></field>
union {
<field name="cVal"><CHAR /></field>
<field name="bVal"><UCHAR /></field>
<field name="iVal"><SHORT /></field>
<field name="uiVal"><USHORT /></field>
<field name="lVal"><LONG /></field>
<field name="ulVal"><ULONG /></field>
<field name="intVal"><INT /></field>
<field name="uintVal"><UINT /></field>
<field name="hVal"><LARGE_INTEGER /></field>
<field name="uhVal"><ULARGE_INTEGER /></field>
<field name="fltVal"><FLOAT /></field>
<field name="dblVal"><DOUBLE /></field>
<field name="boolVal"><VARIANT_BOOL /></field>
<field name="scode"><SCODE /></field>
<field name="cyVal"><CY /></field>
<field name="date"><DATE /></field>
<field name="filetime"><FILETIME /></field>
<field name="puuid"><ptr><CLSID /></ptr></field>
<field name="pclipdata"><ptr><CLIPDATA /></ptr></field>
<field name="bstrVal"><BSTR /></field>
<field name="bstrblobVal"><BSTRBLOB /></field>
<field name="blob"><BLOB /></field>
<field name="pszVal"><LPSTR /></field>
<field name="pwszVal"><LPWSTR /></field>
<field name="punkVal"><ptr><IUnknown /></ptr></field>
<field name="pdispVal"><ptr><IDispatch /></ptr></field>
<field name="pStream"><ptr><IStream /></ptr></field>
<field name="pStorage"><ptr><IStorage /></ptr></field>
<field name="pVersionedStream"><LPVERSIONEDSTREAM /></field>
<field name="parray"><LPSAFEARRAY /></field>
<field name="cac"><CAC /></field>
<field name="caub"><CAUB /></field>
<field name="cai"><CAI /></field>
<field name="caui"><CAUI /></field>
<field name="cal"><CAL /></field>
<field name="caul"><CAUL /></field>
<field name="cah"><CAH /></field>
<field name="cauh"><CAUH /></field>
<field name="caflt"><CAFLT /></field>
<field name="cadbl"><CADBL /></field>
<field name="cabool"><CABOOL /></field>
<field name="cascode"><CASCODE /></field>
<field name="cacy"><CACY /></field>
<field name="cadate"><CADATE /></field>
<field name="cafiletime"><CAFILETIME /></field>
<field name="cauuid"><CACLSID /></field>
<field name="caclipdata"><CACLIPDATA /></field>
<field name="cabstr"><CABSTR /></field>
<field name="cabstrblob"><CABSTRBLOB /></field>
<field name="calpstr"><CALPSTR /></field>
<field name="calpwstr"><CALPWSTR /></field>
<field name="capropvar"><CAPROPVARIANT /></field>
<field name="pcVal"><ptr><CHAR /></ptr></field>
<field name="pbVal"><ptr><UCHAR /></ptr></field>
<field name="piVal"><ptr><SHORT /></ptr></field>
<field name="puiVal"><ptr><USHORT /></ptr></field>
<field name="plVal"><ptr><LONG /></ptr></field>
<field name="pulVal"><ptr><ULONG /></ptr></field>
<field name="pintVal"><ptr><INT /></ptr></field>
<field name="puintVal"><ptr><UINT /></ptr></field>
<field name="pfltVal"><ptr><FLOAT /></ptr></field>
<field name="pdblVal"><ptr><DOUBLE /></ptr></field>
<field name="pboolVal"><ptr><VARIANT_BOOL /></ptr></field>
<field name="pdecVal"><ptr><DECIMAL /></ptr></field>
<field name="pscode"><ptr><SCODE /></ptr></field>
<field name="pcyVal"><ptr><CY /></ptr></field>
<field name="pdate"><ptr><DATE /></ptr></field>
<field name="pbstrVal"><ptr><BSTR /></ptr></field>
IUnknown **ppunkVal;
IDispatch **ppdispVal;
<field name="pparray"><ptr><LPSAFEARRAY /></ptr></field>
<field name="pvarVal"><ptr><PROPVARIANT /></ptr></field>
} ;
} ;
<field name="decVal"><DECIMAL /></field>
};
};
<typedef name="LPPROPVARIANT"><ptr><tagPROPVARIANT /></ptr></typedef>
enum PIDMSI_STATUS_VALUE { PIDMSI_STATUS_NORMAL = 0, PIDMSI_STATUS_NEW =(PIDMSI_STATUS_NORMAL + 1 ), PIDMSI_STATUS_PRELIM =(PIDMSI_STATUS_NEW + 1 ), PIDMSI_STATUS_DRAFT =(PIDMSI_STATUS_PRELIM + 1 ), PIDMSI_STATUS_INPROGRESS =(PIDMSI_STATUS_DRAFT + 1 ), PIDMSI_STATUS_EDIT =(PIDMSI_STATUS_INPROGRESS + 1 ), PIDMSI_STATUS_REVIEW =(PIDMSI_STATUS_EDIT + 1 ), PIDMSI_STATUS_PROOF =(PIDMSI_STATUS_REVIEW + 1 ), PIDMSI_STATUS_FINAL =(PIDMSI_STATUS_PROOF + 1 ), PIDMSI_STATUS_OTHER = 0x7fff } ;
typedef struct tagPROPSPEC {
<field name="ulKind"><ULONG /></field>
union {
<field name="propid"><PROPID /></field>
<field name="lpwstr"><LPOLESTR /></field>
} ;
} PROPSPEC;
typedef struct tagSTATPROPSTG {
<field name="lpwstrName"><LPOLESTR /></field>
<field name="propid"><PROPID /></field>
<field name="vt"><VARTYPE /></field>
} STATPROPSTG;
typedef struct tagSTATPROPSETSTG {
<field name="fmtid"><FMTID /></field>
<field name="clsid"><CLSID /></field>
<field name="grfFlags"><DWORD /></field>
<field name="mtime"><FILETIME /></field>
<field name="ctime"><FILETIME /></field>
<field name="atime"><FILETIME /></field>
<field name="dwOSVersion"><DWORD /></field>
} STATPROPSETSTG;
extern RPC_IF_HANDLE __MIDL_itf_propidl_0000_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_propidl_0000_0000_v0_0_s_ifspec;
extern const IID IID_IPropertyStorage;
typedef struct IPropertyStorageVtbl {
HRESULT(__stdcall *QueryInterface )( IPropertyStorage * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( IPropertyStorage * This);
ULONG(__stdcall *Release )( IPropertyStorage * This);
HRESULT(__stdcall *ReadMultiple )( IPropertyStorage * This, ULONG cpspec, const PROPSPEC rgpspec[ ], PROPVARIANT rgpropvar[ ]);
HRESULT(__stdcall *WriteMultiple )( IPropertyStorage * This, ULONG cpspec, const PROPSPEC rgpspec[ ], const PROPVARIANT rgpropvar[ ], PROPID propidNameFirst);
HRESULT(__stdcall *DeleteMultiple )( IPropertyStorage * This, ULONG cpspec, const PROPSPEC rgpspec[ ]);
HRESULT(__stdcall *ReadPropertyNames )( IPropertyStorage * This, ULONG cpropid, const PROPID rgpropid[ ], LPOLESTR rglpwstrName[ ]);
HRESULT(__stdcall *WritePropertyNames )( IPropertyStorage * This, ULONG cpropid, const PROPID rgpropid[ ], const LPOLESTR rglpwstrName[ ]);
HRESULT(__stdcall *DeletePropertyNames )( IPropertyStorage * This, ULONG cpropid, const PROPID rgpropid[ ]);
HRESULT(__stdcall *Commit )( IPropertyStorage * This, DWORD grfCommitFlags);
HRESULT(__stdcall *Revert )( IPropertyStorage * This);
HRESULT(__stdcall *Enum )( IPropertyStorage * This, IEnumSTATPROPSTG **ppenum);
HRESULT(__stdcall *SetTimes )( IPropertyStorage * This, const FILETIME *pctime, const FILETIME *patime, const FILETIME *pmtime);
HRESULT(__stdcall *SetClass )( IPropertyStorage * This, const IID * const clsid);
HRESULT(__stdcall *Stat )( IPropertyStorage * This, STATPROPSETSTG *pstatpsstg);
} IPropertyStorageVtbl;
struct IPropertyStorage {
struct IPropertyStorageVtbl *lpVtbl;
};
<typedef name="LPPROPERTYSETSTORAGE"><ptr><IPropertySetStorage /></ptr></typedef>
extern const IID IID_IPropertySetStorage;
typedef struct IPropertySetStorageVtbl {
HRESULT(__stdcall *QueryInterface )( IPropertySetStorage * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( IPropertySetStorage * This);
ULONG(__stdcall *Release )( IPropertySetStorage * This);
HRESULT(__stdcall *Create )( IPropertySetStorage * This, const IID * const rfmtid, const CLSID *pclsid, DWORD grfFlags, DWORD grfMode, IPropertyStorage **ppprstg);
HRESULT(__stdcall *Open )( IPropertySetStorage * This, const IID * const rfmtid, DWORD grfMode, IPropertyStorage **ppprstg);
HRESULT(__stdcall *Delete )( IPropertySetStorage * This, const IID * const rfmtid);
HRESULT(__stdcall *Enum )( IPropertySetStorage * This, IEnumSTATPROPSETSTG **ppenum);
} IPropertySetStorageVtbl;
struct IPropertySetStorage {
struct IPropertySetStorageVtbl *lpVtbl;
};
<typedef name="LPENUMSTATPROPSTG"><ptr><IEnumSTATPROPSTG /></ptr></typedef>
extern const IID IID_IEnumSTATPROPSTG;
typedef struct IEnumSTATPROPSTGVtbl {
HRESULT(__stdcall *QueryInterface )( IEnumSTATPROPSTG * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( IEnumSTATPROPSTG * This);
ULONG(__stdcall *Release )( IEnumSTATPROPSTG * This);
HRESULT(__stdcall *Next )( IEnumSTATPROPSTG * This, ULONG celt, STATPROPSTG *rgelt, ULONG *pceltFetched);
HRESULT(__stdcall *Skip )( IEnumSTATPROPSTG * This, ULONG celt);
HRESULT(__stdcall *Reset )( IEnumSTATPROPSTG * This);
HRESULT(__stdcall *Clone )( IEnumSTATPROPSTG * This, IEnumSTATPROPSTG **ppenum);
} IEnumSTATPROPSTGVtbl;
struct IEnumSTATPROPSTG {
struct IEnumSTATPROPSTGVtbl *lpVtbl;
};
HRESULT __stdcall IEnumSTATPROPSTG_RemoteNext_Proxy( IEnumSTATPROPSTG * This, ULONG celt, STATPROPSTG *rgelt, ULONG *pceltFetched);
void __stdcall IEnumSTATPROPSTG_RemoteNext_Stub( IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
<typedef name="LPENUMSTATPROPSETSTG"><ptr><IEnumSTATPROPSETSTG /></ptr></typedef>
extern const IID IID_IEnumSTATPROPSETSTG;
typedef struct IEnumSTATPROPSETSTGVtbl {
HRESULT(__stdcall *QueryInterface )( IEnumSTATPROPSETSTG * This, const IID * const riid, void **ppvObject);
ULONG(__stdcall *AddRef )( IEnumSTATPROPSETSTG * This);
ULONG(__stdcall *Release )( IEnumSTATPROPSETSTG * This);
HRESULT(__stdcall *Next )( IEnumSTATPROPSETSTG * This, ULONG celt, STATPROPSETSTG *rgelt, ULONG *pceltFetched);
HRESULT(__stdcall *Skip )( IEnumSTATPROPSETSTG * This, ULONG celt);
HRESULT(__stdcall *Reset )( IEnumSTATPROPSETSTG * This);
HRESULT(__stdcall *Clone )( IEnumSTATPROPSETSTG * This, IEnumSTATPROPSETSTG **ppenum);
} IEnumSTATPROPSETSTGVtbl;
struct IEnumSTATPROPSETSTG {
struct IEnumSTATPROPSETSTGVtbl *lpVtbl;
};
HRESULT __stdcall IEnumSTATPROPSETSTG_RemoteNext_Proxy( IEnumSTATPROPSETSTG * This, ULONG celt, STATPROPSETSTG *rgelt, ULONG *pceltFetched);
void __stdcall IEnumSTATPROPSETSTG_RemoteNext_Stub( IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
<typedef name="LPPROPERTYSTORAGE"><ptr><IPropertyStorage /></ptr></typedef>
extern HRESULT __stdcall PropVariantCopy( PROPVARIANT* pvarDest, const PROPVARIANT * pvarSrc);
extern HRESULT __stdcall PropVariantClear( PROPVARIANT* pvar);
extern HRESULT __stdcall FreePropVariantArray( ULONG cVariants, PROPVARIANT* rgvars);
extern HRESULT __stdcall StgCreatePropStg( IUnknown* pUnk, const IID * const fmtid, const CLSID* pclsid, DWORD grfFlags, DWORD dwReserved, IPropertyStorage** ppPropStg);
extern HRESULT __stdcall StgOpenPropStg( IUnknown* pUnk, const IID * const fmtid, DWORD grfFlags, DWORD dwReserved, IPropertyStorage** ppPropStg);
extern HRESULT __stdcall StgCreatePropSetStg( IStorage* pStorage, DWORD dwReserved, IPropertySetStorage** ppPropSetStg);
extern HRESULT __stdcall FmtIdToPropStgName( const FMTID* pfmtid, LPOLESTR oszName);
extern HRESULT __stdcall PropStgNameToFmtId( const LPOLESTR oszName, FMTID* pfmtid);
typedef struct tagSERIALIZEDPROPERTYVALUE {
<field name="dwType"><DWORD /></field>
<field name="rgb"><arr length="1"><BYTE /></arr></field>
} SERIALIZEDPROPERTYVALUE;
extern SERIALIZEDPROPERTYVALUE* __stdcall StgConvertVariantToProperty( const PROPVARIANT* pvar, USHORT CodePage, SERIALIZEDPROPERTYVALUE* pprop, ULONG* pcb, PROPID pid, BOOLEAN fReserved, ULONG* pcIndirect);
extern RPC_IF_HANDLE __MIDL_itf_propidl_0000_0004_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_propidl_0000_0004_v0_0_s_ifspec;
uint32 __stdcall BSTR_UserSize( uint32 *, uint32, BSTR * );
byte * __stdcall BSTR_UserMarshal( uint32 *, byte *, BSTR * );
byte * __stdcall BSTR_UserUnmarshal( uint32 *, byte *, BSTR * );
void __stdcall BSTR_UserFree( uint32 *, BSTR * );
uint32 __stdcall LPSAFEARRAY_UserSize( uint32 *, uint32, LPSAFEARRAY * );
byte * __stdcall LPSAFEARRAY_UserMarshal( uint32 *, byte *, LPSAFEARRAY * );
byte * __stdcall LPSAFEARRAY_UserUnmarshal( uint32 *, byte *, LPSAFEARRAY * );
void __stdcall LPSAFEARRAY_UserFree( uint32 *, LPSAFEARRAY * );
uint32 __stdcall BSTR_UserSize64( uint32 *, uint32, BSTR * );
byte * __stdcall BSTR_UserMarshal64( uint32 *, byte *, BSTR * );
byte * __stdcall BSTR_UserUnmarshal64( uint32 *, byte *, BSTR * );
void __stdcall BSTR_UserFree64( uint32 *, BSTR * );
uint32 __stdcall LPSAFEARRAY_UserSize64( uint32 *, uint32, LPSAFEARRAY * );
byte * __stdcall LPSAFEARRAY_UserMarshal64( uint32 *, byte *, LPSAFEARRAY * );
byte * __stdcall LPSAFEARRAY_UserUnmarshal64( uint32 *, byte *, LPSAFEARRAY * );
void __stdcall LPSAFEARRAY_UserFree64( uint32 *, LPSAFEARRAY * );
HRESULT __stdcall IEnumSTATPROPSTG_Next_Proxy( IEnumSTATPROPSTG * This, ULONG celt, STATPROPSTG *rgelt, ULONG *pceltFetched);
HRESULT __stdcall IEnumSTATPROPSTG_Next_Stub( IEnumSTATPROPSTG * This, ULONG celt, STATPROPSTG *rgelt, ULONG *pceltFetched);
HRESULT __stdcall IEnumSTATPROPSETSTG_Next_Proxy( IEnumSTATPROPSETSTG * This, ULONG celt, STATPROPSETSTG *rgelt, ULONG *pceltFetched);
HRESULT __stdcall IEnumSTATPROPSETSTG_Next_Stub( IEnumSTATPROPSETSTG * This, ULONG celt, STATPROPSETSTG *rgelt, ULONG *pceltFetched);
extern HRESULT __stdcall CreateStdProgressIndicator( HWND hwndParent, LPCOLESTR pszTitle, IBindStatusCallback * pIbscCaller, IBindStatusCallback ** ppIbsc);
extern const IID IID_StdOle;
extern BSTR __stdcall SysAllocString( const OLECHAR * psz);
extern INT __stdcall SysReAllocString( BSTR* pbstr, const OLECHAR* psz);
extern BSTR __stdcall SysAllocStringLen( const OLECHAR * strIn, UINT ui);
extern INT __stdcall SysReAllocStringLen( BSTR* pbstr, const OLECHAR* psz, uint32 len);
extern void __stdcall SysFreeString( BSTR bstrString);
extern UINT __stdcall SysStringLen( BSTR);
extern UINT __stdcall SysStringByteLen( BSTR bstr);
extern BSTR __stdcall SysAllocStringByteLen( LPCSTR psz, UINT len);
extern INT __stdcall DosDateTimeToVariantTime( USHORT wDosDate, USHORT wDosTime, DOUBLE * pvtime);
extern INT __stdcall VariantTimeToDosDateTime( DOUBLE vtime, USHORT * pwDosDate, USHORT * pwDosTime);
extern INT __stdcall SystemTimeToVariantTime( LPSYSTEMTIME lpSystemTime, DOUBLE *pvtime);
extern INT __stdcall VariantTimeToSystemTime( DOUBLE vtime, LPSYSTEMTIME lpSystemTime);
extern HRESULT __stdcall SafeArrayAllocDescriptor( UINT cDims, SAFEARRAY ** ppsaOut);
extern HRESULT __stdcall SafeArrayAllocDescriptorEx( VARTYPE vt, UINT cDims, SAFEARRAY ** ppsaOut);
extern HRESULT __stdcall SafeArrayAllocData( SAFEARRAY * psa);
extern SAFEARRAY * __stdcall SafeArrayCreate( VARTYPE vt, UINT cDims, SAFEARRAYBOUND * rgsabound);
extern SAFEARRAY * __stdcall SafeArrayCreateEx( VARTYPE vt, UINT cDims, SAFEARRAYBOUND * rgsabound, PVOID pvExtra);
extern HRESULT __stdcall SafeArrayCopyData( SAFEARRAY *psaSource, SAFEARRAY *psaTarget);
extern HRESULT __stdcall SafeArrayDestroyDescriptor( SAFEARRAY * psa);
extern HRESULT __stdcall SafeArrayDestroyData( SAFEARRAY * psa);
extern HRESULT __stdcall SafeArrayDestroy( SAFEARRAY * psa);
extern HRESULT __stdcall SafeArrayRedim( SAFEARRAY * psa, SAFEARRAYBOUND * psaboundNew);
extern UINT __stdcall SafeArrayGetDim( SAFEARRAY * psa);
extern UINT __stdcall SafeArrayGetElemsize( SAFEARRAY * psa);
extern HRESULT __stdcall SafeArrayGetUBound( SAFEARRAY * psa, UINT nDim, LONG * plUbound);
extern HRESULT __stdcall SafeArrayGetLBound( SAFEARRAY * psa, UINT nDim, LONG * plLbound);
extern HRESULT __stdcall SafeArrayLock( SAFEARRAY * psa);
extern HRESULT __stdcall SafeArrayUnlock( SAFEARRAY * psa);
extern HRESULT __stdcall SafeArrayAccessData( SAFEARRAY * psa, void ** ppvData);
extern HRESULT __stdcall SafeArrayUnaccessData( SAFEARRAY * psa);
extern HRESULT __stdcall SafeArrayGetElement( SAFEARRAY * psa, LONG * rgIndices, void * pv);
extern HRESULT __stdcall SafeArrayPutElement( SAFEARRAY * psa, LONG * rgIndices, void * pv);
extern HRESULT __stdcall SafeArrayCopy( SAFEARRAY * psa, SAFEARRAY ** ppsaOut);
extern HRESULT __stdcall SafeArrayPtrOfIndex( SAFEARRAY * psa, LONG * rgIndices, void ** ppvData);
extern HRESULT __stdcall SafeArraySetRecordInfo( SAFEARRAY * psa, IRecordInfo * prinfo);
extern HRESULT __stdcall SafeArrayGetRecordInfo( SAFEARRAY * psa, IRecordInfo ** prinfo);
extern HRESULT __stdcall SafeArraySetIID( SAFEARRAY * psa, const GUID * const guid);
extern HRESULT __stdcall SafeArrayGetIID( SAFEARRAY * psa, GUID * pguid);
extern HRESULT __stdcall SafeArrayGetVartype( SAFEARRAY * psa, VARTYPE * pvt);
extern SAFEARRAY * __stdcall SafeArrayCreateVector( VARTYPE vt, LONG lLbound, ULONG cElements);
extern SAFEARRAY * __stdcall SafeArrayCreateVectorEx( VARTYPE vt, LONG lLbound, ULONG cElements, PVOID pvExtra);
extern void __stdcall VariantInit( VARIANTARG * pvarg);
extern HRESULT __stdcall VariantClear( VARIANTARG * pvarg);
extern HRESULT __stdcall VariantCopy( VARIANTARG * pvargDest, const VARIANTARG * pvargSrc);
extern HRESULT __stdcall VariantCopyInd( VARIANT * pvarDest, const VARIANTARG * pvargSrc);
extern HRESULT __stdcall VariantChangeType( VARIANTARG * pvargDest, const VARIANTARG * pvarSrc, USHORT wFlags, VARTYPE vt);
extern HRESULT __stdcall VariantChangeTypeEx( VARIANTARG * pvargDest, const VARIANTARG * pvarSrc, LCID lcid, USHORT wFlags, VARTYPE vt);
extern HRESULT __stdcall VectorFromBstr(BSTR bstr, SAFEARRAY ** ppsa);
extern HRESULT __stdcall BstrFromVector(SAFEARRAY *psa, BSTR *pbstr);
extern HRESULT __stdcall VarUI1FromI2(SHORT sIn, BYTE * pbOut);
extern HRESULT __stdcall VarUI1FromI4(LONG lIn, BYTE * pbOut);
extern HRESULT __stdcall VarUI1FromI8(LONG64 i64In, BYTE * pbOut);
extern HRESULT __stdcall VarUI1FromR4(FLOAT fltIn, BYTE * pbOut);
extern HRESULT __stdcall VarUI1FromR8(DOUBLE dblIn, BYTE * pbOut);
extern HRESULT __stdcall VarUI1FromCy(CY cyIn, BYTE * pbOut);
extern HRESULT __stdcall VarUI1FromDate(DATE dateIn, BYTE * pbOut);
extern HRESULT __stdcall VarUI1FromStr( LPCOLESTR strIn, LCID lcid, ULONG dwFlags, BYTE * pbOut);
extern HRESULT __stdcall VarUI1FromDisp(IDispatch * pdispIn, LCID lcid, BYTE * pbOut);
extern HRESULT __stdcall VarUI1FromBool(VARIANT_BOOL boolIn, BYTE * pbOut);
extern HRESULT __stdcall VarUI1FromI1(CHAR cIn, BYTE *pbOut);
extern HRESULT __stdcall VarUI1FromUI2(USHORT uiIn, BYTE *pbOut);
extern HRESULT __stdcall VarUI1FromUI4(ULONG ulIn, BYTE *pbOut);
extern HRESULT __stdcall VarUI1FromUI8(ULONG64 ui64In, BYTE * pbOut);
extern HRESULT __stdcall VarUI1FromDec( const DECIMAL *pdecIn, BYTE *pbOut);
extern HRESULT __stdcall VarI2FromUI1(BYTE bIn, SHORT * psOut);
extern HRESULT __stdcall VarI2FromI4(LONG lIn, SHORT * psOut);
extern HRESULT __stdcall VarI2FromI8(LONG64 i64In, SHORT * psOut);
extern HRESULT __stdcall VarI2FromR4(FLOAT fltIn, SHORT * psOut);
extern HRESULT __stdcall VarI2FromR8(DOUBLE dblIn, SHORT * psOut);
extern HRESULT __stdcall VarI2FromCy(CY cyIn, SHORT * psOut);
extern HRESULT __stdcall VarI2FromDate(DATE dateIn, SHORT * psOut);
extern HRESULT __stdcall VarI2FromStr( LPCOLESTR strIn, LCID lcid, ULONG dwFlags, SHORT * psOut);
extern HRESULT __stdcall VarI2FromDisp(IDispatch * pdispIn, LCID lcid, SHORT * psOut);
extern HRESULT __stdcall VarI2FromBool(VARIANT_BOOL boolIn, SHORT * psOut);
extern HRESULT __stdcall VarI2FromI1(CHAR cIn, SHORT *psOut);
extern HRESULT __stdcall VarI2FromUI2(USHORT uiIn, SHORT *psOut);
extern HRESULT __stdcall VarI2FromUI4(ULONG ulIn, SHORT *psOut);
extern HRESULT __stdcall VarI2FromUI8(ULONG64 ui64In, SHORT * psOut);
extern HRESULT __stdcall VarI2FromDec( const DECIMAL *pdecIn, SHORT *psOut);
extern HRESULT __stdcall VarI4FromUI1(BYTE bIn, LONG * plOut);
extern HRESULT __stdcall VarI4FromI2(SHORT sIn, LONG * plOut);
extern HRESULT __stdcall VarI4FromI8(LONG64 i64In, LONG * plOut);
extern HRESULT __stdcall VarI4FromR4(FLOAT fltIn, LONG * plOut);
extern HRESULT __stdcall VarI4FromR8(DOUBLE dblIn, LONG * plOut);
extern HRESULT __stdcall VarI4FromCy(CY cyIn, LONG * plOut);
extern HRESULT __stdcall VarI4FromDate(DATE dateIn, LONG * plOut);
extern HRESULT __stdcall VarI4FromStr( LPCOLESTR strIn, LCID lcid, ULONG dwFlags, LONG * plOut);
extern HRESULT __stdcall VarI4FromDisp(IDispatch * pdispIn, LCID lcid, LONG * plOut);
extern HRESULT __stdcall VarI4FromBool(VARIANT_BOOL boolIn, LONG * plOut);
extern HRESULT __stdcall VarI4FromI1(CHAR cIn, LONG *plOut);
extern HRESULT __stdcall VarI4FromUI2(USHORT uiIn, LONG *plOut);
extern HRESULT __stdcall VarI4FromUI4(ULONG ulIn, LONG *plOut);
extern HRESULT __stdcall VarI4FromUI8(ULONG64 ui64In, LONG * plOut);
extern HRESULT __stdcall VarI4FromDec( const DECIMAL *pdecIn, LONG *plOut);
extern HRESULT __stdcall VarI4FromInt(INT intIn, LONG *plOut);
extern HRESULT __stdcall VarI8FromUI1(BYTE bIn, LONG64 * pi64Out);
extern HRESULT __stdcall VarI8FromI2(SHORT sIn, LONG64 * pi64Out);
extern HRESULT __stdcall VarI8FromI4(LONG lIn, LONG64 * pi64Out);
extern HRESULT __stdcall VarI8FromR4(FLOAT fltIn, LONG64 * pi64Out);
extern HRESULT __stdcall VarI8FromR8(DOUBLE dblIn, LONG64 * pi64Out);
extern HRESULT __stdcall VarI8FromCy( CY cyIn, LONG64 * pi64Out);
extern HRESULT __stdcall VarI8FromDate(DATE dateIn, LONG64 * pi64Out);
extern HRESULT __stdcall VarI8FromStr( LPCOLESTR strIn, LCID lcid, uint32 dwFlags, LONG64 * pi64Out);
extern HRESULT __stdcall VarI8FromDisp(IDispatch * pdispIn, LCID lcid, LONG64 * pi64Out);
extern HRESULT __stdcall VarI8FromBool(VARIANT_BOOL boolIn, LONG64 * pi64Out);
extern HRESULT __stdcall VarI8FromI1(CHAR cIn, LONG64 * pi64Out);
extern HRESULT __stdcall VarI8FromUI2(USHORT uiIn, LONG64 * pi64Out);
extern HRESULT __stdcall VarI8FromUI4(ULONG ulIn, LONG64 * pi64Out);
extern HRESULT __stdcall VarI8FromUI8(ULONG64 ui64In, LONG64 * pi64Out);
extern HRESULT __stdcall VarI8FromDec( const DECIMAL *pdecIn, LONG64 * pi64Out);
extern HRESULT __stdcall VarI8FromInt(INT intIn, LONG64 * pi64Out);
extern HRESULT __stdcall VarR4FromUI1(BYTE bIn, FLOAT * pfltOut);
extern HRESULT __stdcall VarR4FromI2(SHORT sIn, FLOAT * pfltOut);
extern HRESULT __stdcall VarR4FromI4(LONG lIn, FLOAT * pfltOut);
extern HRESULT __stdcall VarR4FromI8(LONG64 i64In, FLOAT * pfltOut);
extern HRESULT __stdcall VarR4FromR8(DOUBLE dblIn, FLOAT * pfltOut);
extern HRESULT __stdcall VarR4FromCy(CY cyIn, FLOAT * pfltOut);
extern HRESULT __stdcall VarR4FromDate(DATE dateIn, FLOAT * pfltOut);
extern HRESULT __stdcall VarR4FromStr( LPCOLESTR strIn, LCID lcid, ULONG dwFlags, FLOAT *pfltOut);
extern HRESULT __stdcall VarR4FromDisp(IDispatch * pdispIn, LCID lcid, FLOAT * pfltOut);
extern HRESULT __stdcall VarR4FromBool(VARIANT_BOOL boolIn, FLOAT * pfltOut);
extern HRESULT __stdcall VarR4FromI1(CHAR cIn, FLOAT *pfltOut);
extern HRESULT __stdcall VarR4FromUI2(USHORT uiIn, FLOAT *pfltOut);
extern HRESULT __stdcall VarR4FromUI4(ULONG ulIn, FLOAT *pfltOut);
extern HRESULT __stdcall VarR4FromUI8(ULONG64 ui64In, FLOAT * pfltOut);
extern HRESULT __stdcall VarR4FromDec( const DECIMAL *pdecIn, FLOAT *pfltOut);
extern HRESULT __stdcall VarR8FromUI1(BYTE bIn, DOUBLE * pdblOut);
extern HRESULT __stdcall VarR8FromI2(SHORT sIn, DOUBLE * pdblOut);
extern HRESULT __stdcall VarR8FromI4(LONG lIn, DOUBLE * pdblOut);
extern HRESULT __stdcall VarR8FromI8(LONG64 i64In, DOUBLE * pdblOut);
extern HRESULT __stdcall VarR8FromR4(FLOAT fltIn, DOUBLE * pdblOut);
extern HRESULT __stdcall VarR8FromCy(CY cyIn, DOUBLE * pdblOut);
extern HRESULT __stdcall VarR8FromDate(DATE dateIn, DOUBLE * pdblOut);
extern HRESULT __stdcall VarR8FromStr( LPCOLESTR strIn, LCID lcid, ULONG dwFlags, DOUBLE *pdblOut);
extern HRESULT __stdcall VarR8FromDisp(IDispatch * pdispIn, LCID lcid, DOUBLE * pdblOut);
extern HRESULT __stdcall VarR8FromBool(VARIANT_BOOL boolIn, DOUBLE * pdblOut);
extern HRESULT __stdcall VarR8FromI1(CHAR cIn, DOUBLE *pdblOut);
extern HRESULT __stdcall VarR8FromUI2(USHORT uiIn, DOUBLE *pdblOut);
extern HRESULT __stdcall VarR8FromUI4(ULONG ulIn, DOUBLE *pdblOut);
extern HRESULT __stdcall VarR8FromUI8(ULONG64 ui64In, DOUBLE * pdblOut);
extern HRESULT __stdcall VarR8FromDec( const DECIMAL *pdecIn, DOUBLE *pdblOut);
extern HRESULT __stdcall VarDateFromUI1(BYTE bIn, DATE * pdateOut);
extern HRESULT __stdcall VarDateFromI2(SHORT sIn, DATE * pdateOut);
extern HRESULT __stdcall VarDateFromI4(LONG lIn, DATE * pdateOut);
extern HRESULT __stdcall VarDateFromI8(LONG64 i64In, DATE * pdateOut);
extern HRESULT __stdcall VarDateFromR4(FLOAT fltIn, DATE * pdateOut);
extern HRESULT __stdcall VarDateFromR8(DOUBLE dblIn, DATE * pdateOut);
extern HRESULT __stdcall VarDateFromCy(CY cyIn, DATE * pdateOut);
extern HRESULT __stdcall VarDateFromStr( LPCOLESTR strIn, LCID lcid, ULONG dwFlags, DATE *pdateOut);
extern HRESULT __stdcall VarDateFromDisp(IDispatch * pdispIn, LCID lcid, DATE * pdateOut);
extern HRESULT __stdcall VarDateFromBool(VARIANT_BOOL boolIn, DATE * pdateOut);
extern HRESULT __stdcall VarDateFromI1(CHAR cIn, DATE *pdateOut);
extern HRESULT __stdcall VarDateFromUI2(USHORT uiIn, DATE *pdateOut);
extern HRESULT __stdcall VarDateFromUI4(ULONG ulIn, DATE *pdateOut);
extern HRESULT __stdcall VarDateFromUI8(ULONG64 ui64In, DATE * pdateOut);
extern HRESULT __stdcall VarDateFromDec( const DECIMAL *pdecIn, DATE *pdateOut);
extern HRESULT __stdcall VarCyFromUI1(BYTE bIn, CY * pcyOut);
extern HRESULT __stdcall VarCyFromI2(SHORT sIn, CY * pcyOut);
extern HRESULT __stdcall VarCyFromI4(LONG lIn, CY * pcyOut);
extern HRESULT __stdcall VarCyFromI8(LONG64 i64In, CY * pcyOut);
extern HRESULT __stdcall VarCyFromR4(FLOAT fltIn, CY * pcyOut);
extern HRESULT __stdcall VarCyFromR8(DOUBLE dblIn, CY * pcyOut);
extern HRESULT __stdcall VarCyFromDate(DATE dateIn, CY * pcyOut);
extern HRESULT __stdcall VarCyFromStr( LPCOLESTR strIn, LCID lcid, ULONG dwFlags, CY * pcyOut);
extern HRESULT __stdcall VarCyFromDisp( IDispatch * pdispIn, LCID lcid, CY * pcyOut);
extern HRESULT __stdcall VarCyFromBool(VARIANT_BOOL boolIn, CY * pcyOut);
extern HRESULT __stdcall VarCyFromI1(CHAR cIn, CY *pcyOut);
extern HRESULT __stdcall VarCyFromUI2(USHORT uiIn, CY *pcyOut);
extern HRESULT __stdcall VarCyFromUI4(ULONG ulIn, CY *pcyOut);
extern HRESULT __stdcall VarCyFromUI8(ULONG64 ui64In, CY * pcyOut);
extern HRESULT __stdcall VarCyFromDec( const DECIMAL *pdecIn, CY *pcyOut);
extern HRESULT __stdcall VarBstrFromUI1(BYTE bVal, LCID lcid, ULONG dwFlags, BSTR * pbstrOut);
extern HRESULT __stdcall VarBstrFromI2(SHORT iVal, LCID lcid, ULONG dwFlags, BSTR * pbstrOut);
extern HRESULT __stdcall VarBstrFromI4(LONG lIn, LCID lcid, ULONG dwFlags, BSTR * pbstrOut);
extern HRESULT __stdcall VarBstrFromI8(LONG64 i64In, LCID lcid, uint32 dwFlags, BSTR * pbstrOut);
extern HRESULT __stdcall VarBstrFromR4(FLOAT fltIn, LCID lcid, ULONG dwFlags, BSTR * pbstrOut);
extern HRESULT __stdcall VarBstrFromR8(DOUBLE dblIn, LCID lcid, ULONG dwFlags, BSTR * pbstrOut);
extern HRESULT __stdcall VarBstrFromCy(CY cyIn, LCID lcid, ULONG dwFlags, BSTR * pbstrOut);
extern HRESULT __stdcall VarBstrFromDate( DATE dateIn, LCID lcid, ULONG dwFlags, BSTR * pbstrOut);
extern HRESULT __stdcall VarBstrFromDisp(IDispatch * pdispIn, LCID lcid, ULONG dwFlags, BSTR * pbstrOut);
extern HRESULT __stdcall VarBstrFromBool(VARIANT_BOOL boolIn, LCID lcid, ULONG dwFlags, BSTR * pbstrOut);
extern HRESULT __stdcall VarBstrFromI1(CHAR cIn, LCID lcid, ULONG dwFlags, BSTR *pbstrOut);
extern HRESULT __stdcall VarBstrFromUI2(USHORT uiIn, LCID lcid, ULONG dwFlags, BSTR *pbstrOut);
extern HRESULT __stdcall VarBstrFromUI4(ULONG ulIn, LCID lcid, ULONG dwFlags, BSTR *pbstrOut);
extern HRESULT __stdcall VarBstrFromUI8(ULONG64 ui64In, LCID lcid, uint32 dwFlags, BSTR * pbstrOut);
extern HRESULT __stdcall VarBstrFromDec( const DECIMAL *pdecIn, LCID lcid, ULONG dwFlags, BSTR *pbstrOut);
extern HRESULT __stdcall VarBoolFromUI1(BYTE bIn, VARIANT_BOOL * pboolOut);
extern HRESULT __stdcall VarBoolFromI2( SHORT sIn, VARIANT_BOOL * pboolOut);
extern HRESULT __stdcall VarBoolFromI4(LONG lIn, VARIANT_BOOL * pboolOut);
extern HRESULT __stdcall VarBoolFromI8(LONG64 i64In, VARIANT_BOOL * pboolOut);
extern HRESULT __stdcall VarBoolFromR4(FLOAT fltIn, VARIANT_BOOL * pboolOut);
extern HRESULT __stdcall VarBoolFromR8(DOUBLE dblIn, VARIANT_BOOL * pboolOut);
extern HRESULT __stdcall VarBoolFromDate(DATE dateIn, VARIANT_BOOL * pboolOut);
extern HRESULT __stdcall VarBoolFromCy(CY cyIn, VARIANT_BOOL * pboolOut);
extern HRESULT __stdcall VarBoolFromStr( LPCOLESTR strIn, LCID lcid, ULONG dwFlags, VARIANT_BOOL * pboolOut);
extern HRESULT __stdcall VarBoolFromDisp(IDispatch * pdispIn, LCID lcid, VARIANT_BOOL * pboolOut);
extern HRESULT __stdcall VarBoolFromI1(CHAR cIn, VARIANT_BOOL *pboolOut);
extern HRESULT __stdcall VarBoolFromUI2(USHORT uiIn, VARIANT_BOOL *pboolOut);
extern HRESULT __stdcall VarBoolFromUI4(ULONG ulIn, VARIANT_BOOL *pboolOut);
extern HRESULT __stdcall VarBoolFromUI8(ULONG64 i64In, VARIANT_BOOL * pboolOut);
extern HRESULT __stdcall VarBoolFromDec( const DECIMAL *pdecIn, VARIANT_BOOL *pboolOut);
extern HRESULT __stdcall VarI1FromUI1( BYTE bIn, CHAR *pcOut );
extern HRESULT __stdcall VarI1FromI2( SHORT uiIn, CHAR *pcOut );
extern HRESULT __stdcall VarI1FromI4( LONG lIn, CHAR *pcOut );
extern HRESULT __stdcall VarI1FromI8( LONG64 i64In, CHAR *pcOut );
extern HRESULT __stdcall VarI1FromR4( FLOAT fltIn, CHAR *pcOut );
extern HRESULT __stdcall VarI1FromR8( DOUBLE dblIn, CHAR *pcOut );
extern HRESULT __stdcall VarI1FromDate( DATE dateIn, CHAR *pcOut );
extern HRESULT __stdcall VarI1FromCy( CY cyIn, CHAR *pcOut );
extern HRESULT __stdcall VarI1FromStr( LPCOLESTR strIn, LCID lcid, ULONG dwFlags, CHAR *pcOut );
extern HRESULT __stdcall VarI1FromDisp( IDispatch *pdispIn, LCID lcid, CHAR *pcOut );
extern HRESULT __stdcall VarI1FromBool( VARIANT_BOOL boolIn, CHAR *pcOut );
extern HRESULT __stdcall VarI1FromUI2( USHORT uiIn, CHAR *pcOut );
extern HRESULT __stdcall VarI1FromUI4( ULONG ulIn, CHAR *pcOut );
extern HRESULT __stdcall VarI1FromUI8( ULONG64 i64In, CHAR *pcOut );
extern HRESULT __stdcall VarI1FromDec( const DECIMAL *pdecIn, CHAR *pcOut );
extern HRESULT __stdcall VarUI2FromUI1(BYTE bIn, USHORT *puiOut);
extern HRESULT __stdcall VarUI2FromI2(SHORT uiIn, USHORT *puiOut);
extern HRESULT __stdcall VarUI2FromI4(LONG lIn, USHORT *puiOut);
extern HRESULT __stdcall VarUI2FromI8(LONG64 i64In, USHORT *puiOut);
extern HRESULT __stdcall VarUI2FromR4(FLOAT fltIn, USHORT *puiOut);
extern HRESULT __stdcall VarUI2FromR8(DOUBLE dblIn, USHORT *puiOut);
extern HRESULT __stdcall VarUI2FromDate(DATE dateIn, USHORT *puiOut);
extern HRESULT __stdcall VarUI2FromCy(CY cyIn, USHORT *puiOut);
extern HRESULT __stdcall VarUI2FromStr( LPCOLESTR strIn, LCID lcid, ULONG dwFlags, USHORT *puiOut);
extern HRESULT __stdcall VarUI2FromDisp( IDispatch *pdispIn, LCID lcid, USHORT *puiOut);
extern HRESULT __stdcall VarUI2FromBool(VARIANT_BOOL boolIn, USHORT *puiOut);
extern HRESULT __stdcall VarUI2FromI1(CHAR cIn, USHORT *puiOut);
extern HRESULT __stdcall VarUI2FromUI4(ULONG ulIn, USHORT *puiOut);
extern HRESULT __stdcall VarUI2FromUI8(ULONG64 i64In, USHORT *puiOut);
extern HRESULT __stdcall VarUI2FromDec( const DECIMAL *pdecIn, USHORT *puiOut);
extern HRESULT __stdcall VarUI4FromUI1(BYTE bIn, ULONG *pulOut);
extern HRESULT __stdcall VarUI4FromI2( SHORT uiIn, ULONG *pulOut);
extern HRESULT __stdcall VarUI4FromI4(LONG lIn, ULONG *pulOut);
extern HRESULT __stdcall VarUI4FromI8(LONG64 i64In, ULONG *plOut);
extern HRESULT __stdcall VarUI4FromR4(FLOAT fltIn, ULONG *pulOut);
extern HRESULT __stdcall VarUI4FromR8(DOUBLE dblIn, ULONG *pulOut);
extern HRESULT __stdcall VarUI4FromDate(DATE dateIn, ULONG *pulOut);
extern HRESULT __stdcall VarUI4FromCy(CY cyIn, ULONG *pulOut);
extern HRESULT __stdcall VarUI4FromStr( LPCOLESTR strIn, LCID lcid, ULONG dwFlags, ULONG *pulOut);
extern HRESULT __stdcall VarUI4FromDisp( IDispatch *pdispIn, LCID lcid, ULONG *pulOut);
extern HRESULT __stdcall VarUI4FromBool(VARIANT_BOOL boolIn, ULONG *pulOut);
extern HRESULT __stdcall VarUI4FromI1(CHAR cIn, ULONG *pulOut);
extern HRESULT __stdcall VarUI4FromUI2(USHORT uiIn, ULONG *pulOut);
extern HRESULT __stdcall VarUI4FromUI8(ULONG64 ui64In, ULONG *plOut);
extern HRESULT __stdcall VarUI4FromDec( const DECIMAL *pdecIn, ULONG *pulOut);
extern HRESULT __stdcall VarUI8FromUI1(BYTE bIn, ULONG64 * pi64Out);
extern HRESULT __stdcall VarUI8FromI2(SHORT sIn, ULONG64 * pi64Out);
extern HRESULT __stdcall VarUI8FromI4(LONG lIn, ULONG64 * pi64Out);
extern HRESULT __stdcall VarUI8FromI8(LONG64 ui64In, ULONG64 * pi64Out);
extern HRESULT __stdcall VarUI8FromR4(FLOAT fltIn, ULONG64 * pi64Out);
extern HRESULT __stdcall VarUI8FromR8(DOUBLE dblIn, ULONG64 * pi64Out);
extern HRESULT __stdcall VarUI8FromCy(CY cyIn, ULONG64 * pi64Out);
extern HRESULT __stdcall VarUI8FromDate(DATE dateIn, ULONG64 * pi64Out);
extern HRESULT __stdcall VarUI8FromStr( LPCOLESTR strIn, LCID lcid, uint32 dwFlags, ULONG64 * pi64Out);
extern HRESULT __stdcall VarUI8FromDisp( IDispatch * pdispIn, LCID lcid, ULONG64 * pi64Out);
extern HRESULT __stdcall VarUI8FromBool(VARIANT_BOOL boolIn, ULONG64 * pi64Out);
extern HRESULT __stdcall VarUI8FromI1(CHAR cIn, ULONG64 * pi64Out);
extern HRESULT __stdcall VarUI8FromUI2(USHORT uiIn, ULONG64 * pi64Out);
extern HRESULT __stdcall VarUI8FromUI4(ULONG ulIn, ULONG64 * pi64Out);
extern HRESULT __stdcall VarUI8FromDec( const DECIMAL *pdecIn, ULONG64 * pi64Out);
extern HRESULT __stdcall VarUI8FromInt(INT intIn, ULONG64 * pi64Out);
extern HRESULT __stdcall VarDecFromUI1( BYTE bIn, DECIMAL *pdecOut);
extern HRESULT __stdcall VarDecFromI2( SHORT uiIn, DECIMAL *pdecOut);
extern HRESULT __stdcall VarDecFromI4( LONG lIn, DECIMAL *pdecOut);
extern HRESULT __stdcall VarDecFromI8(LONG64 i64In, DECIMAL *pdecOut);
extern HRESULT __stdcall VarDecFromR4( FLOAT fltIn, DECIMAL *pdecOut);
extern HRESULT __stdcall VarDecFromR8( DOUBLE dblIn, DECIMAL *pdecOut);
extern HRESULT __stdcall VarDecFromDate( DATE dateIn, DECIMAL *pdecOut);
extern HRESULT __stdcall VarDecFromCy( CY cyIn, DECIMAL *pdecOut);
extern HRESULT __stdcall VarDecFromStr( LPCOLESTR strIn, LCID lcid, ULONG dwFlags, DECIMAL *pdecOut);
extern HRESULT __stdcall VarDecFromDisp( IDispatch *pdispIn, LCID lcid, DECIMAL *pdecOut);
extern HRESULT __stdcall VarDecFromBool( VARIANT_BOOL boolIn, DECIMAL *pdecOut);
extern HRESULT __stdcall VarDecFromI1( CHAR cIn, DECIMAL *pdecOut);
extern HRESULT __stdcall VarDecFromUI2( USHORT uiIn, DECIMAL *pdecOut);
extern HRESULT __stdcall VarDecFromUI4( ULONG ulIn, DECIMAL *pdecOut);
extern HRESULT __stdcall VarDecFromUI8(ULONG64 ui64In, DECIMAL *pdecOut);
extern HRESULT __stdcall VarI4FromI8(LONG64 i64In, LONG *plOut);
extern HRESULT __stdcall VarI4FromUI8(ULONG64 ui64In, LONG *plOut);
typedef struct {
<field name="cDig"><INT /></field>
<field name="dwInFlags"><ULONG /></field>
<field name="dwOutFlags"><ULONG /></field>
<field name="cchUsed"><INT /></field>
<field name="nBaseShift"><INT /></field>
<field name="nPwr10"><INT /></field>
} NUMPARSE;
extern HRESULT __stdcall VarParseNumFromStr( LPCOLESTR strIn, LCID lcid, ULONG dwFlags, NUMPARSE * pnumprs, BYTE * rgbDig);
extern HRESULT __stdcall VarNumFromParseNum( NUMPARSE * pnumprs, BYTE * rgbDig, ULONG dwVtBits, VARIANT * pvar);
extern HRESULT __stdcall VarAdd( LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult);
extern HRESULT __stdcall VarAnd( LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult);
extern HRESULT __stdcall VarCat( LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult);
extern HRESULT __stdcall VarDiv( LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult);
extern HRESULT __stdcall VarEqv( LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult);
extern HRESULT __stdcall VarIdiv( LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult);
extern HRESULT __stdcall VarImp( LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult);
extern HRESULT __stdcall VarMod( LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult);
extern HRESULT __stdcall VarMul( LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult);
extern HRESULT __stdcall VarOr( LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult);
extern HRESULT __stdcall VarPow( LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult);
extern HRESULT __stdcall VarSub( LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult);
extern HRESULT __stdcall VarXor( LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult);
extern HRESULT __stdcall VarAbs( LPVARIANT pvarIn, LPVARIANT pvarResult);
extern HRESULT __stdcall VarFix( LPVARIANT pvarIn, LPVARIANT pvarResult);
extern HRESULT __stdcall VarInt( LPVARIANT pvarIn, LPVARIANT pvarResult);
extern HRESULT __stdcall VarNeg( LPVARIANT pvarIn, LPVARIANT pvarResult);
extern HRESULT __stdcall VarNot( LPVARIANT pvarIn, LPVARIANT pvarResult);
extern HRESULT __stdcall VarRound( LPVARIANT pvarIn, int32 cDecimals, LPVARIANT pvarResult);
extern HRESULT __stdcall VarCmp( LPVARIANT pvarLeft, LPVARIANT pvarRight, LCID lcid, ULONG dwFlags);
extern HRESULT __stdcall VarDecAdd( LPDECIMAL pdecLeft, LPDECIMAL pdecRight, LPDECIMAL pdecResult);
extern HRESULT __stdcall VarDecDiv( LPDECIMAL pdecLeft, LPDECIMAL pdecRight, LPDECIMAL pdecResult);
extern HRESULT __stdcall VarDecMul( LPDECIMAL pdecLeft, LPDECIMAL pdecRight, LPDECIMAL pdecResult);
extern HRESULT __stdcall VarDecSub( LPDECIMAL pdecLeft, LPDECIMAL pdecRight, LPDECIMAL pdecResult);
extern HRESULT __stdcall VarDecAbs( LPDECIMAL pdecIn, LPDECIMAL pdecResult);
extern HRESULT __stdcall VarDecFix( LPDECIMAL pdecIn, LPDECIMAL pdecResult);
extern HRESULT __stdcall VarDecInt( LPDECIMAL pdecIn, LPDECIMAL pdecResult);
extern HRESULT __stdcall VarDecNeg( LPDECIMAL pdecIn, LPDECIMAL pdecResult);
extern HRESULT __stdcall VarDecRound( LPDECIMAL pdecIn, int32 cDecimals, LPDECIMAL pdecResult);
extern HRESULT __stdcall VarDecCmp( LPDECIMAL pdecLeft, LPDECIMAL pdecRight);
extern HRESULT __stdcall VarDecCmpR8( LPDECIMAL pdecLeft, double dblRight);
extern HRESULT __stdcall VarCyAdd( CY cyLeft, CY cyRight, LPCY pcyResult);
extern HRESULT __stdcall VarCyMul( CY cyLeft, CY cyRight, LPCY pcyResult);
extern HRESULT __stdcall VarCyMulI4( CY cyLeft, long lRight, LPCY pcyResult);
extern HRESULT __stdcall VarCyMulI8( CY cyLeft, LONG64 lRight, LPCY pcyResult);
extern HRESULT __stdcall VarCySub( CY cyLeft, CY cyRight, LPCY pcyResult);
extern HRESULT __stdcall VarCyAbs( CY cyIn, LPCY pcyResult);
extern HRESULT __stdcall VarCyFix( CY cyIn, LPCY pcyResult);
extern HRESULT __stdcall VarCyInt( CY cyIn, LPCY pcyResult);
extern HRESULT __stdcall VarCyNeg( CY cyIn, LPCY pcyResult);
extern HRESULT __stdcall VarCyRound( CY cyIn, int32 cDecimals, LPCY pcyResult);
extern HRESULT __stdcall VarCyCmp( CY cyLeft, CY cyRight);
extern HRESULT __stdcall VarCyCmpR8( CY cyLeft, double dblRight);
extern HRESULT __stdcall VarBstrCat( BSTR bstrLeft, BSTR bstrRight, LPBSTR pbstrResult);
extern HRESULT __stdcall VarBstrCmp( BSTR bstrLeft, BSTR bstrRight, LCID lcid, ULONG dwFlags);
extern HRESULT __stdcall VarR8Pow( double dblLeft, double dblRight, double *pdblResult);
extern HRESULT __stdcall VarR4CmpR8( float fltLeft, double dblRight);
extern HRESULT __stdcall VarR8Round( double dblIn, int32 cDecimals, double *pdblResult);
typedef struct {
<field name="st"><SYSTEMTIME /></field>
<field name="wDayOfYear"><USHORT /></field>
} UDATE;
extern HRESULT __stdcall VarDateFromUdate( UDATE *pudateIn, ULONG dwFlags, DATE *pdateOut);
extern HRESULT __stdcall VarDateFromUdateEx( UDATE *pudateIn, LCID lcid, ULONG dwFlags, DATE *pdateOut);
extern HRESULT __stdcall VarUdateFromDate( DATE dateIn, ULONG dwFlags, UDATE *pudateOut);
extern HRESULT __stdcall GetAltMonthNames(LCID lcid, LPOLESTR * * prgp);
extern HRESULT __stdcall VarFormat( LPVARIANT pvarIn, LPOLESTR pstrFormat, int32 iFirstDay, int32 iFirstWeek, ULONG dwFlags, BSTR *pbstrOut );
extern HRESULT __stdcall VarFormatDateTime( LPVARIANT pvarIn, int32 iNamedFormat, ULONG dwFlags, BSTR *pbstrOut );
extern HRESULT __stdcall VarFormatNumber( LPVARIANT pvarIn, int32 iNumDig, int32 iIncLead, int32 iUseParens, int32 iGroup, ULONG dwFlags, BSTR *pbstrOut );
extern HRESULT __stdcall VarFormatPercent( LPVARIANT pvarIn, int32 iNumDig, int32 iIncLead, int32 iUseParens, int32 iGroup, ULONG dwFlags, BSTR *pbstrOut );
extern HRESULT __stdcall VarFormatCurrency( LPVARIANT pvarIn, int32 iNumDig, int32 iIncLead, int32 iUseParens, int32 iGroup, ULONG dwFlags, BSTR *pbstrOut );
extern HRESULT __stdcall VarWeekdayName( int32 iWeekday, int32 fAbbrev, int32 iFirstDay, ULONG dwFlags, BSTR *pbstrOut );
extern HRESULT __stdcall VarMonthName( int32 iMonth, int32 fAbbrev, ULONG dwFlags, BSTR *pbstrOut );
extern HRESULT __stdcall VarFormatFromTokens( LPVARIANT pvarIn, LPOLESTR pstrFormat, LPBYTE pbTokCur, ULONG dwFlags, BSTR *pbstrOut, LCID lcid );
extern HRESULT __stdcall VarTokenizeFormatString( LPOLESTR pstrFormat, LPBYTE rgbTok, int32 cbTok, int32 iFirstDay, int32 iFirstWeek, LCID lcid, int32 *pcbActual );
<typedef name="LPTYPELIB"><ptr><ITypeLib /></ptr></typedef>
<typedef name="DISPID"><LONG /></typedef>
<typedef name="MEMBERID"><DISPID /></typedef>
<typedef name="LPTYPEINFO"><ptr><ITypeInfo /></ptr></typedef>
<typedef name="LPTYPECOMP"><ptr><ITypeComp /></ptr></typedef>
<typedef name="LPCREATETYPELIB"><ptr><ICreateTypeLib /></ptr></typedef>
<typedef name="LPCREATETYPEINFO"><ptr><ICreateTypeInfo /></ptr></typedef>
extern ULONG __stdcall LHashValOfNameSysA(SYSKIND syskind, LCID lcid, LPCSTR szName);
extern ULONG __stdcall LHashValOfNameSys(SYSKIND syskind, LCID lcid, const OLECHAR * szName);
extern HRESULT __stdcall LoadTypeLib( LPCOLESTR szFile, ITypeLib ** pptlib);
typedef enum tagREGKIND {
REGKIND_DEFAULT, REGKIND_REGISTER, REGKIND_NONE } REGKIND;
extern HRESULT __stdcall LoadTypeLibEx(LPCOLESTR szFile, REGKIND regkind, ITypeLib ** pptlib);
extern HRESULT __stdcall LoadRegTypeLib(const GUID * const rguid, WORD wVerMajor, WORD wVerMinor, LCID lcid, ITypeLib ** pptlib);
extern HRESULT __stdcall QueryPathOfRegTypeLib(const GUID * const guid, USHORT wMaj, USHORT wMin, LCID lcid, LPBSTR lpbstrPathName);
extern HRESULT __stdcall RegisterTypeLib(ITypeLib * ptlib, LPCOLESTR szFullPath, LPCOLESTR szHelpDir);
extern HRESULT __stdcall UnRegisterTypeLib(const GUID * const libID, WORD wVerMajor, WORD wVerMinor, LCID lcid, SYSKIND syskind);
extern HRESULT __stdcall RegisterTypeLibForUser(ITypeLib *ptlib, OLECHAR *szFullPath, OLECHAR *szHelpDir);
extern HRESULT __stdcall UnRegisterTypeLibForUser( const GUID * const libID, WORD wMajorVerNum, WORD wMinorVerNum, LCID lcid, SYSKIND syskind);
extern HRESULT __stdcall CreateTypeLib(SYSKIND syskind, LPCOLESTR szFile, ICreateTypeLib ** ppctlib);
extern HRESULT __stdcall CreateTypeLib2(SYSKIND syskind, LPCOLESTR szFile, ICreateTypeLib2 **ppctlib);
<typedef name="LPDISPATCH"><ptr><IDispatch /></ptr></typedef>
typedef struct tagPARAMDATA {
<field name="szName"><ptr><OLECHAR /></ptr></field>
<field name="vt"><VARTYPE /></field>
} PARAMDATA, * LPPARAMDATA;
typedef struct tagMETHODDATA {
<field name="szName"><ptr><OLECHAR /></ptr></field>
<field name="ppdata"><ptr><PARAMDATA /></ptr></field>
<field name="dispid"><DISPID /></field>
<field name="iMeth"><UINT /></field>
<field name="cc"><CALLCONV /></field>
<field name="cArgs"><UINT /></field>
<field name="wFlags"><WORD /></field>
<field name="vtReturn"><VARTYPE /></field>
} METHODDATA, * LPMETHODDATA;
typedef struct tagINTERFACEDATA {
<field name="pmethdata"><ptr><METHODDATA /></ptr></field>
<field name="cMembers"><UINT /></field>
} INTERFACEDATA, * LPINTERFACEDATA;
extern HRESULT __stdcall DispGetParam( DISPPARAMS * pdispparams, UINT position, VARTYPE vtTarg, VARIANT * pvarResult, UINT * puArgErr );
extern HRESULT __stdcall DispGetIDsOfNames(ITypeInfo * ptinfo, OLECHAR ** rgszNames, UINT cNames, DISPID * rgdispid);
extern HRESULT __stdcall DispInvoke(void * _this, ITypeInfo * ptinfo, DISPID dispidMember, WORD wFlags, DISPPARAMS * pparams, VARIANT * pvarResult, EXCEPINFO * pexcepinfo, UINT * puArgErr);
extern HRESULT __stdcall CreateDispTypeInfo(INTERFACEDATA * pidata, LCID lcid, ITypeInfo ** pptinfo);
extern HRESULT __stdcall CreateStdDispatch(IUnknown * punkOuter, void * pvThis, ITypeInfo * ptinfo, IUnknown ** ppunkStdDisp);
extern HRESULT __stdcall DispCallFunc(void * pvInstance, ULONG_PTR oVft, CALLCONV cc, VARTYPE vtReturn, UINT cActuals, VARTYPE * prgvt, VARIANTARG ** prgpvarg, VARIANT * pvargResult);
extern HRESULT __stdcall RegisterActiveObject(IUnknown * punk, const IID * const rclsid, DWORD dwFlags, DWORD * pdwRegister);
extern HRESULT __stdcall RevokeActiveObject(DWORD dwRegister, void * pvReserved);
extern HRESULT __stdcall GetActiveObject(const IID * const rclsid, void * pvReserved, IUnknown ** ppunk);
extern HRESULT __stdcall SetErrorInfo( ULONG dwReserved, IErrorInfo * perrinfo);
extern HRESULT __stdcall GetErrorInfo( ULONG dwReserved, IErrorInfo ** pperrinfo);
extern HRESULT __stdcall CreateErrorInfo( ICreateErrorInfo ** pperrinfo);
extern HRESULT __stdcall GetRecordInfoFromTypeInfo(ITypeInfo * pTypeInfo, IRecordInfo ** ppRecInfo);
extern HRESULT __stdcall GetRecordInfoFromGuids(const GUID * const rGuidTypeLib, ULONG uVerMajor, ULONG uVerMinor, LCID lcid, const GUID * const rGuidTypeInfo, IRecordInfo ** ppRecInfo);
extern ULONG __stdcall OaBuildVersion();
extern void __stdcall ClearCustData(LPCUSTDATA pCustData);
extern void __stdcall OaEnablePerUserTLibRegistration();
extern HRESULT __stdcall CreateDataAdviseHolder( LPDATAADVISEHOLDER * ppDAHolder);
extern DWORD __stdcall OleBuildVersion( void );
extern HRESULT __stdcall ReadClassStg( LPSTORAGE pStg, CLSID * pclsid);
extern HRESULT __stdcall WriteClassStg( LPSTORAGE pStg, const IID * const rclsid);
extern HRESULT __stdcall ReadClassStm( LPSTREAM pStm, CLSID * pclsid);
extern HRESULT __stdcall WriteClassStm( LPSTREAM pStm, const IID * const rclsid);
extern HRESULT __stdcall WriteFmtUserTypeStg(LPSTORAGE pstg, CLIPFORMAT cf, LPOLESTR lpszUserType);
extern HRESULT __stdcall ReadFmtUserTypeStg(LPSTORAGE pstg, CLIPFORMAT * pcf, LPOLESTR * lplpszUserType);
extern HRESULT __stdcall OleInitialize( LPVOID pvReserved);
extern void __stdcall OleUninitialize();
extern HRESULT __stdcall OleQueryLinkFromData( LPDATAOBJECT pSrcDataObject);
extern HRESULT __stdcall OleQueryCreateFromData( LPDATAOBJECT pSrcDataObject);
extern HRESULT __stdcall OleCreate( const IID * const rclsid, const IID * const riid, DWORD renderopt, LPFORMATETC pFormatEtc, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID * ppvObj);
extern HRESULT __stdcall OleCreateEx( const IID * const rclsid, const IID * const riid, DWORD dwFlags, DWORD renderopt, ULONG cFormats, DWORD* rgAdvf, LPFORMATETC rgFormatEtc, IAdviseSink * lpAdviseSink, DWORD * rgdwConnection, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID * ppvObj);
extern HRESULT __stdcall OleCreateFromData( LPDATAOBJECT pSrcDataObj, const IID * const riid, DWORD renderopt, LPFORMATETC pFormatEtc, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID * ppvObj);
extern HRESULT __stdcall OleCreateFromDataEx( LPDATAOBJECT pSrcDataObj, const IID * const riid, DWORD dwFlags, DWORD renderopt, ULONG cFormats, DWORD* rgAdvf, LPFORMATETC rgFormatEtc, IAdviseSink * lpAdviseSink, DWORD * rgdwConnection, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID * ppvObj);
extern HRESULT __stdcall OleCreateLinkFromData( LPDATAOBJECT pSrcDataObj, const IID * const riid, DWORD renderopt, LPFORMATETC pFormatEtc, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID * ppvObj);
extern HRESULT __stdcall OleCreateLinkFromDataEx( LPDATAOBJECT pSrcDataObj, const IID * const riid, DWORD dwFlags, DWORD renderopt, ULONG cFormats, DWORD* rgAdvf, LPFORMATETC rgFormatEtc, IAdviseSink * lpAdviseSink, DWORD * rgdwConnection, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID * ppvObj);
extern HRESULT __stdcall OleCreateStaticFromData( LPDATAOBJECT pSrcDataObj, const IID * const iid, DWORD renderopt, LPFORMATETC pFormatEtc, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID * ppvObj);
extern HRESULT __stdcall OleCreateLink( LPMONIKER pmkLinkSrc, const IID * const riid, DWORD renderopt, LPFORMATETC lpFormatEtc, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID * ppvObj);
extern HRESULT __stdcall OleCreateLinkEx( LPMONIKER pmkLinkSrc, const IID * const riid, DWORD dwFlags, DWORD renderopt, ULONG cFormats, DWORD* rgAdvf, LPFORMATETC rgFormatEtc, IAdviseSink * lpAdviseSink, DWORD * rgdwConnection, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID * ppvObj);
extern HRESULT __stdcall OleCreateLinkToFile( LPCOLESTR lpszFileName, const IID * const riid, DWORD renderopt, LPFORMATETC lpFormatEtc, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID * ppvObj);
extern HRESULT __stdcall OleCreateLinkToFileEx( LPCOLESTR lpszFileName, const IID * const riid, DWORD dwFlags, DWORD renderopt, ULONG cFormats, DWORD* rgAdvf, LPFORMATETC rgFormatEtc, IAdviseSink * lpAdviseSink, DWORD * rgdwConnection, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID * ppvObj);
extern HRESULT __stdcall OleCreateFromFile( const IID * const rclsid, LPCOLESTR lpszFileName, const IID * const riid, DWORD renderopt, LPFORMATETC lpFormatEtc, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID * ppvObj);
extern HRESULT __stdcall OleCreateFromFileEx( const IID * const rclsid, LPCOLESTR lpszFileName, const IID * const riid, DWORD dwFlags, DWORD renderopt, ULONG cFormats, DWORD* rgAdvf, LPFORMATETC rgFormatEtc, IAdviseSink * lpAdviseSink, DWORD * rgdwConnection, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID * ppvObj);
extern HRESULT __stdcall OleLoad( LPSTORAGE pStg, const IID * const riid, LPOLECLIENTSITE pClientSite, LPVOID * ppvObj);
extern HRESULT __stdcall OleSave( LPPERSISTSTORAGE pPS, LPSTORAGE pStg, BOOL fSameAsLoad);
extern HRESULT __stdcall OleLoadFromStream( LPSTREAM pStm, const IID * const iidInterface, LPVOID * ppvObj);
extern HRESULT __stdcall OleSaveToStream( LPPERSISTSTREAM pPStm, LPSTREAM pStm );
extern HRESULT __stdcall OleSetContainedObject( LPUNKNOWN pUnknown, BOOL fContained);
extern HRESULT __stdcall OleNoteObjectVisible( LPUNKNOWN pUnknown, BOOL fVisible);
extern HRESULT __stdcall RegisterDragDrop( HWND hwnd, LPDROPTARGET pDropTarget);
extern HRESULT __stdcall RevokeDragDrop( HWND hwnd);
extern HRESULT __stdcall DoDragDrop( LPDATAOBJECT pDataObj, LPDROPSOURCE pDropSource, DWORD dwOKEffects, LPDWORD pdwEffect);
extern HRESULT __stdcall OleSetClipboard( LPDATAOBJECT pDataObj);
extern HRESULT __stdcall OleGetClipboard( LPDATAOBJECT * ppDataObj);
extern HRESULT __stdcall OleFlushClipboard();
extern HRESULT __stdcall OleIsCurrentClipboard( LPDATAOBJECT pDataObj);
extern HOLEMENU __stdcall OleCreateMenuDescriptor(HMENU hmenuCombined, LPOLEMENUGROUPWIDTHS lpMenuWidths);
extern HRESULT __stdcall OleSetMenuDescriptor(HOLEMENU holemenu, HWND hwndFrame, HWND hwndActiveObject, LPOLEINPLACEFRAME lpFrame, LPOLEINPLACEACTIVEOBJECT lpActiveObj);
extern HRESULT __stdcall OleDestroyMenuDescriptor(HOLEMENU holemenu);
extern HRESULT __stdcall OleTranslateAccelerator(LPOLEINPLACEFRAME lpFrame, LPOLEINPLACEFRAMEINFO lpFrameInfo, LPMSG lpmsg);
extern HANDLE __stdcall OleDuplicateData(HANDLE hSrc, CLIPFORMAT cfFormat, UINT uiFlags);
extern HRESULT __stdcall OleDraw(LPUNKNOWN pUnknown, DWORD dwAspect, HDC hdcDraw, LPCRECT lprcBounds);
extern HRESULT __stdcall OleRun( LPUNKNOWN pUnknown);
extern BOOL __stdcall OleIsRunning( LPOLEOBJECT pObject);
extern HRESULT __stdcall OleLockRunning( LPUNKNOWN pUnknown, BOOL fLock, BOOL fLastUnlockCloses);
extern void __stdcall ReleaseStgMedium( LPSTGMEDIUM);
extern HRESULT __stdcall CreateOleAdviseHolder( LPOLEADVISEHOLDER * ppOAHolder);
extern HRESULT __stdcall OleCreateDefaultHandler( const IID * const clsid, LPUNKNOWN pUnkOuter, const IID * const riid, LPVOID * lplpObj);
extern HRESULT __stdcall OleCreateEmbeddingHelper( const IID * const clsid, LPUNKNOWN pUnkOuter, DWORD flags, LPCLASSFACTORY pCF, const IID * const riid, LPVOID * lplpObj);
extern BOOL __stdcall IsAccelerator( HACCEL hAccel, int32 cAccelEntries, LPMSG lpMsg, WORD * lpwCmd);
extern HGLOBAL __stdcall OleGetIconOfFile( LPOLESTR lpszPath, BOOL fUseFileAsLabel);
extern HGLOBAL __stdcall OleGetIconOfClass( const IID * const rclsid, LPOLESTR lpszLabel, BOOL fUseTypeAsLabel);
extern HGLOBAL __stdcall OleMetafilePictFromIconAndLabel( HICON hIcon, LPOLESTR lpszLabel, LPOLESTR lpszSourceFile, UINT iIconIndex);
extern HRESULT __stdcall OleRegGetUserType(const IID * const clsid, DWORD dwFormOfType, LPOLESTR * pszUserType);
extern HRESULT __stdcall OleRegGetMiscStatus(const IID * const clsid, DWORD dwAspect, DWORD * pdwStatus);
extern HRESULT __stdcall OleRegEnumFormatEtc(const IID * const clsid, DWORD dwDirection, LPENUMFORMATETC * ppenum);
extern HRESULT __stdcall OleRegEnumVerbs(const IID * const clsid, LPENUMOLEVERB * ppenum);
<typedef name="LPOLESTREAM"><ptr><_OLESTREAM /></ptr></typedef>
typedef struct _OLESTREAMVTBL {
DWORD (__stdcall* Get)(LPOLESTREAM, void *, DWORD);
DWORD (__stdcall* Put)(LPOLESTREAM, const void *, DWORD);
} OLESTREAMVTBL;
<typedef name="LPOLESTREAMVTBL"><ptr><OLESTREAMVTBL /></ptr></typedef>
typedef struct _OLESTREAM {
<field name="lpstbl"><LPOLESTREAMVTBL /></field>
} OLESTREAM;
extern HRESULT __stdcall OleConvertOLESTREAMToIStorage(LPOLESTREAM lpolestream, LPSTORAGE pstg, const DVTARGETDEVICE * ptd);
extern HRESULT __stdcall OleConvertIStorageToOLESTREAM(LPSTORAGE pstg, LPOLESTREAM lpolestream);
extern HRESULT __stdcall GetHGlobalFromILockBytes(LPLOCKBYTES plkbyt, HGLOBAL * phglobal);
extern HRESULT __stdcall CreateILockBytesOnHGlobal(HGLOBAL hGlobal, BOOL fDeleteOnRelease, LPLOCKBYTES * pplkbyt);
extern HRESULT __stdcall GetHGlobalFromStream(LPSTREAM pstm, HGLOBAL * phglobal);
extern HRESULT __stdcall CreateStreamOnHGlobal(HGLOBAL hGlobal, BOOL fDeleteOnRelease, LPSTREAM * ppstm);
extern HRESULT __stdcall OleDoAutoConvert( LPSTORAGE pStg, LPCLSID pClsidNew);
extern HRESULT __stdcall OleGetAutoConvert( const IID * const clsidOld, LPCLSID pClsidNew);
extern HRESULT __stdcall OleSetAutoConvert( const IID * const clsidOld, const IID * const clsidNew);
extern HRESULT __stdcall GetConvertStg( LPSTORAGE pStg);
extern HRESULT __stdcall SetConvertStg( LPSTORAGE pStg, BOOL fConvert);
extern HRESULT __stdcall OleConvertIStorageToOLESTREAMEx(LPSTORAGE pstg, CLIPFORMAT cfFormat, LONG lWidth, LONG lHeight, DWORD dwSize, LPSTGMEDIUM pmedium, LPOLESTREAM polestm);
extern HRESULT __stdcall OleConvertOLESTREAMToIStorageEx(LPOLESTREAM polestm, LPSTORAGE pstg, CLIPFORMAT * pcfFormat, LONG * plwWidth, LONG * plHeight, DWORD * pdwSize, LPSTGMEDIUM pmedium);
extern const GUID IID_IPrintDialogCallback;
extern const GUID IID_IPrintDialogServices;
typedef UINT_PTR (__stdcall *LPOFNHOOKPROC) (HWND, UINT, WPARAM, LPARAM);
typedef struct tagOFN_NT4A {
<field name="lStructSize"><DWORD /></field>
<field name="hwndOwner"><HWND /></field>
<field name="hInstance"><HINSTANCE /></field>
<field name="lpstrFilter"><LPCSTR /></field>
<field name="lpstrCustomFilter"><LPSTR /></field>
<field name="nMaxCustFilter"><DWORD /></field>
<field name="nFilterIndex"><DWORD /></field>
<field name="lpstrFile"><LPSTR /></field>
<field name="nMaxFile"><DWORD /></field>
<field name="lpstrFileTitle"><LPSTR /></field>
<field name="nMaxFileTitle"><DWORD /></field>
<field name="lpstrInitialDir"><LPCSTR /></field>
<field name="lpstrTitle"><LPCSTR /></field>
<field name="Flags"><DWORD /></field>
<field name="nFileOffset"><WORD /></field>
<field name="nFileExtension"><WORD /></field>
<field name="lpstrDefExt"><LPCSTR /></field>
<field name="lCustData"><LPARAM /></field>
<field name="lpfnHook"><LPOFNHOOKPROC /></field>
<field name="lpTemplateName"><LPCSTR /></field>
} OPENFILENAME_NT4A, *LPOPENFILENAME_NT4A;
typedef struct tagOFN_NT4W {
<field name="lStructSize"><DWORD /></field>
<field name="hwndOwner"><HWND /></field>
<field name="hInstance"><HINSTANCE /></field>
<field name="lpstrFilter"><LPCWSTR /></field>
<field name="lpstrCustomFilter"><LPWSTR /></field>
<field name="nMaxCustFilter"><DWORD /></field>
<field name="nFilterIndex"><DWORD /></field>
<field name="lpstrFile"><LPWSTR /></field>
<field name="nMaxFile"><DWORD /></field>
<field name="lpstrFileTitle"><LPWSTR /></field>
<field name="nMaxFileTitle"><DWORD /></field>
<field name="lpstrInitialDir"><LPCWSTR /></field>
<field name="lpstrTitle"><LPCWSTR /></field>
<field name="Flags"><DWORD /></field>
<field name="nFileOffset"><WORD /></field>
<field name="nFileExtension"><WORD /></field>
<field name="lpstrDefExt"><LPCWSTR /></field>
<field name="lCustData"><LPARAM /></field>
<field name="lpfnHook"><LPOFNHOOKPROC /></field>
<field name="lpTemplateName"><LPCWSTR /></field>
} OPENFILENAME_NT4W, *LPOPENFILENAME_NT4W;
<typedef name="OPENFILENAME_NT4"><OPENFILENAME_NT4A /></typedef>
<typedef name="LPOPENFILENAME_NT4"><LPOPENFILENAME_NT4A /></typedef>
typedef struct tagOFNA {
<field name="lStructSize"><DWORD /></field>
<field name="hwndOwner"><HWND /></field>
<field name="hInstance"><HINSTANCE /></field>
<field name="lpstrFilter"><LPCSTR /></field>
<field name="lpstrCustomFilter"><LPSTR /></field>
<field name="nMaxCustFilter"><DWORD /></field>
<field name="nFilterIndex"><DWORD /></field>
<field name="lpstrFile"><LPSTR /></field>
<field name="nMaxFile"><DWORD /></field>
<field name="lpstrFileTitle"><LPSTR /></field>
<field name="nMaxFileTitle"><DWORD /></field>
<field name="lpstrInitialDir"><LPCSTR /></field>
<field name="lpstrTitle"><LPCSTR /></field>
<field name="Flags"><DWORD /></field>
<field name="nFileOffset"><WORD /></field>
<field name="nFileExtension"><WORD /></field>
<field name="lpstrDefExt"><LPCSTR /></field>
<field name="lCustData"><LPARAM /></field>
<field name="lpfnHook"><LPOFNHOOKPROC /></field>
<field name="lpTemplateName"><LPCSTR /></field>
<field name="pvReserved"><ptr><void /></ptr></field>
<field name="dwReserved"><DWORD /></field>
<field name="FlagsEx"><DWORD /></field>
} OPENFILENAMEA, *LPOPENFILENAMEA;
typedef struct tagOFNW {
<field name="lStructSize"><DWORD /></field>
<field name="hwndOwner"><HWND /></field>
<field name="hInstance"><HINSTANCE /></field>
<field name="lpstrFilter"><LPCWSTR /></field>
<field name="lpstrCustomFilter"><LPWSTR /></field>
<field name="nMaxCustFilter"><DWORD /></field>
<field name="nFilterIndex"><DWORD /></field>
<field name="lpstrFile"><LPWSTR /></field>
<field name="nMaxFile"><DWORD /></field>
<field name="lpstrFileTitle"><LPWSTR /></field>
<field name="nMaxFileTitle"><DWORD /></field>
<field name="lpstrInitialDir"><LPCWSTR /></field>
<field name="lpstrTitle"><LPCWSTR /></field>
<field name="Flags"><DWORD /></field>
<field name="nFileOffset"><WORD /></field>
<field name="nFileExtension"><WORD /></field>
<field name="lpstrDefExt"><LPCWSTR /></field>
<field name="lCustData"><LPARAM /></field>
<field name="lpfnHook"><LPOFNHOOKPROC /></field>
<field name="lpTemplateName"><LPCWSTR /></field>
<field name="pvReserved"><ptr><void /></ptr></field>
<field name="dwReserved"><DWORD /></field>
<field name="FlagsEx"><DWORD /></field>
} OPENFILENAMEW, *LPOPENFILENAMEW;
<typedef name="OPENFILENAME"><OPENFILENAMEA /></typedef>
<typedef name="LPOPENFILENAME"><LPOPENFILENAMEA /></typedef>
BOOL __stdcall GetOpenFileNameA(LPOPENFILENAMEA);
BOOL __stdcall GetOpenFileNameW(LPOPENFILENAMEW);
BOOL __stdcall GetSaveFileNameA(LPOPENFILENAMEA);
BOOL __stdcall GetSaveFileNameW(LPOPENFILENAMEW);
short __stdcall GetFileTitleA(LPCSTR, LPSTR Buf, WORD cchSize);
short __stdcall GetFileTitleW(LPCWSTR, LPWSTR Buf, WORD cchSize);
typedef UINT_PTR (__stdcall *LPCCHOOKPROC) (HWND, UINT, WPARAM, LPARAM);
typedef struct _OFNOTIFYA {
<field name="hdr"><NMHDR /></field>
<field name="lpOFN"><LPOPENFILENAMEA /></field>
<field name="pszFile"><LPSTR /></field>
} OFNOTIFYA, *LPOFNOTIFYA;
typedef struct _OFNOTIFYW {
<field name="hdr"><NMHDR /></field>
<field name="lpOFN"><LPOPENFILENAMEW /></field>
<field name="pszFile"><LPWSTR /></field>
} OFNOTIFYW, *LPOFNOTIFYW;
<typedef name="OFNOTIFY"><OFNOTIFYA /></typedef>
<typedef name="LPOFNOTIFY"><LPOFNOTIFYA /></typedef>
typedef struct _OFNOTIFYEXA {
<field name="hdr"><NMHDR /></field>
<field name="lpOFN"><LPOPENFILENAMEA /></field>
<field name="psf"><LPVOID /></field>
<field name="pidl"><LPVOID /></field>
} OFNOTIFYEXA, *LPOFNOTIFYEXA;
typedef struct _OFNOTIFYEXW {
<field name="hdr"><NMHDR /></field>
<field name="lpOFN"><LPOPENFILENAMEW /></field>
<field name="psf"><LPVOID /></field>
<field name="pidl"><LPVOID /></field>
} OFNOTIFYEXW, *LPOFNOTIFYEXW;
<typedef name="OFNOTIFYEX"><OFNOTIFYEXA /></typedef>
<typedef name="LPOFNOTIFYEX"><LPOFNOTIFYEXA /></typedef>
typedef struct tagCHOOSECOLORA {
<field name="lStructSize"><DWORD /></field>
<field name="hwndOwner"><HWND /></field>
<field name="hInstance"><HWND /></field>
<field name="rgbResult"><COLORREF /></field>
<field name="lpCustColors"><ptr><COLORREF /></ptr></field>
<field name="Flags"><DWORD /></field>
<field name="lCustData"><LPARAM /></field>
<field name="lpfnHook"><LPCCHOOKPROC /></field>
<field name="lpTemplateName"><LPCSTR /></field>
} CHOOSECOLORA, *LPCHOOSECOLORA;
typedef struct tagCHOOSECOLORW {
<field name="lStructSize"><DWORD /></field>
<field name="hwndOwner"><HWND /></field>
<field name="hInstance"><HWND /></field>
<field name="rgbResult"><COLORREF /></field>
<field name="lpCustColors"><ptr><COLORREF /></ptr></field>
<field name="Flags"><DWORD /></field>
<field name="lCustData"><LPARAM /></field>
<field name="lpfnHook"><LPCCHOOKPROC /></field>
<field name="lpTemplateName"><LPCWSTR /></field>
} CHOOSECOLORW, *LPCHOOSECOLORW;
<typedef name="CHOOSECOLOR"><CHOOSECOLORA /></typedef>
<typedef name="LPCHOOSECOLOR"><LPCHOOSECOLORA /></typedef>
BOOL __stdcall ChooseColorA(LPCHOOSECOLORA);
BOOL __stdcall ChooseColorW(LPCHOOSECOLORW);
typedef UINT_PTR (__stdcall *LPFRHOOKPROC) (HWND, UINT, WPARAM, LPARAM);
typedef struct tagFINDREPLACEA {
<field name="lStructSize"><DWORD /></field>
<field name="hwndOwner"><HWND /></field>
<field name="hInstance"><HINSTANCE /></field>
<field name="Flags"><DWORD /></field>
<field name="lpstrFindWhat"><LPSTR /></field>
<field name="lpstrReplaceWith"><LPSTR /></field>
<field name="wFindWhatLen"><WORD /></field>
<field name="wReplaceWithLen"><WORD /></field>
<field name="lCustData"><LPARAM /></field>
<field name="lpfnHook"><LPFRHOOKPROC /></field>
<field name="lpTemplateName"><LPCSTR /></field>
} FINDREPLACEA, *LPFINDREPLACEA;
typedef struct tagFINDREPLACEW {
<field name="lStructSize"><DWORD /></field>
<field name="hwndOwner"><HWND /></field>
<field name="hInstance"><HINSTANCE /></field>
<field name="Flags"><DWORD /></field>
<field name="lpstrFindWhat"><LPWSTR /></field>
<field name="lpstrReplaceWith"><LPWSTR /></field>
<field name="wFindWhatLen"><WORD /></field>
<field name="wReplaceWithLen"><WORD /></field>
<field name="lCustData"><LPARAM /></field>
<field name="lpfnHook"><LPFRHOOKPROC /></field>
<field name="lpTemplateName"><LPCWSTR /></field>
} FINDREPLACEW, *LPFINDREPLACEW;
<typedef name="FINDREPLACE"><FINDREPLACEA /></typedef>
<typedef name="LPFINDREPLACE"><LPFINDREPLACEA /></typedef>
HWND __stdcall FindTextA(LPFINDREPLACEA);
HWND __stdcall FindTextW(LPFINDREPLACEW);
HWND __stdcall ReplaceTextA(LPFINDREPLACEA);
HWND __stdcall ReplaceTextW(LPFINDREPLACEW);
typedef UINT_PTR (__stdcall *LPCFHOOKPROC) (HWND, UINT, WPARAM, LPARAM);
typedef struct tagCHOOSEFONTA {
<field name="lStructSize"><DWORD /></field>
<field name="hwndOwner"><HWND /></field>
<field name="hDC"><HDC /></field>
<field name="lpLogFont"><LPLOGFONTA /></field>
<field name="iPointSize"><INT /></field>
<field name="Flags"><DWORD /></field>
<field name="rgbColors"><COLORREF /></field>
<field name="lCustData"><LPARAM /></field>
<field name="lpfnHook"><LPCFHOOKPROC /></field>
<field name="lpTemplateName"><LPCSTR /></field>
<field name="hInstance"><HINSTANCE /></field>
<field name="lpszStyle"><LPSTR /></field>
<field name="nFontType"><WORD /></field>
<field name="___MISSING_ALIGNMENT__"><WORD /></field>
<field name="nSizeMin"><INT /></field>
<field name="nSizeMax"><INT /></field>
} CHOOSEFONTA;
typedef struct tagCHOOSEFONTW {
<field name="lStructSize"><DWORD /></field>
<field name="hwndOwner"><HWND /></field>
<field name="hDC"><HDC /></field>
<field name="lpLogFont"><LPLOGFONTW /></field>
<field name="iPointSize"><INT /></field>
<field name="Flags"><DWORD /></field>
<field name="rgbColors"><COLORREF /></field>
<field name="lCustData"><LPARAM /></field>
<field name="lpfnHook"><LPCFHOOKPROC /></field>
<field name="lpTemplateName"><LPCWSTR /></field>
<field name="hInstance"><HINSTANCE /></field>
<field name="lpszStyle"><LPWSTR /></field>
<field name="nFontType"><WORD /></field>
<field name="___MISSING_ALIGNMENT__"><WORD /></field>
<field name="nSizeMin"><INT /></field>
<field name="nSizeMax"><INT /></field>
} CHOOSEFONTW;
<typedef name="CHOOSEFONT"><CHOOSEFONTA /></typedef>
<typedef name="LPCHOOSEFONTA"><ptr><CHOOSEFONTA /></ptr></typedef>
<typedef name="LPCHOOSEFONTW"><ptr><CHOOSEFONTW /></ptr></typedef>
<typedef name="LPCHOOSEFONT"><LPCHOOSEFONTA /></typedef>
<typedef name="PCCHOOSEFONTA"><ptr const="true"><CHOOSEFONTA /></ptr></typedef>
<typedef name="PCCHOOSEFONTW"><ptr const="true"><CHOOSEFONTW /></ptr></typedef>
<typedef name="CHOOSEFONT"><CHOOSEFONTA /></typedef>
<typedef name="PCCHOOSEFONT"><PCCHOOSEFONTA /></typedef>
BOOL __stdcall ChooseFontA(LPCHOOSEFONTA);
BOOL __stdcall ChooseFontW(LPCHOOSEFONTW);
typedef UINT_PTR (__stdcall *LPPRINTHOOKPROC) (HWND, UINT, WPARAM, LPARAM);
typedef UINT_PTR (__stdcall *LPSETUPHOOKPROC) (HWND, UINT, WPARAM, LPARAM);
typedef struct tagPDA {
<field name="lStructSize"><DWORD /></field>
<field name="hwndOwner"><HWND /></field>
<field name="hDevMode"><HGLOBAL /></field>
<field name="hDevNames"><HGLOBAL /></field>
<field name="hDC"><HDC /></field>
<field name="Flags"><DWORD /></field>
<field name="nFromPage"><WORD /></field>
<field name="nToPage"><WORD /></field>
<field name="nMinPage"><WORD /></field>
<field name="nMaxPage"><WORD /></field>
<field name="nCopies"><WORD /></field>
<field name="hInstance"><HINSTANCE /></field>
<field name="lCustData"><LPARAM /></field>
<field name="lpfnPrintHook"><LPPRINTHOOKPROC /></field>
<field name="lpfnSetupHook"><LPSETUPHOOKPROC /></field>
<field name="lpPrintTemplateName"><LPCSTR /></field>
<field name="lpSetupTemplateName"><LPCSTR /></field>
<field name="hPrintTemplate"><HGLOBAL /></field>
<field name="hSetupTemplate"><HGLOBAL /></field>
} PRINTDLGA, *LPPRINTDLGA;
typedef struct tagPDW {
<field name="lStructSize"><DWORD /></field>
<field name="hwndOwner"><HWND /></field>
<field name="hDevMode"><HGLOBAL /></field>
<field name="hDevNames"><HGLOBAL /></field>
<field name="hDC"><HDC /></field>
<field name="Flags"><DWORD /></field>
<field name="nFromPage"><WORD /></field>
<field name="nToPage"><WORD /></field>
<field name="nMinPage"><WORD /></field>
<field name="nMaxPage"><WORD /></field>
<field name="nCopies"><WORD /></field>
<field name="hInstance"><HINSTANCE /></field>
<field name="lCustData"><LPARAM /></field>
<field name="lpfnPrintHook"><LPPRINTHOOKPROC /></field>
<field name="lpfnSetupHook"><LPSETUPHOOKPROC /></field>
<field name="lpPrintTemplateName"><LPCWSTR /></field>
<field name="lpSetupTemplateName"><LPCWSTR /></field>
<field name="hPrintTemplate"><HGLOBAL /></field>
<field name="hSetupTemplate"><HGLOBAL /></field>
} PRINTDLGW, *LPPRINTDLGW;
<typedef name="PRINTDLG"><PRINTDLGA /></typedef>
<typedef name="LPPRINTDLG"><LPPRINTDLGA /></typedef>
BOOL __stdcall PrintDlgA( LPPRINTDLGA pPD);
BOOL __stdcall PrintDlgW( LPPRINTDLGW pPD);
typedef struct IPrintDialogCallback { struct IPrintDialogCallbackVtbl * lpVtbl;
} IPrintDialogCallback;
<typedef name="IPrintDialogCallbackVtbl"><struct name="IPrintDialogCallbackVtbl" /></typedef> struct IPrintDialogCallbackVtbl {
HRESULT (__stdcall * QueryInterface) (IPrintDialogCallback * This, const IID * const riid, LPVOID *ppvObj) ;
ULONG (__stdcall * AddRef) (IPrintDialogCallback * This) ;
ULONG (__stdcall * Release) (IPrintDialogCallback * This) ;
HRESULT (__stdcall * InitDone) (IPrintDialogCallback * This) ;
HRESULT (__stdcall * SelectionChange) (IPrintDialogCallback * This) ;
HRESULT (__stdcall * HandleMessage) (IPrintDialogCallback * This, HWND hDlg, UINT uMsg, WPARAM wParam, LPARAM lParam, LRESULT *pResult) ;
};
typedef struct IPrintDialogServices { struct IPrintDialogServicesVtbl * lpVtbl;
} IPrintDialogServices;
<typedef name="IPrintDialogServicesVtbl"><struct name="IPrintDialogServicesVtbl" /></typedef> struct IPrintDialogServicesVtbl {
HRESULT (__stdcall * QueryInterface) (IPrintDialogServices * This, const IID * const riid, LPVOID *ppvObj) ;
ULONG (__stdcall * AddRef) (IPrintDialogServices * This) ;
ULONG (__stdcall * Release) (IPrintDialogServices * This) ;
HRESULT (__stdcall * GetCurrentDevMode) (IPrintDialogServices * This, LPDEVMODE pDevMode, UINT *pcbSize) ;
HRESULT (__stdcall * GetCurrentPrinterName) (IPrintDialogServices * This, LPWSTR pPrinterName, UINT *pcchSize) ;
HRESULT (__stdcall * GetCurrentPortName) (IPrintDialogServices * This, LPWSTR pPortName, UINT *pcchSize) ;
};
typedef struct tagPRINTPAGERANGE {
<field name="nFromPage"><DWORD /></field>
<field name="nToPage"><DWORD /></field>
} PRINTPAGERANGE;
<typedef name="LPPRINTPAGERANGE"><ptr><PRINTPAGERANGE /></ptr></typedef>
<typedef name="PCPRINTPAGERANGE"><ptr const="true"><PRINTPAGERANGE /></ptr></typedef>
typedef struct tagPDEXA {
<field name="lStructSize"><DWORD /></field>
<field name="hwndOwner"><HWND /></field>
<field name="hDevMode"><HGLOBAL /></field>
<field name="hDevNames"><HGLOBAL /></field>
<field name="hDC"><HDC /></field>
<field name="Flags"><DWORD /></field>
<field name="Flags2"><DWORD /></field>
<field name="ExclusionFlags"><DWORD /></field>
<field name="nPageRanges"><DWORD /></field>
<field name="nMaxPageRanges"><DWORD /></field>
<field name="lpPageRanges"><LPPRINTPAGERANGE /></field>
<field name="nMinPage"><DWORD /></field>
<field name="nMaxPage"><DWORD /></field>
<field name="nCopies"><DWORD /></field>
<field name="hInstance"><HINSTANCE /></field>
<field name="lpPrintTemplateName"><LPCSTR /></field>
<field name="lpCallback"><LPUNKNOWN /></field>
<field name="nPropertyPages"><DWORD /></field>
<field name="lphPropertyPages"><ptr><HPROPSHEETPAGE /></ptr></field>
<field name="nStartPage"><DWORD /></field>
<field name="dwResultAction"><DWORD /></field>
} PRINTDLGEXA, *LPPRINTDLGEXA;
typedef struct tagPDEXW {
<field name="lStructSize"><DWORD /></field>
<field name="hwndOwner"><HWND /></field>
<field name="hDevMode"><HGLOBAL /></field>
<field name="hDevNames"><HGLOBAL /></field>
<field name="hDC"><HDC /></field>
<field name="Flags"><DWORD /></field>
<field name="Flags2"><DWORD /></field>
<field name="ExclusionFlags"><DWORD /></field>
<field name="nPageRanges"><DWORD /></field>
<field name="nMaxPageRanges"><DWORD /></field>
<field name="lpPageRanges"><LPPRINTPAGERANGE /></field>
<field name="nMinPage"><DWORD /></field>
<field name="nMaxPage"><DWORD /></field>
<field name="nCopies"><DWORD /></field>
<field name="hInstance"><HINSTANCE /></field>
<field name="lpPrintTemplateName"><LPCWSTR /></field>
<field name="lpCallback"><LPUNKNOWN /></field>
<field name="nPropertyPages"><DWORD /></field>
<field name="lphPropertyPages"><ptr><HPROPSHEETPAGE /></ptr></field>
<field name="nStartPage"><DWORD /></field>
<field name="dwResultAction"><DWORD /></field>
} PRINTDLGEXW, *LPPRINTDLGEXW;
<typedef name="PRINTDLGEX"><PRINTDLGEXA /></typedef>
<typedef name="LPPRINTDLGEX"><LPPRINTDLGEXA /></typedef>
HRESULT __stdcall PrintDlgExA( LPPRINTDLGEXA pPD);
HRESULT __stdcall PrintDlgExW( LPPRINTDLGEXW pPD);
typedef struct tagDEVNAMES {
<field name="wDriverOffset"><WORD /></field>
<field name="wDeviceOffset"><WORD /></field>
<field name="wOutputOffset"><WORD /></field>
<field name="wDefault"><WORD /></field>
} DEVNAMES;
<typedef name="LPDEVNAMES"><ptr><DEVNAMES /></ptr></typedef>
<typedef name="PCDEVNAMES"><ptr const="true"><DEVNAMES /></ptr></typedef>
DWORD __stdcall CommDlgExtendedError();
typedef UINT_PTR (__stdcall* LPPAGEPAINTHOOK)( HWND, UINT, WPARAM, LPARAM );
typedef UINT_PTR (__stdcall* LPPAGESETUPHOOK)( HWND, UINT, WPARAM, LPARAM );
typedef struct tagPSDA {
<field name="lStructSize"><DWORD /></field>
<field name="hwndOwner"><HWND /></field>
<field name="hDevMode"><HGLOBAL /></field>
<field name="hDevNames"><HGLOBAL /></field>
<field name="Flags"><DWORD /></field>
<field name="ptPaperSize"><POINT /></field>
<field name="rtMinMargin"><RECT /></field>
<field name="rtMargin"><RECT /></field>
<field name="hInstance"><HINSTANCE /></field>
<field name="lCustData"><LPARAM /></field>
<field name="lpfnPageSetupHook"><LPPAGESETUPHOOK /></field>
<field name="lpfnPagePaintHook"><LPPAGEPAINTHOOK /></field>
<field name="lpPageSetupTemplateName"><LPCSTR /></field>
<field name="hPageSetupTemplate"><HGLOBAL /></field>
} PAGESETUPDLGA, * LPPAGESETUPDLGA;
typedef struct tagPSDW {
<field name="lStructSize"><DWORD /></field>
<field name="hwndOwner"><HWND /></field>
<field name="hDevMode"><HGLOBAL /></field>
<field name="hDevNames"><HGLOBAL /></field>
<field name="Flags"><DWORD /></field>
<field name="ptPaperSize"><POINT /></field>
<field name="rtMinMargin"><RECT /></field>
<field name="rtMargin"><RECT /></field>
<field name="hInstance"><HINSTANCE /></field>
<field name="lCustData"><LPARAM /></field>
<field name="lpfnPageSetupHook"><LPPAGESETUPHOOK /></field>
<field name="lpfnPagePaintHook"><LPPAGEPAINTHOOK /></field>
<field name="lpPageSetupTemplateName"><LPCWSTR /></field>
<field name="hPageSetupTemplate"><HGLOBAL /></field>
} PAGESETUPDLGW, * LPPAGESETUPDLGW;
<typedef name="PAGESETUPDLG"><PAGESETUPDLGA /></typedef>
<typedef name="LPPAGESETUPDLG"><LPPAGESETUPDLGA /></typedef>
BOOL __stdcall PageSetupDlgA( LPPAGESETUPDLGA );
BOOL __stdcall PageSetupDlgW( LPPAGESETUPDLGW );
__inline PUWSTR static __declspec(deprecated) ua_wcscpy( PUWSTR Destination, PCUWSTR Source ) {
return wcscpy(Destination, Source);
} extern const GUID NETWORK_MANAGER_FIRST_IP_ADDRESS_ARRIVAL_GUID;
extern const GUID NETWORK_MANAGER_LAST_IP_ADDRESS_REMOVAL_GUID;
extern const GUID DOMAIN_JOIN_GUID;
extern const GUID DOMAIN_LEAVE_GUID;
extern const GUID FIREWALL_PORT_OPEN_GUID;
extern const GUID FIREWALL_PORT_CLOSE_GUID;
extern const GUID MACHINE_POLICY_PRESENT_GUID;
extern const GUID USER_POLICY_PRESENT_GUID;
typedef struct _SERVICE_DESCRIPTIONA {
<field name="lpDescription"><LPSTR /></field>
} SERVICE_DESCRIPTIONA, *LPSERVICE_DESCRIPTIONA;
typedef struct _SERVICE_DESCRIPTIONW {
<field name="lpDescription"><LPWSTR /></field>
} SERVICE_DESCRIPTIONW, *LPSERVICE_DESCRIPTIONW;
<typedef name="SERVICE_DESCRIPTION"><SERVICE_DESCRIPTIONA /></typedef>
<typedef name="LPSERVICE_DESCRIPTION"><LPSERVICE_DESCRIPTIONA /></typedef>
typedef enum _SC_ACTION_TYPE {
SC_ACTION_NONE = 0, SC_ACTION_RESTART = 1, SC_ACTION_REBOOT = 2, SC_ACTION_RUN_COMMAND = 3 } SC_ACTION_TYPE;
typedef struct _SC_ACTION {
<field name="Type"><SC_ACTION_TYPE /></field>
<field name="Delay"><DWORD /></field>
} SC_ACTION, *LPSC_ACTION;
typedef struct _SERVICE_FAILURE_ACTIONSA {
<field name="dwResetPeriod"><DWORD /></field>
<field name="lpRebootMsg"><LPSTR /></field>
<field name="lpCommand"><LPSTR /></field>
<field name="cActions"><DWORD /></field>
<field name="lpsaActions"><ptr><SC_ACTION /></ptr></field>
} SERVICE_FAILURE_ACTIONSA, *LPSERVICE_FAILURE_ACTIONSA;
typedef struct _SERVICE_FAILURE_ACTIONSW {
<field name="dwResetPeriod"><DWORD /></field>
<field name="lpRebootMsg"><LPWSTR /></field>
<field name="lpCommand"><LPWSTR /></field>
<field name="cActions"><DWORD /></field>
<field name="lpsaActions"><ptr><SC_ACTION /></ptr></field>
} SERVICE_FAILURE_ACTIONSW, *LPSERVICE_FAILURE_ACTIONSW;
<typedef name="SERVICE_FAILURE_ACTIONS"><SERVICE_FAILURE_ACTIONSA /></typedef>
<typedef name="LPSERVICE_FAILURE_ACTIONS"><LPSERVICE_FAILURE_ACTIONSA /></typedef>
typedef struct _SERVICE_DELAYED_AUTO_START_INFO {
<field name="fDelayedAutostart"><BOOL /></field>
} SERVICE_DELAYED_AUTO_START_INFO, *LPSERVICE_DELAYED_AUTO_START_INFO;
typedef struct _SERVICE_FAILURE_ACTIONS_FLAG {
<field name="fFailureActionsOnNonCrashFailures"><BOOL /></field>
} SERVICE_FAILURE_ACTIONS_FLAG, *LPSERVICE_FAILURE_ACTIONS_FLAG;
typedef struct _SERVICE_SID_INFO {
<field name="dwServiceSidType"><DWORD /></field>
} SERVICE_SID_INFO, *LPSERVICE_SID_INFO;
typedef struct _SERVICE_REQUIRED_PRIVILEGES_INFOA {
<field name="pmszRequiredPrivileges"><LPSTR /></field>
} SERVICE_REQUIRED_PRIVILEGES_INFOA, *LPSERVICE_REQUIRED_PRIVILEGES_INFOA;
typedef struct _SERVICE_REQUIRED_PRIVILEGES_INFOW {
<field name="pmszRequiredPrivileges"><LPWSTR /></field>
} SERVICE_REQUIRED_PRIVILEGES_INFOW, *LPSERVICE_REQUIRED_PRIVILEGES_INFOW;
<typedef name="SERVICE_REQUIRED_PRIVILEGES_INFO"><SERVICE_REQUIRED_PRIVILEGES_INFOA /></typedef>
<typedef name="LPSERVICE_REQUIRED_PRIVILEGES_INFO"><LPSERVICE_REQUIRED_PRIVILEGES_INFOA /></typedef>
typedef struct _SERVICE_PRESHUTDOWN_INFO {
<field name="dwPreshutdownTimeout"><DWORD /></field>
} SERVICE_PRESHUTDOWN_INFO, *LPSERVICE_PRESHUTDOWN_INFO;
typedef struct _SERVICE_TRIGGER_SPECIFIC_DATA_ITEM {
<field name="dwDataType"><DWORD /></field>
<field name="cbData"><DWORD /></field>
<field name="pData"><PBYTE /></field>
} SERVICE_TRIGGER_SPECIFIC_DATA_ITEM, *PSERVICE_TRIGGER_SPECIFIC_DATA_ITEM;
typedef struct _SERVICE_TRIGGER {
<field name="dwTriggerType"><DWORD /></field>
<field name="dwAction"><DWORD /></field>
<field name="pTriggerSubtype"><ptr><GUID /></ptr></field>
<field name="cDataItems"><DWORD /></field>
<field name="pDataItems"><PSERVICE_TRIGGER_SPECIFIC_DATA_ITEM /></field>
} SERVICE_TRIGGER, *PSERVICE_TRIGGER;
typedef struct _SERVICE_TRIGGER_INFO {
<field name="cTriggers"><DWORD /></field>
<field name="pTriggers"><PSERVICE_TRIGGER /></field>
<field name="pReserved"><PBYTE /></field>
} SERVICE_TRIGGER_INFO, *PSERVICE_TRIGGER_INFO;
typedef struct _SERVICE_PREFERRED_NODE_INFO {
<field name="usPreferredNode"><USHORT /></field>
<field name="fDelete"><BOOLEAN /></field>
} SERVICE_PREFERRED_NODE_INFO, *LPSERVICE_PREFERRED_NODE_INFO;
typedef struct _SERVICE_TIMECHANGE_INFO {
<field name="liNewTime"><LARGE_INTEGER /></field>
<field name="liOldTime"><LARGE_INTEGER /></field>
} SERVICE_TIMECHANGE_INFO, *PSERVICE_TIMECHANGE_INFO;
struct SC_HANDLE__{int32 unused;
;
typedef struct SC_HANDLE__ *SC_HANDLE;
<typedef name="LPSC_HANDLE"><ptr><SC_HANDLE /></ptr></typedef>
struct SERVICE_STATUS_HANDLE__{int32 unused;
;
typedef struct SERVICE_STATUS_HANDLE__ *SERVICE_STATUS_HANDLE;
typedef enum _SC_STATUS_TYPE {
SC_STATUS_PROCESS_INFO = 0 } SC_STATUS_TYPE;
typedef enum _SC_ENUM_TYPE {
SC_ENUM_PROCESS_INFO = 0 } SC_ENUM_TYPE;
typedef struct _SERVICE_STATUS {
<field name="dwServiceType"><DWORD /></field>
<field name="dwCurrentState"><DWORD /></field>
<field name="dwControlsAccepted"><DWORD /></field>
<field name="dwWin32ExitCode"><DWORD /></field>
<field name="dwServiceSpecificExitCode"><DWORD /></field>
<field name="dwCheckPoint"><DWORD /></field>
<field name="dwWaitHint"><DWORD /></field>
} SERVICE_STATUS, *LPSERVICE_STATUS;
typedef struct _SERVICE_STATUS_PROCESS {
<field name="dwServiceType"><DWORD /></field>
<field name="dwCurrentState"><DWORD /></field>
<field name="dwControlsAccepted"><DWORD /></field>
<field name="dwWin32ExitCode"><DWORD /></field>
<field name="dwServiceSpecificExitCode"><DWORD /></field>
<field name="dwCheckPoint"><DWORD /></field>
<field name="dwWaitHint"><DWORD /></field>
<field name="dwProcessId"><DWORD /></field>
<field name="dwServiceFlags"><DWORD /></field>
} SERVICE_STATUS_PROCESS, *LPSERVICE_STATUS_PROCESS;
typedef struct _ENUM_SERVICE_STATUSA {
<field name="lpServiceName"><LPSTR /></field>
<field name="lpDisplayName"><LPSTR /></field>
<field name="ServiceStatus"><SERVICE_STATUS /></field>
} ENUM_SERVICE_STATUSA, *LPENUM_SERVICE_STATUSA;
typedef struct _ENUM_SERVICE_STATUSW {
<field name="lpServiceName"><LPWSTR /></field>
<field name="lpDisplayName"><LPWSTR /></field>
<field name="ServiceStatus"><SERVICE_STATUS /></field>
} ENUM_SERVICE_STATUSW, *LPENUM_SERVICE_STATUSW;
<typedef name="ENUM_SERVICE_STATUS"><ENUM_SERVICE_STATUSA /></typedef>
<typedef name="LPENUM_SERVICE_STATUS"><LPENUM_SERVICE_STATUSA /></typedef>
typedef struct _ENUM_SERVICE_STATUS_PROCESSA {
<field name="lpServiceName"><LPSTR /></field>
<field name="lpDisplayName"><LPSTR /></field>
<field name="ServiceStatusProcess"><SERVICE_STATUS_PROCESS /></field>
} ENUM_SERVICE_STATUS_PROCESSA, *LPENUM_SERVICE_STATUS_PROCESSA;
typedef struct _ENUM_SERVICE_STATUS_PROCESSW {
<field name="lpServiceName"><LPWSTR /></field>
<field name="lpDisplayName"><LPWSTR /></field>
<field name="ServiceStatusProcess"><SERVICE_STATUS_PROCESS /></field>
} ENUM_SERVICE_STATUS_PROCESSW, *LPENUM_SERVICE_STATUS_PROCESSW;
<typedef name="ENUM_SERVICE_STATUS_PROCESS"><ENUM_SERVICE_STATUS_PROCESSA /></typedef>
<typedef name="LPENUM_SERVICE_STATUS_PROCESS"><LPENUM_SERVICE_STATUS_PROCESSA /></typedef>
<typedef name="SC_LOCK"><LPVOID /></typedef>
typedef struct _QUERY_SERVICE_LOCK_STATUSA {
<field name="fIsLocked"><DWORD /></field>
<field name="lpLockOwner"><LPSTR /></field>
<field name="dwLockDuration"><DWORD /></field>
} QUERY_SERVICE_LOCK_STATUSA, *LPQUERY_SERVICE_LOCK_STATUSA;
typedef struct _QUERY_SERVICE_LOCK_STATUSW {
<field name="fIsLocked"><DWORD /></field>
<field name="lpLockOwner"><LPWSTR /></field>
<field name="dwLockDuration"><DWORD /></field>
} QUERY_SERVICE_LOCK_STATUSW, *LPQUERY_SERVICE_LOCK_STATUSW;
<typedef name="QUERY_SERVICE_LOCK_STATUS"><QUERY_SERVICE_LOCK_STATUSA /></typedef>
<typedef name="LPQUERY_SERVICE_LOCK_STATUS"><LPQUERY_SERVICE_LOCK_STATUSA /></typedef>
typedef struct _QUERY_SERVICE_CONFIGA {
<field name="dwServiceType"><DWORD /></field>
<field name="dwStartType"><DWORD /></field>
<field name="dwErrorControl"><DWORD /></field>
<field name="lpBinaryPathName"><LPSTR /></field>
<field name="lpLoadOrderGroup"><LPSTR /></field>
<field name="dwTagId"><DWORD /></field>
<field name="lpDependencies"><LPSTR /></field>
<field name="lpServiceStartName"><LPSTR /></field>
<field name="lpDisplayName"><LPSTR /></field>
} QUERY_SERVICE_CONFIGA, *LPQUERY_SERVICE_CONFIGA;
typedef struct _QUERY_SERVICE_CONFIGW {
<field name="dwServiceType"><DWORD /></field>
<field name="dwStartType"><DWORD /></field>
<field name="dwErrorControl"><DWORD /></field>
<field name="lpBinaryPathName"><LPWSTR /></field>
<field name="lpLoadOrderGroup"><LPWSTR /></field>
<field name="dwTagId"><DWORD /></field>
<field name="lpDependencies"><LPWSTR /></field>
<field name="lpServiceStartName"><LPWSTR /></field>
<field name="lpDisplayName"><LPWSTR /></field>
} QUERY_SERVICE_CONFIGW, *LPQUERY_SERVICE_CONFIGW;
<typedef name="QUERY_SERVICE_CONFIG"><QUERY_SERVICE_CONFIGA /></typedef>
<typedef name="LPQUERY_SERVICE_CONFIG"><LPQUERY_SERVICE_CONFIGA /></typedef>
typedef void (__stdcall *LPSERVICE_MAIN_FUNCTIONW)( DWORD dwNumServicesArgs, LPWSTR *lpServiceArgVectors );
typedef void (__stdcall *LPSERVICE_MAIN_FUNCTIONA)( DWORD dwNumServicesArgs, LPSTR *lpServiceArgVectors );
typedef struct _SERVICE_TABLE_ENTRYA {
<field name="lpServiceName"><LPSTR /></field>
<field name="lpServiceProc"><LPSERVICE_MAIN_FUNCTIONA /></field>
}SERVICE_TABLE_ENTRYA, *LPSERVICE_TABLE_ENTRYA;
typedef struct _SERVICE_TABLE_ENTRYW {
<field name="lpServiceName"><LPWSTR /></field>
<field name="lpServiceProc"><LPSERVICE_MAIN_FUNCTIONW /></field>
}SERVICE_TABLE_ENTRYW, *LPSERVICE_TABLE_ENTRYW;
<typedef name="SERVICE_TABLE_ENTRY"><SERVICE_TABLE_ENTRYA /></typedef>
<typedef name="LPSERVICE_TABLE_ENTRY"><LPSERVICE_TABLE_ENTRYA /></typedef>
typedef void (__stdcall *LPHANDLER_FUNCTION)( DWORD dwControl );
typedef DWORD (__stdcall *LPHANDLER_FUNCTION_EX)( DWORD dwControl, DWORD dwEventType, LPVOID lpEventData, LPVOID lpContext );
typedef void(__stdcall * PFN_SC_NOTIFY_CALLBACK )(PVOID pParameter );
typedef struct _SERVICE_NOTIFY_1 {
<field name="dwVersion"><DWORD /></field>
<field name="pfnNotifyCallback"><PFN_SC_NOTIFY_CALLBACK /></field>
<field name="pContext"><PVOID /></field>
<field name="dwNotificationStatus"><DWORD /></field>
<field name="ServiceStatus"><SERVICE_STATUS_PROCESS /></field>
} SERVICE_NOTIFY_1, *PSERVICE_NOTIFY_1;
typedef struct _SERVICE_NOTIFY_2A {
<field name="dwVersion"><DWORD /></field>
<field name="pfnNotifyCallback"><PFN_SC_NOTIFY_CALLBACK /></field>
<field name="pContext"><PVOID /></field>
<field name="dwNotificationStatus"><DWORD /></field>
<field name="ServiceStatus"><SERVICE_STATUS_PROCESS /></field>
<field name="dwNotificationTriggered"><DWORD /></field>
<field name="pszServiceNames"><LPSTR /></field>
} SERVICE_NOTIFY_2A, *PSERVICE_NOTIFY_2A;
typedef struct _SERVICE_NOTIFY_2W {
<field name="dwVersion"><DWORD /></field>
<field name="pfnNotifyCallback"><PFN_SC_NOTIFY_CALLBACK /></field>
<field name="pContext"><PVOID /></field>
<field name="dwNotificationStatus"><DWORD /></field>
<field name="ServiceStatus"><SERVICE_STATUS_PROCESS /></field>
<field name="dwNotificationTriggered"><DWORD /></field>
<field name="pszServiceNames"><LPWSTR /></field>
} SERVICE_NOTIFY_2W, *PSERVICE_NOTIFY_2W;
<typedef name="SERVICE_NOTIFY_2"><SERVICE_NOTIFY_2A /></typedef>
<typedef name="PSERVICE_NOTIFY_2"><PSERVICE_NOTIFY_2A /></typedef>
<typedef name="SERVICE_NOTIFYA"><SERVICE_NOTIFY_2A /></typedef>
<typedef name="PSERVICE_NOTIFYA"><ptr><SERVICE_NOTIFY_2A /></ptr></typedef>
<typedef name="SERVICE_NOTIFYW"><SERVICE_NOTIFY_2W /></typedef>
<typedef name="PSERVICE_NOTIFYW"><ptr><SERVICE_NOTIFY_2W /></ptr></typedef>
<typedef name="SERVICE_NOTIFY"><SERVICE_NOTIFYA /></typedef>
<typedef name="PSERVICE_NOTIFY"><PSERVICE_NOTIFYA /></typedef>
typedef struct _SERVICE_CONTROL_STATUS_REASON_PARAMSA {
<field name="dwReason"><DWORD /></field>
<field name="pszComment"><LPSTR /></field>
<field name="ServiceStatus"><SERVICE_STATUS_PROCESS /></field>
} SERVICE_CONTROL_STATUS_REASON_PARAMSA, *PSERVICE_CONTROL_STATUS_REASON_PARAMSA;
typedef struct _SERVICE_CONTROL_STATUS_REASON_PARAMSW {
<field name="dwReason"><DWORD /></field>
<field name="pszComment"><LPWSTR /></field>
<field name="ServiceStatus"><SERVICE_STATUS_PROCESS /></field>
} SERVICE_CONTROL_STATUS_REASON_PARAMSW, *PSERVICE_CONTROL_STATUS_REASON_PARAMSW;
<typedef name="SERVICE_CONTROL_STATUS_REASON_PARAMS"><SERVICE_CONTROL_STATUS_REASON_PARAMSA /></typedef>
<typedef name="PSERVICE_CONTROL_STATUS_REASON_PARAMS"><PSERVICE_CONTROL_STATUS_REASON_PARAMSA /></typedef>

BOOL __stdcall ChangeServiceConfigA( SC_HANDLE hService, DWORD dwServiceType, DWORD dwStartType, DWORD dwErrorControl, LPCSTR lpBinaryPathName, LPCSTR lpLoadOrderGroup, LPDWORD lpdwTagId, LPCSTR lpDependencies, LPCSTR lpServiceStartName, LPCSTR lpPassword, LPCSTR lpDisplayName );

BOOL __stdcall ChangeServiceConfigW( SC_HANDLE hService, DWORD dwServiceType, DWORD dwStartType, DWORD dwErrorControl, LPCWSTR lpBinaryPathName, LPCWSTR lpLoadOrderGroup, LPDWORD lpdwTagId, LPCWSTR lpDependencies, LPCWSTR lpServiceStartName, LPCWSTR lpPassword, LPCWSTR lpDisplayName );

BOOL __stdcall ChangeServiceConfig2A( SC_HANDLE hService, DWORD dwInfoLevel, LPVOID lpInfo );

BOOL __stdcall ChangeServiceConfig2W( SC_HANDLE hService, DWORD dwInfoLevel, LPVOID lpInfo );

BOOL __stdcall CloseServiceHandle( SC_HANDLE hSCObject );

BOOL __stdcall ControlService( SC_HANDLE hService, DWORD dwControl, LPSERVICE_STATUS lpServiceStatus );

SC_HANDLE __stdcall CreateServiceA( SC_HANDLE hSCManager, LPCSTR lpServiceName, LPCSTR lpDisplayName, DWORD dwDesiredAccess, DWORD dwServiceType, DWORD dwStartType, DWORD dwErrorControl, LPCSTR lpBinaryPathName, LPCSTR lpLoadOrderGroup, LPDWORD lpdwTagId, LPCSTR lpDependencies, LPCSTR lpServiceStartName, LPCSTR lpPassword );

SC_HANDLE __stdcall CreateServiceW( SC_HANDLE hSCManager, LPCWSTR lpServiceName, LPCWSTR lpDisplayName, DWORD dwDesiredAccess, DWORD dwServiceType, DWORD dwStartType, DWORD dwErrorControl, LPCWSTR lpBinaryPathName, LPCWSTR lpLoadOrderGroup, LPDWORD lpdwTagId, LPCWSTR lpDependencies, LPCWSTR lpServiceStartName, LPCWSTR lpPassword );

BOOL __stdcall DeleteService( SC_HANDLE hService );

BOOL __stdcall EnumDependentServicesA( SC_HANDLE hService, DWORD dwServiceState, LPENUM_SERVICE_STATUSA lpServices, DWORD cbBufSize, LPDWORD pcbBytesNeeded, LPDWORD lpServicesReturned );

BOOL __stdcall EnumDependentServicesW( SC_HANDLE hService, DWORD dwServiceState, LPENUM_SERVICE_STATUSW lpServices, DWORD cbBufSize, LPDWORD pcbBytesNeeded, LPDWORD lpServicesReturned );

BOOL __stdcall EnumServicesStatusA( SC_HANDLE hSCManager, DWORD dwServiceType, DWORD dwServiceState, LPENUM_SERVICE_STATUSA lpServices, DWORD cbBufSize, LPDWORD pcbBytesNeeded, LPDWORD lpServicesReturned, LPDWORD lpResumeHandle );

BOOL __stdcall EnumServicesStatusW( SC_HANDLE hSCManager, DWORD dwServiceType, DWORD dwServiceState, LPENUM_SERVICE_STATUSW lpServices, DWORD cbBufSize, LPDWORD pcbBytesNeeded, LPDWORD lpServicesReturned, LPDWORD lpResumeHandle );

BOOL __stdcall EnumServicesStatusExA( SC_HANDLE hSCManager, SC_ENUM_TYPE InfoLevel, DWORD dwServiceType, DWORD dwServiceState, LPBYTE lpServices, DWORD cbBufSize, LPDWORD pcbBytesNeeded, LPDWORD lpServicesReturned, LPDWORD lpResumeHandle, LPCSTR pszGroupName );

BOOL __stdcall EnumServicesStatusExW( SC_HANDLE hSCManager, SC_ENUM_TYPE InfoLevel, DWORD dwServiceType, DWORD dwServiceState, LPBYTE lpServices, DWORD cbBufSize, LPDWORD pcbBytesNeeded, LPDWORD lpServicesReturned, LPDWORD lpResumeHandle, LPCWSTR pszGroupName );

BOOL __stdcall GetServiceKeyNameA( SC_HANDLE hSCManager, LPCSTR lpDisplayName, LPSTR lpServiceName, LPDWORD lpcchBuffer );

BOOL __stdcall GetServiceKeyNameW( SC_HANDLE hSCManager, LPCWSTR lpDisplayName, LPWSTR lpServiceName, LPDWORD lpcchBuffer );

BOOL __stdcall GetServiceDisplayNameA( SC_HANDLE hSCManager, LPCSTR lpServiceName, LPSTR lpDisplayName, LPDWORD lpcchBuffer );

BOOL __stdcall GetServiceDisplayNameW( SC_HANDLE hSCManager, LPCWSTR lpServiceName, LPWSTR lpDisplayName, LPDWORD lpcchBuffer );

SC_LOCK __stdcall LockServiceDatabase( SC_HANDLE hSCManager );

BOOL __stdcall NotifyBootConfigStatus( BOOL BootAcceptable );

SC_HANDLE __stdcall OpenSCManagerA( LPCSTR lpMachineName, LPCSTR lpDatabaseName, DWORD dwDesiredAccess );

SC_HANDLE __stdcall OpenSCManagerW( LPCWSTR lpMachineName, LPCWSTR lpDatabaseName, DWORD dwDesiredAccess );

SC_HANDLE __stdcall OpenServiceA( SC_HANDLE hSCManager, LPCSTR lpServiceName, DWORD dwDesiredAccess );

SC_HANDLE __stdcall OpenServiceW( SC_HANDLE hSCManager, LPCWSTR lpServiceName, DWORD dwDesiredAccess );

BOOL __stdcall QueryServiceConfigA( SC_HANDLE hService, LPQUERY_SERVICE_CONFIGA lpServiceConfig, DWORD cbBufSize, LPDWORD pcbBytesNeeded );

BOOL __stdcall QueryServiceConfigW( SC_HANDLE hService, LPQUERY_SERVICE_CONFIGW lpServiceConfig, DWORD cbBufSize, LPDWORD pcbBytesNeeded );

BOOL __stdcall QueryServiceConfig2A( SC_HANDLE hService, DWORD dwInfoLevel, LPBYTE lpBuffer, DWORD cbBufSize, LPDWORD pcbBytesNeeded );

BOOL __stdcall QueryServiceConfig2W( SC_HANDLE hService, DWORD dwInfoLevel, LPBYTE lpBuffer, DWORD cbBufSize, LPDWORD pcbBytesNeeded );

BOOL __stdcall QueryServiceLockStatusA( SC_HANDLE hSCManager, LPQUERY_SERVICE_LOCK_STATUSA lpLockStatus, DWORD cbBufSize, LPDWORD pcbBytesNeeded );

BOOL __stdcall QueryServiceLockStatusW( SC_HANDLE hSCManager, LPQUERY_SERVICE_LOCK_STATUSW lpLockStatus, DWORD cbBufSize, LPDWORD pcbBytesNeeded );

BOOL __stdcall QueryServiceObjectSecurity( SC_HANDLE hService, SECURITY_INFORMATION dwSecurityInformation, PSECURITY_DESCRIPTOR lpSecurityDescriptor, DWORD cbBufSize, LPDWORD pcbBytesNeeded );

BOOL __stdcall QueryServiceStatus( SC_HANDLE hService, LPSERVICE_STATUS lpServiceStatus );

BOOL __stdcall QueryServiceStatusEx( SC_HANDLE hService, SC_STATUS_TYPE InfoLevel, LPBYTE lpBuffer, DWORD cbBufSize, LPDWORD pcbBytesNeeded );

SERVICE_STATUS_HANDLE __stdcall RegisterServiceCtrlHandlerA( LPCSTR lpServiceName, LPHANDLER_FUNCTION lpHandlerProc );

SERVICE_STATUS_HANDLE __stdcall RegisterServiceCtrlHandlerW( LPCWSTR lpServiceName, LPHANDLER_FUNCTION lpHandlerProc );

SERVICE_STATUS_HANDLE __stdcall RegisterServiceCtrlHandlerExA( LPCSTR lpServiceName, LPHANDLER_FUNCTION_EX lpHandlerProc, LPVOID lpContext );

SERVICE_STATUS_HANDLE __stdcall RegisterServiceCtrlHandlerExW( LPCWSTR lpServiceName, LPHANDLER_FUNCTION_EX lpHandlerProc, LPVOID lpContext );

BOOL __stdcall SetServiceObjectSecurity( SC_HANDLE hService, SECURITY_INFORMATION dwSecurityInformation, PSECURITY_DESCRIPTOR lpSecurityDescriptor );

BOOL __stdcall SetServiceStatus( SERVICE_STATUS_HANDLE hServiceStatus, LPSERVICE_STATUS lpServiceStatus );

BOOL __stdcall StartServiceCtrlDispatcherA( const SERVICE_TABLE_ENTRYA *lpServiceStartTable );

BOOL __stdcall StartServiceCtrlDispatcherW( const SERVICE_TABLE_ENTRYW *lpServiceStartTable );

BOOL __stdcall StartServiceA( SC_HANDLE hService, DWORD dwNumServiceArgs, LPCSTR *lpServiceArgVectors );

BOOL __stdcall StartServiceW( SC_HANDLE hService, DWORD dwNumServiceArgs, LPCWSTR *lpServiceArgVectors );

BOOL __stdcall UnlockServiceDatabase( SC_LOCK ScLock );

DWORD __stdcall NotifyServiceStatusChangeA(SC_HANDLE hService, DWORD dwNotifyMask, PSERVICE_NOTIFYA pNotifyBuffer );

DWORD __stdcall NotifyServiceStatusChangeW(SC_HANDLE hService, DWORD dwNotifyMask, PSERVICE_NOTIFYW pNotifyBuffer );

BOOL __stdcall ControlServiceExA( SC_HANDLE hService, DWORD dwControl, DWORD dwInfoLevel, PVOID pControlParams );

BOOL __stdcall ControlServiceExW( SC_HANDLE hService, DWORD dwControl, DWORD dwInfoLevel, PVOID pControlParams );
typedef struct _MODEMDEVCAPS {
<field name="dwActualSize"><DWORD /></field>
<field name="dwRequiredSize"><DWORD /></field>
<field name="dwDevSpecificOffset"><DWORD /></field>
<field name="dwDevSpecificSize"><DWORD /></field>
<field name="dwModemProviderVersion"><DWORD /></field>
<field name="dwModemManufacturerOffset"><DWORD /></field>
<field name="dwModemManufacturerSize"><DWORD /></field>
<field name="dwModemModelOffset"><DWORD /></field>
<field name="dwModemModelSize"><DWORD /></field>
<field name="dwModemVersionOffset"><DWORD /></field>
<field name="dwModemVersionSize"><DWORD /></field>
<field name="dwDialOptions"><DWORD /></field>
<field name="dwCallSetupFailTimer"><DWORD /></field>
<field name="dwInactivityTimeout"><DWORD /></field>
<field name="dwSpeakerVolume"><DWORD /></field>
<field name="dwSpeakerMode"><DWORD /></field>
<field name="dwModemOptions"><DWORD /></field>
<field name="dwMaxDTERate"><DWORD /></field>
<field name="dwMaxDCERate"><DWORD /></field>
BYTE abVariablePortion [1];
} MODEMDEVCAPS, *PMODEMDEVCAPS, *LPMODEMDEVCAPS;
typedef struct _MODEMSETTINGS {
<field name="dwActualSize"><DWORD /></field>
<field name="dwRequiredSize"><DWORD /></field>
<field name="dwDevSpecificOffset"><DWORD /></field>
<field name="dwDevSpecificSize"><DWORD /></field>
<field name="dwCallSetupFailTimer"><DWORD /></field>
<field name="dwInactivityTimeout"><DWORD /></field>
<field name="dwSpeakerVolume"><DWORD /></field>
<field name="dwSpeakerMode"><DWORD /></field>
<field name="dwPreferredModemOptions"><DWORD /></field>
<field name="dwNegotiatedModemOptions"><DWORD /></field>
<field name="dwNegotiatedDCERate"><DWORD /></field>
BYTE abVariablePortion [1];
} MODEMSETTINGS, *PMODEMSETTINGS, *LPMODEMSETTINGS;
struct HIMC__{int32 unused;
;
typedef struct HIMC__ *HIMC;
struct HIMCC__{int32 unused;
;
typedef struct HIMCC__ *HIMCC;
<typedef name="LPHKL"><ptr><HKL /></ptr></typedef>
<typedef name="LPUINT"><ptr><UINT /></ptr></typedef>
typedef struct tagCOMPOSITIONFORM {
<field name="dwStyle"><DWORD /></field>
<field name="ptCurrentPos"><POINT /></field>
<field name="rcArea"><RECT /></field>
} COMPOSITIONFORM, *PCOMPOSITIONFORM, *NPCOMPOSITIONFORM, *LPCOMPOSITIONFORM;
typedef struct tagCANDIDATEFORM {
<field name="dwIndex"><DWORD /></field>
<field name="dwStyle"><DWORD /></field>
<field name="ptCurrentPos"><POINT /></field>
<field name="rcArea"><RECT /></field>
} CANDIDATEFORM, *PCANDIDATEFORM, *NPCANDIDATEFORM, *LPCANDIDATEFORM;
typedef struct tagCANDIDATELIST {
<field name="dwSize"><DWORD /></field>
<field name="dwStyle"><DWORD /></field>
<field name="dwCount"><DWORD /></field>
<field name="dwSelection"><DWORD /></field>
<field name="dwPageStart"><DWORD /></field>
<field name="dwPageSize"><DWORD /></field>
<field name="dwOffset"><arr length="1"><DWORD /></arr></field>
} CANDIDATELIST, *PCANDIDATELIST, *NPCANDIDATELIST, *LPCANDIDATELIST;
typedef struct tagREGISTERWORDA {
<field name="lpReading"><LPSTR /></field>
<field name="lpWord"><LPSTR /></field>
} REGISTERWORDA, *PREGISTERWORDA, *NPREGISTERWORDA, *LPREGISTERWORDA;
typedef struct tagREGISTERWORDW {
<field name="lpReading"><LPWSTR /></field>
<field name="lpWord"><LPWSTR /></field>
} REGISTERWORDW, *PREGISTERWORDW, *NPREGISTERWORDW, *LPREGISTERWORDW;
<typedef name="REGISTERWORD"><REGISTERWORDA /></typedef>
<typedef name="PREGISTERWORD"><PREGISTERWORDA /></typedef>
<typedef name="NPREGISTERWORD"><NPREGISTERWORDA /></typedef>
<typedef name="LPREGISTERWORD"><LPREGISTERWORDA /></typedef>
typedef struct tagRECONVERTSTRING {
<field name="dwSize"><DWORD /></field>
<field name="dwVersion"><DWORD /></field>
<field name="dwStrLen"><DWORD /></field>
<field name="dwStrOffset"><DWORD /></field>
<field name="dwCompStrLen"><DWORD /></field>
<field name="dwCompStrOffset"><DWORD /></field>
<field name="dwTargetStrLen"><DWORD /></field>
<field name="dwTargetStrOffset"><DWORD /></field>
} RECONVERTSTRING, *PRECONVERTSTRING, *NPRECONVERTSTRING, *LPRECONVERTSTRING;
typedef struct tagSTYLEBUFA {
<field name="dwStyle"><DWORD /></field>
<field name="szDescription"><arr length="32"><CHAR /></arr></field>
} STYLEBUFA, *PSTYLEBUFA, *NPSTYLEBUFA, *LPSTYLEBUFA;
typedef struct tagSTYLEBUFW {
<field name="dwStyle"><DWORD /></field>
<field name="szDescription"><arr length="32"><WCHAR /></arr></field>
} STYLEBUFW, *PSTYLEBUFW, *NPSTYLEBUFW, *LPSTYLEBUFW;
<typedef name="STYLEBUF"><STYLEBUFA /></typedef>
<typedef name="PSTYLEBUF"><PSTYLEBUFA /></typedef>
<typedef name="NPSTYLEBUF"><NPSTYLEBUFA /></typedef>
<typedef name="LPSTYLEBUF"><LPSTYLEBUFA /></typedef>
typedef struct tagIMEMENUITEMINFOA {
<field name="cbSize"><UINT /></field>
<field name="fType"><UINT /></field>
<field name="fState"><UINT /></field>
<field name="wID"><UINT /></field>
<field name="hbmpChecked"><HBITMAP /></field>
<field name="hbmpUnchecked"><HBITMAP /></field>
<field name="dwItemData"><DWORD /></field>
<field name="szString"><arr length="80"><CHAR /></arr></field>
<field name="hbmpItem"><HBITMAP /></field>
} IMEMENUITEMINFOA, *PIMEMENUITEMINFOA, *NPIMEMENUITEMINFOA, *LPIMEMENUITEMINFOA;
typedef struct tagIMEMENUITEMINFOW {
<field name="cbSize"><UINT /></field>
<field name="fType"><UINT /></field>
<field name="fState"><UINT /></field>
<field name="wID"><UINT /></field>
<field name="hbmpChecked"><HBITMAP /></field>
<field name="hbmpUnchecked"><HBITMAP /></field>
<field name="dwItemData"><DWORD /></field>
<field name="szString"><arr length="80"><WCHAR /></arr></field>
<field name="hbmpItem"><HBITMAP /></field>
} IMEMENUITEMINFOW, *PIMEMENUITEMINFOW, *NPIMEMENUITEMINFOW, *LPIMEMENUITEMINFOW;
<typedef name="IMEMENUITEMINFO"><IMEMENUITEMINFOA /></typedef>
<typedef name="PIMEMENUITEMINFO"><PIMEMENUITEMINFOA /></typedef>
<typedef name="NPIMEMENUITEMINFO"><NPIMEMENUITEMINFOA /></typedef>
<typedef name="LPIMEMENUITEMINFO"><LPIMEMENUITEMINFOA /></typedef>
typedef struct tagIMECHARPOSITION {
<field name="dwSize"><DWORD /></field>
<field name="dwCharPos"><DWORD /></field>
<field name="pt"><POINT /></field>
<field name="cLineHeight"><UINT /></field>
<field name="rcDocument"><RECT /></field>
} IMECHARPOSITION, *PIMECHARPOSITION, *NPIMECHARPOSITION, *LPIMECHARPOSITION;
typedef BOOL (__stdcall* IMCENUMPROC)(HIMC, LPARAM);
HKL __stdcall ImmInstallIMEA( LPCSTR lpszIMEFileName, LPCSTR lpszLayoutText);
HKL __stdcall ImmInstallIMEW( LPCWSTR lpszIMEFileName, LPCWSTR lpszLayoutText);
HWND __stdcall ImmGetDefaultIMEWnd( HWND);
UINT __stdcall ImmGetDescriptionA( HKL, LPSTR lpszDescription, UINT uBufLen);
UINT __stdcall ImmGetDescriptionW( HKL, LPWSTR lpszDescription, UINT uBufLen);
UINT __stdcall ImmGetIMEFileNameA( HKL, LPSTR lpszFileName, UINT uBufLen);
UINT __stdcall ImmGetIMEFileNameW( HKL, LPWSTR lpszFileName, UINT uBufLen);
DWORD __stdcall ImmGetProperty( HKL, DWORD);
BOOL __stdcall ImmIsIME( HKL);
BOOL __stdcall ImmSimulateHotKey( HWND, DWORD);
HIMC __stdcall ImmCreateContext();
BOOL __stdcall ImmDestroyContext( HIMC);
HIMC __stdcall ImmGetContext( HWND);
BOOL __stdcall ImmReleaseContext( HWND, HIMC);
HIMC __stdcall ImmAssociateContext( HWND, HIMC);
BOOL __stdcall ImmAssociateContextEx( HWND, HIMC, DWORD);
LONG __stdcall ImmGetCompositionStringA( HIMC, DWORD, LPVOID lpBuf, DWORD dwBufLen);
LONG __stdcall ImmGetCompositionStringW( HIMC, DWORD, LPVOID lpBuf, DWORD dwBufLen);
BOOL __stdcall ImmSetCompositionStringA( HIMC, DWORD dwIndex, LPVOID lpComp, DWORD dwCompLen, LPVOID lpRead, DWORD dwReadLen);
BOOL __stdcall ImmSetCompositionStringW( HIMC, DWORD dwIndex, LPVOID lpComp, DWORD dwCompLen, LPVOID lpRead, DWORD dwReadLen);
DWORD __stdcall ImmGetCandidateListCountA( HIMC, LPDWORD lpdwListCount);
DWORD __stdcall ImmGetCandidateListCountW( HIMC, LPDWORD lpdwListCount);
DWORD __stdcall ImmGetCandidateListA( HIMC, DWORD deIndex, LPCANDIDATELIST lpCandList, DWORD dwBufLen);
DWORD __stdcall ImmGetCandidateListW( HIMC, DWORD deIndex, LPCANDIDATELIST lpCandList, DWORD dwBufLen);
DWORD __stdcall ImmGetGuideLineA( HIMC, DWORD dwIndex, LPSTR lpBuf, DWORD dwBufLen);
DWORD __stdcall ImmGetGuideLineW( HIMC, DWORD dwIndex, LPWSTR lpBuf, DWORD dwBufLen);
BOOL __stdcall ImmGetConversionStatus( HIMC, LPDWORD lpfdwConversion, LPDWORD lpfdwSentence);
BOOL __stdcall ImmSetConversionStatus( HIMC, DWORD, DWORD);
BOOL __stdcall ImmGetOpenStatus( HIMC);
BOOL __stdcall ImmSetOpenStatus( HIMC, BOOL);
BOOL __stdcall ImmGetCompositionFontA( HIMC, LPLOGFONTA lplf);
BOOL __stdcall ImmGetCompositionFontW( HIMC, LPLOGFONTW lplf);
BOOL __stdcall ImmSetCompositionFontA( HIMC, LPLOGFONTA lplf);
BOOL __stdcall ImmSetCompositionFontW( HIMC, LPLOGFONTW lplf);
BOOL __stdcall ImmConfigureIMEA( HKL, HWND, DWORD, LPVOID);
BOOL __stdcall ImmConfigureIMEW( HKL, HWND, DWORD, LPVOID);
LRESULT __stdcall ImmEscapeA( HKL, HIMC, UINT, LPVOID);
LRESULT __stdcall ImmEscapeW( HKL, HIMC, UINT, LPVOID);
DWORD __stdcall ImmGetConversionListA( HKL, HIMC, LPCSTR lpSrc, LPCANDIDATELIST lpDst, DWORD dwBufLen, UINT uFlag);
DWORD __stdcall ImmGetConversionListW( HKL, HIMC, LPCWSTR lpSrc, LPCANDIDATELIST lpDst, DWORD dwBufLen, UINT uFlag);
BOOL __stdcall ImmNotifyIME( HIMC, DWORD dwAction, DWORD dwIndex, DWORD dwValue);
BOOL __stdcall ImmGetStatusWindowPos( HIMC, LPPOINT lpptPos);
BOOL __stdcall ImmSetStatusWindowPos( HIMC, LPPOINT lpptPos);
BOOL __stdcall ImmGetCompositionWindow( HIMC, LPCOMPOSITIONFORM lpCompForm);
BOOL __stdcall ImmSetCompositionWindow( HIMC, LPCOMPOSITIONFORM lpCompForm);
BOOL __stdcall ImmGetCandidateWindow( HIMC, DWORD, LPCANDIDATEFORM lpCandidate);
BOOL __stdcall ImmSetCandidateWindow( HIMC, LPCANDIDATEFORM lpCandidate);
BOOL __stdcall ImmIsUIMessageA( HWND, UINT, WPARAM, LPARAM);
BOOL __stdcall ImmIsUIMessageW( HWND, UINT, WPARAM, LPARAM);
UINT __stdcall ImmGetVirtualKey( HWND);
typedef int32 (__stdcall *REGISTERWORDENUMPROCA)( LPCSTR lpszReading, DWORD, LPCSTR lpszString, LPVOID);
typedef int32 (__stdcall *REGISTERWORDENUMPROCW)( LPCWSTR lpszReading, DWORD, LPCWSTR lpszString, LPVOID);
BOOL __stdcall ImmRegisterWordA( HKL, LPCSTR lpszReading, DWORD, LPCSTR lpszRegister);
BOOL __stdcall ImmRegisterWordW( HKL, LPCWSTR lpszReading, DWORD, LPCWSTR lpszRegister);
BOOL __stdcall ImmUnregisterWordA( HKL, LPCSTR lpszReading, DWORD, LPCSTR lpszUnregister);
BOOL __stdcall ImmUnregisterWordW( HKL, LPCWSTR lpszReading, DWORD, LPCWSTR lpszUnregister);
UINT __stdcall ImmGetRegisterWordStyleA( HKL, UINT nItem, LPSTYLEBUFA lpStyleBuf);
UINT __stdcall ImmGetRegisterWordStyleW( HKL, UINT nItem, LPSTYLEBUFW lpStyleBuf);
UINT __stdcall ImmEnumRegisterWordA( HKL, REGISTERWORDENUMPROCA, LPCSTR lpszReading, DWORD, LPCSTR lpszRegister, LPVOID);
UINT __stdcall ImmEnumRegisterWordW( HKL, REGISTERWORDENUMPROCW, LPCWSTR lpszReading, DWORD, LPCWSTR lpszRegister, LPVOID);
BOOL __stdcall ImmDisableIME( DWORD);
BOOL __stdcall ImmEnumInputContext(DWORD idThread, IMCENUMPROC lpfn, LPARAM lParam);
DWORD __stdcall ImmGetImeMenuItemsA( HIMC, DWORD, DWORD, LPIMEMENUITEMINFOA lpImeParentMenu, LPIMEMENUITEMINFOA lpImeMenu, DWORD dwSize);
DWORD __stdcall ImmGetImeMenuItemsW( HIMC, DWORD, DWORD, LPIMEMENUITEMINFOW lpImeParentMenu, LPIMEMENUITEMINFOW lpImeMenu, DWORD dwSize);
BOOL __stdcall ImmDisableTextFrameService(DWORD idThread);
</library>
