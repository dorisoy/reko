// SegmentedDoubleReferenceMock
// Return size: 0
void SegmentedDoubleReferenceMock()
SegmentedDoubleReferenceMock_entry:
	// succ:  l1
l1:
	si1 = Mem0[ds:0x0300:word16]
	Mem0[ds:0x0100:word16] = Mem0[ds:si1 + 0x0004:word16]
	si2 = Mem0[ds:0x0300:word16]
	Mem0[ds:0x0102:word16] = Mem0[ds:si2 + 0x0004:word16]
SegmentedDoubleReferenceMock_exit:

globals_t (in globals : (ptr (struct "Globals")))
	trait_primitive((ptr (struct "Globals")))
T_2 (in ds : word16)
	trait_primitive(word16)
	trait_mem(T_4, 300)
	trait_primitive(word16)
	trait_primitive(word16)
	trait_mem(T_10, 100)
	trait_primitive(word16)
	trait_mem(T_11, 300)
	trait_primitive(word16)
	trait_primitive(word16)
	trait_mem(T_17, 102)
T_3 (in 0x0300 : word16)
	trait_primitive(word16)
	trait_mem(T_2:T_4, 0)
	trait_primitive(word16)
	trait_mem(T_2:T_11, 0)
T_4 (in Mem0[ds:0x0300:word16] : word16)
	trait_primitive(word16)
T_5 (in si1 : word16)
	trait_primitive(word16)
	trait_primitive(word16)
	trait_equal(T_4)
	trait_primitive(word16)
	trait_mem(T_2:T_8, 4)
T_6 (in 0x0004 : word16)
	trait_primitive(word16)
T_7 (in si1 + 0x0004 : word16)
	trait_primitive(word16)
T_8 (in Mem0[ds:si1 + 0x0004:word16] : word16)
	trait_primitive(word16)
T_9 (in 0x0100 : word16)
	trait_primitive(word16)
	trait_mem(T_2:T_10, 0)
T_10 (in Mem0[ds:0x0100:word16] : word16)
	trait_primitive(word16)
	trait_equal(T_8)
T_11 (in Mem0[ds:0x0300:word16] : word16)
	trait_primitive(word16)
T_12 (in si2 : word16)
	trait_primitive(word16)
	trait_primitive(word16)
	trait_equal(T_11)
	trait_primitive(word16)
	trait_mem(T_2:T_15, 4)
T_13 (in 0x0004 : word16)
	trait_primitive(word16)
T_14 (in si2 + 0x0004 : word16)
	trait_primitive(word16)
T_15 (in Mem0[ds:si2 + 0x0004:word16] : word16)
	trait_primitive(word16)
T_16 (in 0x0102 : word16)
	trait_primitive(word16)
	trait_mem(T_2:T_17, 0)
T_17 (in Mem0[ds:0x0102:word16] : word16)
	trait_primitive(word16)
	trait_equal(T_15)
