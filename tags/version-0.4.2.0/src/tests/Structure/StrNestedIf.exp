// fn0C00_0000
// Return size: 0
void fn0C00_0000(word16 ax, selector ds)
fn0C00_0000_entry:
	byte cl_13
	branch ax < 0x0000 l0C00_0012
	goto l0C00_0005
	// succ:  l0C00_0005 l0C00_0012
l0C00_0000:
l0C00_0005:
	cl_13 = 0x00
	branch ax <= 0x000C l0C00_000F
	// succ:  l0C00_000C l0C00_001C
l0C00_000C:
	ax = 0x000C
	goto l0C00_001C
	// succ:  l0C00_001C
l0C00_000F:
	goto l0C00_001C
	// succ:  l0C00_001C
l0C00_0012:
	cl_13 = 0x01
	branch ax >= 0xFFF4 l0C00_001C
	// succ:  l0C00_0019 l0C00_001C
l0C00_0019:
	ax = 0xFFF4
	// succ:  l0C00_001C
l0C00_001C:
	Mem10[ds:0x0300:word16] = ax
	Mem12[ds:0x0302:byte] = cl_13
	return
	// succ:  fn0C00_0000_exit
fn0C00_0000_exit:

void fn0C00_0000(word16 ax, selector ds)
{
	byte cl_13;
	if (ax >= 0x0000)
	{
		cl_13 = 0x00;
		if (ax > 0x000C)
			ax = 0x000C;
	}
	else
	{
		cl_13 = 0x01;
		if (ax < 0xFFF4)
			ax = 0xFFF4;
	}
	Mem10[ds:0x0300:word16] = ax;
	Mem12[ds:0x0302:byte] = cl_13;
	return;
}
===========================
