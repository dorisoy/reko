// fn0C00_0000
void fn0C00_0000(selector ds)
fn0C00_0000_entry:
	Mem39[0x0C00:0x0001:word16] = 0x0800
	Mem40[0x0800:0x5422:word16] = ds
	Mem46[0x0800:0x0066:word16] = Mem40[0x0800:0x5420:word16]
	selector es_42 = Mem39[0x0800:0x5422:selector]
	msdos_resize_memory_block(es_48, 0xFFFF, &bx_43)
	Mem47[0x0800:0x53CD:word16] = Mem39[0x0800:0x5422:word16] + bx_43
	word16 bx_49
	msdos_resize_memory_block(es_48, bx_49, &bx_56)
	Mem51[0x0800:0x0400:word16] = 0x1758
	fn0C00_0288()
	msdos_set_interrupt_vector(0x24, 0x0C000295)
	fn0C00_0262()
	fn0C00_0260()
	branch Mem51[0x0800:0x541E:word16] == 0x0000 l0C00_0062
	// succ:  l0C00_005F l0C00_0062
l0C00_0000:
l0C00_005F:
	fn0C00_028E()
	// succ:  l0C00_0062
l0C00_0062:
	fn0C00_027E()
	fn0C00_028F(0x53F4, 0x0800)
	Mem65[0x0800:0x53FE:word16] = 0x0001
	fn0C00_0261()
	Mem66[0x0800:0x53C2:word16] = 0x4AF3
	fn0C00_0283(0x5447, 0x0800)
	branch fn0C00_0271(0x0800) l0C00_008D
	// succ:  l0C00_0086 l0C00_008D
l0C00_0086:
	branch fn0C00_0267(0x0800) l0C00_0251
	// succ:  l0C00_008D l0C00_0251
l0C00_008D:		// pred: l0C00_0062 l0C00_0094 l0C00_0086
	branch Mem66[0x0800:0x81B0:word16] == 0x0000 l0C00_009B
	// succ:  l0C00_0094 l0C00_009B
l0C00_0094:		// pred: l0C00_008D
	branch Mem66[0x0800:0x5404:word16] < 0x0020 l0C00_008D
	// succ:  l0C00_009B l0C00_008D
l0C00_009B:		// pred: l0C00_008D l0C00_0094
	fn0C00_0283(0x5450, 0x0800)
	Mem77[0x0800:0x5404:word16] = 0x0000
	fn0C00_0259()
	branch Mem77[0x0800:0x53B8:word16] < 0x0004 l0C00_0251
	// succ:  l0C00_00B4 l0C00_0251
l0C00_00B4:
	word16 bx_80 = Mem77[0x0800:0x53B8:word16]
	Mem82[0x0800:0x53BE:word16] = bx_80 - 0x0001
	Mem84[0x0800:0x53C0:word16] = bx_80 - 0x0002
	fn0C00_025A(Mem84[0x0800:0x53C0:word16], 0x0800)
	selector es_86 = Mem84[0x0800:0x53C2:word16]
	word16 di_87 = 0x0000
	word16 si_91 = 0x0000
	word16 cx_93 = 0x4000
	// succ:  l0C00_00D8
l0C00_00D8:		// pred: l0C00_00B4 l0C00_00D8_rep
	branch cx_93 == 0x0000 l0C00_00D8_rep
	// succ:  l0C00_00DB l0C00_00D8_rep
l0C00_00DB:		// pred: l0C00_00D8
	fn0C00_025A(Mem97[0x0800:0x53BE:word16], 0x0800)
	selector es_106 = Mem97[0x0800:0x53C2:word16]
	word16 di_107 = 0x0000
	word16 si_111 = 0x0000
	word16 cx_113 = 0x4000
	// succ:  l0C00_00F5
l0C00_00F5:		// pred: l0C00_00DB l0C00_00F5_rep
	branch cx_113 == 0x0000 l0C00_00F5_rep
	// succ:  l0C00_00F8 l0C00_00F5_rep
l0C00_00F8:		// pred: l0C00_00F5
	Mem127[0x0800:0x7E52:word16] = Mem117[0x0800:0x53BE:word16]
	word16 ax_128 = Mem127[0x0800:0x53C2:word16]
	Mem129[0x0800:0x7E50:word16] = ax_128
	Mem130[0x0800:0x5380:word16] = ax_128
	word16 ax_132 = Mem130[0x0800:0x53B8:word16] - 0x0002
	Mem139[0x0800:0x53BC:word16] = ax_132
	fn0C00_025F()
	fn0C00_0282()
	branch Mem139[0x0800:0x54A6:word16] == 0x0000 l0C00_0144
	// succ:  l0C00_0128 l0C00_0144
l0C00_0128:		// pred: l0C00_00F8
	fn0C00_027D()
	word64 edx_eax_144 = (int32) Mem139[0x0800:0x5418:word16] *s 0x0000F000
	Mem151[0x0800:0x6FF0:ui64] = Mem139[0x0800:0x6FF0:ui64] - edx_eax_144
	ax_132 = (word16) edx_eax_144 (alias)
	// succ:  l0C00_0144
l0C00_0144:		// pred: l0C00_00F8 l0C00_0128
	fn0C00_0265()
	// succ:  l0C00_0147
l0C00_0147:		// pred: l0C00_0144 l0C00_014E
	branch Mem161[0x0800:0x81B0:word16] == 0x0000 l0C00_0155
	// succ:  l0C00_014E l0C00_0155
l0C00_014E:		// pred: l0C00_0147
	branch Mem161[0x0800:0x5404:word16] < 0x0046 l0C00_0147
	// succ:  l0C00_0155 l0C00_0147
l0C00_0155:		// pred: l0C00_0147 l0C00_014E
	fn0C00_028F(0x53E7, 0x0800)
	fn0C00_028B()
	fn0C00_027F()
	fn0C00_0280()
	fn0C00_027B()
	fn0C00_0266()
	// succ:  l0C00_016A
l0C00_016A:		// pred: l0C00_0155 l0C00_020E l0C00_024B
	branch (Mem187[0x0800:0x919E:word16] & 0x01FF) == 0x0000 l0C00_01B7
	// succ:  l0C00_0172 l0C00_01B7
l0C00_0172:		// pred: l0C00_016A
	fn0C00_0289()
	branch Mem187[0x0800:0x0480:word16] == 0x0000 l0C00_0182
	// succ:  l0C00_017C l0C00_0182
l0C00_017C:		// pred: l0C00_0172
	fn0C00_028D()
	// succ:  l0C00_0188
l0C00_0188:		// pred: l0C00_0182 l0C00_017C
	branch Mem194[0x0800:0x542C:word16] != 0x0000 l0C00_0198
	// succ:  l0C00_018F l0C00_0198
l0C00_018F:		// pred: l0C00_0188
	fn0C00_0257()
	fn0C00_0264()
	// succ:  l0C00_01A4
l0C00_01A4:		// pred: l0C00_0198 l0C00_018F
	branch Mem198[0x0800:0xC3CF:word16] == 0x0000 l0C00_01B1
	// succ:  l0C00_01AB l0C00_01B1
l0C00_01AB:		// pred: l0C00_01A4
	Mem201[0x0800:0x0412:word16] = 0x0000
	// succ:  l0C00_01B1
l0C00_01B1:		// pred: l0C00_01A4 l0C00_01AB
	Mem203[0x0800:0x5376:word16] = 0x0000
	// succ:  l0C00_01B7
l0C00_01B7:		// pred: l0C00_016A l0C00_01B1
	fn0C00_027C()
	fn0C00_0263()
	word16 v23_206 = Mem204[0x0800:0x5404:word16]
	Mem207[0x0800:0x5404:word16] = 0x0000
	word16 dx_209 = Mem207[0x0800:0x541A:word16]
	Mem211[0x0800:0x541A:word16] = ax_132
	word16 ax_212 = ax_132 - dx_209
	Mem225[0x0800:0x5408:word16] = SLICE(DPB(ax_212, (byte) (v23_206 - (word16) (ax_212 <u 0x0000)), 8, 8) *u 0x3865, word16, 16)
	branch (Mem225[0x0800:Mem225[0x0800:0x5A02:word16] + 0x0094:word16] & 0xFFFF) != 0x0000 l0C00_01FA
	// succ:  l0C00_01EC l0C00_01FA
l0C00_01EC:		// pred: l0C00_01B7
	branch (Mem225[0x0800:Mem225[0x0800:0x5BD8:word16] + 0x0094:word16] & 0xFFFF) == 0x0000 l0C00_0200
	// succ:  l0C00_01FA l0C00_0200
l0C00_01FA:		// pred: l0C00_01B7 l0C00_01EC
	Mem241[0x0800:0x5408:word16] = 0x0000
	// succ:  l0C00_0200
l0C00_0200:		// pred: l0C00_01FA l0C00_01EC
	branch (Mem244[0x0800:0x919E:word16] & 0x02FF) != 0x0000 l0C00_020E
	// succ:  l0C00_0208 l0C00_020E
l0C00_0208:		// pred: l0C00_0200
	Mem248[0x0800:0x5408:word16] = 0x0044
	// succ:  l0C00_020E
l0C00_020E:		// pred: l0C00_0200 l0C00_0208
	ax_132 = Mem249[0x0800:0x919E:word16] & 0x05FF
	branch ax_132 == 0x0400 l0C00_016A
	// succ:  l0C00_021C l0C00_016A
l0C00_021C:		// pred: l0C00_020E
	branch Mem249[0x0800:0x632E:word16] != 0x0000 l0C00_022D
	// succ:  l0C00_0223 l0C00_022D
l0C00_0223:		// pred: l0C00_021C
	branch Mem249[0x0800:0xD10E:word16] == 0x0000 l0C00_022D
	// succ:  l0C00_022A l0C00_022D
l0C00_022A:		// pred: l0C00_0223
	fn0C00_028C()
	// succ:  l0C00_022D
l0C00_022D:		// pred: l0C00_021C l0C00_0223 l0C00_022A
	fn0C00_0281()
	branch (Mem249[0x0800:0x6FCA:byte] & 0x10) == 0x00 l0C00_023D
	// succ:  l0C00_0237 l0C00_023D
l0C00_0237:		// pred: l0C00_022D
	Mem268[0x0800:0x5376:word16] = 0x0001
	// succ:  l0C00_023D
l0C00_023D:		// pred: l0C00_022D l0C00_0237
	fn0C00_028A()
	branch (Mem269[0x0800:0x0412:word16] & 0xFFFF) == 0x0000 l0C00_024B
	// succ:  l0C00_0248 l0C00_024B
l0C00_0248:		// pred: l0C00_023D
	fn0C00_0258()
	// succ:  l0C00_024B
l0C00_024B:		// pred: l0C00_023D l0C00_0248
	fn0C00_0294()
	// succ:  l0C00_016A
l0C00_0198:		// pred: l0C00_0188
	Mem197[0x0800:0x540C:word32] = 0x00000000
	fn0C00_0264()
	// succ:  l0C00_01A4
l0C00_0182:		// pred: l0C00_0172
	Mem193[0x0800:0xC3CF:word16] = 0x0000
	// succ:  l0C00_0188
l0C00_00F5_rep:		// pred: l0C00_00F5
	Mem120[es_106:di_107:word32] = Mem117[0x5D02:si_111:word32]
	cx_113 = cx_113 - 0x0001
	si_111 = si_111 + 0x0004
	di_107 = di_107 + 0x0004
	// succ:  l0C00_00F5
l0C00_00D8_rep:		// pred: l0C00_00D8
	Mem100[es_86:di_87:word32] = Mem97[0x6C34:si_91:word32]
	cx_93 = cx_93 - 0x0001
	si_91 = si_91 + 0x0004
	di_87 = di_87 + 0x0004
	// succ:  l0C00_00D8
l0C00_0251:		// pred: l0C00_009B l0C00_0086
	msdos_terminate(0x01)
	// succ:  fn0C00_0000_exit
fn0C00_0000_exit:		// pred: l0C00_0251
	// succ: 

void fn0C00_0000(selector ds)
{
	Mem34[0x0C00:0x0001:word16] = 0x0800;
	Mem35[0x0800:0x5422:word16] = ds;
	Mem39[0x0800:0x0066:word16] = Mem35[0x0800:0x5420:word16];
	selector es_42 = Mem39[0x0800:0x5422:word16];
	word16 bx_43;
	msdos_resize_memory_block(es_42, 0xFFFF, &bx_43);
	Mem47[0x0800:0x53CD:word16] = Mem39[0x0800:0x5422:word16] + bx_43;
	word16 bx_49;
	msdos_resize_memory_block(es_42, bx_43, &bx_49);
	Mem51[0x0800:0x0400:word16] = 0x1758;
	fn0C00_0288();
	msdos_set_interrupt_vector(0x24, 0x0C000295);
	fn0C00_0262();
	fn0C00_0260();
	if (Mem51[0x0800:0x541E:word16] != 0x0000)
		fn0C00_028E();
	fn0C00_027E();
	fn0C00_028F(0x53F4, 0x0800);
	Mem65[0x0800:0x53FE:word16] = 0x0001;
	fn0C00_0261();
	Mem66[0x0800:0x53C2:word16] = 0x4AF3;
	fn0C00_0283(0x5447, 0x0800);
	if (!fn0C00_0271(0x0800) && fn0C00_0267(0x0800))
	{
l0C00_0251:
		msdos_terminate(0x01);
	}
	else
	{
		do
			;
		while (Mem77[0x0800:0x81B0:word16] == 0x0000 || Mem77[0x0800:0x5404:word16] >= 0x0020);
		fn0C00_0283(0x5450, 0x0800);
		Mem92[0x0800:0x5404:word16] = 0x0000;
		fn0C00_0259();
		if (Mem92[0x0800:0x53B8:word16] >= 0x0004)
		{
			word16 bx_95 = Mem92[0x0800:0x53B8:word16];
			Mem98[0x0800:0x53BE:word16] = bx_95 - 0x0001;
			Mem101[0x0800:0x53C0:word16] = bx_95 - 0x0002;
			fn0C00_025A(Mem101[0x0800:0x53C0:word16], 0x0800);
			selector es_103 = Mem101[0x0800:0x53C2:word16];
			word16 di_87 = 0x0000;
			word16 si_91 = 0x0000;
			word16 cx_116 = 0x4000;
			while (cx_116 != 0x0000)
			{
				Mem121[es_103:di_104:word32] = Mem108[ds_109:si_113:word32];
				si_113 = si_113 + 0x0004;
				di_104 = di_104 + 0x0004;
				cx_116 = cx_116 - 0x0001;
			}
			fn0C00_025A(Mem97[0x0800:0x53BE:word16], 0x0800);
			selector es_106 = Mem97[0x0800:0x53C2:word16];
			word16 di_104 = 0x0000;
			word16 si_113 = 0x0000;
			word16 cx_116 = 0x4000;
			while (cx_116 != 0x0000)
			{
				Mem121[es_103:di_104:word32] = Mem108[ds_109:si_113:word32];
				si_113 = si_113 + 0x0004;
				di_104 = di_104 + 0x0004;
				cx_116 = cx_116 - 0x0001;
			}
			Mem126[0x0800:0x7E52:word16] = Mem117[0x0800:0x53BE:word16];
			word16 ax_128 = Mem127[0x0800:0x53C2:word16];
			Mem129[0x0800:0x7E50:word16] = ax_128;
			Mem130[0x0800:0x5380:word16] = ax_128;
			word16 ax_132 = Mem130[0x0800:0x53B8:word16] - 0x0002;
			Mem139[0x0800:0x53BC:word16] = ax_132;
			fn0C00_025F();
			fn0C00_0282();
			if (Mem139[0x0800:0x54A6:word16] != 0x0000)
			{
				fn0C00_027D();
				word64 edx_290 = (int32) Mem171[0x0800:0x5418:word16] *s 0x0000F000;
				Mem151[0x0800:0x6FF0:ui64] = Mem171[0x0800:0x6FF0:ui64] - edx_eax_144;
				ax_132 = (word16) edx_eax_144;
			}
			fn0C00_0265();
			do
				;
			while (Mem171[0x0800:0x81B0:word16] == 0x0000 || Mem171[0x0800:0x5404:word16] >= 0x0046);
			fn0C00_028F(0x53E7, 0x0800);
			fn0C00_028B();
			fn0C00_027F();
			fn0C00_0280();
			fn0C00_027B();
			fn0C00_0266();
			while (true)
			{
				if ((Mem187[0x0800:0x919E:word16] & 0x01FF) != 0x0000)
				{
					fn0C00_0289();
					if (Mem187[0x0800:0x0480:word16] != 0x0000)
						fn0C00_028D();
					else
						Mem193[0x0800:0xC3CF:word16] = 0x0000;
					if (Mem194[0x0800:0x542C:word16] == 0x0000)
					{
						fn0C00_0257();
						fn0C00_0264();
					}
					else
					{
						Mem197[0x0800:0x540C:word32] = 0x00000000;
						fn0C00_0264();
					}
					if (Mem198[0x0800:0xC3CF:word16] != 0x0000)
						Mem201[0x0800:0x0412:word16] = 0x0000;
					Mem203[0x0800:0x5376:word16] = 0x0000;
				}
				fn0C00_027C();
				fn0C00_0263();
				word16 v23_206 = Mem204[0x0800:0x5404:word16];
				Mem207[0x0800:0x5404:word16] = 0x0000;
				word16 dx_209 = Mem207[0x0800:0x541A:word16];
				Mem211[0x0800:0x541A:word16] = ax_132;
				word16 ax_212 = ax_132 - dx_209;
				Mem225[0x0800:0x5408:word16] = SLICE(DPB(ax_212, (byte) (v23_206 - (word16) (ax_212 <u 0x0000)), 8, 8) *u 0x3865, word16, 16);
				if ((Mem225[0x0800:Mem225[0x0800:0x5A02:word16] + 0x0094:word16] & 0xFFFF) != 0x0000 || (Mem225[0x0800:Mem225[0x0800:0x5BD8:word16] + 0x0094:word16] & 0xFFFF) != 0x0000)
					Mem241[0x0800:0x5408:word16] = 0x0000;
				if ((Mem244[0x0800:0x919E:word16] & 0x02FF) == 0x0000)
					Mem248[0x0800:0x5408:word16] = 0x0044;
				ax_132 = Mem249[0x0800:0x919E:word16] & 0x05FF;
				if (ax_132 == 0x0400)
					continue;
				if (Mem249[0x0800:0x632E:word16] == 0x0000 && Mem249[0x0800:0xD10E:word16] != 0x0000)
					fn0C00_028C();
				fn0C00_0281();
				if ((Mem249[0x0800:0x6FCA:byte] & 0x10) != 0x00)
					Mem268[0x0800:0x5376:word16] = 0x0001;
				fn0C00_028A();
				if ((Mem269[0x0800:0x0412:word16] & 0xFFFF) != 0x0000)
					fn0C00_0258();
				fn0C00_0294();
			}
		}
		else
			goto l0C00_0251;
	}
}
===========================
// fn0C00_0257
void fn0C00_0257()
fn0C00_0257_entry:		// pred:
	// succ:  l0C00_0257
l0C00_0257:		// pred: fn0C00_0257_entry
	return
	// succ:  fn0C00_0257_exit
fn0C00_0257_exit:		// pred: l0C00_0257
	// succ: 

void fn0C00_0257()
{
	return;
}
===========================
// fn0C00_0258
void fn0C00_0258()
fn0C00_0258_entry:		// pred:
	// succ:  l0C00_0258
l0C00_0258:		// pred: fn0C00_0258_entry
	return
	// succ:  fn0C00_0258_exit
fn0C00_0258_exit:		// pred: l0C00_0258
	// succ: 

void fn0C00_0258()
{
	return;
}
===========================
// fn0C00_0259
void fn0C00_0259()
fn0C00_0259_entry:		// pred:
	// succ:  l0C00_0259
l0C00_0259:		// pred: fn0C00_0259_entry
	return
	// succ:  fn0C00_0259_exit
fn0C00_0259_exit:		// pred: l0C00_0259
	// succ: 

void fn0C00_0259()
{
	return;
}
===========================
// fn0C00_025A
void fn0C00_025A(word16 bx, selector ds)
fn0C00_025A_entry:		// pred:
	// succ:  l0C00_025A
l0C00_025A:		// pred: fn0C00_025A_entry
	Mem4[ds:0x0540:word16] = bx
	return
	// succ:  fn0C00_025A_exit
fn0C00_025A_exit:		// pred: l0C00_025A
	// succ: 

void fn0C00_025A(word16 bx, selector ds)
{
	Mem4[ds:0x0540:word16] = bx;
	return;
}
===========================
// fn0C00_025F
void fn0C00_025F()
fn0C00_025F_entry:		// pred:
	// succ:  l0C00_025F
l0C00_025F:		// pred: fn0C00_025F_entry
	return
	// succ:  fn0C00_025F_exit
fn0C00_025F_exit:		// pred: l0C00_025F
	// succ: 

void fn0C00_025F()
{
	return;
}
===========================
// fn0C00_0260
void fn0C00_0260()
fn0C00_0260_entry:		// pred:
	// succ:  l0C00_0260
l0C00_0260:		// pred: fn0C00_0260_entry
	return
	// succ:  fn0C00_0260_exit
fn0C00_0260_exit:		// pred: l0C00_0260
	// succ: 

void fn0C00_0260()
{
	return;
}
===========================
// fn0C00_0261
void fn0C00_0261()
fn0C00_0261_entry:		// pred:
	// succ:  l0C00_0261
l0C00_0261:		// pred: fn0C00_0261_entry
	return
	// succ:  fn0C00_0261_exit
fn0C00_0261_exit:		// pred: l0C00_0261
	// succ: 

void fn0C00_0261()
{
	return;
}
===========================
// fn0C00_0262
void fn0C00_0262()
fn0C00_0262_entry:		// pred:
	// succ:  l0C00_0262
l0C00_0262:		// pred: fn0C00_0262_entry
	return
	// succ:  fn0C00_0262_exit
fn0C00_0262_exit:		// pred: l0C00_0262
	// succ: 

void fn0C00_0262()
{
	return;
}
===========================
// fn0C00_0263
void fn0C00_0263()
fn0C00_0263_entry:		// pred:
	// succ:  l0C00_0263
l0C00_0263:		// pred: fn0C00_0263_entry
	return
	// succ:  fn0C00_0263_exit
fn0C00_0263_exit:		// pred: l0C00_0263
	// succ: 

void fn0C00_0263()
{
	return;
}
===========================
// fn0C00_0264
void fn0C00_0264()
fn0C00_0264_entry:		// pred:
	// succ:  l0C00_0264
l0C00_0264:		// pred: fn0C00_0264_entry
	return
	// succ:  fn0C00_0264_exit
fn0C00_0264_exit:		// pred: l0C00_0264
	// succ: 

void fn0C00_0264()
{
	return;
}
===========================
// fn0C00_0265
void fn0C00_0265()
fn0C00_0265_entry:		// pred:
	// succ:  l0C00_0265
l0C00_0265:		// pred: fn0C00_0265_entry
	return
	// succ:  fn0C00_0265_exit
fn0C00_0265_exit:		// pred: l0C00_0265
	// succ: 

void fn0C00_0265()
{
	return;
}
===========================
// fn0C00_0266
void fn0C00_0266()
fn0C00_0266_entry:		// pred:
	// succ:  l0C00_0266
l0C00_0266:		// pred: fn0C00_0266_entry
	return
	// succ:  fn0C00_0266_exit
fn0C00_0266_exit:		// pred: l0C00_0266
	// succ: 

void fn0C00_0266()
{
	return;
}
===========================
// fn0C00_0267
bool fn0C00_0267(selector ds)
fn0C00_0267_entry:		// pred:
	// succ:  l0C00_0267
l0C00_0267:		// pred: fn0C00_0267_entry
	return cond(Mem0[ds:0x1234:word16] - Mem0[ds:0x1236:word16])
	// succ:  fn0C00_0267_exit
fn0C00_0267_exit:		// pred: l0C00_0267
	// succ: 

bool fn0C00_0267(selector ds)
{
	return cond(Mem0[ds:0x1234:word16] - Mem0[ds:0x1236:word16]);
}
===========================
// fn0C00_0271
bool fn0C00_0271(selector ds)
fn0C00_0271_entry:		// pred:
	// succ:  l0C00_0271
l0C00_0271:		// pred: fn0C00_0271_entry
	return cond(Mem0[ds:0x1234:word16] - Mem0[ds:0x1236:word16])
	// succ:  fn0C00_0271_exit
fn0C00_0271_exit:		// pred: l0C00_0271
	// succ: 

bool fn0C00_0271(selector ds)
{
	return cond(Mem0[ds:0x1234:word16] - Mem0[ds:0x1236:word16]);
}
===========================
// fn0C00_027B
void fn0C00_027B()
fn0C00_027B_entry:		// pred:
	// succ:  l0C00_027B
l0C00_027B:		// pred: fn0C00_027B_entry
	return
	// succ:  fn0C00_027B_exit
fn0C00_027B_exit:		// pred: l0C00_027B
	// succ: 

void fn0C00_027B()
{
	return;
}
===========================
// fn0C00_027C
void fn0C00_027C()
fn0C00_027C_entry:		// pred:
	// succ:  l0C00_027C
l0C00_027C:		// pred: fn0C00_027C_entry
	return
	// succ:  fn0C00_027C_exit
fn0C00_027C_exit:		// pred: l0C00_027C
	// succ: 

void fn0C00_027C()
{
	return;
}
===========================
// fn0C00_027D
void fn0C00_027D()
fn0C00_027D_entry:		// pred:
	// succ:  l0C00_027D
l0C00_027D:		// pred: fn0C00_027D_entry
	return
	// succ:  fn0C00_027D_exit
fn0C00_027D_exit:		// pred: l0C00_027D
	// succ: 

void fn0C00_027D()
{
	return;
}
===========================
// fn0C00_027E
void fn0C00_027E()
fn0C00_027E_entry:		// pred:
	// succ:  l0C00_027E
l0C00_027E:		// pred: fn0C00_027E_entry
	return
	// succ:  fn0C00_027E_exit
fn0C00_027E_exit:		// pred: l0C00_027E
	// succ: 

void fn0C00_027E()
{
	return;
}
===========================
// fn0C00_027F
void fn0C00_027F()
fn0C00_027F_entry:		// pred:
	// succ:  l0C00_027F
l0C00_027F:		// pred: fn0C00_027F_entry
	return
	// succ:  fn0C00_027F_exit
fn0C00_027F_exit:		// pred: l0C00_027F
	// succ: 

void fn0C00_027F()
{
	return;
}
===========================
// fn0C00_0280
void fn0C00_0280()
fn0C00_0280_entry:		// pred:
	// succ:  l0C00_0280
l0C00_0280:		// pred: fn0C00_0280_entry
	return
	// succ:  fn0C00_0280_exit
fn0C00_0280_exit:		// pred: l0C00_0280
	// succ: 

void fn0C00_0280()
{
	return;
}
===========================
// fn0C00_0281
void fn0C00_0281()
fn0C00_0281_entry:		// pred:
	// succ:  l0C00_0281
l0C00_0281:		// pred: fn0C00_0281_entry
	return
	// succ:  fn0C00_0281_exit
fn0C00_0281_exit:		// pred: l0C00_0281
	// succ: 

void fn0C00_0281()
{
	return;
}
===========================
// fn0C00_0282
void fn0C00_0282()
fn0C00_0282_entry:		// pred:
	// succ:  l0C00_0282
l0C00_0282:		// pred: fn0C00_0282_entry
	return
	// succ:  fn0C00_0282_exit
fn0C00_0282_exit:		// pred: l0C00_0282
	// succ: 

void fn0C00_0282()
{
	return;
}
===========================
// fn0C00_0283
void fn0C00_0283(word16 si, selector ds)
fn0C00_0283_entry:		// pred:
	// succ:  l0C00_0283
l0C00_0283:		// pred: fn0C00_0283_entry
	Mem4[ds:0x4AFB:word16] = si
	return
	// succ:  fn0C00_0283_exit
fn0C00_0283_exit:		// pred: l0C00_0283
	// succ: 

void fn0C00_0283(word16 si, selector ds)
{
	Mem4[ds:0x4AFB:word16] = si;
	return;
}
===========================
// fn0C00_0288
void fn0C00_0288()
fn0C00_0288_entry:		// pred:
	// succ:  l0C00_0288
l0C00_0288:		// pred: fn0C00_0288_entry
	return
	// succ:  fn0C00_0288_exit
fn0C00_0288_exit:		// pred: l0C00_0288
	// succ: 

void fn0C00_0288()
{
	return;
}
===========================
// fn0C00_0289
void fn0C00_0289()
fn0C00_0289_entry:		// pred:
	// succ:  l0C00_0289
l0C00_0289:		// pred: fn0C00_0289_entry
	return
	// succ:  fn0C00_0289_exit
fn0C00_0289_exit:		// pred: l0C00_0289
	// succ: 

void fn0C00_0289()
{
	return;
}
===========================
// fn0C00_028A
void fn0C00_028A()
fn0C00_028A_entry:		// pred:
	// succ:  l0C00_028A
l0C00_028A:		// pred: fn0C00_028A_entry
	return
	// succ:  fn0C00_028A_exit
fn0C00_028A_exit:		// pred: l0C00_028A
	// succ: 

void fn0C00_028A()
{
	return;
}
===========================
// fn0C00_028B
void fn0C00_028B()
fn0C00_028B_entry:		// pred:
	// succ:  l0C00_028B
l0C00_028B:		// pred: fn0C00_028B_entry
	return
	// succ:  fn0C00_028B_exit
fn0C00_028B_exit:		// pred: l0C00_028B
	// succ: 

void fn0C00_028B()
{
	return;
}
===========================
// fn0C00_028C
void fn0C00_028C()
fn0C00_028C_entry:		// pred:
	// succ:  l0C00_028C
l0C00_028C:		// pred: fn0C00_028C_entry
	return
	// succ:  fn0C00_028C_exit
fn0C00_028C_exit:		// pred: l0C00_028C
	// succ: 

void fn0C00_028C()
{
	return;
}
===========================
// fn0C00_028D
void fn0C00_028D()
fn0C00_028D_entry:		// pred:
	// succ:  l0C00_028D
l0C00_028D:		// pred: fn0C00_028D_entry
	return
	// succ:  fn0C00_028D_exit
fn0C00_028D_exit:		// pred: l0C00_028D
	// succ: 

void fn0C00_028D()
{
	return;
}
===========================
// fn0C00_028E
void fn0C00_028E()
fn0C00_028E_entry:		// pred:
	// succ:  l0C00_028E
l0C00_028E:		// pred: fn0C00_028E_entry
	return
	// succ:  fn0C00_028E_exit
fn0C00_028E_exit:		// pred: l0C00_028E
	// succ: 

void fn0C00_028E()
{
	return;
}
===========================
// fn0C00_028F
void fn0C00_028F(word16 dx, selector ds)
fn0C00_028F_entry:		// pred:
	// succ:  l0C00_028F
l0C00_028F:		// pred: fn0C00_028F_entry
	Mem4[ds:0xC54C:word16] = dx
	return
	// succ:  fn0C00_028F_exit
fn0C00_028F_exit:		// pred: l0C00_028F
	// succ: 

void fn0C00_028F(word16 dx, selector ds)
{
	Mem4[ds:0xC54C:word16] = dx;
	return;
}
===========================
// fn0C00_0294
void fn0C00_0294()
fn0C00_0294_entry:		// pred:
	// succ:  l0C00_0294
l0C00_0294:		// pred: fn0C00_0294_entry
	return
	// succ:  fn0C00_0294_exit
fn0C00_0294_exit:		// pred: l0C00_0294
	// succ: 

void fn0C00_0294()
{
	return;
}
===========================
// fn0C00_0295
void fn0C00_0295()
fn0C00_0295_entry:		// pred:
	// succ:  l0C00_0295
l0C00_0295:		// pred: fn0C00_0295_entry
	return
	// succ:  fn0C00_0295_exit
fn0C00_0295_exit:		// pred: l0C00_0295
	// succ: 

void fn0C00_0295()
{
	return;
}
===========================
