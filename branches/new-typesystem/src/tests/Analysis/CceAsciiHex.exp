Mem0: Mem0:Global memory
fp: fp:Temporary
C: C:Flags
al: al:Register al, def: {def al}, uses: {C_6 = fn0C00_000A(al, &al_5)}
ds: ds:Register ds, def: {def ds}, uses: {store(Mem7[ds:0x0300:byte]) = al_5}
al_5: orig: al, def: {C_6 = fn0C00_000A(al, &al_5)}, uses: {store(Mem7[ds:0x0300:byte]) = al_5}
C_6: orig: C, def: {C_6 = fn0C00_000A(al, &al_5)}, uses: {branch C_6}
Mem7: orig: Mem0, def: {store(Mem7[ds:0x0300:byte]) = al_5}
Mem8: orig: Mem0
// fn0C00_0000
void fn0C00_0000(byte al, segment ds)
fn0C00_0000_entry:		// block 0, pred:
	def al
	def ds
	// succ:  1
l0C00_0000:		// block 1, pred: 0
	C_6 = fn0C00_000A(al, &al_5)
	branch C_6
	// succ:  2 3
l0C00_0005:		// block 2, pred: 1
	store(Mem7[ds:0x0300:byte]) = al_5
	// succ:  3
l0C00_0009:		// block 3, pred: 2 1
	return
	// succ:  4
fn0C00_0000_exit:		// block 4, pred: 3
	// succ: 

Mem0: Mem0:Global memory
fp: fp:Temporary
al: al:Register al, def: {def al}, uses: {al_20 = al - 0x30}{al_38 = PHI(al_28, al)}{branch al <u 0x30}{branch al <=u 0x39}{branch al <u 0x41}{branch al <=u 0x46}{branch al <u 0x61}{branch al >u 0x66}
SCZO: SCZO:Flags
C: C:Flags
CZ: CZ:Flags
alOut: alOut:Out:Register al
SCZO_7: orig: SCZO
C_8: orig: C
SCZO_9: orig: SCZO
CZ_10: orig: CZ
SCZO_11: orig: SCZO
C_12: orig: C
SCZO_13: orig: SCZO
CZ_14: orig: CZ
SCZO_15: orig: SCZO
C_16: orig: C
SCZO_17: orig: SCZO
CZ_18: orig: CZ
CZ_19: orig: CZ
al_20: orig: al, def: {al_20 = al - 0x30}, uses: {al_28 = PHI(al_26, al_23, al_20)}{al_23 = al_20 - 0x07}{branch al_20 <u 0x0A}
SCZO_21: orig: SCZO
C_22: orig: C
al_23: orig: al, def: {al_23 = al_20 - 0x07}, uses: {al_28 = PHI(al_26, al_23, al_20)}{al_26 = al_23 - 0x20}{branch al_23 <u 0x10}
SCZO_24: orig: SCZO
C_25: orig: C
al_26: orig: al, def: {al_26 = al_23 - 0x20}, uses: {al_28 = PHI(al_26, al_23, al_20)}
SCZO_27: orig: SCZO
al_28: orig: al, def: {al_28 = PHI(al_26, al_23, al_20)}, uses: {al_38 = PHI(al_28, al)}
C_29: orig: C, def: {C_29 = false}, uses: {return C_29}
SCZO_30: orig: SCZO
CZ_31: orig: CZ
C_32: orig: C, def: {C_32 = true}, uses: {return C_32}
SCZO_33: orig: SCZO
CZ_34: orig: CZ
CZ_35: orig: CZ
C_36: orig: C
SCZO_37: orig: SCZO
al_38: orig: al, def: {al_38 = PHI(al_28, al)}, uses: {use al_38 (=> alOut)}
// fn0C00_000A
byte fn0C00_000A(byte al, ptr0 alOut)
fn0C00_000A_entry:		// block 0, pred:
	def al
	// succ:  1
l0C00_000A:		// block 1, pred: 0
	branch al <u 0x30
	// succ:  2 7
l0C00_000E:		// block 2, pred: 1
	branch al <=u 0x39
	// succ:  3 8
l0C00_0012:		// block 3, pred: 2
	branch al <u 0x41
	// succ:  4 7
l0C00_0016:		// block 4, pred: 3
	branch al <=u 0x46
	// succ:  5 8
l0C00_001A:		// block 5, pred: 4
	branch al <u 0x61
	// succ:  6 7
l0C00_001E:		// block 6, pred: 5
	branch al >u 0x66
	// succ:  8 7
l0C00_0032:		// block 7, pred: 6 5 3 1
	C_32 = true
	return C_32
	// succ:  12
l0C00_0022:		// block 8, pred: 6 4 2
	al_20 = al - 0x30
	branch al_20 <u 0x0A
	// succ:  9 11
l0C00_0028:		// block 9, pred: 8
	al_23 = al_20 - 0x07
	branch al_23 <u 0x10
	// succ:  10 11
l0C00_002E:		// block 10, pred: 9
	al_26 = al_23 - 0x20
	// succ:  11
l0C00_0030:		// block 11, pred: 10 9 8
	al_28 = PHI(al_26, al_23, al_20)
	C_29 = false
	return C_29
	// succ:  12
fn0C00_000A_exit:		// block 12, pred: 11 7
	al_38 = PHI(al_28, al)
	use al_38 (=> alOut)
	// succ: 

