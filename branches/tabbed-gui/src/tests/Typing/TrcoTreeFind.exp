// TreeFindMock
// Return size: 0
void TreeFindMock()
TreeFindMock_entry:
	// succ:  l0_seek
l0_seek:
	branch t == 0x00000000 l5_found
	// succ:  l1 l5_found
l1:
	word32 vv_7 = Mem0[t + 0x00000000:word32]
	branch v == vv_7 l5_found
	// succ:  l2 l5_found
l2:
	branch v < vv_7 l4_lt
	// succ:  l3 l4_lt
l3:
	t = Mem0[t + 0x00000008:word32]
	goto l0_seek
	// succ:  l0_seek
l4_lt:
	t = Mem0[t + 0x00000004:word32]
	// succ:  l5_found
l5_found:
	return t
	// succ:  TreeFindMock_exit
TreeFindMock_exit:

globals_t (in globals : (ptr (struct "Globals")))
	trait_primitive((ptr (struct "Globals")))
T_2 (in t : word32)
	trait_primitive(word32)
	trait_equal(T_3)
	trait_primitive(word32)
	trait_primitive(word32)
	trait_mem(T_8, 0)
	trait_primitive(word32)
	trait_mem(T_14, 4)
	trait_primitive(word32)
	trait_primitive(word32)
	trait_equal(T_14)
	trait_primitive(word32)
	trait_mem(T_17, 8)
	trait_primitive(word32)
	trait_primitive(word32)
	trait_equal(T_17)
T_3 (in 0x00000000 : word32)
	trait_primitive(word32)
T_4 (in t == 0x00000000 : bool)
	trait_primitive(bool)
T_5 (in vv_7 : word32)
	trait_primitive(word32)
	trait_equal(T_8)
	trait_primitive(word32)
	trait_primitive(word32)
	trait_primitive(int32)
T_6 (in 0x00000000 : word32)
	trait_primitive(word32)
T_7 (in t + 0x00000000 : word32)
	trait_primitive(word32)
T_8 (in Mem0[t + 0x00000000:word32] : word32)
	trait_primitive(word32)
T_9 (in v : word32)
	trait_primitive(word32)
	trait_equal(T_5)
	trait_primitive(word32)
	trait_equal(T_5)
	trait_primitive(int32)
T_10 (in v == vv_7 : bool)
	trait_primitive(bool)
T_11 (in v < vv_7 : bool)
	trait_primitive(bool)
T_12 (in 0x00000004 : word32)
	trait_primitive(word32)
T_13 (in t + 0x00000004 : word32)
	trait_primitive(word32)
T_14 (in Mem0[t + 0x00000004:word32] : word32)
	trait_primitive(word32)
T_15 (in 0x00000008 : word32)
	trait_primitive(word32)
T_16 (in t + 0x00000008 : word32)
	trait_primitive(word32)
T_17 (in Mem0[t + 0x00000008:word32] : word32)
	trait_primitive(word32)
