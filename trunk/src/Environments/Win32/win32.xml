<?xml version="1.0" encoding="utf-8"?>
<library xmlns="http://schemata.jklnet.org/Decompiler">
  typedef unsigned long ULONG;
  typedef ULONG *PULONG;
  typedef unsigned short USHORT;
  typedef USHORT *PUSHORT;
  typedef unsigned char UCHAR;
  typedef UCHAR *PUCHAR;
  typedef char *PSZ;

  typedef unsigned long       DWORD;
  typedef int                 BOOL;
  typedef unsigned char       BYTE;
  typedef unsigned short      WORD;
  typedef float               FLOAT;
  typedef FLOAT               *PFLOAT;
  typedef BOOL            *PBOOL;
  typedef BOOL             *LPBOOL;
  typedef BYTE            *PBYTE;
  typedef BYTE             *LPBYTE;
  typedef int             *PINT;
  typedef int              *LPINT;
  typedef WORD            *PWORD;
  typedef WORD             *LPWORD;
  typedef long             *LPLONG;
  typedef DWORD           *PDWORD;
  typedef DWORD            *LPDWORD;
  typedef void             *LPVOID;
  typedef const void       *LPCVOID;

  typedef int                 INT;
  typedef unsigned int        UINT;
  typedef unsigned int        *PUINT;
  typedef     char* ValidCompNameA;
  typedef     unsigned short* ValidCompNameW;
  typedef     const unsigned short* ConstValidCompNameW;
  typedef      char* SAL_ValidCompNameT;
  typedef     const  char* SAL_ConstValidCompNameT;
  typedef unsigned long POINTER_64_INT;
  typedef signed char         INT8, *PINT8;
  typedef signed short        INT16, *PINT16;
  typedef signed int          INT32, *PINT32;
  typedef signed __int64      INT64, *PINT64;
  typedef unsigned char       UINT8, *PUINT8;
  typedef unsigned short      UINT16, *PUINT16;
  typedef unsigned int        UINT32, *PUINT32;
  typedef unsigned __int64    UINT64, *PUINT64;
  typedef signed int LONG32, *PLONG32;
  typedef unsigned int ULONG32, *PULONG32;
  typedef unsigned int DWORD32, *PDWORD32;

  typedef __w64 int INT_PTR, *PINT_PTR;
  typedef __w64 unsigned int UINT_PTR, *PUINT_PTR;

  typedef __w64 long LONG_PTR, *PLONG_PTR;
  typedef __w64 unsigned long ULONG_PTR, *PULONG_PTR;



  typedef unsigned short UHALF_PTR, *PUHALF_PTR;
  typedef short HALF_PTR, *PHALF_PTR;
  typedef __w64 long SHANDLE_PTR;
  typedef __w64 unsigned long HANDLE_PTR;
  __inline
  void * __ptr64
  PtrToPtr64(
  const void *p
  )
  {
  return((void * __ptr64) (unsigned __int64) (ULONG_PTR)p );
  }

  __inline
  void *
  Ptr64ToPtr(
  const void * __ptr64 p
  )
  {
  return((void *) (ULONG_PTR) (unsigned __int64) p);
  }

  __inline
  void * __ptr64
  HandleToHandle64(
  const void *h
  )
  {
  return((void * __ptr64)(__int64)(LONG_PTR)h );
  }

  __inline
  void *
  Handle64ToHandle(
  const void * __ptr64 h
  )
  {
  return((void *) (ULONG_PTR) (unsigned __int64) h );
  }
  typedef ULONG_PTR SIZE_T, *PSIZE_T;
  typedef LONG_PTR SSIZE_T, *PSSIZE_T;
  typedef ULONG_PTR DWORD_PTR, *PDWORD_PTR;
  typedef __int64 LONG64, *PLONG64;

  typedef unsigned __int64 ULONG64, *PULONG64;
  typedef unsigned __int64 DWORD64, *PDWORD64;
  typedef ULONG_PTR KAFFINITY;
  typedef KAFFINITY *PKAFFINITY;
  typedef void *PVOID;
  typedef void * __ptr64 PVOID64;

  typedef char CHAR;
  typedef short SHORT;
  typedef long LONG;

  typedef int INT;
  typedef wchar_t WCHAR;
  typedef WCHAR *PWCHAR, *LPWCH, *PWCH;
  typedef const WCHAR *LPCWCH, *PCWCH;
  typedef  WCHAR *NWPSTR, *LPWSTR, *PWSTR;
  typedef  PWSTR *PZPWSTR;
  typedef  const PWSTR *PCZPWSTR;
  typedef  WCHAR  *LPUWSTR, *PUWSTR;
  typedef  const WCHAR *LPCWSTR, *PCWSTR;
  typedef  PCWSTR *PZPCWSTR;
  typedef  const WCHAR  *LPCUWSTR, *PCUWSTR;

  typedef const WCHAR *LPCWCHAR, *PCWCHAR;
  typedef const WCHAR  *LPCUWCHAR, *PCUWCHAR;
  typedef unsigned long UCSCHAR;
  typedef UCSCHAR *PUCSCHAR;
  typedef const UCSCHAR *PCUCSCHAR;

  typedef UCSCHAR *PUCSSTR;
  typedef UCSCHAR  *PUUCSSTR;

  typedef const UCSCHAR *PCUCSSTR;
  typedef const UCSCHAR  *PCUUCSSTR;

  typedef UCSCHAR  *PUUCSCHAR;
  typedef const UCSCHAR  *PCUUCSCHAR;
  typedef CHAR *PCHAR, *LPCH, *PCH;
  typedef const CHAR *LPCCH, *PCCH;

  typedef  CHAR *NPSTR, *LPSTR, *PSTR;
  typedef  PSTR *PZPSTR;
  typedef  const PSTR *PCZPSTR;
  typedef  const CHAR *LPCSTR, *PCSTR;
  typedef  PCSTR *PZPCSTR;
  typedef char TCHAR, *PTCHAR;
  typedef unsigned char TBYTE , *PTBYTE ;
  typedef LPCH LPTCH, PTCH;
  typedef LPSTR PTSTR, LPTSTR, PUTSTR, LPUTSTR;
  typedef LPCSTR PCTSTR, LPCTSTR, PCUTSTR, LPCUTSTR;

  typedef SHORT *PSHORT;
  typedef LONG *PLONG;
  typedef void *HANDLE;
  typedef HANDLE *PHANDLE;
  typedef BYTE   FCHAR;
  typedef WORD   FSHORT;
  typedef DWORD  FLONG;

  typedef  long HRESULT;

  typedef char CCHAR;
  typedef DWORD LCID;
  typedef PDWORD PLCID;
  typedef WORD   LANGID;

<struct name="_FLOAT128">
<field name="LowPart">__int64</field>
<field name="HighPart">__int64</field>
</struct>
<typedef name="FLOAT128">_FLOAT128</typedef>
  typedef FLOAT128 *PFLOAT128;
  typedef __int64 LONGLONG;
  typedef unsigned __int64 ULONGLONG;
  typedef LONGLONG *PLONGLONG;
  typedef ULONGLONG *PULONGLONG;
  typedef LONGLONG USN;

  typedef union _LARGE_INTEGER {
 <struct>
  <field name="LowPart">DWORD</field>
  <field name="HighPart">LONG</field>
</struct>
  <struct>
    <field name="LowPart">DWORD</field>
    <field name="HighPart">LONG</field>
  </struct> u;

  LONGLONG QuadPart;
  } LARGE_INTEGER;

  typedef LARGE_INTEGER *PLARGE_INTEGER;

  typedef union _ULARGE_INTEGER {
<struct>
  <field name="LowPart">DWORD</field>
  <field name="HighPart">DWORD</field>
</struct>
<struct>
<field name="LowPart">DWORD</field>
<field name="HighPart">DWORD</field>
<field name="u">}</field>

  ULONGLONG QuadPart;
  } ULARGE_INTEGER;

  typedef ULARGE_INTEGER *PULARGE_INTEGER;

<struct name="_LUID">
<field name="LowPart">DWORD</field>
<field name="HighPart">LONG</field>
</struct>
<typedefprev id="LUID"/>
<typedefptrprev id="PLUID"/>
  typedef ULONGLONG  DWORDLONG;
  typedef DWORDLONG *PDWORDLONG;

<function name="Int64ShllMod32" ret="ULONGLONG" convention="__stdcall">
<arg name="Value">ULONGLONG</arg>
<arg name="ShiftCount">DWORD</arg>
</function>

<function name="Int64ShraMod32" ret="LONGLONG" convention="__stdcall">
<arg name="Value">LONGLONG</arg>
<arg name="ShiftCount">DWORD</arg>
</function>

<function name="Int64ShrlMod32" ret="ULONGLONG" convention="__stdcall">
<arg name="Value">ULONGLONG</arg>
<arg name="ShiftCount">DWORD</arg>
</function>
  #pragma warning(push)

  #pragma warning(disable:4035 4793)

  __inline ULONGLONG
  __stdcall
  Int64ShllMod32 (
  ULONGLONG Value,
  DWORD ShiftCount
  )
  {
  __asm    {
  mov     ecx, ShiftCount
  mov     eax, dword ptr [Value]
  mov     edx, dword ptr [Value+4]
  shld    edx, eax, cl
  shl     eax, cl
  }
  }

  __inline LONGLONG
  __stdcall
  Int64ShraMod32 (
  LONGLONG Value,
  DWORD ShiftCount
  )
  {
  __asm {
  mov     ecx, ShiftCount
  mov     eax, dword ptr [Value]
  mov     edx, dword ptr [Value+4]
  shrd    eax, edx, cl
  sar     edx, cl
  }
  }

  __inline ULONGLONG
  __stdcall
  Int64ShrlMod32 (
  ULONGLONG Value,
  DWORD ShiftCount
  )
  {
  __asm    {
  mov     ecx, ShiftCount
  mov     eax, dword ptr [Value]
  mov     edx, dword ptr [Value+4]
  shrd    eax, edx, cl
  shr     edx, cl
  }
  }
  #pragma warning(pop)

<function name="_rotl" ret="unsigned int" convention="__cdecl">
<arg name="Value">unsigned int</arg>
<arg name="Shift">int</arg>
</function>

<function name="_rotl64" ret="unsigned __int64" convention="__cdecl">
<arg name="Value">unsigned __int64</arg>
<arg name="Shift">int</arg>
</function>
<function name="_rotr" ret="unsigned int" convention="__cdecl">
<arg name="Value">unsigned int</arg>
<arg name="Shift">int</arg>
</function>

<function name="_rotr64" ret="unsigned __int64" convention="__cdecl">
<arg name="Value">unsigned __int64</arg>
<arg name="Shift">int</arg>
</function>

  #pragma intrinsic(_rotl)
  #pragma intrinsic(_rotl64)
  #pragma intrinsic(_rotr)
  #pragma intrinsic(_rotr64)
  typedef BYTE  BOOLEAN;
  typedef BOOLEAN *PBOOLEAN;
<struct name="_LIST_ENTRY">
  struct _LIST_ENTRY *Flink;
  struct _LIST_ENTRY *Blink;
  } LIST_ENTRY, *PLIST_ENTRY, * PRLIST_ENTRY;

<struct name="_SINGLE_LIST_ENTRY">
  struct _SINGLE_LIST_ENTRY *Next;
  } SINGLE_LIST_ENTRY, *PSINGLE_LIST_ENTRY;
<struct name="LIST_ENTRY32">
<field name="Flink">DWORD</field>
<field name="Blink">DWORD</field>
<field name="LIST_ENTRY32">}</field>
  typedef LIST_ENTRY32 *PLIST_ENTRY32;

<struct name="LIST_ENTRY64">
<field name="Flink">ULONGLONG</field>
<field name="Blink">ULONGLONG</field>
<field name="LIST_ENTRY64">}</field>
  typedef LIST_ENTRY64 *PLIST_ENTRY64;
  #line 1 "\\program files\\Microsoft SDKs\\Windows\\v6.0A\\Include\\guiddef.h"
<struct name="_GUID">
  unsigned long  Data1;
  unsigned short Data2;
  unsigned short Data3;
  unsigned char  Data4[ 8 ];
  } GUID;

  typedef GUID *LPGUID;

  typedef const GUID *LPCGUID;
  typedef GUID IID;
  typedef IID *LPIID;
  typedef GUID CLSID;
  typedef CLSID *LPCLSID;
  typedef GUID FMTID;
  typedef FMTID *LPFMTID;

<struct name=" _OBJECTID">
  GUID Lineage;
  DWORD Uniquifier;
  } OBJECTID;





  typedef ULONG_PTR KSPIN_LOCK;
  typedef KSPIN_LOCK *PKSPIN_LOCK;

  #pragma warning(push)

  #pragma warning(disable:4164)


  #pragma function(_enable)
  #pragma function(_disable)

  #pragma warning(pop)

  BOOLEAN
  _bittest (
  LONG const *Base,
<arg name="Offset">LONG</arg>
</function>

  BOOLEAN
  _bittestandcomplement (
  LONG *Base,
<arg name="Offset">LONG</arg>
</function>

  BOOLEAN
  _bittestandset (
  LONG *Base,
<arg name="Offset">LONG</arg>
</function>

  BOOLEAN
  _bittestandreset (
  LONG *Base,
<arg name="Offset">LONG</arg>
</function>

  BOOLEAN
  _interlockedbittestandset (
  LONG volatile *Base,
<arg name="Offset">LONG</arg>
</function>

  BOOLEAN
  _interlockedbittestandreset (
  LONG volatile *Base,
<arg name="Offset">LONG</arg>
</function>

  #pragma intrinsic(_bittest)
  #pragma intrinsic(_bittestandcomplement)
  #pragma intrinsic(_bittestandset)
  #pragma intrinsic(_bittestandreset)
  #pragma intrinsic(_interlockedbittestandset)
  #pragma intrinsic(_interlockedbittestandreset)

  BOOLEAN
  _BitScanForward (
  DWORD *Index,
<arg name="Mask">DWORD</arg>
</function>

  BOOLEAN
  _BitScanReverse (
  DWORD *Index,
<arg name="Mask">DWORD</arg>
</function>

  #pragma intrinsic(_BitScanForward)
  #pragma intrinsic(_BitScanReverse)
  SHORT
  _InterlockedCompareExchange16 (
  SHORT volatile *Destination,
  SHORT ExChange,
<arg name="Comperand">SHORT</arg>
</function>

  #pragma intrinsic(_InterlockedCompareExchange16)
  #pragma warning(push)
  #pragma warning(disable:4035 4793)

  __forceinline
  BOOLEAN
  InterlockedBitTestAndComplement (
  LONG volatile *Base,
  LONG Bit
  )
  {
  __asm {
  mov eax, Bit
  mov ecx, Base
  lock btc [ecx], eax
  setc al
  };
  }
  #pragma warning(pop)
  BYTE
  __readfsbyte (
<arg name="Offset">DWORD</arg>
</function>

  WORD
  __readfsword (
<arg name="Offset">DWORD</arg>
</function>

  DWORD
  __readfsdword (
<arg name="Offset">DWORD</arg>
</function>

  void
  __writefsbyte (
  DWORD Offset,
<arg name="Data">BYTE </arg>
</function>

  void
  __writefsword (
  DWORD Offset,
<arg name="Data">WORD  </arg>
</function>

  void
  __writefsdword (
  DWORD Offset,
<arg name="Data">DWORD</arg>
</function>

  #pragma intrinsic(__readfsbyte)
  #pragma intrinsic(__readfsword)
  #pragma intrinsic(__readfsdword)
  #pragma intrinsic(__writefsbyte)
  #pragma intrinsic(__writefsword)
  #pragma intrinsic(__writefsdword)
  void
  __incfsbyte (
<arg name="Offset">DWORD</arg>
</function>

  void
  __addfsbyte (
  DWORD Offset,
<arg name="Value">BYTE </arg>
</function>

  void
  __incfsword (
<arg name="Offset">DWORD</arg>
</function>

  void
  __addfsword (
  DWORD Offset,
<arg name="Value">WORD  </arg>
</function>

  void
  __incfsdword (
<arg name="Offset">DWORD</arg>
</function>

  void
  __addfsdword (
  DWORD Offset,
<arg name="Value">DWORD</arg>
</function>

  void
  _mm_pause (
<arg name="void"></arg>
</function>

  #pragma intrinsic(_mm_pause)
  #pragma warning( push )
  #pragma warning( disable : 4793 )
  __forceinline
  void
  MemoryBarrier (
  void
  )
  {
  LONG Barrier;
  __asm {
  xchg Barrier, eax
  }
  }
  #pragma warning( pop )
<function name="__readpmc" ret="DWORD64">
  <arg name="Counter">DWORD</arg>
</function>

  #pragma intrinsic(__readpmc)

  DWORD64
  __rdtsc (
<arg name="void"></arg>
</function>

  #pragma intrinsic(__rdtsc)
  void
  __int2c (
<arg name="void"></arg>
</function>

  #pragma intrinsic(__int2c)

  __inline PVOID GetFiberData( void )    { return *(PVOID *) (ULONG_PTR) __readfsdword (0x10);}
  __inline PVOID GetCurrentFiber( void ) { return (PVOID) (ULONG_PTR) __readfsdword (0x10);}

<struct name="_FLOATING_SAVE_AREA">
<field name="ControlWord">DWORD</field>
<field name="StatusWord">DWORD</field>
<field name="TagWord">DWORD</field>
<field name="ErrorOffset">DWORD</field>
<field name="ErrorSelector">DWORD</field>
<field name="DataOffset">DWORD</field>
<field name="DataSelector">DWORD</field>
<field name="RegisterArea[80]">BYTE</field>
<field name="Cr0NpxState">DWORD</field>
<field name="FLOATING_SAVE_AREA">}</field>
  typedef FLOATING_SAVE_AREA *PFLOATING_SAVE_AREA;

<struct name="_CONTEXT">



















  DWORD ContextFlags;







  DWORD   Dr0;
  DWORD   Dr1;
  DWORD   Dr2;
  DWORD   Dr3;
  DWORD   Dr6;
  DWORD   Dr7;






  FLOATING_SAVE_AREA FloatSave;






  DWORD   SegGs;
  DWORD   SegFs;
  DWORD   SegEs;
  DWORD   SegDs;






  DWORD   Edi;
  DWORD   Esi;
  DWORD   Ebx;
  DWORD   Edx;
  DWORD   Ecx;
  DWORD   Eax;






  DWORD   Ebp;
  DWORD   Eip;
  DWORD   SegCs;
  DWORD   EFlags;
  DWORD   Esp;
  DWORD   SegSs;







  BYTE    ExtendedRegisters[512];

  } CONTEXT;
  typedef CONTEXT *PCONTEXT;

<struct name="_LDT_ENTRY">
<field name="LimitLow">WORD</field>
<field name="BaseLow">WORD</field>
  union {
<struct>
<field name="BaseMid">BYTE</field>
<field name="Flags1">BYTE</field>
<field name="Flags2">BYTE</field>
<field name="BaseHi">BYTE</field>
<field name="Bytes">}</field>
<struct>
  DWORD   BaseMid : 8;
  DWORD   Type : 5;
  DWORD   Dpl : 2;
  DWORD   Pres : 1;
  DWORD   LimitHi : 4;
  DWORD   Sys : 1;
  DWORD   Reserved_0 : 1;
  DWORD   Default_Big : 1;
  DWORD   Granularity : 1;
  DWORD   BaseHi : 8;
  } Bits;
  } HighWord;
  } LDT_ENTRY, *PLDT_ENTRY;

<struct name="_WOW64_FLOATING_SAVE_AREA">
<field name="ControlWord">DWORD</field>
<field name="StatusWord">DWORD</field>
<field name="TagWord">DWORD</field>
<field name="ErrorOffset">DWORD</field>
<field name="ErrorSelector">DWORD</field>
<field name="DataOffset">DWORD</field>
<field name="DataSelector">DWORD</field>
<field name="RegisterArea[80]">BYTE</field>
<field name="Cr0NpxState">DWORD</field>
<field name="WOW64_FLOATING_SAVE_AREA">}</field>
  typedef WOW64_FLOATING_SAVE_AREA *PWOW64_FLOATING_SAVE_AREA;

<struct name="_WOW64_CONTEXT">



















  DWORD ContextFlags;







  DWORD   Dr0;
  DWORD   Dr1;
  DWORD   Dr2;
  DWORD   Dr3;
  DWORD   Dr6;
  DWORD   Dr7;






  WOW64_FLOATING_SAVE_AREA FloatSave;






  DWORD   SegGs;
  DWORD   SegFs;
  DWORD   SegEs;
  DWORD   SegDs;






  DWORD   Edi;
  DWORD   Esi;
  DWORD   Ebx;
  DWORD   Edx;
  DWORD   Ecx;
  DWORD   Eax;






  DWORD   Ebp;
  DWORD   Eip;
  DWORD   SegCs;
  DWORD   EFlags;
  DWORD   Esp;
  DWORD   SegSs;







  BYTE    ExtendedRegisters[512];

  } WOW64_CONTEXT;

  typedef WOW64_CONTEXT *PWOW64_CONTEXT;

<struct name="_EXCEPTION_RECORD">
<field name="ExceptionCode">DWORD</field>
<field name="ExceptionFlags">DWORD</field>
  struct _EXCEPTION_RECORD *ExceptionRecord;
  PVOID ExceptionAddress;
  DWORD NumberParameters;
  ULONG_PTR ExceptionInformation[15];
  } EXCEPTION_RECORD;

  typedef EXCEPTION_RECORD *PEXCEPTION_RECORD;

<struct name="_EXCEPTION_RECORD32">
<field name="ExceptionCode">DWORD</field>
<field name="ExceptionFlags">DWORD</field>
<field name="ExceptionRecord">DWORD</field>
<field name="ExceptionAddress">DWORD</field>
<field name="NumberParameters">DWORD</field>
<field name="ExceptionInformation[15]">DWORD</field>
</struct>
<typedefprev id="EXCEPTION_RECORD32"/>
<typedefptrprev id="PEXCEPTION_RECORD32"/>

<struct name="_EXCEPTION_RECORD64">
<field name="ExceptionCode">DWORD</field>
<field name="ExceptionFlags">DWORD</field>
<field name="ExceptionRecord">DWORD64</field>
<field name="ExceptionAddress">DWORD64</field>
<field name="NumberParameters">DWORD</field>
<field name="__unusedAlignment">DWORD</field>
<field name="ExceptionInformation[15]">DWORD64</field>
</struct>
<typedefprev id="EXCEPTION_RECORD64"/>
<typedefptrprev id="PEXCEPTION_RECORD64"/>
<struct name="_EXCEPTION_POINTERS">
<field name="ExceptionRecord">PEXCEPTION_RECORD</field>
<field name="ContextRecord">PCONTEXT</field>
</struct>
<typedefprev id="EXCEPTION_POINTERS"/>
<typedefptrprev id="PEXCEPTION_POINTERS"/>
  typedef PVOID PACCESS_TOKEN;
  typedef PVOID PSECURITY_DESCRIPTOR;
  typedef PVOID PSID;

  typedef DWORD ACCESS_MASK;
  typedef ACCESS_MASK *PACCESS_MASK;

<struct name="_GENERIC_MAPPING">
<field name="GenericRead">ACCESS_MASK</field>
<field name="GenericWrite">ACCESS_MASK</field>
<field name="GenericExecute">ACCESS_MASK</field>
<field name="GenericAll">ACCESS_MASK</field>
<field name="GENERIC_MAPPING">}</field>
  typedef GENERIC_MAPPING *PGENERIC_MAPPING;
  #line 1 "\\program files\\Microsoft SDKs\\Windows\\v6.0A\\Include\\pshpack4.h"
  #pragma warning(disable:4103)

  #pragma pack(push,4)

<struct name="_LUID_AND_ATTRIBUTES">
<field name="Luid">LUID</field>
<field name="Attributes">DWORD</field>
</struct>
<typedefprev id="LUID_AND_ATTRIBUTES"/>
<typedefptrprev id="PLUID_AND_ATTRIBUTES"/>
  typedef LUID_AND_ATTRIBUTES LUID_AND_ATTRIBUTES_ARRAY[1];
  typedef LUID_AND_ATTRIBUTES_ARRAY *PLUID_AND_ATTRIBUTES_ARRAY;

  #line 1 "\\program files\\Microsoft SDKs\\Windows\\v6.0A\\Include\\poppack.h"
  #pragma warning(disable:4103)

  #pragma pack(pop)

<struct name="_SID_IDENTIFIER_AUTHORITY">
  <field name="Value[6]">BYTE</field>
</struct>
  <typedefprev id="SID_IDENTIFIER_AUTHORITY"/>
  <typedefptrprev id="PSID_IDENTIFIER_AUTHORITY"/>
  <struct name="_SID">
<field name="Revision">BYTE</field>
<field name="SubAuthorityCount">BYTE</field>
<field name="IdentifierAuthority">SID_IDENTIFIER_AUTHORITY</field>
<field name="SubAuthority[1]">DWORD</field>
</struct>
<typedefprev id="SID"/>
<typedefptrprev id="PISID"/>



  typedef enum _SID_NAME_USE {
  SidTypeUser = 1,
  SidTypeGroup,
  SidTypeDomain,
  SidTypeAlias,
  SidTypeWellKnownGroup,
  SidTypeDeletedAccount,
  SidTypeInvalid,
  SidTypeUnknown,
  SidTypeComputer,
  SidTypeLabel
  } SID_NAME_USE, *PSID_NAME_USE;

<struct name="_SID_AND_ATTRIBUTES">
<field name="Sid">PSID</field>
<field name="Attributes">DWORD</field>
</struct>
<typedefprev id="SID_AND_ATTRIBUTES"/>
<typedefptrprev id="PSID_AND_ATTRIBUTES"/>

  typedef SID_AND_ATTRIBUTES SID_AND_ATTRIBUTES_ARRAY[1];
  typedef SID_AND_ATTRIBUTES_ARRAY *PSID_AND_ATTRIBUTES_ARRAY;
  typedef ULONG_PTR SID_HASH_ENTRY, *PSID_HASH_ENTRY;

<struct name="_SID_AND_ATTRIBUTES_HASH">
<field name="SidCount">DWORD</field>
<field name="SidAttr">PSID_AND_ATTRIBUTES</field>
<field name="Hash[32]">SID_HASH_ENTRY</field>
</struct>
<typedefprev id="SID_AND_ATTRIBUTES_HASH"/>
<typedefptrprev id="PSID_AND_ATTRIBUTES_HASH"/>

  typedef enum {

  WinNullSid                                  = 0,
  WinWorldSid                                 = 1,
  WinLocalSid                                 = 2,
  WinCreatorOwnerSid                          = 3,
  WinCreatorGroupSid                          = 4,
  WinCreatorOwnerServerSid                    = 5,
  WinCreatorGroupServerSid                    = 6,
  WinNtAuthoritySid                           = 7,
  WinDialupSid                                = 8,
  WinNetworkSid                               = 9,
  WinBatchSid                                 = 10,
  WinInteractiveSid                           = 11,
  WinServiceSid                               = 12,
  WinAnonymousSid                             = 13,
  WinProxySid                                 = 14,
  WinEnterpriseControllersSid                 = 15,
  WinSelfSid                                  = 16,
  WinAuthenticatedUserSid                     = 17,
  WinRestrictedCodeSid                        = 18,
  WinTerminalServerSid                        = 19,
  WinRemoteLogonIdSid                         = 20,
  WinLogonIdsSid                              = 21,
  WinLocalSystemSid                           = 22,
  WinLocalServiceSid                          = 23,
  WinNetworkServiceSid                        = 24,
  WinBuiltinDomainSid                         = 25,
  WinBuiltinAdministratorsSid                 = 26,
  WinBuiltinUsersSid                          = 27,
  WinBuiltinGuestsSid                         = 28,
  WinBuiltinPowerUsersSid                     = 29,
  WinBuiltinAccountOperatorsSid               = 30,
  WinBuiltinSystemOperatorsSid                = 31,
  WinBuiltinPrintOperatorsSid                 = 32,
  WinBuiltinBackupOperatorsSid                = 33,
  WinBuiltinReplicatorSid                     = 34,
  WinBuiltinPreWindows2000CompatibleAccessSid = 35,
  WinBuiltinRemoteDesktopUsersSid             = 36,
  WinBuiltinNetworkConfigurationOperatorsSid  = 37,
  WinAccountAdministratorSid                  = 38,
  WinAccountGuestSid                          = 39,
  WinAccountKrbtgtSid                         = 40,
  WinAccountDomainAdminsSid                   = 41,
  WinAccountDomainUsersSid                    = 42,
  WinAccountDomainGuestsSid                   = 43,
  WinAccountComputersSid                      = 44,
  WinAccountControllersSid                    = 45,
  WinAccountCertAdminsSid                     = 46,
  WinAccountSchemaAdminsSid                   = 47,
  WinAccountEnterpriseAdminsSid               = 48,
  WinAccountPolicyAdminsSid                   = 49,
  WinAccountRasAndIasServersSid               = 50,
  WinNTLMAuthenticationSid                    = 51,
  WinDigestAuthenticationSid                  = 52,
  WinSChannelAuthenticationSid                = 53,
  WinThisOrganizationSid                      = 54,
  WinOtherOrganizationSid                     = 55,
  WinBuiltinIncomingForestTrustBuildersSid    = 56,
  WinBuiltinPerfMonitoringUsersSid            = 57,
  WinBuiltinPerfLoggingUsersSid               = 58,
  WinBuiltinAuthorizationAccessSid            = 59,
  WinBuiltinTerminalServerLicenseServersSid   = 60,
  WinBuiltinDCOMUsersSid                      = 61,
  WinBuiltinIUsersSid                         = 62,
  WinIUserSid                                 = 63,
  WinBuiltinCryptoOperatorsSid                = 64,
  WinUntrustedLabelSid                        = 65,
  WinLowLabelSid                              = 66,
  WinMediumLabelSid                           = 67,
  WinHighLabelSid                             = 68,
  WinSystemLabelSid                           = 69,
  WinWriteRestrictedCodeSid                   = 70,
  WinCreatorOwnerRightsSid                    = 71,
  WinCacheablePrincipalsGroupSid              = 72,
  WinNonCacheablePrincipalsGroupSid           = 73,
  WinEnterpriseReadonlyControllersSid         = 74,
  WinAccountReadonlyControllersSid            = 75,
  WinBuiltinEventLogReadersGroup              = 76,

  } WELL_KNOWN_SID_TYPE;


<struct name="_ACL">
<field name="AclRevision">BYTE</field>
<field name="Sbz1">BYTE</field>
<field name="AclSize">WORD</field>
<field name="AceCount">WORD</field>
<field name="Sbz2">WORD</field>
<field name="ACL">}</field>
  typedef ACL *PACL;
<struct name="_ACE_HEADER">
<field name="AceType">BYTE</field>
<field name="AceFlags">BYTE</field>
<field name="AceSize">WORD</field>
<field name="ACE_HEADER">}</field>
  typedef ACE_HEADER *PACE_HEADER;

<struct name="_ACCESS_ALLOWED_ACE">
<field name="Header">ACE_HEADER</field>
<field name="Mask">ACCESS_MASK</field>
<field name="SidStart">DWORD</field>
<field name="ACCESS_ALLOWED_ACE">}</field>
  typedef ACCESS_ALLOWED_ACE *PACCESS_ALLOWED_ACE;

<struct name="_ACCESS_DENIED_ACE">
<field name="Header">ACE_HEADER</field>
<field name="Mask">ACCESS_MASK</field>
<field name="SidStart">DWORD</field>
<field name="ACCESS_DENIED_ACE">}</field>
  typedef ACCESS_DENIED_ACE *PACCESS_DENIED_ACE;

<struct name="_SYSTEM_AUDIT_ACE">
<field name="Header">ACE_HEADER</field>
<field name="Mask">ACCESS_MASK</field>
<field name="SidStart">DWORD</field>
<field name="SYSTEM_AUDIT_ACE">}</field>
  typedef SYSTEM_AUDIT_ACE *PSYSTEM_AUDIT_ACE;

<struct name="_SYSTEM_ALARM_ACE">
<field name="Header">ACE_HEADER</field>
<field name="Mask">ACCESS_MASK</field>
<field name="SidStart">DWORD</field>
<field name="SYSTEM_ALARM_ACE">}</field>
  typedef SYSTEM_ALARM_ACE *PSYSTEM_ALARM_ACE;

<struct name="_SYSTEM_MANDATORY_LABEL_ACE">
<field name="Header">ACE_HEADER</field>
<field name="Mask">ACCESS_MASK</field>
<field name="SidStart">DWORD</field>
</struct>
<typedefprev id="SYSTEM_MANDATORY_LABEL_ACE"/>
<typedefptrprev id="PSYSTEM_MANDATORY_LABEL_ACE"/>

<struct name="_ACCESS_ALLOWED_OBJECT_ACE">
<field name="Header">ACE_HEADER</field>
<field name="Mask">ACCESS_MASK</field>
<field name="Flags">DWORD</field>
<field name="ObjectType">GUID</field>
<field name="InheritedObjectType">GUID</field>
<field name="SidStart">DWORD</field>
</struct>
<typedefprev id="ACCESS_ALLOWED_OBJECT_ACE"/>
<typedefptrprev id="PACCESS_ALLOWED_OBJECT_ACE"/>

<struct name="_ACCESS_DENIED_OBJECT_ACE">
<field name="Header">ACE_HEADER</field>
<field name="Mask">ACCESS_MASK</field>
<field name="Flags">DWORD</field>
<field name="ObjectType">GUID</field>
<field name="InheritedObjectType">GUID</field>
<field name="SidStart">DWORD</field>
</struct>
<typedefprev id="ACCESS_DENIED_OBJECT_ACE"/>
<typedefptrprev id="PACCESS_DENIED_OBJECT_ACE"/>

<struct name="_SYSTEM_AUDIT_OBJECT_ACE">
<field name="Header">ACE_HEADER</field>
<field name="Mask">ACCESS_MASK</field>
<field name="Flags">DWORD</field>
<field name="ObjectType">GUID</field>
<field name="InheritedObjectType">GUID</field>
<field name="SidStart">DWORD</field>
</struct>
<typedefprev id="SYSTEM_AUDIT_OBJECT_ACE"/>
<typedefptrprev id="PSYSTEM_AUDIT_OBJECT_ACE"/>

<struct name="_SYSTEM_ALARM_OBJECT_ACE">
<field name="Header">ACE_HEADER</field>
<field name="Mask">ACCESS_MASK</field>
<field name="Flags">DWORD</field>
<field name="ObjectType">GUID</field>
<field name="InheritedObjectType">GUID</field>
<field name="SidStart">DWORD</field>
</struct>
<typedefprev id="SYSTEM_ALARM_OBJECT_ACE"/>
<typedefptrprev id="PSYSTEM_ALARM_OBJECT_ACE"/>

<struct name="_ACCESS_ALLOWED_CALLBACK_ACE">
<field name="Header">ACE_HEADER</field>
<field name="Mask">ACCESS_MASK</field>
<field name="SidStart">DWORD</field>
</struct>
<typedefprev id="ACCESS_ALLOWED_CALLBACK_ACE"/>
<typedefptrprev id="PACCESS_ALLOWED_CALLBACK_ACE"/>

<struct name="_ACCESS_DENIED_CALLBACK_ACE">
<field name="Header">ACE_HEADER</field>
<field name="Mask">ACCESS_MASK</field>
<field name="SidStart">DWORD</field>
</struct>
<typedefprev id="ACCESS_DENIED_CALLBACK_ACE"/>
<typedefptrprev id="PACCESS_DENIED_CALLBACK_ACE"/>

<struct name="_SYSTEM_AUDIT_CALLBACK_ACE">
<field name="Header">ACE_HEADER</field>
<field name="Mask">ACCESS_MASK</field>
<field name="SidStart">DWORD</field>
</struct>
<typedefprev id="SYSTEM_AUDIT_CALLBACK_ACE"/>
<typedefptrprev id="PSYSTEM_AUDIT_CALLBACK_ACE"/>

<struct name="_SYSTEM_ALARM_CALLBACK_ACE">
<field name="Header">ACE_HEADER</field>
<field name="Mask">ACCESS_MASK</field>
<field name="SidStart">DWORD</field>
</struct>
<typedefprev id="SYSTEM_ALARM_CALLBACK_ACE"/>
<typedefptrprev id="PSYSTEM_ALARM_CALLBACK_ACE"/>

<struct name="_ACCESS_ALLOWED_CALLBACK_OBJECT_ACE">
<field name="Header">ACE_HEADER</field>
<field name="Mask">ACCESS_MASK</field>
<field name="Flags">DWORD</field>
<field name="ObjectType">GUID</field>
<field name="InheritedObjectType">GUID</field>
<field name="SidStart">DWORD</field>
</struct>
<typedefprev id="ACCESS_ALLOWED_CALLBACK_OBJECT_ACE"/>
<typedefptrprev id="PACCESS_ALLOWED_CALLBACK_OBJECT_ACE"/>

<struct name="_ACCESS_DENIED_CALLBACK_OBJECT_ACE">
<field name="Header">ACE_HEADER</field>
<field name="Mask">ACCESS_MASK</field>
<field name="Flags">DWORD</field>
<field name="ObjectType">GUID</field>
<field name="InheritedObjectType">GUID</field>
<field name="SidStart">DWORD</field>
</struct>
<typedefprev id="ACCESS_DENIED_CALLBACK_OBJECT_ACE"/>
<typedefptrprev id="PACCESS_DENIED_CALLBACK_OBJECT_ACE"/>

<struct name="_SYSTEM_AUDIT_CALLBACK_OBJECT_ACE">
<field name="Header">ACE_HEADER</field>
<field name="Mask">ACCESS_MASK</field>
<field name="Flags">DWORD</field>
<field name="ObjectType">GUID</field>
<field name="InheritedObjectType">GUID</field>
<field name="SidStart">DWORD</field>
</struct>
<typedefprev id="SYSTEM_AUDIT_CALLBACK_OBJECT_ACE"/>
<typedefptrprev id="PSYSTEM_AUDIT_CALLBACK_OBJECT_ACE"/>

<struct name="_SYSTEM_ALARM_CALLBACK_OBJECT_ACE">
<field name="Header">ACE_HEADER</field>
<field name="Mask">ACCESS_MASK</field>
<field name="Flags">DWORD</field>
<field name="ObjectType">GUID</field>
<field name="InheritedObjectType">GUID</field>
<field name="SidStart">DWORD</field>
</struct>
<typedefprev id="SYSTEM_ALARM_CALLBACK_OBJECT_ACE"/>
<typedefptrprev id="PSYSTEM_ALARM_CALLBACK_OBJECT_ACE"/>


  typedef enum _ACL_INFORMATION_CLASS {
  AclRevisionInformation = 1,
  AclSizeInformation
  } ACL_INFORMATION_CLASS;

<struct name="_ACL_REVISION_INFORMATION">
<field name="AclRevision">DWORD</field>
<field name="ACL_REVISION_INFORMATION">}</field>
  typedef ACL_REVISION_INFORMATION *PACL_REVISION_INFORMATION;
<struct name="_ACL_SIZE_INFORMATION">
<field name="AceCount">DWORD</field>
<field name="AclBytesInUse">DWORD</field>
<field name="AclBytesFree">DWORD</field>
<field name="ACL_SIZE_INFORMATION">}</field>
  typedef ACL_SIZE_INFORMATION *PACL_SIZE_INFORMATION;
  typedef WORD   SECURITY_DESCRIPTOR_CONTROL, *PSECURITY_DESCRIPTOR_CONTROL;

<struct name="_SECURITY_DESCRIPTOR_RELATIVE">
<field name="Revision">BYTE</field>
<field name="Sbz1">BYTE</field>
<field name="Control">SECURITY_DESCRIPTOR_CONTROL</field>
<field name="Owner">DWORD</field>
<field name="Group">DWORD</field>
<field name="Sacl">DWORD</field>
<field name="Dacl">DWORD</field>
</struct>
<typedefprev id="SECURITY_DESCRIPTOR_RELATIVE"/>
<typedefptrprev id="PISECURITY_DESCRIPTOR_RELATIVE"/>

<struct name="_SECURITY_DESCRIPTOR">
<field name="Revision">BYTE</field>
<field name="Sbz1">BYTE</field>
<field name="Control">SECURITY_DESCRIPTOR_CONTROL</field>
<field name="Owner">PSID</field>
<field name="Group">PSID</field>
<field name="Sacl">PACL</field>
<field name="Dacl">PACL</field>
</struct>
<typedefprev id="SECURITY_DESCRIPTOR"/>
<typedefptrprev id="PISECURITY_DESCRIPTOR"/>
<struct name="_OBJECT_TYPE_LIST">
<field name="Level">WORD</field>
<field name="Sbz">WORD</field>
  GUID *ObjectType;
  } OBJECT_TYPE_LIST, *POBJECT_TYPE_LIST;

  typedef enum _AUDIT_EVENT_TYPE {
  AuditEventObjectAccess,
  AuditEventDirectoryServiceAccess
  } AUDIT_EVENT_TYPE, *PAUDIT_EVENT_TYPE;

<struct name="_PRIVILEGE_SET">
<field name="PrivilegeCount">DWORD</field>
<field name="Control">DWORD</field>
<field name="Privilege[1]">LUID_AND_ATTRIBUTES</field>
</struct>
<typedefprev id="PRIVILEGE_SET"/>
<typedefptrprev id="PPRIVILEGE_SET"/>
  typedef enum _SECURITY_IMPERSONATION_LEVEL {
  SecurityAnonymous,
  SecurityIdentification,
  SecurityImpersonation,
  SecurityDelegation
  } SECURITY_IMPERSONATION_LEVEL, * PSECURITY_IMPERSONATION_LEVEL;

  typedef enum _TOKEN_TYPE {
  TokenPrimary = 1,
  TokenImpersonation
  } TOKEN_TYPE;
  typedef TOKEN_TYPE *PTOKEN_TYPE;
  typedef enum _TOKEN_ELEVATION_TYPE {
  TokenElevationTypeDefault = 1,
  TokenElevationTypeFull,
  TokenElevationTypeLimited,
  } TOKEN_ELEVATION_TYPE, *PTOKEN_ELEVATION_TYPE;

  typedef enum _TOKEN_INFORMATION_CLASS {
  TokenUser = 1,
  TokenGroups,
  TokenPrivileges,
  TokenOwner,
  TokenPrimaryGroup,
  TokenDefaultDacl,
  TokenSource,
  TokenType,
  TokenImpersonationLevel,
  TokenStatistics,
  TokenRestrictedSids,
  TokenSessionId,
  TokenGroupsAndPrivileges,
  TokenSessionReference,
  TokenSandBoxInert,
  TokenAuditPolicy,
  TokenOrigin,
  TokenElevationType,
  TokenLinkedToken,
  TokenElevation,
  TokenHasRestrictions,
  TokenAccessInformation,
  TokenVirtualizationAllowed,
  TokenVirtualizationEnabled,
  TokenIntegrityLevel,
  TokenUIAccess,
  TokenMandatoryPolicy,
  TokenLogonSid,
  MaxTokenInfoClass
  } TOKEN_INFORMATION_CLASS, *PTOKEN_INFORMATION_CLASS;

<struct name="_TOKEN_USER">
<field name="User">SID_AND_ATTRIBUTES</field>
</struct>
<typedefprev id="TOKEN_USER"/>
<typedefptrprev id="PTOKEN_USER"/>

<struct name="_TOKEN_GROUPS">
<field name="GroupCount">DWORD</field>
<field name="Groups[1]">SID_AND_ATTRIBUTES</field>
</struct>
<typedefprev id="TOKEN_GROUPS"/>
<typedefptrprev id="PTOKEN_GROUPS"/>
<struct name="_TOKEN_PRIVILEGES">
<field name="PrivilegeCount">DWORD</field>
<field name="Privileges[1]">LUID_AND_ATTRIBUTES</field>
</struct>
<typedefprev id="TOKEN_PRIVILEGES"/>
<typedefptrprev id="PTOKEN_PRIVILEGES"/>
<struct name="_TOKEN_OWNER">
<field name="Owner">PSID</field>
</struct>
<typedefprev id="TOKEN_OWNER"/>
<typedefptrprev id="PTOKEN_OWNER"/>
<struct name="_TOKEN_PRIMARY_GROUP">
<field name="PrimaryGroup">PSID</field>
</struct>
<typedefprev id="TOKEN_PRIMARY_GROUP"/>
<typedefptrprev id="PTOKEN_PRIMARY_GROUP"/>
<struct name="_TOKEN_DEFAULT_DACL">
<field name="DefaultDacl">PACL</field>
</struct>
<typedefprev id="TOKEN_DEFAULT_DACL"/>
<typedefptrprev id="PTOKEN_DEFAULT_DACL"/>

<struct name="_TOKEN_GROUPS_AND_PRIVILEGES">
<field name="SidCount">DWORD</field>
<field name="SidLength">DWORD</field>
<field name="Sids">PSID_AND_ATTRIBUTES</field>
<field name="RestrictedSidCount">DWORD</field>
<field name="RestrictedSidLength">DWORD</field>
<field name="RestrictedSids">PSID_AND_ATTRIBUTES</field>
<field name="PrivilegeCount">DWORD</field>
<field name="PrivilegeLength">DWORD</field>
<field name="Privileges">PLUID_AND_ATTRIBUTES</field>
<field name="AuthenticationId">LUID</field>
</struct>
<typedefprev id="TOKEN_GROUPS_AND_PRIVILEGES"/>
<typedefptrprev id="PTOKEN_GROUPS_AND_PRIVILEGES"/>

<struct name="_TOKEN_LINKED_TOKEN">
<field name="LinkedToken">HANDLE</field>
</struct>
<typedefprev id="TOKEN_LINKED_TOKEN"/>
<typedefptrprev id="PTOKEN_LINKED_TOKEN"/>

<struct name="_TOKEN_ELEVATION">
<field name="TokenIsElevated">DWORD</field>
</struct>
<typedefprev id="TOKEN_ELEVATION"/>
<typedefptrprev id="PTOKEN_ELEVATION"/>

<struct name="_TOKEN_MANDATORY_LABEL">
<field name="Label">SID_AND_ATTRIBUTES</field>
</struct>
<typedefprev id="TOKEN_MANDATORY_LABEL"/>
<typedefptrprev id="PTOKEN_MANDATORY_LABEL"/>

<struct name="_TOKEN_MANDATORY_POLICY">
<field name="Policy">DWORD</field>
</struct>
<typedefprev id="TOKEN_MANDATORY_POLICY"/>
<typedefptrprev id="PTOKEN_MANDATORY_POLICY"/>

<struct name="_TOKEN_ACCESS_INFORMATION">
<field name="SidHash">PSID_AND_ATTRIBUTES_HASH</field>
<field name="RestrictedSidHash">PSID_AND_ATTRIBUTES_HASH</field>
<field name="Privileges">PTOKEN_PRIVILEGES</field>
<field name="AuthenticationId">LUID</field>
<field name="TokenType">TOKEN_TYPE</field>
<field name="ImpersonationLevel">SECURITY_IMPERSONATION_LEVEL</field>
<field name="MandatoryPolicy">TOKEN_MANDATORY_POLICY</field>
<field name="Flags">DWORD</field>
</struct>
<typedefprev id="TOKEN_ACCESS_INFORMATION"/>
<typedefptrprev id="PTOKEN_ACCESS_INFORMATION"/>
<struct name="_TOKEN_AUDIT_POLICY">
  BYTE  PerUserPolicy[(((50)) >> 1) + 1];
  } TOKEN_AUDIT_POLICY, *PTOKEN_AUDIT_POLICY;
<struct name="_TOKEN_SOURCE">
  CHAR SourceName[8];
  LUID SourceIdentifier;
  } TOKEN_SOURCE, *PTOKEN_SOURCE;
<struct name="_TOKEN_STATISTICS">
<field name="TokenId">LUID</field>
<field name="AuthenticationId">LUID</field>
<field name="ExpirationTime">LARGE_INTEGER</field>
<field name="TokenType">TOKEN_TYPE</field>
<field name="ImpersonationLevel">SECURITY_IMPERSONATION_LEVEL</field>
<field name="DynamicCharged">DWORD</field>
<field name="DynamicAvailable">DWORD</field>
<field name="GroupCount">DWORD</field>
<field name="PrivilegeCount">DWORD</field>
<field name="ModifiedId">LUID</field>
</struct>
<typedefprev id="TOKEN_STATISTICS"/>
<typedefptrprev id="PTOKEN_STATISTICS"/>
<struct name="_TOKEN_CONTROL">
<field name="TokenId">LUID</field>
<field name="AuthenticationId">LUID</field>
<field name="ModifiedId">LUID</field>
<field name="TokenSource">TOKEN_SOURCE</field>
</struct>
<typedefprev id="TOKEN_CONTROL"/>
<typedefptrprev id="PTOKEN_CONTROL"/>

<struct name="_TOKEN_ORIGIN">
  LUID OriginatingLogonSession ;
  } TOKEN_ORIGIN, * PTOKEN_ORIGIN ;

  typedef enum _MANDATORY_LEVEL {
  MandatoryLevelUntrusted = 0,
  MandatoryLevelLow,
  MandatoryLevelMedium,
  MandatoryLevelHigh,
  MandatoryLevelSystem,
  MandatoryLevelSecureProcess,
  MandatoryLevelCount
  } MANDATORY_LEVEL, *PMANDATORY_LEVEL;

  typedef BOOLEAN SECURITY_CONTEXT_TRACKING_MODE,
  * PSECURITY_CONTEXT_TRACKING_MODE;
<struct name="_SECURITY_QUALITY_OF_SERVICE">
<field name="Length">DWORD</field>
<field name="ImpersonationLevel">SECURITY_IMPERSONATION_LEVEL</field>
<field name="ContextTrackingMode">SECURITY_CONTEXT_TRACKING_MODE</field>
<field name="EffectiveOnly">BOOLEAN</field>
</struct>
<typedefprev id="SECURITY_QUALITY_OF_SERVICE"/>
<typedefptrprev id="PSECURITY_QUALITY_OF_SERVICE"/>

<struct name="_SE_IMPERSONATION_STATE">
<field name="Token">PACCESS_TOKEN</field>
<field name="CopyOnOpen">BOOLEAN</field>
<field name="EffectiveOnly">BOOLEAN</field>
<field name="Level">SECURITY_IMPERSONATION_LEVEL</field>
</struct>
<typedefprev id="SE_IMPERSONATION_STATE"/>
<typedefptrprev id="PSE_IMPERSONATION_STATE"/>

  typedef DWORD SECURITY_INFORMATION, *PSECURITY_INFORMATION;
<struct name="_JOB_SET_ARRAY">
<field name="JobHandle">HANDLE</field>
<field name="MemberLevel">DWORD</field>
<field name="Flags">DWORD</field>
</struct>
<typedefprev id="JOB_SET_ARRAY"/>
<typedefptrprev id="PJOB_SET_ARRAY"/>

<struct name="_NT_TIB">
  struct _EXCEPTION_REGISTRATION_RECORD *ExceptionList;
  PVOID StackBase;
  PVOID StackLimit;
  PVOID SubSystemTib;
  union {
  PVOID FiberData;
  DWORD Version;
  };
  PVOID ArbitraryUserPointer;
  struct _NT_TIB *Self;
  } NT_TIB;
  typedef NT_TIB *PNT_TIB;

<struct name="_NT_TIB32">
<field name="ExceptionList">DWORD</field>
<field name="StackBase">DWORD</field>
<field name="StackLimit">DWORD</field>
<field name="SubSystemTib">DWORD</field>
  union {
  DWORD FiberData;
  DWORD Version;
  };
  DWORD ArbitraryUserPointer;
  DWORD Self;
  } NT_TIB32, *PNT_TIB32;

<struct name="_NT_TIB64">
<field name="ExceptionList">DWORD64</field>
<field name="StackBase">DWORD64</field>
<field name="StackLimit">DWORD64</field>
<field name="SubSystemTib">DWORD64</field>
  union {
  DWORD64 FiberData;
  DWORD Version;
  };
  DWORD64 ArbitraryUserPointer;
  DWORD64 Self;
  } NT_TIB64, *PNT_TIB64;
<struct name="_QUOTA_LIMITS">
<field name="PagedPoolLimit">SIZE_T</field>
<field name="NonPagedPoolLimit">SIZE_T</field>
<field name="MinimumWorkingSetSize">SIZE_T</field>
<field name="MaximumWorkingSetSize">SIZE_T</field>
<field name="PagefileLimit">SIZE_T</field>
<field name="TimeLimit">LARGE_INTEGER</field>
</struct>
<typedefprev id="QUOTA_LIMITS"/>
<typedefptrprev id="PQUOTA_LIMITS"/>
  typedef enum _PS_RATE_PHASE {
  PsRateOneSecond = 0,
  PsRateTwoSecond,
  PsRateThreeSecond,
  PsRateMaxPhase
  } PS_RATE_PHASE;

  typedef union _RATE_QUOTA_LIMIT {
  DWORD RateData;
<struct>
  DWORD RatePhase     : 4;
  DWORD RatePercent   : 28;
  };
  } RATE_QUOTA_LIMIT, *PRATE_QUOTA_LIMIT;
<struct name="_QUOTA_LIMITS_EX">
<field name="PagedPoolLimit">SIZE_T</field>
<field name="NonPagedPoolLimit">SIZE_T</field>
<field name="MinimumWorkingSetSize">SIZE_T</field>
<field name="MaximumWorkingSetSize">SIZE_T</field>
<field name="PagefileLimit">SIZE_T</field>
<field name="TimeLimit">LARGE_INTEGER</field>
<field name="WorkingSetLimit">SIZE_T</field>
<field name="Reserved2">SIZE_T</field>
<field name="Reserved3">SIZE_T</field>
<field name="Reserved4">SIZE_T</field>
<field name="Flags">DWORD</field>
<field name="CpuRateLimit">RATE_QUOTA_LIMIT</field>
</struct>
<typedefprev id="QUOTA_LIMITS_EX"/>
<typedefptrprev id="PQUOTA_LIMITS_EX"/>

<struct name="_IO_COUNTERS">
<field name="ReadOperationCount">ULONGLONG</field>
<field name="WriteOperationCount">ULONGLONG</field>
<field name="OtherOperationCount">ULONGLONG</field>
<field name="ReadTransferCount">ULONGLONG</field>
<field name="WriteTransferCount">ULONGLONG</field>
<field name="OtherTransferCount">ULONGLONG</field>
<field name="IO_COUNTERS">}</field>
  typedef IO_COUNTERS *PIO_COUNTERS;
<struct name="_JOBOBJECT_BASIC_ACCOUNTING_INFORMATION">
<field name="TotalUserTime">LARGE_INTEGER</field>
<field name="TotalKernelTime">LARGE_INTEGER</field>
<field name="ThisPeriodTotalUserTime">LARGE_INTEGER</field>
<field name="ThisPeriodTotalKernelTime">LARGE_INTEGER</field>
<field name="TotalPageFaultCount">DWORD</field>
<field name="TotalProcesses">DWORD</field>
<field name="ActiveProcesses">DWORD</field>
<field name="TotalTerminatedProcesses">DWORD</field>
</struct>
<typedefprev id="JOBOBJECT_BASIC_ACCOUNTING_INFORMATION"/>
<typedefptrprev id="PJOBOBJECT_BASIC_ACCOUNTING_INFORMATION"/>

<struct name="_JOBOBJECT_BASIC_LIMIT_INFORMATION">
<field name="PerProcessUserTimeLimit">LARGE_INTEGER</field>
<field name="PerJobUserTimeLimit">LARGE_INTEGER</field>
<field name="LimitFlags">DWORD</field>
<field name="MinimumWorkingSetSize">SIZE_T</field>
<field name="MaximumWorkingSetSize">SIZE_T</field>
<field name="ActiveProcessLimit">DWORD</field>
<field name="Affinity">ULONG_PTR</field>
<field name="PriorityClass">DWORD</field>
<field name="SchedulingClass">DWORD</field>
</struct>
<typedefprev id="JOBOBJECT_BASIC_LIMIT_INFORMATION"/>
<typedefptrprev id="PJOBOBJECT_BASIC_LIMIT_INFORMATION"/>

<struct name="_JOBOBJECT_EXTENDED_LIMIT_INFORMATION">
<field name="BasicLimitInformation">JOBOBJECT_BASIC_LIMIT_INFORMATION</field>
<field name="IoInfo">IO_COUNTERS</field>
<field name="ProcessMemoryLimit">SIZE_T</field>
<field name="JobMemoryLimit">SIZE_T</field>
<field name="PeakProcessMemoryUsed">SIZE_T</field>
<field name="PeakJobMemoryUsed">SIZE_T</field>
</struct>
<typedefprev id="JOBOBJECT_EXTENDED_LIMIT_INFORMATION"/>
<typedefptrprev id="PJOBOBJECT_EXTENDED_LIMIT_INFORMATION"/>

<struct name="_JOBOBJECT_BASIC_PROCESS_ID_LIST">
<field name="NumberOfAssignedProcesses">DWORD</field>
<field name="NumberOfProcessIdsInList">DWORD</field>
<field name="ProcessIdList[1]">ULONG_PTR</field>
</struct>
<typedefprev id="JOBOBJECT_BASIC_PROCESS_ID_LIST"/>
<typedefptrprev id="PJOBOBJECT_BASIC_PROCESS_ID_LIST"/>

<struct name="_JOBOBJECT_BASIC_UI_RESTRICTIONS">
<field name="UIRestrictionsClass">DWORD</field>
</struct>
<typedefprev id="JOBOBJECT_BASIC_UI_RESTRICTIONS"/>
<typedefptrprev id="PJOBOBJECT_BASIC_UI_RESTRICTIONS"/>

<struct name="_JOBOBJECT_SECURITY_LIMIT_INFORMATION">
  DWORD SecurityLimitFlags ;
  HANDLE JobToken ;
  PTOKEN_GROUPS SidsToDisable ;
  PTOKEN_PRIVILEGES PrivilegesToDelete ;
  PTOKEN_GROUPS RestrictedSids ;
  } JOBOBJECT_SECURITY_LIMIT_INFORMATION, *PJOBOBJECT_SECURITY_LIMIT_INFORMATION ;

<struct name="_JOBOBJECT_END_OF_JOB_TIME_INFORMATION">
<field name="EndOfJobTimeAction">DWORD</field>
</struct>
<typedefprev id="JOBOBJECT_END_OF_JOB_TIME_INFORMATION"/>
<typedefptrprev id="PJOBOBJECT_END_OF_JOB_TIME_INFORMATION"/>

<struct name="_JOBOBJECT_ASSOCIATE_COMPLETION_PORT">
<field name="CompletionKey">PVOID</field>
<field name="CompletionPort">HANDLE</field>
</struct>
<typedefprev id="JOBOBJECT_ASSOCIATE_COMPLETION_PORT"/>
<typedefptrprev id="PJOBOBJECT_ASSOCIATE_COMPLETION_PORT"/>

<struct name="_JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION">
<field name="BasicInfo">JOBOBJECT_BASIC_ACCOUNTING_INFORMATION</field>
<field name="IoInfo">IO_COUNTERS</field>
</struct>
<typedefprev id="JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION"/>
<typedefptrprev id="PJOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION"/>

<struct name="_JOBOBJECT_JOBSET_INFORMATION">
<field name="MemberLevel">DWORD</field>
</struct>
<typedefprev id="JOBOBJECT_JOBSET_INFORMATION"/>
<typedefptrprev id="PJOBOBJECT_JOBSET_INFORMATION"/>
  typedef enum _JOBOBJECTINFOCLASS {
  JobObjectBasicAccountingInformation = 1,
  JobObjectBasicLimitInformation,
  JobObjectBasicProcessIdList,
  JobObjectBasicUIRestrictions,
  JobObjectSecurityLimitInformation,
  JobObjectEndOfJobTimeInformation,
  JobObjectAssociateCompletionPortInformation,
  JobObjectBasicAndIoAccountingInformation,
  JobObjectExtendedLimitInformation,
  JobObjectJobSetInformation,
  MaxJobObjectInfoClass
  } JOBOBJECTINFOCLASS;
  typedef enum _LOGICAL_PROCESSOR_RELATIONSHIP {
  RelationProcessorCore,
  RelationNumaNode,
  RelationCache,
  RelationProcessorPackage
  } LOGICAL_PROCESSOR_RELATIONSHIP;
  typedef enum _PROCESSOR_CACHE_TYPE {
  CacheUnified,
  CacheInstruction,
  CacheData,
  CacheTrace
  } PROCESSOR_CACHE_TYPE;
<struct name="_CACHE_DESCRIPTOR">
<field name="Level">BYTE</field>
<field name="Associativity">BYTE</field>
<field name="LineSize">WORD</field>
<field name="Size">DWORD</field>
<field name="Type">PROCESSOR_CACHE_TYPE</field>
</struct>
<typedefprev id="CACHE_DESCRIPTOR"/>
<typedefptrprev id="PCACHE_DESCRIPTOR"/>

<struct name="_SYSTEM_LOGICAL_PROCESSOR_INFORMATION">
<field name="ProcessorMask">ULONG_PTR</field>
<field name="Relationship">LOGICAL_PROCESSOR_RELATIONSHIP</field>
  union {
<struct>
<field name="Flags">BYTE</field>
<field name="ProcessorCore">}</field>
<struct>
<field name="NodeNumber">DWORD</field>
<field name="NumaNode">}</field>
<field name="Cache">CACHE_DESCRIPTOR</field>
<field name="Reserved[2]">ULONGLONG</field>
  };
  } SYSTEM_LOGICAL_PROCESSOR_INFORMATION, *PSYSTEM_LOGICAL_PROCESSOR_INFORMATION;

<struct name="_MEMORY_BASIC_INFORMATION">
<field name="BaseAddress">PVOID</field>
<field name="AllocationBase">PVOID</field>
<field name="AllocationProtect">DWORD</field>
<field name="RegionSize">SIZE_T</field>
<field name="State">DWORD</field>
<field name="Protect">DWORD</field>
<field name="Type">DWORD</field>
</struct>
<typedefprev id="MEMORY_BASIC_INFORMATION"/>
<typedefptrprev id="PMEMORY_BASIC_INFORMATION"/>

<struct name="_MEMORY_BASIC_INFORMATION32">
<field name="BaseAddress">DWORD</field>
<field name="AllocationBase">DWORD</field>
<field name="AllocationProtect">DWORD</field>
<field name="RegionSize">DWORD</field>
<field name="State">DWORD</field>
<field name="Protect">DWORD</field>
<field name="Type">DWORD</field>
</struct>
<typedefprev id="MEMORY_BASIC_INFORMATION32"/>
<typedefptrprev id="PMEMORY_BASIC_INFORMATION32"/>

<struct name="__declspec(align(16)) _MEMORY_BASIC_INFORMATION64">
  ULONGLONG BaseAddress;
  ULONGLONG AllocationBase;
  DWORD     AllocationProtect;
  DWORD     __alignment1;
  ULONGLONG RegionSize;
  DWORD     State;
  DWORD     Protect;
  DWORD     Type;
  DWORD     __alignment2;
  } MEMORY_BASIC_INFORMATION64, *PMEMORY_BASIC_INFORMATION64;
<struct name="_FILE_NOTIFY_INFORMATION">
<field name="NextEntryOffset">DWORD</field>
<field name="Action">DWORD</field>
<field name="FileNameLength">DWORD</field>
<field name="FileName[1]">WCHAR</field>
</struct>
<typedefprev id="FILE_NOTIFY_INFORMATION"/>
<typedefptrprev id="PFILE_NOTIFY_INFORMATION"/>

  typedef union _FILE_SEGMENT_ELEMENT {
  PVOID64 Buffer;
  ULONGLONG Alignment;
  }FILE_SEGMENT_ELEMENT, *PFILE_SEGMENT_ELEMENT;
<struct name="_REPARSE_GUID_DATA_BUFFER">
<field name="ReparseTag">DWORD</field>
<field name="ReparseDataLength">WORD</field>
<field name="Reserved">WORD</field>
<field name="ReparseGuid">GUID</field>
<struct>
  BYTE   DataBuffer[1];
  } GenericReparseBuffer;
  } REPARSE_GUID_DATA_BUFFER, *PREPARSE_GUID_DATA_BUFFER;
  extern const GUID  GUID_MAX_POWER_SAVINGS;

  extern const GUID  GUID_MIN_POWER_SAVINGS;

  extern const GUID  GUID_TYPICAL_POWER_SAVINGS;
  extern const GUID  NO_SUBGROUP_GUID;
  extern const GUID  ALL_POWERSCHEMES_GUID;
  extern const GUID  GUID_POWERSCHEME_PERSONALITY;

  extern const GUID  GUID_ACTIVE_POWERSCHEME;

  extern const GUID  GUID_VIDEO_SUBGROUP;
  extern const GUID  GUID_VIDEO_POWERDOWN_TIMEOUT;
  extern const GUID  GUID_VIDEO_ADAPTIVE_POWERDOWN;
  extern const GUID  GUID_MONITOR_POWER_ON;
  extern const GUID  GUID_DISK_SUBGROUP;
  extern const GUID  GUID_DISK_POWERDOWN_TIMEOUT;
  extern const GUID  GUID_DISK_ADAPTIVE_POWERDOWN;

  extern const GUID  GUID_SLEEP_SUBGROUP;
  extern const GUID  GUID_SLEEP_IDLE_THRESHOLD;


  extern const GUID  GUID_STANDBY_TIMEOUT;
  extern const GUID  GUID_HIBERNATE_TIMEOUT;
  extern const GUID  GUID_HIBERNATE_FASTS4_POLICY;

  extern const GUID  GUID_CRITICAL_POWER_TRANSITION;
  extern const GUID  GUID_SYSTEM_AWAYMODE;
  extern const GUID  GUID_ALLOW_AWAYMODE;
  extern const GUID  GUID_ALLOW_STANDBY_STATES;

  extern const GUID  GUID_ALLOW_RTC_WAKE;

  extern const GUID  GUID_SYSTEM_BUTTON_SUBGROUP;

  extern const GUID  GUID_POWERBUTTON_ACTION;
  extern const GUID  GUID_POWERBUTTON_ACTION_FLAGS;
  extern const GUID  GUID_SLEEPBUTTON_ACTION;
  extern const GUID  GUID_SLEEPBUTTON_ACTION_FLAGS;

  extern const GUID  GUID_USERINTERFACEBUTTON_ACTION;
  extern const GUID  GUID_LIDCLOSE_ACTION;
  extern const GUID  GUID_LIDCLOSE_ACTION_FLAGS;
  extern const GUID  GUID_LIDOPEN_POWERSTATE;

  extern const GUID  GUID_BATTERY_SUBGROUP;

  extern const GUID  GUID_BATTERY_DISCHARGE_ACTION_0;
  extern const GUID  GUID_BATTERY_DISCHARGE_LEVEL_0;
  extern const GUID  GUID_BATTERY_DISCHARGE_FLAGS_0;

  extern const GUID  GUID_BATTERY_DISCHARGE_ACTION_1;
  extern const GUID  GUID_BATTERY_DISCHARGE_LEVEL_1;
  extern const GUID  GUID_BATTERY_DISCHARGE_FLAGS_1;

  extern const GUID  GUID_BATTERY_DISCHARGE_ACTION_2;
  extern const GUID  GUID_BATTERY_DISCHARGE_LEVEL_2;
  extern const GUID  GUID_BATTERY_DISCHARGE_FLAGS_2;

  extern const GUID  GUID_BATTERY_DISCHARGE_ACTION_3;
  extern const GUID  GUID_BATTERY_DISCHARGE_LEVEL_3;
  extern const GUID  GUID_BATTERY_DISCHARGE_FLAGS_3;

  extern const GUID  GUID_PROCESSOR_SETTINGS_SUBGROUP;
  extern const GUID  GUID_PROCESSOR_THROTTLE_POLICY;
  extern const GUID  GUID_PROCESSOR_THROTTLE_MAXIMUM;
  extern const GUID  GUID_PROCESSOR_THROTTLE_MINIMUM;
  extern const GUID  GUID_PROCESSOR_IDLESTATE_POLICY;
  extern const GUID  GUID_PROCESSOR_PERFSTATE_POLICY;
  extern const GUID  GUID_SYSTEM_COOLING_POLICY;

  extern const GUID  GUID_LOCK_CONSOLE_ON_WAKE;
  extern const GUID  GUID_ACDC_POWER_SOURCE;

  extern const GUID  GUID_LIDSWITCH_STATE_CHANGE;
  extern const GUID  GUID_BATTERY_PERCENTAGE_REMAINING;

  extern const GUID  GUID_IDLE_BACKGROUND_TASK;

  extern const GUID  GUID_BACKGROUND_TASK_NOTIFICATION;
  extern const GUID  GUID_APPLAUNCH_BUTTON;
  extern const GUID  GUID_PCIEXPRESS_SETTINGS_SUBGROUP;
  extern const GUID  GUID_PCIEXPRESS_ASPM_POLICY;
  typedef enum _SYSTEM_POWER_STATE {
  PowerSystemUnspecified = 0,
  PowerSystemWorking     = 1,
  PowerSystemSleeping1   = 2,
  PowerSystemSleeping2   = 3,
  PowerSystemSleeping3   = 4,
  PowerSystemHibernate   = 5,
  PowerSystemShutdown    = 6,
  PowerSystemMaximum     = 7
  } SYSTEM_POWER_STATE, *PSYSTEM_POWER_STATE;
  typedef enum {
  PowerActionNone = 0,
  PowerActionReserved,
  PowerActionSleep,
  PowerActionHibernate,
  PowerActionShutdown,
  PowerActionShutdownReset,
  PowerActionShutdownOff,
  PowerActionWarmEject
  } POWER_ACTION, *PPOWER_ACTION;

  typedef enum _DEVICE_POWER_STATE {
  PowerDeviceUnspecified = 0,
  PowerDeviceD0,
  PowerDeviceD1,
  PowerDeviceD2,
  PowerDeviceD3,
  PowerDeviceMaximum
  } DEVICE_POWER_STATE, *PDEVICE_POWER_STATE;
  typedef DWORD EXECUTION_STATE;

  typedef enum {
  LT_DONT_CARE,
  LT_LOWEST_LATENCY
  } LATENCY_TIME;

<struct name="CM_Power_Data_s">
<field name="PD_Size">DWORD</field>
<field name="PD_MostRecentPowerState">DEVICE_POWER_STATE</field>
<field name="PD_Capabilities">DWORD</field>
<field name="PD_D1Latency">DWORD</field>
<field name="PD_D2Latency">DWORD</field>
<field name="PD_D3Latency">DWORD</field>
<field name="PD_PowerStateMapping[7]">DEVICE_POWER_STATE</field>
<field name="PD_DeepestSystemWake">SYSTEM_POWER_STATE</field>
</struct>
<typedefprev id="CM_POWER_DATA"/>
<typedefptrprev id="PCM_POWER_DATA"/>
  typedef enum {
  SystemPowerPolicyAc,
  SystemPowerPolicyDc,
  VerifySystemPolicyAc,
  VerifySystemPolicyDc,
  SystemPowerCapabilities,
  SystemBatteryState,
  SystemPowerStateHandler,
  ProcessorStateHandler,
  SystemPowerPolicyCurrent,
  AdministratorPowerPolicy,
  SystemReserveHiberFile,
  ProcessorInformation,
  SystemPowerInformation,
  ProcessorStateHandler2,
  LastWakeTime,
  LastSleepTime,
  SystemExecutionState,
  SystemPowerStateNotifyHandler,
  ProcessorPowerPolicyAc,
  ProcessorPowerPolicyDc,
  VerifyProcessorPowerPolicyAc,
  VerifyProcessorPowerPolicyDc,
  ProcessorPowerPolicyCurrent,
  SystemPowerStateLogging,
  SystemPowerLoggingEntry,
  SetPowerSettingValue,
  NotifyUserPowerSetting,
  GetPowerTransitionVetoes,
  SetPowerTransitionVeto,
  SystemVideoState,
  TraceApplicationPowerMessage,
  TraceApplicationPowerMessageEnd,
  ProcessorPerfStates,
  ProcessorIdleStates,
  ProcessorThrottleStates,
  SystemWakeSource,
  SystemHiberFileInformation,
  TraceServicePowerMessage,
  ProcessorLoad,
  PowerShutdownNotification
  } POWER_INFORMATION_LEVEL;


<struct name="_PO_TRANSITION_VETO_REASON">
<field name="ResourceId">DWORD</field>
<field name="ModuleNameOffset">DWORD</field>
</struct>
<typedefprev id="PO_TRANSITION_VETO_REASON"/>
<typedefptrprev id="PPO_TRANSITION_VETO_REASON"/>

<struct name="_PO_TRANSITION_VETO_WINDOW">
<field name="Handle">HANDLE</field>
</struct>
<typedefprev id="PO_TRANSITION_VETO_WINDOW"/>
<typedefptrprev id="PPO_TRANSITION_VETO_WINDOW"/>

<struct name="_PO_TRANSITION_VETO_SERVICE">
<field name="ServiceNameOffset">DWORD</field>
</struct>
<typedefprev id="PO_TRANSITION_VETO_SERVICE"/>
<typedefptrprev id="PPO_TRANSITION_VETO_SERVICE"/>
<struct name="_PO_TRANSITION_VETO">
<field name="Type">DWORD</field>
<field name="Reason">PO_TRANSITION_VETO_REASON</field>
<field name="ProcessId">DWORD</field>
  union {
  PO_TRANSITION_VETO_WINDOW Window;
  PO_TRANSITION_VETO_SERVICE Service;

  };
  } PO_TRANSITION_VETO, *PPO_TRANSITION_VETO;

<struct name="_PO_TRANSITION_VETOES">
<field name="Count">DWORD</field>
<field name="Vetoes[1]">PO_TRANSITION_VETO</field>
</struct>
<typedefprev id="PO_TRANSITION_VETOES"/>
<typedefptrprev id="PPO_TRANSITION_VETOES"/>
  typedef enum {
  PoAc,
  PoDc,
  PoHot,
  PoConditionMaximum
  } SYSTEM_POWER_CONDITION;

<struct>





  DWORD       Version;





  GUID        Guid;






  SYSTEM_POWER_CONDITION PowerCondition;




  DWORD       DataLength;




  BYTE    Data[1];
  } SET_POWER_SETTING_VALUE, *PSET_POWER_SETTING_VALUE;
<struct>
<field name="Guid">GUID</field>
  } NOTIFY_USER_POWER_SETTING, *PNOTIFY_USER_POWER_SETTING;

<struct name="_APPLICATIONLAUNCH_SETTING_VALUE">





  LARGE_INTEGER       ActivationTime;




  DWORD               Flags;




  DWORD               ButtonInstanceID;
  } APPLICATIONLAUNCH_SETTING_VALUE, *PAPPLICATIONLAUNCH_SETTING_VALUE;
  typedef enum {
  PlatformRoleUnspecified = 0,
  PlatformRoleDesktop,
  PlatformRoleMobile,
  PlatformRoleWorkstation,
  PlatformRoleEnterpriseServer,
  PlatformRoleSOHOServer,
  PlatformRoleAppliancePC,
  PlatformRolePerformanceServer,
  PlatformRoleMaximum
  } POWER_PLATFORM_ROLE;
  typedef enum {
  DeviceWakeSourceType,
  FixedWakeSourceType
  } PO_WAKE_SOURCE_TYPE, *PPO_WAKE_SOURCE_TYPE;

  typedef enum {
  FixedWakeSourcePowerButton,
  FixedWakeSourceSleepButton,
  FixedWakeSourceRtc
  } PO_FIXED_WAKE_SOURCE_TYPE, *PPO_FIXED_WAKE_SOURCE_TYPE;

<struct name="_PO_WAKE_SOURCE_HEADER">
<field name="Type">PO_WAKE_SOURCE_TYPE</field>
<field name="Size">DWORD</field>
</struct>
<typedefprev id="PO_WAKE_SOURCE_HEADER"/>
<typedefptrprev id="PPO_WAKE_SOURCE_HEADER"/>

<struct name="_PO_WAKE_SOURCE_DEVICE">
<field name="Header">PO_WAKE_SOURCE_HEADER</field>
<field name="InstancePath[1]">WCHAR</field>
</struct>
<typedefprev id="PO_WAKE_SOURCE_DEVICE"/>
<typedefptrprev id="PPO_WAKE_SOURCE_DEVICE"/>

<struct name="_PO_WAKE_SOURCE_FIXED">
<field name="Header">PO_WAKE_SOURCE_HEADER</field>
<field name="FixedWakeSourceType">PO_FIXED_WAKE_SOURCE_TYPE</field>
</struct>
<typedefprev id="PO_WAKE_SOURCE_FIXED"/>
<typedefptrprev id="PPO_WAKE_SOURCE_FIXED"/>

<struct name="_PO_WAKE_SOURCE_INFO">
<field name="Count">DWORD</field>
<field name="Offsets[1]">DWORD</field>
</struct>
<typedefprev id="PO_WAKE_SOURCE_INFO"/>
<typedefptrprev id="PPO_WAKE_SOURCE_INFO"/>

<struct name="_PO_WAKE_SOURCE_HISTORY">
<field name="Count">DWORD</field>
<field name="Offsets[1]">DWORD</field>
</struct>
<typedefprev id="PO_WAKE_SOURCE_HISTORY"/>
<typedefptrprev id="PPO_WAKE_SOURCE_HISTORY"/>

<struct>
<field name="Granularity">DWORD</field>
<field name="Capacity">DWORD</field>
  } BATTERY_REPORTING_SCALE, *PBATTERY_REPORTING_SCALE;

<struct>
<field name="Enabled">BOOLEAN</field>
<field name="PercentBusy[32]">BYTE</field>
  } PPM_SIMULATED_PROCESSOR_LOAD, *PPPM_SIMULATED_PROCESSOR_LOAD;

<struct>
<field name="Frequency">DWORD</field>
<field name="Flags">DWORD</field>
<field name="PercentFrequency">DWORD</field>
  } PPM_WMI_LEGACY_PERFSTATE, *PPPM_WMI_LEGACY_PERFSTATE;

<struct>
<field name="Latency">DWORD</field>
<field name="Power">DWORD</field>
<field name="TimeCheck">DWORD</field>
<field name="PromotePercent">BYTE</field>
<field name="DemotePercent">BYTE</field>
<field name="StateType">BYTE</field>
<field name="Reserved">BYTE</field>
<field name="StateFlags">DWORD</field>
<field name="Context">DWORD</field>
<field name="IdleHandler">DWORD</field>
<field name="Reserved1">DWORD</field>
  } PPM_WMI_IDLE_STATE, *PPPM_WMI_IDLE_STATE;

<struct>
<field name="Type">DWORD</field>
<field name="Count">DWORD</field>
<field name="TargetState">DWORD</field>
<field name="OldState">DWORD</field>
<field name="TargetProcessors">DWORD64</field>
<field name="State[1]">PPM_WMI_IDLE_STATE</field>
  } PPM_WMI_IDLE_STATES, *PPPM_WMI_IDLE_STATES;

<struct>
<field name="Frequency">DWORD</field>
<field name="Power">DWORD</field>
<field name="PercentFrequency">BYTE</field>
<field name="IncreaseLevel">BYTE</field>
<field name="DecreaseLevel">BYTE</field>
<field name="Type">BYTE</field>
<field name="IncreaseTime">DWORD</field>
<field name="DecreaseTime">DWORD</field>
<field name="Control">DWORD64</field>
<field name="Status">DWORD64</field>
<field name="HitCount">DWORD</field>
<field name="Reserved1">DWORD</field>
<field name="Reserved2">DWORD64</field>
<field name="Reserved3">DWORD64</field>
  } PPM_WMI_PERF_STATE, *PPPM_WMI_PERF_STATE;

<struct>
<field name="Count">DWORD</field>
<field name="MaxFrequency">DWORD</field>
<field name="CurrentState">DWORD</field>
<field name="MaxPerfState">DWORD</field>
<field name="MinPerfState">DWORD</field>
<field name="LowestPerfState">DWORD</field>
<field name="ThermalConstraint">DWORD</field>
<field name="BusyAdjThreshold">BYTE</field>
<field name="PolicyType">BYTE</field>
<field name="Type">BYTE</field>
<field name="Reserved">BYTE</field>
<field name="TimerInterval">DWORD</field>
<field name="TargetProcessors">DWORD64</field>
<field name="PStateHandler">DWORD</field>
<field name="PStateContext">DWORD</field>
<field name="TStateHandler">DWORD</field>
<field name="TStateContext">DWORD</field>
<field name="FeedbackHandler">DWORD</field>
<field name="Reserved1">DWORD</field>
<field name="Reserved2">DWORD64</field>
<field name="State[1]">PPM_WMI_PERF_STATE</field>
  } PPM_WMI_PERF_STATES, *PPPM_WMI_PERF_STATES;
<struct>
<field name="IdleTransitions">DWORD</field>
<field name="FailedTransitions">DWORD</field>
<field name="InvalidBucketIndex">DWORD</field>
<field name="TotalTime">DWORD64</field>
<field name="IdleTimeBuckets[6]">DWORD</field>
  } PPM_IDLE_STATE_ACCOUNTING, *PPPM_IDLE_STATE_ACCOUNTING;

<struct>
<field name="StateCount">DWORD</field>
<field name="TotalTransitions">DWORD</field>
<field name="ResetCount">DWORD</field>
<field name="StartTime">DWORD64</field>
<field name="State[1]">PPM_IDLE_STATE_ACCOUNTING</field>
  } PPM_IDLE_ACCOUNTING, *PPPM_IDLE_ACCOUNTING;
  extern const GUID  PPM_PERFSTATE_CHANGE_GUID;

  extern const GUID  PPM_PERFSTATE_DOMAIN_CHANGE_GUID;

  extern const GUID  PPM_IDLESTATE_CHANGE_GUID;

  extern const GUID  PPM_PERFSTATES_DATA_GUID;

  extern const GUID  PPM_IDLESTATES_DATA_GUID;

  extern const GUID  PPM_IDLE_ACCOUNTING_GUID;

  extern const GUID  PPM_THERMALCONSTRAINT_GUID;

  extern const GUID  PPM_PERFMON_PERFSTATE_GUID;

  extern const GUID  PPM_THERMAL_POLICY_CHANGE_GUID;

<struct>
<field name="State">DWORD</field>
<field name="Status">DWORD</field>
<field name="Latency">DWORD</field>
<field name="Speed">DWORD</field>
<field name="Processor">DWORD</field>
  } PPM_PERFSTATE_EVENT, *PPPM_PERFSTATE_EVENT;

<struct>
<field name="State">DWORD</field>
<field name="Latency">DWORD</field>
<field name="Speed">DWORD</field>
<field name="Processors">DWORD64</field>
  } PPM_PERFSTATE_DOMAIN_EVENT, *PPPM_PERFSTATE_DOMAIN_EVENT;

<struct>
<field name="NewState">DWORD</field>
<field name="OldState">DWORD</field>
<field name="Processors">DWORD64</field>
  } PPM_IDLESTATE_EVENT, *PPPM_IDLESTATE_EVENT;

<struct>
<field name="ThermalConstraint">DWORD</field>
<field name="Processors">DWORD64</field>
  } PPM_THERMALCHANGE_EVENT, *PPPM_THERMALCHANGE_EVENT;

  #pragma warning(push)
  #pragma warning(disable:4121)

<struct>
<field name="Mode">BYTE</field>
<field name="Processors">DWORD64</field>
  } PPM_THERMAL_POLICY_EVENT, *PPPM_THERMAL_POLICY_EVENT;

  #pragma warning(pop)

<struct>
<field name="Action">POWER_ACTION</field>
<field name="Flags">DWORD</field>
<field name="EventCode">DWORD</field>
  } POWER_ACTION_POLICY, *PPOWER_ACTION_POLICY;
<struct>
<field name="Enable">BOOLEAN</field>
<field name="Spare[3]">BYTE</field>
<field name="BatteryLevel">DWORD</field>
<field name="PowerPolicy">POWER_ACTION_POLICY</field>
<field name="MinSystemState">SYSTEM_POWER_STATE</field>
  } SYSTEM_POWER_LEVEL, *PSYSTEM_POWER_LEVEL;

<struct name="_SYSTEM_POWER_POLICY">
<field name="Revision">DWORD</field>

  POWER_ACTION_POLICY     PowerButton;
  POWER_ACTION_POLICY     SleepButton;
  POWER_ACTION_POLICY     LidClose;
  SYSTEM_POWER_STATE      LidOpenWake;
  DWORD                   Reserved;


  POWER_ACTION_POLICY     Idle;
  DWORD                   IdleTimeout;
  BYTE                    IdleSensitivity;

  BYTE                    DynamicThrottle;
  BYTE                    Spare2[2];


  SYSTEM_POWER_STATE      MinSleep;
  SYSTEM_POWER_STATE      MaxSleep;
  SYSTEM_POWER_STATE      ReducedLatencySleep;
  DWORD                   WinLogonFlags;

  DWORD                   Spare3;



  DWORD                   DozeS4Timeout;


  DWORD                   BroadcastCapacityResolution;
  SYSTEM_POWER_LEVEL      DischargePolicy[4];


  DWORD                   VideoTimeout;
  BOOLEAN                 VideoDimDisplay;
  DWORD                   VideoReserved[3];


  DWORD                   SpindownTimeout;


  BOOLEAN                 OptimizeForPower;
  BYTE                    FanThrottleTolerance;
  BYTE                    ForcedThrottle;
  BYTE                    MinThrottle;
  POWER_ACTION_POLICY     OverThrottled;

  } SYSTEM_POWER_POLICY, *PSYSTEM_POWER_POLICY;
<struct>
<field name="TimeCheck">DWORD</field>
<field name="DemotePercent">BYTE</field>
<field name="PromotePercent">BYTE</field>
<field name="Spare[2]">BYTE</field>
  } PROCESSOR_IDLESTATE_INFO, *PPROCESSOR_IDLESTATE_INFO;

<struct>
<field name="Revision">WORD</field>
  union {
  WORD   AsWORD  ;
<struct>
  WORD   AllowScaling : 1;
  WORD   Disabled : 1;
  WORD   Reserved : 14;
  };
  } Flags;

  DWORD PolicyCount;
  PROCESSOR_IDLESTATE_INFO Policy[0x3];
  } PROCESSOR_IDLESTATE_POLICY, *PPROCESSOR_IDLESTATE_POLICY;

<struct name="_PROCESSOR_POWER_POLICY_INFO">


  DWORD                   TimeCheck;
  DWORD                   DemoteLimit;
  DWORD                   PromoteLimit;


  BYTE                    DemotePercent;
  BYTE                    PromotePercent;
  BYTE                    Spare[2];


  DWORD                   AllowDemotion:1;
  DWORD                   AllowPromotion:1;
  DWORD                   Reserved:30;

  } PROCESSOR_POWER_POLICY_INFO, *PPROCESSOR_POWER_POLICY_INFO;
<struct name="_PROCESSOR_POWER_POLICY">
<field name="Revision">DWORD</field>

  BYTE                        DynamicThrottle;
  BYTE                        Spare[3];


  DWORD                       DisableCStates:1;
  DWORD                       Reserved:31;




  DWORD                       PolicyCount;
  PROCESSOR_POWER_POLICY_INFO Policy[3];

  } PROCESSOR_POWER_POLICY, *PPROCESSOR_POWER_POLICY;
<struct>
<field name="Revision">DWORD</field>
<field name="MaxThrottle">BYTE</field>
<field name="MinThrottle">BYTE</field>
<field name="BusyAdjThreshold">BYTE</field>
  union {
  BYTE  Spare;
  union {
  BYTE  AsBYTE ;
<struct>
  BYTE  NoDomainAccounting : 1;
  BYTE  IncreasePolicy: 2;
  BYTE  DecreasePolicy: 2;
  BYTE  Reserved : 3;
  };
  } Flags;
  };

  DWORD TimeCheck;
  DWORD IncreaseTime;
  DWORD DecreaseTime;
  DWORD IncreasePercent;
  DWORD DecreasePercent;
  } PROCESSOR_PERFSTATE_POLICY, *PPROCESSOR_PERFSTATE_POLICY;
<struct name="_ADMINISTRATOR_POWER_POLICY">


  SYSTEM_POWER_STATE      MinSleep;
  SYSTEM_POWER_STATE      MaxSleep;


  DWORD                   MinVideoTimeout;
  DWORD                   MaxVideoTimeout;


  DWORD                   MinSpindownTimeout;
  DWORD                   MaxSpindownTimeout;
  } ADMINISTRATOR_POWER_POLICY, *PADMINISTRATOR_POWER_POLICY;

<struct>

  BOOLEAN             PowerButtonPresent;
  BOOLEAN             SleepButtonPresent;
  BOOLEAN             LidPresent;
  BOOLEAN             SystemS1;
  BOOLEAN             SystemS2;
  BOOLEAN             SystemS3;
  BOOLEAN             SystemS4;
  BOOLEAN             SystemS5;
  BOOLEAN             HiberFilePresent;
  BOOLEAN             FullWake;
  BOOLEAN             VideoDimPresent;
  BOOLEAN             ApmPresent;
  BOOLEAN             UpsPresent;


  BOOLEAN             ThermalControl;
  BOOLEAN             ProcessorThrottle;
  BYTE                ProcessorMinThrottle;


  BYTE                ProcessorMaxThrottle;
  BOOLEAN             FastSystemS4;
  BYTE                spare2[3];

  BOOLEAN             DiskSpinDown;
  BYTE                spare3[8];


  BOOLEAN             SystemBatteriesPresent;
  BOOLEAN             BatteriesAreShortTerm;
  BATTERY_REPORTING_SCALE BatteryScale[3];


  SYSTEM_POWER_STATE  AcOnLineWake;
  SYSTEM_POWER_STATE  SoftLidWake;
  SYSTEM_POWER_STATE  RtcWake;
  SYSTEM_POWER_STATE  MinDeviceWakeState;
  SYSTEM_POWER_STATE  DefaultLowLatencyWake;
  } SYSTEM_POWER_CAPABILITIES, *PSYSTEM_POWER_CAPABILITIES;

<struct>
<field name="AcOnLine">BOOLEAN</field>
<field name="BatteryPresent">BOOLEAN</field>
<field name="Charging">BOOLEAN</field>
<field name="Discharging">BOOLEAN</field>
<field name="Spare1[4]">BOOLEAN</field>

  DWORD               MaxCapacity;
  DWORD               RemainingCapacity;
  DWORD               Rate;
  DWORD               EstimatedTime;

  DWORD               DefaultAlert1;
  DWORD               DefaultAlert2;
  } SYSTEM_BATTERY_STATE, *PSYSTEM_BATTERY_STATE;

  #pragma pack(push,4)

  #pragma pack(push,2)
<struct name="_IMAGE_DOS_HEADER">
<field name="e_magic">WORD</field>
<field name="e_cblp">WORD</field>
<field name="e_cp">WORD</field>
<field name="e_crlc">WORD</field>
<field name="e_cparhdr">WORD</field>
<field name="e_minalloc">WORD</field>
<field name="e_maxalloc">WORD</field>
<field name="e_ss">WORD</field>
<field name="e_sp">WORD</field>
<field name="e_csum">WORD</field>
<field name="e_ip">WORD</field>
<field name="e_cs">WORD</field>
<field name="e_lfarlc">WORD</field>
<field name="e_ovno">WORD</field>
<field name="e_res[4]">WORD</field>
<field name="e_oemid">WORD</field>
<field name="e_oeminfo">WORD</field>
<field name="e_res2[10]">WORD</field>
<field name="e_lfanew">LONG</field>
</struct>
<typedefprev id="IMAGE_DOS_HEADER"/>
<typedefptrprev id="PIMAGE_DOS_HEADER"/>

<struct name="_IMAGE_OS2_HEADER">
<field name="ne_magic">WORD</field>
<field name="ne_ver">CHAR</field>
<field name="ne_rev">CHAR</field>
<field name="ne_enttab">WORD</field>
<field name="ne_cbenttab">WORD</field>
<field name="ne_crc">LONG</field>
<field name="ne_flags">WORD</field>
<field name="ne_autodata">WORD</field>
<field name="ne_heap">WORD</field>
<field name="ne_stack">WORD</field>
<field name="ne_csip">LONG</field>
<field name="ne_sssp">LONG</field>
<field name="ne_cseg">WORD</field>
<field name="ne_cmod">WORD</field>
<field name="ne_cbnrestab">WORD</field>
<field name="ne_segtab">WORD</field>
<field name="ne_rsrctab">WORD</field>
<field name="ne_restab">WORD</field>
<field name="ne_modtab">WORD</field>
<field name="ne_imptab">WORD</field>
<field name="ne_nrestab">LONG</field>
<field name="ne_cmovent">WORD</field>
<field name="ne_align">WORD</field>
<field name="ne_cres">WORD</field>
<field name="ne_exetyp">BYTE</field>
<field name="ne_flagsothers">BYTE</field>
<field name="ne_pretthunks">WORD</field>
<field name="ne_psegrefbytes">WORD</field>
<field name="ne_swaparea">WORD</field>
<field name="ne_expver">WORD</field>
</struct>
<typedefprev id="IMAGE_OS2_HEADER"/>
<typedefptrprev id="PIMAGE_OS2_HEADER"/>

<struct name="_IMAGE_VXD_HEADER">
<field name="e32_magic">WORD</field>
<field name="e32_border">BYTE</field>
<field name="e32_worder">BYTE</field>
<field name="e32_level">DWORD</field>
<field name="e32_cpu">WORD</field>
<field name="e32_os">WORD</field>
<field name="e32_ver">DWORD</field>
<field name="e32_mflags">DWORD</field>
<field name="e32_mpages">DWORD</field>
<field name="e32_startobj">DWORD</field>
<field name="e32_eip">DWORD</field>
<field name="e32_stackobj">DWORD</field>
<field name="e32_esp">DWORD</field>
<field name="e32_pagesize">DWORD</field>
<field name="e32_lastpagesize">DWORD</field>
<field name="e32_fixupsize">DWORD</field>
<field name="e32_fixupsum">DWORD</field>
<field name="e32_ldrsize">DWORD</field>
<field name="e32_ldrsum">DWORD</field>
<field name="e32_objtab">DWORD</field>
<field name="e32_objcnt">DWORD</field>
<field name="e32_objmap">DWORD</field>
<field name="e32_itermap">DWORD</field>
<field name="e32_rsrctab">DWORD</field>
<field name="e32_rsrccnt">DWORD</field>
<field name="e32_restab">DWORD</field>
<field name="e32_enttab">DWORD</field>
<field name="e32_dirtab">DWORD</field>
<field name="e32_dircnt">DWORD</field>
<field name="e32_fpagetab">DWORD</field>
<field name="e32_frectab">DWORD</field>
<field name="e32_impmod">DWORD</field>
<field name="e32_impmodcnt">DWORD</field>
<field name="e32_impproc">DWORD</field>
<field name="e32_pagesum">DWORD</field>
<field name="e32_datapage">DWORD</field>
<field name="e32_preload">DWORD</field>
<field name="e32_nrestab">DWORD</field>
<field name="e32_cbnrestab">DWORD</field>
<field name="e32_nressum">DWORD</field>
<field name="e32_autodata">DWORD</field>
<field name="e32_debuginfo">DWORD</field>
<field name="e32_debuglen">DWORD</field>
<field name="e32_instpreload">DWORD</field>
<field name="e32_instdemand">DWORD</field>
<field name="e32_heapsize">DWORD</field>
<field name="e32_res3[12]">BYTE</field>
<field name="e32_winresoff">DWORD</field>
<field name="e32_winreslen">DWORD</field>
<field name="e32_devid">WORD</field>
<field name="e32_ddkver">WORD</field>
</struct>
<typedefprev id="IMAGE_VXD_HEADER"/>
<typedefptrprev id="PIMAGE_VXD_HEADER"/>

  #pragma pack(pop)

<struct name="_IMAGE_FILE_HEADER">
<field name="Machine">WORD</field>
<field name="NumberOfSections">WORD</field>
<field name="TimeDateStamp">DWORD</field>
<field name="PointerToSymbolTable">DWORD</field>
<field name="NumberOfSymbols">DWORD</field>
<field name="SizeOfOptionalHeader">WORD</field>
<field name="Characteristics">WORD</field>
</struct>
<typedefprev id="IMAGE_FILE_HEADER"/>
<typedefptrprev id="PIMAGE_FILE_HEADER"/>
<struct name="_IMAGE_DATA_DIRECTORY">
<field name="VirtualAddress">DWORD</field>
<field name="Size">DWORD</field>
</struct>
<typedefprev id="IMAGE_DATA_DIRECTORY"/>
<typedefptrprev id="PIMAGE_DATA_DIRECTORY"/>
<struct name="_IMAGE_OPTIONAL_HEADER">
<field name="Magic">WORD</field>
<field name="MajorLinkerVersion">BYTE</field>
<field name="MinorLinkerVersion">BYTE</field>
<field name="SizeOfCode">DWORD</field>
<field name="SizeOfInitializedData">DWORD</field>
<field name="SizeOfUninitializedData">DWORD</field>
<field name="AddressOfEntryPoint">DWORD</field>
<field name="BaseOfCode">DWORD</field>
<field name="BaseOfData">DWORD</field>
<field name="ImageBase">DWORD</field>
<field name="SectionAlignment">DWORD</field>
<field name="FileAlignment">DWORD</field>
<field name="MajorOperatingSystemVersion">WORD</field>
<field name="MinorOperatingSystemVersion">WORD</field>
<field name="MajorImageVersion">WORD</field>
<field name="MinorImageVersion">WORD</field>
<field name="MajorSubsystemVersion">WORD</field>
<field name="MinorSubsystemVersion">WORD</field>
<field name="Win32VersionValue">DWORD</field>
<field name="SizeOfImage">DWORD</field>
<field name="SizeOfHeaders">DWORD</field>
<field name="CheckSum">DWORD</field>
<field name="Subsystem">WORD</field>
<field name="DllCharacteristics">WORD</field>
<field name="SizeOfStackReserve">DWORD</field>
<field name="SizeOfStackCommit">DWORD</field>
<field name="SizeOfHeapReserve">DWORD</field>
<field name="SizeOfHeapCommit">DWORD</field>
<field name="LoaderFlags">DWORD</field>
<field name="NumberOfRvaAndSizes">DWORD</field>
<field name="DataDirectory[16]">IMAGE_DATA_DIRECTORY</field>
</struct>
<typedefprev id="IMAGE_OPTIONAL_HEADER32"/>
<typedefptrprev id="PIMAGE_OPTIONAL_HEADER32"/>

<struct name="_IMAGE_ROM_OPTIONAL_HEADER">
<field name="Magic">WORD</field>
<field name="MajorLinkerVersion">BYTE</field>
<field name="MinorLinkerVersion">BYTE</field>
<field name="SizeOfCode">DWORD</field>
<field name="SizeOfInitializedData">DWORD</field>
<field name="SizeOfUninitializedData">DWORD</field>
<field name="AddressOfEntryPoint">DWORD</field>
<field name="BaseOfCode">DWORD</field>
<field name="BaseOfData">DWORD</field>
<field name="BaseOfBss">DWORD</field>
<field name="GprMask">DWORD</field>
<field name="CprMask[4]">DWORD</field>
<field name="GpValue">DWORD</field>
</struct>
<typedefprev id="IMAGE_ROM_OPTIONAL_HEADER"/>
<typedefptrprev id="PIMAGE_ROM_OPTIONAL_HEADER"/>

<struct name="_IMAGE_OPTIONAL_HEADER64">
<field name="Magic">WORD</field>
<field name="MajorLinkerVersion">BYTE</field>
<field name="MinorLinkerVersion">BYTE</field>
<field name="SizeOfCode">DWORD</field>
<field name="SizeOfInitializedData">DWORD</field>
<field name="SizeOfUninitializedData">DWORD</field>
<field name="AddressOfEntryPoint">DWORD</field>
<field name="BaseOfCode">DWORD</field>
<field name="ImageBase">ULONGLONG</field>
<field name="SectionAlignment">DWORD</field>
<field name="FileAlignment">DWORD</field>
<field name="MajorOperatingSystemVersion">WORD</field>
<field name="MinorOperatingSystemVersion">WORD</field>
<field name="MajorImageVersion">WORD</field>
<field name="MinorImageVersion">WORD</field>
<field name="MajorSubsystemVersion">WORD</field>
<field name="MinorSubsystemVersion">WORD</field>
<field name="Win32VersionValue">DWORD</field>
<field name="SizeOfImage">DWORD</field>
<field name="SizeOfHeaders">DWORD</field>
<field name="CheckSum">DWORD</field>
<field name="Subsystem">WORD</field>
<field name="DllCharacteristics">WORD</field>
<field name="SizeOfStackReserve">ULONGLONG</field>
<field name="SizeOfStackCommit">ULONGLONG</field>
<field name="SizeOfHeapReserve">ULONGLONG</field>
<field name="SizeOfHeapCommit">ULONGLONG</field>
<field name="LoaderFlags">DWORD</field>
<field name="NumberOfRvaAndSizes">DWORD</field>
<field name="DataDirectory[16]">IMAGE_DATA_DIRECTORY</field>
</struct>
<typedefprev id="IMAGE_OPTIONAL_HEADER64"/>
<typedefptrprev id="PIMAGE_OPTIONAL_HEADER64"/>
  typedef IMAGE_OPTIONAL_HEADER32             IMAGE_OPTIONAL_HEADER;
  typedef PIMAGE_OPTIONAL_HEADER32            PIMAGE_OPTIONAL_HEADER;
<struct name="_IMAGE_NT_HEADERS64">
<field name="Signature">DWORD</field>
<field name="FileHeader">IMAGE_FILE_HEADER</field>
<field name="OptionalHeader">IMAGE_OPTIONAL_HEADER64</field>
</struct>
<typedefprev id="IMAGE_NT_HEADERS64"/>
<typedefptrprev id="PIMAGE_NT_HEADERS64"/>

<struct name="_IMAGE_NT_HEADERS">
<field name="Signature">DWORD</field>
<field name="FileHeader">IMAGE_FILE_HEADER</field>
<field name="OptionalHeader">IMAGE_OPTIONAL_HEADER32</field>
</struct>
<typedefprev id="IMAGE_NT_HEADERS32"/>
<typedefptrprev id="PIMAGE_NT_HEADERS32"/>

<struct name="_IMAGE_ROM_HEADERS">
<field name="FileHeader">IMAGE_FILE_HEADER</field>
<field name="OptionalHeader">IMAGE_ROM_OPTIONAL_HEADER</field>
</struct>
<typedefprev id="IMAGE_ROM_HEADERS"/>
<typedefptrprev id="PIMAGE_ROM_HEADERS"/>
  typedef IMAGE_NT_HEADERS32                  IMAGE_NT_HEADERS;
  typedef PIMAGE_NT_HEADERS32                 PIMAGE_NT_HEADERS;
<struct name="ANON_OBJECT_HEADER">
<field name="Sig1">WORD</field>
<field name="Sig2">WORD</field>
<field name="Version">WORD</field>
<field name="Machine">WORD</field>
<field name="TimeDateStamp">DWORD</field>
<field name="ClassID">CLSID</field>
<field name="SizeOfData">DWORD</field>
<field name="ANON_OBJECT_HEADER">}</field>
<struct name="ANON_OBJECT_HEADER_V2">
<field name="Sig1">WORD</field>
<field name="Sig2">WORD</field>
<field name="Version">WORD</field>
<field name="Machine">WORD</field>
<field name="TimeDateStamp">DWORD</field>
<field name="ClassID">CLSID</field>
<field name="SizeOfData">DWORD</field>
<field name="Flags">DWORD</field>
<field name="MetaDataSize">DWORD</field>
<field name="MetaDataOffset">DWORD</field>
<field name="ANON_OBJECT_HEADER_V2">}</field>
<struct name="_IMAGE_SECTION_HEADER">
  BYTE    Name[8];
  union {
  DWORD   PhysicalAddress;
  DWORD   VirtualSize;
  } Misc;
  DWORD   VirtualAddress;
  DWORD   SizeOfRawData;
  DWORD   PointerToRawData;
  DWORD   PointerToRelocations;
  DWORD   PointerToLinenumbers;
  WORD    NumberOfRelocations;
  WORD    NumberOfLinenumbers;
  DWORD   Characteristics;
  } IMAGE_SECTION_HEADER, *PIMAGE_SECTION_HEADER;

  #line 1 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\pshpack2.h"
  #pragma warning(disable:4103)

  #pragma pack(push,2)

<struct name="_IMAGE_SYMBOL">
  union {
  BYTE    ShortName[8];
<struct>
<field name="Short">DWORD</field>
<field name="Long">DWORD</field>
<field name="Name">}</field>
<field name="LongName[2]">DWORD</field>
  } N;
  DWORD   Value;
  SHORT   SectionNumber;
  WORD    Type;
  BYTE    StorageClass;
  BYTE    NumberOfAuxSymbols;
  } IMAGE_SYMBOL;
  typedef IMAGE_SYMBOL  *PIMAGE_SYMBOL;
  typedef union _IMAGE_AUX_SYMBOL {
<struct>
<field name="TagIndex">DWORD</field>
  union {
<struct>
<field name="Linenumber">WORD</field>
<field name="Size">WORD</field>
<field name="LnSz">}</field>
<field name="TotalSize">DWORD</field>
<field name="Misc">}</field>
  union {
<struct>
<field name="PointerToLinenumber">DWORD</field>
<field name="PointerToNextFunction">DWORD</field>
<field name="Function">}</field>
<struct>
  WORD     Dimension[4];
  } Array;
  } FcnAry;
  WORD    TvIndex;
  } Sym;
<struct>
  BYTE    Name[18];
  } File;
<struct>
<field name="Length">DWORD</field>
<field name="NumberOfRelocations">WORD</field>
<field name="NumberOfLinenumbers">WORD</field>
<field name="CheckSum">DWORD</field>
<field name="Number">SHORT</field>
<field name="Selection">BYTE</field>
<field name="Section">}</field>
<field name="IMAGE_AUX_SYMBOL">}</field>
  typedef IMAGE_AUX_SYMBOL  *PIMAGE_AUX_SYMBOL;

  typedef enum IMAGE_AUX_SYMBOL_TYPE {
  IMAGE_AUX_SYMBOL_TYPE_TOKEN_DEF = 1,
  } IMAGE_AUX_SYMBOL_TYPE;

  #line 1 "\\program files\\Microsoft SDKs\\Windows\\v6.0A\\Include\\pshpack2.h"
  #pragma warning(disable:4103)

  #pragma pack(push,2)

<struct name="IMAGE_AUX_SYMBOL_TOKEN_DEF">
<field name="bAuxType">BYTE</field>
<field name="bReserved">BYTE</field>
<field name="SymbolTableIndex">DWORD</field>
<field name="rgbReserved[12]">BYTE</field>
<field name="IMAGE_AUX_SYMBOL_TOKEN_DEF">}</field>
  typedef IMAGE_AUX_SYMBOL_TOKEN_DEF  *PIMAGE_AUX_SYMBOL_TOKEN_DEF;

  #line 1 "\\program files\\Microsoft SDKs\\Windows\\v6.0A\\Include\\poppack.h"
  #pragma warning(disable:4103)

  #pragma pack(pop)

<struct name="_IMAGE_RELOCATION">
  union {
  DWORD   VirtualAddress;
  DWORD   RelocCount;
  };
  DWORD   SymbolTableIndex;
  WORD    Type;
  } IMAGE_RELOCATION;
  typedef IMAGE_RELOCATION  *PIMAGE_RELOCATION;




<struct name="_IMAGE_LINENUMBER">
  union {
  DWORD   SymbolTableIndex;
  DWORD   VirtualAddress;
  } Type;
  WORD    Linenumber;
  } IMAGE_LINENUMBER;
  typedef IMAGE_LINENUMBER  *PIMAGE_LINENUMBER;
  #line 1 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\poppack.h"
  #pragma warning(disable:4103)

  #pragma pack(pop)

<struct name="_IMAGE_BASE_RELOCATION">
<field name="VirtualAddress">DWORD</field>
<field name="SizeOfBlock">DWORD</field>
<field name="IMAGE_BASE_RELOCATION">}</field>
  typedef IMAGE_BASE_RELOCATION  * PIMAGE_BASE_RELOCATION;

<struct name="_IMAGE_ARCHIVE_MEMBER_HEADER">
  BYTE     Name[16];
  BYTE     Date[12];
  BYTE     UserID[6];
  BYTE     GroupID[6];
  BYTE     Mode[8];
  BYTE     Size[10];
  BYTE     EndHeader[2];
  } IMAGE_ARCHIVE_MEMBER_HEADER, *PIMAGE_ARCHIVE_MEMBER_HEADER;

<struct name="_IMAGE_EXPORT_DIRECTORY">
<field name="Characteristics">DWORD</field>
<field name="TimeDateStamp">DWORD</field>
<field name="MajorVersion">WORD</field>
<field name="MinorVersion">WORD</field>
<field name="Name">DWORD</field>
<field name="Base">DWORD</field>
<field name="NumberOfFunctions">DWORD</field>
<field name="NumberOfNames">DWORD</field>
<field name="AddressOfFunctions">DWORD</field>
<field name="AddressOfNames">DWORD</field>
<field name="AddressOfNameOrdinals">DWORD</field>
</struct>
<typedefprev id="IMAGE_EXPORT_DIRECTORY"/>
<typedefptrprev id="PIMAGE_EXPORT_DIRECTORY"/>
<struct name="_IMAGE_IMPORT_BY_NAME">
<field name="Hint">WORD</field>
<field name="Name[1]">BYTE</field>
</struct>
<typedefprev id="IMAGE_IMPORT_BY_NAME"/>
<typedefptrprev id="PIMAGE_IMPORT_BY_NAME"/>

  #line 1 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\pshpack8.h"
  #pragma warning(disable:4103)

  #pragma pack(push,8)
<struct name="_IMAGE_THUNK_DATA64">
  union {
  ULONGLONG ForwarderString;
  ULONGLONG Function;
  ULONGLONG Ordinal;
  ULONGLONG AddressOfData;
  } u1;
  } IMAGE_THUNK_DATA64;
  typedef IMAGE_THUNK_DATA64 * PIMAGE_THUNK_DATA64;

  #line 1 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\poppack.h"
  #pragma warning(disable:4103)

  #pragma pack(pop)
<struct name="_IMAGE_THUNK_DATA32">
  union {
  DWORD ForwarderString;
  DWORD Function;
  DWORD Ordinal;
  DWORD AddressOfData;
  } u1;
  } IMAGE_THUNK_DATA32;
  typedef IMAGE_THUNK_DATA32 * PIMAGE_THUNK_DATA32;
  typedef void
  (__stdcall *PIMAGE_TLS_CALLBACK) (
  PVOID DllHandle,
  DWORD Reason,
<arg name="Reserved">PVOID</arg>
</function>

<struct name="_IMAGE_TLS_DIRECTORY64">
<field name="StartAddressOfRawData">ULONGLONG</field>
<field name="EndAddressOfRawData">ULONGLONG</field>
<field name="AddressOfIndex">ULONGLONG</field>
<field name="AddressOfCallBacks">ULONGLONG</field>
<field name="SizeOfZeroFill">DWORD</field>
<field name="Characteristics">DWORD</field>
<field name="IMAGE_TLS_DIRECTORY64">}</field>
  typedef IMAGE_TLS_DIRECTORY64 * PIMAGE_TLS_DIRECTORY64;

<struct name="_IMAGE_TLS_DIRECTORY32">
<field name="StartAddressOfRawData">DWORD</field>
<field name="EndAddressOfRawData">DWORD</field>
<field name="AddressOfIndex">DWORD</field>
<field name="AddressOfCallBacks">DWORD</field>
<field name="SizeOfZeroFill">DWORD</field>
<field name="Characteristics">DWORD</field>
<field name="IMAGE_TLS_DIRECTORY32">}</field>
  typedef IMAGE_TLS_DIRECTORY32 * PIMAGE_TLS_DIRECTORY32;
  typedef IMAGE_THUNK_DATA32              IMAGE_THUNK_DATA;
  typedef PIMAGE_THUNK_DATA32             PIMAGE_THUNK_DATA;

  typedef IMAGE_TLS_DIRECTORY32           IMAGE_TLS_DIRECTORY;
  typedef PIMAGE_TLS_DIRECTORY32          PIMAGE_TLS_DIRECTORY;

<struct name="_IMAGE_IMPORT_DESCRIPTOR">
  union {
  DWORD   Characteristics;
  DWORD   OriginalFirstThunk;
  };
  DWORD   TimeDateStamp;




  DWORD   ForwarderChain;
  DWORD   Name;
  DWORD   FirstThunk;
  } IMAGE_IMPORT_DESCRIPTOR;
  typedef IMAGE_IMPORT_DESCRIPTOR  *PIMAGE_IMPORT_DESCRIPTOR;
<struct name="_IMAGE_BOUND_IMPORT_DESCRIPTOR">
<field name="TimeDateStamp">DWORD</field>
<field name="OffsetModuleName">WORD</field>
<field name="NumberOfModuleForwarderRefs">WORD</field>
</struct>
<typedefprev id="IMAGE_BOUND_IMPORT_DESCRIPTOR"/>
<typedefptrprev id="PIMAGE_BOUND_IMPORT_DESCRIPTOR"/>

<struct name="_IMAGE_BOUND_FORWARDER_REF">
<field name="TimeDateStamp">DWORD</field>
<field name="OffsetModuleName">WORD</field>
<field name="Reserved">WORD</field>
</struct>
<typedefprev id="IMAGE_BOUND_FORWARDER_REF"/>
<typedefptrprev id="PIMAGE_BOUND_FORWARDER_REF"/>
<struct name="_IMAGE_RESOURCE_DIRECTORY">
<field name="Characteristics">DWORD</field>
<field name="TimeDateStamp">DWORD</field>
<field name="MajorVersion">WORD</field>
<field name="MinorVersion">WORD</field>
<field name="NumberOfNamedEntries">WORD</field>
<field name="NumberOfIdEntries">WORD</field>
</struct>
<typedefprev id="IMAGE_RESOURCE_DIRECTORY"/>
<typedefptrprev id="PIMAGE_RESOURCE_DIRECTORY"/>

<struct name="_IMAGE_RESOURCE_DIRECTORY_ENTRY">
  union {
<struct>
  DWORD NameOffset:31;
  DWORD NameIsString:1;
  };
  DWORD   Name;
  WORD    Id;
  };
  union {
  DWORD   OffsetToData;
<struct>
  DWORD   OffsetToDirectory:31;
  DWORD   DataIsDirectory:1;
  };
  };
  } IMAGE_RESOURCE_DIRECTORY_ENTRY, *PIMAGE_RESOURCE_DIRECTORY_ENTRY;
<struct name="_IMAGE_RESOURCE_DIRECTORY_STRING">
<field name="Length">WORD</field>
<field name="NameString[ 1 ]">CHAR</field>
</struct>
<typedefprev id="IMAGE_RESOURCE_DIRECTORY_STRING"/>
<typedefptrprev id="PIMAGE_RESOURCE_DIRECTORY_STRING"/>
<struct name="_IMAGE_RESOURCE_DIR_STRING_U">
<field name="Length">WORD</field>
<field name="NameString[ 1 ]">WCHAR</field>
</struct>
<typedefprev id="IMAGE_RESOURCE_DIR_STRING_U"/>
<typedefptrprev id="PIMAGE_RESOURCE_DIR_STRING_U"/>

<struct name="_IMAGE_RESOURCE_DATA_ENTRY">
<field name="OffsetToData">DWORD</field>
<field name="Size">DWORD</field>
<field name="CodePage">DWORD</field>
<field name="Reserved">DWORD</field>
</struct>
<typedefprev id="IMAGE_RESOURCE_DATA_ENTRY"/>
<typedefptrprev id="PIMAGE_RESOURCE_DATA_ENTRY"/>
 <struct>
<field name="Size">DWORD</field>
<field name="TimeDateStamp">DWORD</field>
<field name="MajorVersion">WORD</field>
<field name="MinorVersion">WORD</field>
<field name="GlobalFlagsClear">DWORD</field>
<field name="GlobalFlagsSet">DWORD</field>
<field name="CriticalSectionDefaultTimeout">DWORD</field>
<field name="DeCommitFreeBlockThreshold">DWORD</field>
<field name="DeCommitTotalFreeThreshold">DWORD</field>
<field name="LockPrefixTable">DWORD</field>
<field name="MaximumAllocationSize">DWORD</field>
<field name="VirtualMemoryThreshold">DWORD</field>
<field name="ProcessHeapFlags">DWORD</field>
<field name="ProcessAffinityMask">DWORD</field>
<field name="CSDVersion">WORD</field>
<field name="Reserved1">WORD</field>
<field name="EditList">DWORD</field>
<field name="SecurityCookie">DWORD</field>
<field name="SEHandlerTable">DWORD</field>
<field name="SEHandlerCount">DWORD</field>
  } IMAGE_LOAD_CONFIG_DIRECTORY32, *PIMAGE_LOAD_CONFIG_DIRECTORY32;

<struct>
<field name="Size">DWORD</field>
<field name="TimeDateStamp">DWORD</field>
<field name="MajorVersion">WORD</field>
<field name="MinorVersion">WORD</field>
<field name="GlobalFlagsClear">DWORD</field>
<field name="GlobalFlagsSet">DWORD</field>
<field name="CriticalSectionDefaultTimeout">DWORD</field>
<field name="DeCommitFreeBlockThreshold">ULONGLONG</field>
<field name="DeCommitTotalFreeThreshold">ULONGLONG</field>
<field name="LockPrefixTable">ULONGLONG</field>
<field name="MaximumAllocationSize">ULONGLONG</field>
<field name="VirtualMemoryThreshold">ULONGLONG</field>
<field name="ProcessAffinityMask">ULONGLONG</field>
<field name="ProcessHeapFlags">DWORD</field>
<field name="CSDVersion">WORD</field>
<field name="Reserved1">WORD</field>
<field name="EditList">ULONGLONG</field>
<field name="SecurityCookie">ULONGLONG</field>
<field name="SEHandlerTable">ULONGLONG</field>
<field name="SEHandlerCount">ULONGLONG</field>
  } IMAGE_LOAD_CONFIG_DIRECTORY64, *PIMAGE_LOAD_CONFIG_DIRECTORY64;
  typedef IMAGE_LOAD_CONFIG_DIRECTORY32     IMAGE_LOAD_CONFIG_DIRECTORY;
  typedef PIMAGE_LOAD_CONFIG_DIRECTORY32    PIMAGE_LOAD_CONFIG_DIRECTORY;
<struct name="_IMAGE_CE_RUNTIME_FUNCTION_ENTRY">
<field name="FuncStart">DWORD</field>
  DWORD PrologLen : 8;
  DWORD FuncLen : 22;
  DWORD ThirtyTwoBit : 1;
  DWORD ExceptionFlag : 1;
  } IMAGE_CE_RUNTIME_FUNCTION_ENTRY, * PIMAGE_CE_RUNTIME_FUNCTION_ENTRY;

<struct name="_IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY">
<field name="BeginAddress">ULONGLONG</field>
<field name="EndAddress">ULONGLONG</field>
<field name="ExceptionHandler">ULONGLONG</field>
<field name="HandlerData">ULONGLONG</field>
<field name="PrologEndAddress">ULONGLONG</field>
</struct>
<typedefprev id="IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY"/>
<typedefptrprev id="PIMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY"/>

<struct name="_IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY">
<field name="BeginAddress">DWORD</field>
<field name="EndAddress">DWORD</field>
<field name="ExceptionHandler">DWORD</field>
<field name="HandlerData">DWORD</field>
<field name="PrologEndAddress">DWORD</field>
</struct>
<typedefprev id="IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY"/>
<typedefptrprev id="PIMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY"/>

<struct name="_IMAGE_RUNTIME_FUNCTION_ENTRY">
<field name="BeginAddress">DWORD</field>
<field name="EndAddress">DWORD</field>
<field name="UnwindInfoAddress">DWORD</field>
</struct>
<typedefprev id="_IMAGE_RUNTIME_FUNCTION_ENTRY"/>
<typedefptrprev id="_PIMAGE_RUNTIME_FUNCTION_ENTRY"/>

  typedef  _IMAGE_RUNTIME_FUNCTION_ENTRY  IMAGE_IA64_RUNTIME_FUNCTION_ENTRY;
  typedef _PIMAGE_RUNTIME_FUNCTION_ENTRY PIMAGE_IA64_RUNTIME_FUNCTION_ENTRY;
  typedef  _IMAGE_RUNTIME_FUNCTION_ENTRY  IMAGE_RUNTIME_FUNCTION_ENTRY;
  typedef _PIMAGE_RUNTIME_FUNCTION_ENTRY PIMAGE_RUNTIME_FUNCTION_ENTRY;

<struct name="_IMAGE_DEBUG_DIRECTORY">
<field name="Characteristics">DWORD</field>
<field name="TimeDateStamp">DWORD</field>
<field name="MajorVersion">WORD</field>
<field name="MinorVersion">WORD</field>
<field name="Type">DWORD</field>
<field name="SizeOfData">DWORD</field>
<field name="AddressOfRawData">DWORD</field>
<field name="PointerToRawData">DWORD</field>
</struct>
<typedefprev id="IMAGE_DEBUG_DIRECTORY"/>
<typedefptrprev id="PIMAGE_DEBUG_DIRECTORY"/>

<struct name="_IMAGE_COFF_SYMBOLS_HEADER">
<field name="NumberOfSymbols">DWORD</field>
<field name="LvaToFirstSymbol">DWORD</field>
<field name="NumberOfLinenumbers">DWORD</field>
<field name="LvaToFirstLinenumber">DWORD</field>
<field name="RvaToFirstByteOfCode">DWORD</field>
<field name="RvaToLastByteOfCode">DWORD</field>
<field name="RvaToFirstByteOfData">DWORD</field>
<field name="RvaToLastByteOfData">DWORD</field>
</struct>
<typedefprev id="IMAGE_COFF_SYMBOLS_HEADER"/>
<typedefptrprev id="PIMAGE_COFF_SYMBOLS_HEADER"/>

<struct name="_FPO_DATA">
<field name="ulOffStart">DWORD</field>
<field name="cbProcSize">DWORD</field>
<field name="cdwLocals">DWORD</field>
<field name="cdwParams">WORD</field>
  WORD        cbProlog : 8;
  WORD        cbRegs   : 3;
  WORD        fHasSEH  : 1;
  WORD        fUseBP   : 1;
  WORD        reserved : 1;
  WORD        cbFrame  : 2;
  } FPO_DATA, *PFPO_DATA;
<struct name="_IMAGE_DEBUG_MISC">
<field name="DataType">DWORD</field>
<field name="Length">DWORD</field>
<field name="Unicode">BOOLEAN</field>
<field name="Reserved[ 3 ]">BYTE</field>
<field name="Data[ 1 ]">BYTE</field>
  } IMAGE_DEBUG_MISC, *PIMAGE_DEBUG_MISC;

<struct name="_IMAGE_FUNCTION_ENTRY">
<field name="StartingAddress">DWORD</field>
<field name="EndingAddress">DWORD</field>
<field name="EndOfPrologue">DWORD</field>
</struct>
<typedefprev id="IMAGE_FUNCTION_ENTRY"/>
<typedefptrprev id="PIMAGE_FUNCTION_ENTRY"/>

<struct name="_IMAGE_FUNCTION_ENTRY64">
<field name="StartingAddress">ULONGLONG</field>
<field name="EndingAddress">ULONGLONG</field>
  union {
  ULONGLONG   EndOfPrologue;
  ULONGLONG   UnwindInfoAddress;
  };
  } IMAGE_FUNCTION_ENTRY64, *PIMAGE_FUNCTION_ENTRY64;

<struct name="_IMAGE_SEPARATE_DEBUG_HEADER">
<field name="Signature">WORD</field>
<field name="Flags">WORD</field>
<field name="Machine">WORD</field>
<field name="Characteristics">WORD</field>
<field name="TimeDateStamp">DWORD</field>
<field name="CheckSum">DWORD</field>
<field name="ImageBase">DWORD</field>
<field name="SizeOfImage">DWORD</field>
<field name="NumberOfSections">DWORD</field>
<field name="ExportedNamesSize">DWORD</field>
<field name="DebugDirectorySize">DWORD</field>
<field name="SectionAlignment">DWORD</field>
<field name="Reserved[2]">DWORD</field>
</struct>
<typedefprev id="IMAGE_SEPARATE_DEBUG_HEADER"/>
<typedefptrprev id="PIMAGE_SEPARATE_DEBUG_HEADER"/>

<struct name="_NON_PAGED_DEBUG_INFO">
<field name="Signature">WORD</field>
<field name="Flags">WORD</field>
<field name="Size">DWORD</field>
<field name="Machine">WORD</field>
<field name="Characteristics">WORD</field>
<field name="TimeDateStamp">DWORD</field>
<field name="CheckSum">DWORD</field>
<field name="SizeOfImage">DWORD</field>
<field name="ImageBase">ULONGLONG</field>

  } NON_PAGED_DEBUG_INFO, *PNON_PAGED_DEBUG_INFO;

<struct name="_ImageArchitectureHeader">
  unsigned int AmaskValue: 1;

  int :7;
  unsigned int AmaskShift: 8;
  int :16;
  DWORD FirstEntryRVA;
  } IMAGE_ARCHITECTURE_HEADER, *PIMAGE_ARCHITECTURE_HEADER;

<struct name="_ImageArchitectureEntry">
<field name="FixupInstRVA">DWORD</field>
<field name="NewInst">DWORD</field>
</struct>
<typedefprev id="IMAGE_ARCHITECTURE_ENTRY"/>
<typedefptrprev id="PIMAGE_ARCHITECTURE_ENTRY"/>

  #line 1 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\poppack.h"
  #pragma warning(disable:4103)

  #pragma pack(pop)
<struct name="IMPORT_OBJECT_HEADER">
<field name="Sig1">WORD</field>
<field name="Sig2">WORD</field>
<field name="Version">WORD</field>
<field name="Machine">WORD</field>
<field name="TimeDateStamp">DWORD</field>
<field name="SizeOfData">DWORD</field>
  union {
  WORD    Ordinal;
  WORD    Hint;
  };

  WORD    Type : 2;
  WORD    NameType : 3;
  WORD    Reserved : 11;
  } IMPORT_OBJECT_HEADER;

  typedef enum IMPORT_OBJECT_TYPE
  {
  IMPORT_OBJECT_CODE = 0,
  IMPORT_OBJECT_DATA = 1,
  IMPORT_OBJECT_CONST = 2,
  } IMPORT_OBJECT_TYPE;

  typedef enum IMPORT_OBJECT_NAME_TYPE
  {
  IMPORT_OBJECT_ORDINAL = 0,
  IMPORT_OBJECT_NAME = 1,
  IMPORT_OBJECT_NAME_NO_PREFIX = 2,
  IMPORT_OBJECT_NAME_UNDECORATE = 3,

  } IMPORT_OBJECT_NAME_TYPE;
  typedef enum ReplacesCorHdrNumericDefines
  {

  COMIMAGE_FLAGS_ILONLY               =0x00000001,
  COMIMAGE_FLAGS_32BITREQUIRED        =0x00000002,
  COMIMAGE_FLAGS_IL_LIBRARY           =0x00000004,
  COMIMAGE_FLAGS_STRONGNAMESIGNED     =0x00000008,
  COMIMAGE_FLAGS_TRACKDEBUGDATA       =0x00010000,
  COR_VERSION_MAJOR_V2                =2,
  COR_VERSION_MAJOR                   =COR_VERSION_MAJOR_V2,
  COR_VERSION_MINOR                   =0,
  COR_DELETED_NAME_LENGTH             =8,
  COR_VTABLEGAP_NAME_LENGTH           =8,
  NATIVE_TYPE_MAX_CB                  =1,
  COR_ILMETHOD_SECT_SMALL_MAX_DATASIZE=0xFF,
  IMAGE_COR_MIH_METHODRVA             =0x01,
  IMAGE_COR_MIH_EHRVA                 =0x02,
  IMAGE_COR_MIH_BASICBLOCK            =0x08,
  COR_VTABLE_32BIT                    =0x01,
  COR_VTABLE_64BIT                    =0x02,
  COR_VTABLE_FROM_UNMANAGED           =0x04,
  COR_VTABLE_FROM_UNMANAGED_RETAIN_APPDOMAIN  =0x08,
  COR_VTABLE_CALL_MOST_DERIVED        =0x10,
  IMAGE_COR_EATJ_THUNK_SIZE           =32,

  MAX_CLASS_NAME                      =1024,
  MAX_PACKAGE_NAME                    =1024,
  } ReplacesCorHdrNumericDefines;
<struct name="IMAGE_COR20_HEADER">

  DWORD                   cb;
  WORD                    MajorRuntimeVersion;
  WORD                    MinorRuntimeVersion;


  IMAGE_DATA_DIRECTORY    MetaData;
  DWORD                   Flags;
  DWORD                   EntryPointToken;


  IMAGE_DATA_DIRECTORY    Resources;
  IMAGE_DATA_DIRECTORY    StrongNameSignature;


  IMAGE_DATA_DIRECTORY    CodeManagerTable;
  IMAGE_DATA_DIRECTORY    VTableFixups;
  IMAGE_DATA_DIRECTORY    ExportAddressTableJumps;


  IMAGE_DATA_DIRECTORY    ManagedNativeHeader;

  } IMAGE_COR20_HEADER, *PIMAGE_COR20_HEADER;

  typedef union _SLIST_HEADER {
  ULONGLONG Alignment;
<struct>
<field name="Next">SINGLE_LIST_ENTRY</field>
<field name="Depth">WORD</field>
<field name="Sequence">WORD</field>
  };
  } SLIST_HEADER, *PSLIST_HEADER;
  <function name="RtlInitializeSListHead" ret="void" convention="__stdcall">
<arg name="ListHead">PSLIST_HEADER</arg>
</function>

  <function name="RtlFirstEntrySList" ret="PSINGLE_LIST_ENTRY" convention="__stdcall">
<arg name="ListHead">const SLIST_HEADER *</arg>
</function>

  <function name="RtlInterlockedPopEntrySList" ret="PSINGLE_LIST_ENTRY" convention="__stdcall">
<arg name="ListHead">PSLIST_HEADER</arg>
</function>

  <function name="RtlInterlockedPushEntrySList" ret="PSINGLE_LIST_ENTRY" convention="__stdcall">
<arg name="ListHead">PSLIST_HEADER</arg>
<arg name="ListEntry">PSINGLE_LIST_ENTRY</arg>
</function>

  <function name="RtlInterlockedFlushSList" ret="PSINGLE_LIST_ENTRY" convention="__stdcall">
<arg name="ListHead">PSLIST_HEADER</arg>
</function>

  <function name="RtlQueryDepthSList" ret="WORD" convention="__stdcall">
<arg name="ListHead">PSLIST_HEADER</arg>
</function>

  typedef union _RTL_RUN_ONCE {
  PVOID Ptr;
  } RTL_RUN_ONCE, *PRTL_RUN_ONCE;

  typedef
  DWORD
  (__stdcall *PRTL_RUN_ONCE_INIT_FN) (
  PRTL_RUN_ONCE RunOnce,
  PVOID Parameter,
<arg name="Context">PVOID *</arg>
</function>

  void

  RtlRunOnceInitialize (
<arg name="RunOnce">PRTL_RUN_ONCE</arg>
</function>
  DWORD
  RtlRunOnceExecuteOnce (
  PRTL_RUN_ONCE RunOnce,
  PRTL_RUN_ONCE_INIT_FN InitFn,
  PVOID Parameter,
<arg name="Context">PVOID *</arg>
</function>

  DWORD
  RtlRunOnceBeginInitialize (
  PRTL_RUN_ONCE RunOnce,
  DWORD Flags,
<arg name="Context">PVOID *</arg>
</function>

  DWORD
  RtlRunOnceComplete (
  PRTL_RUN_ONCE RunOnce,
  DWORD Flags,
<arg name="Context">PVOID</arg>
</function>
<function name="RtlCaptureStackBackTrace" ret="WORD" convention="__stdcall">
<arg name="FramesToSkip">DWORD</arg>
<arg name="FramesToCapture">DWORD</arg>

  PVOID *BackTrace,
<arg name="BackTraceHash">PDWORD</arg>
</function>
  <function name="RtlCaptureContext" ret="void" convention="__stdcall">
<arg name="ContextRecord">PCONTEXT</arg>
</function>
  <function name="RtlCompareMemory" ret="SIZE_T" convention="__stdcall">
<arg name="Source1">const void *</arg>

  const void *Source2,
<arg name="Length">SIZE_T</arg>
</function>

  __forceinline
  PVOID
  RtlSecureZeroMemory(
  PVOID ptr,
  SIZE_T cnt
  )
  {
  volatile char *vptr = (volatile char *)ptr;

  while (cnt) {
  *vptr = 0;
  vptr++;
  cnt--;
  }
  return ptr;
  }

<struct name="_MESSAGE_RESOURCE_ENTRY">
<field name="Length">WORD</field>
<field name="Flags">WORD</field>
<field name="Text[ 1 ]">BYTE</field>
</struct>
<typedefprev id="MESSAGE_RESOURCE_ENTRY"/>
<typedefptrprev id="PMESSAGE_RESOURCE_ENTRY"/>
<struct name="_MESSAGE_RESOURCE_BLOCK">
<field name="LowId">DWORD</field>
<field name="HighId">DWORD</field>
<field name="OffsetToEntries">DWORD</field>
</struct>
<typedefprev id="MESSAGE_RESOURCE_BLOCK"/>
<typedefptrprev id="PMESSAGE_RESOURCE_BLOCK"/>

<struct name="_MESSAGE_RESOURCE_DATA">
<field name="NumberOfBlocks">DWORD</field>
<field name="Blocks[ 1 ]">MESSAGE_RESOURCE_BLOCK</field>
</struct>
<typedefprev id="MESSAGE_RESOURCE_DATA"/>
<typedefptrprev id="PMESSAGE_RESOURCE_DATA"/>

<struct name="_OSVERSIONINFOA">
<field name="dwOSVersionInfoSize">DWORD</field>
<field name="dwMajorVersion">DWORD</field>
<field name="dwMinorVersion">DWORD</field>
<field name="dwBuildNumber">DWORD</field>
<field name="dwPlatformId">DWORD</field>
<field name="szCSDVersion[ 128 ]">CHAR</field>
  } OSVERSIONINFOA, *POSVERSIONINFOA, *LPOSVERSIONINFOA;

<struct name="_OSVERSIONINFOW">
<field name="dwOSVersionInfoSize">DWORD</field>
<field name="dwMajorVersion">DWORD</field>
<field name="dwMinorVersion">DWORD</field>
<field name="dwBuildNumber">DWORD</field>
<field name="dwPlatformId">DWORD</field>
<field name="szCSDVersion[ 128 ]">WCHAR</field>
  } OSVERSIONINFOW, *POSVERSIONINFOW, *LPOSVERSIONINFOW, RTL_OSVERSIONINFOW, *PRTL_OSVERSIONINFOW;
  typedef OSVERSIONINFOA OSVERSIONINFO;
  typedef POSVERSIONINFOA POSVERSIONINFO;
  typedef LPOSVERSIONINFOA LPOSVERSIONINFO;

<struct name="_OSVERSIONINFOEXA">
<field name="dwOSVersionInfoSize">DWORD</field>
<field name="dwMajorVersion">DWORD</field>
<field name="dwMinorVersion">DWORD</field>
<field name="dwBuildNumber">DWORD</field>
<field name="dwPlatformId">DWORD</field>
<field name="szCSDVersion[ 128 ]">CHAR</field>
<field name="wServicePackMajor">WORD</field>
<field name="wServicePackMinor">WORD</field>
<field name="wSuiteMask">WORD</field>
<field name="wProductType">BYTE</field>
<field name="wReserved">BYTE</field>
  } OSVERSIONINFOEXA, *POSVERSIONINFOEXA, *LPOSVERSIONINFOEXA;
<struct name="_OSVERSIONINFOEXW">
<field name="dwOSVersionInfoSize">DWORD</field>
<field name="dwMajorVersion">DWORD</field>
<field name="dwMinorVersion">DWORD</field>
<field name="dwBuildNumber">DWORD</field>
<field name="dwPlatformId">DWORD</field>
<field name="szCSDVersion[ 128 ]">WCHAR</field>
<field name="wServicePackMajor">WORD</field>
<field name="wServicePackMinor">WORD</field>
<field name="wSuiteMask">WORD</field>
<field name="wProductType">BYTE</field>
<field name="wReserved">BYTE</field>
  } OSVERSIONINFOEXW, *POSVERSIONINFOEXW, *LPOSVERSIONINFOEXW, RTL_OSVERSIONINFOEXW, *PRTL_OSVERSIONINFOEXW;
  typedef OSVERSIONINFOEXA OSVERSIONINFOEX;
  typedef POSVERSIONINFOEXA POSVERSIONINFOEX;
  typedef LPOSVERSIONINFOEXA LPOSVERSIONINFOEX;
<function name="VerSetConditionMask" ret="ULONGLONG" convention="__stdcall">
<arg name="ConditionMask">ULONGLONG  </arg>
<arg name="TypeMask">DWORD  </arg>
<arg name="Condition">BYTE   </arg>
</function>
<function name="RtlGetProductInfo" ret="BOOLEAN" convention="__stdcall">
<arg name="OSMajorVersion">DWORD </arg>
<arg name="OSMinorVersion">DWORD </arg>
<arg name="SpMajorVersion">DWORD </arg>
<arg name="SpMinorVersion">DWORD </arg>
<arg name="ReturnedProductType">PDWORD</arg>
</function>

<struct name="_RTL_CRITICAL_SECTION_DEBUG">
<field name="Type">WORD</field>
<field name="CreatorBackTraceIndex">WORD</field>
  struct _RTL_CRITICAL_SECTION *CriticalSection;
  LIST_ENTRY ProcessLocksList;
  DWORD EntryCount;
  DWORD ContentionCount;
  DWORD Flags;
  WORD   CreatorBackTraceIndexHigh;
  WORD   SpareWORD  ;
  } RTL_CRITICAL_SECTION_DEBUG, *PRTL_CRITICAL_SECTION_DEBUG, RTL_RESOURCE_DEBUG, *PRTL_RESOURCE_DEBUG;

  #pragma pack(push, 8)

<struct name="_RTL_CRITICAL_SECTION">
<field name="DebugInfo">PRTL_CRITICAL_SECTION_DEBUG</field>





  LONG LockCount;
  LONG RecursionCount;
  HANDLE OwningThread;
  HANDLE LockSemaphore;
  ULONG_PTR SpinCount;
  } RTL_CRITICAL_SECTION, *PRTL_CRITICAL_SECTION;

  #pragma pack(pop)

<struct name="_RTL_SRWLOCK">
<field name="Ptr">PVOID</field>
</struct>
<typedefprev id="RTL_SRWLOCK"/>
<typedefptrprev id="PRTL_SRWLOCK"/>

<struct name="_RTL_CONDITION_VARIABLE">
<field name="Ptr">PVOID</field>
</struct>
<typedefprev id="RTL_CONDITION_VARIABLE"/>
<typedefptrprev id="PRTL_CONDITION_VARIABLE"/>
  typedef<fnptr name="PVECTORED_EXCEPTION_HANDLER" ret="LONG" convention="__stdcall">

<arg name="ExceptionInfo">_EXCEPTION_POINTERS *</arg>
</function>

  typedef enum _HEAP_INFORMATION_CLASS {

  HeapCompatibilityInformation,
  HeapEnableTerminationOnCorruption
  } HEAP_INFORMATION_CLASS;

  typedef<fnptr name="WAITORTIMERCALLBACKFUNC" ret="void" convention="__stdcall">
PVOID, BOOLEAN );
  typedef<fnptr name="WORKERCALLBACKFUNC" ret="void" convention="__stdcall">
PVOID );
  typedef<fnptr name="APC_CALLBACK_FUNCTION" ret="void" convention="__stdcall">
DWORD   , PVOID, PVOID);
  typedef
  void
  (__stdcall *PFLS_CALLBACK_FUNCTION) (
<arg name="lpFlsData">PVOID</arg>
</function>
  typedef enum _ACTIVATION_CONTEXT_INFO_CLASS {
  ActivationContextBasicInformation                       = 1,
  ActivationContextDetailedInformation                    = 2,
  AssemblyDetailedInformationInActivationContext          = 3,
  FileInformationInAssemblyOfAssemblyInActivationContext  = 4,
  RunlevelInformationInActivationContext                  = 5,
  MaxActivationContextInfoClass,




  AssemblyDetailedInformationInActivationContxt           = 3,
  FileInformationInAssemblyOfAssemblyInActivationContxt   = 4
  } ACTIVATION_CONTEXT_INFO_CLASS;

<struct name="_ACTIVATION_CONTEXT_QUERY_INDEX">
<field name="ulAssemblyIndex">DWORD</field>
<field name="ulFileIndexInAssembly">DWORD</field>
</struct>
<typedefprev id="ACTIVATION_CONTEXT_QUERY_INDEX"/>
<typedefptrprev id="PACTIVATION_CONTEXT_QUERY_INDEX"/>

  <typedef name="PCACTIVATION_CONTEXT_QUERY_INDEX">const _ACTIVATION_CONTEXT_QUERY_INDEX *</typedef>
<struct name="_ASSEMBLY_FILE_DETAILED_INFORMATION">
<field name="ulFlags">DWORD</field>
<field name="ulFilenameLength">DWORD</field>
<field name="ulPathLength">DWORD</field>
<field name="lpFileName">PCWSTR</field>
<field name="lpFilePath">PCWSTR</field>
  } ASSEMBLY_FILE_DETAILED_INFORMATION, *PASSEMBLY_FILE_DETAILED_INFORMATION;
  typedef const ASSEMBLY_FILE_DETAILED_INFORMATION *PCASSEMBLY_FILE_DETAILED_INFORMATION;
<struct name="_ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION">
<field name="ulFlags">DWORD</field>
<field name="ulEncodedAssemblyIdentityLength">DWORD</field>
<field name="ulManifestPathType">DWORD</field>
<field name="ulManifestPathLength">DWORD</field>
<field name="liManifestLastWriteTime">LARGE_INTEGER</field>
<field name="ulPolicyPathType">DWORD</field>
<field name="ulPolicyPathLength">DWORD</field>
<field name="liPolicyLastWriteTime">LARGE_INTEGER</field>
<field name="ulMetadataSatelliteRosterIndex">DWORD</field>
<field name="ulManifestVersionMajor">DWORD</field>
<field name="ulManifestVersionMinor">DWORD</field>
<field name="ulPolicyVersionMajor">DWORD</field>
<field name="ulPolicyVersionMinor">DWORD</field>
<field name="ulAssemblyDirectoryNameLength">DWORD</field>

  PCWSTR lpAssemblyEncodedAssemblyIdentity;
  PCWSTR lpAssemblyManifestPath;
  PCWSTR lpAssemblyPolicyPath;
  PCWSTR lpAssemblyDirectoryName;

  DWORD  ulFileCount;
  } ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION, * PACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION;

  typedef const struct _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION * PCACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION ;

  typedef enum
  {
  ACTCTX_RUN_LEVEL_UNSPECIFIED = 0,
  ACTCTX_RUN_LEVEL_AS_INVOKER,
  ACTCTX_RUN_LEVEL_HIGHEST_AVAILABLE,
  ACTCTX_RUN_LEVEL_REQUIRE_ADMIN,
  ACTCTX_RUN_LEVEL_NUMBERS
  } ACTCTX_REQUESTED_RUN_LEVEL;

<struct name="_ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION">
<field name="ulFlags">DWORD</field>
<field name="RunLevel">ACTCTX_REQUESTED_RUN_LEVEL</field>
<field name="UiAccess">DWORD</field>
</struct>
<typedefprev id="ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION"/>
<typedefptrprev id="PACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION"/>

  typedef const struct _ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION * PCACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION ;

<struct name="_ACTIVATION_CONTEXT_DETAILED_INFORMATION">
<field name="dwFlags">DWORD</field>
<field name="ulFormatVersion">DWORD</field>
<field name="ulAssemblyCount">DWORD</field>
<field name="ulRootManifestPathType">DWORD</field>
<field name="ulRootManifestPathChars">DWORD</field>
<field name="ulRootConfigurationPathType">DWORD</field>
<field name="ulRootConfigurationPathChars">DWORD</field>
<field name="ulAppDirPathType">DWORD</field>
<field name="ulAppDirPathChars">DWORD</field>
<field name="lpRootManifestPath">PCWSTR</field>
<field name="lpRootConfigurationPath">PCWSTR</field>
<field name="lpAppDirPath">PCWSTR</field>
</struct>
<typedefprev id="ACTIVATION_CONTEXT_DETAILED_INFORMATION"/>
<typedefptrprev id="PACTIVATION_CONTEXT_DETAILED_INFORMATION"/>

  <typedef name="PCACTIVATION_CONTEXT_DETAILED_INFORMATION">const _ACTIVATION_CONTEXT_DETAILED_INFORMATION *</typedef>

<struct name="_EVENTLOGRECORD">
<field name="Length">DWORD</field>
<field name="Reserved">DWORD</field>
<field name="RecordNumber">DWORD</field>
<field name="TimeGenerated">DWORD</field>
<field name="TimeWritten">DWORD</field>
<field name="EventID">DWORD</field>
<field name="EventType">WORD</field>
<field name="NumStrings">WORD</field>
<field name="EventCategory">WORD</field>
<field name="ReservedFlags">WORD</field>
<field name="ClosingRecordNumber">DWORD</field>
<field name="StringOffset">DWORD</field>
<field name="UserSidLength">DWORD</field>
<field name="UserSidOffset">DWORD</field>
<field name="DataLength">DWORD</field>
<field name="DataOffset">DWORD</field>










  } EVENTLOGRECORD, *PEVENTLOGRECORD;

  #pragma warning(push)
  #pragma warning(disable : 4200)
<struct name="_EVENTSFORLOGFILE">
<field name="ulSize">DWORD</field>
<field name="szLogicalLogFile[256]">WCHAR</field>
<field name="ulNumRecords">DWORD</field>
<field name="pEventLogRecords[]">EVENTLOGRECORD</field>
  }EVENTSFORLOGFILE, *PEVENTSFORLOGFILE;

<struct name="_PACKEDEVENTINFO">
<field name="ulSize">DWORD</field>
<field name="ulNumEventsForLogFile">DWORD</field>
<field name="ulOffsets[]">DWORD</field>
  }PACKEDEVENTINFO, *PPACKEDEVENTINFO;
  #pragma warning(pop)









  typedef enum _CM_SERVICE_NODE_TYPE {
  DriverType               = 0x00000001,
  FileSystemType           = 0x00000002,
  Win32ServiceOwnProcess   = 0x00000010,
  Win32ServiceShareProcess = 0x00000020,
  AdapterType              = 0x00000004,
  RecognizerType           = 0x00000008
  } SERVICE_NODE_TYPE;

  typedef enum _CM_SERVICE_LOAD_TYPE {
  BootLoad    = 0x00000000,
  SystemLoad  = 0x00000001,
  AutoLoad    = 0x00000002,
  DemandLoad  = 0x00000003,
  DisableLoad = 0x00000004
  } SERVICE_LOAD_TYPE;

  typedef enum _CM_ERROR_CONTROL_TYPE {
  IgnoreError   = 0x00000000,
  NormalError   = 0x00000001,
  SevereError   = 0x00000002,
  CriticalError = 0x00000003
  } SERVICE_ERROR_TYPE;
<struct name="_TAPE_ERASE">
<field name="Type">DWORD</field>
<field name="Immediate">BOOLEAN</field>
</struct>
<typedefprev id="TAPE_ERASE"/>
<typedefptrprev id="PTAPE_ERASE"/>
<struct name="_TAPE_PREPARE">
<field name="Operation">DWORD</field>
<field name="Immediate">BOOLEAN</field>
</struct>
<typedefprev id="TAPE_PREPARE"/>
<typedefptrprev id="PTAPE_PREPARE"/>
<struct name="_TAPE_WRITE_MARKS">
<field name="Type">DWORD</field>
<field name="Count">DWORD</field>
<field name="Immediate">BOOLEAN</field>
</struct>
<typedefprev id="TAPE_WRITE_MARKS"/>
<typedefptrprev id="PTAPE_WRITE_MARKS"/>
<struct name="_TAPE_GET_POSITION">
<field name="Type">DWORD</field>
<field name="Partition">DWORD</field>
<field name="Offset">LARGE_INTEGER</field>
</struct>
<typedefprev id="TAPE_GET_POSITION"/>
<typedefptrprev id="PTAPE_GET_POSITION"/>
<struct name="_TAPE_SET_POSITION">
<field name="Method">DWORD</field>
<field name="Partition">DWORD</field>
<field name="Offset">LARGE_INTEGER</field>
<field name="Immediate">BOOLEAN</field>
</struct>
<typedefprev id="TAPE_SET_POSITION"/>
<typedefptrprev id="PTAPE_SET_POSITION"/>
<struct name="_TAPE_GET_DRIVE_PARAMETERS">
<field name="ECC">BOOLEAN</field>
<field name="Compression">BOOLEAN</field>
<field name="DataPadding">BOOLEAN</field>
<field name="ReportSetmarks">BOOLEAN</field>
<field name="DefaultBlockSize">DWORD</field>
<field name="MaximumBlockSize">DWORD</field>
<field name="MinimumBlockSize">DWORD</field>
<field name="MaximumPartitionCount">DWORD</field>
<field name="FeaturesLow">DWORD</field>
<field name="FeaturesHigh">DWORD</field>
<field name="EOTWarningZoneSize">DWORD</field>
</struct>
<typedefprev id="TAPE_GET_DRIVE_PARAMETERS"/>
<typedefptrprev id="PTAPE_GET_DRIVE_PARAMETERS"/>
<struct name="_TAPE_SET_DRIVE_PARAMETERS">
<field name="ECC">BOOLEAN</field>
<field name="Compression">BOOLEAN</field>
<field name="DataPadding">BOOLEAN</field>
<field name="ReportSetmarks">BOOLEAN</field>
<field name="EOTWarningZoneSize">DWORD</field>
</struct>
<typedefprev id="TAPE_SET_DRIVE_PARAMETERS"/>
<typedefptrprev id="PTAPE_SET_DRIVE_PARAMETERS"/>
<struct name="_TAPE_GET_MEDIA_PARAMETERS">
<field name="Capacity">LARGE_INTEGER</field>
<field name="Remaining">LARGE_INTEGER</field>
<field name="BlockSize">DWORD</field>
<field name="PartitionCount">DWORD</field>
<field name="WriteProtected">BOOLEAN</field>
</struct>
<typedefprev id="TAPE_GET_MEDIA_PARAMETERS"/>
<typedefptrprev id="PTAPE_GET_MEDIA_PARAMETERS"/>
<struct name="_TAPE_SET_MEDIA_PARAMETERS">
<field name="BlockSize">DWORD</field>
</struct>
<typedefprev id="TAPE_SET_MEDIA_PARAMETERS"/>
<typedefptrprev id="PTAPE_SET_MEDIA_PARAMETERS"/>
<struct name="_TAPE_CREATE_PARTITION">
<field name="Method">DWORD</field>
<field name="Count">DWORD</field>
<field name="Size">DWORD</field>
</struct>
<typedefprev id="TAPE_CREATE_PARTITION"/>
<typedefptrprev id="PTAPE_CREATE_PARTITION"/>

<struct name="_TAPE_WMI_OPERATIONS">
<field name="Method">DWORD</field>
<field name="DataBufferSize">DWORD</field>
<field name="DataBuffer">PVOID</field>
</struct>
<typedefprev id="TAPE_WMI_OPERATIONS"/>
<typedefptrprev id="PTAPE_WMI_OPERATIONS"/>

  typedef enum _TAPE_DRIVE_PROBLEM_TYPE {
  TapeDriveProblemNone, TapeDriveReadWriteWarning,
  TapeDriveReadWriteError, TapeDriveReadWarning,
  TapeDriveWriteWarning, TapeDriveReadError,
  TapeDriveWriteError, TapeDriveHardwareError,
  TapeDriveUnsupportedMedia, TapeDriveScsiConnectionError,
  TapeDriveTimetoClean, TapeDriveCleanDriveNow,
  TapeDriveMediaLifeExpired, TapeDriveSnappedTape
  } TAPE_DRIVE_PROBLEM_TYPE;
  #line 1 "\\program files\\Microsoft SDKs\\Windows\\v6.0A\\Include\\ktmtypes.h"
  typedef GUID UOW, *PUOW;
  typedef GUID CRM_PROTOCOL_ID, *PCRM_PROTOCOL_ID;

  typedef ULONG NOTIFICATION_MASK;
<struct name="_TRANSACTION_NOTIFICATION">
<field name="TransactionKey">PVOID</field>
<field name="TransactionNotification">ULONG</field>
<field name="TmVirtualClock">LARGE_INTEGER</field>
<field name="ArgumentLength">ULONG</field>
</struct>
<typedefprev id="TRANSACTION_NOTIFICATION"/>
<typedefptrprev id="PTRANSACTION_NOTIFICATION"/>

<struct name="_TRANSACTION_NOTIFICATION_RECOVERY_ARGUMENT">
<field name="EnlistmentId">GUID</field>
<field name="UOW">UOW</field>
</struct>
<typedefprev id="TRANSACTION_NOTIFICATION_RECOVERY_ARGUMENT"/>
<typedefptrprev id="PTRANSACTION_NOTIFICATION_RECOVERY_ARGUMENT"/>

  typedef ULONG SAVEPOINT_ID, *PSAVEPOINT_ID;

<struct name="_TRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT">
<field name="SavepointId">SAVEPOINT_ID</field>
</struct>
<typedefprev id="TRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT"/>
<typedefptrprev id="PTRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT"/>

<struct name="_TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT">
<field name="PropagationCookie">ULONG</field>
<field name="UOW">GUID</field>
<field name="TmIdentity">GUID</field>
<field name="BufferLength">ULONG</field>
</struct>
<typedefprev id="TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT"/>
<typedefptrprev id="PTRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT"/>

<struct name="_TRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT">
<field name="MarshalCookie">ULONG</field>
<field name="UOW">GUID</field>
</struct>
<typedefprev id="TRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT"/>
<typedefptrprev id="PTRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT"/>

  typedef TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT TRANSACTION_NOTIFICATION_PROMOTE_ARGUMENT, *PTRANSACTION_NOTIFICATION_PROMOTE_ARGUMENT;
<struct name="_KCRM_MARSHAL_HEADER">
<field name="VersionMajor">ULONG</field>
<field name="VersionMinor">ULONG</field>
<field name="NumProtocols">ULONG</field>
<field name="Unused">ULONG</field>
  } KCRM_MARSHAL_HEADER, *PKCRM_MARSHAL_HEADER, * PRKCRM_MARSHAL_HEADER;

<struct name="_KCRM_TRANSACTION_BLOB">
<field name="UOW">UOW</field>
<field name="TmIdentity">GUID</field>
<field name="IsolationLevel">ULONG</field>
<field name="IsolationFlags">ULONG</field>
<field name="Timeout">ULONG</field>
<field name="Description[64]">WCHAR</field>
  } KCRM_TRANSACTION_BLOB, *PKCRM_TRANSACTION_BLOB, * PRKCRM_TRANSACTION_BLOB;

<struct name="_KCRM_PROTOCOL_BLOB">
<field name="ProtocolId">CRM_PROTOCOL_ID</field>
<field name="StaticInfoLength">ULONG</field>
<field name="TransactionIdInfoLength">ULONG</field>
<field name="Unused1">ULONG</field>
<field name="Unused2">ULONG</field>
  } KCRM_PROTOCOL_BLOB, *PKCRM_PROTOCOL_BLOB, * PRKCRM_PROTOCOL_BLOB;
  typedef enum _TRANSACTION_OUTCOME {
  TransactionOutcomeUndetermined = 1,
  TransactionOutcomeCommitted,
  TransactionOutcomeAborted,
  } TRANSACTION_OUTCOME;
  typedef enum _TRANSACTION_STATE {
  TransactionStateNormal = 1,
  TransactionStateIndoubt,
  TransactionStateCommittedNotify,
  } TRANSACTION_STATE;
<struct name="_TRANSACTION_BASIC_INFORMATION">
<field name="TransactionId">GUID</field>
<field name="State">DWORD</field>
<field name="Outcome">DWORD</field>
</struct>
<typedefprev id="TRANSACTION_BASIC_INFORMATION"/>
<typedefptrprev id="PTRANSACTION_BASIC_INFORMATION"/>

<struct name="_TRANSACTIONMANAGER_BASIC_INFORMATION">
<field name="TmIdentity">GUID</field>
<field name="VirtualClock">LARGE_INTEGER</field>
</struct>
<typedefprev id="TRANSACTIONMANAGER_BASIC_INFORMATION"/>
<typedefptrprev id="PTRANSACTIONMANAGER_BASIC_INFORMATION"/>

<struct name="_TRANSACTIONMANAGER_LOG_INFORMATION">
<field name="LogIdentity">GUID</field>
</struct>
<typedefprev id="TRANSACTIONMANAGER_LOG_INFORMATION"/>
<typedefptrprev id="PTRANSACTIONMANAGER_LOG_INFORMATION"/>

<struct name="_TRANSACTIONMANAGER_LOGPATH_INFORMATION">
<field name="LogPathLength">DWORD</field>
<field name="LogPath[1]">WCHAR</field>
</struct>
<typedefprev id="TRANSACTIONMANAGER_LOGPATH_INFORMATION"/>
<typedefptrprev id="PTRANSACTIONMANAGER_LOGPATH_INFORMATION"/>

<struct name="_TRANSACTION_PROPERTIES_INFORMATION">
<field name="IsolationLevel">DWORD</field>
<field name="IsolationFlags">DWORD</field>
<field name="Timeout">LARGE_INTEGER</field>
<field name="Outcome">DWORD</field>
<field name="DescriptionLength">DWORD</field>
<field name="Description[1]">WCHAR</field>
</struct>
<typedefprev id="TRANSACTION_PROPERTIES_INFORMATION"/>
<typedefptrprev id="PTRANSACTION_PROPERTIES_INFORMATION"/>
<struct name="_TRANSACTION_BIND_INFORMATION">
<field name="TmHandle">HANDLE</field>
</struct>
<typedefprev id="TRANSACTION_BIND_INFORMATION"/>
<typedefptrprev id="PTRANSACTION_BIND_INFORMATION"/>

<struct name="_TRANSACTION_ENLISTMENT_PAIR">
<field name="EnlistmentId">GUID</field>
<field name="ResourceManagerId">GUID</field>
</struct>
<typedefprev id="TRANSACTION_ENLISTMENT_PAIR"/>
<typedefptrprev id="PTRANSACTION_ENLISTMENT_PAIR"/>

<struct name="_TRANSACTION_ENLISTMENTS_INFORMATION">
<field name="NumberOfEnlistments">DWORD</field>
<field name="EnlistmentPair[1]">TRANSACTION_ENLISTMENT_PAIR</field>
</struct>
<typedefprev id="TRANSACTION_ENLISTMENTS_INFORMATION"/>
<typedefptrprev id="PTRANSACTION_ENLISTMENTS_INFORMATION"/>

<struct name="_TRANSACTION_FULL_INFORMATION">

  DWORD   NameLength;
  } TRANSACTION_FULL_INFORMATION, *PTRANSACTION_FULL_INFORMATION;
<struct name="_RESOURCEMANAGER_BASIC_INFORMATION">
<field name="ResourceManagerId">GUID</field>
<field name="DescriptionLength">DWORD</field>
<field name="Description[1]">WCHAR</field>
</struct>
<typedefprev id="RESOURCEMANAGER_BASIC_INFORMATION"/>
<typedefptrprev id="PRESOURCEMANAGER_BASIC_INFORMATION"/>

<struct name="_RESOURCEMANAGER_COMPLETION_INFORMATION">
<field name="IoCompletionPortHandle">HANDLE</field>
<field name="CompletionKey">ULONG_PTR</field>
</struct>
<typedefprev id="RESOURCEMANAGER_COMPLETION_INFORMATION"/>
<typedefptrprev id="PRESOURCEMANAGER_COMPLETION_INFORMATION"/>
<struct name="_TRANSACTION_NAME_INFORMATION">
<field name="NameLength">DWORD</field>
<field name="Name[1]">WCHAR</field>
</struct>
<typedefprev id="TRANSACTION_NAME_INFORMATION"/>
<typedefptrprev id="PTRANSACTION_NAME_INFORMATION"/>
  typedef enum _TRANSACTION_INFORMATION_CLASS {
  TransactionBasicInformation,
  TransactionPropertiesInformation,
  TransactionEnlistmentInformation,
  TransactionFullInformation

  ,
  TransactionBindInformation
  ,
  } TRANSACTION_INFORMATION_CLASS;
  typedef enum _TRANSACTIONMANAGER_INFORMATION_CLASS {
  TransactionManagerBasicInformation,
  TransactionManagerLogInformation,
  TransactionManagerLogPathInformation,
  TransactionManagerOnlineProbeInformation
  } TRANSACTIONMANAGER_INFORMATION_CLASS;
  typedef enum _RESOURCEMANAGER_INFORMATION_CLASS {
  ResourceManagerBasicInformation,
  ResourceManagerCompletionInformation,
  ResourceManagerFullInformation

  ,
  ResourceManagerNameInformation

  } RESOURCEMANAGER_INFORMATION_CLASS;
<struct name="_ENLISTMENT_BASIC_INFORMATION">
<field name="EnlistmentId">GUID</field>
<field name="TransactionId">GUID</field>
<field name="ResourceManagerId">GUID</field>
</struct>
<typedefprev id="ENLISTMENT_BASIC_INFORMATION"/>
<typedefptrprev id="PENLISTMENT_BASIC_INFORMATION"/>
  typedef enum _ENLISTMENT_INFORMATION_CLASS {
  EnlistmentBasicInformation,
  EnlistmentRecoveryInformation,
  EnlistmentFullInformation

  ,
  EnlistmentNameInformation

  } ENLISTMENT_INFORMATION_CLASS;

<struct name="_TRANSACTION_LIST_ENTRY">
<field name="UOW">UOW</field>
</struct>
<typedefprev id="TRANSACTION_LIST_ENTRY"/>
<typedefptrprev id="PTRANSACTION_LIST_ENTRY"/>

<struct name="_TRANSACTION_LIST_INFORMATION">
<field name="NumberOfTransactions">DWORD</field>
<field name="TransactionInformation[1]">TRANSACTION_LIST_ENTRY</field>
</struct>
<typedefprev id="TRANSACTION_LIST_INFORMATION"/>
<typedefptrprev id="PTRANSACTION_LIST_INFORMATION"/>

  typedef enum _KTMOBJECT_TYPE {

  KTMOBJECT_TRANSACTION,
  KTMOBJECT_TRANSACTION_MANAGER,
  KTMOBJECT_RESOURCE_MANAGER,
  KTMOBJECT_ENLISTMENT,
  KTMOBJECT_INVALID

  } KTMOBJECT_TYPE, *PKTMOBJECT_TYPE;
<struct name="_KTMOBJECT_CURSOR">





  GUID    LastQuery;





  DWORD   ObjectIdCount;





  GUID    ObjectIds[1];

  } KTMOBJECT_CURSOR, *PKTMOBJECT_CURSOR;
  typedef DWORD TP_VERSION, *PTP_VERSION;

  <typedef name="PTP_CALLBACK_INSTANCE">_TP_CALLBACK_INSTANCE TP_CALLBACK_INSTANCE, *</typedef>

  typedef<fnptr name="PTP_SIMPLE_CALLBACK" ret="void" convention="__stdcall">
<arg name="Instance">PTP_CALLBACK_INSTANCE</arg>
<arg name="Context">PVOID                </arg>
</function>

  <typedef name="PTP_POOL">_TP_POOL TP_POOL, *</typedef>
  <typedef name="PTP_CLEANUP_GROUP">_TP_CLEANUP_GROUP TP_CLEANUP_GROUP, *</typedef>

  typedef<fnptr name="PTP_CLEANUP_GROUP_CANCEL_CALLBACK" ret="void" convention="__stdcall">
<arg name="ObjectContext">PVOID</arg>
<arg name="CleanupContext">PVOID</arg>
</function>

<struct name="_TP_CALLBACK_ENVIRON">
<field name="Version">TP_VERSION</field>
<field name="Pool">PTP_POOL</field>
<field name="CleanupGroup">PTP_CLEANUP_GROUP</field>
<field name="CleanupGroupCancelCallback">PTP_CLEANUP_GROUP_CANCEL_CALLBACK</field>
<field name="RaceDll">PVOID</field>
  struct _ACTIVATION_CONTEXT        *ActivationContext;
  PTP_SIMPLE_CALLBACK                FinalizationCallback;
  union {
  DWORD                          Flags;
<struct>
  DWORD                      LongFunction :  1;
  DWORD                      Private      : 31;
  } s;
  } u;
  } TP_CALLBACK_ENVIRON, *PTP_CALLBACK_ENVIRON;
  __forceinline
  void
  TpInitializeCallbackEnviron(
  PTP_CALLBACK_ENVIRON CallbackEnviron
  )
  {
  CallbackEnviron->Version = 1;
  CallbackEnviron->Pool = ((void *)0);
  CallbackEnviron->CleanupGroup = ((void *)0);
  CallbackEnviron->CleanupGroupCancelCallback = ((void *)0);
  CallbackEnviron->RaceDll = ((void *)0);
  CallbackEnviron->ActivationContext = ((void *)0);
  CallbackEnviron->FinalizationCallback = ((void *)0);
  CallbackEnviron->u.Flags = 0;
  }

  __forceinline
  void
  TpSetCallbackThreadpool(
  PTP_CALLBACK_ENVIRON CallbackEnviron,
  PTP_POOL             Pool
  )
  {
  CallbackEnviron->Pool = Pool;
  }

  __forceinline
  void
  TpSetCallbackCleanupGroup(
  PTP_CALLBACK_ENVIRON              CallbackEnviron,
  PTP_CLEANUP_GROUP                 CleanupGroup,
  PTP_CLEANUP_GROUP_CANCEL_CALLBACK CleanupGroupCancelCallback
  )
  {
  CallbackEnviron->CleanupGroup = CleanupGroup;
  CallbackEnviron->CleanupGroupCancelCallback = CleanupGroupCancelCallback;
  }

  __forceinline
  void
  TpSetCallbackActivationContext(
  PTP_CALLBACK_ENVIRON CallbackEnviron,
  struct _ACTIVATION_CONTEXT *ActivationContext
  )
  {
  CallbackEnviron->ActivationContext = ActivationContext;
  }

  __forceinline
  void
  TpSetCallbackNoActivationContext(
  PTP_CALLBACK_ENVIRON CallbackEnviron
  )
  {
  CallbackEnviron->ActivationContext = (_ACTIVATION_CONTEXT *)(LONG_PTR) -1;
  }

  __forceinline
  void
  TpSetCallbackLongFunction(
  PTP_CALLBACK_ENVIRON CallbackEnviron
  )
  {
  CallbackEnviron->u.s.LongFunction = 1;
  }

  __forceinline
  void
  TpSetCallbackRaceWithDll(
  PTP_CALLBACK_ENVIRON CallbackEnviron,
  PVOID                DllHandle
  )
  {
  CallbackEnviron->RaceDll = DllHandle;
  }

  __forceinline
  void
  TpSetCallbackFinalizationCallback(
  PTP_CALLBACK_ENVIRON CallbackEnviron,
  PTP_SIMPLE_CALLBACK  FinalizationCallback
  )
  {
  CallbackEnviron->FinalizationCallback = FinalizationCallback;
  }

  __forceinline
  void
  TpDestroyCallbackEnviron(
  PTP_CALLBACK_ENVIRON CallbackEnviron
  )
  {






  (CallbackEnviron);
  }

  <typedef name="PTP_WORK">_TP_WORK TP_WORK, *</typedef>

  typedef<fnptr name="PTP_WORK_CALLBACK" ret="void" convention="__stdcall">
<arg name="Instance">PTP_CALLBACK_INSTANCE</arg>
<arg name="Context">PVOID                </arg>
<arg name="Work">PTP_WORK             </arg>
</function>

  <typedef name="PTP_TIMER">_TP_TIMER TP_TIMER, *</typedef>

  typedef<fnptr name="PTP_TIMER_CALLBACK" ret="void" convention="__stdcall">
<arg name="Instance">PTP_CALLBACK_INSTANCE</arg>
<arg name="Context">PVOID                </arg>
<arg name="Timer">PTP_TIMER            </arg>
</function>

  typedef DWORD    TP_WAIT_RESULT;

  <typedef name="PTP_WAIT">_TP_WAIT TP_WAIT, *</typedef>

  typedef<fnptr name="PTP_WAIT_CALLBACK" ret="void" convention="__stdcall">
<arg name="Instance">PTP_CALLBACK_INSTANCE</arg>
<arg name="Context">PVOID                </arg>
<arg name="Wait">PTP_WAIT             </arg>
<arg name="WaitResult">TP_WAIT_RESULT       </arg>
</function>

  <typedef name="PTP_IO">_TP_IO TP_IO, *</typedef>
  __inline struct _TEB * NtCurrentTeb( void ) { return (struct _TEB *) (ULONG_PTR) __readfsdword (0x18); }
  typedef UINT_PTR            WPARAM;
  typedef LONG_PTR            LPARAM;
  typedef LONG_PTR            LRESULT;

<struct name="HWND__">
int unused; };
<typedef name="HWND">HWND__ *</typedef>
<struct name="HHOOK__">
int unused; };
<typedef name="HHOOK">HHOOK__ *</typedef>
  typedef WORD                ATOM;

  typedef HANDLE          *SPHANDLE;
  typedef HANDLE           *LPHANDLE;
  typedef HANDLE              HGLOBAL;
  typedef HANDLE              HLOCAL;
  typedef HANDLE              GLOBALHANDLE;
  typedef HANDLE              LOCALHANDLE;
  typedef<fnptr name="FARPROC" ret="int" convention="__stdcall">
);
  typedef<fnptr name="NEARPROC" ret="int" convention="__stdcall">
);
  typedef<fnptr name="PROC" ret="int" convention="__stdcall">
);
  typedef void * HGDIOBJ;
<struct name="HKEY__">
int unused; };
<typedef name="HKEY">HKEY__ *</typedef>
  typedef HKEY *PHKEY;
<struct name="HACCEL__">
int unused; };
<typedef name="HACCEL">HACCEL__ *</typedef>
<struct name="HBITMAP__">
int unused; };
<typedef name="HBITMAP">HBITMAP__ *</typedef>
<struct name="HBRUSH__">
int unused; };
<typedef name="HBRUSH">HBRUSH__ *</typedef>
<struct name="HCOLORSPACE__">
int unused; };
<typedef name="HCOLORSPACE">HCOLORSPACE__ *</typedef>
<struct name="HDC__">
int unused; };
<typedef name="HDC">HDC__ *</typedef>

<struct name="HGLRC__">
int unused; };
<typedef name="HGLRC">HGLRC__ *</typedef>
<struct name="HDESK__">
int unused; };
<typedef name="HDESK">HDESK__ *</typedef>
<struct name="HENHMETAFILE__">
int unused; };
<typedef name="HENHMETAFILE">HENHMETAFILE__ *</typedef>

<struct name="HFONT__">
int unused; };
<typedef name="HFONT">HFONT__ *</typedef>

<struct name="HICON__">
int unused; };
<typedef name="HICON">HICON__ *</typedef>

<struct name="HMENU__">
int unused; };
<typedef name="HMENU">HMENU__ *</typedef>

<struct name="HMETAFILE__">
int unused; };
<typedef name="HMETAFILE">HMETAFILE__ *</typedef>
<struct name="HINSTANCE__">
int unused; };
<typedef name="HINSTANCE">HINSTANCE__ *</typedef>
  typedef HINSTANCE HMODULE;

<struct name="HPALETTE__">
int unused; };
<typedef name="HPALETTE">HPALETTE__ *</typedef>
<struct name="HPEN__">
int unused; };
<typedef name="HPEN">HPEN__ *</typedef>

<struct name="HRGN__">
int unused; };
<typedef name="HRGN">HRGN__ *</typedef>
<struct name="HRSRC__">
int unused; };
<typedef name="HRSRC">HRSRC__ *</typedef>
<struct name="HSPRITE__">
int unused; };
<typedef name="HSPRITE">HSPRITE__ *</typedef>
<struct name="HSTR__">
int unused; };
<typedef name="HSTR">HSTR__ *</typedef>
<struct name="HTASK__">
int unused; };
<typedef name="HTASK">HTASK__ *</typedef>
<struct name="HWINSTA__">
int unused; };
<typedef name="HWINSTA">HWINSTA__ *</typedef>
<struct name="HKL__">
int unused; };
<typedef name="HKL">HKL__ *</typedef>
<struct name="HWINEVENTHOOK__">
int unused; };
<typedef name="HWINEVENTHOOK">HWINEVENTHOOK__ *</typedef>

<struct name="HMONITOR__">
int unused; };
<typedef name="HMONITOR">HMONITOR__ *</typedef>

<struct name="HUMPD__">
int unused; };
<typedef name="HUMPD">HUMPD__ *</typedef>

  typedef int HFILE;
  typedef HICON HCURSOR;
  typedef DWORD   COLORREF;
  typedef DWORD   *LPCOLORREF;
<struct name="tagRECT">
<field name="left">LONG</field>
<field name="top">LONG</field>
<field name="right">LONG</field>
<field name="bottom">LONG</field>
  } RECT, *PRECT,  *NPRECT,  *LPRECT;

  typedef const RECT * LPCRECT;

<struct name="_RECTL">
<field name="left">LONG</field>
<field name="top">LONG</field>
<field name="right">LONG</field>
<field name="bottom">LONG</field>
  } RECTL, *PRECTL, *LPRECTL;

  typedef const RECTL * LPCRECTL;

<struct name="tagPOINT">
<field name="x">LONG</field>
<field name="y">LONG</field>
  } POINT, *PPOINT,  *NPPOINT,  *LPPOINT;

<struct name="_POINTL">
<field name="x">LONG</field>
<field name="y">LONG</field>
</struct>
<typedefprev id="POINTL"/>
<typedefptrprev id="PPOINTL"/>

<struct name="tagSIZE">
<field name="cx">LONG</field>
<field name="cy">LONG</field>
  } SIZE, *PSIZE, *LPSIZE;

  typedef SIZE               SIZEL;
  typedef SIZE               *PSIZEL, *LPSIZEL;

<struct name="tagPOINTS">

  SHORT   x;
  SHORT   y;

  } POINTS, *PPOINTS, *LPPOINTS;
<struct name="_FILETIME">
<field name="dwLowDateTime">DWORD</field>
<field name="dwHighDateTime">DWORD</field>
  } FILETIME, *PFILETIME, *LPFILETIME;
  #line 1 "\\program files\\Microsoft SDKs\\Windows\\v6.0A\\Include\\winbase.h"
  #pragma once

<struct name="_OVERLAPPED">
<field name="Internal">ULONG_PTR</field>
<field name="InternalHigh">ULONG_PTR</field>
  union {
<struct>
<field name="Offset">DWORD</field>
<field name="OffsetHigh">DWORD</field>
  };

  PVOID Pointer;
  };

  HANDLE  hEvent;
  } OVERLAPPED, *LPOVERLAPPED;

<struct name="_OVERLAPPED_ENTRY">
<field name="lpCompletionKey">ULONG_PTR</field>
<field name="lpOverlapped">LPOVERLAPPED</field>
<field name="Internal">ULONG_PTR</field>
<field name="dwNumberOfBytesTransferred">DWORD</field>
</struct>
<typedefprev id="OVERLAPPED_ENTRY"/>
<typedefptrprev id="LPOVERLAPPED_ENTRY"/>

<struct name="_SECURITY_ATTRIBUTES">
<field name="nLength">DWORD</field>
<field name="lpSecurityDescriptor">LPVOID</field>
<field name="bInheritHandle">BOOL</field>
  } SECURITY_ATTRIBUTES, *PSECURITY_ATTRIBUTES, *LPSECURITY_ATTRIBUTES;

<struct name="_PROCESS_INFORMATION">
<field name="hProcess">HANDLE</field>
<field name="hThread">HANDLE</field>
<field name="dwProcessId">DWORD</field>
<field name="dwThreadId">DWORD</field>
  } PROCESS_INFORMATION, *PPROCESS_INFORMATION, *LPPROCESS_INFORMATION;
<struct name="_SYSTEMTIME">
<field name="wYear">WORD</field>
<field name="wMonth">WORD</field>
<field name="wDayOfWeek">WORD</field>
<field name="wDay">WORD</field>
<field name="wHour">WORD</field>
<field name="wMinute">WORD</field>
<field name="wSecond">WORD</field>
<field name="wMilliseconds">WORD</field>
  } SYSTEMTIME, *PSYSTEMTIME, *LPSYSTEMTIME;
  typedef<fnptr name="PTHREAD_START_ROUTINE" ret="DWORD" convention="__stdcall">

<arg name="lpThreadParameter">LPVOID</arg>
</function>
  typedef PTHREAD_START_ROUTINE LPTHREAD_START_ROUTINE;
  typedef<fnptr name="PFIBER_START_ROUTINE" ret="void" convention="__stdcall">

<arg name="lpFiberParameter">LPVOID</arg>
</function>
  typedef PFIBER_START_ROUTINE LPFIBER_START_ROUTINE;
  typedef RTL_CRITICAL_SECTION CRITICAL_SECTION;
  typedef PRTL_CRITICAL_SECTION PCRITICAL_SECTION;
  typedef PRTL_CRITICAL_SECTION LPCRITICAL_SECTION;

  typedef RTL_CRITICAL_SECTION_DEBUG CRITICAL_SECTION_DEBUG;
  typedef PRTL_CRITICAL_SECTION_DEBUG PCRITICAL_SECTION_DEBUG;
  typedef PRTL_CRITICAL_SECTION_DEBUG LPCRITICAL_SECTION_DEBUG;
  typedef RTL_RUN_ONCE INIT_ONCE;
  typedef PRTL_RUN_ONCE PINIT_ONCE;
  typedef PRTL_RUN_ONCE LPINIT_ONCE;

  typedef
  BOOL
  (__stdcall *PINIT_ONCE_FN) (
  PINIT_ONCE InitOnce,
  PVOID Parameter,
<arg name="Context">PVOID *</arg>
</function>

  <function name="InitOnceInitialize" ret="void" convention="__stdcall">
<arg name="InitOnce">PINIT_ONCE</arg>
</function>

  <function name="InitOnceExecuteOnce" ret="BOOL" convention="__stdcall">
<arg name="InitOnce">PINIT_ONCE</arg>
<arg name="InitFn">PINIT_ONCE_FN</arg>
<arg name="Parameter">PVOID</arg>
<arg name="Context">LPVOID *</arg>
</function>

  <function name="InitOnceBeginInitialize" ret="BOOL" convention="__stdcall">
<arg name="lpInitOnce">LPINIT_ONCE</arg>
<arg name="dwFlags">DWORD</arg>
<arg name="fPending">PBOOL</arg>
<arg name="lpContext">LPVOID *</arg>
</function>

  <function name="InitOnceComplete" ret="BOOL" convention="__stdcall">
<arg name="lpInitOnce">LPINIT_ONCE</arg>
<arg name="dwFlags">DWORD</arg>
<arg name="lpContext">LPVOID</arg>
</function>
  typedef RTL_SRWLOCK SRWLOCK, *PSRWLOCK;
  <function name="InitializeSRWLock" ret="void" convention="__stdcall">
<arg name="SRWLock">PSRWLOCK</arg>
</function>

  <function name="ReleaseSRWLockExclusive" ret="void" convention="__stdcall">
<arg name="SRWLock">PSRWLOCK</arg>
</function>

  <function name="ReleaseSRWLockShared" ret="void" convention="__stdcall">
<arg name="SRWLock">PSRWLOCK</arg>
</function>

  <function name="AcquireSRWLockExclusive" ret="void" convention="__stdcall">
<arg name="SRWLock">PSRWLOCK</arg>
</function>

  <function name="AcquireSRWLockShared" ret="void" convention="__stdcall">
<arg name="SRWLock">PSRWLOCK</arg>
</function>
  typedef RTL_CONDITION_VARIABLE CONDITION_VARIABLE, *PCONDITION_VARIABLE;

  <function name="InitializeConditionVariable" ret="void" convention="__stdcall">
<arg name="ConditionVariable">PCONDITION_VARIABLE</arg>
</function>

  <function name="WakeConditionVariable" ret="void" convention="__stdcall">
<arg name="ConditionVariable">PCONDITION_VARIABLE</arg>
</function>

  <function name="WakeAllConditionVariable" ret="void" convention="__stdcall">
<arg name="ConditionVariable">PCONDITION_VARIABLE</arg>
</function>

  <function name="SleepConditionVariableCS" ret="BOOL" convention="__stdcall">
<arg name="ConditionVariable">PCONDITION_VARIABLE</arg>
<arg name="CriticalSection">PCRITICAL_SECTION</arg>
<arg name="dwMilliseconds">DWORD</arg>
</function>

  <function name="SleepConditionVariableSRW" ret="BOOL" convention="__stdcall">
<arg name="ConditionVariable">PCONDITION_VARIABLE</arg>
<arg name="SRWLock">PSRWLOCK</arg>
<arg name="dwMilliseconds">DWORD</arg>
<arg name="Flags">ULONG</arg>
</function>

<function name="EncodePointer" ret="PVOID" convention="__stdcall">
<arg name="Ptr">PVOID</arg>
</function>


<function name="DecodePointer" ret="PVOID" convention="__stdcall">
<arg name="Ptr">PVOID</arg>
</function>


<function name="EncodeSystemPointer" ret="PVOID" convention="__stdcall">
<arg name="Ptr">PVOID</arg>
</function>


<function name="DecodeSystemPointer" ret="PVOID" convention="__stdcall">
<arg name="Ptr">PVOID</arg>
</function>
  typedef PLDT_ENTRY LPLDT_ENTRY;
<struct name="_COMMPROP">
<field name="wPacketLength">WORD</field>
<field name="wPacketVersion">WORD</field>
<field name="dwServiceMask">DWORD</field>
<field name="dwReserved1">DWORD</field>
<field name="dwMaxTxQueue">DWORD</field>
<field name="dwMaxRxQueue">DWORD</field>
<field name="dwMaxBaud">DWORD</field>
<field name="dwProvSubType">DWORD</field>
<field name="dwProvCapabilities">DWORD</field>
<field name="dwSettableParams">DWORD</field>
<field name="dwSettableBaud">DWORD</field>
<field name="wSettableData">WORD</field>
<field name="wSettableStopParity">WORD</field>
<field name="dwCurrentTxQueue">DWORD</field>
<field name="dwCurrentRxQueue">DWORD</field>
<field name="dwProvSpec1">DWORD</field>
<field name="dwProvSpec2">DWORD</field>
<field name="wcProvChar[1]">WCHAR</field>
</struct>
<typedefprev id="COMMPROP"/>
<typedefptrprev id="LPCOMMPROP"/>
<struct name="_COMSTAT">
  DWORD fCtsHold : 1;
  DWORD fDsrHold : 1;
  DWORD fRlsdHold : 1;
  DWORD fXoffHold : 1;
  DWORD fXoffSent : 1;
  DWORD fEof : 1;
  DWORD fTxim : 1;
  DWORD fReserved : 25;
  DWORD cbInQue;
  DWORD cbOutQue;
  } COMSTAT, *LPCOMSTAT;
<struct name="_DCB">
<field name="DCBlength">DWORD</field>
<field name="BaudRate">DWORD</field>
  DWORD fBinary: 1;
  DWORD fParity: 1;
  DWORD fOutxCtsFlow:1;
  DWORD fOutxDsrFlow:1;
  DWORD fDtrControl:2;
  DWORD fDsrSensitivity:1;
  DWORD fTXContinueOnXoff: 1;
  DWORD fOutX: 1;
  DWORD fInX: 1;
  DWORD fErrorChar: 1;
  DWORD fNull: 1;
  DWORD fRtsControl:2;
  DWORD fAbortOnError:1;
  DWORD fDummy2:17;
  WORD wReserved;
  WORD XonLim;
  WORD XoffLim;
  BYTE ByteSize;
  BYTE Parity;
  BYTE StopBits;
  char XonChar;
  char XoffChar;
  char ErrorChar;
  char EofChar;
  char EvtChar;
  WORD wReserved1;
  } DCB, *LPDCB;

<struct name="_COMMTIMEOUTS">
<field name="ReadIntervalTimeout">DWORD</field>
<field name="ReadTotalTimeoutMultiplier">DWORD</field>
<field name="ReadTotalTimeoutConstant">DWORD</field>
<field name="WriteTotalTimeoutMultiplier">DWORD</field>
<field name="WriteTotalTimeoutConstant">DWORD</field>
</struct>
<typedefprev id="COMMTIMEOUTS"/>
<typedefptrprev id="LPCOMMTIMEOUTS"/>

<struct name="_COMMCONFIG">
<field name="dwSize">DWORD</field>
<field name="wVersion">WORD</field>
<field name="wReserved">WORD</field>
<field name="dcb">DCB</field>
<field name="dwProviderSubType">DWORD</field>
<field name="dwProviderOffset">DWORD</field>

  DWORD dwProviderSize;
  WCHAR wcProviderData[1];
  } COMMCONFIG,*LPCOMMCONFIG;

<struct name="_SYSTEM_INFO">
  union {
  DWORD dwOemId;
<struct>
<field name="wProcessorArchitecture">WORD</field>
<field name="wReserved">WORD</field>
  };
  };
  DWORD dwPageSize;
  LPVOID lpMinimumApplicationAddress;
  LPVOID lpMaximumApplicationAddress;
  DWORD_PTR dwActiveProcessorMask;
  DWORD dwNumberOfProcessors;
  DWORD dwProcessorType;
  DWORD dwAllocationGranularity;
  WORD wProcessorLevel;
  WORD wProcessorRevision;
  } SYSTEM_INFO, *LPSYSTEM_INFO;
<struct name="_MEMORYSTATUS">
<field name="dwLength">DWORD</field>
<field name="dwMemoryLoad">DWORD</field>
<field name="dwTotalPhys">SIZE_T</field>
<field name="dwAvailPhys">SIZE_T</field>
<field name="dwTotalPageFile">SIZE_T</field>
<field name="dwAvailPageFile">SIZE_T</field>
<field name="dwTotalVirtual">SIZE_T</field>
<field name="dwAvailVirtual">SIZE_T</field>
</struct>
<typedefprev id="MEMORYSTATUS"/>
<typedefptrprev id="LPMEMORYSTATUS"/>

<struct name="_EXCEPTION_DEBUG_INFO">
<field name="ExceptionRecord">EXCEPTION_RECORD</field>
<field name="dwFirstChance">DWORD</field>
</struct>
<typedefprev id="EXCEPTION_DEBUG_INFO"/>
<typedefptrprev id="LPEXCEPTION_DEBUG_INFO"/>

<struct name="_CREATE_THREAD_DEBUG_INFO">
<field name="hThread">HANDLE</field>
<field name="lpThreadLocalBase">LPVOID</field>
<field name="lpStartAddress">LPTHREAD_START_ROUTINE</field>
</struct>
<typedefprev id="CREATE_THREAD_DEBUG_INFO"/>
<typedefptrprev id="LPCREATE_THREAD_DEBUG_INFO"/>

<struct name="_CREATE_PROCESS_DEBUG_INFO">
<field name="hFile">HANDLE</field>
<field name="hProcess">HANDLE</field>
<field name="hThread">HANDLE</field>
<field name="lpBaseOfImage">LPVOID</field>
<field name="dwDebugInfoFileOffset">DWORD</field>
<field name="nDebugInfoSize">DWORD</field>
<field name="lpThreadLocalBase">LPVOID</field>
<field name="lpStartAddress">LPTHREAD_START_ROUTINE</field>
<field name="lpImageName">LPVOID</field>
<field name="fUnicode">WORD</field>
</struct>
<typedefprev id="CREATE_PROCESS_DEBUG_INFO"/>
<typedefptrprev id="LPCREATE_PROCESS_DEBUG_INFO"/>

<struct name="_EXIT_THREAD_DEBUG_INFO">
<field name="dwExitCode">DWORD</field>
</struct>
<typedefprev id="EXIT_THREAD_DEBUG_INFO"/>
<typedefptrprev id="LPEXIT_THREAD_DEBUG_INFO"/>

<struct name="_EXIT_PROCESS_DEBUG_INFO">
<field name="dwExitCode">DWORD</field>
</struct>
<typedefprev id="EXIT_PROCESS_DEBUG_INFO"/>
<typedefptrprev id="LPEXIT_PROCESS_DEBUG_INFO"/>

<struct name="_LOAD_DLL_DEBUG_INFO">
<field name="hFile">HANDLE</field>
<field name="lpBaseOfDll">LPVOID</field>
<field name="dwDebugInfoFileOffset">DWORD</field>
<field name="nDebugInfoSize">DWORD</field>
<field name="lpImageName">LPVOID</field>
<field name="fUnicode">WORD</field>
</struct>
<typedefprev id="LOAD_DLL_DEBUG_INFO"/>
<typedefptrprev id="LPLOAD_DLL_DEBUG_INFO"/>

<struct name="_UNLOAD_DLL_DEBUG_INFO">
<field name="lpBaseOfDll">LPVOID</field>
</struct>
<typedefprev id="UNLOAD_DLL_DEBUG_INFO"/>
<typedefptrprev id="LPUNLOAD_DLL_DEBUG_INFO"/>

<struct name="_OUTPUT_DEBUG_STRING_INFO">
<field name="lpDebugStringData">LPSTR</field>
<field name="fUnicode">WORD</field>
<field name="nDebugStringLength">WORD</field>
</struct>
<typedefprev id="OUTPUT_DEBUG_STRING_INFO"/>
<typedefptrprev id="LPOUTPUT_DEBUG_STRING_INFO"/>

<struct name="_RIP_INFO">
<field name="dwError">DWORD</field>
<field name="dwType">DWORD</field>
</struct>
<typedefprev id="RIP_INFO"/>
<typedefptrprev id="LPRIP_INFO"/>
<struct name="_DEBUG_EVENT">
<field name="dwDebugEventCode">DWORD</field>
<field name="dwProcessId">DWORD</field>
<field name="dwThreadId">DWORD</field>
  union {
  EXCEPTION_DEBUG_INFO Exception;
  CREATE_THREAD_DEBUG_INFO CreateThread;
  CREATE_PROCESS_DEBUG_INFO CreateProcessInfo;
  EXIT_THREAD_DEBUG_INFO ExitThread;
  EXIT_PROCESS_DEBUG_INFO ExitProcess;
  LOAD_DLL_DEBUG_INFO LoadDll;
  UNLOAD_DLL_DEBUG_INFO UnloadDll;
  OUTPUT_DEBUG_STRING_INFO DebugString;
  RIP_INFO RipInfo;
  } u;
  } DEBUG_EVENT, *LPDEBUG_EVENT;

<struct name="_JIT_DEBUG_INFO">
<field name="dwSize">DWORD</field>
<field name="dwProcessorArchitecture">DWORD</field>
<field name="dwThreadID">DWORD</field>
<field name="dwReserved0">DWORD</field>
<field name="lpExceptionAddress">ULONG64</field>
<field name="lpExceptionRecord">ULONG64</field>
<field name="lpContextRecord">ULONG64</field>
</struct>
<typedefprev id="JIT_DEBUG_INFO"/>
<typedefptrprev id="LPJIT_DEBUG_INFO"/>

  typedef JIT_DEBUG_INFO JIT_DEBUG_INFO32, *LPJIT_DEBUG_INFO32;
  typedef JIT_DEBUG_INFO JIT_DEBUG_INFO64, *LPJIT_DEBUG_INFO64;
  typedef PCONTEXT LPCONTEXT;
  typedef PEXCEPTION_RECORD LPEXCEPTION_RECORD;
  typedef PEXCEPTION_POINTERS LPEXCEPTION_POINTERS;

<struct name="_OFSTRUCT">
<field name="cBytes">BYTE</field>
<field name="fFixedDisk">BYTE</field>
<field name="nErrCode">WORD</field>
<field name="Reserved1">WORD</field>
<field name="Reserved2">WORD</field>
<field name="szPathName[128]">CHAR</field>
  } OFSTRUCT, *LPOFSTRUCT, *POFSTRUCT;

  <function name="InterlockedIncrement" ret="LONG" convention="__stdcall">
<arg name="lpAddend">LONG volatile *</arg>
</function>

  <function name="InterlockedDecrement" ret="LONG" convention="__stdcall">
<arg name="lpAddend">LONG volatile *</arg>
</function>

  <function name="InterlockedExchange" ret="LONG" convention="__stdcall">
<arg name="Target">LONG volatile *</arg>
<arg name="Value">LONG</arg>
</function>

  <function name="InterlockedExchangeAdd" ret="LONG" convention="__stdcall">
<arg name="Addend">LONG volatile *</arg>
<arg name="Value">LONG</arg>
</function>

  <function name="InterlockedCompareExchange" ret="LONG" convention="__stdcall">
<arg name="Destination">LONG volatile *</arg>

  LONG Exchange,
<arg name="Comperand">LONG</arg>
</function>
  <function name="InterlockedCompareExchange64" ret="LONGLONG" convention="__stdcall">
<arg name="Destination">LONGLONG volatile *</arg>

  LONGLONG Exchange,
<arg name="Comperand">LONGLONG</arg>
</function>
  

  __forceinline
  LONGLONG
  InterlockedXor64 (
  LONGLONG volatile *Destination,
  LONGLONG Value
  )
  {
  LONGLONG Old;

  do {
  Old = *Destination;
  } while (InterlockedCompareExchange64(Destination,
  Old ^ Value,
  Old) != Old);

  return Old;
  }

  __forceinline
  LONGLONG
  InterlockedIncrement64 (
  LONGLONG volatile *Addend
  )
  {
  LONGLONG Old;

  do {
  Old = *Addend;
  } while (InterlockedCompareExchange64(Addend,
  Old + 1,
  Old) != Old);

  return Old + 1;
  }

  __forceinline
  LONGLONG
  InterlockedDecrement64 (
  LONGLONG volatile *Addend
  )
  {
  LONGLONG Old;

  do {
  Old = *Addend;
  } while (InterlockedCompareExchange64(Addend,
  Old - 1,
  Old) != Old);

  return Old - 1;
  }

  __forceinline
  LONGLONG
  InterlockedExchange64 (
  LONGLONG volatile *Target,
  LONGLONG Value
  )
  {
  LONGLONG Old;

  do {
  Old = *Target;
  } while (InterlockedCompareExchange64(Target,
  Value,
  Old) != Old);

  return Old;
  }

  __forceinline
  LONGLONG
  InterlockedExchangeAdd64(
  LONGLONG volatile *Addend,
  LONGLONG Value
  )
  {
  LONGLONG Old;

  do {
  Old = *Addend;
  } while (InterlockedCompareExchange64(Addend,
  Old + Value,
  Old) != Old);

  return Old;
  }
  <function name="InitializeSListHead" ret="void" convention="__stdcall">
<arg name="ListHead">PSLIST_HEADER</arg>
</function>

  <function name="InterlockedPopEntrySList" ret="PSINGLE_LIST_ENTRY" convention="__stdcall">
<arg name="ListHead">PSLIST_HEADER</arg>
</function>

  <function name="InterlockedPushEntrySList" ret="PSINGLE_LIST_ENTRY" convention="__stdcall">
<arg name="ListHead">PSLIST_HEADER</arg>
<arg name="ListEntry">PSINGLE_LIST_ENTRY</arg>
</function>

  <function name="InterlockedFlushSList" ret="PSINGLE_LIST_ENTRY" convention="__stdcall">
<arg name="ListHead">PSLIST_HEADER</arg>
</function>

  <function name="QueryDepthSList" ret="USHORT" convention="__stdcall">
<arg name="ListHead">PSLIST_HEADER</arg>
</function>
<function name="FreeResource" ret="BOOL" convention="__stdcall">
<arg name="hResData">HGLOBAL</arg>
</function>

<function name="LockResource" ret="LPVOID" convention="__stdcall">
<arg name="hResData">HGLOBAL</arg>
</function>

  int
  __stdcall
  WinMain (
  HINSTANCE hInstance,
  HINSTANCE hPrevInstance,
  LPSTR lpCmdLine,
<arg name="nShowCmd">int</arg>
</function>

  int
  __stdcall
  wWinMain(
  HINSTANCE hInstance,
  HINSTANCE hPrevInstance,
  LPWSTR lpCmdLine,
<arg name="nShowCmd">int</arg>
</function>

  <function name="FreeLibrary" ret="BOOL" convention="__stdcall">
<arg name="hLibModule">HMODULE</arg>
</function>
<function name="FreeLibraryAndExitThread" noreturn="true" ret="void" convention="__stdcall">
<arg name="hLibModule">HMODULE</arg>
<arg name="dwExitCode">DWORD</arg>
</function>

  <function name="DisableThreadLibraryCalls" ret="BOOL" convention="__stdcall">
<arg name="hLibModule">HMODULE</arg>
</function>

  <function name="GetProcAddress" ret="FARPROC" convention="__stdcall">
<arg name="hModule">HMODULE</arg>
<arg name="lpProcName">LPCSTR</arg>
</function>

  <function name="GetVersion" ret="DWORD" convention="__stdcall">
<arg name="void"></arg>
</function>

<function name="GlobalAlloc" ret="HGLOBAL" convention="__stdcall">
<arg name="uFlags">UINT</arg>
<arg name="dwBytes">SIZE_T</arg>
</function>

<function name="GlobalReAlloc" ret="HGLOBAL" convention="__stdcall">
<arg name="hMem">HGLOBAL</arg>
<arg name="dwBytes">SIZE_T</arg>
<arg name="uFlags">UINT</arg>
</function>

  <function name="GlobalSize" ret="SIZE_T" convention="__stdcall">
<arg name="hMem">HGLOBAL</arg>
</function>

  <function name="GlobalFlags" ret="UINT" convention="__stdcall">
<arg name="hMem">HGLOBAL</arg>
</function>

<function name="GlobalLock" ret="LPVOID" convention="__stdcall">
<arg name="hMem">HGLOBAL</arg>
</function>

<function name="GlobalHandle" ret="HGLOBAL" convention="__stdcall">
<arg name="pMem">LPCVOID</arg>
</function>

<function name="GlobalUnlock" ret="BOOL" convention="__stdcall">
<arg name="hMem">HGLOBAL</arg>
</function>

<function name="GlobalFree" ret="HGLOBAL" convention="__stdcall">
<arg name="hMem">HGLOBAL</arg>
</function>

<function name="GlobalCompact" ret="SIZE_T" convention="__stdcall">
<arg name="dwMinFree">DWORD</arg>
</function>

<function name="GlobalFix" ret="void" convention="__stdcall">
<arg name="hMem">HGLOBAL</arg>
</function>

<function name="GlobalUnfix" ret="void" convention="__stdcall">
<arg name="hMem">HGLOBAL</arg>
</function>

<function name="GlobalWire" ret="LPVOID" convention="__stdcall">
<arg name="hMem">HGLOBAL</arg>
</function>

<function name="GlobalUnWire" ret="BOOL" convention="__stdcall">
<arg name="hMem">HGLOBAL</arg>
</function>

<function name="GlobalMemoryStatus" ret="void" convention="__stdcall">
<arg name="lpBuffer">LPMEMORYSTATUS</arg>
</function>

<struct name="_MEMORYSTATUSEX">
<field name="dwLength">DWORD</field>
<field name="dwMemoryLoad">DWORD</field>
<field name="ullTotalPhys">DWORDLONG</field>
<field name="ullAvailPhys">DWORDLONG</field>
<field name="ullTotalPageFile">DWORDLONG</field>
<field name="ullAvailPageFile">DWORDLONG</field>
<field name="ullTotalVirtual">DWORDLONG</field>
<field name="ullAvailVirtual">DWORDLONG</field>
<field name="ullAvailExtendedVirtual">DWORDLONG</field>
</struct>
<typedefprev id="MEMORYSTATUSEX"/>
<typedefptrprev id="LPMEMORYSTATUSEX"/>

<function name="GlobalMemoryStatusEx" ret="BOOL" convention="__stdcall">
<arg name="lpBuffer">LPMEMORYSTATUSEX</arg>
</function>

<function name="LocalAlloc" ret="HLOCAL" convention="__stdcall">
<arg name="uFlags">UINT</arg>
<arg name="uBytes">SIZE_T</arg>
</function>

<function name="LocalReAlloc" ret="HLOCAL" convention="__stdcall">
<arg name="hMem">HLOCAL</arg>
<arg name="uBytes">SIZE_T</arg>
<arg name="uFlags">UINT</arg>
</function>

<function name="LocalLock" ret="LPVOID" convention="__stdcall">
<arg name="hMem">HLOCAL</arg>
</function>

<function name="LocalHandle" ret="HLOCAL" convention="__stdcall">
<arg name="pMem">LPCVOID</arg>
</function>

<function name="LocalUnlock" ret="BOOL" convention="__stdcall">
<arg name="hMem">HLOCAL</arg>
</function>

<function name="LocalSize" ret="SIZE_T" convention="__stdcall">
<arg name="hMem">HLOCAL</arg>
</function>

<function name="LocalFlags" ret="UINT" convention="__stdcall">
<arg name="hMem">HLOCAL</arg>
</function>

<function name="LocalFree" ret="HLOCAL" convention="__stdcall">
<arg name="hMem">HLOCAL</arg>
</function>

<function name="LocalShrink" ret="SIZE_T" convention="__stdcall">
<arg name="hMem">HLOCAL</arg>
<arg name="cbNewSize">UINT</arg>
</function>

<function name="LocalCompact" ret="SIZE_T" convention="__stdcall">
<arg name="uMinFree">UINT</arg>
</function>

<function name="FlushInstructionCache" ret="BOOL" convention="__stdcall">
<arg name="hProcess">HANDLE</arg>
<arg name="lpBaseAddress">LPCVOID</arg>
<arg name="dwSize">SIZE_T</arg>
</function>
<function name="FlushProcessWriteBuffers" ret="void" convention="__stdcall">
<arg name="void"></arg>
</function>

  <function name="QueryThreadCycleTime" ret="BOOL" convention="__stdcall">
<arg name="ThreadHandle">HANDLE</arg>
<arg name="CycleTime">PULONG64</arg>
</function>

  <function name="QueryProcessCycleTime" ret="BOOL" convention="__stdcall">
<arg name="ProcessHandle">HANDLE</arg>
<arg name="CycleTime">PULONG64</arg>
</function>

  <function name="QueryIdleProcessorCycleTime" ret="BOOL" convention="__stdcall">
<arg name="BufferLength">PULONG</arg>
<arg name="ProcessorIdleCycleTime">PULONG64</arg>
</function>
<function name="VirtualAlloc" ret="LPVOID" convention="__stdcall">
<arg name="lpAddress">LPVOID</arg>
<arg name="dwSize">SIZE_T</arg>
<arg name="flAllocationType">DWORD</arg>
<arg name="flProtect">DWORD</arg>
</function>

<function name="VirtualFree" ret="BOOL" convention="__stdcall">
<arg name="lpAddress">LPVOID</arg>
<arg name="dwSize">SIZE_T</arg>
<arg name="dwFreeType">DWORD</arg>
</function>

<function name="VirtualProtect" ret="BOOL" convention="__stdcall">
<arg name="lpAddress">LPVOID</arg>
<arg name="dwSize">SIZE_T</arg>
<arg name="flNewProtect">DWORD</arg>
<arg name="lpflOldProtect">PDWORD</arg>
</function>

<function name="VirtualQuery" ret="SIZE_T" convention="__stdcall">
<arg name="lpAddress">LPCVOID</arg>
<arg name="lpBuffer">PMEMORY_BASIC_INFORMATION</arg>
<arg name="dwLength">SIZE_T</arg>
</function>

<function name="VirtualAllocEx" ret="LPVOID" convention="__stdcall">
<arg name="hProcess">HANDLE</arg>
<arg name="lpAddress">LPVOID</arg>
<arg name="dwSize">SIZE_T</arg>
<arg name="flAllocationType">DWORD</arg>
<arg name="flProtect">DWORD</arg>
</function>
<function name="VirtualAllocExNuma" ret="LPVOID" convention="__stdcall">
<arg name="hProcess">HANDLE</arg>
<arg name="lpAddress">LPVOID</arg>
<arg name="dwSize">SIZE_T</arg>
<arg name="flAllocationType">DWORD </arg>
<arg name="flProtect">DWORD </arg>
<arg name="nndPreferred">DWORD </arg>
</function>
<function name="GetWriteWatch" ret="UINT" convention="__stdcall">
<arg name="dwFlags">DWORD</arg>
<arg name="lpBaseAddress">PVOID</arg>
<arg name="dwRegionSize">SIZE_T</arg>

  PVOID *lpAddresses,
  ULONG_PTR *lpdwCount,
<arg name="lpdwGranularity">PULONG</arg>
</function>

<function name="ResetWriteWatch" ret="UINT" convention="__stdcall">
<arg name="lpBaseAddress">LPVOID</arg>
<arg name="dwRegionSize">SIZE_T</arg>
</function>

<function name="GetLargePageMinimum" ret="SIZE_T" convention="__stdcall">
<arg name="void"></arg>
</function>

<function name="EnumSystemFirmwareTables" ret="UINT" convention="__stdcall">
<arg name="FirmwareTableProviderSignature">DWORD</arg>
<arg name="pFirmwareTableEnumBuffer">PVOID</arg>
<arg name="BufferSize">DWORD</arg>
</function>

<function name="GetSystemFirmwareTable" ret="UINT" convention="__stdcall">
<arg name="FirmwareTableProviderSignature">DWORD</arg>
<arg name="FirmwareTableID">DWORD</arg>
<arg name="pFirmwareTableBuffer">PVOID</arg>
<arg name="BufferSize">DWORD</arg>
</function>

<function name="VirtualFreeEx" ret="BOOL" convention="__stdcall">
<arg name="hProcess">HANDLE</arg>
<arg name="lpAddress">LPVOID</arg>
<arg name="dwSize">SIZE_T</arg>
<arg name="dwFreeType">DWORD </arg>
</function>

<function name="VirtualProtectEx" ret="BOOL" convention="__stdcall">
<arg name="hProcess">HANDLE</arg>
<arg name="lpAddress">LPVOID</arg>
<arg name="dwSize">SIZE_T</arg>
<arg name="flNewProtect">DWORD</arg>
<arg name="lpflOldProtect">PDWORD</arg>
</function>

<function name="VirtualQueryEx" ret="SIZE_T" convention="__stdcall">
<arg name="hProcess">HANDLE</arg>
<arg name="lpAddress">LPCVOID</arg>
<arg name="lpBuffer">PMEMORY_BASIC_INFORMATION</arg>
<arg name="dwLength">SIZE_T</arg>
</function>

<function name="HeapCreate" ret="HANDLE" convention="__stdcall">
<arg name="flOptions">DWORD</arg>
<arg name="dwInitialSize">SIZE_T</arg>
<arg name="dwMaximumSize">SIZE_T</arg>
</function>

<function name="HeapDestroy" ret="BOOL" convention="__stdcall">
<arg name="hHeap">HANDLE</arg>
</function>

<function name="HeapAlloc" ret="LPVOID" convention="__stdcall">
<arg name="hHeap">HANDLE</arg>
<arg name="dwFlags">DWORD</arg>
<arg name="dwBytes">SIZE_T</arg>
</function>

<function name="HeapReAlloc" ret="LPVOID" convention="__stdcall">
<arg name="hHeap">HANDLE</arg>
<arg name="dwFlags">DWORD</arg>
<arg name="lpMem">LPVOID</arg>
<arg name="dwBytes">SIZE_T</arg>
</function>

<function name="HeapFree" ret="BOOL" convention="__stdcall">
<arg name="hHeap">HANDLE</arg>
<arg name="dwFlags">DWORD</arg>
<arg name="lpMem">LPVOID</arg>
</function>

<function name="HeapSize" ret="SIZE_T" convention="__stdcall">
<arg name="hHeap">HANDLE</arg>
<arg name="dwFlags">DWORD</arg>
<arg name="lpMem">LPCVOID</arg>
</function>

<function name="HeapValidate" ret="BOOL" convention="__stdcall">
<arg name="hHeap">HANDLE</arg>
<arg name="dwFlags">DWORD</arg>
<arg name="lpMem">LPCVOID</arg>
</function>

<function name="HeapCompact" ret="SIZE_T" convention="__stdcall">
<arg name="hHeap">HANDLE</arg>
<arg name="dwFlags">DWORD</arg>
</function>

<function name="GetProcessHeap" ret="HANDLE" convention="__stdcall"> void );

<function name="GetProcessHeaps" ret="DWORD" convention="__stdcall">
<arg name="NumberOfHeaps">DWORD</arg>
<arg name="ProcessHeaps">PHANDLE</arg>
</function>

<struct name="_PROCESS_HEAP_ENTRY">
<field name="lpData">PVOID</field>
<field name="cbData">DWORD</field>
<field name="cbOverhead">BYTE</field>
<field name="iRegionIndex">BYTE</field>
<field name="wFlags">WORD</field>
  union {
<struct>
<field name="hMem">HANDLE</field>
<field name="dwReserved[ 3 ]">DWORD</field>
  } Block;
<struct>
<field name="dwCommittedSize">DWORD</field>
<field name="dwUnCommittedSize">DWORD</field>
<field name="lpFirstBlock">LPVOID</field>
<field name="lpLastBlock">LPVOID</field>
<field name="Region">}</field>
  };
  } PROCESS_HEAP_ENTRY, *LPPROCESS_HEAP_ENTRY, *PPROCESS_HEAP_ENTRY;
<function name="HeapLock" ret="BOOL" convention="__stdcall">
<arg name="hHeap">HANDLE</arg>
</function>

<function name="HeapUnlock" ret="BOOL" convention="__stdcall">
<arg name="hHeap">HANDLE</arg>
</function>
<function name="HeapWalk" ret="BOOL" convention="__stdcall">
<arg name="hHeap">HANDLE</arg>
<arg name="lpEntry">LPPROCESS_HEAP_ENTRY</arg>
</function>

  <function name="HeapSetInformation" ret="BOOL" convention="__stdcall">
<arg name="HeapHandle">HANDLE</arg>
<arg name="HeapInformationClass">HEAP_INFORMATION_CLASS</arg>
<arg name="HeapInformation">PVOID</arg>
<arg name="HeapInformationLength">SIZE_T</arg>
</function>

  <function name="HeapQueryInformation" ret="BOOL" convention="__stdcall">
<arg name="HeapHandle">HANDLE</arg>
<arg name="HeapInformationClass">HEAP_INFORMATION_CLASS</arg>
<arg name="HeapInformation">PVOID</arg>
<arg name="HeapInformationLength">SIZE_T</arg>
<arg name="ReturnLength">PSIZE_T</arg>
</function>
<function name="GetBinaryTypeA" ret="BOOL" convention="__stdcall">
<arg name="lpApplicationName">LPCSTR</arg>
<arg name="lpBinaryType">LPDWORD </arg>
</function>
<function name="GetBinaryTypeW" ret="BOOL" convention="__stdcall">
<arg name="lpApplicationName">LPCWSTR</arg>
<arg name="lpBinaryType">LPDWORD </arg>
</function>
<function name="GetShortPathNameA" ret="DWORD" convention="__stdcall">
<arg name="lpszLongPath">LPCSTR</arg>
<arg name="lpszShortPath">LPSTR </arg>
<arg name="cchBuffer">DWORD</arg>
</function>
<function name="GetShortPathNameW" ret="DWORD" convention="__stdcall">
<arg name="lpszLongPath">LPCWSTR</arg>
<arg name="lpszShortPath">LPWSTR </arg>
<arg name="cchBuffer">DWORD</arg>
</function>
<function name="GetLongPathNameA" ret="DWORD" convention="__stdcall">
<arg name="lpszShortPath">LPCSTR</arg>
<arg name="lpszLongPath">LPSTR </arg>
<arg name="cchBuffer">DWORD</arg>
</function>
<function name="GetLongPathNameW" ret="DWORD" convention="__stdcall">
<arg name="lpszShortPath">LPCWSTR</arg>
<arg name="lpszLongPath">LPWSTR </arg>
<arg name="cchBuffer">DWORD</arg>
</function>
<function name="GetLongPathNameTransactedA" ret="DWORD" convention="__stdcall">
<arg name="lpszShortPath">LPCSTR</arg>
<arg name="lpszLongPath">LPSTR </arg>
<arg name="cchBuffer">DWORD</arg>
<arg name="hTransaction">HANDLE</arg>
</function>
<function name="GetLongPathNameTransactedW" ret="DWORD" convention="__stdcall">
<arg name="lpszShortPath">LPCWSTR</arg>
<arg name="lpszLongPath">LPWSTR </arg>
<arg name="cchBuffer">DWORD</arg>
<arg name="hTransaction">HANDLE</arg>
</function>
<function name="GetProcessAffinityMask" ret="BOOL" convention="__stdcall">
<arg name="hProcess">HANDLE</arg>
<arg name="lpProcessAffinityMask">PDWORD_PTR</arg>
<arg name="lpSystemAffinityMask">PDWORD_PTR</arg>
</function>

<function name="SetProcessAffinityMask" ret="BOOL" convention="__stdcall">
<arg name="hProcess">HANDLE</arg>
<arg name="dwProcessAffinityMask">DWORD_PTR</arg>
</function>
<function name="GetProcessHandleCount" ret="BOOL" convention="__stdcall">
<arg name="hProcess">HANDLE</arg>
<arg name="pdwHandleCount">PDWORD</arg>
</function>
<function name="GetProcessTimes" ret="BOOL" convention="__stdcall">
<arg name="hProcess">HANDLE</arg>
<arg name="lpCreationTime">LPFILETIME</arg>
<arg name="lpExitTime">LPFILETIME</arg>
<arg name="lpKernelTime">LPFILETIME</arg>
<arg name="lpUserTime">LPFILETIME</arg>
</function>

<function name="GetProcessIoCounters" ret="BOOL" convention="__stdcall">
<arg name="hProcess">HANDLE</arg>
<arg name="lpIoCounters">PIO_COUNTERS</arg>
</function>

<function name="GetProcessWorkingSetSize" ret="BOOL" convention="__stdcall">
<arg name="hProcess">HANDLE</arg>
<arg name="lpMinimumWorkingSetSize">PSIZE_T</arg>
<arg name="lpMaximumWorkingSetSize">PSIZE_T</arg>
</function>

<function name="GetProcessWorkingSetSizeEx" ret="BOOL" convention="__stdcall">
<arg name="hProcess">HANDLE</arg>
<arg name="lpMinimumWorkingSetSize">PSIZE_T</arg>
<arg name="lpMaximumWorkingSetSize">PSIZE_T</arg>
<arg name="Flags">PDWORD</arg>
</function>

<function name="SetProcessWorkingSetSize" ret="BOOL" convention="__stdcall">
<arg name="hProcess">HANDLE</arg>
<arg name="dwMinimumWorkingSetSize">SIZE_T</arg>
<arg name="dwMaximumWorkingSetSize">SIZE_T</arg>
</function>

<function name="SetProcessWorkingSetSizeEx" ret="BOOL" convention="__stdcall">
<arg name="hProcess">HANDLE</arg>
<arg name="dwMinimumWorkingSetSize">SIZE_T</arg>
<arg name="dwMaximumWorkingSetSize">SIZE_T</arg>
<arg name="Flags">DWORD</arg>
</function>

<function name="OpenProcess" ret="HANDLE" convention="__stdcall">
<arg name="dwDesiredAccess">DWORD</arg>
<arg name="bInheritHandle">BOOL</arg>
<arg name="dwProcessId">DWORD</arg>
</function>

<function name="GetCurrentProcess" ret="HANDLE" convention="__stdcall">
<arg name="void"></arg>
</function>

<function name="GetCurrentProcessId" ret="DWORD" convention="__stdcall">
<arg name="void"></arg>
</function>

<function name="ExitProcess" noreturn="true" ret="void" convention="__stdcall">
<arg name="uExitCode">UINT</arg>
</function>

<function name="TerminateProcess" ret="BOOL" convention="__stdcall">
<arg name="hProcess">HANDLE</arg>
<arg name="uExitCode">UINT</arg>
</function>

<function name="GetExitCodeProcess" ret="BOOL" convention="__stdcall">
<arg name="hProcess">HANDLE</arg>
<arg name="lpExitCode">LPDWORD</arg>
</function>

<function name="FatalExit" ret="void" convention="__stdcall">
<arg name="ExitCode">int</arg>
</function>

<function name="GetEnvironmentStrings" ret="LPCH" convention="__stdcall">
<arg name="void"></arg>
</function>

<function name="GetEnvironmentStringsW" ret="LPWCH" convention="__stdcall">
<arg name="void"></arg>
</function>
<function name="SetEnvironmentStringsA" ret="BOOL" convention="__stdcall">
<arg name="NewEnvironment">LPCH</arg>
</function>
<function name="SetEnvironmentStringsW" ret="BOOL" convention="__stdcall">
<arg name="NewEnvironment">LPWCH</arg>
</function>
<function name="FreeEnvironmentStringsA" ret="BOOL" convention="__stdcall">
<arg name="LPCH"></arg>
</function>
<function name="FreeEnvironmentStringsW" ret="BOOL" convention="__stdcall">
<arg name="LPWCH"></arg>
</function>
<function name="RaiseException" ret="void" convention="__stdcall">
<arg name="dwExceptionCode">DWORD</arg>
<arg name="dwExceptionFlags">DWORD</arg>
<arg name="nNumberOfArguments">DWORD</arg>
<arg name="lpArguments">const ULONG_PTR *</arg>
</function>
<function name="UnhandledExceptionFilter" ret="LONG" convention="__stdcall">
<arg name="ExceptionInfo">_EXCEPTION_POINTERS *</arg>
</function>

  typedef<fnptr name="PTOP_LEVEL_EXCEPTION_FILTER" ret="LONG" convention="__stdcall">

<arg name="ExceptionInfo">_EXCEPTION_POINTERS *</arg>
</function>
  typedef PTOP_LEVEL_EXCEPTION_FILTER LPTOP_LEVEL_EXCEPTION_FILTER;

<function name="SetUnhandledExceptionFilter" ret="LPTOP_LEVEL_EXCEPTION_FILTER" convention="__stdcall">
<arg name="lpTopLevelExceptionFilter">LPTOP_LEVEL_EXCEPTION_FILTER</arg>
</function>
<function name="CreateFiber" ret="LPVOID" convention="__stdcall">
<arg name="dwStackSize">SIZE_T</arg>
<arg name="lpStartAddress">LPFIBER_START_ROUTINE</arg>
<arg name="lpParameter">LPVOID</arg>
</function>

<function name="CreateFiberEx" ret="LPVOID" convention="__stdcall">
<arg name="dwStackCommitSize">SIZE_T</arg>
<arg name="dwStackReserveSize">SIZE_T</arg>
<arg name="dwFlags">DWORD</arg>
<arg name="lpStartAddress">LPFIBER_START_ROUTINE</arg>
<arg name="lpParameter">LPVOID</arg>
</function>

<function name="DeleteFiber" ret="void" convention="__stdcall">
<arg name="lpFiber">LPVOID</arg>
</function>

<function name="ConvertThreadToFiber" ret="LPVOID" convention="__stdcall">
<arg name="lpParameter">LPVOID</arg>
</function>

<function name="ConvertThreadToFiberEx" ret="LPVOID" convention="__stdcall">
<arg name="lpParameter">LPVOID</arg>
<arg name="dwFlags">DWORD</arg>
</function>
<function name="ConvertFiberToThread" ret="BOOL" convention="__stdcall">
<arg name="void"></arg>
</function>
<function name="IsThreadAFiber" ret="BOOL" convention="__stdcall">
<arg name="void"></arg>
</function>
<function name="SwitchToFiber" ret="void" convention="__stdcall">
<arg name="lpFiber">LPVOID</arg>
</function>

<function name="SwitchToThread" ret="BOOL" convention="__stdcall">
<arg name="void"></arg>
</function>
<function name="CreateThread" ret="HANDLE" convention="__stdcall">
<arg name="lpThreadAttributes">LPSECURITY_ATTRIBUTES</arg>
<arg name="dwStackSize">SIZE_T</arg>
<arg name="lpStartAddress">LPTHREAD_START_ROUTINE</arg>
<arg name="lpParameter">LPVOID</arg>
<arg name="dwCreationFlags">DWORD</arg>
<arg name="lpThreadId">LPDWORD</arg>
</function>

<function name="CreateRemoteThread" ret="HANDLE" convention="__stdcall">
<arg name="hProcess">HANDLE</arg>
<arg name="lpThreadAttributes">LPSECURITY_ATTRIBUTES</arg>
<arg name="dwStackSize">SIZE_T</arg>
<arg name="lpStartAddress">LPTHREAD_START_ROUTINE</arg>
<arg name="lpParameter">LPVOID</arg>
<arg name="dwCreationFlags">DWORD</arg>
<arg name="lpThreadId">LPDWORD</arg>
</function>

<function name="GetCurrentThread" ret="HANDLE" convention="__stdcall">
<arg name="void"></arg>
</function>

<function name="GetCurrentThreadId" ret="DWORD" convention="__stdcall">
<arg name="void"></arg>
</function>

  <function name="SetThreadStackGuarantee" ret="BOOL" convention="__stdcall">
<arg name="StackSizeInBytes">PULONG</arg>
</function>

<function name="GetProcessIdOfThread" ret="DWORD" convention="__stdcall">
<arg name="Thread">HANDLE</arg>
</function>
<function name="GetThreadId" ret="DWORD" convention="__stdcall">
<arg name="Thread">HANDLE</arg>
</function>
<function name="GetProcessId" ret="DWORD" convention="__stdcall">
<arg name="Process">HANDLE</arg>
</function>

<function name="GetCurrentProcessorNumber" ret="DWORD" convention="__stdcall">
<arg name="void"></arg>
</function>

<function name="SetThreadAffinityMask" ret="DWORD_PTR" convention="__stdcall">
<arg name="hThread">HANDLE</arg>
<arg name="dwThreadAffinityMask">DWORD_PTR</arg>
</function>
<function name="SetThreadIdealProcessor" ret="DWORD" convention="__stdcall">
<arg name="hThread">HANDLE</arg>
<arg name="dwIdealProcessor">DWORD</arg>
</function>
<function name="SetProcessPriorityBoost" ret="BOOL" convention="__stdcall">
<arg name="hProcess">HANDLE</arg>
<arg name="bDisablePriorityBoost">BOOL</arg>
</function>

<function name="GetProcessPriorityBoost" ret="BOOL" convention="__stdcall">
<arg name="hProcess">HANDLE</arg>
<arg name="pDisablePriorityBoost">PBOOL </arg>
</function>

<function name="RequestWakeupLatency" ret="BOOL" convention="__stdcall">
<arg name="latency">LATENCY_TIME</arg>
</function>

<function name="IsSystemResumeAutomatic" ret="BOOL" convention="__stdcall">
<arg name="void"></arg>
</function>

<function name="OpenThread" ret="HANDLE" convention="__stdcall">
<arg name="dwDesiredAccess">DWORD</arg>
<arg name="bInheritHandle">BOOL</arg>
<arg name="dwThreadId">DWORD</arg>
</function>

<function name="SetThreadPriority" ret="BOOL" convention="__stdcall">
<arg name="hThread">HANDLE</arg>
<arg name="nPriority">int</arg>
</function>

<function name="SetThreadPriorityBoost" ret="BOOL" convention="__stdcall">
<arg name="hThread">HANDLE</arg>
<arg name="bDisablePriorityBoost">BOOL</arg>
</function>

<function name="GetThreadPriorityBoost" ret="BOOL" convention="__stdcall">
<arg name="hThread">HANDLE</arg>
<arg name="pDisablePriorityBoost">PBOOL</arg>
</function>

<function name="GetThreadPriority" ret="int" convention="__stdcall">
<arg name="hThread">HANDLE</arg>
</function>

<function name="GetThreadTimes" ret="BOOL" convention="__stdcall">
<arg name="hThread">HANDLE</arg>
<arg name="lpCreationTime">LPFILETIME</arg>
<arg name="lpExitTime">LPFILETIME</arg>
<arg name="lpKernelTime">LPFILETIME</arg>
<arg name="lpUserTime">LPFILETIME</arg>
</function>
<function name="GetThreadIOPendingFlag" ret="BOOL" convention="__stdcall">
<arg name="hThread">HANDLE</arg>
<arg name="lpIOIsPending">PBOOL </arg>
</function>
<function name="ExitThread" noreturn="true" ret="void" convention="__stdcall">
<arg name="dwExitCode">DWORD</arg>
</function>

<function name="TerminateThread" ret="BOOL" convention="__stdcall">
<arg name="hThread">HANDLE</arg>
<arg name="dwExitCode">DWORD</arg>
</function>

<function name="GetExitCodeThread" ret="BOOL" convention="__stdcall">
<arg name="hThread">HANDLE</arg>
<arg name="lpExitCode">LPDWORD</arg>
</function>

<function name="GetThreadSelectorEntry" ret="BOOL" convention="__stdcall">
<arg name="hThread">HANDLE</arg>
<arg name="dwSelector">DWORD</arg>
<arg name="lpSelectorEntry">LPLDT_ENTRY</arg>
</function>

<function name="SetThreadExecutionState" ret="EXECUTION_STATE" convention="__stdcall">
<arg name="esFlags">EXECUTION_STATE</arg>
</function>

<function name="GetLastError" ret="DWORD" convention="__stdcall">
<arg name="void"></arg>
</function>
<function name="SetLastError" ret="void" convention="__stdcall">
<arg name="dwErrCode">DWORD</arg>
</function>
<function name="GetOverlappedResult" ret="BOOL" convention="__stdcall">
<arg name="hFile">HANDLE</arg>
<arg name="lpOverlapped">LPOVERLAPPED</arg>
<arg name="lpNumberOfBytesTransferred">LPDWORD</arg>
<arg name="bWait">BOOL</arg>
</function>

<function name="CreateIoCompletionPort" ret="HANDLE" convention="__stdcall">
<arg name="FileHandle">HANDLE</arg>
<arg name="ExistingCompletionPort">HANDLE</arg>
<arg name="CompletionKey">ULONG_PTR</arg>
<arg name="NumberOfConcurrentThreads">DWORD</arg>
</function>

<function name="GetQueuedCompletionStatus" ret="BOOL" convention="__stdcall">
<arg name="CompletionPort">HANDLE</arg>
<arg name="lpNumberOfBytesTransferred">LPDWORD</arg>
<arg name="lpCompletionKey">PULONG_PTR</arg>

  LPOVERLAPPED *lpOverlapped,
<arg name="dwMilliseconds">DWORD</arg>
</function>
<function name="GetQueuedCompletionStatusEx" ret="BOOL" convention="__stdcall">
<arg name="CompletionPort">HANDLE</arg>
<arg name="lpCompletionPortEntries">LPOVERLAPPED_ENTRY</arg>
<arg name="ulCount">ULONG</arg>
<arg name="ulNumEntriesRemoved">PULONG</arg>
<arg name="dwMilliseconds">DWORD</arg>
<arg name="fAlertable">BOOL</arg>
</function>
<function name="PostQueuedCompletionStatus" ret="BOOL" convention="__stdcall">
<arg name="CompletionPort">HANDLE</arg>
<arg name="dwNumberOfBytesTransferred">DWORD</arg>
<arg name="dwCompletionKey">ULONG_PTR</arg>
<arg name="lpOverlapped">LPOVERLAPPED</arg>
</function>
<function name="SetFileCompletionNotificationModes" ret="BOOL" convention="__stdcall">
<arg name="FileHandle">HANDLE</arg>
<arg name="Flags">UCHAR</arg>
</function>

<function name="SetFileIoOverlappedRange" ret="BOOL" convention="__stdcall">
<arg name="FileHandle">HANDLE</arg>
<arg name="OverlappedRangeStart">PUCHAR</arg>
<arg name="Length">ULONG</arg>
</function>
<function name="GetErrorMode" ret="UINT" convention="__stdcall">
<arg name="void"></arg>
</function>

<function name="SetErrorMode" ret="UINT" convention="__stdcall">
<arg name="uMode">UINT</arg>
</function>

<function name="ReadProcessMemory" ret="BOOL" convention="__stdcall">
<arg name="hProcess">HANDLE</arg>
<arg name="lpBaseAddress">LPCVOID</arg>
<arg name="lpBuffer">LPVOID</arg>
<arg name="nSize">SIZE_T</arg>
<arg name="lpNumberOfBytesRead">SIZE_T *</arg>
</function>

<function name="WriteProcessMemory" ret="BOOL" convention="__stdcall">
<arg name="hProcess">HANDLE</arg>
<arg name="lpBaseAddress">LPVOID</arg>
<arg name="lpBuffer">LPCVOID</arg>
<arg name="nSize">SIZE_T</arg>
<arg name="lpNumberOfBytesWritten">SIZE_T *</arg>
</function>
<function name="GetThreadContext" ret="BOOL" convention="__stdcall">
<arg name="hThread">HANDLE</arg>
<arg name="lpContext">LPCONTEXT</arg>
</function>

<function name="SetThreadContext" ret="BOOL" convention="__stdcall">
<arg name="hThread">HANDLE</arg>
<arg name="lpContext">const CONTEXT *</arg>
</function>

<function name="Wow64GetThreadContext" ret="BOOL" convention="__stdcall">
<arg name="hThread">HANDLE</arg>
<arg name="lpContext">PWOW64_CONTEXT</arg>
</function>

<function name="Wow64SetThreadContext" ret="BOOL" convention="__stdcall">
<arg name="hThread">HANDLE</arg>
<arg name="lpContext">const WOW64_CONTEXT *</arg>
</function>
<function name="SuspendThread" ret="DWORD" convention="__stdcall">
<arg name="hThread">HANDLE</arg>
</function>

<function name="Wow64SuspendThread" ret="DWORD" convention="__stdcall">
<arg name="hThread">HANDLE</arg>
</function>

<function name="ResumeThread" ret="DWORD" convention="__stdcall">
<arg name="hThread">HANDLE</arg>
</function>

  typedef
  void
  (__stdcall *PAPCFUNC)(
<arg name="dwParam">ULONG_PTR</arg>
</function>

<function name="QueueUserAPC" ret="DWORD" convention="__stdcall">
<arg name="pfnAPC">PAPCFUNC</arg>
<arg name="hThread">HANDLE</arg>
<arg name="dwData">ULONG_PTR</arg>
</function>
<function name="IsDebuggerPresent" ret="BOOL" convention="__stdcall">
<arg name="void"></arg>
</function>

<function name="CheckRemoteDebuggerPresent" ret="BOOL" convention="__stdcall">
<arg name="hProcess">HANDLE</arg>
<arg name="pbDebuggerPresent">PBOOL</arg>
</function>
<function name="DebugBreak" ret="void" convention="__stdcall">
<arg name="void"></arg>
</function>

<function name="WaitForDebugEvent" ret="BOOL" convention="__stdcall">
<arg name="lpDebugEvent">LPDEBUG_EVENT</arg>
<arg name="dwMilliseconds">DWORD</arg>
</function>

<function name="ContinueDebugEvent" ret="BOOL" convention="__stdcall">
<arg name="dwProcessId">DWORD</arg>
<arg name="dwThreadId">DWORD</arg>
<arg name="dwContinueStatus">DWORD</arg>
</function>

<function name="DebugActiveProcess" ret="BOOL" convention="__stdcall">
<arg name="dwProcessId">DWORD</arg>
</function>

<function name="DebugActiveProcessStop" ret="BOOL" convention="__stdcall">
<arg name="dwProcessId">DWORD</arg>
</function>

<function name="DebugSetProcessKillOnExit" ret="BOOL" convention="__stdcall">
<arg name="KillOnExit">BOOL</arg>
</function>

  <function name="DebugBreakProcess" ret="BOOL" convention="__stdcall">
<arg name="Process">HANDLE</arg>
</function>

<function name="InitializeCriticalSection" ret="void" convention="__stdcall">
<arg name="lpCriticalSection">LPCRITICAL_SECTION</arg>
</function>

<function name="EnterCriticalSection" ret="void" convention="__stdcall">
<arg name="lpCriticalSection">LPCRITICAL_SECTION</arg>
</function>

<function name="LeaveCriticalSection" ret="void" convention="__stdcall">
<arg name="lpCriticalSection">LPCRITICAL_SECTION</arg>
</function>

<function name="InitializeCriticalSectionAndSpinCount" ret="BOOL" convention="__stdcall">
<arg name="lpCriticalSection">LPCRITICAL_SECTION</arg>
<arg name="dwSpinCount">DWORD</arg>
</function>

<function name="InitializeCriticalSectionEx" ret="BOOL" convention="__stdcall">
<arg name="lpCriticalSection">LPCRITICAL_SECTION</arg>
<arg name="dwSpinCount">DWORD</arg>
<arg name="Flags">DWORD</arg>
</function>

<function name="SetCriticalSectionSpinCount" ret="DWORD" convention="__stdcall">
<arg name="lpCriticalSection">LPCRITICAL_SECTION</arg>
<arg name="dwSpinCount">DWORD</arg>
</function>

<function name="TryEnterCriticalSection" ret="BOOL" convention="__stdcall">
<arg name="lpCriticalSection">LPCRITICAL_SECTION</arg>
</function>
<function name="DeleteCriticalSection" ret="void" convention="__stdcall">
<arg name="lpCriticalSection">LPCRITICAL_SECTION</arg>
</function>

<function name="SetEvent" ret="BOOL" convention="__stdcall">
<arg name="hEvent">HANDLE</arg>
</function>

<function name="ResetEvent" ret="BOOL" convention="__stdcall">
<arg name="hEvent">HANDLE</arg>
</function>

<function name="PulseEvent" ret="BOOL" convention="__stdcall">
<arg name="hEvent">HANDLE</arg>
</function>

<function name="ReleaseSemaphore" ret="BOOL" convention="__stdcall">
<arg name="hSemaphore">HANDLE</arg>
<arg name="lReleaseCount">LONG</arg>
<arg name="lpPreviousCount">LPLONG</arg>
</function>

<function name="ReleaseMutex" ret="BOOL" convention="__stdcall">
<arg name="hMutex">HANDLE</arg>
</function>

<function name="WaitForSingleObject" ret="DWORD" convention="__stdcall">
<arg name="hHandle">HANDLE</arg>
<arg name="dwMilliseconds">DWORD</arg>
</function>

<function name="WaitForMultipleObjects" ret="DWORD" convention="__stdcall">
<arg name="nCount">DWORD</arg>

  const HANDLE *lpHandles,
  BOOL bWaitAll,
<arg name="dwMilliseconds">DWORD</arg>
</function>

<function name="Sleep" ret="void" convention="__stdcall">
<arg name="dwMilliseconds">DWORD</arg>
</function>

<function name="LoadResource" ret="HGLOBAL" convention="__stdcall">
<arg name="hModule">HMODULE</arg>
<arg name="hResInfo">HRSRC</arg>
</function>

<function name="SizeofResource" ret="DWORD" convention="__stdcall">
<arg name="hModule">HMODULE</arg>
<arg name="hResInfo">HRSRC</arg>
</function>
<function name="GlobalDeleteAtom" ret="ATOM" convention="__stdcall">
<arg name="nAtom">ATOM</arg>
</function>

<function name="InitAtomTable" ret="BOOL" convention="__stdcall">
<arg name="nSize">DWORD</arg>
</function>

<function name="DeleteAtom" ret="ATOM" convention="__stdcall">
<arg name="nAtom">ATOM</arg>
</function>

<function name="SetHandleCount" ret="UINT" convention="__stdcall">
<arg name="uNumber">UINT</arg>
</function>

<function name="GetLogicalDrives" ret="DWORD" convention="__stdcall">
<arg name="void"></arg>
</function>

<function name="LockFile" ret="BOOL" convention="__stdcall">
<arg name="hFile">HANDLE</arg>
<arg name="dwFileOffsetLow">DWORD</arg>
<arg name="dwFileOffsetHigh">DWORD</arg>
<arg name="nNumberOfBytesToLockLow">DWORD</arg>
<arg name="nNumberOfBytesToLockHigh">DWORD</arg>
</function>

<function name="UnlockFile" ret="BOOL" convention="__stdcall">
<arg name="hFile">HANDLE</arg>
<arg name="dwFileOffsetLow">DWORD</arg>
<arg name="dwFileOffsetHigh">DWORD</arg>
<arg name="nNumberOfBytesToUnlockLow">DWORD</arg>
<arg name="nNumberOfBytesToUnlockHigh">DWORD</arg>
</function>

<function name="LockFileEx" ret="BOOL" convention="__stdcall">
<arg name="hFile">HANDLE</arg>
<arg name="dwFlags">DWORD</arg>
<arg name="dwReserved">DWORD</arg>
<arg name="nNumberOfBytesToLockLow">DWORD</arg>
<arg name="nNumberOfBytesToLockHigh">DWORD</arg>
<arg name="lpOverlapped">LPOVERLAPPED</arg>
</function>

<function name="UnlockFileEx" ret="BOOL" convention="__stdcall">
<arg name="hFile">HANDLE</arg>
<arg name="dwReserved">DWORD</arg>
<arg name="nNumberOfBytesToUnlockLow">DWORD</arg>
<arg name="nNumberOfBytesToUnlockHigh">DWORD</arg>
<arg name="lpOverlapped">LPOVERLAPPED</arg>
</function>

<struct name="_BY_HANDLE_FILE_INFORMATION">
<field name="dwFileAttributes">DWORD</field>
<field name="ftCreationTime">FILETIME</field>
<field name="ftLastAccessTime">FILETIME</field>
<field name="ftLastWriteTime">FILETIME</field>
<field name="dwVolumeSerialNumber">DWORD</field>
<field name="nFileSizeHigh">DWORD</field>
<field name="nFileSizeLow">DWORD</field>
<field name="nNumberOfLinks">DWORD</field>
<field name="nFileIndexHigh">DWORD</field>
<field name="nFileIndexLow">DWORD</field>
  } BY_HANDLE_FILE_INFORMATION, *PBY_HANDLE_FILE_INFORMATION, *LPBY_HANDLE_FILE_INFORMATION;

<function name="GetFileInformationByHandle" ret="BOOL" convention="__stdcall">
<arg name="hFile">HANDLE</arg>
<arg name="lpFileInformation">LPBY_HANDLE_FILE_INFORMATION</arg>
</function>

<function name="GetFileType" ret="DWORD" convention="__stdcall">
<arg name="hFile">HANDLE</arg>
</function>

<function name="GetFileSize" ret="DWORD" convention="__stdcall">
<arg name="hFile">HANDLE</arg>
<arg name="lpFileSizeHigh">LPDWORD</arg>
</function>

<function name="GetFileSizeEx" ret="BOOL" convention="__stdcall">
<arg name="hFile">HANDLE</arg>
<arg name="lpFileSize">PLARGE_INTEGER</arg>
</function>
<function name="GetStdHandle" ret="HANDLE" convention="__stdcall">
<arg name="nStdHandle">DWORD</arg>
</function>

<function name="SetStdHandle" ret="BOOL" convention="__stdcall">
<arg name="nStdHandle">DWORD</arg>
<arg name="hHandle">HANDLE</arg>
</function>
<function name="SetStdHandleEx" ret="BOOL" convention="__stdcall">
<arg name="nStdHandle">DWORD</arg>
<arg name="hHandle">HANDLE</arg>
<arg name="phPrevValue">PHANDLE</arg>
</function>
<function name="WriteFile" ret="BOOL" convention="__stdcall">
<arg name="hFile">HANDLE</arg>
<arg name="lpBuffer">LPCVOID</arg>
<arg name="nNumberOfBytesToWrite">DWORD</arg>
<arg name="lpNumberOfBytesWritten">LPDWORD</arg>
<arg name="lpOverlapped">LPOVERLAPPED</arg>
</function>

<function name="ReadFile" ret="BOOL" convention="__stdcall">
<arg name="hFile">HANDLE</arg>
<arg name="lpBuffer">LPVOID</arg>
<arg name="nNumberOfBytesToRead">DWORD</arg>
<arg name="lpNumberOfBytesRead">LPDWORD</arg>
<arg name="lpOverlapped">LPOVERLAPPED</arg>
</function>

<function name="FlushFileBuffers" ret="BOOL" convention="__stdcall">
<arg name="hFile">HANDLE</arg>
</function>

<function name="DeviceIoControl" ret="BOOL" convention="__stdcall">
<arg name="hDevice">HANDLE</arg>
<arg name="dwIoControlCode">DWORD</arg>
<arg name="lpInBuffer">LPVOID</arg>
<arg name="nInBufferSize">DWORD</arg>
<arg name="lpOutBuffer">LPVOID</arg>
<arg name="nOutBufferSize">DWORD</arg>
<arg name="lpBytesReturned">LPDWORD</arg>
<arg name="lpOverlapped">LPOVERLAPPED</arg>
</function>

<function name="RequestDeviceWakeup" ret="BOOL" convention="__stdcall">
<arg name="hDevice">HANDLE</arg>
</function>

<function name="CancelDeviceWakeupRequest" ret="BOOL" convention="__stdcall">
<arg name="hDevice">HANDLE</arg>
</function>

<function name="GetDevicePowerState" ret="BOOL" convention="__stdcall">
<arg name="hDevice">HANDLE</arg>
<arg name="pfOn">BOOL *</arg>
</function>

<function name="SetMessageWaitingIndicator" ret="BOOL" convention="__stdcall">
<arg name="hMsgIndicator">HANDLE</arg>
<arg name="ulMsgCount">ULONG</arg>
</function>

<function name="SetEndOfFile" ret="BOOL" convention="__stdcall">
<arg name="hFile">HANDLE</arg>
</function>

<function name="SetFilePointer" ret="DWORD" convention="__stdcall">
<arg name="hFile">HANDLE</arg>
<arg name="lDistanceToMove">LONG</arg>
<arg name="lpDistanceToMoveHigh">PLONG</arg>
<arg name="dwMoveMethod">DWORD</arg>
</function>

<function name="SetFilePointerEx" ret="BOOL" convention="__stdcall">
<arg name="hFile">HANDLE</arg>
<arg name="liDistanceToMove">LARGE_INTEGER</arg>
<arg name="lpNewFilePointer">PLARGE_INTEGER</arg>
<arg name="dwMoveMethod">DWORD</arg>
</function>

<function name="FindClose" ret="BOOL" convention="__stdcall">
<arg name="hFindFile">HANDLE</arg>
</function>

<function name="GetFileTime" ret="BOOL" convention="__stdcall">
<arg name="hFile">HANDLE</arg>
<arg name="lpCreationTime">LPFILETIME</arg>
<arg name="lpLastAccessTime">LPFILETIME</arg>
<arg name="lpLastWriteTime">LPFILETIME</arg>
</function>

<function name="SetFileTime" ret="BOOL" convention="__stdcall">
<arg name="hFile">HANDLE</arg>

  const FILETIME *lpCreationTime,
  const FILETIME *lpLastAccessTime,
<arg name="lpLastWriteTime">const FILETIME *</arg>
</function>

<function name="SetFileValidData" ret="BOOL" convention="__stdcall">
<arg name="hFile">HANDLE</arg>
<arg name="ValidDataLength">LONGLONG</arg>
</function>
<function name="SetFileShortNameA" ret="BOOL" convention="__stdcall">
<arg name="hFile">HANDLE</arg>
<arg name="lpShortName">LPCSTR</arg>
</function>
<function name="SetFileShortNameW" ret="BOOL" convention="__stdcall">
<arg name="hFile">HANDLE</arg>
<arg name="lpShortName">LPCWSTR</arg>
</function>
<function name="CloseHandle" ret="BOOL" convention="__stdcall">
<arg name="hObject">HANDLE</arg>
</function>

<function name="DuplicateHandle" ret="BOOL" convention="__stdcall">
<arg name="hSourceProcessHandle">HANDLE</arg>
<arg name="hSourceHandle">HANDLE</arg>
<arg name="hTargetProcessHandle">HANDLE</arg>
<arg name="lpTargetHandle">LPHANDLE</arg>
<arg name="dwDesiredAccess">DWORD</arg>
<arg name="bInheritHandle">BOOL</arg>
<arg name="dwOptions">DWORD</arg>
</function>

<function name="GetHandleInformation" ret="BOOL" convention="__stdcall">
<arg name="hObject">HANDLE</arg>
<arg name="lpdwFlags">LPDWORD</arg>
</function>

<function name="SetHandleInformation" ret="BOOL" convention="__stdcall">
<arg name="hObject">HANDLE</arg>
<arg name="dwMask">DWORD</arg>
<arg name="dwFlags">DWORD</arg>
</function>

<function name="LoadModule" ret="DWORD" convention="__stdcall">
<arg name="lpModuleName">LPCSTR</arg>
<arg name="lpParameterBlock">LPVOID</arg>
</function>
<function name="WinExec" ret="UINT" convention="__stdcall">
<arg name="lpCmdLine">LPCSTR</arg>
<arg name="uCmdShow">UINT</arg>
</function>

<function name="ClearCommBreak" ret="BOOL" convention="__stdcall">
<arg name="hFile">HANDLE</arg>
</function>

<function name="ClearCommError" ret="BOOL" convention="__stdcall">
<arg name="hFile">HANDLE</arg>
<arg name="lpErrors">LPDWORD</arg>
<arg name="lpStat">LPCOMSTAT</arg>
</function>

<function name="SetupComm" ret="BOOL" convention="__stdcall">
<arg name="hFile">HANDLE</arg>
<arg name="dwInQueue">DWORD</arg>
<arg name="dwOutQueue">DWORD</arg>
</function>

<function name="EscapeCommFunction" ret="BOOL" convention="__stdcall">
<arg name="hFile">HANDLE</arg>
<arg name="dwFunc">DWORD</arg>
</function>

<function name="GetCommConfig" ret="BOOL" convention="__stdcall">
<arg name="hCommDev">HANDLE</arg>
<arg name="lpCC">LPCOMMCONFIG</arg>
<arg name="lpdwSize">LPDWORD</arg>
</function>

<function name="GetCommMask" ret="BOOL" convention="__stdcall">
<arg name="hFile">HANDLE</arg>
<arg name="lpEvtMask">LPDWORD</arg>
</function>

<function name="GetCommProperties" ret="BOOL" convention="__stdcall">
<arg name="hFile">HANDLE</arg>
<arg name="lpCommProp">LPCOMMPROP</arg>
</function>

<function name="GetCommModemStatus" ret="BOOL" convention="__stdcall">
<arg name="hFile">HANDLE</arg>
<arg name="lpModemStat">LPDWORD</arg>
</function>

<function name="GetCommState" ret="BOOL" convention="__stdcall">
<arg name="hFile">HANDLE</arg>
<arg name="lpDCB">LPDCB</arg>
</function>

<function name="GetCommTimeouts" ret="BOOL" convention="__stdcall">
<arg name="hFile">HANDLE</arg>
<arg name="lpCommTimeouts">LPCOMMTIMEOUTS</arg>
</function>

<function name="PurgeComm" ret="BOOL" convention="__stdcall">
<arg name="hFile">HANDLE</arg>
<arg name="dwFlags">DWORD</arg>
</function>

<function name="SetCommBreak" ret="BOOL" convention="__stdcall">
<arg name="hFile">HANDLE</arg>
</function>

<function name="SetCommConfig" ret="BOOL" convention="__stdcall">
<arg name="hCommDev">HANDLE</arg>
<arg name="lpCC">LPCOMMCONFIG</arg>
<arg name="dwSize">DWORD</arg>
</function>

<function name="SetCommMask" ret="BOOL" convention="__stdcall">
<arg name="hFile">HANDLE</arg>
<arg name="dwEvtMask">DWORD</arg>
</function>

<function name="SetCommState" ret="BOOL" convention="__stdcall">
<arg name="hFile">HANDLE</arg>
<arg name="lpDCB">LPDCB</arg>
</function>

<function name="SetCommTimeouts" ret="BOOL" convention="__stdcall">
<arg name="hFile">HANDLE</arg>
<arg name="lpCommTimeouts">LPCOMMTIMEOUTS</arg>
</function>

<function name="TransmitCommChar" ret="BOOL" convention="__stdcall">
<arg name="hFile">HANDLE</arg>
<arg name="cChar">char</arg>
</function>

<function name="WaitCommEvent" ret="BOOL" convention="__stdcall">
<arg name="hFile">HANDLE</arg>
<arg name="lpEvtMask">LPDWORD</arg>
<arg name="lpOverlapped">LPOVERLAPPED</arg>
</function>
<function name="SetTapePosition" ret="DWORD" convention="__stdcall">
<arg name="hDevice">HANDLE</arg>
<arg name="dwPositionMethod">DWORD</arg>
<arg name="dwPartition">DWORD</arg>
<arg name="dwOffsetLow">DWORD</arg>
<arg name="dwOffsetHigh">DWORD</arg>
<arg name="bImmediate">BOOL</arg>
</function>

<function name="GetTapePosition" ret="DWORD" convention="__stdcall">
<arg name="hDevice">HANDLE</arg>
<arg name="dwPositionType">DWORD</arg>
<arg name="lpdwPartition">LPDWORD</arg>
<arg name="lpdwOffsetLow">LPDWORD</arg>
<arg name="lpdwOffsetHigh">LPDWORD</arg>
</function>

<function name="PrepareTape" ret="DWORD" convention="__stdcall">
<arg name="hDevice">HANDLE</arg>
<arg name="dwOperation">DWORD</arg>
<arg name="bImmediate">BOOL</arg>
</function>

<function name="EraseTape" ret="DWORD" convention="__stdcall">
<arg name="hDevice">HANDLE</arg>
<arg name="dwEraseType">DWORD</arg>
<arg name="bImmediate">BOOL</arg>
</function>

<function name="CreateTapePartition" ret="DWORD" convention="__stdcall">
<arg name="hDevice">HANDLE</arg>
<arg name="dwPartitionMethod">DWORD</arg>
<arg name="dwCount">DWORD</arg>
<arg name="dwSize">DWORD</arg>
</function>

<function name="WriteTapemark" ret="DWORD" convention="__stdcall">
<arg name="hDevice">HANDLE</arg>
<arg name="dwTapemarkType">DWORD</arg>
<arg name="dwTapemarkCount">DWORD</arg>
<arg name="bImmediate">BOOL</arg>
</function>

<function name="GetTapeStatus" ret="DWORD" convention="__stdcall">
<arg name="hDevice">HANDLE</arg>
</function>

<function name="GetTapeParameters" ret="DWORD" convention="__stdcall">
<arg name="hDevice">HANDLE</arg>
<arg name="dwOperation">DWORD</arg>
<arg name="lpdwSize">LPDWORD</arg>
<arg name="lpTapeInformation">LPVOID</arg>
</function>

<function name="SetTapeParameters" ret="DWORD" convention="__stdcall">
<arg name="hDevice">HANDLE</arg>
<arg name="dwOperation">DWORD</arg>
<arg name="lpTapeInformation">LPVOID</arg>
</function>

<function name="Beep" ret="BOOL" convention="__stdcall">
<arg name="dwFreq">DWORD</arg>
<arg name="dwDuration">DWORD</arg>
</function>

<function name="MulDiv" ret="int" convention="__stdcall">
<arg name="nNumber">int</arg>
<arg name="nNumerator">int</arg>
<arg name="nDenominator">int</arg>
</function>

<function name="GetSystemTime" ret="void" convention="__stdcall">
<arg name="lpSystemTime">LPSYSTEMTIME</arg>
</function>

<function name="GetSystemTimeAsFileTime" ret="void" convention="__stdcall">
<arg name="lpSystemTimeAsFileTime">LPFILETIME</arg>
</function>

<function name="SetSystemTime" ret="BOOL" convention="__stdcall">
<arg name="lpSystemTime">const SYSTEMTIME *</arg>
</function>

<function name="GetLocalTime" ret="void" convention="__stdcall">
<arg name="lpSystemTime">LPSYSTEMTIME</arg>
</function>

<function name="SetLocalTime" ret="BOOL" convention="__stdcall">
<arg name="lpSystemTime">const SYSTEMTIME *</arg>
</function>

<function name="GetSystemInfo" ret="void" convention="__stdcall">
<arg name="lpSystemInfo">LPSYSTEM_INFO</arg>
</function>
  <function name="SetSystemFileCacheSize" ret="BOOL" convention="__stdcall">
<arg name="MinimumFileCacheSize">SIZE_T</arg>
<arg name="MaximumFileCacheSize">SIZE_T</arg>
<arg name="Flags">DWORD</arg>
</function>

  <function name="GetSystemFileCacheSize" ret="BOOL" convention="__stdcall">
<arg name="lpMinimumFileCacheSize">PSIZE_T</arg>
<arg name="lpMaximumFileCacheSize">PSIZE_T</arg>
<arg name="lpFlags">PDWORD</arg>
</function>
<function name="GetSystemRegistryQuota" ret="BOOL" convention="__stdcall">
<arg name="pdwQuotaAllowed">PDWORD</arg>
<arg name="pdwQuotaUsed">PDWORD</arg>
</function>

  BOOL
<function name="GetSystemTimes" ret="" convention="__stdcall">
<arg name="lpIdleTime">LPFILETIME</arg>
<arg name="lpKernelTime">LPFILETIME</arg>
<arg name="lpUserTime">LPFILETIME</arg>
</function>
<function name="GetNativeSystemInfo" ret="void" convention="__stdcall">
<arg name="lpSystemInfo">LPSYSTEM_INFO</arg>
</function>
<function name="IsProcessorFeaturePresent" ret="BOOL" convention="__stdcall">
<arg name="ProcessorFeature">DWORD</arg>
</function>

<struct name="_TIME_ZONE_INFORMATION">
<field name="Bias">LONG</field>
<field name="StandardName[ 32 ]">WCHAR</field>
<field name="StandardDate">SYSTEMTIME</field>
<field name="StandardBias">LONG</field>
<field name="DaylightName[ 32 ]">WCHAR</field>
<field name="DaylightDate">SYSTEMTIME</field>
<field name="DaylightBias">LONG</field>
  } TIME_ZONE_INFORMATION, *PTIME_ZONE_INFORMATION, *LPTIME_ZONE_INFORMATION;

<struct name="_TIME_DYNAMIC_ZONE_INFORMATION">
<field name="Bias">LONG</field>
<field name="StandardName[ 32 ]">WCHAR</field>
<field name="StandardDate">SYSTEMTIME</field>
<field name="StandardBias">LONG</field>
<field name="DaylightName[ 32 ]">WCHAR</field>
<field name="DaylightDate">SYSTEMTIME</field>
<field name="DaylightBias">LONG</field>
<field name="TimeZoneKeyName[ 128 ]">WCHAR</field>
<field name="DynamicDaylightTimeDisabled">BOOLEAN</field>
</struct>
<typedefprev id="DYNAMIC_TIME_ZONE_INFORMATION"/>
<typedefptrprev id="PDYNAMIC_TIME_ZONE_INFORMATION"/>
<function name="SystemTimeToTzSpecificLocalTime" ret="BOOL" convention="__stdcall">
<arg name="lpTimeZoneInformation">const TIME_ZONE_INFORMATION *</arg>

  const SYSTEMTIME *lpUniversalTime,
<arg name="lpLocalTime">LPSYSTEMTIME</arg>
</function>

<function name="TzSpecificLocalTimeToSystemTime" ret="BOOL" convention="__stdcall">
<arg name="lpTimeZoneInformation">const TIME_ZONE_INFORMATION *</arg>

  const SYSTEMTIME *lpLocalTime,
<arg name="lpUniversalTime">LPSYSTEMTIME</arg>
</function>

<function name="GetTimeZoneInformation" ret="DWORD" convention="__stdcall">
<arg name="lpTimeZoneInformation">LPTIME_ZONE_INFORMATION</arg>
</function>

<function name="SetTimeZoneInformation" ret="BOOL" convention="__stdcall">
<arg name="lpTimeZoneInformation">const TIME_ZONE_INFORMATION *</arg>
</function>

<function name="GetDynamicTimeZoneInformation" ret="DWORD" convention="__stdcall">
<arg name="pTimeZoneInformation">PDYNAMIC_TIME_ZONE_INFORMATION</arg>
</function>

<function name="SetDynamicTimeZoneInformation" ret="BOOL" convention="__stdcall">
<arg name="lpTimeZoneInformation">const DYNAMIC_TIME_ZONE_INFORMATION *</arg>
</function>
<function name="SystemTimeToFileTime" ret="BOOL" convention="__stdcall">
<arg name="lpSystemTime">const SYSTEMTIME *</arg>
<arg name="lpFileTime">LPFILETIME</arg>
</function>

<function name="FileTimeToLocalFileTime" ret="BOOL" convention="__stdcall">
<arg name="lpFileTime">const FILETIME *</arg>
<arg name="lpLocalFileTime">LPFILETIME</arg>
</function>

<function name="LocalFileTimeToFileTime" ret="BOOL" convention="__stdcall">
<arg name="lpLocalFileTime">const FILETIME *</arg>
<arg name="lpFileTime">LPFILETIME</arg>
</function>

<function name="FileTimeToSystemTime" ret="BOOL" convention="__stdcall">
<arg name="lpFileTime">const FILETIME *</arg>
<arg name="lpSystemTime">LPSYSTEMTIME</arg>
</function>

<function name="CompareFileTime" ret="LONG" convention="__stdcall">
<arg name="lpFileTime1">const FILETIME *</arg>
<arg name="lpFileTime2">const FILETIME *</arg>
</function>

<function name="FileTimeToDosDateTime" ret="BOOL" convention="__stdcall">
<arg name="lpFileTime">const FILETIME *</arg>

  LPWORD lpFatDate,
<arg name="lpFatTime">LPWORD</arg>
</function>

<function name="DosDateTimeToFileTime" ret="BOOL" convention="__stdcall">
<arg name="wFatDate">WORD</arg>
<arg name="wFatTime">WORD</arg>
<arg name="lpFileTime">LPFILETIME</arg>
</function>

<function name="GetTickCount" ret="DWORD" convention="__stdcall">
<arg name="void"></arg>
</function>

<function name="GetTickCount64" ret="ULONGLONG" convention="__stdcall">
<arg name="void"></arg>
</function>

<function name="SetSystemTimeAdjustment" ret="BOOL" convention="__stdcall">
<arg name="dwTimeAdjustment">DWORD</arg>
<arg name="bTimeAdjustmentDisabled">BOOL </arg>
</function>

<function name="GetSystemTimeAdjustment" ret="BOOL" convention="__stdcall">
<arg name="lpTimeAdjustment">PDWORD</arg>
<arg name="lpTimeIncrement">PDWORD</arg>
<arg name="lpTimeAdjustmentDisabled">PBOOL </arg>
</function>
<function name="FormatMessageA" ret="DWORD" convention="__stdcall">
<arg name="dwFlags">DWORD</arg>
<arg name="lpSource">LPCVOID</arg>
<arg name="dwMessageId">DWORD</arg>
<arg name="dwLanguageId">DWORD</arg>
<arg name="lpBuffer">LPSTR</arg>
<arg name="nSize">DWORD</arg>
<arg name="Arguments">va_list *</arg>
</function>
<function name="FormatMessageW" ret="DWORD" convention="__stdcall">
<arg name="dwFlags">DWORD</arg>
<arg name="lpSource">LPCVOID</arg>
<arg name="dwMessageId">DWORD</arg>
<arg name="dwLanguageId">DWORD</arg>
<arg name="lpBuffer">LPWSTR</arg>
<arg name="nSize">DWORD</arg>
<arg name="Arguments">va_list *</arg>
</function>
<function name="CreatePipe" ret="BOOL" convention="__stdcall">
<arg name="hReadPipe">PHANDLE</arg>
<arg name="hWritePipe">PHANDLE</arg>
<arg name="lpPipeAttributes">LPSECURITY_ATTRIBUTES</arg>
<arg name="nSize">DWORD</arg>
</function>

<function name="ConnectNamedPipe" ret="BOOL" convention="__stdcall">
<arg name="hNamedPipe">HANDLE</arg>
<arg name="lpOverlapped">LPOVERLAPPED</arg>
</function>

<function name="DisconnectNamedPipe" ret="BOOL" convention="__stdcall">
<arg name="hNamedPipe">HANDLE</arg>
</function>

<function name="SetNamedPipeHandleState" ret="BOOL" convention="__stdcall">
<arg name="hNamedPipe">HANDLE</arg>
<arg name="lpMode">LPDWORD</arg>
<arg name="lpMaxCollectionCount">LPDWORD</arg>
<arg name="lpCollectDataTimeout">LPDWORD</arg>
</function>

<function name="GetNamedPipeInfo" ret="BOOL" convention="__stdcall">
<arg name="hNamedPipe">HANDLE</arg>
<arg name="lpFlags">LPDWORD</arg>
<arg name="lpOutBufferSize">LPDWORD</arg>
<arg name="lpInBufferSize">LPDWORD</arg>
<arg name="lpMaxInstances">LPDWORD</arg>
</function>

<function name="PeekNamedPipe" ret="BOOL" convention="__stdcall">
<arg name="hNamedPipe">HANDLE</arg>
<arg name="lpBuffer">LPVOID</arg>
<arg name="nBufferSize">DWORD</arg>
<arg name="lpBytesRead">LPDWORD</arg>
<arg name="lpTotalBytesAvail">LPDWORD</arg>
<arg name="lpBytesLeftThisMessage">LPDWORD</arg>
</function>

<function name="TransactNamedPipe" ret="BOOL" convention="__stdcall">
<arg name="hNamedPipe">HANDLE</arg>
<arg name="lpInBuffer">LPVOID</arg>
<arg name="nInBufferSize">DWORD</arg>
<arg name="lpOutBuffer">LPVOID</arg>
<arg name="nOutBufferSize">DWORD</arg>
<arg name="lpBytesRead">LPDWORD</arg>
<arg name="lpOverlapped">LPOVERLAPPED</arg>
</function>

<function name="CreateMailslotA" ret="HANDLE" convention="__stdcall">
<arg name="lpName">LPCSTR</arg>
<arg name="nMaxMessageSize">DWORD</arg>
<arg name="lReadTimeout">DWORD</arg>
<arg name="lpSecurityAttributes">LPSECURITY_ATTRIBUTES</arg>
</function>
<function name="CreateMailslotW" ret="HANDLE" convention="__stdcall">
<arg name="lpName">LPCWSTR</arg>
<arg name="nMaxMessageSize">DWORD</arg>
<arg name="lReadTimeout">DWORD</arg>
<arg name="lpSecurityAttributes">LPSECURITY_ATTRIBUTES</arg>
</function>
<function name="GetMailslotInfo" ret="BOOL" convention="__stdcall">
<arg name="hMailslot">HANDLE</arg>
<arg name="lpMaxMessageSize">LPDWORD</arg>
<arg name="lpNextSize">LPDWORD</arg>
<arg name="lpMessageCount">LPDWORD</arg>
<arg name="lpReadTimeout">LPDWORD</arg>
</function>

<function name="SetMailslotInfo" ret="BOOL" convention="__stdcall">
<arg name="hMailslot">HANDLE</arg>
<arg name="lReadTimeout">DWORD</arg>
</function>

<function name="MapViewOfFile" ret="LPVOID" convention="__stdcall">
<arg name="hFileMappingObject">HANDLE</arg>
<arg name="dwDesiredAccess">DWORD</arg>
<arg name="dwFileOffsetHigh">DWORD</arg>
<arg name="dwFileOffsetLow">DWORD</arg>
<arg name="dwNumberOfBytesToMap">SIZE_T</arg>
</function>

<function name="FlushViewOfFile" ret="BOOL" convention="__stdcall">
<arg name="lpBaseAddress">LPCVOID</arg>
<arg name="dwNumberOfBytesToFlush">SIZE_T</arg>
</function>

<function name="UnmapViewOfFile" ret="BOOL" convention="__stdcall">
<arg name="lpBaseAddress">LPCVOID</arg>
</function>
<function name="EncryptFileA" ret="BOOL" convention="__stdcall">
<arg name="lpFileName">LPCSTR</arg>
</function>
<function name="EncryptFileW" ret="BOOL" convention="__stdcall">
<arg name="lpFileName">LPCWSTR</arg>
</function>
<function name="DecryptFileA" ret="BOOL" convention="__stdcall">
<arg name="lpFileName">LPCSTR</arg>
<arg name="dwReserved">DWORD</arg>
</function>
<function name="DecryptFileW" ret="BOOL" convention="__stdcall">
<arg name="lpFileName">LPCWSTR</arg>
<arg name="dwReserved">DWORD</arg>
</function>
<function name="FileEncryptionStatusA" ret="BOOL" convention="__stdcall">
<arg name="lpFileName">LPCSTR</arg>
<arg name="lpStatus">LPDWORD </arg>
</function>
<function name="FileEncryptionStatusW" ret="BOOL" convention="__stdcall">
<arg name="lpFileName">LPCWSTR</arg>
<arg name="lpStatus">LPDWORD </arg>
</function>
  typedef
  DWORD
  (__stdcall *PFE_EXPORT_FUNC)(
  PBYTE pbData,
  PVOID pvCallbackContext,
<arg name="ulLength">ULONG</arg>
</function>

  typedef
  DWORD
  (__stdcall *PFE_IMPORT_FUNC)(
  PBYTE pbData,
  PVOID pvCallbackContext,
<arg name="ulLength">PULONG</arg>
</function>
<function name="OpenEncryptedFileRawA" ret="DWORD" convention="__stdcall">
<arg name="lpFileName">LPCSTR</arg>
<arg name="ulFlags">ULONG   </arg>
<arg name="pvContext">PVOID   *</arg>
</function>
<function name="OpenEncryptedFileRawW" ret="DWORD" convention="__stdcall">
<arg name="lpFileName">LPCWSTR</arg>
<arg name="ulFlags">ULONG   </arg>
<arg name="pvContext">PVOID   *</arg>
</function>
<function name="ReadEncryptedFileRaw" ret="DWORD" convention="__stdcall">
<arg name="pfExportCallback">PFE_EXPORT_FUNC</arg>
<arg name="pvCallbackContext">PVOID          </arg>
<arg name="pvContext">PVOID          </arg>
</function>

<function name="WriteEncryptedFileRaw" ret="DWORD" convention="__stdcall">
<arg name="pfImportCallback">PFE_IMPORT_FUNC</arg>
<arg name="pvCallbackContext">PVOID          </arg>
<arg name="pvContext">PVOID          </arg>
</function>

<function name="CloseEncryptedFileRaw" ret="void" convention="__stdcall">
<arg name="pvContext">PVOID          </arg>
</function>
<function name="lstrcmpA" ret="int" convention="__stdcall">
<arg name="lpString1">LPCSTR</arg>
<arg name="lpString2">LPCSTR</arg>
</function>
<function name="lstrcmpW" ret="int" convention="__stdcall">
<arg name="lpString1">LPCWSTR</arg>
<arg name="lpString2">LPCWSTR</arg>
</function>
<function name="lstrcmpiA" ret="int" convention="__stdcall">
<arg name="lpString1">LPCSTR</arg>
<arg name="lpString2">LPCSTR</arg>
</function>
<function name="lstrcmpiW" ret="int" convention="__stdcall">
<arg name="lpString1">LPCWSTR</arg>
<arg name="lpString2">LPCWSTR</arg>
</function>
<function name="lstrcpynA" ret="LPSTR" convention="__stdcall">
<arg name="lpString1">LPSTR</arg>
<arg name="lpString2">LPCSTR</arg>
<arg name="iMaxLength">int</arg>
</function>
<function name="lstrcpynW" ret="LPWSTR" convention="__stdcall">
<arg name="lpString1">LPWSTR</arg>
<arg name="lpString2">LPCWSTR</arg>
<arg name="iMaxLength">int</arg>
</function>
  #pragma warning(push)
  #pragma warning(disable:4995)
<function name="lstrcpyA" ret="LPSTR" convention="__stdcall">
<arg name="lpString1">LPSTR</arg>
<arg name="lpString2">LPCSTR</arg>
</function>
<function name="lstrcpyW" ret="LPWSTR" convention="__stdcall">
<arg name="lpString1">LPWSTR</arg>
<arg name="lpString2">LPCWSTR</arg>
</function>
<function name="lstrcatA" ret="LPSTR" convention="__stdcall">
<arg name="lpString1">LPSTR</arg>
<arg name="lpString2">LPCSTR</arg>
</function>
<function name="lstrcatW" ret="LPWSTR" convention="__stdcall">
<arg name="lpString1">LPWSTR</arg>
<arg name="lpString2">LPCWSTR</arg>
</function>
  #pragma warning(pop)
<function name="lstrlenA" ret="int" convention="__stdcall">
<arg name="lpString">LPCSTR</arg>
</function>
<function name="lstrlenW" ret="int" convention="__stdcall">
<arg name="lpString">LPCWSTR</arg>
</function>
<function name="OpenFile" ret="HFILE" convention="__stdcall">
<arg name="lpFileName">LPCSTR</arg>
<arg name="lpReOpenBuff">LPOFSTRUCT</arg>
<arg name="uStyle">UINT</arg>
</function>

<function name="_lopen" ret="HFILE" convention="__stdcall">
<arg name="lpPathName">LPCSTR</arg>
<arg name="iReadWrite">int</arg>
</function>

<function name="_lcreat" ret="HFILE" convention="__stdcall">
<arg name="lpPathName">LPCSTR</arg>
<arg name="iAttribute">int </arg>
</function>

<function name="_lread" ret="UINT" convention="__stdcall">
<arg name="hFile">HFILE</arg>
<arg name="lpBuffer">LPVOID</arg>
<arg name="uBytes">UINT</arg>
</function>

<function name="_lwrite" ret="UINT" convention="__stdcall">
<arg name="hFile">HFILE</arg>
<arg name="lpBuffer">LPCCH</arg>
<arg name="uBytes">UINT</arg>
</function>

<function name="_hread" ret="long" convention="__stdcall">
<arg name="hFile">HFILE</arg>
<arg name="lpBuffer">LPVOID</arg>
<arg name="lBytes">long</arg>
</function>

<function name="_hwrite" ret="long" convention="__stdcall">
<arg name="hFile">HFILE</arg>
<arg name="lpBuffer">LPCCH</arg>
<arg name="lBytes">long</arg>
</function>

<function name="_lclose" ret="HFILE" convention="__stdcall">
<arg name="hFile">HFILE</arg>
</function>

<function name="_llseek" ret="LONG" convention="__stdcall">
<arg name="hFile">HFILE</arg>
<arg name="lOffset">LONG</arg>
<arg name="iOrigin">int</arg>
</function>

<function name="IsTextUnicode" ret="BOOL" convention="__stdcall">
<arg name="lpv">const void*</arg>
<arg name="iSize">int</arg>
<arg name="lpiResult">LPINT</arg>
</function>
<function name="FlsAlloc" ret="DWORD" convention="__stdcall">
<arg name="lpCallback">PFLS_CALLBACK_FUNCTION</arg>
</function>

<function name="FlsGetValue" ret="PVOID" convention="__stdcall">
<arg name="dwFlsIndex">DWORD</arg>
</function>

<function name="FlsSetValue" ret="BOOL" convention="__stdcall">
<arg name="dwFlsIndex">DWORD</arg>
<arg name="lpFlsData">PVOID</arg>
</function>

<function name="FlsFree" ret="BOOL" convention="__stdcall">
<arg name="dwFlsIndex">DWORD</arg>
</function>
<function name="TlsAlloc" ret="DWORD" convention="__stdcall">
<arg name="void"></arg>
</function>

<function name="TlsGetValue" ret="LPVOID" convention="__stdcall">
<arg name="dwTlsIndex">DWORD</arg>
</function>

<function name="TlsSetValue" ret="BOOL" convention="__stdcall">
<arg name="dwTlsIndex">DWORD</arg>
<arg name="lpTlsValue">LPVOID</arg>
</function>

<function name="TlsFree" ret="BOOL" convention="__stdcall">
<arg name="dwTlsIndex">DWORD</arg>
</function>

  typedef
  void
  (__stdcall *LPOVERLAPPED_COMPLETION_ROUTINE)(
  DWORD dwErrorCode,
  DWORD dwNumberOfBytesTransfered,
<arg name="lpOverlapped">LPOVERLAPPED</arg>
</function>

<function name="SleepEx" ret="DWORD" convention="__stdcall">
<arg name="dwMilliseconds">DWORD</arg>
<arg name="bAlertable">BOOL</arg>
</function>

<function name="WaitForSingleObjectEx" ret="DWORD" convention="__stdcall">
<arg name="hHandle">HANDLE</arg>
<arg name="dwMilliseconds">DWORD</arg>
<arg name="bAlertable">BOOL</arg>
</function>

<function name="WaitForMultipleObjectsEx" ret="DWORD" convention="__stdcall">
<arg name="nCount">DWORD</arg>

  const HANDLE *lpHandles,
  BOOL bWaitAll,
  DWORD dwMilliseconds,
<arg name="bAlertable">BOOL</arg>
</function>
<function name="SignalObjectAndWait" ret="DWORD" convention="__stdcall">
<arg name="hObjectToSignal">HANDLE</arg>
<arg name="hObjectToWaitOn">HANDLE</arg>
<arg name="dwMilliseconds">DWORD</arg>
<arg name="bAlertable">BOOL</arg>
</function>
<function name="ReadFileEx" ret="BOOL" convention="__stdcall">
<arg name="hFile">HANDLE</arg>
<arg name="lpBuffer">LPVOID</arg>
<arg name="nNumberOfBytesToRead">DWORD</arg>
<arg name="lpOverlapped">LPOVERLAPPED</arg>
<arg name="lpCompletionRoutine">LPOVERLAPPED_COMPLETION_ROUTINE</arg>
</function>

<function name="WriteFileEx" ret="BOOL" convention="__stdcall">
<arg name="hFile">HANDLE</arg>
<arg name="lpBuffer">LPCVOID</arg>
<arg name="nNumberOfBytesToWrite">DWORD</arg>
<arg name="lpOverlapped">LPOVERLAPPED</arg>
<arg name="lpCompletionRoutine">LPOVERLAPPED_COMPLETION_ROUTINE</arg>
</function>

<function name="BackupRead" ret="BOOL" convention="__stdcall">
<arg name="hFile">HANDLE</arg>
<arg name="lpBuffer">LPBYTE</arg>
<arg name="nNumberOfBytesToRead">DWORD</arg>
<arg name="lpNumberOfBytesRead">LPDWORD</arg>
<arg name="bAbort">BOOL</arg>
<arg name="bProcessSecurity">BOOL</arg>
<arg name="lpContext">LPVOID *</arg>
</function>

<function name="BackupSeek" ret="BOOL" convention="__stdcall">
<arg name="hFile">HANDLE</arg>
<arg name="dwLowBytesToSeek">DWORD </arg>
<arg name="dwHighBytesToSeek">DWORD </arg>
<arg name="lpdwLowByteSeeked">LPDWORD</arg>
<arg name="lpdwHighByteSeeked">LPDWORD</arg>
<arg name="lpContext">LPVOID *</arg>
</function>

<function name="BackupWrite" ret="BOOL" convention="__stdcall">
<arg name="hFile">HANDLE</arg>
<arg name="lpBuffer">LPBYTE</arg>
<arg name="nNumberOfBytesToWrite">DWORD</arg>
<arg name="lpNumberOfBytesWritten">LPDWORD</arg>
<arg name="bAbort">BOOL</arg>
<arg name="bProcessSecurity">BOOL</arg>
<arg name="lpContext">LPVOID *</arg>
</function>

<struct name="_WIN32_STREAM_ID">
  DWORD          dwStreamId ;
  DWORD          dwStreamAttributes ;
  LARGE_INTEGER  Size ;
  DWORD          dwStreamNameSize ;
  WCHAR          cStreamName[ 1 ] ;
  } WIN32_STREAM_ID, *LPWIN32_STREAM_ID ;

<function name="ReadFileScatter" ret="BOOL" convention="__stdcall">
<arg name="hFile">HANDLE</arg>

  FILE_SEGMENT_ELEMENT aSegmentArray[],
  DWORD nNumberOfBytesToRead,
  LPDWORD lpReserved,
<arg name="lpOverlapped">LPOVERLAPPED</arg>
</function>

<function name="WriteFileGather" ret="BOOL" convention="__stdcall">
<arg name="hFile">HANDLE</arg>

  FILE_SEGMENT_ELEMENT aSegmentArray[],
  DWORD nNumberOfBytesToWrite,
  LPDWORD lpReserved,
<arg name="lpOverlapped">LPOVERLAPPED</arg>
</function>
<struct name="_STARTUPINFOA">
<field name="cb">DWORD</field>
<field name="lpReserved">LPSTR</field>
<field name="lpDesktop">LPSTR</field>
<field name="lpTitle">LPSTR</field>
<field name="dwX">DWORD</field>
<field name="dwY">DWORD</field>
<field name="dwXSize">DWORD</field>
<field name="dwYSize">DWORD</field>
<field name="dwXCountChars">DWORD</field>
<field name="dwYCountChars">DWORD</field>
<field name="dwFillAttribute">DWORD</field>
<field name="dwFlags">DWORD</field>
<field name="wShowWindow">WORD</field>
<field name="cbReserved2">WORD</field>
<field name="lpReserved2">LPBYTE</field>
<field name="hStdInput">HANDLE</field>
<field name="hStdOutput">HANDLE</field>
<field name="hStdError">HANDLE</field>
</struct>
<typedefprev id="STARTUPINFOA"/>
<typedefptrprev id="LPSTARTUPINFOA"/>
<struct name="_STARTUPINFOW">
<field name="cb">DWORD</field>
<field name="lpReserved">LPWSTR</field>
<field name="lpDesktop">LPWSTR</field>
<field name="lpTitle">LPWSTR</field>
<field name="dwX">DWORD</field>
<field name="dwY">DWORD</field>
<field name="dwXSize">DWORD</field>
<field name="dwYSize">DWORD</field>
<field name="dwXCountChars">DWORD</field>
<field name="dwYCountChars">DWORD</field>
<field name="dwFillAttribute">DWORD</field>
<field name="dwFlags">DWORD</field>
<field name="wShowWindow">WORD</field>
<field name="cbReserved2">WORD</field>
<field name="lpReserved2">LPBYTE</field>
<field name="hStdInput">HANDLE</field>
<field name="hStdOutput">HANDLE</field>
<field name="hStdError">HANDLE</field>
</struct>
<typedefprev id="STARTUPINFOW"/>
<typedefptrprev id="LPSTARTUPINFOW"/>

  typedef STARTUPINFOA STARTUPINFO;
  typedef LPSTARTUPINFOA LPSTARTUPINFO;
<struct name="_STARTUPINFOEXA">
<field name="StartupInfo">STARTUPINFOA</field>
  struct _PROC_THREAD_ATTRIBUTE_LIST *lpAttributeList;
  } STARTUPINFOEXA, *LPSTARTUPINFOEXA;
<struct name="_STARTUPINFOEXW">
<field name="StartupInfo">STARTUPINFOW</field>
  struct _PROC_THREAD_ATTRIBUTE_LIST *lpAttributeList;
  } STARTUPINFOEXW, *LPSTARTUPINFOEXW;

  typedef STARTUPINFOEXA STARTUPINFOEX;
  typedef LPSTARTUPINFOEXA LPSTARTUPINFOEX;

<struct name="_WIN32_FIND_DATAA">
<field name="dwFileAttributes">DWORD</field>
<field name="ftCreationTime">FILETIME</field>
<field name="ftLastAccessTime">FILETIME</field>
<field name="ftLastWriteTime">FILETIME</field>
<field name="nFileSizeHigh">DWORD</field>
<field name="nFileSizeLow">DWORD</field>
<field name="dwReserved0">DWORD</field>
<field name="dwReserved1">DWORD</field>
<field name="cFileName[ 260 ]">CHAR</field>
<field name="cAlternateFileName[ 14 ]">CHAR</field>
  } WIN32_FIND_DATAA, *PWIN32_FIND_DATAA, *LPWIN32_FIND_DATAA;
<struct name="_WIN32_FIND_DATAW">
<field name="dwFileAttributes">DWORD</field>
<field name="ftCreationTime">FILETIME</field>
<field name="ftLastAccessTime">FILETIME</field>
<field name="ftLastWriteTime">FILETIME</field>
<field name="nFileSizeHigh">DWORD</field>
<field name="nFileSizeLow">DWORD</field>
<field name="dwReserved0">DWORD</field>
<field name="dwReserved1">DWORD</field>
<field name="cFileName[ 260 ]">WCHAR</field>
<field name="cAlternateFileName[ 14 ]">WCHAR</field>
  } WIN32_FIND_DATAW, *PWIN32_FIND_DATAW, *LPWIN32_FIND_DATAW;
  typedef WIN32_FIND_DATAA WIN32_FIND_DATA;
  typedef PWIN32_FIND_DATAA PWIN32_FIND_DATA;
  typedef LPWIN32_FIND_DATAA LPWIN32_FIND_DATA;
<struct name="_WIN32_FILE_ATTRIBUTE_DATA">
<field name="dwFileAttributes">DWORD</field>
<field name="ftCreationTime">FILETIME</field>
<field name="ftLastAccessTime">FILETIME</field>
<field name="ftLastWriteTime">FILETIME</field>
<field name="nFileSizeHigh">DWORD</field>
<field name="nFileSizeLow">DWORD</field>
</struct>
<typedefprev id="WIN32_FILE_ATTRIBUTE_DATA"/>
<typedefptrprev id="LPWIN32_FILE_ATTRIBUTE_DATA"/>
<function name="CreateMutexA" ret="HANDLE" convention="__stdcall">
<arg name="lpMutexAttributes">LPSECURITY_ATTRIBUTES</arg>
<arg name="bInitialOwner">BOOL</arg>
<arg name="lpName">LPCSTR</arg>
</function>
<function name="CreateMutexW" ret="HANDLE" convention="__stdcall">
<arg name="lpMutexAttributes">LPSECURITY_ATTRIBUTES</arg>
<arg name="bInitialOwner">BOOL</arg>
<arg name="lpName">LPCWSTR</arg>
</function>
<function name="OpenMutexA" ret="HANDLE" convention="__stdcall">
<arg name="dwDesiredAccess">DWORD</arg>
<arg name="bInheritHandle">BOOL</arg>
<arg name="lpName">LPCSTR</arg>
</function>
<function name="OpenMutexW" ret="HANDLE" convention="__stdcall">
<arg name="dwDesiredAccess">DWORD</arg>
<arg name="bInheritHandle">BOOL</arg>
<arg name="lpName">LPCWSTR</arg>
</function>
<function name="CreateEventA" ret="HANDLE" convention="__stdcall">
<arg name="lpEventAttributes">LPSECURITY_ATTRIBUTES</arg>
<arg name="bManualReset">BOOL</arg>
<arg name="bInitialState">BOOL</arg>
<arg name="lpName">LPCSTR</arg>
</function>
<function name="CreateEventW" ret="HANDLE" convention="__stdcall">
<arg name="lpEventAttributes">LPSECURITY_ATTRIBUTES</arg>
<arg name="bManualReset">BOOL</arg>
<arg name="bInitialState">BOOL</arg>
<arg name="lpName">LPCWSTR</arg>
</function>
<function name="OpenEventA" ret="HANDLE" convention="__stdcall">
<arg name="dwDesiredAccess">DWORD</arg>
<arg name="bInheritHandle">BOOL</arg>
<arg name="lpName">LPCSTR</arg>
</function>
<function name="OpenEventW" ret="HANDLE" convention="__stdcall">
<arg name="dwDesiredAccess">DWORD</arg>
<arg name="bInheritHandle">BOOL</arg>
<arg name="lpName">LPCWSTR</arg>
</function>
<function name="CreateSemaphoreA" ret="HANDLE" convention="__stdcall">
<arg name="lpSemaphoreAttributes">LPSECURITY_ATTRIBUTES</arg>
<arg name="lInitialCount">LONG</arg>
<arg name="lMaximumCount">LONG</arg>
<arg name="lpName">LPCSTR</arg>
</function>
<function name="CreateSemaphoreW" ret="HANDLE" convention="__stdcall">
<arg name="lpSemaphoreAttributes">LPSECURITY_ATTRIBUTES</arg>
<arg name="lInitialCount">LONG</arg>
<arg name="lMaximumCount">LONG</arg>
<arg name="lpName">LPCWSTR</arg>
</function>
<function name="OpenSemaphoreA" ret="HANDLE" convention="__stdcall">
<arg name="dwDesiredAccess">DWORD</arg>
<arg name="bInheritHandle">BOOL</arg>
<arg name="lpName">LPCSTR</arg>
</function>
<function name="OpenSemaphoreW" ret="HANDLE" convention="__stdcall">
<arg name="dwDesiredAccess">DWORD</arg>
<arg name="bInheritHandle">BOOL</arg>
<arg name="lpName">LPCWSTR</arg>
</function>
  typedef
  void
  (__stdcall *PTIMERAPCROUTINE)(
  LPVOID lpArgToCompletionRoutine,
  DWORD dwTimerLowValue,
<arg name="dwTimerHighValue">DWORD</arg>
</function>

<function name="CreateWaitableTimerA" ret="HANDLE" convention="__stdcall">
<arg name="lpTimerAttributes">LPSECURITY_ATTRIBUTES</arg>
<arg name="bManualReset">BOOL</arg>
<arg name="lpTimerName">LPCSTR</arg>
</function>
<function name="CreateWaitableTimerW" ret="HANDLE" convention="__stdcall">
<arg name="lpTimerAttributes">LPSECURITY_ATTRIBUTES</arg>
<arg name="bManualReset">BOOL</arg>
<arg name="lpTimerName">LPCWSTR</arg>
</function>
<function name="OpenWaitableTimerA" ret="HANDLE" convention="__stdcall">
<arg name="dwDesiredAccess">DWORD</arg>
<arg name="bInheritHandle">BOOL</arg>
<arg name="lpTimerName">LPCSTR</arg>
</function>
<function name="OpenWaitableTimerW" ret="HANDLE" convention="__stdcall">
<arg name="dwDesiredAccess">DWORD</arg>
<arg name="bInheritHandle">BOOL</arg>
<arg name="lpTimerName">LPCWSTR</arg>
</function>
<function name="SetWaitableTimer" ret="BOOL" convention="__stdcall">
<arg name="hTimer">HANDLE</arg>

  const LARGE_INTEGER *lpDueTime,
  LONG lPeriod,
  PTIMERAPCROUTINE pfnCompletionRoutine,
  LPVOID lpArgToCompletionRoutine,
<arg name="fResume">BOOL</arg>
</function>

<function name="CancelWaitableTimer" ret="BOOL" convention="__stdcall">
<arg name="hTimer">HANDLE</arg>
</function>
<function name="CreateMutexExA" ret="HANDLE" convention="__stdcall">
<arg name="lpMutexAttributes">LPSECURITY_ATTRIBUTES</arg>
<arg name="lpName">LPCSTR</arg>
<arg name="dwFlags">DWORD</arg>
<arg name="dwDesiredAccess">DWORD</arg>
</function>
<function name="CreateMutexExW" ret="HANDLE" convention="__stdcall">
<arg name="lpMutexAttributes">LPSECURITY_ATTRIBUTES</arg>
<arg name="lpName">LPCWSTR</arg>
<arg name="dwFlags">DWORD</arg>
<arg name="dwDesiredAccess">DWORD</arg>
</function>
<function name="CreateEventExA" ret="HANDLE" convention="__stdcall">
<arg name="lpEventAttributes">LPSECURITY_ATTRIBUTES</arg>
<arg name="lpName">LPCSTR</arg>
<arg name="dwFlags">DWORD</arg>
<arg name="dwDesiredAccess">DWORD</arg>
</function>
<function name="CreateEventExW" ret="HANDLE" convention="__stdcall">
<arg name="lpEventAttributes">LPSECURITY_ATTRIBUTES</arg>
<arg name="lpName">LPCWSTR</arg>
<arg name="dwFlags">DWORD</arg>
<arg name="dwDesiredAccess">DWORD</arg>
</function>
<function name="CreateSemaphoreExA" ret="HANDLE" convention="__stdcall">
<arg name="lpSemaphoreAttributes">LPSECURITY_ATTRIBUTES</arg>
<arg name="lInitialCount">LONG</arg>
<arg name="lMaximumCount">LONG</arg>
<arg name="lpName">LPCSTR</arg>
<arg name="dwFlags">DWORD</arg>
<arg name="dwDesiredAccess">DWORD</arg>
</function>
<function name="CreateSemaphoreExW" ret="HANDLE" convention="__stdcall">
<arg name="lpSemaphoreAttributes">LPSECURITY_ATTRIBUTES</arg>
<arg name="lInitialCount">LONG</arg>
<arg name="lMaximumCount">LONG</arg>
<arg name="lpName">LPCWSTR</arg>
<arg name="dwFlags">DWORD</arg>
<arg name="dwDesiredAccess">DWORD</arg>
</function>
<function name="CreateWaitableTimerExA" ret="HANDLE" convention="__stdcall">
<arg name="lpTimerAttributes">LPSECURITY_ATTRIBUTES</arg>
<arg name="lpTimerName">LPCSTR</arg>
<arg name="dwFlags">DWORD</arg>
<arg name="dwDesiredAccess">DWORD</arg>
</function>
<function name="CreateWaitableTimerExW" ret="HANDLE" convention="__stdcall">
<arg name="lpTimerAttributes">LPSECURITY_ATTRIBUTES</arg>
<arg name="lpTimerName">LPCWSTR</arg>
<arg name="dwFlags">DWORD</arg>
<arg name="dwDesiredAccess">DWORD</arg>
</function>
<function name="CreateFileMappingA" ret="HANDLE" convention="__stdcall">
<arg name="hFile">HANDLE</arg>
<arg name="lpFileMappingAttributes">LPSECURITY_ATTRIBUTES</arg>
<arg name="flProtect">DWORD</arg>
<arg name="dwMaximumSizeHigh">DWORD</arg>
<arg name="dwMaximumSizeLow">DWORD</arg>
<arg name="lpName">LPCSTR</arg>
</function>
<function name="CreateFileMappingW" ret="HANDLE" convention="__stdcall">
<arg name="hFile">HANDLE</arg>
<arg name="lpFileMappingAttributes">LPSECURITY_ATTRIBUTES</arg>
<arg name="flProtect">DWORD</arg>
<arg name="dwMaximumSizeHigh">DWORD</arg>
<arg name="dwMaximumSizeLow">DWORD</arg>
<arg name="lpName">LPCWSTR</arg>
</function>
<function name="CreateFileMappingNumaA" ret="HANDLE" convention="__stdcall">
<arg name="hFile">HANDLE</arg>
<arg name="lpFileMappingAttributes">LPSECURITY_ATTRIBUTES</arg>
<arg name="flProtect">DWORD</arg>
<arg name="dwMaximumSizeHigh">DWORD</arg>
<arg name="dwMaximumSizeLow">DWORD</arg>
<arg name="lpName">LPCSTR</arg>
<arg name="nndPreferred">DWORD</arg>
</function>
<function name="CreateFileMappingNumaW" ret="HANDLE" convention="__stdcall">
<arg name="hFile">HANDLE</arg>
<arg name="lpFileMappingAttributes">LPSECURITY_ATTRIBUTES</arg>
<arg name="flProtect">DWORD</arg>
<arg name="dwMaximumSizeHigh">DWORD</arg>
<arg name="dwMaximumSizeLow">DWORD</arg>
<arg name="lpName">LPCWSTR</arg>
<arg name="nndPreferred">DWORD</arg>
</function>
<function name="OpenFileMappingA" ret="HANDLE" convention="__stdcall">
<arg name="dwDesiredAccess">DWORD</arg>
<arg name="bInheritHandle">BOOL</arg>
<arg name="lpName">LPCSTR</arg>
</function>
<function name="OpenFileMappingW" ret="HANDLE" convention="__stdcall">
<arg name="dwDesiredAccess">DWORD</arg>
<arg name="bInheritHandle">BOOL</arg>
<arg name="lpName">LPCWSTR</arg>
</function>
<function name="GetLogicalDriveStringsA" ret="DWORD" convention="__stdcall">
<arg name="nBufferLength">DWORD</arg>
<arg name="lpBuffer">LPSTR</arg>
</function>
<function name="GetLogicalDriveStringsW" ret="DWORD" convention="__stdcall">
<arg name="nBufferLength">DWORD</arg>
<arg name="lpBuffer">LPWSTR</arg>
</function>
  typedef enum _MEMORY_RESOURCE_NOTIFICATION_TYPE {
  LowMemoryResourceNotification,
  HighMemoryResourceNotification
  } MEMORY_RESOURCE_NOTIFICATION_TYPE;

<function name="CreateMemoryResourceNotification" ret="HANDLE" convention="__stdcall">
<arg name="NotificationType">MEMORY_RESOURCE_NOTIFICATION_TYPE</arg>
</function>

<function name="QueryMemoryResourceNotification" ret="BOOL" convention="__stdcall">
<arg name="ResourceNotificationHandle">HANDLE</arg>
<arg name="ResourceState">PBOOL </arg>
</function>
<function name="LoadLibraryA" ret="HMODULE" convention="__stdcall">
<arg name="lpLibFileName">LPCSTR</arg>
</function>
<function name="LoadLibraryW" ret="HMODULE" convention="__stdcall">
<arg name="lpLibFileName">LPCWSTR</arg>
</function>
<function name="LoadLibraryExA" ret="HMODULE" convention="__stdcall">
<arg name="lpLibFileName">LPCSTR</arg>
<arg name="hFile">HANDLE</arg>
<arg name="dwFlags">DWORD</arg>
</function>
<function name="LoadLibraryExW" ret="HMODULE" convention="__stdcall">
<arg name="lpLibFileName">LPCWSTR</arg>
<arg name="hFile">HANDLE</arg>
<arg name="dwFlags">DWORD</arg>
</function>
<function name="GetModuleFileNameA" ret="DWORD" convention="__stdcall">
<arg name="hModule">HMODULE</arg>
<arg name="lpFilename">LPCH</arg>
<arg name="nSize">DWORD</arg>
</function>
<function name="GetModuleFileNameW" ret="DWORD" convention="__stdcall">
<arg name="hModule">HMODULE</arg>
<arg name="lpFilename">LPWCH</arg>
<arg name="nSize">DWORD</arg>
</function>
<function name="GetModuleHandleA" ret="HMODULE" convention="__stdcall">
<arg name="lpModuleName">LPCSTR</arg>
</function>
<function name="GetModuleHandleW" ret="HMODULE" convention="__stdcall">
<arg name="lpModuleName">LPCWSTR</arg>
</function>
  typedef
  BOOL
  (__stdcall*
  PGET_MODULE_HANDLE_EXA)(
  DWORD        dwFlags,
  LPCSTR     lpModuleName,
<arg name="phModule">HMODULE*   </arg>
</function>
  typedef
  BOOL
  (__stdcall*
  PGET_MODULE_HANDLE_EXW)(
  DWORD        dwFlags,
  LPCWSTR     lpModuleName,
<arg name="phModule">HMODULE*   </arg>
</function>
<function name="GetModuleHandleExA" ret="BOOL" convention="__stdcall">
<arg name="dwFlags">DWORD   </arg>
<arg name="lpModuleName">LPCSTR</arg>
<arg name="phModule">HMODULE*</arg>
</function>
<function name="GetModuleHandleExW" ret="BOOL" convention="__stdcall">
<arg name="dwFlags">DWORD   </arg>
<arg name="lpModuleName">LPCWSTR</arg>
<arg name="phModule">HMODULE*</arg>
</function>
<function name="NeedCurrentDirectoryForExePathA" ret="BOOL" convention="__stdcall">
<arg name="ExeName">LPCSTR</arg>
</function>
<function name="NeedCurrentDirectoryForExePathW" ret="BOOL" convention="__stdcall">
<arg name="ExeName">LPCWSTR</arg>
</function>

<function name="QueryFullProcessImageNameA" ret="BOOL" convention="__stdcall">
<arg name="hProcess">HANDLE</arg>
<arg name="dwFlags">DWORD</arg>
<arg name="lpExeName">LPSTR</arg>
<arg name="lpdwSize">PDWORD</arg>
</function>
<function name="QueryFullProcessImageNameW" ret="BOOL" convention="__stdcall">
<arg name="hProcess">HANDLE</arg>
<arg name="dwFlags">DWORD</arg>
<arg name="lpExeName">LPWSTR</arg>
<arg name="lpdwSize">PDWORD</arg>
</function>

  typedef enum _PROC_THREAD_ATTRIBUTE_NUM {
  ProcThreadAttributeParentProcess = 0,
  ProcThreadAttributeExtendedFlags,
  ProcThreadAttributeHandleList,
  ProcThreadAttributeMax
  } PROC_THREAD_ATTRIBUTE_NUM;

  <typedef name="LPPROC_THREAD_ATTRIBUTE_LIST">_PROC_THREAD_ATTRIBUTE_LIST *PPROC_THREAD_ATTRIBUTE_LIST, *</typedef>
<function name="InitializeProcThreadAttributeList" ret="BOOL" convention="__stdcall">
<arg name="lpAttributeList">LPPROC_THREAD_ATTRIBUTE_LIST</arg>
<arg name="dwAttributeCount">DWORD</arg>
<arg name="dwFlags">DWORD</arg>
<arg name="lpSize">PSIZE_T</arg>
</function>

<function name="DeleteProcThreadAttributeList" ret="void" convention="__stdcall">
<arg name="lpAttributeList">LPPROC_THREAD_ATTRIBUTE_LIST</arg>
</function>
<function name="UpdateProcThreadAttribute" ret="BOOL" convention="__stdcall">
<arg name="lpAttributeList">LPPROC_THREAD_ATTRIBUTE_LIST</arg>
<arg name="dwFlags">DWORD</arg>
<arg name="Attribute">DWORD_PTR</arg>
<arg name="lpValue">PVOID</arg>
<arg name="cbSize">SIZE_T</arg>
<arg name="lpPreviousValue">PVOID</arg>
<arg name="lpReturnSize">PSIZE_T</arg>
</function>
<function name="CreateProcessA" ret="BOOL" convention="__stdcall">
<arg name="lpApplicationName">LPCSTR</arg>
<arg name="lpCommandLine">LPSTR</arg>
<arg name="lpProcessAttributes">LPSECURITY_ATTRIBUTES</arg>
<arg name="lpThreadAttributes">LPSECURITY_ATTRIBUTES</arg>
<arg name="bInheritHandles">BOOL</arg>
<arg name="dwCreationFlags">DWORD</arg>
<arg name="lpEnvironment">LPVOID</arg>
<arg name="lpCurrentDirectory">LPCSTR</arg>
<arg name="lpStartupInfo">LPSTARTUPINFOA</arg>
<arg name="lpProcessInformation">LPPROCESS_INFORMATION</arg>
</function>
<function name="CreateProcessW" ret="BOOL" convention="__stdcall">
<arg name="lpApplicationName">LPCWSTR</arg>
<arg name="lpCommandLine">LPWSTR</arg>
<arg name="lpProcessAttributes">LPSECURITY_ATTRIBUTES</arg>
<arg name="lpThreadAttributes">LPSECURITY_ATTRIBUTES</arg>
<arg name="bInheritHandles">BOOL</arg>
<arg name="dwCreationFlags">DWORD</arg>
<arg name="lpEnvironment">LPVOID</arg>
<arg name="lpCurrentDirectory">LPCWSTR</arg>
<arg name="lpStartupInfo">LPSTARTUPINFOW</arg>
<arg name="lpProcessInformation">LPPROCESS_INFORMATION</arg>
</function>
<function name="SetProcessShutdownParameters" ret="BOOL" convention="__stdcall">
<arg name="dwLevel">DWORD</arg>
<arg name="dwFlags">DWORD</arg>
</function>

<function name="GetProcessShutdownParameters" ret="BOOL" convention="__stdcall">
<arg name="lpdwLevel">LPDWORD</arg>
<arg name="lpdwFlags">LPDWORD</arg>
</function>

<function name="GetProcessVersion" ret="DWORD" convention="__stdcall">
<arg name="ProcessId">DWORD</arg>
</function>

<function name="FatalAppExitA" ret="void" convention="__stdcall">
<arg name="uAction">UINT</arg>
<arg name="lpMessageText">LPCSTR</arg>
</function>
<function name="FatalAppExitW" ret="void" convention="__stdcall">
<arg name="uAction">UINT</arg>
<arg name="lpMessageText">LPCWSTR</arg>
</function>
<function name="GetStartupInfoA" ret="void" convention="__stdcall">
<arg name="lpStartupInfo">LPSTARTUPINFOA</arg>
</function>
<function name="GetStartupInfoW" ret="void" convention="__stdcall">
<arg name="lpStartupInfo">LPSTARTUPINFOW</arg>
</function>
<function name="GetCommandLineA" ret="LPSTR" convention="__stdcall">
<arg name="void"></arg>
</function>
<function name="GetCommandLineW" ret="LPWSTR" convention="__stdcall">
<arg name="void"></arg>
</function>
<function name="GetEnvironmentVariableA" ret="DWORD" convention="__stdcall">
<arg name="lpName">LPCSTR</arg>
<arg name="lpBuffer">LPSTR</arg>
<arg name="nSize">DWORD</arg>
</function>
<function name="GetEnvironmentVariableW" ret="DWORD" convention="__stdcall">
<arg name="lpName">LPCWSTR</arg>
<arg name="lpBuffer">LPWSTR</arg>
<arg name="nSize">DWORD</arg>
</function>
<function name="SetEnvironmentVariableA" ret="BOOL" convention="__stdcall">
<arg name="lpName">LPCSTR</arg>
<arg name="lpValue">LPCSTR</arg>
</function>
<function name="SetEnvironmentVariableW" ret="BOOL" convention="__stdcall">
<arg name="lpName">LPCWSTR</arg>
<arg name="lpValue">LPCWSTR</arg>
</function>

<function name="ExpandEnvironmentStringsA" ret="DWORD" convention="__stdcall">
<arg name="lpSrc">LPCSTR</arg>
<arg name="lpDst">LPSTR</arg>
<arg name="nSize">DWORD</arg>
</function>
<function name="ExpandEnvironmentStringsW" ret="DWORD" convention="__stdcall">
<arg name="lpSrc">LPCWSTR</arg>
<arg name="lpDst">LPWSTR</arg>
<arg name="nSize">DWORD</arg>
</function>
<function name="GetFirmwareEnvironmentVariableA" ret="DWORD" convention="__stdcall">
<arg name="lpName">LPCSTR</arg>
<arg name="lpGuid">LPCSTR</arg>
<arg name="pBuffer">PVOID</arg>
<arg name="nSize">DWORD   </arg>
</function>
<function name="GetFirmwareEnvironmentVariableW" ret="DWORD" convention="__stdcall">
<arg name="lpName">LPCWSTR</arg>
<arg name="lpGuid">LPCWSTR</arg>
<arg name="pBuffer">PVOID</arg>
<arg name="nSize">DWORD   </arg>
</function>
<function name="SetFirmwareEnvironmentVariableA" ret="BOOL" convention="__stdcall">
<arg name="lpName">LPCSTR</arg>
<arg name="lpGuid">LPCSTR</arg>
<arg name="pValue">PVOID</arg>
<arg name="nSize">DWORD   </arg>
</function>
<function name="SetFirmwareEnvironmentVariableW" ret="BOOL" convention="__stdcall">
<arg name="lpName">LPCWSTR</arg>
<arg name="lpGuid">LPCWSTR</arg>
<arg name="pValue">PVOID</arg>
<arg name="nSize">DWORD   </arg>
</function>
<function name="OutputDebugStringA" ret="void" convention="__stdcall">
<arg name="lpOutputString">LPCSTR</arg>
</function>
<function name="OutputDebugStringW" ret="void" convention="__stdcall">
<arg name="lpOutputString">LPCWSTR</arg>
</function>
<function name="FindResourceA" ret="HRSRC" convention="__stdcall">
<arg name="hModule">HMODULE</arg>
<arg name="lpName">LPCSTR</arg>
<arg name="lpType">LPCSTR</arg>
</function>
<function name="FindResourceW" ret="HRSRC" convention="__stdcall">
<arg name="hModule">HMODULE</arg>
<arg name="lpName">LPCWSTR</arg>
<arg name="lpType">LPCWSTR</arg>
</function>
<function name="FindResourceExA" ret="HRSRC" convention="__stdcall">
<arg name="hModule">HMODULE</arg>
<arg name="lpType">LPCSTR</arg>
<arg name="lpName">LPCSTR</arg>
<arg name="wLanguage">WORD   </arg>
</function>
<function name="FindResourceExW" ret="HRSRC" convention="__stdcall">
<arg name="hModule">HMODULE</arg>
<arg name="lpType">LPCWSTR</arg>
<arg name="lpName">LPCWSTR</arg>
<arg name="wLanguage">WORD   </arg>
</function>
  typedef BOOL (__stdcall* ENUMRESTYPEPROCA)( HMODULE hModule,  LPSTR lpType,
  LONG_PTR lParam);
  typedef BOOL (__stdcall* ENUMRESTYPEPROCW)( HMODULE hModule,  LPWSTR lpType,
  LONG_PTR lParam);
  typedef BOOL (__stdcall* ENUMRESNAMEPROCA)( HMODULE hModule,  LPCSTR lpType,
  LPSTR lpName,  LONG_PTR lParam);
  typedef BOOL (__stdcall* ENUMRESNAMEPROCW)( HMODULE hModule,  LPCWSTR lpType,
  LPWSTR lpName,  LONG_PTR lParam);
  typedef BOOL (__stdcall* ENUMRESLANGPROCA)( HMODULE hModule,  LPCSTR lpType,
  LPCSTR lpName,  WORD  wLanguage,  LONG_PTR lParam);
  typedef BOOL (__stdcall* ENUMRESLANGPROCW)( HMODULE hModule,  LPCWSTR lpType,
  LPCWSTR lpName,  WORD  wLanguage,  LONG_PTR lParam);

<function name="EnumResourceTypesA" ret="BOOL" convention="__stdcall">
<arg name="hModule">HMODULE</arg>
<arg name="lpEnumFunc">ENUMRESTYPEPROCA</arg>
<arg name="lParam">LONG_PTR</arg>
</function>
<function name="EnumResourceTypesW" ret="BOOL" convention="__stdcall">
<arg name="hModule">HMODULE</arg>
<arg name="lpEnumFunc">ENUMRESTYPEPROCW</arg>
<arg name="lParam">LONG_PTR</arg>
</function>
<function name="EnumResourceNamesA" ret="BOOL" convention="__stdcall">
<arg name="hModule">HMODULE</arg>
<arg name="lpType">LPCSTR</arg>
<arg name="lpEnumFunc">ENUMRESNAMEPROCA</arg>
<arg name="lParam">LONG_PTR</arg>
</function>
<function name="EnumResourceNamesW" ret="BOOL" convention="__stdcall">
<arg name="hModule">HMODULE</arg>
<arg name="lpType">LPCWSTR</arg>
<arg name="lpEnumFunc">ENUMRESNAMEPROCW</arg>
<arg name="lParam">LONG_PTR</arg>
</function>
<function name="EnumResourceLanguagesA" ret="BOOL" convention="__stdcall">
<arg name="hModule">HMODULE</arg>
<arg name="lpType">LPCSTR</arg>
<arg name="lpName">LPCSTR</arg>
<arg name="lpEnumFunc">ENUMRESLANGPROCA</arg>
<arg name="lParam">LONG_PTR</arg>
</function>
<function name="EnumResourceLanguagesW" ret="BOOL" convention="__stdcall">
<arg name="hModule">HMODULE</arg>
<arg name="lpType">LPCWSTR</arg>
<arg name="lpName">LPCWSTR</arg>
<arg name="lpEnumFunc">ENUMRESLANGPROCW</arg>
<arg name="lParam">LONG_PTR</arg>
</function>
<function name="EnumResourceTypesExA" ret="BOOL" convention="__stdcall">
<arg name="hModule">HMODULE</arg>
<arg name="lpEnumFunc">ENUMRESTYPEPROCA</arg>
<arg name="lParam">LONG_PTR</arg>
<arg name="dwFlags">DWORD</arg>
<arg name="LangId">LANGID</arg>
</function>
<function name="EnumResourceTypesExW" ret="BOOL" convention="__stdcall">
<arg name="hModule">HMODULE</arg>
<arg name="lpEnumFunc">ENUMRESTYPEPROCW</arg>
<arg name="lParam">LONG_PTR</arg>
<arg name="dwFlags">DWORD</arg>
<arg name="LangId">LANGID</arg>
</function>
<function name="EnumResourceNamesExA" ret="BOOL" convention="__stdcall">
<arg name="hModule">HMODULE</arg>
<arg name="lpType">LPCSTR</arg>
<arg name="lpEnumFunc">ENUMRESNAMEPROCA</arg>
<arg name="lParam">LONG_PTR</arg>
<arg name="dwFlags">DWORD</arg>
<arg name="LangId">LANGID</arg>
</function>
<function name="EnumResourceNamesExW" ret="BOOL" convention="__stdcall">
<arg name="hModule">HMODULE</arg>
<arg name="lpType">LPCWSTR</arg>
<arg name="lpEnumFunc">ENUMRESNAMEPROCW</arg>
<arg name="lParam">LONG_PTR</arg>
<arg name="dwFlags">DWORD</arg>
<arg name="LangId">LANGID</arg>
</function>
<function name="EnumResourceLanguagesExA" ret="BOOL" convention="__stdcall">
<arg name="hModule">HMODULE</arg>
<arg name="lpType">LPCSTR</arg>
<arg name="lpName">LPCSTR</arg>
<arg name="lpEnumFunc">ENUMRESLANGPROCA</arg>
<arg name="lParam">LONG_PTR</arg>
<arg name="dwFlags">DWORD</arg>
<arg name="LangId">LANGID</arg>
</function>
<function name="EnumResourceLanguagesExW" ret="BOOL" convention="__stdcall">
<arg name="hModule">HMODULE</arg>
<arg name="lpType">LPCWSTR</arg>
<arg name="lpName">LPCWSTR</arg>
<arg name="lpEnumFunc">ENUMRESLANGPROCW</arg>
<arg name="lParam">LONG_PTR</arg>
<arg name="dwFlags">DWORD</arg>
<arg name="LangId">LANGID</arg>
</function>
<function name="BeginUpdateResourceA" ret="HANDLE" convention="__stdcall">
<arg name="pFileName">LPCSTR</arg>
<arg name="bDeleteExistingResources">BOOL</arg>
</function>
<function name="BeginUpdateResourceW" ret="HANDLE" convention="__stdcall">
<arg name="pFileName">LPCWSTR</arg>
<arg name="bDeleteExistingResources">BOOL</arg>
</function>
<function name="UpdateResourceA" ret="BOOL" convention="__stdcall">
<arg name="hUpdate">HANDLE</arg>
<arg name="lpType">LPCSTR</arg>
<arg name="lpName">LPCSTR</arg>
<arg name="wLanguage">WORD</arg>
<arg name="lpData">LPVOID</arg>
<arg name="cb">DWORD</arg>
</function>
<function name="UpdateResourceW" ret="BOOL" convention="__stdcall">
<arg name="hUpdate">HANDLE</arg>
<arg name="lpType">LPCWSTR</arg>
<arg name="lpName">LPCWSTR</arg>
<arg name="wLanguage">WORD</arg>
<arg name="lpData">LPVOID</arg>
<arg name="cb">DWORD</arg>
</function>
<function name="EndUpdateResourceA" ret="BOOL" convention="__stdcall">
<arg name="hUpdate">HANDLE</arg>
<arg name="fDiscard">BOOL  </arg>
</function>
<function name="EndUpdateResourceW" ret="BOOL" convention="__stdcall">
<arg name="hUpdate">HANDLE</arg>
<arg name="fDiscard">BOOL  </arg>
</function>
<function name="GlobalAddAtomA" ret="ATOM" convention="__stdcall">
<arg name="lpString">LPCSTR</arg>
</function>
<function name="GlobalAddAtomW" ret="ATOM" convention="__stdcall">
<arg name="lpString">LPCWSTR</arg>
</function>
<function name="GlobalFindAtomA" ret="ATOM" convention="__stdcall">
<arg name="lpString">LPCSTR</arg>
</function>
<function name="GlobalFindAtomW" ret="ATOM" convention="__stdcall">
<arg name="lpString">LPCWSTR</arg>
</function>
<function name="GlobalGetAtomNameA" ret="UINT" convention="__stdcall">
<arg name="nAtom">ATOM</arg>
<arg name="lpBuffer">LPSTR</arg>
<arg name="nSize">int</arg>
</function>
<function name="GlobalGetAtomNameW" ret="UINT" convention="__stdcall">
<arg name="nAtom">ATOM</arg>
<arg name="lpBuffer">LPWSTR</arg>
<arg name="nSize">int</arg>
</function>
<function name="AddAtomA" ret="ATOM" convention="__stdcall">
<arg name="lpString">LPCSTR</arg>
</function>
<function name="AddAtomW" ret="ATOM" convention="__stdcall">
<arg name="lpString">LPCWSTR</arg>
</function>
<function name="FindAtomA" ret="ATOM" convention="__stdcall">
<arg name="lpString">LPCSTR</arg>
</function>
<function name="FindAtomW" ret="ATOM" convention="__stdcall">
<arg name="lpString">LPCWSTR</arg>
</function>
<function name="GetAtomNameA" ret="UINT" convention="__stdcall">
<arg name="nAtom">ATOM</arg>
<arg name="lpBuffer">LPSTR</arg>
<arg name="nSize">int</arg>
</function>
<function name="GetAtomNameW" ret="UINT" convention="__stdcall">
<arg name="nAtom">ATOM</arg>
<arg name="lpBuffer">LPWSTR</arg>
<arg name="nSize">int</arg>
</function>
<function name="GetProfileIntA" ret="UINT" convention="__stdcall">
<arg name="lpAppName">LPCSTR</arg>
<arg name="lpKeyName">LPCSTR</arg>
<arg name="nDefault">INT</arg>
</function>
<function name="GetProfileIntW" ret="UINT" convention="__stdcall">
<arg name="lpAppName">LPCWSTR</arg>
<arg name="lpKeyName">LPCWSTR</arg>
<arg name="nDefault">INT</arg>
</function>
<function name="GetProfileStringA" ret="DWORD" convention="__stdcall">
<arg name="lpAppName">LPCSTR</arg>
<arg name="lpKeyName">LPCSTR</arg>
<arg name="lpDefault">LPCSTR</arg>
<arg name="lpReturnedString">LPSTR</arg>
<arg name="nSize">DWORD</arg>
</function>
<function name="GetProfileStringW" ret="DWORD" convention="__stdcall">
<arg name="lpAppName">LPCWSTR</arg>
<arg name="lpKeyName">LPCWSTR</arg>
<arg name="lpDefault">LPCWSTR</arg>
<arg name="lpReturnedString">LPWSTR</arg>
<arg name="nSize">DWORD</arg>
</function>
<function name="WriteProfileStringA" ret="BOOL" convention="__stdcall">
<arg name="lpAppName">LPCSTR</arg>
<arg name="lpKeyName">LPCSTR</arg>
<arg name="lpString">LPCSTR</arg>
</function>
<function name="WriteProfileStringW" ret="BOOL" convention="__stdcall">
<arg name="lpAppName">LPCWSTR</arg>
<arg name="lpKeyName">LPCWSTR</arg>
<arg name="lpString">LPCWSTR</arg>
</function>
<function name="GetProfileSectionA" ret="DWORD" convention="__stdcall">
<arg name="lpAppName">LPCSTR</arg>
<arg name="lpReturnedString">LPSTR</arg>
<arg name="nSize">DWORD</arg>
</function>
<function name="GetProfileSectionW" ret="DWORD" convention="__stdcall">
<arg name="lpAppName">LPCWSTR</arg>
<arg name="lpReturnedString">LPWSTR</arg>
<arg name="nSize">DWORD</arg>
</function>
<function name="WriteProfileSectionA" ret="BOOL" convention="__stdcall">
<arg name="lpAppName">LPCSTR</arg>
<arg name="lpString">LPCSTR</arg>
</function>
<function name="WriteProfileSectionW" ret="BOOL" convention="__stdcall">
<arg name="lpAppName">LPCWSTR</arg>
<arg name="lpString">LPCWSTR</arg>
</function>
<function name="GetPrivateProfileIntA" ret="UINT" convention="__stdcall">
<arg name="lpAppName">LPCSTR</arg>
<arg name="lpKeyName">LPCSTR</arg>
<arg name="nDefault">INT</arg>
<arg name="lpFileName">LPCSTR</arg>
</function>
<function name="GetPrivateProfileIntW" ret="UINT" convention="__stdcall">
<arg name="lpAppName">LPCWSTR</arg>
<arg name="lpKeyName">LPCWSTR</arg>
<arg name="nDefault">INT</arg>
<arg name="lpFileName">LPCWSTR</arg>
</function>
<function name="GetPrivateProfileStringA" ret="DWORD" convention="__stdcall">
<arg name="lpAppName">LPCSTR</arg>
<arg name="lpKeyName">LPCSTR</arg>
<arg name="lpDefault">LPCSTR</arg>
<arg name="lpReturnedString">LPSTR</arg>
<arg name="nSize">DWORD</arg>
<arg name="lpFileName">LPCSTR</arg>
</function>
<function name="GetPrivateProfileStringW" ret="DWORD" convention="__stdcall">
<arg name="lpAppName">LPCWSTR</arg>
<arg name="lpKeyName">LPCWSTR</arg>
<arg name="lpDefault">LPCWSTR</arg>
<arg name="lpReturnedString">LPWSTR</arg>
<arg name="nSize">DWORD</arg>
<arg name="lpFileName">LPCWSTR</arg>
</function>
<function name="WritePrivateProfileStringA" ret="BOOL" convention="__stdcall">
<arg name="lpAppName">LPCSTR</arg>
<arg name="lpKeyName">LPCSTR</arg>
<arg name="lpString">LPCSTR</arg>
<arg name="lpFileName">LPCSTR</arg>
</function>
<function name="WritePrivateProfileStringW" ret="BOOL" convention="__stdcall">
<arg name="lpAppName">LPCWSTR</arg>
<arg name="lpKeyName">LPCWSTR</arg>
<arg name="lpString">LPCWSTR</arg>
<arg name="lpFileName">LPCWSTR</arg>
</function>
<function name="GetPrivateProfileSectionA" ret="DWORD" convention="__stdcall">
<arg name="lpAppName">LPCSTR</arg>
<arg name="lpReturnedString">LPSTR</arg>
<arg name="nSize">DWORD</arg>
<arg name="lpFileName">LPCSTR</arg>
</function>
<function name="GetPrivateProfileSectionW" ret="DWORD" convention="__stdcall">
<arg name="lpAppName">LPCWSTR</arg>
<arg name="lpReturnedString">LPWSTR</arg>
<arg name="nSize">DWORD</arg>
<arg name="lpFileName">LPCWSTR</arg>
</function>
<function name="WritePrivateProfileSectionA" ret="BOOL" convention="__stdcall">
<arg name="lpAppName">LPCSTR</arg>
<arg name="lpString">LPCSTR</arg>
<arg name="lpFileName">LPCSTR</arg>
</function>
<function name="WritePrivateProfileSectionW" ret="BOOL" convention="__stdcall">
<arg name="lpAppName">LPCWSTR</arg>
<arg name="lpString">LPCWSTR</arg>
<arg name="lpFileName">LPCWSTR</arg>
</function>
<function name="GetPrivateProfileSectionNamesA" ret="DWORD" convention="__stdcall">
<arg name="lpszReturnBuffer">LPSTR</arg>
<arg name="nSize">DWORD</arg>
<arg name="lpFileName">LPCSTR</arg>
</function>
<function name="GetPrivateProfileSectionNamesW" ret="DWORD" convention="__stdcall">
<arg name="lpszReturnBuffer">LPWSTR</arg>
<arg name="nSize">DWORD</arg>
<arg name="lpFileName">LPCWSTR</arg>
</function>
<function name="GetPrivateProfileStructA" ret="BOOL" convention="__stdcall">
<arg name="lpszSection">LPCSTR</arg>
<arg name="lpszKey">LPCSTR</arg>
<arg name="lpStruct">LPVOID  </arg>
<arg name="uSizeStruct">UINT    </arg>
<arg name="szFile">LPCSTR</arg>
</function>
<function name="GetPrivateProfileStructW" ret="BOOL" convention="__stdcall">
<arg name="lpszSection">LPCWSTR</arg>
<arg name="lpszKey">LPCWSTR</arg>
<arg name="lpStruct">LPVOID  </arg>
<arg name="uSizeStruct">UINT    </arg>
<arg name="szFile">LPCWSTR</arg>
</function>
<function name="WritePrivateProfileStructA" ret="BOOL" convention="__stdcall">
<arg name="lpszSection">LPCSTR</arg>
<arg name="lpszKey">LPCSTR</arg>
<arg name="lpStruct">LPVOID</arg>
<arg name="uSizeStruct">UINT    </arg>
<arg name="szFile">LPCSTR</arg>
</function>
<function name="WritePrivateProfileStructW" ret="BOOL" convention="__stdcall">
<arg name="lpszSection">LPCWSTR</arg>
<arg name="lpszKey">LPCWSTR</arg>
<arg name="lpStruct">LPVOID</arg>
<arg name="uSizeStruct">UINT    </arg>
<arg name="szFile">LPCWSTR</arg>
</function>
<function name="GetDriveTypeA" ret="UINT" convention="__stdcall">
<arg name="lpRootPathName">LPCSTR</arg>
</function>
<function name="GetDriveTypeW" ret="UINT" convention="__stdcall">
<arg name="lpRootPathName">LPCWSTR</arg>
</function>
<function name="GetSystemDirectoryA" ret="UINT" convention="__stdcall">
<arg name="lpBuffer">LPSTR</arg>
<arg name="uSize">UINT</arg>
</function>
<function name="GetSystemDirectoryW" ret="UINT" convention="__stdcall">
<arg name="lpBuffer">LPWSTR</arg>
<arg name="uSize">UINT</arg>
</function>
<function name="GetTempPathA" ret="DWORD" convention="__stdcall">
<arg name="nBufferLength">DWORD</arg>
<arg name="lpBuffer">LPSTR</arg>
</function>
<function name="GetTempPathW" ret="DWORD" convention="__stdcall">
<arg name="nBufferLength">DWORD</arg>
<arg name="lpBuffer">LPWSTR</arg>
</function>
<function name="GetTempFileNameA" ret="UINT" convention="__stdcall">
<arg name="lpPathName">LPCSTR</arg>
<arg name="lpPrefixString">LPCSTR</arg>
<arg name="uUnique">UINT</arg>
<arg name="lpTempFileName">LPSTR</arg>
</function>
<function name="GetTempFileNameW" ret="UINT" convention="__stdcall">
<arg name="lpPathName">LPCWSTR</arg>
<arg name="lpPrefixString">LPCWSTR</arg>
<arg name="uUnique">UINT</arg>
<arg name="lpTempFileName">LPWSTR</arg>
</function>

<function name="GetWindowsDirectoryA" ret="UINT" convention="__stdcall">
<arg name="lpBuffer">LPSTR</arg>
<arg name="uSize">UINT</arg>
</function>
<function name="GetWindowsDirectoryW" ret="UINT" convention="__stdcall">
<arg name="lpBuffer">LPWSTR</arg>
<arg name="uSize">UINT</arg>
</function>
<function name="GetSystemWindowsDirectoryA" ret="UINT" convention="__stdcall">
<arg name="lpBuffer">LPSTR</arg>
<arg name="uSize">UINT</arg>
</function>
<function name="GetSystemWindowsDirectoryW" ret="UINT" convention="__stdcall">
<arg name="lpBuffer">LPWSTR</arg>
<arg name="uSize">UINT</arg>
</function>
<function name="GetSystemWow64DirectoryA" ret="UINT" convention="__stdcall">
<arg name="lpBuffer">LPSTR</arg>
<arg name="uSize">UINT</arg>
</function>
<function name="GetSystemWow64DirectoryW" ret="UINT" convention="__stdcall">
<arg name="lpBuffer">LPWSTR</arg>
<arg name="uSize">UINT</arg>
</function>
  <function name="Wow64EnableWow64FsRedirection" ret="BOOLEAN" convention="__stdcall">
<arg name="Wow64FsEnableRedirection">BOOLEAN</arg>
</function>

<function name="Wow64DisableWow64FsRedirection" ret="BOOL" convention="__stdcall">
<arg name="OldValue">PVOID *</arg>
</function>

<function name="Wow64RevertWow64FsRedirection" ret="BOOL" convention="__stdcall">
<arg name="OlValue">PVOID</arg>
</function>
  typedef UINT (__stdcall* PGET_SYSTEM_WOW64_DIRECTORY_A)( LPSTR lpBuffer,  UINT uSize);
  typedef UINT (__stdcall* PGET_SYSTEM_WOW64_DIRECTORY_W)( LPWSTR lpBuffer,  UINT uSize);

<function name="SetCurrentDirectoryA" ret="BOOL" convention="__stdcall">
<arg name="lpPathName">LPCSTR</arg>
</function>
<function name="SetCurrentDirectoryW" ret="BOOL" convention="__stdcall">
<arg name="lpPathName">LPCWSTR</arg>
</function>

<function name="GetCurrentDirectoryA" ret="DWORD" convention="__stdcall">
<arg name="nBufferLength">DWORD</arg>
<arg name="lpBuffer">LPSTR</arg>
</function>
<function name="GetCurrentDirectoryW" ret="DWORD" convention="__stdcall">
<arg name="nBufferLength">DWORD</arg>
<arg name="lpBuffer">LPWSTR</arg>
</function>
<function name="SetDllDirectoryA" ret="BOOL" convention="__stdcall">
<arg name="lpPathName">LPCSTR</arg>
</function>
<function name="SetDllDirectoryW" ret="BOOL" convention="__stdcall">
<arg name="lpPathName">LPCWSTR</arg>
</function>
<function name="GetDllDirectoryA" ret="DWORD" convention="__stdcall">
<arg name="nBufferLength">DWORD</arg>
<arg name="lpBuffer">LPSTR</arg>
</function>
<function name="GetDllDirectoryW" ret="DWORD" convention="__stdcall">
<arg name="nBufferLength">DWORD</arg>
<arg name="lpBuffer">LPWSTR</arg>
</function>
<function name="GetDiskFreeSpaceA" ret="BOOL" convention="__stdcall">
<arg name="lpRootPathName">LPCSTR</arg>
<arg name="lpSectorsPerCluster">LPDWORD</arg>
<arg name="lpBytesPerSector">LPDWORD</arg>
<arg name="lpNumberOfFreeClusters">LPDWORD</arg>
<arg name="lpTotalNumberOfClusters">LPDWORD</arg>
</function>
<function name="GetDiskFreeSpaceW" ret="BOOL" convention="__stdcall">
<arg name="lpRootPathName">LPCWSTR</arg>
<arg name="lpSectorsPerCluster">LPDWORD</arg>
<arg name="lpBytesPerSector">LPDWORD</arg>
<arg name="lpNumberOfFreeClusters">LPDWORD</arg>
<arg name="lpTotalNumberOfClusters">LPDWORD</arg>
</function>
<function name="GetDiskFreeSpaceExA" ret="BOOL" convention="__stdcall">
<arg name="lpDirectoryName">LPCSTR</arg>
<arg name="lpFreeBytesAvailableToCaller">PULARGE_INTEGER</arg>
<arg name="lpTotalNumberOfBytes">PULARGE_INTEGER</arg>
<arg name="lpTotalNumberOfFreeBytes">PULARGE_INTEGER</arg>
</function>
<function name="GetDiskFreeSpaceExW" ret="BOOL" convention="__stdcall">
<arg name="lpDirectoryName">LPCWSTR</arg>
<arg name="lpFreeBytesAvailableToCaller">PULARGE_INTEGER</arg>
<arg name="lpTotalNumberOfBytes">PULARGE_INTEGER</arg>
<arg name="lpTotalNumberOfFreeBytes">PULARGE_INTEGER</arg>
</function>
<function name="CreateDirectoryA" ret="BOOL" convention="__stdcall">
<arg name="lpPathName">LPCSTR</arg>
<arg name="lpSecurityAttributes">LPSECURITY_ATTRIBUTES</arg>
</function>
<function name="CreateDirectoryW" ret="BOOL" convention="__stdcall">
<arg name="lpPathName">LPCWSTR</arg>
<arg name="lpSecurityAttributes">LPSECURITY_ATTRIBUTES</arg>
</function>

<function name="CreateDirectoryExA" ret="BOOL" convention="__stdcall">
<arg name="lpTemplateDirectory">LPCSTR</arg>
<arg name="lpNewDirectory">LPCSTR</arg>
<arg name="lpSecurityAttributes">LPSECURITY_ATTRIBUTES</arg>
</function>
<function name="CreateDirectoryExW" ret="BOOL" convention="__stdcall">
<arg name="lpTemplateDirectory">LPCWSTR</arg>
<arg name="lpNewDirectory">LPCWSTR</arg>
<arg name="lpSecurityAttributes">LPSECURITY_ATTRIBUTES</arg>
</function>
<function name="CreateDirectoryTransactedA" ret="BOOL" convention="__stdcall">
<arg name="lpTemplateDirectory">LPCSTR</arg>
<arg name="lpNewDirectory">LPCSTR</arg>
<arg name="lpSecurityAttributes">LPSECURITY_ATTRIBUTES</arg>
<arg name="hTransaction">HANDLE</arg>
</function>
<function name="CreateDirectoryTransactedW" ret="BOOL" convention="__stdcall">
<arg name="lpTemplateDirectory">LPCWSTR</arg>
<arg name="lpNewDirectory">LPCWSTR</arg>
<arg name="lpSecurityAttributes">LPSECURITY_ATTRIBUTES</arg>
<arg name="hTransaction">HANDLE</arg>
</function>
<function name="RemoveDirectoryA" ret="BOOL" convention="__stdcall">
<arg name="lpPathName">LPCSTR</arg>
</function>
<function name="RemoveDirectoryW" ret="BOOL" convention="__stdcall">
<arg name="lpPathName">LPCWSTR</arg>
</function>
<function name="RemoveDirectoryTransactedA" ret="BOOL" convention="__stdcall">
<arg name="lpPathName">LPCSTR</arg>
<arg name="hTransaction">HANDLE</arg>
</function>
<function name="RemoveDirectoryTransactedW" ret="BOOL" convention="__stdcall">
<arg name="lpPathName">LPCWSTR</arg>
<arg name="hTransaction">HANDLE</arg>
</function>
<function name="GetFullPathNameA" ret="DWORD" convention="__stdcall">
<arg name="lpFileName">LPCSTR</arg>
<arg name="nBufferLength">DWORD</arg>
<arg name="lpBuffer">LPSTR</arg>
<arg name="lpFilePart">LPSTR *</arg>
</function>
<function name="GetFullPathNameW" ret="DWORD" convention="__stdcall">
<arg name="lpFileName">LPCWSTR</arg>
<arg name="nBufferLength">DWORD</arg>
<arg name="lpBuffer">LPWSTR</arg>
<arg name="lpFilePart">LPWSTR *</arg>
</function>
<function name="GetFullPathNameTransactedA" ret="DWORD" convention="__stdcall">
<arg name="lpFileName">LPCSTR</arg>
<arg name="nBufferLength">DWORD</arg>
<arg name="lpBuffer">LPSTR</arg>

  LPSTR *lpFilePart,
<arg name="hTransaction">HANDLE</arg>
</function>
<function name="GetFullPathNameTransactedW" ret="DWORD" convention="__stdcall">
<arg name="lpFileName">LPCWSTR</arg>
<arg name="nBufferLength">DWORD</arg>
<arg name="lpBuffer">LPWSTR</arg>

  LPWSTR *lpFilePart,
<arg name="hTransaction">HANDLE</arg>
</function>

<function name="DefineDosDeviceA" ret="BOOL" convention="__stdcall">
<arg name="dwFlags">DWORD</arg>
<arg name="lpDeviceName">LPCSTR</arg>
<arg name="lpTargetPath">LPCSTR</arg>
</function>
<function name="DefineDosDeviceW" ret="BOOL" convention="__stdcall">
<arg name="dwFlags">DWORD</arg>
<arg name="lpDeviceName">LPCWSTR</arg>
<arg name="lpTargetPath">LPCWSTR</arg>
</function>
<function name="QueryDosDeviceA" ret="DWORD" convention="__stdcall">
<arg name="lpDeviceName">LPCSTR</arg>
<arg name="lpTargetPath">LPSTR</arg>
<arg name="ucchMax">DWORD</arg>
</function>
<function name="QueryDosDeviceW" ret="DWORD" convention="__stdcall">
<arg name="lpDeviceName">LPCWSTR</arg>
<arg name="lpTargetPath">LPWSTR</arg>
<arg name="ucchMax">DWORD</arg>
</function>
<function name="CreateFileA" ret="HANDLE" convention="__stdcall">
<arg name="lpFileName">LPCSTR</arg>
<arg name="dwDesiredAccess">DWORD</arg>
<arg name="dwShareMode">DWORD</arg>
<arg name="lpSecurityAttributes">LPSECURITY_ATTRIBUTES</arg>
<arg name="dwCreationDisposition">DWORD</arg>
<arg name="dwFlagsAndAttributes">DWORD</arg>
<arg name="hTemplateFile">HANDLE</arg>
</function>
<function name="CreateFileW" ret="HANDLE" convention="__stdcall">
<arg name="lpFileName">LPCWSTR</arg>
<arg name="dwDesiredAccess">DWORD</arg>
<arg name="dwShareMode">DWORD</arg>
<arg name="lpSecurityAttributes">LPSECURITY_ATTRIBUTES</arg>
<arg name="dwCreationDisposition">DWORD</arg>
<arg name="dwFlagsAndAttributes">DWORD</arg>
<arg name="hTemplateFile">HANDLE</arg>
</function>
<function name="CreateFileTransactedA" ret="HANDLE" convention="__stdcall">
<arg name="lpFileName">LPCSTR</arg>
<arg name="dwDesiredAccess">DWORD</arg>
<arg name="dwShareMode">DWORD</arg>
<arg name="lpSecurityAttributes">LPSECURITY_ATTRIBUTES</arg>
<arg name="dwCreationDisposition">DWORD</arg>
<arg name="dwFlagsAndAttributes">DWORD</arg>
<arg name="hTemplateFile">HANDLE</arg>
<arg name="hTransaction">HANDLE</arg>
<arg name="pusMiniVersion">PUSHORT</arg>
<arg name="lpExtendedParameter">PVOID </arg>
</function>
<function name="CreateFileTransactedW" ret="HANDLE" convention="__stdcall">
<arg name="lpFileName">LPCWSTR</arg>
<arg name="dwDesiredAccess">DWORD</arg>
<arg name="dwShareMode">DWORD</arg>
<arg name="lpSecurityAttributes">LPSECURITY_ATTRIBUTES</arg>
<arg name="dwCreationDisposition">DWORD</arg>
<arg name="dwFlagsAndAttributes">DWORD</arg>
<arg name="hTemplateFile">HANDLE</arg>
<arg name="hTransaction">HANDLE</arg>
<arg name="pusMiniVersion">PUSHORT</arg>
<arg name="lpExtendedParameter">PVOID </arg>
</function>
<function name="ReOpenFile" ret="HANDLE" convention="__stdcall">
<arg name="hOriginalFile">HANDLE </arg>
<arg name="dwDesiredAccess">DWORD  </arg>
<arg name="dwShareMode">DWORD  </arg>
<arg name="dwFlagsAndAttributes">DWORD  </arg>
</function>
<function name="SetFileAttributesA" ret="BOOL" convention="__stdcall">
<arg name="lpFileName">LPCSTR</arg>
<arg name="dwFileAttributes">DWORD</arg>
</function>
<function name="SetFileAttributesW" ret="BOOL" convention="__stdcall">
<arg name="lpFileName">LPCWSTR</arg>
<arg name="dwFileAttributes">DWORD</arg>
</function>
<function name="GetFileAttributesA" ret="DWORD" convention="__stdcall">
<arg name="lpFileName">LPCSTR</arg>
</function>
<function name="GetFileAttributesW" ret="DWORD" convention="__stdcall">
<arg name="lpFileName">LPCWSTR</arg>
</function>
<function name="SetFileAttributesTransactedA" ret="BOOL" convention="__stdcall">
<arg name="lpFileName">LPCSTR</arg>
<arg name="dwFileAttributes">DWORD</arg>
<arg name="hTransaction">HANDLE</arg>
</function>
<function name="SetFileAttributesTransactedW" ret="BOOL" convention="__stdcall">
<arg name="lpFileName">LPCWSTR</arg>
<arg name="dwFileAttributes">DWORD</arg>
<arg name="hTransaction">HANDLE</arg>
</function>
  typedef enum _GET_FILEEX_INFO_LEVELS {
  GetFileExInfoStandard,
  GetFileExMaxInfoLevel
  } GET_FILEEX_INFO_LEVELS;
<function name="GetFileAttributesTransactedA" ret="BOOL" convention="__stdcall">
<arg name="lpFileName">LPCSTR</arg>
<arg name="fInfoLevelId">GET_FILEEX_INFO_LEVELS</arg>
<arg name="lpFileInformation">LPVOID</arg>
<arg name="hTransaction">HANDLE</arg>
</function>
<function name="GetFileAttributesTransactedW" ret="BOOL" convention="__stdcall">
<arg name="lpFileName">LPCWSTR</arg>
<arg name="fInfoLevelId">GET_FILEEX_INFO_LEVELS</arg>
<arg name="lpFileInformation">LPVOID</arg>
<arg name="hTransaction">HANDLE</arg>
</function>
<function name="GetFileAttributesExA" ret="BOOL" convention="__stdcall">
<arg name="lpFileName">LPCSTR</arg>
<arg name="fInfoLevelId">GET_FILEEX_INFO_LEVELS</arg>
<arg name="lpFileInformation">LPVOID</arg>
</function>
<function name="GetFileAttributesExW" ret="BOOL" convention="__stdcall">
<arg name="lpFileName">LPCWSTR</arg>
<arg name="fInfoLevelId">GET_FILEEX_INFO_LEVELS</arg>
<arg name="lpFileInformation">LPVOID</arg>
</function>
<function name="GetCompressedFileSizeA" ret="DWORD" convention="__stdcall">
<arg name="lpFileName">LPCSTR</arg>
<arg name="lpFileSizeHigh">LPDWORD </arg>
</function>
<function name="GetCompressedFileSizeW" ret="DWORD" convention="__stdcall">
<arg name="lpFileName">LPCWSTR</arg>
<arg name="lpFileSizeHigh">LPDWORD </arg>
</function>
<function name="GetCompressedFileSizeTransactedA" ret="DWORD" convention="__stdcall">
<arg name="lpFileName">LPCSTR</arg>
<arg name="lpFileSizeHigh">LPDWORD </arg>
<arg name="hTransaction">HANDLE</arg>
</function>
<function name="GetCompressedFileSizeTransactedW" ret="DWORD" convention="__stdcall">
<arg name="lpFileName">LPCWSTR</arg>
<arg name="lpFileSizeHigh">LPDWORD </arg>
<arg name="hTransaction">HANDLE</arg>
</function>
<function name="DeleteFileA" ret="BOOL" convention="__stdcall">
<arg name="lpFileName">LPCSTR</arg>
</function>
<function name="DeleteFileW" ret="BOOL" convention="__stdcall">
<arg name="lpFileName">LPCWSTR</arg>
</function>
<function name="DeleteFileTransactedA" ret="BOOL" convention="__stdcall">
<arg name="lpFileName">LPCSTR</arg>
<arg name="hTransaction">HANDLE</arg>
</function>
<function name="DeleteFileTransactedW" ret="BOOL" convention="__stdcall">
<arg name="lpFileName">LPCWSTR</arg>
<arg name="hTransaction">HANDLE</arg>
</function>

<function name="CheckNameLegalDOS8Dot3A" ret="BOOL" convention="__stdcall">
<arg name="lpName">LPCSTR</arg>
<arg name="lpOemName">LPSTR</arg>
<arg name="OemNameSize">DWORD</arg>

  PBOOL pbNameContainsSpaces ,
<arg name="pbNameLegal">PBOOL</arg>
</function>
<function name="CheckNameLegalDOS8Dot3W" ret="BOOL" convention="__stdcall">
<arg name="lpName">LPCWSTR</arg>
<arg name="lpOemName">LPSTR</arg>
<arg name="OemNameSize">DWORD</arg>

  PBOOL pbNameContainsSpaces ,
<arg name="pbNameLegal">PBOOL</arg>
</function>

  typedef enum _FINDEX_INFO_LEVELS {
  FindExInfoStandard,
  FindExInfoMaxInfoLevel
  } FINDEX_INFO_LEVELS;

  typedef enum _FINDEX_SEARCH_OPS {
  FindExSearchNameMatch,
  FindExSearchLimitToDirectories,
  FindExSearchLimitToDevices,
  FindExSearchMaxSearchOp
  } FINDEX_SEARCH_OPS;
<function name="FindFirstFileExA" ret="HANDLE" convention="__stdcall">
<arg name="lpFileName">LPCSTR</arg>
<arg name="fInfoLevelId">FINDEX_INFO_LEVELS</arg>
<arg name="lpFindFileData">LPVOID</arg>
<arg name="fSearchOp">FINDEX_SEARCH_OPS</arg>
<arg name="lpSearchFilter">LPVOID</arg>
<arg name="dwAdditionalFlags">DWORD</arg>
</function>
<function name="FindFirstFileExW" ret="HANDLE" convention="__stdcall">
<arg name="lpFileName">LPCWSTR</arg>
<arg name="fInfoLevelId">FINDEX_INFO_LEVELS</arg>
<arg name="lpFindFileData">LPVOID</arg>
<arg name="fSearchOp">FINDEX_SEARCH_OPS</arg>
<arg name="lpSearchFilter">LPVOID</arg>
<arg name="dwAdditionalFlags">DWORD</arg>
</function>
<function name="FindFirstFileTransactedA" ret="HANDLE" convention="__stdcall">
<arg name="lpFileName">LPCSTR</arg>
<arg name="fInfoLevelId">FINDEX_INFO_LEVELS</arg>
<arg name="lpFindFileData">LPVOID</arg>
<arg name="fSearchOp">FINDEX_SEARCH_OPS</arg>
<arg name="lpSearchFilter">LPVOID</arg>
<arg name="dwAdditionalFlags">DWORD</arg>
<arg name="hTransaction">HANDLE</arg>
</function>
<function name="FindFirstFileTransactedW" ret="HANDLE" convention="__stdcall">
<arg name="lpFileName">LPCWSTR</arg>
<arg name="fInfoLevelId">FINDEX_INFO_LEVELS</arg>
<arg name="lpFindFileData">LPVOID</arg>
<arg name="fSearchOp">FINDEX_SEARCH_OPS</arg>
<arg name="lpSearchFilter">LPVOID</arg>
<arg name="dwAdditionalFlags">DWORD</arg>
<arg name="hTransaction">HANDLE</arg>
</function>
<function name="FindFirstFileA" ret="HANDLE" convention="__stdcall">
<arg name="lpFileName">LPCSTR</arg>
<arg name="lpFindFileData">LPWIN32_FIND_DATAA</arg>
</function>
<function name="FindFirstFileW" ret="HANDLE" convention="__stdcall">
<arg name="lpFileName">LPCWSTR</arg>
<arg name="lpFindFileData">LPWIN32_FIND_DATAW</arg>
</function>
<function name="FindNextFileA" ret="BOOL" convention="__stdcall">
<arg name="hFindFile">HANDLE</arg>
<arg name="lpFindFileData">LPWIN32_FIND_DATAA</arg>
</function>
<function name="FindNextFileW" ret="BOOL" convention="__stdcall">
<arg name="hFindFile">HANDLE</arg>
<arg name="lpFindFileData">LPWIN32_FIND_DATAW</arg>
</function>
<function name="SearchPathA" ret="DWORD" convention="__stdcall">
<arg name="lpPath">LPCSTR</arg>
<arg name="lpFileName">LPCSTR</arg>
<arg name="lpExtension">LPCSTR</arg>
<arg name="nBufferLength">DWORD</arg>
<arg name="lpBuffer">LPSTR</arg>
<arg name="lpFilePart">LPSTR *</arg>
</function>
<function name="SearchPathW" ret="DWORD" convention="__stdcall">
<arg name="lpPath">LPCWSTR</arg>
<arg name="lpFileName">LPCWSTR</arg>
<arg name="lpExtension">LPCWSTR</arg>
<arg name="nBufferLength">DWORD</arg>
<arg name="lpBuffer">LPWSTR</arg>
<arg name="lpFilePart">LPWSTR *</arg>
</function>
<function name="CopyFileA" ret="BOOL" convention="__stdcall">
<arg name="lpExistingFileName">LPCSTR</arg>
<arg name="lpNewFileName">LPCSTR</arg>
<arg name="bFailIfExists">BOOL</arg>
</function>
<function name="CopyFileW" ret="BOOL" convention="__stdcall">
<arg name="lpExistingFileName">LPCWSTR</arg>
<arg name="lpNewFileName">LPCWSTR</arg>
<arg name="bFailIfExists">BOOL</arg>
</function>

  typedef
  DWORD
  (__stdcall *LPPROGRESS_ROUTINE)(
  LARGE_INTEGER TotalFileSize,
  LARGE_INTEGER TotalBytesTransferred,
  LARGE_INTEGER StreamSize,
  LARGE_INTEGER StreamBytesTransferred,
  DWORD dwStreamNumber,
  DWORD dwCallbackReason,
  HANDLE hSourceFile,
  HANDLE hDestinationFile,
<arg name="lpData">LPVOID</arg>
</function>

<function name="CopyFileExA" ret="BOOL" convention="__stdcall">
<arg name="lpExistingFileName">LPCSTR</arg>
<arg name="lpNewFileName">LPCSTR</arg>
<arg name="lpProgressRoutine">LPPROGRESS_ROUTINE</arg>
<arg name="lpData">LPVOID</arg>
<arg name="pbCancel">LPBOOL</arg>
<arg name="dwCopyFlags">DWORD</arg>
</function>
<function name="CopyFileExW" ret="BOOL" convention="__stdcall">
<arg name="lpExistingFileName">LPCWSTR</arg>
<arg name="lpNewFileName">LPCWSTR</arg>
<arg name="lpProgressRoutine">LPPROGRESS_ROUTINE</arg>
<arg name="lpData">LPVOID</arg>
<arg name="pbCancel">LPBOOL</arg>
<arg name="dwCopyFlags">DWORD</arg>
</function>
<function name="CopyFileTransactedA" ret="BOOL" convention="__stdcall">
<arg name="lpExistingFileName">LPCSTR</arg>
<arg name="lpNewFileName">LPCSTR</arg>
<arg name="lpProgressRoutine">LPPROGRESS_ROUTINE</arg>
<arg name="lpData">LPVOID</arg>
<arg name="pbCancel">LPBOOL</arg>
<arg name="dwCopyFlags">DWORD</arg>
<arg name="hTransaction">HANDLE</arg>
</function>
<function name="CopyFileTransactedW" ret="BOOL" convention="__stdcall">
<arg name="lpExistingFileName">LPCWSTR</arg>
<arg name="lpNewFileName">LPCWSTR</arg>
<arg name="lpProgressRoutine">LPPROGRESS_ROUTINE</arg>
<arg name="lpData">LPVOID</arg>
<arg name="pbCancel">LPBOOL</arg>
<arg name="dwCopyFlags">DWORD</arg>
<arg name="hTransaction">HANDLE</arg>
</function>

<function name="MoveFileA" ret="BOOL" convention="__stdcall">
<arg name="lpExistingFileName">LPCSTR</arg>
<arg name="lpNewFileName">LPCSTR</arg>
</function>
<function name="MoveFileW" ret="BOOL" convention="__stdcall">
<arg name="lpExistingFileName">LPCWSTR</arg>
<arg name="lpNewFileName">LPCWSTR</arg>
</function>

<function name="MoveFileExA" ret="BOOL" convention="__stdcall">
<arg name="lpExistingFileName">LPCSTR</arg>
<arg name="lpNewFileName">LPCSTR</arg>
<arg name="dwFlags">DWORD   </arg>
</function>
<function name="MoveFileExW" ret="BOOL" convention="__stdcall">
<arg name="lpExistingFileName">LPCWSTR</arg>
<arg name="lpNewFileName">LPCWSTR</arg>
<arg name="dwFlags">DWORD   </arg>
</function>
<function name="MoveFileWithProgressA" ret="BOOL" convention="__stdcall">
<arg name="lpExistingFileName">LPCSTR</arg>
<arg name="lpNewFileName">LPCSTR</arg>
<arg name="lpProgressRoutine">LPPROGRESS_ROUTINE</arg>
<arg name="lpData">LPVOID</arg>
<arg name="dwFlags">DWORD</arg>
</function>
<function name="MoveFileWithProgressW" ret="BOOL" convention="__stdcall">
<arg name="lpExistingFileName">LPCWSTR</arg>
<arg name="lpNewFileName">LPCWSTR</arg>
<arg name="lpProgressRoutine">LPPROGRESS_ROUTINE</arg>
<arg name="lpData">LPVOID</arg>
<arg name="dwFlags">DWORD</arg>
</function>
<function name="MoveFileTransactedA" ret="BOOL" convention="__stdcall">
<arg name="lpExistingFileName">LPCSTR</arg>
<arg name="lpNewFileName">LPCSTR</arg>
<arg name="lpProgressRoutine">LPPROGRESS_ROUTINE</arg>
<arg name="lpData">LPVOID</arg>
<arg name="dwFlags">DWORD</arg>
<arg name="hTransaction">HANDLE</arg>
</function>
<function name="MoveFileTransactedW" ret="BOOL" convention="__stdcall">
<arg name="lpExistingFileName">LPCWSTR</arg>
<arg name="lpNewFileName">LPCWSTR</arg>
<arg name="lpProgressRoutine">LPPROGRESS_ROUTINE</arg>
<arg name="lpData">LPVOID</arg>
<arg name="dwFlags">DWORD</arg>
<arg name="hTransaction">HANDLE</arg>
</function>

<function name="ReplaceFileA" ret="BOOL" convention="__stdcall">
<arg name="lpReplacedFileName">LPCSTR </arg>
<arg name="lpReplacementFileName">LPCSTR </arg>
<arg name="lpBackupFileName">LPCSTR </arg>
<arg name="dwReplaceFlags">DWORD  </arg>
<arg name="lpExclude">LPVOID </arg>
<arg name="lpReserved">LPVOID </arg>
</function>
<function name="ReplaceFileW" ret="BOOL" convention="__stdcall">
<arg name="lpReplacedFileName">LPCWSTR</arg>
<arg name="lpReplacementFileName">LPCWSTR</arg>
<arg name="lpBackupFileName">LPCWSTR</arg>
<arg name="dwReplaceFlags">DWORD  </arg>
<arg name="lpExclude">LPVOID </arg>
<arg name="lpReserved">LPVOID </arg>
</function>
<function name="CreateHardLinkA" ret="BOOL" convention="__stdcall">
<arg name="lpFileName">LPCSTR</arg>
<arg name="lpExistingFileName">LPCSTR</arg>
<arg name="lpSecurityAttributes">LPSECURITY_ATTRIBUTES</arg>
</function>
<function name="CreateHardLinkW" ret="BOOL" convention="__stdcall">
<arg name="lpFileName">LPCWSTR</arg>
<arg name="lpExistingFileName">LPCWSTR</arg>
<arg name="lpSecurityAttributes">LPSECURITY_ATTRIBUTES</arg>
</function>
<function name="CreateHardLinkTransactedA" ret="BOOL" convention="__stdcall">
<arg name="lpFileName">LPCSTR</arg>
<arg name="lpExistingFileName">LPCSTR</arg>
<arg name="lpSecurityAttributes">LPSECURITY_ATTRIBUTES</arg>
<arg name="hTransaction">HANDLE</arg>
</function>
<function name="CreateHardLinkTransactedW" ret="BOOL" convention="__stdcall">
<arg name="lpFileName">LPCWSTR</arg>
<arg name="lpExistingFileName">LPCWSTR</arg>
<arg name="lpSecurityAttributes">LPSECURITY_ATTRIBUTES</arg>
<arg name="hTransaction">HANDLE</arg>
</function>
  typedef enum _STREAM_INFO_LEVELS {

  FindStreamInfoStandard,
  FindStreamInfoMaxInfoLevel

  } STREAM_INFO_LEVELS;

<struct name="_WIN32_FIND_STREAM_DATA">

  LARGE_INTEGER StreamSize;
  WCHAR cStreamName[ 260 + 36 ];

  } WIN32_FIND_STREAM_DATA, *PWIN32_FIND_STREAM_DATA;
  HANDLE
<function name="FindFirstStreamW" ret="" convention="__stdcall">
<arg name="lpFileName">LPCWSTR</arg>
<arg name="InfoLevel">STREAM_INFO_LEVELS</arg>
<arg name="lpFindStreamData">LPVOID</arg>
<arg name="dwFlags">DWORD</arg>
</function>

  BOOL
<function name="FindNextStreamW" ret="" convention="__stdcall">
<arg name="hFindStream">HANDLE</arg>
<arg name="lpFindStreamData">LPVOID</arg>
</function>

<function name="FindFirstFileNameW" ret="HANDLE" convention="__stdcall">
<arg name="lpFileName">LPCWSTR</arg>
<arg name="dwFlags">DWORD</arg>
<arg name="StringLength">LPDWORD</arg>
<arg name="LinkName">PWCHAR</arg>
</function>

<function name="FindNextFileNameW" ret="BOOL" convention="__stdcall">
<arg name="hFindStream">HANDLE</arg>
<arg name="StringLength">LPDWORD</arg>
<arg name="LinkName">PWCHAR</arg>
</function>

<function name="FindFirstFileNameTransactedW" ret="HANDLE" convention="__stdcall">
<arg name="lpFileName">LPCWSTR</arg>
<arg name="dwFlags">DWORD</arg>
<arg name="StringLength">LPDWORD</arg>
<arg name="LinkName">PWCHAR</arg>
<arg name="hTransaction">HANDLE</arg>
</function>
<function name="CreateNamedPipeA" ret="HANDLE" convention="__stdcall">
<arg name="lpName">LPCSTR</arg>
<arg name="dwOpenMode">DWORD</arg>
<arg name="dwPipeMode">DWORD</arg>
<arg name="nMaxInstances">DWORD</arg>
<arg name="nOutBufferSize">DWORD</arg>
<arg name="nInBufferSize">DWORD</arg>
<arg name="nDefaultTimeOut">DWORD</arg>
<arg name="lpSecurityAttributes">LPSECURITY_ATTRIBUTES</arg>
</function>
<function name="CreateNamedPipeW" ret="HANDLE" convention="__stdcall">
<arg name="lpName">LPCWSTR</arg>
<arg name="dwOpenMode">DWORD</arg>
<arg name="dwPipeMode">DWORD</arg>
<arg name="nMaxInstances">DWORD</arg>
<arg name="nOutBufferSize">DWORD</arg>
<arg name="nInBufferSize">DWORD</arg>
<arg name="nDefaultTimeOut">DWORD</arg>
<arg name="lpSecurityAttributes">LPSECURITY_ATTRIBUTES</arg>
</function>
<function name="GetNamedPipeHandleStateA" ret="BOOL" convention="__stdcall">
<arg name="hNamedPipe">HANDLE</arg>
<arg name="lpState">LPDWORD</arg>
<arg name="lpCurInstances">LPDWORD</arg>
<arg name="lpMaxCollectionCount">LPDWORD</arg>
<arg name="lpCollectDataTimeout">LPDWORD</arg>
<arg name="lpUserName">LPSTR</arg>
<arg name="nMaxUserNameSize">DWORD</arg>
</function>
<function name="GetNamedPipeHandleStateW" ret="BOOL" convention="__stdcall">
<arg name="hNamedPipe">HANDLE</arg>
<arg name="lpState">LPDWORD</arg>
<arg name="lpCurInstances">LPDWORD</arg>
<arg name="lpMaxCollectionCount">LPDWORD</arg>
<arg name="lpCollectDataTimeout">LPDWORD</arg>
<arg name="lpUserName">LPWSTR</arg>
<arg name="nMaxUserNameSize">DWORD</arg>
</function>
<function name="CallNamedPipeA" ret="BOOL" convention="__stdcall">
<arg name="lpNamedPipeName">LPCSTR</arg>
<arg name="lpInBuffer">LPVOID</arg>
<arg name="nInBufferSize">DWORD</arg>
<arg name="lpOutBuffer">LPVOID</arg>
<arg name="nOutBufferSize">DWORD</arg>
<arg name="lpBytesRead">LPDWORD</arg>
<arg name="nTimeOut">DWORD</arg>
</function>
<function name="CallNamedPipeW" ret="BOOL" convention="__stdcall">
<arg name="lpNamedPipeName">LPCWSTR</arg>
<arg name="lpInBuffer">LPVOID</arg>
<arg name="nInBufferSize">DWORD</arg>
<arg name="lpOutBuffer">LPVOID</arg>
<arg name="nOutBufferSize">DWORD</arg>
<arg name="lpBytesRead">LPDWORD</arg>
<arg name="nTimeOut">DWORD</arg>
</function>
<function name="WaitNamedPipeA" ret="BOOL" convention="__stdcall">
<arg name="lpNamedPipeName">LPCSTR</arg>
<arg name="nTimeOut">DWORD</arg>
</function>
<function name="WaitNamedPipeW" ret="BOOL" convention="__stdcall">
<arg name="lpNamedPipeName">LPCWSTR</arg>
<arg name="nTimeOut">DWORD</arg>
</function>
  typedef enum {
  PipeAttribute,
  PipeConnectionAttribute,
  PipeHandleAttribute
  } PIPE_ATTRIBUTE_TYPE;

<function name="GetNamedPipeAttribute" ret="BOOL" convention="__stdcall">
<arg name="Pipe">HANDLE</arg>
<arg name="AttributeType">PIPE_ATTRIBUTE_TYPE</arg>
<arg name="AttributeName">PSTR</arg>
<arg name="AttributeValue">PVOID</arg>
<arg name="AttributeValueLength">PSIZE_T</arg>
</function>

<function name="SetNamedPipeAttribute" ret="BOOL" convention="__stdcall">
<arg name="Pipe">HANDLE</arg>
<arg name="AttributeType">PIPE_ATTRIBUTE_TYPE</arg>
<arg name="AttributeName">PSTR</arg>
<arg name="AttributeValue">PVOID</arg>
<arg name="AttributeValueLength">SIZE_T</arg>
</function>

<function name="GetNamedPipeClientComputerNameA" ret="BOOL" convention="__stdcall">
<arg name="Pipe">HANDLE</arg>
<arg name="ClientComputerName">LPSTR</arg>
<arg name="ClientComputerNameLength">ULONG</arg>
</function>
<function name="GetNamedPipeClientComputerNameW" ret="BOOL" convention="__stdcall">
<arg name="Pipe">HANDLE</arg>
<arg name="ClientComputerName">LPWSTR</arg>
<arg name="ClientComputerNameLength">ULONG</arg>
</function>
<function name="GetNamedPipeClientProcessId" ret="BOOL" convention="__stdcall">
<arg name="Pipe">HANDLE</arg>
<arg name="ClientProcessId">PULONG</arg>
</function>

<function name="GetNamedPipeClientSessionId" ret="BOOL" convention="__stdcall">
<arg name="Pipe">HANDLE</arg>
<arg name="ClientSessionId">PULONG</arg>
</function>

<function name="GetNamedPipeServerProcessId" ret="BOOL" convention="__stdcall">
<arg name="Pipe">HANDLE</arg>
<arg name="ServerProcessId">PULONG</arg>
</function>

<function name="GetNamedPipeServerSessionId" ret="BOOL" convention="__stdcall">
<arg name="Pipe">HANDLE</arg>
<arg name="ServerSessionId">PULONG</arg>
</function>

<function name="SetVolumeLabelA" ret="BOOL" convention="__stdcall">
<arg name="lpRootPathName">LPCSTR</arg>
<arg name="lpVolumeName">LPCSTR</arg>
</function>
<function name="SetVolumeLabelW" ret="BOOL" convention="__stdcall">
<arg name="lpRootPathName">LPCWSTR</arg>
<arg name="lpVolumeName">LPCWSTR</arg>
</function>
<function name="SetFileApisToOEM" ret="void" convention="__stdcall"> void );

<function name="SetFileApisToANSI" ret="void" convention="__stdcall"> void );

<function name="AreFileApisANSI" ret="BOOL" convention="__stdcall"> void );

<function name="GetVolumeInformationA" ret="BOOL" convention="__stdcall">
<arg name="lpRootPathName">LPCSTR</arg>
<arg name="lpVolumeNameBuffer">LPSTR</arg>
<arg name="nVolumeNameSize">DWORD</arg>
<arg name="lpVolumeSerialNumber">LPDWORD</arg>
<arg name="lpMaximumComponentLength">LPDWORD</arg>
<arg name="lpFileSystemFlags">LPDWORD</arg>
<arg name="lpFileSystemNameBuffer">LPSTR</arg>
<arg name="nFileSystemNameSize">DWORD</arg>
</function>
<function name="GetVolumeInformationW" ret="BOOL" convention="__stdcall">
<arg name="lpRootPathName">LPCWSTR</arg>
<arg name="lpVolumeNameBuffer">LPWSTR</arg>
<arg name="nVolumeNameSize">DWORD</arg>
<arg name="lpVolumeSerialNumber">LPDWORD</arg>
<arg name="lpMaximumComponentLength">LPDWORD</arg>
<arg name="lpFileSystemFlags">LPDWORD</arg>
<arg name="lpFileSystemNameBuffer">LPWSTR</arg>
<arg name="nFileSystemNameSize">DWORD</arg>
</function>
<function name="GetVolumeInformationByHandleW" ret="BOOL" convention="__stdcall">
<arg name="hFile">HANDLE</arg>
<arg name="lpVolumeNameBuffer">LPWSTR</arg>
<arg name="nVolumeNameSize">DWORD</arg>
<arg name="lpVolumeSerialNumber">LPDWORD</arg>
<arg name="lpMaximumComponentLength">LPDWORD</arg>
<arg name="lpFileSystemFlags">LPDWORD</arg>
<arg name="lpFileSystemNameBuffer">LPWSTR</arg>
<arg name="nFileSystemNameSize">DWORD</arg>
</function>
<function name="CancelSynchronousIo" ret="BOOL" convention="__stdcall">
<arg name="hThread">HANDLE</arg>
</function>

<function name="CancelIoEx" ret="BOOL" convention="__stdcall">
<arg name="hFile">HANDLE</arg>
<arg name="lpOverlapped">LPOVERLAPPED</arg>
</function>

<function name="CancelIo" ret="BOOL" convention="__stdcall">
<arg name="hFile">HANDLE</arg>
</function>

<function name="SetFileBandwidthReservation" ret="BOOL" convention="__stdcall">
<arg name="hFile">HANDLE </arg>
<arg name="nPeriodMilliseconds">DWORD  </arg>
<arg name="nBytesPerPeriod">DWORD  </arg>
<arg name="bDiscardable">BOOL   </arg>
<arg name="lpTransferSize">LPDWORD</arg>
<arg name="lpNumOutstandingRequests">LPDWORD</arg>
</function>

<function name="GetFileBandwidthReservation" ret="BOOL" convention="__stdcall">
<arg name="hFile">HANDLE </arg>
<arg name="lpPeriodMilliseconds">LPDWORD</arg>
<arg name="lpBytesPerPeriod">LPDWORD</arg>
<arg name="pDiscardable">LPBOOL </arg>
<arg name="lpTransferSize">LPDWORD</arg>
<arg name="lpNumOutstandingRequests">LPDWORD</arg>
</function>
<function name="ClearEventLogA" ret="BOOL" convention="__stdcall">
<arg name="hEventLog">HANDLE</arg>
<arg name="lpBackupFileName">LPCSTR</arg>
</function>
<function name="ClearEventLogW" ret="BOOL" convention="__stdcall">
<arg name="hEventLog">HANDLE</arg>
<arg name="lpBackupFileName">LPCWSTR</arg>
</function>
<function name="BackupEventLogA" ret="BOOL" convention="__stdcall">
<arg name="hEventLog">HANDLE</arg>
<arg name="lpBackupFileName">LPCSTR</arg>
</function>
<function name="BackupEventLogW" ret="BOOL" convention="__stdcall">
<arg name="hEventLog">HANDLE</arg>
<arg name="lpBackupFileName">LPCWSTR</arg>
</function>
<function name="CloseEventLog" ret="BOOL" convention="__stdcall">
<arg name="hEventLog">HANDLE</arg>
</function>

<function name="DeregisterEventSource" ret="BOOL" convention="__stdcall">
<arg name="hEventLog">HANDLE</arg>
</function>

<function name="NotifyChangeEventLog" ret="BOOL" convention="__stdcall">
<arg name="hEventLog">HANDLE </arg>
<arg name="hEvent">HANDLE </arg>
</function>

<function name="GetNumberOfEventLogRecords" ret="BOOL" convention="__stdcall">
<arg name="hEventLog">HANDLE</arg>
<arg name="NumberOfRecords">PDWORD</arg>
</function>

<function name="GetOldestEventLogRecord" ret="BOOL" convention="__stdcall">
<arg name="hEventLog">HANDLE</arg>
<arg name="OldestRecord">PDWORD</arg>
</function>

<function name="OpenEventLogA" ret="HANDLE" convention="__stdcall">
<arg name="lpUNCServerName">LPCSTR</arg>
<arg name="lpSourceName">LPCSTR</arg>
</function>
<function name="OpenEventLogW" ret="HANDLE" convention="__stdcall">
<arg name="lpUNCServerName">LPCWSTR</arg>
<arg name="lpSourceName">LPCWSTR</arg>
</function>
<function name="RegisterEventSourceA" ret="HANDLE" convention="__stdcall">
<arg name="lpUNCServerName">LPCSTR</arg>
<arg name="lpSourceName">LPCSTR</arg>
</function>
<function name="RegisterEventSourceW" ret="HANDLE" convention="__stdcall">
<arg name="lpUNCServerName">LPCWSTR</arg>
<arg name="lpSourceName">LPCWSTR</arg>
</function>
<function name="OpenBackupEventLogA" ret="HANDLE" convention="__stdcall">
<arg name="lpUNCServerName">LPCSTR</arg>
<arg name="lpFileName">LPCSTR</arg>
</function>
<function name="OpenBackupEventLogW" ret="HANDLE" convention="__stdcall">
<arg name="lpUNCServerName">LPCWSTR</arg>
<arg name="lpFileName">LPCWSTR</arg>
</function>
<function name="ReadEventLogA" ret="BOOL" convention="__stdcall">
<arg name="hEventLog">HANDLE    </arg>
<arg name="dwReadFlags">DWORD     </arg>
<arg name="dwRecordOffset">DWORD     </arg>
<arg name="lpBuffer">LPVOID    </arg>
<arg name="nNumberOfBytesToRead">DWORD     </arg>

  DWORD      *pnBytesRead,
<arg name="pnMinNumberOfBytesNeeded">DWORD      *</arg>
</function>
<function name="ReadEventLogW" ret="BOOL" convention="__stdcall">
<arg name="hEventLog">HANDLE    </arg>
<arg name="dwReadFlags">DWORD     </arg>
<arg name="dwRecordOffset">DWORD     </arg>
<arg name="lpBuffer">LPVOID    </arg>
<arg name="nNumberOfBytesToRead">DWORD     </arg>

  DWORD      *pnBytesRead,
<arg name="pnMinNumberOfBytesNeeded">DWORD      *</arg>
</function>
<function name="ReportEventA" ret="BOOL" convention="__stdcall">
<arg name="hEventLog">HANDLE    </arg>
<arg name="wType">WORD      </arg>
<arg name="wCategory">WORD      </arg>
<arg name="dwEventID">DWORD     </arg>
<arg name="lpUserSid">PSID      </arg>
<arg name="wNumStrings">WORD      </arg>
<arg name="dwDataSize">DWORD     </arg>

  LPCSTR *lpStrings,
<arg name="lpRawData">LPVOID</arg>
</function>
<function name="ReportEventW" ret="BOOL" convention="__stdcall">
<arg name="hEventLog">HANDLE    </arg>
<arg name="wType">WORD      </arg>
<arg name="wCategory">WORD      </arg>
<arg name="dwEventID">DWORD     </arg>
<arg name="lpUserSid">PSID      </arg>
<arg name="wNumStrings">WORD      </arg>
<arg name="dwDataSize">DWORD     </arg>

  LPCWSTR *lpStrings,
<arg name="lpRawData">LPVOID</arg>
</function>
<struct name="_EVENTLOG_FULL_INFORMATION">
<field name="dwFull">DWORD</field>
  }
  EVENTLOG_FULL_INFORMATION, *LPEVENTLOG_FULL_INFORMATION;

<function name="GetEventLogInformation" ret="BOOL" convention="__stdcall">
<arg name="hEventLog">HANDLE    </arg>
<arg name="dwInfoLevel">DWORD     </arg>
<arg name="lpBuffer">LPVOID</arg>
<arg name="cbBufSize">DWORD     </arg>
<arg name="pcbBytesNeeded">LPDWORD   </arg>
</function>
<function name="DuplicateToken" ret="BOOL" convention="__stdcall">
<arg name="ExistingTokenHandle">HANDLE</arg>
<arg name="ImpersonationLevel">SECURITY_IMPERSONATION_LEVEL</arg>
<arg name="DuplicateTokenHandle">PHANDLE</arg>
</function>

<function name="GetKernelObjectSecurity" ret="BOOL" convention="__stdcall">
<arg name="Handle">HANDLE</arg>
<arg name="RequestedInformation">SECURITY_INFORMATION</arg>
<arg name="pSecurityDescriptor">PSECURITY_DESCRIPTOR</arg>
<arg name="nLength">DWORD</arg>
<arg name="lpnLengthNeeded">LPDWORD</arg>
</function>

<function name="ImpersonateNamedPipeClient" ret="BOOL" convention="__stdcall">
<arg name="hNamedPipe">HANDLE</arg>
</function>

<function name="ImpersonateSelf" ret="BOOL" convention="__stdcall">
<arg name="ImpersonationLevel">SECURITY_IMPERSONATION_LEVEL</arg>
</function>
<function name="RevertToSelf" ret="BOOL" convention="__stdcall">
<arg name="void"></arg>
</function>

<function name="SetThreadToken" ret="BOOL" convention="__stdcall">
<arg name="Thread">PHANDLE</arg>
<arg name="Token">HANDLE</arg>
</function>

<function name="AccessCheck" ret="BOOL" convention="__stdcall">
<arg name="pSecurityDescriptor">PSECURITY_DESCRIPTOR</arg>
<arg name="ClientToken">HANDLE</arg>
<arg name="DesiredAccess">DWORD</arg>
<arg name="GenericMapping">PGENERIC_MAPPING</arg>
<arg name="PrivilegeSet">PPRIVILEGE_SET</arg>
<arg name="PrivilegeSetLength">LPDWORD</arg>
<arg name="GrantedAccess">LPDWORD</arg>
<arg name="AccessStatus">LPBOOL</arg>
</function>
<function name="AccessCheckByType" ret="BOOL" convention="__stdcall">
<arg name="pSecurityDescriptor">PSECURITY_DESCRIPTOR</arg>
<arg name="PrincipalSelfSid">PSID</arg>
<arg name="ClientToken">HANDLE</arg>
<arg name="DesiredAccess">DWORD</arg>
<arg name="ObjectTypeList">POBJECT_TYPE_LIST</arg>
<arg name="ObjectTypeListLength">DWORD</arg>
<arg name="GenericMapping">PGENERIC_MAPPING</arg>
<arg name="PrivilegeSet">PPRIVILEGE_SET</arg>
<arg name="PrivilegeSetLength">LPDWORD</arg>
<arg name="GrantedAccess">LPDWORD</arg>
<arg name="AccessStatus">LPBOOL</arg>
</function>

<function name="AccessCheckByTypeResultList" ret="BOOL" convention="__stdcall">
<arg name="pSecurityDescriptor">PSECURITY_DESCRIPTOR</arg>
<arg name="PrincipalSelfSid">PSID</arg>
<arg name="ClientToken">HANDLE</arg>
<arg name="DesiredAccess">DWORD</arg>
<arg name="ObjectTypeList">POBJECT_TYPE_LIST</arg>
<arg name="ObjectTypeListLength">DWORD</arg>
<arg name="GenericMapping">PGENERIC_MAPPING</arg>
<arg name="PrivilegeSet">PPRIVILEGE_SET</arg>
<arg name="PrivilegeSetLength">LPDWORD</arg>
<arg name="GrantedAccessList">LPDWORD</arg>
<arg name="AccessStatusList">LPDWORD</arg>
</function>
<function name="OpenProcessToken" ret="BOOL" convention="__stdcall">
<arg name="ProcessHandle">HANDLE</arg>
<arg name="DesiredAccess">DWORD</arg>
<arg name="TokenHandle">PHANDLE</arg>
</function>
<function name="OpenThreadToken" ret="BOOL" convention="__stdcall">
<arg name="ThreadHandle">HANDLE</arg>
<arg name="DesiredAccess">DWORD</arg>
<arg name="OpenAsSelf">BOOL</arg>
<arg name="TokenHandle">PHANDLE</arg>
</function>
<function name="GetTokenInformation" ret="BOOL" convention="__stdcall">
<arg name="TokenHandle">HANDLE</arg>
<arg name="TokenInformationClass">TOKEN_INFORMATION_CLASS</arg>
<arg name="TokenInformation">LPVOID</arg>
<arg name="TokenInformationLength">DWORD</arg>
<arg name="ReturnLength">PDWORD</arg>
</function>
<function name="SetTokenInformation" ret="BOOL" convention="__stdcall">
<arg name="TokenHandle">HANDLE</arg>
<arg name="TokenInformationClass">TOKEN_INFORMATION_CLASS</arg>
<arg name="TokenInformation">LPVOID</arg>
<arg name="TokenInformationLength">DWORD</arg>
</function>
<function name="AdjustTokenPrivileges" ret="BOOL" convention="__stdcall">
<arg name="TokenHandle">HANDLE</arg>
<arg name="DisableAllPrivileges">BOOL</arg>
<arg name="NewState">PTOKEN_PRIVILEGES</arg>
<arg name="BufferLength">DWORD</arg>
<arg name="PreviousState">PTOKEN_PRIVILEGES</arg>
<arg name="ReturnLength">PDWORD</arg>
</function>
<function name="AdjustTokenGroups" ret="BOOL" convention="__stdcall">
<arg name="TokenHandle">HANDLE</arg>
<arg name="ResetToDefault">BOOL</arg>
<arg name="NewState">PTOKEN_GROUPS</arg>
<arg name="BufferLength">DWORD</arg>
<arg name="PreviousState">PTOKEN_GROUPS</arg>
<arg name="ReturnLength">PDWORD</arg>
</function>
<function name="PrivilegeCheck" ret="BOOL" convention="__stdcall">
<arg name="ClientToken">HANDLE</arg>
<arg name="RequiredPrivileges">PPRIVILEGE_SET</arg>
<arg name="pfResult">LPBOOL</arg>
</function>
<function name="AccessCheckAndAuditAlarmA" ret="BOOL" convention="__stdcall">
<arg name="SubsystemName">LPCSTR</arg>
<arg name="HandleId">LPVOID</arg>
<arg name="ObjectTypeName">LPSTR</arg>
<arg name="ObjectName">LPSTR</arg>
<arg name="SecurityDescriptor">PSECURITY_DESCRIPTOR</arg>
<arg name="DesiredAccess">DWORD</arg>
<arg name="GenericMapping">PGENERIC_MAPPING</arg>
<arg name="ObjectCreation">BOOL</arg>
<arg name="GrantedAccess">LPDWORD</arg>
<arg name="AccessStatus">LPBOOL</arg>
<arg name="pfGenerateOnClose">LPBOOL</arg>
</function>
<function name="AccessCheckAndAuditAlarmW" ret="BOOL" convention="__stdcall">
<arg name="SubsystemName">LPCWSTR</arg>
<arg name="HandleId">LPVOID</arg>
<arg name="ObjectTypeName">LPWSTR</arg>
<arg name="ObjectName">LPWSTR</arg>
<arg name="SecurityDescriptor">PSECURITY_DESCRIPTOR</arg>
<arg name="DesiredAccess">DWORD</arg>
<arg name="GenericMapping">PGENERIC_MAPPING</arg>
<arg name="ObjectCreation">BOOL</arg>
<arg name="GrantedAccess">LPDWORD</arg>
<arg name="AccessStatus">LPBOOL</arg>
<arg name="pfGenerateOnClose">LPBOOL</arg>
</function>

<function name="AccessCheckByTypeAndAuditAlarmA" ret="BOOL" convention="__stdcall">
<arg name="SubsystemName">LPCSTR</arg>
<arg name="HandleId">LPVOID</arg>
<arg name="ObjectTypeName">LPCSTR</arg>
<arg name="ObjectName">LPCSTR</arg>
<arg name="SecurityDescriptor">PSECURITY_DESCRIPTOR</arg>
<arg name="PrincipalSelfSid">PSID</arg>
<arg name="DesiredAccess">DWORD</arg>
<arg name="AuditType">AUDIT_EVENT_TYPE</arg>
<arg name="Flags">DWORD</arg>
<arg name="ObjectTypeList">POBJECT_TYPE_LIST</arg>
<arg name="ObjectTypeListLength">DWORD</arg>
<arg name="GenericMapping">PGENERIC_MAPPING</arg>
<arg name="ObjectCreation">BOOL</arg>
<arg name="GrantedAccess">LPDWORD</arg>
<arg name="AccessStatus">LPBOOL</arg>
<arg name="pfGenerateOnClose">LPBOOL</arg>
</function>
<function name="AccessCheckByTypeAndAuditAlarmW" ret="BOOL" convention="__stdcall">
<arg name="SubsystemName">LPCWSTR</arg>
<arg name="HandleId">LPVOID</arg>
<arg name="ObjectTypeName">LPCWSTR</arg>
<arg name="ObjectName">LPCWSTR</arg>
<arg name="SecurityDescriptor">PSECURITY_DESCRIPTOR</arg>
<arg name="PrincipalSelfSid">PSID</arg>
<arg name="DesiredAccess">DWORD</arg>
<arg name="AuditType">AUDIT_EVENT_TYPE</arg>
<arg name="Flags">DWORD</arg>
<arg name="ObjectTypeList">POBJECT_TYPE_LIST</arg>
<arg name="ObjectTypeListLength">DWORD</arg>
<arg name="GenericMapping">PGENERIC_MAPPING</arg>
<arg name="ObjectCreation">BOOL</arg>
<arg name="GrantedAccess">LPDWORD</arg>
<arg name="AccessStatus">LPBOOL</arg>
<arg name="pfGenerateOnClose">LPBOOL</arg>
</function>
<function name="AccessCheckByTypeResultListAndAuditAlarmA" ret="BOOL" convention="__stdcall">
<arg name="SubsystemName">LPCSTR</arg>
<arg name="HandleId">LPVOID</arg>
<arg name="ObjectTypeName">LPCSTR</arg>
<arg name="ObjectName">LPCSTR</arg>
<arg name="SecurityDescriptor">PSECURITY_DESCRIPTOR</arg>
<arg name="PrincipalSelfSid">PSID</arg>
<arg name="DesiredAccess">DWORD</arg>
<arg name="AuditType">AUDIT_EVENT_TYPE</arg>
<arg name="Flags">DWORD</arg>
<arg name="ObjectTypeList">POBJECT_TYPE_LIST</arg>
<arg name="ObjectTypeListLength">DWORD</arg>
<arg name="GenericMapping">PGENERIC_MAPPING</arg>
<arg name="ObjectCreation">BOOL</arg>
<arg name="GrantedAccess">LPDWORD</arg>
<arg name="AccessStatusList">LPDWORD</arg>
<arg name="pfGenerateOnClose">LPBOOL</arg>
</function>
<function name="AccessCheckByTypeResultListAndAuditAlarmW" ret="BOOL" convention="__stdcall">
<arg name="SubsystemName">LPCWSTR</arg>
<arg name="HandleId">LPVOID</arg>
<arg name="ObjectTypeName">LPCWSTR</arg>
<arg name="ObjectName">LPCWSTR</arg>
<arg name="SecurityDescriptor">PSECURITY_DESCRIPTOR</arg>
<arg name="PrincipalSelfSid">PSID</arg>
<arg name="DesiredAccess">DWORD</arg>
<arg name="AuditType">AUDIT_EVENT_TYPE</arg>
<arg name="Flags">DWORD</arg>
<arg name="ObjectTypeList">POBJECT_TYPE_LIST</arg>
<arg name="ObjectTypeListLength">DWORD</arg>
<arg name="GenericMapping">PGENERIC_MAPPING</arg>
<arg name="ObjectCreation">BOOL</arg>
<arg name="GrantedAccess">LPDWORD</arg>
<arg name="AccessStatusList">LPDWORD</arg>
<arg name="pfGenerateOnClose">LPBOOL</arg>
</function>
<function name="AccessCheckByTypeResultListAndAuditAlarmByHandleA" ret="BOOL" convention="__stdcall">
<arg name="SubsystemName">LPCSTR</arg>
<arg name="HandleId">LPVOID</arg>
<arg name="ClientToken">HANDLE</arg>
<arg name="ObjectTypeName">LPCSTR</arg>
<arg name="ObjectName">LPCSTR</arg>
<arg name="SecurityDescriptor">PSECURITY_DESCRIPTOR</arg>
<arg name="PrincipalSelfSid">PSID</arg>
<arg name="DesiredAccess">DWORD</arg>
<arg name="AuditType">AUDIT_EVENT_TYPE</arg>
<arg name="Flags">DWORD</arg>
<arg name="ObjectTypeList">POBJECT_TYPE_LIST</arg>
<arg name="ObjectTypeListLength">DWORD</arg>
<arg name="GenericMapping">PGENERIC_MAPPING</arg>
<arg name="ObjectCreation">BOOL</arg>
<arg name="GrantedAccess">LPDWORD</arg>
<arg name="AccessStatusList">LPDWORD</arg>
<arg name="pfGenerateOnClose">LPBOOL</arg>
</function>
<function name="AccessCheckByTypeResultListAndAuditAlarmByHandleW" ret="BOOL" convention="__stdcall">
<arg name="SubsystemName">LPCWSTR</arg>
<arg name="HandleId">LPVOID</arg>
<arg name="ClientToken">HANDLE</arg>
<arg name="ObjectTypeName">LPCWSTR</arg>
<arg name="ObjectName">LPCWSTR</arg>
<arg name="SecurityDescriptor">PSECURITY_DESCRIPTOR</arg>
<arg name="PrincipalSelfSid">PSID</arg>
<arg name="DesiredAccess">DWORD</arg>
<arg name="AuditType">AUDIT_EVENT_TYPE</arg>
<arg name="Flags">DWORD</arg>
<arg name="ObjectTypeList">POBJECT_TYPE_LIST</arg>
<arg name="ObjectTypeListLength">DWORD</arg>
<arg name="GenericMapping">PGENERIC_MAPPING</arg>
<arg name="ObjectCreation">BOOL</arg>
<arg name="GrantedAccess">LPDWORD</arg>
<arg name="AccessStatusList">LPDWORD</arg>
<arg name="pfGenerateOnClose">LPBOOL</arg>
</function>
<function name="ObjectOpenAuditAlarmA" ret="BOOL" convention="__stdcall">
<arg name="SubsystemName">LPCSTR</arg>
<arg name="HandleId">LPVOID</arg>
<arg name="ObjectTypeName">LPSTR</arg>
<arg name="ObjectName">LPSTR</arg>
<arg name="pSecurityDescriptor">PSECURITY_DESCRIPTOR</arg>
<arg name="ClientToken">HANDLE</arg>
<arg name="DesiredAccess">DWORD</arg>
<arg name="GrantedAccess">DWORD</arg>
<arg name="Privileges">PPRIVILEGE_SET</arg>
<arg name="ObjectCreation">BOOL</arg>
<arg name="AccessGranted">BOOL</arg>
<arg name="GenerateOnClose">LPBOOL</arg>
</function>
<function name="ObjectOpenAuditAlarmW" ret="BOOL" convention="__stdcall">
<arg name="SubsystemName">LPCWSTR</arg>
<arg name="HandleId">LPVOID</arg>
<arg name="ObjectTypeName">LPWSTR</arg>
<arg name="ObjectName">LPWSTR</arg>
<arg name="pSecurityDescriptor">PSECURITY_DESCRIPTOR</arg>
<arg name="ClientToken">HANDLE</arg>
<arg name="DesiredAccess">DWORD</arg>
<arg name="GrantedAccess">DWORD</arg>
<arg name="Privileges">PPRIVILEGE_SET</arg>
<arg name="ObjectCreation">BOOL</arg>
<arg name="AccessGranted">BOOL</arg>
<arg name="GenerateOnClose">LPBOOL</arg>
</function>

<function name="ObjectPrivilegeAuditAlarmA" ret="BOOL" convention="__stdcall">
<arg name="SubsystemName">LPCSTR</arg>
<arg name="HandleId">LPVOID</arg>
<arg name="ClientToken">HANDLE</arg>
<arg name="DesiredAccess">DWORD</arg>
<arg name="Privileges">PPRIVILEGE_SET</arg>
<arg name="AccessGranted">BOOL</arg>
</function>
<function name="ObjectPrivilegeAuditAlarmW" ret="BOOL" convention="__stdcall">
<arg name="SubsystemName">LPCWSTR</arg>
<arg name="HandleId">LPVOID</arg>
<arg name="ClientToken">HANDLE</arg>
<arg name="DesiredAccess">DWORD</arg>
<arg name="Privileges">PPRIVILEGE_SET</arg>
<arg name="AccessGranted">BOOL</arg>
</function>

<function name="ObjectCloseAuditAlarmA" ret="BOOL" convention="__stdcall">
<arg name="SubsystemName">LPCSTR</arg>
<arg name="HandleId">LPVOID</arg>
<arg name="GenerateOnClose">BOOL</arg>
</function>
<function name="ObjectCloseAuditAlarmW" ret="BOOL" convention="__stdcall">
<arg name="SubsystemName">LPCWSTR</arg>
<arg name="HandleId">LPVOID</arg>
<arg name="GenerateOnClose">BOOL</arg>
</function>

<function name="ObjectDeleteAuditAlarmA" ret="BOOL" convention="__stdcall">
<arg name="SubsystemName">LPCSTR</arg>
<arg name="HandleId">LPVOID</arg>
<arg name="GenerateOnClose">BOOL</arg>
</function>
<function name="ObjectDeleteAuditAlarmW" ret="BOOL" convention="__stdcall">
<arg name="SubsystemName">LPCWSTR</arg>
<arg name="HandleId">LPVOID</arg>
<arg name="GenerateOnClose">BOOL</arg>
</function>

<function name="PrivilegedServiceAuditAlarmA" ret="BOOL" convention="__stdcall">
<arg name="SubsystemName">LPCSTR</arg>
<arg name="ServiceName">LPCSTR</arg>
<arg name="ClientToken">HANDLE</arg>
<arg name="Privileges">PPRIVILEGE_SET</arg>
<arg name="AccessGranted">BOOL</arg>
</function>
<function name="PrivilegedServiceAuditAlarmW" ret="BOOL" convention="__stdcall">
<arg name="SubsystemName">LPCWSTR</arg>
<arg name="ServiceName">LPCWSTR</arg>
<arg name="ClientToken">HANDLE</arg>
<arg name="Privileges">PPRIVILEGE_SET</arg>
<arg name="AccessGranted">BOOL</arg>
</function>
<function name="IsWellKnownSid" ret="BOOL" convention="__stdcall">
<arg name="pSid">PSID</arg>
<arg name="WellKnownSidType">WELL_KNOWN_SID_TYPE</arg>
</function>

<function name="CreateWellKnownSid" ret="BOOL" convention="__stdcall">
<arg name="WellKnownSidType">WELL_KNOWN_SID_TYPE</arg>
<arg name="DomainSid">PSID</arg>
<arg name="pSid">PSID</arg>
<arg name="cbSid">DWORD *</arg>
</function>

<function name="EqualDomainSid" ret="BOOL" convention="__stdcall">
<arg name="pSid1">PSID</arg>
<arg name="pSid2">PSID</arg>
<arg name="pfEqual">BOOL *</arg>
</function>

<function name="GetWindowsAccountDomainSid" ret="BOOL" convention="__stdcall">
<arg name="pSid">PSID</arg>
<arg name="pDomainSid">PSID</arg>
<arg name="cbDomainSid">DWORD*</arg>
</function>
<function name="IsValidSid" ret="BOOL" convention="__stdcall">
<arg name="pSid">PSID</arg>
</function>
<function name="EqualSid" ret="BOOL" convention="__stdcall">
<arg name="pSid1">PSID</arg>
<arg name="pSid2">PSID</arg>
</function>
<function name="EqualPrefixSid" ret="BOOL" convention="__stdcall">
<arg name="pSid1">PSID</arg>
<arg name="pSid2">PSID</arg>
</function>
<function name="GetSidLengthRequired" ret="DWORD" convention="__stdcall">
<arg name="nSubAuthorityCount">UCHAR</arg>
</function>
<function name="AllocateAndInitializeSid" ret="BOOL" convention="__stdcall">
<arg name="pIdentifierAuthority">PSID_IDENTIFIER_AUTHORITY</arg>
<arg name="nSubAuthorityCount">BYTE</arg>
<arg name="nSubAuthority0">DWORD</arg>
<arg name="nSubAuthority1">DWORD</arg>
<arg name="nSubAuthority2">DWORD</arg>
<arg name="nSubAuthority3">DWORD</arg>
<arg name="nSubAuthority4">DWORD</arg>
<arg name="nSubAuthority5">DWORD</arg>
<arg name="nSubAuthority6">DWORD</arg>
<arg name="nSubAuthority7">DWORD</arg>
<arg name="pSid">PSID *</arg>
</function>

<function name="FreeSid" ret="PVOID" convention="__stdcall">
<arg name="pSid">PSID</arg>
</function>

<function name="InitializeSid" ret="BOOL" convention="__stdcall">
<arg name="Sid">PSID</arg>
<arg name="pIdentifierAuthority">PSID_IDENTIFIER_AUTHORITY</arg>
<arg name="nSubAuthorityCount">BYTE</arg>
</function>
<function name="GetSidIdentifierAuthority" ret="PSID_IDENTIFIER_AUTHORITY" convention="__stdcall">
<arg name="pSid">PSID</arg>
</function>
<function name="GetSidSubAuthority" ret="PDWORD" convention="__stdcall">
<arg name="pSid">PSID</arg>
<arg name="nSubAuthority">DWORD</arg>
</function>
<function name="GetSidSubAuthorityCount" ret="PUCHAR" convention="__stdcall">
<arg name="pSid">PSID</arg>
</function>
<function name="GetLengthSid" ret="DWORD" convention="__stdcall">
<arg name="pSid">PSID</arg>
</function>
<function name="CopySid" ret="BOOL" convention="__stdcall">
<arg name="nDestinationSidLength">DWORD</arg>
<arg name="pDestinationSid">PSID</arg>
<arg name="pSourceSid">PSID</arg>
</function>
<function name="AreAllAccessesGranted" ret="BOOL" convention="__stdcall">
<arg name="GrantedAccess">DWORD</arg>
<arg name="DesiredAccess">DWORD</arg>
</function>
<function name="AreAnyAccessesGranted" ret="BOOL" convention="__stdcall">
<arg name="GrantedAccess">DWORD</arg>
<arg name="DesiredAccess">DWORD</arg>
</function>
<function name="MapGenericMask" ret="void" convention="__stdcall">
<arg name="AccessMask">PDWORD</arg>
<arg name="GenericMapping">PGENERIC_MAPPING</arg>
</function>
<function name="IsValidAcl" ret="BOOL" convention="__stdcall">
<arg name="pAcl">PACL</arg>
</function>
<function name="InitializeAcl" ret="BOOL" convention="__stdcall">
<arg name="pAcl">PACL</arg>
<arg name="nAclLength">DWORD</arg>
<arg name="dwAclRevision">DWORD</arg>
</function>
<function name="GetAclInformation" ret="BOOL" convention="__stdcall">
<arg name="pAcl">PACL</arg>
<arg name="pAclInformation">LPVOID</arg>
<arg name="nAclInformationLength">DWORD</arg>
<arg name="dwAclInformationClass">ACL_INFORMATION_CLASS</arg>
</function>
<function name="SetAclInformation" ret="BOOL" convention="__stdcall">
<arg name="pAcl">PACL</arg>
<arg name="pAclInformation">LPVOID</arg>
<arg name="nAclInformationLength">DWORD</arg>
<arg name="dwAclInformationClass">ACL_INFORMATION_CLASS</arg>
</function>
<function name="AddAce" ret="BOOL" convention="__stdcall">
<arg name="pAcl">PACL</arg>
<arg name="dwAceRevision">DWORD</arg>
<arg name="dwStartingAceIndex">DWORD</arg>
<arg name="pAceList">LPVOID</arg>
<arg name="nAceListLength">DWORD</arg>
</function>
<function name="DeleteAce" ret="BOOL" convention="__stdcall">
<arg name="pAcl">PACL</arg>
<arg name="dwAceIndex">DWORD</arg>
</function>
<function name="GetAce" ret="BOOL" convention="__stdcall">
<arg name="pAcl">PACL</arg>
<arg name="dwAceIndex">DWORD</arg>
<arg name="pAce">LPVOID *</arg>
</function>
<function name="AddAccessAllowedAce" ret="BOOL" convention="__stdcall">
<arg name="pAcl">PACL</arg>
<arg name="dwAceRevision">DWORD</arg>
<arg name="AccessMask">DWORD</arg>
<arg name="pSid">PSID</arg>
</function>
<function name="AddAccessAllowedAceEx" ret="BOOL" convention="__stdcall">
<arg name="pAcl">PACL</arg>
<arg name="dwAceRevision">DWORD</arg>
<arg name="AceFlags">DWORD</arg>
<arg name="AccessMask">DWORD</arg>
<arg name="pSid">PSID</arg>
</function>
<function name="AddMandatoryAce" ret="BOOL" convention="__stdcall">
<arg name="pAcl">PACL</arg>
<arg name="dwAceRevision">DWORD</arg>
<arg name="AceFlags">DWORD</arg>
<arg name="MandatoryPolicy">DWORD</arg>
<arg name="pLabelSid">PSID</arg>
</function>

<function name="AddAccessDeniedAce" ret="BOOL" convention="__stdcall">
<arg name="pAcl">PACL</arg>
<arg name="dwAceRevision">DWORD</arg>
<arg name="AccessMask">DWORD</arg>
<arg name="pSid">PSID</arg>
</function>
<function name="AddAccessDeniedAceEx" ret="BOOL" convention="__stdcall">
<arg name="pAcl">PACL</arg>
<arg name="dwAceRevision">DWORD</arg>
<arg name="AceFlags">DWORD</arg>
<arg name="AccessMask">DWORD</arg>
<arg name="pSid">PSID</arg>
</function>

<function name="AddAuditAccessAce" ret="BOOL" convention="__stdcall">
<arg name="pAcl">PACL</arg>
<arg name="dwAceRevision">DWORD</arg>
<arg name="dwAccessMask">DWORD</arg>
<arg name="pSid">PSID</arg>
<arg name="bAuditSuccess">BOOL</arg>
<arg name="bAuditFailure">BOOL</arg>
</function>
<function name="AddAuditAccessAceEx" ret="BOOL" convention="__stdcall">
<arg name="pAcl">PACL</arg>
<arg name="dwAceRevision">DWORD</arg>
<arg name="AceFlags">DWORD</arg>
<arg name="dwAccessMask">DWORD</arg>
<arg name="pSid">PSID</arg>
<arg name="bAuditSuccess">BOOL</arg>
<arg name="bAuditFailure">BOOL</arg>
</function>

<function name="AddAccessAllowedObjectAce" ret="BOOL" convention="__stdcall">
<arg name="pAcl">PACL</arg>
<arg name="dwAceRevision">DWORD</arg>
<arg name="AceFlags">DWORD</arg>
<arg name="AccessMask">DWORD</arg>

  GUID *ObjectTypeGuid,
  GUID *InheritedObjectTypeGuid,
<arg name="pSid">PSID</arg>
</function>

<function name="AddAccessDeniedObjectAce" ret="BOOL" convention="__stdcall">
<arg name="pAcl">PACL</arg>
<arg name="dwAceRevision">DWORD</arg>
<arg name="AceFlags">DWORD</arg>
<arg name="AccessMask">DWORD</arg>

  GUID *ObjectTypeGuid,
  GUID *InheritedObjectTypeGuid,
<arg name="pSid">PSID</arg>
</function>

<function name="AddAuditAccessObjectAce" ret="BOOL" convention="__stdcall">
<arg name="pAcl">PACL</arg>
<arg name="dwAceRevision">DWORD</arg>
<arg name="AceFlags">DWORD</arg>
<arg name="AccessMask">DWORD</arg>

  GUID *ObjectTypeGuid,
  GUID *InheritedObjectTypeGuid,
  PSID pSid,
  BOOL bAuditSuccess,
<arg name="bAuditFailure">BOOL</arg>
</function>

<function name="FindFirstFreeAce" ret="BOOL" convention="__stdcall">
<arg name="pAcl">PACL</arg>
<arg name="pAce">LPVOID *</arg>
</function>
<function name="InitializeSecurityDescriptor" ret="BOOL" convention="__stdcall">
<arg name="pSecurityDescriptor">PSECURITY_DESCRIPTOR</arg>
<arg name="dwRevision">DWORD</arg>
</function>
<function name="IsValidSecurityDescriptor" ret="BOOL" convention="__stdcall">
<arg name="pSecurityDescriptor">PSECURITY_DESCRIPTOR</arg>
</function>

<function name="IsValidRelativeSecurityDescriptor" ret="BOOL" convention="__stdcall">
<arg name="pSecurityDescriptor">PSECURITY_DESCRIPTOR</arg>
<arg name="SecurityDescriptorLength">ULONG</arg>
<arg name="RequiredInformation">SECURITY_INFORMATION</arg>
</function>

<function name="GetSecurityDescriptorLength" ret="DWORD" convention="__stdcall">
<arg name="pSecurityDescriptor">PSECURITY_DESCRIPTOR</arg>
</function>
<function name="GetSecurityDescriptorControl" ret="BOOL" convention="__stdcall">
<arg name="pSecurityDescriptor">PSECURITY_DESCRIPTOR</arg>
<arg name="pControl">PSECURITY_DESCRIPTOR_CONTROL</arg>
<arg name="lpdwRevision">LPDWORD</arg>
</function>
<function name="SetSecurityDescriptorControl" ret="BOOL" convention="__stdcall">
<arg name="pSecurityDescriptor">PSECURITY_DESCRIPTOR</arg>
<arg name="ControlBitsOfInterest">SECURITY_DESCRIPTOR_CONTROL</arg>
<arg name="ControlBitsToSet">SECURITY_DESCRIPTOR_CONTROL</arg>
</function>

<function name="SetSecurityDescriptorDacl" ret="BOOL" convention="__stdcall">
<arg name="pSecurityDescriptor">PSECURITY_DESCRIPTOR</arg>
<arg name="bDaclPresent">BOOL</arg>
<arg name="pDacl">PACL</arg>
<arg name="bDaclDefaulted">BOOL</arg>
</function>
<function name="GetSecurityDescriptorDacl" ret="BOOL" convention="__stdcall">
<arg name="pSecurityDescriptor">PSECURITY_DESCRIPTOR</arg>
<arg name="lpbDaclPresent">LPBOOL</arg>

  PACL *pDacl,
<arg name="lpbDaclDefaulted">LPBOOL</arg>
</function>
<function name="SetSecurityDescriptorSacl" ret="BOOL" convention="__stdcall">
<arg name="pSecurityDescriptor">PSECURITY_DESCRIPTOR</arg>
<arg name="bSaclPresent">BOOL</arg>
<arg name="pSacl">PACL</arg>
<arg name="bSaclDefaulted">BOOL</arg>
</function>
<function name="GetSecurityDescriptorSacl" ret="BOOL" convention="__stdcall">
<arg name="pSecurityDescriptor">PSECURITY_DESCRIPTOR</arg>
<arg name="lpbSaclPresent">LPBOOL</arg>

  PACL *pSacl,
<arg name="lpbSaclDefaulted">LPBOOL</arg>
</function>
<function name="SetSecurityDescriptorOwner" ret="BOOL" convention="__stdcall">
<arg name="pSecurityDescriptor">PSECURITY_DESCRIPTOR</arg>
<arg name="pOwner">PSID</arg>
<arg name="bOwnerDefaulted">BOOL</arg>
</function>
<function name="GetSecurityDescriptorOwner" ret="BOOL" convention="__stdcall">
<arg name="pSecurityDescriptor">PSECURITY_DESCRIPTOR</arg>

  PSID *pOwner,
<arg name="lpbOwnerDefaulted">LPBOOL</arg>
</function>
<function name="SetSecurityDescriptorGroup" ret="BOOL" convention="__stdcall">
<arg name="pSecurityDescriptor">PSECURITY_DESCRIPTOR</arg>
<arg name="pGroup">PSID</arg>
<arg name="bGroupDefaulted">BOOL</arg>
</function>
<function name="GetSecurityDescriptorGroup" ret="BOOL" convention="__stdcall">
<arg name="pSecurityDescriptor">PSECURITY_DESCRIPTOR</arg>

  PSID *pGroup,
<arg name="lpbGroupDefaulted">LPBOOL</arg>
</function>
<function name="SetSecurityDescriptorRMControl" ret="DWORD" convention="__stdcall">
<arg name="SecurityDescriptor">PSECURITY_DESCRIPTOR</arg>
<arg name="RMControl">PUCHAR</arg>
</function>

<function name="GetSecurityDescriptorRMControl" ret="DWORD" convention="__stdcall">
<arg name="SecurityDescriptor">PSECURITY_DESCRIPTOR</arg>
<arg name="RMControl">PUCHAR</arg>
</function>

<function name="CreatePrivateObjectSecurity" ret="BOOL" convention="__stdcall">
<arg name="ParentDescriptor">PSECURITY_DESCRIPTOR</arg>
<arg name="CreatorDescriptor">PSECURITY_DESCRIPTOR</arg>
<arg name="NewDescriptor">PSECURITY_DESCRIPTOR *</arg>
<arg name="IsDirectoryObject">BOOL</arg>
<arg name="Token">HANDLE</arg>
<arg name="GenericMapping">PGENERIC_MAPPING</arg>
</function>
<function name="ConvertToAutoInheritPrivateObjectSecurity" ret="BOOL" convention="__stdcall">
<arg name="ParentDescriptor">PSECURITY_DESCRIPTOR</arg>
<arg name="CurrentSecurityDescriptor">PSECURITY_DESCRIPTOR</arg>

  PSECURITY_DESCRIPTOR *NewSecurityDescriptor,
  GUID *ObjectType,
  BOOLEAN IsDirectoryObject,
<arg name="GenericMapping">PGENERIC_MAPPING</arg>
</function>

<function name="CreatePrivateObjectSecurityEx" ret="BOOL" convention="__stdcall">
<arg name="ParentDescriptor">PSECURITY_DESCRIPTOR</arg>
<arg name="CreatorDescriptor">PSECURITY_DESCRIPTOR</arg>
<arg name="NewDescriptor">PSECURITY_DESCRIPTOR *</arg>

  GUID *ObjectType,
  BOOL IsContainerObject,
  ULONG AutoInheritFlags,
  HANDLE Token,
<arg name="GenericMapping">PGENERIC_MAPPING</arg>
</function>

<function name="CreatePrivateObjectSecurityWithMultipleInheritance" ret="BOOL" convention="__stdcall">
<arg name="ParentDescriptor">PSECURITY_DESCRIPTOR</arg>
<arg name="CreatorDescriptor">PSECURITY_DESCRIPTOR</arg>
<arg name="NewDescriptor">PSECURITY_DESCRIPTOR *</arg>

  GUID **ObjectTypes,
  ULONG GuidCount,
  BOOL IsContainerObject,
  ULONG AutoInheritFlags,
  HANDLE Token,
<arg name="GenericMapping">PGENERIC_MAPPING</arg>
</function>

<function name="SetPrivateObjectSecurity" ret="BOOL" convention="__stdcall">
<arg name="SecurityInformation">SECURITY_INFORMATION</arg>
<arg name="ModificationDescriptor">PSECURITY_DESCRIPTOR</arg>

  PSECURITY_DESCRIPTOR *ObjectsSecurityDescriptor,
  PGENERIC_MAPPING GenericMapping,
<arg name="Token">HANDLE</arg>
</function>
<function name="SetPrivateObjectSecurityEx" ret="BOOL" convention="__stdcall">
<arg name="SecurityInformation">SECURITY_INFORMATION</arg>
<arg name="ModificationDescriptor">PSECURITY_DESCRIPTOR</arg>

  PSECURITY_DESCRIPTOR *ObjectsSecurityDescriptor,
  ULONG AutoInheritFlags,
  PGENERIC_MAPPING GenericMapping,
<arg name="Token">HANDLE</arg>
</function>

<function name="GetPrivateObjectSecurity" ret="BOOL" convention="__stdcall">
<arg name="ObjectDescriptor">PSECURITY_DESCRIPTOR</arg>
<arg name="SecurityInformation">SECURITY_INFORMATION</arg>
<arg name="ResultantDescriptor">PSECURITY_DESCRIPTOR</arg>
<arg name="DescriptorLength">DWORD</arg>
<arg name="ReturnLength">PDWORD</arg>
</function>
<function name="DestroyPrivateObjectSecurity" ret="BOOL" convention="__stdcall">
<arg name="ObjectDescriptor">PSECURITY_DESCRIPTOR *</arg>
</function>
<function name="MakeSelfRelativeSD" ret="BOOL" convention="__stdcall">
<arg name="pAbsoluteSecurityDescriptor">PSECURITY_DESCRIPTOR</arg>
<arg name="pSelfRelativeSecurityDescriptor">PSECURITY_DESCRIPTOR</arg>
<arg name="lpdwBufferLength">LPDWORD</arg>
</function>
<function name="MakeAbsoluteSD" ret="BOOL" convention="__stdcall">
<arg name="pSelfRelativeSecurityDescriptor">PSECURITY_DESCRIPTOR</arg>
<arg name="pAbsoluteSecurityDescriptor">PSECURITY_DESCRIPTOR</arg>
<arg name="lpdwAbsoluteSecurityDescriptorSize">LPDWORD</arg>
<arg name="pDacl">PACL</arg>
<arg name="lpdwDaclSize">LPDWORD</arg>
<arg name="pSacl">PACL</arg>
<arg name="lpdwSaclSize">LPDWORD</arg>
<arg name="pOwner">PSID</arg>
<arg name="lpdwOwnerSize">LPDWORD</arg>
<arg name="pPrimaryGroup">PSID</arg>
<arg name="lpdwPrimaryGroupSize">LPDWORD</arg>
</function>
<function name="MakeAbsoluteSD2" ret="BOOL" convention="__stdcall">
<arg name="pSelfRelativeSecurityDescriptor">PSECURITY_DESCRIPTOR</arg>
<arg name="lpdwBufferSize">LPDWORD</arg>
</function>

<function name="QuerySecurityAccessMask" ret="void" convention="__stdcall">
<arg name="SecurityInformation">SECURITY_INFORMATION</arg>
<arg name="DesiredAccess">LPDWORD</arg>
</function>

<function name="SetSecurityAccessMask" ret="void" convention="__stdcall">
<arg name="SecurityInformation">SECURITY_INFORMATION</arg>
<arg name="DesiredAccess">LPDWORD</arg>
</function>

<function name="SetFileSecurityA" ret="BOOL" convention="__stdcall">
<arg name="lpFileName">LPCSTR</arg>
<arg name="SecurityInformation">SECURITY_INFORMATION</arg>
<arg name="pSecurityDescriptor">PSECURITY_DESCRIPTOR</arg>
</function>
<function name="SetFileSecurityW" ret="BOOL" convention="__stdcall">
<arg name="lpFileName">LPCWSTR</arg>
<arg name="SecurityInformation">SECURITY_INFORMATION</arg>
<arg name="pSecurityDescriptor">PSECURITY_DESCRIPTOR</arg>
</function>

<function name="GetFileSecurityA" ret="BOOL" convention="__stdcall">
<arg name="lpFileName">LPCSTR</arg>
<arg name="RequestedInformation">SECURITY_INFORMATION</arg>
<arg name="pSecurityDescriptor">PSECURITY_DESCRIPTOR</arg>
<arg name="nLength">DWORD</arg>
<arg name="lpnLengthNeeded">LPDWORD</arg>
</function>
<function name="GetFileSecurityW" ret="BOOL" convention="__stdcall">
<arg name="lpFileName">LPCWSTR</arg>
<arg name="RequestedInformation">SECURITY_INFORMATION</arg>
<arg name="pSecurityDescriptor">PSECURITY_DESCRIPTOR</arg>
<arg name="nLength">DWORD</arg>
<arg name="lpnLengthNeeded">LPDWORD</arg>
</function>

<function name="SetKernelObjectSecurity" ret="BOOL" convention="__stdcall">
<arg name="Handle">HANDLE</arg>
<arg name="SecurityInformation">SECURITY_INFORMATION</arg>
<arg name="SecurityDescriptor">PSECURITY_DESCRIPTOR</arg>
</function>

<function name="FindFirstChangeNotificationA" ret="HANDLE" convention="__stdcall">
<arg name="lpPathName">LPCSTR</arg>
<arg name="bWatchSubtree">BOOL</arg>
<arg name="dwNotifyFilter">DWORD</arg>
</function>
<function name="FindFirstChangeNotificationW" ret="HANDLE" convention="__stdcall">
<arg name="lpPathName">LPCWSTR</arg>
<arg name="bWatchSubtree">BOOL</arg>
<arg name="dwNotifyFilter">DWORD</arg>
</function>
<function name="FindNextChangeNotification" ret="BOOL" convention="__stdcall">
<arg name="hChangeHandle">HANDLE</arg>
</function>

<function name="FindCloseChangeNotification" ret="BOOL" convention="__stdcall">
<arg name="hChangeHandle">HANDLE</arg>
</function>
<function name="ReadDirectoryChangesW" ret="BOOL" convention="__stdcall">
<arg name="hDirectory">HANDLE</arg>
<arg name="lpBuffer">LPVOID</arg>
<arg name="nBufferLength">DWORD</arg>
<arg name="bWatchSubtree">BOOL</arg>
<arg name="dwNotifyFilter">DWORD</arg>
<arg name="lpBytesReturned">LPDWORD</arg>
<arg name="lpOverlapped">LPOVERLAPPED</arg>
<arg name="lpCompletionRoutine">LPOVERLAPPED_COMPLETION_ROUTINE</arg>
</function>

<function name="VirtualLock" ret="BOOL" convention="__stdcall">
<arg name="lpAddress">LPVOID</arg>
<arg name="dwSize">SIZE_T</arg>
</function>

<function name="VirtualUnlock" ret="BOOL" convention="__stdcall">
<arg name="lpAddress">LPVOID</arg>
<arg name="dwSize">SIZE_T</arg>
</function>

<function name="MapViewOfFileEx" ret="LPVOID" convention="__stdcall">
<arg name="hFileMappingObject">HANDLE</arg>
<arg name="dwDesiredAccess">DWORD</arg>
<arg name="dwFileOffsetHigh">DWORD</arg>
<arg name="dwFileOffsetLow">DWORD</arg>
<arg name="dwNumberOfBytesToMap">SIZE_T</arg>
<arg name="lpBaseAddress">LPVOID</arg>
</function>
<function name="MapViewOfFileExNuma" ret="LPVOID" convention="__stdcall">
<arg name="hFileMappingObject">HANDLE</arg>
<arg name="dwDesiredAccess">DWORD</arg>
<arg name="dwFileOffsetHigh">DWORD</arg>
<arg name="dwFileOffsetLow">DWORD</arg>
<arg name="dwNumberOfBytesToMap">SIZE_T</arg>
<arg name="lpBaseAddress">LPVOID</arg>
<arg name="nndPreferred">DWORD</arg>
</function>
<function name="SetPriorityClass" ret="BOOL" convention="__stdcall">
<arg name="hProcess">HANDLE</arg>
<arg name="dwPriorityClass">DWORD</arg>
</function>

<function name="GetPriorityClass" ret="DWORD" convention="__stdcall">
<arg name="hProcess">HANDLE</arg>
</function>

<function name="IsBadReadPtr" ret="BOOL" convention="__stdcall">
<arg name="lp">const void *</arg>
<arg name="ucb">UINT_PTR</arg>
</function>

<function name="IsBadWritePtr" ret="BOOL" convention="__stdcall">
<arg name="lp">LPVOID</arg>
<arg name="ucb">UINT_PTR</arg>
</function>

<function name="IsBadHugeReadPtr" ret="BOOL" convention="__stdcall">
<arg name="lp">const void *</arg>
<arg name="ucb">UINT_PTR</arg>
</function>

<function name="IsBadHugeWritePtr" ret="BOOL" convention="__stdcall">
<arg name="lp">LPVOID</arg>
<arg name="ucb">UINT_PTR</arg>
</function>

<function name="IsBadCodePtr" ret="BOOL" convention="__stdcall">
<arg name="lpfn">FARPROC</arg>
</function>

<function name="IsBadStringPtrA" ret="BOOL" convention="__stdcall">
<arg name="lpsz">LPCSTR</arg>
<arg name="ucchMax">UINT_PTR</arg>
</function>
<function name="IsBadStringPtrW" ret="BOOL" convention="__stdcall">
<arg name="lpsz">LPCWSTR</arg>
<arg name="ucchMax">UINT_PTR</arg>
</function>
<function name="LookupAccountSidA" ret="BOOL" convention="__stdcall">
<arg name="lpSystemName">LPCSTR</arg>
<arg name="Sid">PSID</arg>
<arg name="Name">LPSTR</arg>
<arg name="cchName">LPDWORD</arg>
<arg name="ReferencedDomainName">LPSTR</arg>
<arg name="cchReferencedDomainName">LPDWORD</arg>
<arg name="peUse">PSID_NAME_USE</arg>
</function>
<function name="LookupAccountSidW" ret="BOOL" convention="__stdcall">
<arg name="lpSystemName">LPCWSTR</arg>
<arg name="Sid">PSID</arg>
<arg name="Name">LPWSTR</arg>
<arg name="cchName">LPDWORD</arg>
<arg name="ReferencedDomainName">LPWSTR</arg>
<arg name="cchReferencedDomainName">LPDWORD</arg>
<arg name="peUse">PSID_NAME_USE</arg>
</function>
<function name="LookupAccountNameA" ret="BOOL" convention="__stdcall">
<arg name="lpSystemName">LPCSTR</arg>
<arg name="lpAccountName">LPCSTR</arg>
<arg name="Sid">PSID</arg>
<arg name="cbSid">LPDWORD</arg>
<arg name="ReferencedDomainName">LPSTR</arg>
<arg name="cchReferencedDomainName">LPDWORD</arg>
<arg name="peUse">PSID_NAME_USE</arg>
</function>
<function name="LookupAccountNameW" ret="BOOL" convention="__stdcall">
<arg name="lpSystemName">LPCWSTR</arg>
<arg name="lpAccountName">LPCWSTR</arg>
<arg name="Sid">PSID</arg>
<arg name="cbSid">LPDWORD</arg>
<arg name="ReferencedDomainName">LPWSTR</arg>
<arg name="cchReferencedDomainName">LPDWORD</arg>
<arg name="peUse">PSID_NAME_USE</arg>
</function>
<function name="LookupPrivilegeValueA" ret="BOOL" convention="__stdcall">
<arg name="lpSystemName">LPCSTR</arg>
<arg name="lpName">LPCSTR</arg>
<arg name="lpLuid">PLUID  </arg>
</function>
<function name="LookupPrivilegeValueW" ret="BOOL" convention="__stdcall">
<arg name="lpSystemName">LPCWSTR</arg>
<arg name="lpName">LPCWSTR</arg>
<arg name="lpLuid">PLUID  </arg>
</function>
<function name="LookupPrivilegeNameA" ret="BOOL" convention="__stdcall">
<arg name="lpSystemName">LPCSTR</arg>
<arg name="lpLuid">PLUID  </arg>
<arg name="lpName">LPSTR</arg>
<arg name="cchName">LPDWORD</arg>
</function>
<function name="LookupPrivilegeNameW" ret="BOOL" convention="__stdcall">
<arg name="lpSystemName">LPCWSTR</arg>
<arg name="lpLuid">PLUID  </arg>
<arg name="lpName">LPWSTR</arg>
<arg name="cchName">LPDWORD</arg>
</function>
<function name="LookupPrivilegeDisplayNameA" ret="BOOL" convention="__stdcall">
<arg name="lpSystemName">LPCSTR</arg>
<arg name="lpName">LPCSTR</arg>
<arg name="lpDisplayName">LPSTR</arg>
<arg name="cchDisplayName">LPDWORD</arg>
<arg name="lpLanguageId">LPDWORD</arg>
</function>
<function name="LookupPrivilegeDisplayNameW" ret="BOOL" convention="__stdcall">
<arg name="lpSystemName">LPCWSTR</arg>
<arg name="lpName">LPCWSTR</arg>
<arg name="lpDisplayName">LPWSTR</arg>
<arg name="cchDisplayName">LPDWORD</arg>
<arg name="lpLanguageId">LPDWORD</arg>
</function>
<function name="AllocateLocallyUniqueId" ret="BOOL" convention="__stdcall">
<arg name="Luid">PLUID</arg>
</function>

<function name="BuildCommDCBA" ret="BOOL" convention="__stdcall">
<arg name="lpDef">LPCSTR</arg>
<arg name="lpDCB">LPDCB</arg>
</function>
<function name="BuildCommDCBW" ret="BOOL" convention="__stdcall">
<arg name="lpDef">LPCWSTR</arg>
<arg name="lpDCB">LPDCB</arg>
</function>
<function name="BuildCommDCBAndTimeoutsA" ret="BOOL" convention="__stdcall">
<arg name="lpDef">LPCSTR</arg>
<arg name="lpDCB">LPDCB</arg>
<arg name="lpCommTimeouts">LPCOMMTIMEOUTS</arg>
</function>
<function name="BuildCommDCBAndTimeoutsW" ret="BOOL" convention="__stdcall">
<arg name="lpDef">LPCWSTR</arg>
<arg name="lpDCB">LPDCB</arg>
<arg name="lpCommTimeouts">LPCOMMTIMEOUTS</arg>
</function>
<function name="CommConfigDialogA" ret="BOOL" convention="__stdcall">
<arg name="lpszName">LPCSTR</arg>
<arg name="hWnd">HWND</arg>
<arg name="lpCC">LPCOMMCONFIG</arg>
</function>
<function name="CommConfigDialogW" ret="BOOL" convention="__stdcall">
<arg name="lpszName">LPCWSTR</arg>
<arg name="hWnd">HWND</arg>
<arg name="lpCC">LPCOMMCONFIG</arg>
</function>
<function name="GetDefaultCommConfigA" ret="BOOL" convention="__stdcall">
<arg name="lpszName">LPCSTR</arg>
<arg name="lpCC">LPCOMMCONFIG</arg>
<arg name="lpdwSize">LPDWORD</arg>
</function>
<function name="GetDefaultCommConfigW" ret="BOOL" convention="__stdcall">
<arg name="lpszName">LPCWSTR</arg>
<arg name="lpCC">LPCOMMCONFIG</arg>
<arg name="lpdwSize">LPDWORD</arg>
</function>
<function name="SetDefaultCommConfigA" ret="BOOL" convention="__stdcall">
<arg name="lpszName">LPCSTR</arg>
<arg name="lpCC">LPCOMMCONFIG</arg>
<arg name="dwSize">DWORD</arg>
</function>
<function name="SetDefaultCommConfigW" ret="BOOL" convention="__stdcall">
<arg name="lpszName">LPCWSTR</arg>
<arg name="lpCC">LPCOMMCONFIG</arg>
<arg name="dwSize">DWORD</arg>
</function>
<function name="GetComputerNameA" ret="BOOL" convention="__stdcall">
<arg name="lpBuffer">LPSTR</arg>
<arg name="nSize">LPDWORD</arg>
</function>
<function name="GetComputerNameW" ret="BOOL" convention="__stdcall">
<arg name="lpBuffer">LPWSTR</arg>
<arg name="nSize">LPDWORD</arg>
</function>
<function name="SetComputerNameA" ret="BOOL" convention="__stdcall">
<arg name="lpComputerName">LPCSTR</arg>
</function>
<function name="SetComputerNameW" ret="BOOL" convention="__stdcall">
<arg name="lpComputerName">LPCWSTR</arg>
</function>
  typedef enum _COMPUTER_NAME_FORMAT {
  ComputerNameNetBIOS,
  ComputerNameDnsHostname,
  ComputerNameDnsDomain,
  ComputerNameDnsFullyQualified,
  ComputerNamePhysicalNetBIOS,
  ComputerNamePhysicalDnsHostname,
  ComputerNamePhysicalDnsDomain,
  ComputerNamePhysicalDnsFullyQualified,
  ComputerNameMax
  } COMPUTER_NAME_FORMAT ;

<function name="GetComputerNameExA" ret="BOOL" convention="__stdcall">
<arg name="NameType">COMPUTER_NAME_FORMAT</arg>
<arg name="lpBuffer">LPSTR</arg>
<arg name="nSize">LPDWORD</arg>
</function>
<function name="GetComputerNameExW" ret="BOOL" convention="__stdcall">
<arg name="NameType">COMPUTER_NAME_FORMAT</arg>
<arg name="lpBuffer">LPWSTR</arg>
<arg name="nSize">LPDWORD</arg>
</function>
<function name="SetComputerNameExA" ret="BOOL" convention="__stdcall">
<arg name="NameType">COMPUTER_NAME_FORMAT</arg>
<arg name="lpBuffer">LPCSTR</arg>
</function>
<function name="SetComputerNameExW" ret="BOOL" convention="__stdcall">
<arg name="NameType">COMPUTER_NAME_FORMAT</arg>
<arg name="lpBuffer">LPCWSTR</arg>
</function>

<function name="DnsHostnameToComputerNameA" ret="BOOL" convention="__stdcall">
<arg name="Hostname">LPCSTR</arg>
<arg name="ComputerName">LPSTR</arg>
<arg name="nSize">LPDWORD</arg>
</function>
<function name="DnsHostnameToComputerNameW" ret="BOOL" convention="__stdcall">
<arg name="Hostname">LPCWSTR</arg>
<arg name="ComputerName">LPWSTR</arg>
<arg name="nSize">LPDWORD</arg>
</function>
<function name="GetUserNameA" ret="BOOL" convention="__stdcall">
<arg name="lpBuffer">LPSTR</arg>
<arg name="pcbBuffer">LPDWORD</arg>
</function>
<function name="GetUserNameW" ret="BOOL" convention="__stdcall">
<arg name="lpBuffer">LPWSTR</arg>
<arg name="pcbBuffer">LPDWORD</arg>
</function>
<function name="LogonUserA" ret="BOOL" convention="__stdcall">
<arg name="lpszUsername">LPCSTR</arg>
<arg name="lpszDomain">LPCSTR</arg>
<arg name="lpszPassword">LPCSTR</arg>
<arg name="dwLogonType">DWORD</arg>
<arg name="dwLogonProvider">DWORD</arg>
<arg name="phToken">PHANDLE</arg>
</function>
<function name="LogonUserW" ret="BOOL" convention="__stdcall">
<arg name="lpszUsername">LPCWSTR</arg>
<arg name="lpszDomain">LPCWSTR</arg>
<arg name="lpszPassword">LPCWSTR</arg>
<arg name="dwLogonType">DWORD</arg>
<arg name="dwLogonProvider">DWORD</arg>
<arg name="phToken">PHANDLE</arg>
</function>
<function name="LogonUserExA" ret="BOOL" convention="__stdcall">
<arg name="lpszUsername">LPCSTR</arg>
<arg name="lpszDomain">LPCSTR</arg>
<arg name="lpszPassword">LPCSTR</arg>
<arg name="dwLogonType">DWORD</arg>
<arg name="dwLogonProvider">DWORD</arg>
<arg name="phToken">PHANDLE</arg>

  PSID  *ppLogonSid,
  PVOID *ppProfileBuffer,
  LPDWORD pdwProfileLength,
<arg name="pQuotaLimits">PQUOTA_LIMITS</arg>
</function>
<function name="LogonUserExW" ret="BOOL" convention="__stdcall">
<arg name="lpszUsername">LPCWSTR</arg>
<arg name="lpszDomain">LPCWSTR</arg>
<arg name="lpszPassword">LPCWSTR</arg>
<arg name="dwLogonType">DWORD</arg>
<arg name="dwLogonProvider">DWORD</arg>
<arg name="phToken">PHANDLE</arg>

  PSID  *ppLogonSid,
  PVOID *ppProfileBuffer,
  LPDWORD pdwProfileLength,
<arg name="pQuotaLimits">PQUOTA_LIMITS</arg>
</function>
<function name="ImpersonateLoggedOnUser" ret="BOOL" convention="__stdcall">
<arg name="hToken">HANDLE </arg>
</function>

<function name="CreateProcessAsUserA" ret="BOOL" convention="__stdcall">
<arg name="hToken">HANDLE</arg>
<arg name="lpApplicationName">LPCSTR</arg>
<arg name="lpCommandLine">LPSTR</arg>
<arg name="lpProcessAttributes">LPSECURITY_ATTRIBUTES</arg>
<arg name="lpThreadAttributes">LPSECURITY_ATTRIBUTES</arg>
<arg name="bInheritHandles">BOOL</arg>
<arg name="dwCreationFlags">DWORD</arg>
<arg name="lpEnvironment">LPVOID</arg>
<arg name="lpCurrentDirectory">LPCSTR</arg>
<arg name="lpStartupInfo">LPSTARTUPINFOA</arg>
<arg name="lpProcessInformation">LPPROCESS_INFORMATION</arg>
</function>
<function name="CreateProcessAsUserW" ret="BOOL" convention="__stdcall">
<arg name="hToken">HANDLE</arg>
<arg name="lpApplicationName">LPCWSTR</arg>
<arg name="lpCommandLine">LPWSTR</arg>
<arg name="lpProcessAttributes">LPSECURITY_ATTRIBUTES</arg>
<arg name="lpThreadAttributes">LPSECURITY_ATTRIBUTES</arg>
<arg name="bInheritHandles">BOOL</arg>
<arg name="dwCreationFlags">DWORD</arg>
<arg name="lpEnvironment">LPVOID</arg>
<arg name="lpCurrentDirectory">LPCWSTR</arg>
<arg name="lpStartupInfo">LPSTARTUPINFOW</arg>
<arg name="lpProcessInformation">LPPROCESS_INFORMATION</arg>
</function>
<function name="CreateProcessWithLogonW" ret="BOOL" convention="__stdcall">
<arg name="lpUsername">LPCWSTR</arg>
<arg name="lpDomain">LPCWSTR</arg>
<arg name="lpPassword">LPCWSTR</arg>
<arg name="dwLogonFlags">DWORD</arg>
<arg name="lpApplicationName">LPCWSTR</arg>
<arg name="lpCommandLine">LPWSTR</arg>
<arg name="dwCreationFlags">DWORD</arg>
<arg name="lpEnvironment">LPVOID</arg>
<arg name="lpCurrentDirectory">LPCWSTR</arg>
<arg name="lpStartupInfo">LPSTARTUPINFOW</arg>
<arg name="lpProcessInformation">LPPROCESS_INFORMATION</arg>
</function>

<function name="CreateProcessWithTokenW" ret="BOOL" convention="__stdcall">
<arg name="hToken">HANDLE</arg>
<arg name="dwLogonFlags">DWORD</arg>
<arg name="lpApplicationName">LPCWSTR</arg>
<arg name="lpCommandLine">LPWSTR</arg>
<arg name="dwCreationFlags">DWORD</arg>
<arg name="lpEnvironment">LPVOID</arg>
<arg name="lpCurrentDirectory">LPCWSTR</arg>
<arg name="lpStartupInfo">LPSTARTUPINFOW</arg>
<arg name="lpProcessInformation">LPPROCESS_INFORMATION</arg>
</function>
<function name="ImpersonateAnonymousToken" ret="BOOL" convention="__stdcall">
<arg name="ThreadHandle">HANDLE</arg>
</function>

<function name="DuplicateTokenEx" ret="BOOL" convention="__stdcall">
<arg name="hExistingToken">HANDLE</arg>
<arg name="dwDesiredAccess">DWORD</arg>
<arg name="lpTokenAttributes">LPSECURITY_ATTRIBUTES</arg>
<arg name="ImpersonationLevel">SECURITY_IMPERSONATION_LEVEL</arg>
<arg name="TokenType">TOKEN_TYPE</arg>
<arg name="phNewToken">PHANDLE</arg>
</function>

<function name="CreateRestrictedToken" ret="BOOL" convention="__stdcall">
<arg name="ExistingTokenHandle">HANDLE</arg>
<arg name="Flags">DWORD</arg>
<arg name="DisableSidCount">DWORD</arg>
<arg name="SidsToDisable">PSID_AND_ATTRIBUTES</arg>
<arg name="DeletePrivilegeCount">DWORD</arg>
<arg name="PrivilegesToDelete">PLUID_AND_ATTRIBUTES</arg>
<arg name="RestrictedSidCount">DWORD</arg>
<arg name="SidsToRestrict">PSID_AND_ATTRIBUTES</arg>
<arg name="NewTokenHandle">PHANDLE</arg>
</function>
<function name="IsTokenRestricted" ret="BOOL" convention="__stdcall">
<arg name="TokenHandle">HANDLE</arg>
</function>

<function name="IsTokenUntrusted" ret="BOOL" convention="__stdcall">
<arg name="TokenHandle">HANDLE</arg>
</function>

<function name="CheckTokenMembership" ret="BOOL" convention="__stdcall">
<arg name="TokenHandle">HANDLE</arg>
<arg name="SidToCheck">PSID</arg>
<arg name="IsMember">PBOOL</arg>
</function>
  typedef WAITORTIMERCALLBACKFUNC WAITORTIMERCALLBACK ;

<function name="RegisterWaitForSingleObject" ret="BOOL" convention="__stdcall">
<arg name="phNewWaitObject">PHANDLE</arg>
<arg name="hObject">HANDLE</arg>
<arg name="Callback">WAITORTIMERCALLBACK</arg>
<arg name="Context">PVOID</arg>
<arg name="dwMilliseconds">ULONG</arg>
<arg name="dwFlags">ULONG</arg>
</function>

<function name="RegisterWaitForSingleObjectEx" ret="HANDLE" convention="__stdcall">
<arg name="hObject">HANDLE</arg>
<arg name="Callback">WAITORTIMERCALLBACK</arg>
<arg name="Context">PVOID</arg>
<arg name="dwMilliseconds">ULONG</arg>
<arg name="dwFlags">ULONG</arg>
</function>

<function name="UnregisterWait" ret="BOOL" convention="__stdcall">
<arg name="WaitHandle">HANDLE</arg>
</function>

<function name="UnregisterWaitEx" ret="BOOL" convention="__stdcall">
<arg name="WaitHandle">HANDLE</arg>
<arg name="CompletionEvent">HANDLE</arg>
</function>

<function name="QueueUserWorkItem" ret="BOOL" convention="__stdcall">
<arg name="Function">LPTHREAD_START_ROUTINE</arg>
<arg name="Context">PVOID</arg>
<arg name="Flags">ULONG</arg>
</function>

<function name="BindIoCompletionCallback" ret="BOOL" convention="__stdcall">
<arg name="FileHandle">HANDLE</arg>
<arg name="Function">LPOVERLAPPED_COMPLETION_ROUTINE</arg>
<arg name="Flags">ULONG</arg>
</function>

<function name="CreateTimerQueue" ret="HANDLE" convention="__stdcall">
<arg name="void"></arg>
</function>

<function name="CreateTimerQueueTimer" ret="BOOL" convention="__stdcall">
<arg name="phNewTimer">PHANDLE</arg>
<arg name="TimerQueue">HANDLE</arg>
<arg name="Callback">WAITORTIMERCALLBACK</arg>
<arg name="Parameter">PVOID</arg>
<arg name="DueTime">DWORD</arg>
<arg name="Period">DWORD</arg>

  ULONG Flags
  ) ;

<function name="ChangeTimerQueueTimer" ret="BOOL" convention="__stdcall">
<arg name="TimerQueue">HANDLE</arg>
<arg name="Timer">HANDLE</arg>
<arg name="DueTime">ULONG</arg>
<arg name="Period">ULONG</arg>
</function>

<function name="DeleteTimerQueueTimer" ret="BOOL" convention="__stdcall">
<arg name="TimerQueue">HANDLE</arg>
<arg name="Timer">HANDLE</arg>
<arg name="CompletionEvent">HANDLE</arg>
</function>

<function name="DeleteTimerQueueEx" ret="BOOL" convention="__stdcall">
<arg name="TimerQueue">HANDLE</arg>
<arg name="CompletionEvent">HANDLE</arg>
</function>

<function name="SetTimerQueueTimer" ret="HANDLE" convention="__stdcall">
<arg name="TimerQueue">HANDLE</arg>
<arg name="Callback">WAITORTIMERCALLBACK</arg>
<arg name="Parameter">PVOID</arg>
<arg name="DueTime">DWORD</arg>
<arg name="Period">DWORD</arg>
<arg name="PreferIo">BOOL</arg>
</function>

<function name="CancelTimerQueueTimer" ret="BOOL" convention="__stdcall">
<arg name="TimerQueue">HANDLE</arg>
<arg name="Timer">HANDLE</arg>
</function>

<function name="DeleteTimerQueue" ret="BOOL" convention="__stdcall">
<arg name="TimerQueue">HANDLE</arg>
</function>
  typedef<fnptr name="PTP_WIN32_IO_CALLBACK" ret="void" convention="__stdcall">
<arg name="Instance">PTP_CALLBACK_INSTANCE</arg>
<arg name="Context">PVOID                </arg>
<arg name="Overlapped">PVOID                </arg>
<arg name="IoResult">ULONG                </arg>
<arg name="NumberOfBytesTransferred">ULONG_PTR            </arg>
<arg name="Io">PTP_IO               </arg>
</function>

<function name="CreateThreadpool" ret="PTP_POOL" convention="__stdcall">
<arg name="reserved">PVOID</arg>
</function>

<function name="SetThreadpoolThreadMaximum" ret="void" convention="__stdcall">
<arg name="ptpp">PTP_POOL</arg>
<arg name="cthrdMost">DWORD   </arg>
</function>

<function name="SetThreadpoolThreadMinimum" ret="BOOL" convention="__stdcall">
<arg name="ptpp">PTP_POOL</arg>
<arg name="cthrdMic">DWORD   </arg>
</function>

<function name="CloseThreadpool" ret="void" convention="__stdcall">
<arg name="ptpp">PTP_POOL</arg>
</function>

<function name="CreateThreadpoolCleanupGroup" ret="PTP_CLEANUP_GROUP" convention="__stdcall">
<arg name="void"></arg>
</function>

<function name="CloseThreadpoolCleanupGroupMembers" ret="void" convention="__stdcall">
<arg name="ptpcg">PTP_CLEANUP_GROUP</arg>
<arg name="fCancelPendingCallbacks">BOOL             </arg>
<arg name="pvCleanupContext">PVOID            </arg>
</function>

<function name="CloseThreadpoolCleanupGroup" ret="void" convention="__stdcall">
<arg name="ptpcg">PTP_CLEANUP_GROUP</arg>
</function>
  __forceinline
  void
  InitializeThreadpoolEnvironment(
  PTP_CALLBACK_ENVIRON pcbe
  )
  {
  TpInitializeCallbackEnviron(pcbe);
  }

  __forceinline
  void
  SetThreadpoolCallbackPool(
  PTP_CALLBACK_ENVIRON pcbe,
  PTP_POOL             ptpp
  )
  {
  TpSetCallbackThreadpool(pcbe, ptpp);
  }

  __forceinline
  void
  SetThreadpoolCallbackCleanupGroup(
  PTP_CALLBACK_ENVIRON              pcbe,
  PTP_CLEANUP_GROUP                 ptpcg,
  PTP_CLEANUP_GROUP_CANCEL_CALLBACK pfng
  )
  {
  TpSetCallbackCleanupGroup(pcbe, ptpcg, pfng);
  }

  __forceinline
  void
  SetThreadpoolCallbackRunsLong(
  PTP_CALLBACK_ENVIRON pcbe
  )
  {
  TpSetCallbackLongFunction(pcbe);
  }

  __forceinline
  void
  SetThreadpoolCallbackLibrary(
  PTP_CALLBACK_ENVIRON pcbe,
  PVOID                mod
  )
  {
  TpSetCallbackRaceWithDll(pcbe, mod);
  }

  __forceinline
  void
  DestroyThreadpoolEnvironment(
  PTP_CALLBACK_ENVIRON pcbe
  )
  {
  TpDestroyCallbackEnviron(pcbe);
  }
<function name="SetEventWhenCallbackReturns" ret="void" convention="__stdcall">
<arg name="pci">PTP_CALLBACK_INSTANCE</arg>
<arg name="evt">HANDLE               </arg>
</function>

<function name="ReleaseSemaphoreWhenCallbackReturns" ret="void" convention="__stdcall">
<arg name="pci">PTP_CALLBACK_INSTANCE</arg>
<arg name="sem">HANDLE               </arg>
<arg name="crel">DWORD                </arg>
</function>

<function name="ReleaseMutexWhenCallbackReturns" ret="void" convention="__stdcall">
<arg name="pci">PTP_CALLBACK_INSTANCE</arg>
<arg name="mut">HANDLE               </arg>
</function>

<function name="LeaveCriticalSectionWhenCallbackReturns" ret="void" convention="__stdcall">
<arg name="pci">PTP_CALLBACK_INSTANCE</arg>
<arg name="pcs">PCRITICAL_SECTION    </arg>
</function>

<function name="FreeLibraryWhenCallbackReturns" ret="void" convention="__stdcall">
<arg name="pci">PTP_CALLBACK_INSTANCE</arg>
<arg name="mod">HMODULE              </arg>
</function>

<function name="CallbackMayRunLong" ret="BOOL" convention="__stdcall">
<arg name="pci">PTP_CALLBACK_INSTANCE</arg>
</function>

<function name="DisassociateCurrentThreadFromCallback" ret="void" convention="__stdcall">
<arg name="pci">PTP_CALLBACK_INSTANCE</arg>
</function>

<function name="TrySubmitThreadpoolCallback" ret="BOOL" convention="__stdcall">
<arg name="pfns">PTP_SIMPLE_CALLBACK </arg>
<arg name="pv">PVOID               </arg>
<arg name="pcbe">PTP_CALLBACK_ENVIRON</arg>
</function>

<function name="CreateThreadpoolWork" ret="PTP_WORK" convention="__stdcall">
<arg name="pfnwk">PTP_WORK_CALLBACK   </arg>
<arg name="pv">PVOID               </arg>
<arg name="pcbe">PTP_CALLBACK_ENVIRON</arg>
</function>

<function name="SubmitThreadpoolWork" ret="void" convention="__stdcall">
<arg name="pwk">PTP_WORK</arg>
</function>

<function name="WaitForThreadpoolWorkCallbacks" ret="void" convention="__stdcall">
<arg name="pwk">PTP_WORK</arg>
<arg name="fCancelPendingCallbacks">BOOL    </arg>
</function>

<function name="CloseThreadpoolWork" ret="void" convention="__stdcall">
<arg name="pwk">PTP_WORK</arg>
</function>

<function name="CreateThreadpoolTimer" ret="PTP_TIMER" convention="__stdcall">
<arg name="pfnti">PTP_TIMER_CALLBACK  </arg>
<arg name="pv">PVOID               </arg>
<arg name="pcbe">PTP_CALLBACK_ENVIRON</arg>
</function>

<function name="SetThreadpoolTimer" ret="void" convention="__stdcall">
<arg name="pti">PTP_TIMER</arg>
<arg name="pftDueTime">PFILETIME</arg>
<arg name="msPeriod">DWORD    </arg>
<arg name="msWindowLength">DWORD    </arg>
</function>

<function name="IsThreadpoolTimerSet" ret="BOOL" convention="__stdcall">
<arg name="pti">PTP_TIMER</arg>
</function>

<function name="WaitForThreadpoolTimerCallbacks" ret="void" convention="__stdcall">
<arg name="pti">PTP_TIMER</arg>
<arg name="fCancelPendingCallbacks">BOOL     </arg>
</function>

<function name="CloseThreadpoolTimer" ret="void" convention="__stdcall">
<arg name="pti">PTP_TIMER</arg>
</function>

<function name="CreateThreadpoolWait" ret="PTP_WAIT" convention="__stdcall">
<arg name="pfnwa">PTP_WAIT_CALLBACK   </arg>
<arg name="pv">PVOID               </arg>
<arg name="pcbe">PTP_CALLBACK_ENVIRON</arg>
</function>

<function name="SetThreadpoolWait" ret="void" convention="__stdcall">
<arg name="pwa">PTP_WAIT </arg>
<arg name="h">HANDLE   </arg>
<arg name="pftTimeout">PFILETIME</arg>
</function>

<function name="WaitForThreadpoolWaitCallbacks" ret="void" convention="__stdcall">
<arg name="pwa">PTP_WAIT</arg>
<arg name="fCancelPendingCallbacks">BOOL    </arg>
</function>

<function name="CloseThreadpoolWait" ret="void" convention="__stdcall">
<arg name="pwa">PTP_WAIT</arg>
</function>

<function name="CreateThreadpoolIo" ret="PTP_IO" convention="__stdcall">
<arg name="fl">HANDLE               </arg>
<arg name="pfnio">PTP_WIN32_IO_CALLBACK</arg>
<arg name="pv">PVOID                </arg>
<arg name="pcbe">PTP_CALLBACK_ENVIRON </arg>
</function>

<function name="StartThreadpoolIo" ret="void" convention="__stdcall">
<arg name="pio">PTP_IO</arg>
</function>

<function name="CancelThreadpoolIo" ret="void" convention="__stdcall">
<arg name="pio">PTP_IO</arg>
</function>

<function name="WaitForThreadpoolIoCallbacks" ret="void" convention="__stdcall">
<arg name="pio">PTP_IO</arg>
<arg name="fCancelPendingCallbacks">BOOL  </arg>
</function>

<function name="CloseThreadpoolIo" ret="void" convention="__stdcall">
<arg name="pio">PTP_IO</arg>
</function>
<function name="CreatePrivateNamespaceA" ret="HANDLE" convention="__stdcall">
<arg name="lpPrivateNamespaceAttributes">LPSECURITY_ATTRIBUTES</arg>
<arg name="lpBoundaryDescriptor">LPVOID</arg>
<arg name="lpAliasPrefix">LPCSTR</arg>
</function>
<function name="CreatePrivateNamespaceW" ret="HANDLE" convention="__stdcall">
<arg name="lpPrivateNamespaceAttributes">LPSECURITY_ATTRIBUTES</arg>
<arg name="lpBoundaryDescriptor">LPVOID</arg>
<arg name="lpAliasPrefix">LPCWSTR</arg>
</function>
<function name="OpenPrivateNamespaceA" ret="HANDLE" convention="__stdcall">
<arg name="lpBoundaryDescriptor">LPVOID</arg>
<arg name="lpAliasPrefix">LPCSTR</arg>
</function>
<function name="OpenPrivateNamespaceW" ret="HANDLE" convention="__stdcall">
<arg name="lpBoundaryDescriptor">LPVOID</arg>
<arg name="lpAliasPrefix">LPCWSTR</arg>
</function>
<function name="ClosePrivateNamespace" ret="BOOLEAN" convention="__stdcall">
<arg name="Handle">HANDLE</arg>
<arg name="Flags">ULONG</arg>
</function>
  HANDLE
<function name="CreateBoundaryDescriptorA" ret="" convention="__stdcall">
<arg name="Name">LPCSTR</arg>
<arg name="Flags">ULONG</arg>
</function>

  HANDLE
<function name="CreateBoundaryDescriptorW" ret="" convention="__stdcall">
<arg name="Name">LPCWSTR</arg>
<arg name="Flags">ULONG</arg>
</function>
<function name="AddSIDToBoundaryDescriptor" ret="BOOL" convention="__stdcall">
<arg name="BoundaryDescriptor">HANDLE *</arg>
<arg name="RequiredSid">PSID</arg>
</function>
<function name="DeleteBoundaryDescriptor" ret="void" convention="__stdcall">
<arg name="BoundaryDescriptor">HANDLE</arg>
</function>

<struct name="tagHW_PROFILE_INFOA">
<field name="dwDockInfo">DWORD</field>
<field name="szHwProfileGuid[39]">CHAR</field>
<field name="szHwProfileName[80]">CHAR</field>
</struct>
<typedefprev id="HW_PROFILE_INFOA"/>
<typedefptrprev id="LPHW_PROFILE_INFOA"/>
<struct name="tagHW_PROFILE_INFOW">
<field name="dwDockInfo">DWORD</field>
<field name="szHwProfileGuid[39]">WCHAR</field>
<field name="szHwProfileName[80]">WCHAR</field>
</struct>
<typedefprev id="HW_PROFILE_INFOW"/>
<typedefptrprev id="LPHW_PROFILE_INFOW"/>

  typedef HW_PROFILE_INFOA HW_PROFILE_INFO;
  typedef LPHW_PROFILE_INFOA LPHW_PROFILE_INFO;
<function name="GetCurrentHwProfileA" ret="BOOL" convention="__stdcall">
<arg name="lpHwProfileInfo">LPHW_PROFILE_INFOA </arg>
</function>
<function name="GetCurrentHwProfileW" ret="BOOL" convention="__stdcall">
<arg name="lpHwProfileInfo">LPHW_PROFILE_INFOW </arg>
</function>

<function name="QueryPerformanceCounter" ret="BOOL" convention="__stdcall">
<arg name="lpPerformanceCount">LARGE_INTEGER *</arg>
</function>

<function name="QueryPerformanceFrequency" ret="BOOL" convention="__stdcall">
<arg name="lpFrequency">LARGE_INTEGER *</arg>
</function>
<function name="GetVersionExA" ret="BOOL" convention="__stdcall">
<arg name="lpVersionInformation">LPOSVERSIONINFOA</arg>
</function>
<function name="GetVersionExW" ret="BOOL" convention="__stdcall">
<arg name="lpVersionInformation">LPOSVERSIONINFOW</arg>
</function>

<function name="VerifyVersionInfoA" ret="BOOL" convention="__stdcall">
<arg name="lpVersionInformation">LPOSVERSIONINFOEXA</arg>
<arg name="dwTypeMask">DWORD</arg>
<arg name="dwlConditionMask">DWORDLONG</arg>
</function>
<function name="VerifyVersionInfoW" ret="BOOL" convention="__stdcall">
<arg name="lpVersionInformation">LPOSVERSIONINFOEXW</arg>
<arg name="dwTypeMask">DWORD</arg>
<arg name="dwlConditionMask">DWORDLONG</arg>
</function>

<function name="GetProductInfo" ret="BOOL" convention="__stdcall">
<arg name="dwOSMajorVersion">DWORD </arg>
<arg name="dwOSMinorVersion">DWORD </arg>
<arg name="dwSpMajorVersion">DWORD </arg>
<arg name="dwSpMinorVersion">DWORD </arg>
<arg name="pdwReturnedProductType">PDWORD</arg>
</function>

  #line 1 "\\program files\\Microsoft SDKs\\Windows\\v6.0A\\Include\\winerror.h"
  #pragma once



 
 
 

<struct name="_SYSTEM_POWER_STATUS">
<field name="ACLineStatus">BYTE</field>
<field name="BatteryFlag">BYTE</field>
<field name="BatteryLifePercent">BYTE</field>
<field name="Reserved1">BYTE</field>
<field name="BatteryLifeTime">DWORD</field>
<field name="BatteryFullLifeTime">DWORD</field>
</struct>
<typedefprev id="SYSTEM_POWER_STATUS"/>
<typedefptrprev id="LPSYSTEM_POWER_STATUS"/>

<function name="GetSystemPowerStatus" ret="BOOL" convention="__stdcall">
<arg name="lpSystemPowerStatus">LPSYSTEM_POWER_STATUS</arg>
</function>

<function name="SetSystemPowerState" ret="BOOL" convention="__stdcall">     BOOL fSuspend,
<arg name="fForce">BOOL</arg>
</function>
<function name="AllocateUserPhysicalPages" ret="BOOL" convention="__stdcall">
<arg name="hProcess">HANDLE</arg>
<arg name="NumberOfPages">PULONG_PTR</arg>
<arg name="PageArray">PULONG_PTR</arg>
</function>
<function name="AllocateUserPhysicalPagesNuma" ret="BOOL" convention="__stdcall">
<arg name="hProcess">HANDLE</arg>
<arg name="NumberOfPages">PULONG_PTR</arg>
<arg name="PageArray">PULONG_PTR</arg>
<arg name="nndPreferred">DWORD</arg>
</function>
<function name="FreeUserPhysicalPages" ret="BOOL" convention="__stdcall">
<arg name="hProcess">HANDLE</arg>
<arg name="NumberOfPages">PULONG_PTR</arg>
<arg name="PageArray">PULONG_PTR</arg>
</function>

<function name="MapUserPhysicalPages" ret="BOOL" convention="__stdcall">
<arg name="VirtualAddress">PVOID</arg>
<arg name="NumberOfPages">ULONG_PTR</arg>
<arg name="PageArray">PULONG_PTR</arg>
</function>

<function name="MapUserPhysicalPagesScatter" ret="BOOL" convention="__stdcall">
<arg name="VirtualAddresses">PVOID *</arg>

     ULONG_PTR NumberOfPages,
<arg name="PageArray">PULONG_PTR</arg>
</function>

<function name="CreateJobObjectA" ret="HANDLE" convention="__stdcall">
<arg name="lpJobAttributes">LPSECURITY_ATTRIBUTES</arg>
<arg name="lpName">LPCSTR</arg>
</function>
<function name="CreateJobObjectW" ret="HANDLE" convention="__stdcall">
<arg name="lpJobAttributes">LPSECURITY_ATTRIBUTES</arg>
<arg name="lpName">LPCWSTR</arg>
</function>
<function name="OpenJobObjectA" ret="HANDLE" convention="__stdcall">
<arg name="dwDesiredAccess">DWORD</arg>
<arg name="bInheritHandle">BOOL</arg>
<arg name="lpName">LPCSTR</arg>
</function>
<function name="OpenJobObjectW" ret="HANDLE" convention="__stdcall">
<arg name="dwDesiredAccess">DWORD</arg>
<arg name="bInheritHandle">BOOL</arg>
<arg name="lpName">LPCWSTR</arg>
</function>
<function name="AssignProcessToJobObject" ret="BOOL" convention="__stdcall">
<arg name="hJob">HANDLE</arg>
<arg name="hProcess">HANDLE</arg>
</function>

<function name="TerminateJobObject" ret="BOOL" convention="__stdcall">
<arg name="hJob">HANDLE</arg>
<arg name="uExitCode">UINT</arg>
</function>

<function name="QueryInformationJobObject" ret="BOOL" convention="__stdcall">
<arg name="hJob">HANDLE</arg>
<arg name="JobObjectInformationClass">JOBOBJECTINFOCLASS</arg>
<arg name="lpJobObjectInformation">LPVOID</arg>
<arg name="cbJobObjectInformationLength">DWORD</arg>
<arg name="lpReturnLength">LPDWORD</arg>
</function>

<function name="SetInformationJobObject" ret="BOOL" convention="__stdcall">
<arg name="hJob">HANDLE</arg>
<arg name="JobObjectInformationClass">JOBOBJECTINFOCLASS</arg>
<arg name="lpJobObjectInformation">LPVOID</arg>
<arg name="cbJobObjectInformationLength">DWORD</arg>
</function>
<function name="IsProcessInJob" ret="BOOL" convention="__stdcall">
<arg name="ProcessHandle">HANDLE</arg>
<arg name="JobHandle">HANDLE</arg>
<arg name="Result">PBOOL</arg>
</function>
<function name="CreateJobSet" ret="BOOL" convention="__stdcall">
<arg name="NumJob">ULONG</arg>
<arg name="UserJobSet">PJOB_SET_ARRAY</arg>
<arg name="Flags">ULONG</arg>
</function>

<function name="AddVectoredExceptionHandler" ret="PVOID" convention="__stdcall">
<arg name="First">ULONG</arg>
<arg name="Handler">PVECTORED_EXCEPTION_HANDLER</arg>
</function>

<function name="RemoveVectoredExceptionHandler" ret="ULONG" convention="__stdcall">

<arg name="Handle">PVOID</arg>
</function>

<function name="AddVectoredContinueHandler" ret="PVOID" convention="__stdcall">
<arg name="First">ULONG</arg>
<arg name="Handler">PVECTORED_EXCEPTION_HANDLER</arg>
</function>

<function name="RemoveVectoredContinueHandler" ret="ULONG" convention="__stdcall">

<arg name="Handle">PVOID</arg>
</function>

<function name="FindFirstVolumeA" ret="HANDLE" convention="__stdcall">
<arg name="lpszVolumeName">LPSTR</arg>
<arg name="cchBufferLength">DWORD</arg>
</function>

<function name="FindFirstVolumeW" ret="HANDLE" convention="__stdcall">
<arg name="lpszVolumeName">LPWSTR</arg>
<arg name="cchBufferLength">DWORD</arg>
</function>
<function name="FindNextVolumeA" ret="BOOL" convention="__stdcall">
<arg name="hFindVolume">HANDLE</arg>
<arg name="lpszVolumeName">LPSTR</arg>
<arg name="cchBufferLength">DWORD</arg>
</function>
<function name="FindNextVolumeW" ret="BOOL" convention="__stdcall">
<arg name="hFindVolume">HANDLE</arg>
<arg name="lpszVolumeName">LPWSTR</arg>
<arg name="cchBufferLength">DWORD</arg>
</function>
<function name="FindVolumeClose" ret="BOOL" convention="__stdcall">
<arg name="hFindVolume">HANDLE</arg>
</function>


<function name="FindFirstVolumeMountPointA" ret="HANDLE" convention="__stdcall">
<arg name="lpszRootPathName">LPCSTR</arg>
<arg name="lpszVolumeMountPoint">LPSTR</arg>
<arg name="cchBufferLength">DWORD</arg>
</function>

<function name="FindFirstVolumeMountPointW" ret="HANDLE" convention="__stdcall">
<arg name="lpszRootPathName">LPCWSTR</arg>
<arg name="lpszVolumeMountPoint">LPWSTR</arg>
<arg name="cchBufferLength">DWORD</arg>
</function>
<function name="FindNextVolumeMountPointA" ret="BOOL" convention="__stdcall">
<arg name="hFindVolumeMountPoint">HANDLE</arg>
<arg name="lpszVolumeMountPoint">LPSTR</arg>
<arg name="cchBufferLength">DWORD</arg>
</function>
<function name="FindNextVolumeMountPointW" ret="BOOL" convention="__stdcall">
<arg name="hFindVolumeMountPoint">HANDLE</arg>
<arg name="lpszVolumeMountPoint">LPWSTR</arg>
<arg name="cchBufferLength">DWORD</arg>
</function>
<function name="FindVolumeMountPointClose" ret="BOOL" convention="__stdcall">
<arg name="hFindVolumeMountPoint">HANDLE</arg>
</function>

<function name="SetVolumeMountPointA" ret="BOOL" convention="__stdcall">
<arg name="lpszVolumeMountPoint">LPCSTR</arg>
<arg name="lpszVolumeName">LPCSTR</arg>
</function>
<function name="SetVolumeMountPointW" ret="BOOL" convention="__stdcall">
<arg name="lpszVolumeMountPoint">LPCWSTR</arg>
<arg name="lpszVolumeName">LPCWSTR</arg>
</function>
<function name="DeleteVolumeMountPointA" ret="BOOL" convention="__stdcall">
<arg name="lpszVolumeMountPoint">LPCSTR</arg>
</function>
<function name="DeleteVolumeMountPointW" ret="BOOL" convention="__stdcall">
<arg name="lpszVolumeMountPoint">LPCWSTR</arg>
</function>
<function name="GetVolumeNameForVolumeMountPointA" ret="BOOL" convention="__stdcall">
<arg name="lpszVolumeMountPoint">LPCSTR</arg>
<arg name="lpszVolumeName">LPSTR</arg>
<arg name="cchBufferLength">DWORD</arg>
</function>
<function name="GetVolumeNameForVolumeMountPointW" ret="BOOL" convention="__stdcall">
<arg name="lpszVolumeMountPoint">LPCWSTR</arg>
<arg name="lpszVolumeName">LPWSTR</arg>
<arg name="cchBufferLength">DWORD</arg>
</function>
<function name="GetVolumePathNameA" ret="BOOL" convention="__stdcall">
<arg name="lpszFileName">LPCSTR</arg>
<arg name="lpszVolumePathName">LPSTR</arg>
<arg name="cchBufferLength">DWORD</arg>
</function>
<function name="GetVolumePathNameW" ret="BOOL" convention="__stdcall">
<arg name="lpszFileName">LPCWSTR</arg>
<arg name="lpszVolumePathName">LPWSTR</arg>
<arg name="cchBufferLength">DWORD</arg>
</function>
<function name="GetVolumePathNamesForVolumeNameA" ret="BOOL" convention="__stdcall">
<arg name="lpszVolumeName">LPCSTR</arg>
<arg name="lpszVolumePathNames">LPCH</arg>
<arg name="cchBufferLength">DWORD</arg>
<arg name="lpcchReturnLength">PDWORD</arg>
</function>
<function name="GetVolumePathNamesForVolumeNameW" ret="BOOL" convention="__stdcall">
<arg name="lpszVolumeName">LPCWSTR</arg>
<arg name="lpszVolumePathNames">LPWCH</arg>
<arg name="cchBufferLength">DWORD</arg>
<arg name="lpcchReturnLength">PDWORD</arg>
</function>
<struct name="tagACTCTXA">
<field name="cbSize">ULONG</field>
<field name="dwFlags">DWORD</field>
<field name="lpSource">LPCSTR</field>
<field name="wProcessorArchitecture">USHORT</field>
<field name="wLangId">LANGID</field>
<field name="lpAssemblyDirectory">LPCSTR</field>
<field name="lpResourceName">LPCSTR</field>
<field name="lpApplicationName">LPCSTR</field>
<field name="hModule">HMODULE</field>
</struct>
<typedefprev id="ACTCTXA"/>
<typedefptrprev id="PACTCTXA"/>
<struct name="tagACTCTXW">
<field name="cbSize">ULONG</field>
<field name="dwFlags">DWORD</field>
<field name="lpSource">LPCWSTR</field>
<field name="wProcessorArchitecture">USHORT</field>
<field name="wLangId">LANGID</field>
<field name="lpAssemblyDirectory">LPCWSTR</field>
<field name="lpResourceName">LPCWSTR</field>
<field name="lpApplicationName">LPCWSTR</field>
<field name="hModule">HMODULE</field>
</struct>
<typedefprev id="ACTCTXW"/>
<typedefptrprev id="PACTCTXW"/>

typedef ACTCTXA ACTCTX;
typedef PACTCTXA PACTCTX;

typedef const ACTCTXA *PCACTCTXA;
typedef const ACTCTXW *PCACTCTXW;
typedef PCACTCTXA PCACTCTX;


<function name="CreateActCtxA" ret="HANDLE" convention="__stdcall">
<arg name="pActCtx">PCACTCTXA</arg>
</function>

<function name="CreateActCtxW" ret="HANDLE" convention="__stdcall">
<arg name="pActCtx">PCACTCTXW</arg>
</function>
<function name="AddRefActCtx" ret="void" convention="__stdcall">
<arg name="hActCtx">HANDLE</arg>
</function>
<function name="ReleaseActCtx" ret="void" convention="__stdcall">
<arg name="hActCtx">HANDLE</arg>
</function>

<function name="ZombifyActCtx" ret="BOOL" convention="__stdcall">
<arg name="hActCtx">HANDLE</arg>
</function>
<function name="ActivateActCtx" ret="BOOL" convention="__stdcall">
<arg name="hActCtx">HANDLE</arg>
<arg name="lpCookie">ULONG_PTR *</arg>
</function>

<function name="DeactivateActCtx" ret="BOOL" convention="__stdcall">
<arg name="dwFlags">DWORD</arg>
<arg name="ulCookie">ULONG_PTR</arg>
</function>

<function name="GetCurrentActCtx" ret="BOOL" convention="__stdcall">
     HANDLE *lphActCtx);
<struct name="tagACTCTX_SECTION_KEYED_DATA_2600">
<field name="cbSize">ULONG</field>
<field name="ulDataFormatVersion">ULONG</field>
<field name="lpData">PVOID</field>
<field name="ulLength">ULONG</field>
<field name="lpSectionGlobalData">PVOID</field>
<field name="ulSectionGlobalDataLength">ULONG</field>
<field name="lpSectionBase">PVOID</field>
<field name="ulSectionTotalLength">ULONG</field>
<field name="hActCtx">HANDLE</field>
<field name="ulAssemblyRosterIndex">ULONG</field>
</struct>
<typedefprev id="ACTCTX_SECTION_KEYED_DATA_2600"/>
<typedefptrprev id="PACTCTX_SECTION_KEYED_DATA_2600"/>
typedef const ACTCTX_SECTION_KEYED_DATA_2600 * PCACTCTX_SECTION_KEYED_DATA_2600;

<struct name="tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA">
<field name="lpInformation">PVOID</field>
<field name="lpSectionBase">PVOID</field>
<field name="ulSectionLength">ULONG</field>
<field name="lpSectionGlobalDataBase">PVOID</field>
<field name="ulSectionGlobalDataLength">ULONG</field>
</struct>
<typedefprev id="ACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA"/>
<typedefptrprev id="PACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA"/>
typedef const ACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA *PCACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA;

<struct name="tagACTCTX_SECTION_KEYED_DATA">
<field name="cbSize">ULONG</field>
<field name="ulDataFormatVersion">ULONG</field>
<field name="lpData">PVOID</field>
<field name="ulLength">ULONG</field>
<field name="lpSectionGlobalData">PVOID</field>
<field name="ulSectionGlobalDataLength">ULONG</field>
<field name="lpSectionBase">PVOID</field>
<field name="ulSectionTotalLength">ULONG</field>
<field name="hActCtx">HANDLE</field>
<field name="ulAssemblyRosterIndex">ULONG</field>
<field name="ulFlags">ULONG</field>
<field name="AssemblyMetadata">ACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA</field>
} ACTCTX_SECTION_KEYED_DATA, *PACTCTX_SECTION_KEYED_DATA;
typedef const ACTCTX_SECTION_KEYED_DATA * PCACTCTX_SECTION_KEYED_DATA;
<function name="FindActCtxSectionStringA" ret="BOOL" convention="__stdcall">
<arg name="dwFlags">DWORD</arg>

     const GUID *lpExtensionGuid,
           ULONG ulSectionId,
           LPCSTR lpStringToFind,
<arg name="ReturnedData">PACTCTX_SECTION_KEYED_DATA</arg>
</function>
<function name="FindActCtxSectionStringW" ret="BOOL" convention="__stdcall">
<arg name="dwFlags">DWORD</arg>

     const GUID *lpExtensionGuid,
           ULONG ulSectionId,
           LPCWSTR lpStringToFind,
<arg name="ReturnedData">PACTCTX_SECTION_KEYED_DATA</arg>
</function>
<function name="FindActCtxSectionGuid" ret="BOOL" convention="__stdcall">
<arg name="dwFlags">DWORD</arg>

     const GUID *lpExtensionGuid,
           ULONG ulSectionId,
       const GUID *lpGuidToFind,
<arg name="ReturnedData">PACTCTX_SECTION_KEYED_DATA</arg>
</function>
<struct name="_ACTIVATION_CONTEXT_BASIC_INFORMATION">
<field name="hActCtx">HANDLE</field>
<field name="dwFlags">DWORD</field>
</struct>
<typedefprev id="ACTIVATION_CONTEXT_BASIC_INFORMATION"/>
<typedefptrprev id="PACTIVATION_CONTEXT_BASIC_INFORMATION"/>

<typedef name="PCACTIVATION_CONTEXT_BASIC_INFORMATION">const _ACTIVATION_CONTEXT_BASIC_INFORMATION *</typedef>
<function name="QueryActCtxW" ret="BOOL" convention="__stdcall">
<arg name="dwFlags">DWORD</arg>
<arg name="hActCtx">HANDLE</arg>
<arg name="pvSubInstance">PVOID</arg>
<arg name="ulInfoClass">ULONG</arg>
<arg name="pvBuffer">PVOID</arg>
<arg name="cbBuffer">SIZE_T</arg>
<arg name="pcbWrittenOrRequired">SIZE_T *</arg>
</function>

typedef<fnptr name="PQUERYACTCTXW_FUNC" ret="BOOL" convention="__stdcall">
<arg name="dwFlags">DWORD</arg>
<arg name="hActCtx">HANDLE</arg>
<arg name="pvSubInstance">PVOID</arg>
<arg name="ulInfoClass">ULONG</arg>
<arg name="pvBuffer">PVOID</arg>
<arg name="cbBuffer">SIZE_T</arg>
<arg name="pcbWrittenOrRequired">SIZE_T *</arg>
</function>

<function name="ProcessIdToSessionId" ret="BOOL" convention="__stdcall">
<arg name="dwProcessId">DWORD</arg>
<arg name="pSessionId">DWORD *</arg>
</function>
<function name="WTSGetActiveConsoleSessionId" ret="DWORD" convention="__stdcall">
<arg name="void"></arg>
</function>

<function name="IsWow64Process" ret="BOOL" convention="__stdcall">
<arg name="hProcess">HANDLE</arg>
<arg name="Wow64Process">PBOOL</arg>
</function>
<function name="GetLogicalProcessorInformation" ret="BOOL" convention="__stdcall">
<arg name="Buffer">PSYSTEM_LOGICAL_PROCESSOR_INFORMATION</arg>
<arg name="ReturnedLength">PDWORD</arg>
</function>
<function name="GetNumaHighestNodeNumber" ret="BOOL" convention="__stdcall">
<arg name="HighestNodeNumber">PULONG</arg>
</function>

<function name="GetNumaProcessorNode" ret="BOOL" convention="__stdcall">
<arg name="Processor">UCHAR</arg>
<arg name="NodeNumber">PUCHAR</arg>
</function>

<function name="GetNumaNodeProcessorMask" ret="BOOL" convention="__stdcall">
<arg name="Node">UCHAR</arg>
<arg name="ProcessorMask">PULONGLONG</arg>
</function>

<function name="GetNumaAvailableMemoryNode" ret="BOOL" convention="__stdcall">
<arg name="Node">UCHAR</arg>
<arg name="AvailableBytes">PULONGLONG</arg>
</function>
<function name="GetNumaProximityNode" ret="BOOL" convention="__stdcall">
<arg name="ProximityId">ULONG</arg>
<arg name="NodeNumber">PUCHAR</arg>
</function>
typedef<fnptr name="APPLICATION_RECOVERY_CALLBACK" ret="DWORD" convention="__stdcall">
PVOID pvParameter);

<function name="RegisterApplicationRecoveryCallback" ret="HRESULT" convention="__stdcall">
<arg name="pRecoveyCallback">APPLICATION_RECOVERY_CALLBACK</arg>
<arg name="pvParameter">PVOID</arg>
<arg name="dwPingInterval">DWORD</arg>
<arg name="dwFlags">DWORD</arg>
</function>

<function name="UnregisterApplicationRecoveryCallback" ret="HRESULT" convention="__stdcall">
);

<function name="RegisterApplicationRestart" ret="HRESULT" convention="__stdcall">
<arg name="pwzCommandline">PCWSTR</arg>
<arg name="dwFlags">DWORD</arg>
</function>

<function name="UnregisterApplicationRestart" ret="HRESULT" convention="__stdcall">
);
<function name="GetApplicationRecoveryCallback" ret="HRESULT" convention="__stdcall">
<arg name="hProcess">HANDLE</arg>
<arg name="pRecoveryCallback">APPLICATION_RECOVERY_CALLBACK*</arg>
<arg name="ppvParameter">PVOID*</arg>
<arg name="pdwPingInterval">PDWORD</arg>
<arg name="pdwFlags">PDWORD</arg>
</function>

<function name="GetApplicationRestartSettings" ret="HRESULT" convention="__stdcall">
<arg name="hProcess">HANDLE</arg>
<arg name="pwzCommandline">PWSTR</arg>
<arg name="pcchSize">PDWORD</arg>
<arg name="pdwFlags">PDWORD</arg>
</function>

<function name="ApplicationRecoveryInProgress" ret="HRESULT" convention="__stdcall">
<arg name="pbCancelled">PBOOL</arg>
</function>

<function name="ApplicationRecoveryFinished" ret="void" convention="__stdcall">
<arg name="bSuccess">BOOL</arg>
</function>
typedef enum _FILE_INFO_BY_HANDLE_CLASS {
    FileBasicInfo,
    FileStandardInfo,
    FileNameInfo,
    FileRenameInfo,
    FileDispositionInfo,
    FileAllocationInfo,
    FileEndOfFileInfo,
    FileStreamInfo,
    FileCompressionInfo,
    FileAttributeTagInfo,
    FileIdBothDirectoryInfo,
    FileIdBothDirectoryRestartInfo,
    FileIoPriorityHintInfo,
    MaximumFileInfoByHandleClass
} FILE_INFO_BY_HANDLE_CLASS, *PFILE_INFO_BY_HANDLE_CLASS;

<struct name="_FILE_BASIC_INFO">
<field name="CreationTime">LARGE_INTEGER</field>
<field name="LastAccessTime">LARGE_INTEGER</field>
<field name="LastWriteTime">LARGE_INTEGER</field>
<field name="ChangeTime">LARGE_INTEGER</field>
<field name="FileAttributes">DWORD</field>
</struct>
<typedefprev id="FILE_BASIC_INFO"/>
<typedefptrprev id="PFILE_BASIC_INFO"/>

<struct name="_FILE_STANDARD_INFO">
<field name="AllocationSize">LARGE_INTEGER</field>
<field name="EndOfFile">LARGE_INTEGER</field>
<field name="NumberOfLinks">DWORD</field>
<field name="DeletePending">BOOLEAN</field>
<field name="Directory">BOOLEAN</field>
</struct>
<typedefprev id="FILE_STANDARD_INFO"/>
<typedefptrprev id="PFILE_STANDARD_INFO"/>

<struct name="_FILE_NAME_INFO">
<field name="FileNameLength">DWORD</field>
<field name="FileName[1]">WCHAR</field>
</struct>
<typedefprev id="FILE_NAME_INFO"/>
<typedefptrprev id="PFILE_NAME_INFO"/>

<struct name="_FILE_RENAME_INFO">
<field name="ReplaceIfExists">BOOLEAN</field>
<field name="RootDirectory">HANDLE</field>
<field name="FileNameLength">DWORD</field>
<field name="FileName[1]">WCHAR</field>
</struct>
<typedefprev id="FILE_RENAME_INFO"/>
<typedefptrprev id="PFILE_RENAME_INFO"/>

<struct name="_FILE_ALLOCATION_INFO">
<field name="AllocationSize">LARGE_INTEGER</field>
</struct>
<typedefprev id="FILE_ALLOCATION_INFO"/>
<typedefptrprev id="PFILE_ALLOCATION_INFO"/>

<struct name="_FILE_END_OF_FILE_INFO">
<field name="EndOfFile">LARGE_INTEGER</field>
</struct>
<typedefprev id="FILE_END_OF_FILE_INFO"/>
<typedefptrprev id="PFILE_END_OF_FILE_INFO"/>

<struct name="_FILE_STREAM_INFO">
<field name="NextEntryOffset">DWORD</field>
<field name="StreamNameLength">DWORD</field>
<field name="StreamSize">LARGE_INTEGER</field>
<field name="StreamAllocationSize">LARGE_INTEGER</field>
<field name="StreamName[1]">WCHAR</field>
</struct>
<typedefprev id="FILE_STREAM_INFO"/>
<typedefptrprev id="PFILE_STREAM_INFO"/>

<struct name="_FILE_COMPRESSION_INFO">
<field name="CompressedFileSize">LARGE_INTEGER</field>
<field name="CompressionFormat">WORD</field>
<field name="CompressionUnitShift">UCHAR</field>
<field name="ChunkShift">UCHAR</field>
<field name="ClusterShift">UCHAR</field>
<field name="Reserved[3]">UCHAR</field>
</struct>
<typedefprev id="FILE_COMPRESSION_INFO"/>
<typedefptrprev id="PFILE_COMPRESSION_INFO"/>

<struct name="_FILE_ATTRIBUTE_TAG_INFO">
<field name="FileAttributes">DWORD</field>
<field name="ReparseTag">DWORD</field>
</struct>
<typedefprev id="FILE_ATTRIBUTE_TAG_INFO"/>
<typedefptrprev id="PFILE_ATTRIBUTE_TAG_INFO"/>

<struct name="_FILE_DISPOSITION_INFO">
<field name="DeleteFileA">BOOLEAN</field>
</struct>
<typedefprev id="FILE_DISPOSITION_INFO"/>
<typedefptrprev id="PFILE_DISPOSITION_INFO"/>

<struct name="_FILE_ID_BOTH_DIR_INFO">
<field name="NextEntryOffset">DWORD</field>
<field name="FileIndex">DWORD</field>
<field name="CreationTime">LARGE_INTEGER</field>
<field name="LastAccessTime">LARGE_INTEGER</field>
<field name="LastWriteTime">LARGE_INTEGER</field>
<field name="ChangeTime">LARGE_INTEGER</field>
<field name="EndOfFile">LARGE_INTEGER</field>
<field name="AllocationSize">LARGE_INTEGER</field>
<field name="FileAttributes">DWORD</field>
<field name="FileNameLength">DWORD</field>
<field name="EaSize">DWORD</field>
<field name="ShortNameLength">CCHAR</field>
<field name="ShortName[12]">WCHAR</field>
<field name="FileId">LARGE_INTEGER</field>
<field name="FileName[1]">WCHAR</field>
</struct>
<typedefprev id="FILE_ID_BOTH_DIR_INFO"/>
<typedefptrprev id="PFILE_ID_BOTH_DIR_INFO"/>

typedef enum _PRIORITY_HINT {
      IoPriorityHintVeryLow = 0,
      IoPriorityHintLow,
      IoPriorityHintNormal,
      MaximumIoPriorityHintType
} PRIORITY_HINT;

<struct name="_FILE_IO_PRIORITY_HINT_INFO">
<field name="PriorityHint">PRIORITY_HINT</field>
</struct>
<typedefprev id="FILE_IO_PRIORITY_HINT_INFO"/>
<typedefptrprev id="PFILE_IO_PRIORITY_HINT_INFO"/>

<function name="SetFileInformationByHandle" ret="BOOL" convention="__stdcall">
<arg name="hFile">HANDLE</arg>
<arg name="FileInformationClass">FILE_INFO_BY_HANDLE_CLASS</arg>
<arg name="lpFileInformation">LPVOID</arg>

      DWORD dwBufferSize
);

<function name="GetFileInformationByHandleEx" ret="BOOL" convention="__stdcall">
<arg name="hFile">HANDLE</arg>
<arg name="FileInformationClass">FILE_INFO_BY_HANDLE_CLASS</arg>
<arg name="lpFileInformation">LPVOID</arg>

      DWORD dwBufferSize
);

typedef enum _FILE_ID_TYPE {
      FileIdType,
      ObjectIdType,
      MaximumFileIdType
} FILE_ID_TYPE, *PFILE_ID_TYPE;

<struct name="FILE_ID_DESCRIPTOR">
<field name="dwSize">DWORD</field>
<field name="Type">FILE_ID_TYPE</field>
    union {
        LARGE_INTEGER FileId;
        GUID ObjectId;
    };
} FILE_ID_DESCRIPTOR, *LPFILE_ID_DESCRIPTOR;
HANDLE
__stdcall
OpenFileById (
         HANDLE hVolumeHint,
         LPFILE_ID_DESCRIPTOR lpFileId,
         DWORD dwDesiredAccess,
         DWORD dwShareMode,
     LPSECURITY_ATTRIBUTES lpSecurityAttributes,
<arg name="dwFlagsAndAttributes">DWORD</arg>
</function>

BOOLEAN
__stdcall
CreateSymbolicLinkA (
     LPCSTR lpSymlinkFileName,
     LPCSTR lpTargetFileName,
<arg name="dwFlags">DWORD</arg>
</function>
BOOLEAN
__stdcall
CreateSymbolicLinkW (
     LPCWSTR lpSymlinkFileName,
     LPCWSTR lpTargetFileName,
<arg name="dwFlags">DWORD</arg>
</function>
BOOLEAN
__stdcall
CreateSymbolicLinkTransactedA (
         LPCSTR lpSymlinkFileName,
         LPCSTR lpTargetFileName,
         DWORD dwFlags,
<arg name="hTransaction">HANDLE</arg>
</function>
BOOLEAN
__stdcall
CreateSymbolicLinkTransactedW (
         LPCWSTR lpSymlinkFileName,
         LPCWSTR lpTargetFileName,
         DWORD dwFlags,
<arg name="hTransaction">HANDLE</arg>
</function>
DWORD
__stdcall
GetFinalPathNameByHandleA (
     HANDLE hFile,
     LPSTR lpszFilePath,
     DWORD cchFilePath,
     DWORD dwFlags
);
DWORD
__stdcall
GetFinalPathNameByHandleW (
     HANDLE hFile,
     LPWSTR lpszFilePath,
     DWORD cchFilePath,
     DWORD dwFlags
);
<function name="QueryActCtxSettingsW" ret="BOOL" convention="__stdcall">
<arg name="dwFlags">DWORD</arg>
<arg name="hActCtx">HANDLE</arg>
<arg name="settingsNameSpace">PCWSTR</arg>
<arg name="settingName">PCWSTR</arg>
<arg name="pvBuffer">PWSTR</arg>
<arg name="dwBuffer">SIZE_T</arg>
<arg name="pdwWrittenOrRequired">SIZE_T *</arg>
</function>

#line 1 "\\program files\\Microsoft SDKs\\Windows\\v6.0A\\Include\\wingdi.h"
#pragma once
<struct name="_DRAWPATRECT">
<field name="ptPosition">POINT</field>
<field name="ptSize">POINT</field>
<field name="wStyle">WORD</field>
<field name="wPattern">WORD</field>
</struct>
<typedefprev id="DRAWPATRECT"/>
<typedefptrprev id="PDRAWPATRECT"/>
<struct name="_PSINJECTDATA">

    DWORD   DataBytes;      
    WORD    InjectionPoint; 
    WORD    PageNumber;     

    

} PSINJECTDATA, *PPSINJECTDATA;
<struct name="_PSFEATURE_OUTPUT">

    BOOL bPageIndependent;
    BOOL bSetPageDevice;

} PSFEATURE_OUTPUT, *PPSFEATURE_OUTPUT;
<struct name="_PSFEATURE_CUSTPAPER">

    LONG lOrientation;
    LONG lWidth;
    LONG lHeight;
    LONG lWidthOffset;
    LONG lHeightOffset;

} PSFEATURE_CUSTPAPER, *PPSFEATURE_CUSTPAPER;
<struct name="tagXFORM">
<field name="eM11">FLOAT</field>
<field name="eM12">FLOAT</field>
<field name="eM21">FLOAT</field>
<field name="eM22">FLOAT</field>
<field name="eDx">FLOAT</field>
<field name="eDy">FLOAT</field>
  } XFORM, *PXFORM,  *LPXFORM;
<struct name="tagBITMAP">
<field name="bmType">LONG</field>
<field name="bmWidth">LONG</field>
<field name="bmHeight">LONG</field>
<field name="bmWidthBytes">LONG</field>
<field name="bmPlanes">WORD</field>
<field name="bmBitsPixel">WORD</field>
<field name="bmBits">LPVOID</field>
  } BITMAP, *PBITMAP,  *NPBITMAP,  *LPBITMAP;

#line 1 "\\program files\\Microsoft SDKs\\Windows\\v6.0A\\Include\\pshpack1.h"
#pragma warning(disable:4103)

#pragma pack(push,1)
<struct name="tagRGBTRIPLE">
<field name="rgbtBlue">BYTE</field>
<field name="rgbtGreen">BYTE</field>
<field name="rgbtRed">BYTE</field>
} RGBTRIPLE, *PRGBTRIPLE,  *NPRGBTRIPLE,  *LPRGBTRIPLE;
#line 1 "\\program files\\Microsoft SDKs\\Windows\\v6.0A\\Include\\poppack.h"
#pragma warning(disable:4103)

#pragma pack(pop)

<struct name="tagRGBQUAD">
<field name="rgbBlue">BYTE</field>
<field name="rgbGreen">BYTE</field>
<field name="rgbRed">BYTE</field>
<field name="rgbReserved">BYTE</field>
} RGBQUAD;
typedef RGBQUAD * LPRGBQUAD;

typedef LONG   LCSCSTYPE;
typedef LONG    LCSGAMUTMATCH;
typedef long            FXPT16DOT16,  *LPFXPT16DOT16;
typedef long            FXPT2DOT30,  *LPFXPT2DOT30;

<struct name="tagCIEXYZ">
<field name="ciexyzX">FXPT2DOT30</field>
<field name="ciexyzY">FXPT2DOT30</field>
<field name="ciexyzZ">FXPT2DOT30</field>
} CIEXYZ;
typedef CIEXYZ   *LPCIEXYZ;

<struct name="tagICEXYZTRIPLE">
<field name="ciexyzRed">CIEXYZ</field>
<field name="ciexyzGreen">CIEXYZ</field>
<field name="ciexyzBlue">CIEXYZ</field>
} CIEXYZTRIPLE;
typedef CIEXYZTRIPLE     *LPCIEXYZTRIPLE;

<struct name="tagLOGCOLORSPACEA">
<field name="lcsSignature">DWORD</field>
<field name="lcsVersion">DWORD</field>
<field name="lcsSize">DWORD</field>
<field name="lcsCSType">LCSCSTYPE</field>
<field name="lcsIntent">LCSGAMUTMATCH</field>
<field name="lcsEndpoints">CIEXYZTRIPLE</field>
<field name="lcsGammaRed">DWORD</field>
<field name="lcsGammaGreen">DWORD</field>
<field name="lcsGammaBlue">DWORD</field>
<field name="lcsFilename[260]">CHAR</field>
</struct>
<typedefprev id="LOGCOLORSPACEA"/>
<typedefptrprev id="LPLOGCOLORSPACEA"/>
<struct name="tagLOGCOLORSPACEW">
<field name="lcsSignature">DWORD</field>
<field name="lcsVersion">DWORD</field>
<field name="lcsSize">DWORD</field>
<field name="lcsCSType">LCSCSTYPE</field>
<field name="lcsIntent">LCSGAMUTMATCH</field>
<field name="lcsEndpoints">CIEXYZTRIPLE</field>
<field name="lcsGammaRed">DWORD</field>
<field name="lcsGammaGreen">DWORD</field>
<field name="lcsGammaBlue">DWORD</field>
<field name="lcsFilename[260]">WCHAR</field>
</struct>
<typedefprev id="LOGCOLORSPACEW"/>
<typedefptrprev id="LPLOGCOLORSPACEW"/>

typedef LOGCOLORSPACEA LOGCOLORSPACE;
typedef LPLOGCOLORSPACEA LPLOGCOLORSPACE;
<struct name="tagBITMAPCOREHEADER">
<field name="bcSize">DWORD</field>
<field name="bcWidth">WORD</field>
<field name="bcHeight">WORD</field>
<field name="bcPlanes">WORD</field>
<field name="bcBitCount">WORD</field>
} BITMAPCOREHEADER,  *LPBITMAPCOREHEADER, *PBITMAPCOREHEADER;

<struct name="tagBITMAPINFOHEADER">
<field name="biSize">DWORD</field>
<field name="biWidth">LONG</field>
<field name="biHeight">LONG</field>
<field name="biPlanes">WORD</field>
<field name="biBitCount">WORD</field>
<field name="biCompression">DWORD</field>
<field name="biSizeImage">DWORD</field>
<field name="biXPelsPerMeter">LONG</field>
<field name="biYPelsPerMeter">LONG</field>
<field name="biClrUsed">DWORD</field>
<field name="biClrImportant">DWORD</field>
} BITMAPINFOHEADER,  *LPBITMAPINFOHEADER, *PBITMAPINFOHEADER;
<struct>
<field name="bV4Size">DWORD</field>
<field name="bV4Width">LONG</field>
<field name="bV4Height">LONG</field>
<field name="bV4Planes">WORD</field>
<field name="bV4BitCount">WORD</field>
<field name="bV4V4Compression">DWORD</field>
<field name="bV4SizeImage">DWORD</field>
<field name="bV4XPelsPerMeter">LONG</field>
<field name="bV4YPelsPerMeter">LONG</field>
<field name="bV4ClrUsed">DWORD</field>
<field name="bV4ClrImportant">DWORD</field>
<field name="bV4RedMask">DWORD</field>
<field name="bV4GreenMask">DWORD</field>
<field name="bV4BlueMask">DWORD</field>
<field name="bV4AlphaMask">DWORD</field>
<field name="bV4CSType">DWORD</field>
<field name="bV4Endpoints">CIEXYZTRIPLE</field>
<field name="bV4GammaRed">DWORD</field>
<field name="bV4GammaGreen">DWORD</field>
<field name="bV4GammaBlue">DWORD</field>
} BITMAPV4HEADER,  *LPBITMAPV4HEADER, *PBITMAPV4HEADER;

<struct>
<field name="bV5Size">DWORD</field>
<field name="bV5Width">LONG</field>
<field name="bV5Height">LONG</field>
<field name="bV5Planes">WORD</field>
<field name="bV5BitCount">WORD</field>
<field name="bV5Compression">DWORD</field>
<field name="bV5SizeImage">DWORD</field>
<field name="bV5XPelsPerMeter">LONG</field>
<field name="bV5YPelsPerMeter">LONG</field>
<field name="bV5ClrUsed">DWORD</field>
<field name="bV5ClrImportant">DWORD</field>
<field name="bV5RedMask">DWORD</field>
<field name="bV5GreenMask">DWORD</field>
<field name="bV5BlueMask">DWORD</field>
<field name="bV5AlphaMask">DWORD</field>
<field name="bV5CSType">DWORD</field>
<field name="bV5Endpoints">CIEXYZTRIPLE</field>
<field name="bV5GammaRed">DWORD</field>
<field name="bV5GammaGreen">DWORD</field>
<field name="bV5GammaBlue">DWORD</field>
<field name="bV5Intent">DWORD</field>
<field name="bV5ProfileData">DWORD</field>
<field name="bV5ProfileSize">DWORD</field>
<field name="bV5Reserved">DWORD</field>
} BITMAPV5HEADER,  *LPBITMAPV5HEADER, *PBITMAPV5HEADER;

<struct name="tagBITMAPINFO">
<field name="bmiHeader">BITMAPINFOHEADER</field>
<field name="bmiColors[1]">RGBQUAD</field>
} BITMAPINFO,  *LPBITMAPINFO, *PBITMAPINFO;

<struct name="tagBITMAPCOREINFO">
<field name="bmciHeader">BITMAPCOREHEADER</field>
<field name="bmciColors[1]">RGBTRIPLE</field>
} BITMAPCOREINFO,  *LPBITMAPCOREINFO, *PBITMAPCOREINFO;

#line 1 "\\program files\\Microsoft SDKs\\Windows\\v6.0A\\Include\\pshpack2.h"
#pragma warning(disable:4103)

#pragma pack(push,2)
<struct name="tagBITMAPFILEHEADER">
<field name="bfType">WORD</field>
<field name="bfSize">DWORD</field>
<field name="bfReserved1">WORD</field>
<field name="bfReserved2">WORD</field>
<field name="bfOffBits">DWORD</field>
} BITMAPFILEHEADER,  *LPBITMAPFILEHEADER, *PBITMAPFILEHEADER;
#line 1 "\\program files\\Microsoft SDKs\\Windows\\v6.0A\\Include\\poppack.h"
#pragma warning(disable:4103)

#pragma pack(pop)
<struct name="tagFONTSIGNATURE">
    DWORD fsUsb[4];
    DWORD fsCsb[2];
} FONTSIGNATURE, *PFONTSIGNATURE, *LPFONTSIGNATURE;

<struct name="tagCHARSETINFO">
<field name="ciCharset">UINT</field>
<field name="ciACP">UINT</field>
<field name="fs">FONTSIGNATURE</field>
} CHARSETINFO, *PCHARSETINFO,  *NPCHARSETINFO,  *LPCHARSETINFO;
<struct name="tagLOCALESIGNATURE">
    DWORD lsUsb[4];
    DWORD lsCsbDefault[2];
    DWORD lsCsbSupported[2];
} LOCALESIGNATURE, *PLOCALESIGNATURE, *LPLOCALESIGNATURE;
<struct name="tagHANDLETABLE">
    HGDIOBJ     objectHandle[1];
  } HANDLETABLE, *PHANDLETABLE,  *LPHANDLETABLE;

<struct name="tagMETARECORD">
<field name="rdSize">DWORD</field>
<field name="rdFunction">WORD</field>
<field name="rdParm[1]">WORD</field>
<field name="METARECORD">}</field>
<typedef name="PMETARECORD">tagMETARECORD  *</typedef>
<typedef name="LPMETARECORD">tagMETARECORD   *</typedef>

<struct name="tagMETAFILEPICT">
<field name="mm">LONG</field>
<field name="xExt">LONG</field>
<field name="yExt">LONG</field>
<field name="hMF">HMETAFILE</field>
</struct>
<typedefprev id="METAFILEPICT"/>
<typedefptrprev id="LPMETAFILEPICT"/>

#line 1 "\\program files\\Microsoft SDKs\\Windows\\v6.0A\\Include\\pshpack2.h"
#pragma warning(disable:4103)

#pragma pack(push,2)
<struct name="tagMETAHEADER">
<field name="mtType">WORD</field>
<field name="mtHeaderSize">WORD</field>
<field name="mtVersion">WORD</field>
<field name="mtSize">DWORD</field>
<field name="mtNoObjects">WORD</field>
<field name="mtMaxRecord">DWORD</field>
<field name="mtNoParameters">WORD</field>
} METAHEADER;
<typedef name="PMETAHEADER">tagMETAHEADER  *</typedef>
<typedef name="LPMETAHEADER">tagMETAHEADER   *</typedef>

#line 1 "\\program files\\Microsoft SDKs\\Windows\\v6.0A\\Include\\poppack.h"
#pragma warning(disable:4103)

#pragma pack(pop)
<struct name="tagENHMETARECORD">
<field name="iType">DWORD</field>
<field name="nSize">DWORD</field>
<field name="dParm[1]">DWORD</field>
} ENHMETARECORD, *PENHMETARECORD, *LPENHMETARECORD;

<struct name="tagENHMETAHEADER">
<field name="iType">DWORD</field>
<field name="nSize">DWORD</field>
                                
    RECTL   rclBounds;          
    RECTL   rclFrame;           
    DWORD   dSignature;         
    DWORD   nVersion;           
    DWORD   nBytes;             
    DWORD   nRecords;           
    WORD    nHandles;           
                                
    WORD    sReserved;          
    DWORD   nDescription;       
                                
    DWORD   offDescription;     
                                
    DWORD   nPalEntries;        
    SIZEL   szlDevice;          
    SIZEL   szlMillimeters;     

    DWORD   cbPixelFormat;      
                                
    DWORD   offPixelFormat;     
                                
    DWORD   bOpenGL;            
                                
    SIZEL   szlMicrometers;     
} ENHMETAHEADER, *PENHMETAHEADER, *LPENHMETAHEADER;
    typedef BYTE BCHAR;

#line 1 "\\program files\\Microsoft SDKs\\Windows\\v6.0A\\Include\\pshpack4.h"
#pragma warning(disable:4103)

#pragma pack(push,4)
<struct name="tagTEXTMETRICA">
<field name="tmHeight">LONG</field>
<field name="tmAscent">LONG</field>
<field name="tmDescent">LONG</field>
<field name="tmInternalLeading">LONG</field>
<field name="tmExternalLeading">LONG</field>
<field name="tmAveCharWidth">LONG</field>
<field name="tmMaxCharWidth">LONG</field>
<field name="tmWeight">LONG</field>
<field name="tmOverhang">LONG</field>
<field name="tmDigitizedAspectX">LONG</field>
<field name="tmDigitizedAspectY">LONG</field>
<field name="tmFirstChar">BYTE</field>
<field name="tmLastChar">BYTE</field>
<field name="tmDefaultChar">BYTE</field>
<field name="tmBreakChar">BYTE</field>
<field name="tmItalic">BYTE</field>
<field name="tmUnderlined">BYTE</field>
<field name="tmStruckOut">BYTE</field>
<field name="tmPitchAndFamily">BYTE</field>
<field name="tmCharSet">BYTE</field>
} TEXTMETRICA, *PTEXTMETRICA,  *NPTEXTMETRICA,  *LPTEXTMETRICA;
<struct name="tagTEXTMETRICW">
<field name="tmHeight">LONG</field>
<field name="tmAscent">LONG</field>
<field name="tmDescent">LONG</field>
<field name="tmInternalLeading">LONG</field>
<field name="tmExternalLeading">LONG</field>
<field name="tmAveCharWidth">LONG</field>
<field name="tmMaxCharWidth">LONG</field>
<field name="tmWeight">LONG</field>
<field name="tmOverhang">LONG</field>
<field name="tmDigitizedAspectX">LONG</field>
<field name="tmDigitizedAspectY">LONG</field>
<field name="tmFirstChar">WCHAR</field>
<field name="tmLastChar">WCHAR</field>
<field name="tmDefaultChar">WCHAR</field>
<field name="tmBreakChar">WCHAR</field>
<field name="tmItalic">BYTE</field>
<field name="tmUnderlined">BYTE</field>
<field name="tmStruckOut">BYTE</field>
<field name="tmPitchAndFamily">BYTE</field>
<field name="tmCharSet">BYTE</field>
} TEXTMETRICW, *PTEXTMETRICW,  *NPTEXTMETRICW,  *LPTEXTMETRICW;

typedef TEXTMETRICA TEXTMETRIC;
typedef PTEXTMETRICA PTEXTMETRIC;
typedef NPTEXTMETRICA NPTEXTMETRIC;
typedef LPTEXTMETRICA LPTEXTMETRIC;
#line 1 "\\program files\\Microsoft SDKs\\Windows\\v6.0A\\Include\\poppack.h"
#pragma warning(disable:4103)

#pragma pack(pop)
#line 1 "\\program files\\Microsoft SDKs\\Windows\\v6.0A\\Include\\pshpack4.h"
#pragma warning(disable:4103)

#pragma pack(push,4)

<struct name="tagNEWTEXTMETRICA">
<field name="tmHeight">LONG</field>
<field name="tmAscent">LONG</field>
<field name="tmDescent">LONG</field>
<field name="tmInternalLeading">LONG</field>
<field name="tmExternalLeading">LONG</field>
<field name="tmAveCharWidth">LONG</field>
<field name="tmMaxCharWidth">LONG</field>
<field name="tmWeight">LONG</field>
<field name="tmOverhang">LONG</field>
<field name="tmDigitizedAspectX">LONG</field>
<field name="tmDigitizedAspectY">LONG</field>
<field name="tmFirstChar">BYTE</field>
<field name="tmLastChar">BYTE</field>
<field name="tmDefaultChar">BYTE</field>
<field name="tmBreakChar">BYTE</field>
<field name="tmItalic">BYTE</field>
<field name="tmUnderlined">BYTE</field>
<field name="tmStruckOut">BYTE</field>
<field name="tmPitchAndFamily">BYTE</field>
<field name="tmCharSet">BYTE</field>
<field name="ntmFlags">DWORD</field>
<field name="ntmSizeEM">UINT</field>
<field name="ntmCellHeight">UINT</field>
<field name="ntmAvgWidth">UINT</field>
} NEWTEXTMETRICA, *PNEWTEXTMETRICA,  *NPNEWTEXTMETRICA,  *LPNEWTEXTMETRICA;
<struct name="tagNEWTEXTMETRICW">
<field name="tmHeight">LONG</field>
<field name="tmAscent">LONG</field>
<field name="tmDescent">LONG</field>
<field name="tmInternalLeading">LONG</field>
<field name="tmExternalLeading">LONG</field>
<field name="tmAveCharWidth">LONG</field>
<field name="tmMaxCharWidth">LONG</field>
<field name="tmWeight">LONG</field>
<field name="tmOverhang">LONG</field>
<field name="tmDigitizedAspectX">LONG</field>
<field name="tmDigitizedAspectY">LONG</field>
<field name="tmFirstChar">WCHAR</field>
<field name="tmLastChar">WCHAR</field>
<field name="tmDefaultChar">WCHAR</field>
<field name="tmBreakChar">WCHAR</field>
<field name="tmItalic">BYTE</field>
<field name="tmUnderlined">BYTE</field>
<field name="tmStruckOut">BYTE</field>
<field name="tmPitchAndFamily">BYTE</field>
<field name="tmCharSet">BYTE</field>
<field name="ntmFlags">DWORD</field>
<field name="ntmSizeEM">UINT</field>
<field name="ntmCellHeight">UINT</field>
<field name="ntmAvgWidth">UINT</field>
} NEWTEXTMETRICW, *PNEWTEXTMETRICW,  *NPNEWTEXTMETRICW,  *LPNEWTEXTMETRICW;

typedef NEWTEXTMETRICA NEWTEXTMETRIC;
typedef PNEWTEXTMETRICA PNEWTEXTMETRIC;
typedef NPNEWTEXTMETRICA NPNEWTEXTMETRIC;
typedef LPNEWTEXTMETRICA LPNEWTEXTMETRIC;
#line 1 "\\program files\\Microsoft SDKs\\Windows\\v6.0A\\Include\\poppack.h"
#pragma warning(disable:4103)

#pragma pack(pop)

<struct name="tagNEWTEXTMETRICEXA">
<field name="ntmTm">NEWTEXTMETRICA</field>
<field name="ntmFontSig">FONTSIGNATURE</field>
}NEWTEXTMETRICEXA;
<struct name="tagNEWTEXTMETRICEXW">
<field name="ntmTm">NEWTEXTMETRICW</field>
<field name="ntmFontSig">FONTSIGNATURE</field>
}NEWTEXTMETRICEXW;
typedef NEWTEXTMETRICEXA NEWTEXTMETRICEX;

<struct name="tagPELARRAY">
<field name="paXCount">LONG</field>
<field name="paYCount">LONG</field>
<field name="paXExt">LONG</field>
<field name="paYExt">LONG</field>
<field name="paRGBs">BYTE</field>
  } PELARRAY, *PPELARRAY,  *NPPELARRAY,  *LPPELARRAY;
<struct name="tagLOGBRUSH">
<field name="lbStyle">UINT</field>
<field name="lbColor">COLORREF</field>
<field name="lbHatch">ULONG_PTR</field>
  } LOGBRUSH, *PLOGBRUSH,  *NPLOGBRUSH,  *LPLOGBRUSH;

<struct name="tagLOGBRUSH32">
<field name="lbStyle">UINT</field>
<field name="lbColor">COLORREF</field>
<field name="lbHatch">ULONG</field>
  } LOGBRUSH32, *PLOGBRUSH32,  *NPLOGBRUSH32,  *LPLOGBRUSH32;

typedef LOGBRUSH            PATTERN;
typedef PATTERN             *PPATTERN;
typedef PATTERN         *NPPATTERN;
typedef PATTERN          *LPPATTERN;
<struct name="tagLOGPEN">
<field name="lopnStyle">UINT</field>
<field name="lopnWidth">POINT</field>
<field name="lopnColor">COLORREF</field>
  } LOGPEN, *PLOGPEN,  *NPLOGPEN,  *LPLOGPEN;

<struct name="tagEXTLOGPEN">
<field name="elpPenStyle">DWORD</field>
<field name="elpWidth">DWORD</field>
<field name="elpBrushStyle">UINT</field>
<field name="elpColor">COLORREF</field>
<field name="elpHatch">ULONG_PTR</field>
<field name="elpNumEntries">DWORD</field>
<field name="elpStyleEntry[1]">DWORD</field>
} EXTLOGPEN, *PEXTLOGPEN,  *NPEXTLOGPEN,  *LPEXTLOGPEN;
<struct name="tagPALETTEENTRY">
<field name="peRed">BYTE</field>
<field name="peGreen">BYTE</field>
<field name="peBlue">BYTE</field>
<field name="peFlags">BYTE</field>
} PALETTEENTRY, *PPALETTEENTRY,  *LPPALETTEENTRY;

<struct name="tagLOGPALETTE">
<field name="palVersion">WORD</field>
<field name="palNumEntries">WORD</field>
<field name="palPalEntry[1]">PALETTEENTRY</field>
} LOGPALETTE, *PLOGPALETTE,  *NPLOGPALETTE,  *LPLOGPALETTE;
<struct name="tagLOGFONTA">
<field name="lfHeight">LONG</field>
<field name="lfWidth">LONG</field>
<field name="lfEscapement">LONG</field>
<field name="lfOrientation">LONG</field>
<field name="lfWeight">LONG</field>
<field name="lfItalic">BYTE</field>
<field name="lfUnderline">BYTE</field>
<field name="lfStrikeOut">BYTE</field>
<field name="lfCharSet">BYTE</field>
<field name="lfOutPrecision">BYTE</field>
<field name="lfClipPrecision">BYTE</field>
<field name="lfQuality">BYTE</field>
<field name="lfPitchAndFamily">BYTE</field>
<field name="lfFaceName[32]">CHAR</field>
} LOGFONTA, *PLOGFONTA,  *NPLOGFONTA,  *LPLOGFONTA;
<struct name="tagLOGFONTW">
<field name="lfHeight">LONG</field>
<field name="lfWidth">LONG</field>
<field name="lfEscapement">LONG</field>
<field name="lfOrientation">LONG</field>
<field name="lfWeight">LONG</field>
<field name="lfItalic">BYTE</field>
<field name="lfUnderline">BYTE</field>
<field name="lfStrikeOut">BYTE</field>
<field name="lfCharSet">BYTE</field>
<field name="lfOutPrecision">BYTE</field>
<field name="lfClipPrecision">BYTE</field>
<field name="lfQuality">BYTE</field>
<field name="lfPitchAndFamily">BYTE</field>
<field name="lfFaceName[32]">WCHAR</field>
} LOGFONTW, *PLOGFONTW,  *NPLOGFONTW,  *LPLOGFONTW;

typedef LOGFONTA LOGFONT;
typedef PLOGFONTA PLOGFONT;
typedef NPLOGFONTA NPLOGFONT;
typedef LPLOGFONTA LPLOGFONT;

<struct name="tagENUMLOGFONTA">
<field name="elfLogFont">LOGFONTA</field>
<field name="elfFullName[64]">BYTE</field>
<field name="elfStyle[32]">BYTE</field>
</struct>
<typedefprev id="ENUMLOGFONTA"/>
<typedefptrprev id="LPENUMLOGFONTA"/>

<struct name="tagENUMLOGFONTW">
<field name="elfLogFont">LOGFONTW</field>
<field name="elfFullName[64]">WCHAR</field>
<field name="elfStyle[32]">WCHAR</field>
</struct>
<typedefprev id="ENUMLOGFONTW"/>
<typedefptrprev id="LPENUMLOGFONTW"/>

typedef ENUMLOGFONTA ENUMLOGFONT;
typedef LPENUMLOGFONTA LPENUMLOGFONT;
<struct name="tagENUMLOGFONTEXA">
<field name="elfLogFont">LOGFONTA</field>
<field name="elfFullName[64]">BYTE</field>
<field name="elfStyle[32]">BYTE</field>
<field name="elfScript[32]">BYTE</field>
</struct>
<typedefprev id="ENUMLOGFONTEXA"/>
<typedefptrprev id="LPENUMLOGFONTEXA"/>
<struct name="tagENUMLOGFONTEXW">
<field name="elfLogFont">LOGFONTW</field>
<field name="elfFullName[64]">WCHAR</field>
<field name="elfStyle[32]">WCHAR</field>
<field name="elfScript[32]">WCHAR</field>
</struct>
<typedefprev id="ENUMLOGFONTEXW"/>
<typedefptrprev id="LPENUMLOGFONTEXW"/>

typedef ENUMLOGFONTEXA ENUMLOGFONTEX;
typedef LPENUMLOGFONTEXA LPENUMLOGFONTEX;
                                    

                                    

                                    

<struct name="tagPANOSE">
<field name="bFamilyType">BYTE</field>
<field name="bSerifStyle">BYTE</field>
<field name="bWeight">BYTE</field>
<field name="bProportion">BYTE</field>
<field name="bContrast">BYTE</field>
<field name="bStrokeVariation">BYTE</field>
<field name="bArmStyle">BYTE</field>
<field name="bLetterform">BYTE</field>
<field name="bMidline">BYTE</field>
<field name="bXHeight">BYTE</field>
</struct>
<typedefprev id="PANOSE"/>
<typedefptrprev id="LPPANOSE"/>

<struct name="tagEXTLOGFONTA">
<field name="elfLogFont">LOGFONTA</field>
<field name="elfFullName[64]">BYTE</field>
<field name="elfStyle[32]">BYTE</field>
<field name="elfVersion">DWORD</field>
<field name="elfStyleSize">DWORD</field>
<field name="elfMatch">DWORD</field>
<field name="elfReserved">DWORD</field>
<field name="elfVendorId[4]">BYTE</field>
<field name="elfCulture">DWORD</field>
<field name="elfPanose">PANOSE</field>
} EXTLOGFONTA, *PEXTLOGFONTA,  *NPEXTLOGFONTA,  *LPEXTLOGFONTA;
<struct name="tagEXTLOGFONTW">
<field name="elfLogFont">LOGFONTW</field>
<field name="elfFullName[64]">WCHAR</field>
<field name="elfStyle[32]">WCHAR</field>
<field name="elfVersion">DWORD</field>
<field name="elfStyleSize">DWORD</field>
<field name="elfMatch">DWORD</field>
<field name="elfReserved">DWORD</field>
<field name="elfVendorId[4]">BYTE</field>
<field name="elfCulture">DWORD</field>
<field name="elfPanose">PANOSE</field>
} EXTLOGFONTW, *PEXTLOGFONTW,  *NPEXTLOGFONTW,  *LPEXTLOGFONTW;

typedef EXTLOGFONTA EXTLOGFONT;
typedef PEXTLOGFONTA PEXTLOGFONT;
typedef NPEXTLOGFONTA NPEXTLOGFONT;
typedef LPEXTLOGFONTA LPEXTLOGFONT;
                             

                             

                             
<struct name="_devicemodeA">
    BYTE   dmDeviceName[32];
    WORD dmSpecVersion;
    WORD dmDriverVersion;
    WORD dmSize;
    WORD dmDriverExtra;
    DWORD dmFields;
    union {
      
<struct>
<field name="dmOrientation">short</field>
<field name="dmPaperSize">short</field>
<field name="dmPaperLength">short</field>
<field name="dmPaperWidth">short</field>
<field name="dmScale">short</field>
<field name="dmCopies">short</field>
<field name="dmDefaultSource">short</field>
<field name="dmPrintQuality">short</field>
      };
      
<struct>
<field name="dmPosition">POINTL</field>
<field name="dmDisplayOrientation">DWORD</field>
<field name="dmDisplayFixedOutput">DWORD</field>
      };
    };
    short dmColor;
    short dmDuplex;
    short dmYResolution;
    short dmTTOption;
    short dmCollate;
    BYTE   dmFormName[32];
    WORD   dmLogPixels;
    DWORD  dmBitsPerPel;
    DWORD  dmPelsWidth;
    DWORD  dmPelsHeight;
    union {
        DWORD  dmDisplayFlags;
        DWORD  dmNup;
    };
    DWORD  dmDisplayFrequency;

    DWORD  dmICMMethod;
    DWORD  dmICMIntent;
    DWORD  dmMediaType;
    DWORD  dmDitherType;
    DWORD  dmReserved1;
    DWORD  dmReserved2;

    DWORD  dmPanningWidth;
    DWORD  dmPanningHeight;
} DEVMODEA, *PDEVMODEA, *NPDEVMODEA, *LPDEVMODEA;
<struct name="_devicemodeW">
    WCHAR  dmDeviceName[32];
    WORD dmSpecVersion;
    WORD dmDriverVersion;
    WORD dmSize;
    WORD dmDriverExtra;
    DWORD dmFields;
    union {
      
<struct>
<field name="dmOrientation">short</field>
<field name="dmPaperSize">short</field>
<field name="dmPaperLength">short</field>
<field name="dmPaperWidth">short</field>
<field name="dmScale">short</field>
<field name="dmCopies">short</field>
<field name="dmDefaultSource">short</field>
<field name="dmPrintQuality">short</field>
      };
      
<struct>
<field name="dmPosition">POINTL</field>
<field name="dmDisplayOrientation">DWORD</field>
<field name="dmDisplayFixedOutput">DWORD</field>
      };
    };
    short dmColor;
    short dmDuplex;
    short dmYResolution;
    short dmTTOption;
    short dmCollate;
    WCHAR  dmFormName[32];
    WORD   dmLogPixels;
    DWORD  dmBitsPerPel;
    DWORD  dmPelsWidth;
    DWORD  dmPelsHeight;
    union {
        DWORD  dmDisplayFlags;
        DWORD  dmNup;
    };
    DWORD  dmDisplayFrequency;

    DWORD  dmICMMethod;
    DWORD  dmICMIntent;
    DWORD  dmMediaType;
    DWORD  dmDitherType;
    DWORD  dmReserved1;
    DWORD  dmReserved2;

    DWORD  dmPanningWidth;
    DWORD  dmPanningHeight;
} DEVMODEW, *PDEVMODEW, *NPDEVMODEW, *LPDEVMODEW;

typedef DEVMODEA DEVMODE;
typedef PDEVMODEA PDEVMODE;
typedef NPDEVMODEA NPDEVMODE;
typedef LPDEVMODEA LPDEVMODE;

<struct name="_DISPLAY_DEVICEA">
<field name="cb">DWORD</field>
<field name="DeviceName[32]">CHAR</field>
<field name="DeviceString[128]">CHAR</field>
<field name="StateFlags">DWORD</field>
<field name="DeviceID[128]">CHAR</field>
<field name="DeviceKey[128]">CHAR</field>
} DISPLAY_DEVICEA, *PDISPLAY_DEVICEA, *LPDISPLAY_DEVICEA;
<struct name="_DISPLAY_DEVICEW">
<field name="cb">DWORD</field>
<field name="DeviceName[32]">WCHAR</field>
<field name="DeviceString[128]">WCHAR</field>
<field name="StateFlags">DWORD</field>
<field name="DeviceID[128]">WCHAR</field>
<field name="DeviceKey[128]">WCHAR</field>
} DISPLAY_DEVICEW, *PDISPLAY_DEVICEW, *LPDISPLAY_DEVICEW;
typedef DISPLAY_DEVICEA DISPLAY_DEVICE;
typedef PDISPLAY_DEVICEA PDISPLAY_DEVICE;
typedef LPDISPLAY_DEVICEA LPDISPLAY_DEVICE;
<struct name="_RGNDATAHEADER">
<field name="dwSize">DWORD</field>
<field name="iType">DWORD</field>
<field name="nCount">DWORD</field>
<field name="nRgnSize">DWORD</field>
<field name="rcBound">RECT</field>
</struct>
<typedefprev id="RGNDATAHEADER"/>
<typedefptrprev id="PRGNDATAHEADER"/>

<struct name="_RGNDATA">
<field name="rdh">RGNDATAHEADER</field>
<field name="Buffer[1]">char</field>
} RGNDATA, *PRGNDATA,  *NPRGNDATA,  *LPRGNDATA;
<struct name="_ABC">
<field name="abcA">int</field>
<field name="abcB">UINT</field>
<field name="abcC">int</field>
} ABC, *PABC,  *NPABC,  *LPABC;

<struct name="_ABCFLOAT">
<field name="abcfA">FLOAT</field>
<field name="abcfB">FLOAT</field>
<field name="abcfC">FLOAT</field>
} ABCFLOAT, *PABCFLOAT,  *NPABCFLOAT,  *LPABCFLOAT;

<struct name="_OUTLINETEXTMETRICA">
<field name="otmSize">UINT</field>
<field name="otmTextMetrics">TEXTMETRICA</field>
<field name="otmFiller">BYTE</field>
<field name="otmPanoseNumber">PANOSE</field>
<field name="otmfsSelection">UINT</field>
<field name="otmfsType">UINT</field>
<field name="otmsCharSlopeRise">int</field>
<field name="otmsCharSlopeRun">int</field>
<field name="otmItalicAngle">int</field>
<field name="otmEMSquare">UINT</field>
<field name="otmAscent">int</field>
<field name="otmDescent">int</field>
<field name="otmLineGap">UINT</field>
<field name="otmsCapEmHeight">UINT</field>
<field name="otmsXHeight">UINT</field>
<field name="otmrcFontBox">RECT</field>
<field name="otmMacAscent">int</field>
<field name="otmMacDescent">int</field>
<field name="otmMacLineGap">UINT</field>
<field name="otmusMinimumPPEM">UINT</field>
<field name="otmptSubscriptSize">POINT</field>
<field name="otmptSubscriptOffset">POINT</field>
<field name="otmptSuperscriptSize">POINT</field>
<field name="otmptSuperscriptOffset">POINT</field>
<field name="otmsStrikeoutSize">UINT</field>
<field name="otmsStrikeoutPosition">int</field>
<field name="otmsUnderscoreSize">int</field>
<field name="otmsUnderscorePosition">int</field>
<field name="otmpFamilyName">PSTR</field>
<field name="otmpFaceName">PSTR</field>
<field name="otmpStyleName">PSTR</field>
<field name="otmpFullName">PSTR</field>
} OUTLINETEXTMETRICA, *POUTLINETEXTMETRICA,  *NPOUTLINETEXTMETRICA,  *LPOUTLINETEXTMETRICA;
<struct name="_OUTLINETEXTMETRICW">
<field name="otmSize">UINT</field>
<field name="otmTextMetrics">TEXTMETRICW</field>
<field name="otmFiller">BYTE</field>
<field name="otmPanoseNumber">PANOSE</field>
<field name="otmfsSelection">UINT</field>
<field name="otmfsType">UINT</field>
<field name="otmsCharSlopeRise">int</field>
<field name="otmsCharSlopeRun">int</field>
<field name="otmItalicAngle">int</field>
<field name="otmEMSquare">UINT</field>
<field name="otmAscent">int</field>
<field name="otmDescent">int</field>
<field name="otmLineGap">UINT</field>
<field name="otmsCapEmHeight">UINT</field>
<field name="otmsXHeight">UINT</field>
<field name="otmrcFontBox">RECT</field>
<field name="otmMacAscent">int</field>
<field name="otmMacDescent">int</field>
<field name="otmMacLineGap">UINT</field>
<field name="otmusMinimumPPEM">UINT</field>
<field name="otmptSubscriptSize">POINT</field>
<field name="otmptSubscriptOffset">POINT</field>
<field name="otmptSuperscriptSize">POINT</field>
<field name="otmptSuperscriptOffset">POINT</field>
<field name="otmsStrikeoutSize">UINT</field>
<field name="otmsStrikeoutPosition">int</field>
<field name="otmsUnderscoreSize">int</field>
<field name="otmsUnderscorePosition">int</field>
<field name="otmpFamilyName">PSTR</field>
<field name="otmpFaceName">PSTR</field>
<field name="otmpStyleName">PSTR</field>
<field name="otmpFullName">PSTR</field>
} OUTLINETEXTMETRICW, *POUTLINETEXTMETRICW,  *NPOUTLINETEXTMETRICW,  *LPOUTLINETEXTMETRICW;

typedef OUTLINETEXTMETRICA OUTLINETEXTMETRIC;
typedef POUTLINETEXTMETRICA POUTLINETEXTMETRIC;
typedef NPOUTLINETEXTMETRICA NPOUTLINETEXTMETRIC;
typedef LPOUTLINETEXTMETRICA LPOUTLINETEXTMETRIC;
<struct name="tagPOLYTEXTA">
<field name="x">int</field>
<field name="y">int</field>
<field name="n">UINT</field>
<field name="lpstr">LPCSTR</field>
<field name="uiFlags">UINT</field>
<field name="rcl">RECT</field>
    int      *pdx;
} POLYTEXTA, *PPOLYTEXTA,  *NPPOLYTEXTA,  *LPPOLYTEXTA;
<struct name="tagPOLYTEXTW">
<field name="x">int</field>
<field name="y">int</field>
<field name="n">UINT</field>
<field name="lpstr">LPCWSTR</field>
<field name="uiFlags">UINT</field>
<field name="rcl">RECT</field>
    int      *pdx;
} POLYTEXTW, *PPOLYTEXTW,  *NPPOLYTEXTW,  *LPPOLYTEXTW;

typedef POLYTEXTA POLYTEXT;
typedef PPOLYTEXTA PPOLYTEXT;
typedef NPPOLYTEXTA NPPOLYTEXT;
typedef LPPOLYTEXTA LPPOLYTEXT;
<struct name="_FIXED">

    WORD    fract;
    short   value;

} FIXED;
<struct name="_MAT2">
<field name="eM11">FIXED</field>
<field name="eM12">FIXED</field>
<field name="eM21">FIXED</field>
<field name="eM22">FIXED</field>
</struct>
<typedefprev id="MAT2"/>
<typedefptrprev id="LPMAT2"/>
<struct name="_GLYPHMETRICS">
<field name="gmBlackBoxX">UINT</field>
<field name="gmBlackBoxY">UINT</field>
<field name="gmptGlyphOrigin">POINT</field>
<field name="gmCellIncX">short</field>
<field name="gmCellIncY">short</field>
</struct>
<typedefprev id="GLYPHMETRICS"/>
<typedefptrprev id="LPGLYPHMETRICS"/>
<struct name="tagPOINTFX">
<field name="x">FIXED</field>
<field name="y">FIXED</field>
</struct>
<typedefprev id="POINTFX"/>
<typedefptrprev id="LPPOINTFX"/>

<struct name="tagTTPOLYCURVE">
<field name="wType">WORD</field>
<field name="cpfx">WORD</field>
<field name="apfx[1]">POINTFX</field>
</struct>
<typedefprev id="TTPOLYCURVE"/>
<typedefptrprev id="LPTTPOLYCURVE"/>

<struct name="tagTTPOLYGONHEADER">
<field name="cb">DWORD</field>
<field name="dwType">DWORD</field>
<field name="pfxStart">POINTFX</field>
</struct>
<typedefprev id="TTPOLYGONHEADER"/>
<typedefptrprev id="LPTTPOLYGONHEADER"/>
<struct name="tagGCP_RESULTSA">
<field name="lStructSize">DWORD</field>
<field name="lpOutString">LPSTR</field>
    UINT  *lpOrder;
    int   *lpDx;
    int   *lpCaretPos;
    LPSTR   lpClass;
    LPWSTR  lpGlyphs;
    UINT    nGlyphs;
    int     nMaxFit;
    } GCP_RESULTSA, * LPGCP_RESULTSA;
<struct name="tagGCP_RESULTSW">
<field name="lStructSize">DWORD</field>
<field name="lpOutString">LPWSTR</field>
    UINT  *lpOrder;
    int   *lpDx;
    int   *lpCaretPos;
    LPSTR   lpClass;
    LPWSTR  lpGlyphs;
    UINT    nGlyphs;
    int     nMaxFit;
    } GCP_RESULTSW, * LPGCP_RESULTSW;

typedef GCP_RESULTSA GCP_RESULTS;
typedef LPGCP_RESULTSA LPGCP_RESULTS;
<struct name="_RASTERIZER_STATUS">
<field name="nSize">short</field>
<field name="wFlags">short</field>
<field name="nLanguageID">short</field>
</struct>
<typedefprev id="RASTERIZER_STATUS"/>
<typedefptrprev id="LPRASTERIZER_STATUS"/>

<struct name="tagPIXELFORMATDESCRIPTOR">
<field name="nSize">WORD</field>
<field name="nVersion">WORD</field>
<field name="dwFlags">DWORD</field>
<field name="iPixelType">BYTE</field>
<field name="cColorBits">BYTE</field>
<field name="cRedBits">BYTE</field>
<field name="cRedShift">BYTE</field>
<field name="cGreenBits">BYTE</field>
<field name="cGreenShift">BYTE</field>
<field name="cBlueBits">BYTE</field>
<field name="cBlueShift">BYTE</field>
<field name="cAlphaBits">BYTE</field>
<field name="cAlphaShift">BYTE</field>
<field name="cAccumBits">BYTE</field>
<field name="cAccumRedBits">BYTE</field>
<field name="cAccumGreenBits">BYTE</field>
<field name="cAccumBlueBits">BYTE</field>
<field name="cAccumAlphaBits">BYTE</field>
<field name="cDepthBits">BYTE</field>
<field name="cStencilBits">BYTE</field>
<field name="cAuxBuffers">BYTE</field>
<field name="iLayerType">BYTE</field>
<field name="bReserved">BYTE</field>
<field name="dwLayerMask">DWORD</field>
<field name="dwVisibleMask">DWORD</field>
<field name="dwDamageMask">DWORD</field>
} PIXELFORMATDESCRIPTOR, *PPIXELFORMATDESCRIPTOR,  *LPPIXELFORMATDESCRIPTOR;

typedef int (__stdcall* OLDFONTENUMPROCA)(const LOGFONTA *, const TEXTMETRICA *, DWORD, LPARAM);
typedef int (__stdcall* OLDFONTENUMPROCW)(const LOGFONTW *, const TEXTMETRICW *, DWORD, LPARAM);
typedef OLDFONTENUMPROCA    FONTENUMPROCA;
typedef OLDFONTENUMPROCW    FONTENUMPROCW;
typedef FONTENUMPROCA FONTENUMPROC;
typedef int (__stdcall* GOBJENUMPROC)(LPVOID, LPARAM);
typedef void (__stdcall* LINEDDAPROC)(int, int, LPARAM);
<function name="AddFontResourceA" ret="int" convention="__stdcall">
 LPCSTR);
<function name="AddFontResourceW" ret="int" convention="__stdcall">
 LPCWSTR);
<function name="AnimatePalette" ret="BOOL " convention="__stdcall">
<arg name="hPal">HPALETTE</arg>
<arg name="iStartIndex">UINT</arg>
<arg name="cEntries">UINT</arg>
<arg name="ppe">const PALETTEENTRY *</arg>
</function>
<function name="Arc" ret="BOOL " convention="__stdcall">
<arg name="hdc">HDC</arg>
<arg name="x1">int</arg>
<arg name="y1">int</arg>
<arg name="x2">int</arg>
<arg name="y2">int</arg>
<arg name="x3">int</arg>
<arg name="y3">int</arg>
<arg name="x4">int</arg>
<arg name="y4">int</arg>
</function>
<function name="BitBlt" ret="BOOL " convention="__stdcall">
<arg name="hdc">HDC</arg>
<arg name="x">int</arg>
<arg name="y">int</arg>
<arg name="cx">int</arg>
<arg name="cy">int</arg>
<arg name="hdcSrc">HDC</arg>
<arg name="x1">int</arg>
<arg name="y1">int</arg>
<arg name="rop">DWORD</arg>
</function>
<function name="CancelDC" ret="BOOL " convention="__stdcall">
<arg name="hdc">HDC</arg>
</function>
<function name="Chord" ret="BOOL " convention="__stdcall">
<arg name="hdc">HDC</arg>
<arg name="x1">int</arg>
<arg name="y1">int</arg>
<arg name="x2">int</arg>
<arg name="y2">int</arg>
<arg name="x3">int</arg>
<arg name="y3">int</arg>
<arg name="x4">int</arg>
<arg name="y4">int</arg>
</function>
<function name="ChoosePixelFormat" ret="int  " convention="__stdcall">
<arg name="hdc">HDC</arg>
  const PIXELFORMATDESCRIPTOR *ppfd);
<function name="CloseMetaFile" ret="HMETAFILE " convention="__stdcall">
<arg name="hdc">HDC</arg>
</function>
<function name="CombineRgn" ret="int    " convention="__stdcall">
<arg name="hrgnDst">HRGN</arg>
<arg name="hrgnSrc1">HRGN</arg>
<arg name="hrgnSrc2">HRGN</arg>
<arg name="iMode">int</arg>
</function>
<function name="CopyMetaFileA" ret="HMETAFILE" convention="__stdcall">
<arg name="HMETAFILE"> </arg>
  LPCSTR);
<function name="CopyMetaFileW" ret="HMETAFILE" convention="__stdcall">
<arg name="HMETAFILE"> </arg>
  LPCWSTR);
<function name="CreateBitmap" ret="HBITMAP" convention="__stdcall">
<arg name="nWidth">int</arg>
<arg name="nHeight">int</arg>
<arg name="nPlanes">UINT</arg>
<arg name="nBitCount">UINT</arg>
  const void *lpBits);
<function name="CreateBitmapIndirect" ret="HBITMAP" convention="__stdcall">
  const BITMAP *pbm);
<function name="CreateBrushIndirect" ret="HBRUSH " convention="__stdcall">
  const LOGBRUSH *plbrush);
<function name="CreateCompatibleBitmap" ret="HBITMAP" convention="__stdcall">
<arg name="hdc">HDC</arg>
<arg name="cx">int</arg>
<arg name="cy">int</arg>
</function>
<function name="CreateDiscardableBitmap" ret="HBITMAP" convention="__stdcall">
<arg name="hdc">HDC</arg>
<arg name="cx">int</arg>
<arg name="cy">int</arg>
</function>
<function name="CreateCompatibleDC" ret="HDC    " convention="__stdcall">
<arg name="hdc">HDC</arg>
</function>
<function name="CreateDCA" ret="HDC    " convention="__stdcall">
<arg name="pwszDriver">LPCSTR</arg>
<arg name="pwszDevice">LPCSTR</arg>
<arg name="pszPort">LPCSTR</arg>
<arg name="pdm">const DEVMODEA *</arg>
</function>
<function name="CreateDCW" ret="HDC    " convention="__stdcall">
<arg name="pwszDriver">LPCWSTR</arg>
<arg name="pwszDevice">LPCWSTR</arg>
<arg name="pszPort">LPCWSTR</arg>
<arg name="pdm">const DEVMODEW *</arg>
</function>
<function name="CreateDIBitmap" ret="HBITMAP" convention="__stdcall">
<arg name="hdc">HDC</arg>
<arg name="pbmih">const BITMAPINFOHEADER *</arg>
<arg name="flInit">DWORD </arg>
<arg name="pjBits">const void *</arg>
<arg name="pbmi">const BITMAPINFO *</arg>
  UINT iUsage);
<function name="CreateDIBPatternBrush" ret="HBRUSH " convention="__stdcall">
<arg name="h">HGLOBAL</arg>
<arg name="iUsage">UINT</arg>
</function>
<function name="CreateDIBPatternBrushPt" ret="HBRUSH " convention="__stdcall">
<arg name="lpPackedDIB">const void *</arg>
  UINT iUsage);
<function name="CreateEllipticRgn" ret="HRGN   " convention="__stdcall">
<arg name="x1">int</arg>
<arg name="y1">int</arg>
<arg name="x2">int</arg>
<arg name="y2">int</arg>
</function>
<function name="CreateEllipticRgnIndirect" ret="HRGN   " convention="__stdcall">
  const RECT *lprect);
<function name="CreateFontIndirectA" ret="HFONT  " convention="__stdcall">
  const LOGFONTA *lplf);
<function name="CreateFontIndirectW" ret="HFONT  " convention="__stdcall">
  const LOGFONTW *lplf);
<function name="CreateFontA" ret="HFONT  " convention="__stdcall">
<arg name="cHeight">int</arg>
<arg name="cWidth">int</arg>
<arg name="cEscapement">int</arg>
<arg name="cOrientation">int</arg>
<arg name="cWeight">int</arg>
<arg name="bItalic">DWORD</arg>
<arg name="bUnderline">DWORD</arg>
<arg name="bStrikeOut">DWORD</arg>
<arg name="iCharSet">DWORD</arg>
<arg name="iOutPrecision">DWORD</arg>
<arg name="iClipPrecision">DWORD</arg>
<arg name="iQuality">DWORD</arg>
<arg name="iPitchAndFamily">DWORD</arg>
<arg name="pszFaceName">LPCSTR</arg>
</function>
<function name="CreateFontW" ret="HFONT  " convention="__stdcall">
<arg name="cHeight">int</arg>
<arg name="cWidth">int</arg>
<arg name="cEscapement">int</arg>
<arg name="cOrientation">int</arg>
<arg name="cWeight">int</arg>
<arg name="bItalic">DWORD</arg>
<arg name="bUnderline">DWORD</arg>
<arg name="bStrikeOut">DWORD</arg>
<arg name="iCharSet">DWORD</arg>
<arg name="iOutPrecision">DWORD</arg>
<arg name="iClipPrecision">DWORD</arg>
<arg name="iQuality">DWORD</arg>
<arg name="iPitchAndFamily">DWORD</arg>
<arg name="pszFaceName">LPCWSTR</arg>
</function>
<function name="CreateHatchBrush" ret="HBRUSH " convention="__stdcall">
<arg name="iHatch">int</arg>
<arg name="color">COLORREF</arg>
</function>
<function name="CreateICA" ret="HDC    " convention="__stdcall">
<arg name="pszDriver">LPCSTR</arg>
<arg name="pszDevice">LPCSTR</arg>
<arg name="pszPort">LPCSTR</arg>
<arg name="pdm">const DEVMODEA *</arg>
</function>
<function name="CreateICW" ret="HDC    " convention="__stdcall">
<arg name="pszDriver">LPCWSTR</arg>
<arg name="pszDevice">LPCWSTR</arg>
<arg name="pszPort">LPCWSTR</arg>
<arg name="pdm">const DEVMODEW *</arg>
</function>
<function name="CreateMetaFileA" ret="HDC    " convention="__stdcall">
<arg name="pszFile">LPCSTR</arg>
</function>
<function name="CreateMetaFileW" ret="HDC    " convention="__stdcall">
<arg name="pszFile">LPCWSTR</arg>
</function>
<function name="CreatePalette" ret="HPALETTE" convention="__stdcall">
<arg name="plpal">const LOGPALETTE *</arg>
</function>
<function name="CreatePen" ret="HPEN   " convention="__stdcall">
<arg name="iStyle">int</arg>
<arg name="cWidth">int</arg>
<arg name="color">COLORREF</arg>
</function>
<function name="CreatePenIndirect" ret="HPEN   " convention="__stdcall">
  const LOGPEN *plpen);
<function name="CreatePolyPolygonRgn" ret="HRGN   " convention="__stdcall">
<arg name="pptl">const POINT *</arg>

                                                 const INT  *pc,
                                                 int cPoly,
                                                 int iMode);
<function name="CreatePatternBrush" ret="HBRUSH " convention="__stdcall">
<arg name="hbm">HBITMAP</arg>
</function>
<function name="CreateRectRgn" ret="HRGN   " convention="__stdcall">
<arg name="x1">int</arg>
<arg name="y1">int</arg>
<arg name="x2">int</arg>
<arg name="y2">int</arg>
</function>
<function name="CreateRectRgnIndirect" ret="HRGN   " convention="__stdcall">
  const RECT *lprect);
<function name="CreateRoundRectRgn" ret="HRGN   " convention="__stdcall">
<arg name="x1">int</arg>
<arg name="y1">int</arg>
<arg name="x2">int</arg>
<arg name="y2">int</arg>
<arg name="w">int</arg>
<arg name="h">int</arg>
</function>
<function name="CreateScalableFontResourceA" ret="BOOL   " convention="__stdcall">
<arg name="fdwHidden">DWORD</arg>
<arg name="lpszFont">LPCSTR</arg>
<arg name="lpszFile">LPCSTR</arg>
<arg name="lpszPath">LPCSTR</arg>
</function>
<function name="CreateScalableFontResourceW" ret="BOOL   " convention="__stdcall">
<arg name="fdwHidden">DWORD</arg>
<arg name="lpszFont">LPCWSTR</arg>
<arg name="lpszFile">LPCWSTR</arg>
<arg name="lpszPath">LPCWSTR</arg>
</function>
<function name="CreateSolidBrush" ret="HBRUSH " convention="__stdcall">
<arg name="color">COLORREF</arg>
</function>

<function name="DeleteDC" ret="BOOL" convention="__stdcall">
<arg name="hdc">HDC</arg>
</function>
<function name="DeleteMetaFile" ret="BOOL" convention="__stdcall">
<arg name="hmf">HMETAFILE</arg>
</function>
<function name="DeleteObject" ret="BOOL" convention="__stdcall">
<arg name="ho">HGDIOBJ</arg>
</function>
<function name="DescribePixelFormat" ret="int " convention="__stdcall">
<arg name="hdc">HDC</arg>
<arg name="iPixelFormat">int</arg>
<arg name="nBytes">UINT</arg>
<arg name="ppfd">LPPIXELFORMATDESCRIPTOR</arg>
</function>
typedef UINT   (__stdcall* LPFNDEVMODE)(HWND, HMODULE, LPDEVMODE, LPSTR, LPSTR, LPDEVMODE, LPSTR, UINT);

typedef DWORD  (__stdcall* LPFNDEVCAPS)(LPSTR, LPSTR, UINT, LPSTR, LPDEVMODE);

<function name="DeviceCapabilitiesA" ret="int" convention="__stdcall">
<arg name="pDevice">LPCSTR        </arg>
 
                LPCSTR         pPort,
                    WORD             fwCapability,
     LPSTR          pOutput,
<arg name="pDevMode">const DEVMODEA   *</arg>
</function>
<function name="DeviceCapabilitiesW" ret="int" convention="__stdcall">
<arg name="pDevice">LPCWSTR        </arg>
<arg name="pPort">LPCWSTR        </arg>
<arg name="fwCapability">WORD            </arg>
<arg name="pOutput">LPWSTR         </arg>
<arg name="pDevMode">const DEVMODEW   *</arg>
</function>
<function name="DrawEscape" ret="int " convention="__stdcall">
<arg name="hdc">HDC   </arg>
<arg name="iEscape">int   </arg>
<arg name="cjIn">int   </arg>
<arg name="lpIn">LPCSTR</arg>
</function>

<function name="Ellipse" ret="BOOL" convention="__stdcall">
<arg name="hdc">HDC</arg>
<arg name="left">int</arg>
<arg name="top">int</arg>
<arg name="right">int</arg>
<arg name="bottom">int</arg>
</function>
<function name="EnumFontFamiliesExA" ret="int " convention="__stdcall">
<arg name="hdc">HDC</arg>
<arg name="lpLogfont">LPLOGFONTA</arg>
<arg name="lpProc">FONTENUMPROCA</arg>
<arg name="lParam">LPARAM</arg>
<arg name="dwFlags">DWORD</arg>
</function>
<function name="EnumFontFamiliesExW" ret="int " convention="__stdcall">
<arg name="hdc">HDC</arg>
<arg name="lpLogfont">LPLOGFONTW</arg>
<arg name="lpProc">FONTENUMPROCW</arg>
<arg name="lParam">LPARAM</arg>
<arg name="dwFlags">DWORD</arg>
</function>

<function name="EnumFontFamiliesA" ret="int " convention="__stdcall">
<arg name="hdc">HDC</arg>
<arg name="lpLogfont">LPCSTR</arg>
<arg name="lpProc">FONTENUMPROCA</arg>
<arg name="lParam">LPARAM</arg>
</function>
<function name="EnumFontFamiliesW" ret="int " convention="__stdcall">
<arg name="hdc">HDC</arg>
<arg name="lpLogfont">LPCWSTR</arg>
<arg name="lpProc">FONTENUMPROCW</arg>
<arg name="lParam">LPARAM</arg>
</function>
<function name="EnumFontsA" ret="int " convention="__stdcall">
<arg name="hdc">HDC</arg>
<arg name="lpLogfont">LPCSTR</arg>
<arg name="lpProc">FONTENUMPROCA</arg>
<arg name="lParam">LPARAM</arg>
</function>
<function name="EnumFontsW" ret="int " convention="__stdcall">
<arg name="hdc">HDC</arg>
<arg name="lpLogfont">LPCWSTR</arg>
<arg name="lpProc">FONTENUMPROCW</arg>
<arg name="lParam">LPARAM</arg>
</function>
<function name="EnumObjects" ret="int " convention="__stdcall">
<arg name="hdc">HDC</arg>
<arg name="nType">int</arg>
<arg name="lpFunc">GOBJENUMPROC</arg>
<arg name="lParam">LPARAM</arg>
</function>

<function name="EqualRgn" ret="BOOL" convention="__stdcall">
<arg name="hrgn1">HRGN</arg>
<arg name="hrgn2">HRGN</arg>
</function>
<function name="Escape" ret="int " convention="__stdcall">
<arg name="hdc">HDC</arg>
<arg name="iEscape">int</arg>
<arg name="cjIn">int</arg>
<arg name="pvIn">LPCSTR</arg>
<arg name="pvOut">LPVOID</arg>
</function>
<function name="ExtEscape" ret="int " convention="__stdcall">
<arg name="hdc">HDC</arg>
<arg name="iEscape">int</arg>
<arg name="cjInput">int</arg>
<arg name="lpInData">LPCSTR</arg>
<arg name="cjOutput">int</arg>
<arg name="lpOutData">LPSTR</arg>
</function>
<function name="ExcludeClipRect" ret="int " convention="__stdcall">
<arg name="hdc">HDC</arg>
<arg name="left">int</arg>
<arg name="top">int</arg>
<arg name="right">int</arg>
<arg name="bottom">int</arg>
</function>
<function name="ExtCreateRegion" ret="HRGN" convention="__stdcall">
<arg name="lpx">const XFORM *</arg>
<arg name="nCount">DWORD</arg>
<arg name="lpData">const RGNDATA *</arg>
</function>
<function name="ExtFloodFill" ret="BOOL" convention="__stdcall">
<arg name="hdc">HDC</arg>
<arg name="x">int</arg>
<arg name="y">int</arg>
<arg name="color">COLORREF</arg>
<arg name="type">UINT</arg>
</function>
<function name="FillRgn" ret="BOOL" convention="__stdcall">
<arg name="hdc">HDC</arg>
<arg name="hrgn">HRGN</arg>
<arg name="hbr">HBRUSH</arg>
</function>
<function name="FloodFill" ret="BOOL" convention="__stdcall">
<arg name="hdc">HDC</arg>
<arg name="x">int</arg>
<arg name="y">int</arg>
<arg name="color">COLORREF</arg>
</function>
<function name="FrameRgn" ret="BOOL" convention="__stdcall">
<arg name="hdc">HDC</arg>
<arg name="hrgn">HRGN</arg>
<arg name="hbr">HBRUSH</arg>
<arg name="w">int</arg>
<arg name="h">int</arg>
</function>
<function name="GetROP2" ret="int " convention="__stdcall">
<arg name="hdc">HDC</arg>
</function>
<function name="GetAspectRatioFilterEx" ret="BOOL" convention="__stdcall">
<arg name="hdc">HDC</arg>
<arg name="lpsize">LPSIZE</arg>
</function>
<function name="GetBkColor" ret="COLORREF" convention="__stdcall">
<arg name="hdc">HDC</arg>
</function>
<function name="GetDCBrushColor" ret="COLORREF" convention="__stdcall">
<arg name="hdc">HDC</arg>
</function>
<function name="GetDCPenColor" ret="COLORREF" convention="__stdcall">
<arg name="hdc">HDC</arg>
</function>
<function name="GetBkMode" ret="int" convention="__stdcall">
<arg name="hdc">HDC</arg>
</function>

<function name="GetBitmapBits" ret="LONG" convention="__stdcall">
<arg name="hbit">HBITMAP</arg>
<arg name="cb">LONG</arg>
<arg name="lpvBits">LPVOID</arg>
</function>

<function name="GetBitmapDimensionEx" ret="BOOL " convention="__stdcall">
<arg name="hbit">HBITMAP</arg>
<arg name="lpsize">LPSIZE</arg>
</function>
<function name="GetBoundsRect" ret="UINT " convention="__stdcall">
<arg name="hdc">HDC</arg>
<arg name="lprect">LPRECT</arg>
<arg name="flags">UINT</arg>
</function>

<function name="GetBrushOrgEx" ret="BOOL " convention="__stdcall">
<arg name="hdc">HDC</arg>
<arg name="lppt">LPPOINT</arg>
</function>

<function name="GetCharWidthA" ret="BOOL " convention="__stdcall">
<arg name="hdc">HDC</arg>
<arg name="iFirst">UINT</arg>
<arg name="iLast">UINT</arg>
<arg name="lpBuffer">LPINT</arg>
</function>
<function name="GetCharWidthW" ret="BOOL " convention="__stdcall">
<arg name="hdc">HDC</arg>
<arg name="iFirst">UINT</arg>
<arg name="iLast">UINT</arg>
<arg name="lpBuffer">LPINT</arg>
</function>
<function name="GetCharWidth32A" ret="BOOL " convention="__stdcall">
<arg name="hdc">HDC</arg>
<arg name="iFirst">UINT</arg>
<arg name="iLast">UINT</arg>
<arg name="lpBuffer">LPINT</arg>
</function>
<function name="GetCharWidth32W" ret="BOOL " convention="__stdcall">
<arg name="hdc">HDC</arg>
<arg name="iFirst">UINT</arg>
<arg name="iLast">UINT</arg>
<arg name="lpBuffer">LPINT</arg>
</function>
<function name="GetCharWidthFloatA" ret="BOOL " convention="__stdcall">
<arg name="hdc">HDC</arg>
<arg name="iFirst">UINT</arg>
<arg name="iLast">UINT</arg>
<arg name="lpBuffer">PFLOAT</arg>
</function>
<function name="GetCharWidthFloatW" ret="BOOL " convention="__stdcall">
<arg name="hdc">HDC</arg>
<arg name="iFirst">UINT</arg>
<arg name="iLast">UINT</arg>
<arg name="lpBuffer">PFLOAT</arg>
</function>
<function name="GetCharABCWidthsA" ret="BOOL " convention="__stdcall">
<arg name="hdc">HDC</arg>
<arg name="wFirst">UINT</arg>
<arg name="wLast">UINT</arg>
<arg name="lpABC">LPABC</arg>
</function>
<function name="GetCharABCWidthsW" ret="BOOL " convention="__stdcall">
<arg name="hdc">HDC</arg>
<arg name="wFirst">UINT</arg>
<arg name="wLast">UINT</arg>
<arg name="lpABC">LPABC</arg>
</function>
<function name="GetCharABCWidthsFloatA" ret="BOOL " convention="__stdcall">
<arg name="hdc">HDC</arg>
<arg name="iFirst">UINT</arg>
<arg name="iLast">UINT</arg>
<arg name="lpABC">LPABCFLOAT</arg>
</function>
<function name="GetCharABCWidthsFloatW" ret="BOOL " convention="__stdcall">
<arg name="hdc">HDC</arg>
<arg name="iFirst">UINT</arg>
<arg name="iLast">UINT</arg>
<arg name="lpABC">LPABCFLOAT</arg>
</function>
<function name="GetClipBox" ret="int  " convention="__stdcall">
<arg name="hdc">HDC</arg>
<arg name="lprect">LPRECT</arg>
</function>
<function name="GetClipRgn" ret="int  " convention="__stdcall">
<arg name="hdc">HDC</arg>
<arg name="hrgn">HRGN</arg>
</function>
<function name="GetMetaRgn" ret="int  " convention="__stdcall">
<arg name="hdc">HDC</arg>
<arg name="hrgn">HRGN</arg>
</function>
<function name="GetCurrentObject" ret="HGDIOBJ" convention="__stdcall">
<arg name="hdc">HDC</arg>
<arg name="type">UINT</arg>
</function>
<function name="GetCurrentPositionEx" ret="BOOL " convention="__stdcall">
<arg name="hdc">HDC</arg>
<arg name="lppt">LPPOINT</arg>
</function>
<function name="GetDeviceCaps" ret="int  " convention="__stdcall">
<arg name="hdc">HDC</arg>
<arg name="index">int</arg>
</function>
<function name="GetDIBits" ret="int  " convention="__stdcall">
<arg name="hdc">HDC</arg>
<arg name="hbm">HBITMAP</arg>
<arg name="start">UINT</arg>
<arg name="cLines">UINT</arg>
<arg name="lpvBits">LPVOID</arg>
<arg name="lpbmi">LPBITMAPINFO</arg>
<arg name="usage">UINT</arg>
</function>  
<function name="GetFontData" ret="DWORD" convention="__stdcall">
<arg name="hdc">HDC    </arg>
<arg name="dwTable">DWORD  </arg>
<arg name="dwOffset">DWORD  </arg>
<arg name="pvBuffer">PVOID</arg>
<arg name="cjBuffer">DWORD  </arg>
</function>

<function name="GetGlyphOutlineA" ret="DWORD" convention="__stdcall">
<arg name="hdc">HDC</arg>
<arg name="uChar">UINT</arg>
<arg name="fuFormat">UINT</arg>
<arg name="lpgm">LPGLYPHMETRICS</arg>
<arg name="cjBuffer">DWORD</arg>
<arg name="pvBuffer">LPVOID</arg>
<arg name="lpmat2">const MAT2 *</arg>
</function>
<function name="GetGlyphOutlineW" ret="DWORD" convention="__stdcall">
<arg name="hdc">HDC</arg>
<arg name="uChar">UINT</arg>
<arg name="fuFormat">UINT</arg>
<arg name="lpgm">LPGLYPHMETRICS</arg>
<arg name="cjBuffer">DWORD</arg>
<arg name="pvBuffer">LPVOID</arg>
<arg name="lpmat2">const MAT2 *</arg>
</function>
<function name="GetGraphicsMode" ret="int  " convention="__stdcall">
<arg name="hdc">HDC</arg>
</function>
<function name="GetMapMode" ret="int  " convention="__stdcall">
<arg name="hdc">HDC</arg>
</function>
<function name="GetMetaFileBitsEx" ret="UINT " convention="__stdcall">
<arg name="hMF">HMETAFILE</arg>
<arg name="cbBuffer">UINT</arg>
<arg name="lpData">LPVOID</arg>
</function>
<function name="GetMetaFileA" ret="HMETAFILE  " convention="__stdcall">
<arg name="lpName">LPCSTR</arg>
</function>
<function name="GetMetaFileW" ret="HMETAFILE  " convention="__stdcall">
<arg name="lpName">LPCWSTR</arg>
</function>
<function name="GetNearestColor" ret="COLORREF" convention="__stdcall">
<arg name="hdc">HDC</arg>
<arg name="color">COLORREF</arg>
</function>
<function name="GetNearestPaletteIndex" ret="UINT " convention="__stdcall">
<arg name="h">HPALETTE</arg>
<arg name="color">COLORREF</arg>
</function>
<function name="GetObjectType" ret="DWORD" convention="__stdcall">
<arg name="h">HGDIOBJ</arg>
</function>
<function name="GetOutlineTextMetricsA" ret="UINT" convention="__stdcall">
<arg name="hdc">HDC</arg>
<arg name="cjCopy">UINT</arg>
<arg name="potm">LPOUTLINETEXTMETRICA</arg>
</function>
<function name="GetOutlineTextMetricsW" ret="UINT" convention="__stdcall">
<arg name="hdc">HDC</arg>
<arg name="cjCopy">UINT</arg>
<arg name="potm">LPOUTLINETEXTMETRICW</arg>
</function>
<function name="GetPaletteEntries" ret="UINT " convention="__stdcall">
<arg name="hpal">HPALETTE</arg>
<arg name="iStart">UINT</arg>
<arg name="cEntries">UINT</arg>
<arg name="pPalEntries">LPPALETTEENTRY</arg>
</function>
<function name="GetPixel" ret="COLORREF" convention="__stdcall">
<arg name="hdc">HDC</arg>
<arg name="x">int</arg>
<arg name="y">int</arg>
</function>
<function name="GetPixelFormat" ret="int  " convention="__stdcall">
<arg name="hdc">HDC</arg>
</function>
<function name="GetPolyFillMode" ret="int  " convention="__stdcall">
<arg name="hdc">HDC</arg>
</function>
<function name="GetRasterizerCaps" ret="BOOL " convention="__stdcall">
<arg name="lpraststat">LPRASTERIZER_STATUS</arg>
<arg name="cjBytes">UINT</arg>
</function>

<function name="GetRandomRgn" ret="int  " convention="__stdcall">
<arg name="hdc">HDC</arg>
<arg name="hrgn">HRGN</arg>
<arg name="i">INT</arg>
</function>
<function name="GetRegionData" ret="DWORD" convention="__stdcall">
<arg name="hrgn">HRGN</arg>
<arg name="nCount">DWORD</arg>
<arg name="lpRgnData">LPRGNDATA</arg>
</function>
<function name="GetRgnBox" ret="int  " convention="__stdcall">
<arg name="hrgn">HRGN</arg>
<arg name="lprc">LPRECT</arg>
</function>
<function name="GetStockObject" ret="HGDIOBJ" convention="__stdcall">
<arg name="i">int</arg>
</function>
<function name="GetStretchBltMode" ret="int  " convention="__stdcall">
<arg name="hdc">HDC</arg>
</function>
<function name="GetSystemPaletteEntries" ret="UINT" convention="__stdcall">
<arg name="hdc">HDC </arg>
<arg name="iStart">UINT</arg>
<arg name="cEntries">UINT</arg>
<arg name="pPalEntries">LPPALETTEENTRY</arg>
</function>

<function name="GetSystemPaletteUse" ret="UINT " convention="__stdcall">
<arg name="hdc">HDC</arg>
</function>
<function name="GetTextCharacterExtra" ret="int  " convention="__stdcall">
<arg name="hdc">HDC</arg>
</function>
<function name="GetTextAlign" ret="UINT " convention="__stdcall">
<arg name="hdc">HDC</arg>
</function>
<function name="GetTextColor" ret="COLORREF" convention="__stdcall">
<arg name="hdc">HDC</arg>
</function>

<function name="GetTextExtentPointA" ret="BOOL" convention="__stdcall">
<arg name="hdc">HDC</arg>
<arg name="lpString">LPCSTR</arg>
<arg name="c">int</arg>
<arg name="lpsz">LPSIZE</arg>
</function>
<function name="GetTextExtentPointW" ret="BOOL" convention="__stdcall">
<arg name="hdc">HDC</arg>
<arg name="lpString">LPCWSTR</arg>
<arg name="c">int</arg>
<arg name="lpsz">LPSIZE</arg>
</function>
<function name="GetTextExtentPoint32A" ret="BOOL" convention="__stdcall">
<arg name="hdc">HDC</arg>
<arg name="lpString">LPCSTR</arg>
<arg name="c">int</arg>
<arg name="psizl">LPSIZE</arg>
</function>
<function name="GetTextExtentPoint32W" ret="BOOL" convention="__stdcall">
<arg name="hdc">HDC</arg>
<arg name="lpString">LPCWSTR</arg>
<arg name="c">int</arg>
<arg name="psizl">LPSIZE</arg>
</function>
<function name="GetTextExtentExPointA" ret="BOOL" convention="__stdcall">
<arg name="hdc">HDC</arg>
<arg name="lpszString">LPCSTR</arg>
<arg name="cchString">int</arg>
<arg name="nMaxExtent">int</arg>
<arg name="lpnFit">LPINT</arg>
<arg name="lpnDx">LPINT</arg>
<arg name="lpSize">LPSIZE</arg>
</function>
<function name="GetTextExtentExPointW" ret="BOOL" convention="__stdcall">
<arg name="hdc">HDC</arg>
<arg name="lpszString">LPCWSTR</arg>
<arg name="cchString">int</arg>
<arg name="nMaxExtent">int</arg>
<arg name="lpnFit">LPINT</arg>
<arg name="lpnDx">LPINT</arg>
<arg name="lpSize">LPSIZE</arg>
</function>
<function name="GetTextCharset" ret="int" convention="__stdcall">
<arg name="hdc">HDC</arg>
</function>
<function name="GetTextCharsetInfo" ret="int" convention="__stdcall">
<arg name="hdc">HDC</arg>
<arg name="lpSig">LPFONTSIGNATURE</arg>
<arg name="dwFlags">DWORD</arg>
</function>
<function name="TranslateCharsetInfo" ret="BOOL" convention="__stdcall">
<arg name="lpSrc">DWORD  *</arg>
<arg name="lpCs">LPCHARSETINFO </arg>
  DWORD dwFlags);
<function name="GetFontLanguageInfo" ret="DWORD" convention="__stdcall">
<arg name="hdc">HDC</arg>
</function>
<function name="GetCharacterPlacementA" ret="DWORD" convention="__stdcall">
<arg name="hdc">HDC</arg>
<arg name="lpString">LPCSTR</arg>
<arg name="nCount">int</arg>
<arg name="nMexExtent">int</arg>
<arg name="lpResults">LPGCP_RESULTSA</arg>
<arg name="dwFlags">DWORD</arg>
</function>
<function name="GetCharacterPlacementW" ret="DWORD" convention="__stdcall">
<arg name="hdc">HDC</arg>
<arg name="lpString">LPCWSTR</arg>
<arg name="nCount">int</arg>
<arg name="nMexExtent">int</arg>
<arg name="lpResults">LPGCP_RESULTSW</arg>
<arg name="dwFlags">DWORD</arg>
</function>
<struct name="tagWCRANGE">
<field name="wcLow">WCHAR</field>
<field name="cGlyphs">USHORT</field>
} WCRANGE, *PWCRANGE, *LPWCRANGE;
<struct name="tagGLYPHSET">
<field name="cbThis">DWORD</field>
<field name="flAccel">DWORD</field>
<field name="cGlyphsSupported">DWORD</field>
<field name="cRanges">DWORD</field>
<field name="ranges[1]">WCRANGE</field>
} GLYPHSET, *PGLYPHSET,  *LPGLYPHSET;
<function name="GetFontUnicodeRanges" ret="DWORD" convention="__stdcall">
<arg name="hdc">HDC</arg>
<arg name="lpgs">LPGLYPHSET</arg>
</function>
<function name="GetGlyphIndicesA" ret="DWORD" convention="__stdcall">
<arg name="hdc">HDC</arg>
<arg name="lpstr">LPCSTR</arg>
<arg name="c">int</arg>
<arg name="pgi">LPWORD</arg>
<arg name="fl">DWORD</arg>
</function>
<function name="GetGlyphIndicesW" ret="DWORD" convention="__stdcall">
<arg name="hdc">HDC</arg>
<arg name="lpstr">LPCWSTR</arg>
<arg name="c">int</arg>
<arg name="pgi">LPWORD</arg>
<arg name="fl">DWORD</arg>
</function>
<function name="GetTextExtentPointI" ret="BOOL " convention="__stdcall">
<arg name="hdc">HDC</arg>
<arg name="pgiIn">LPWORD</arg>
<arg name="cgi">int</arg>
<arg name="psize">LPSIZE</arg>
</function>
<function name="GetTextExtentExPointI" ret="BOOL " convention="__stdcall">
<arg name="hdc">HDC</arg>
<arg name="lpwszString">LPWORD</arg>
<arg name="cwchString">int</arg>
<arg name="nMaxExtent">int</arg>
<arg name="lpnFit">LPINT</arg>
<arg name="lpnDx">LPINT</arg>
<arg name="lpSize">LPSIZE</arg>
</function>

<function name="GetCharWidthI" ret="BOOL " convention="__stdcall">
<arg name="hdc">HDC</arg>
<arg name="giFirst">UINT</arg>
<arg name="cgi">UINT</arg>
<arg name="pgi">LPWORD</arg>
<arg name="piWidths">LPINT</arg>
</function>

<function name="GetCharABCWidthsI" ret="BOOL " convention="__stdcall">
<arg name="hdc">HDC   </arg>
<arg name="giFirst">UINT  </arg>
<arg name="cgi">UINT  </arg>
<arg name="pgi">LPWORD</arg>
<arg name="pabc">LPABC </arg>
</function>

<struct name="tagDESIGNVECTOR">
<field name="dvReserved">DWORD</field>
<field name="dvNumAxes">DWORD</field>
<field name="dvValues[16]">LONG</field>
} DESIGNVECTOR, *PDESIGNVECTOR,  *LPDESIGNVECTOR;

<function name="AddFontResourceExA" ret="int " convention="__stdcall">
<arg name="name">LPCSTR</arg>
<arg name="fl">DWORD</arg>
<arg name="res">PVOID</arg>
</function>
<function name="AddFontResourceExW" ret="int " convention="__stdcall">
<arg name="name">LPCWSTR</arg>
<arg name="fl">DWORD</arg>
<arg name="res">PVOID</arg>
</function>
<function name="RemoveFontResourceExA" ret="BOOL" convention="__stdcall">
<arg name="name">LPCSTR</arg>
<arg name="fl">DWORD</arg>
<arg name="pdv">PVOID</arg>
</function>
<function name="RemoveFontResourceExW" ret="BOOL" convention="__stdcall">
<arg name="name">LPCWSTR</arg>
<arg name="fl">DWORD</arg>
<arg name="pdv">PVOID</arg>
</function>
<function name="AddFontMemResourceEx" ret="HANDLE" convention="__stdcall">
<arg name="pFileView">PVOID</arg>
<arg name="cjSize">DWORD</arg>
<arg name="pvResrved">PVOID</arg>
<arg name="pNumFonts">DWORD*</arg>
</function>

<function name="RemoveFontMemResourceEx" ret="BOOL" convention="__stdcall">
<arg name="h">HANDLE</arg>
</function>
<struct name="tagAXISINFOA">
<field name="axMinValue">LONG</field>
<field name="axMaxValue">LONG</field>
<field name="axAxisName[16]">BYTE</field>
} AXISINFOA, *PAXISINFOA,  *LPAXISINFOA;
<struct name="tagAXISINFOW">
<field name="axMinValue">LONG</field>
<field name="axMaxValue">LONG</field>
<field name="axAxisName[16]">WCHAR</field>
} AXISINFOW, *PAXISINFOW,  *LPAXISINFOW;
typedef AXISINFOA AXISINFO;
typedef PAXISINFOA PAXISINFO;
typedef LPAXISINFOA LPAXISINFO;
<struct name="tagAXESLISTA">
<field name="axlReserved">DWORD</field>
<field name="axlNumAxes">DWORD</field>
<field name="axlAxisInfo[16]">AXISINFOA</field>
} AXESLISTA, *PAXESLISTA,  *LPAXESLISTA;
<struct name="tagAXESLISTW">
<field name="axlReserved">DWORD</field>
<field name="axlNumAxes">DWORD</field>
<field name="axlAxisInfo[16]">AXISINFOW</field>
} AXESLISTW, *PAXESLISTW,  *LPAXESLISTW;
typedef AXESLISTA AXESLIST;
typedef PAXESLISTA PAXESLIST;
typedef LPAXESLISTA LPAXESLIST;

<struct name="tagENUMLOGFONTEXDVA">
<field name="elfEnumLogfontEx">ENUMLOGFONTEXA</field>
<field name="elfDesignVector">DESIGNVECTOR</field>
} ENUMLOGFONTEXDVA, *PENUMLOGFONTEXDVA,  *LPENUMLOGFONTEXDVA;
<struct name="tagENUMLOGFONTEXDVW">
<field name="elfEnumLogfontEx">ENUMLOGFONTEXW</field>
<field name="elfDesignVector">DESIGNVECTOR</field>
} ENUMLOGFONTEXDVW, *PENUMLOGFONTEXDVW,  *LPENUMLOGFONTEXDVW;
typedef ENUMLOGFONTEXDVA ENUMLOGFONTEXDV;
typedef PENUMLOGFONTEXDVA PENUMLOGFONTEXDV;
typedef LPENUMLOGFONTEXDVA LPENUMLOGFONTEXDV;
<function name="CreateFontIndirectExA" ret="HFONT " convention="__stdcall">
  const ENUMLOGFONTEXDVA *);
<function name="CreateFontIndirectExW" ret="HFONT " convention="__stdcall">
  const ENUMLOGFONTEXDVW *);
<struct name="tagENUMTEXTMETRICA">
<field name="etmNewTextMetricEx">NEWTEXTMETRICEXA</field>
<field name="etmAxesList">AXESLISTA</field>
} ENUMTEXTMETRICA, *PENUMTEXTMETRICA,  *LPENUMTEXTMETRICA;
<struct name="tagENUMTEXTMETRICW">
<field name="etmNewTextMetricEx">NEWTEXTMETRICEXW</field>
<field name="etmAxesList">AXESLISTW</field>
} ENUMTEXTMETRICW, *PENUMTEXTMETRICW,  *LPENUMTEXTMETRICW;
typedef ENUMTEXTMETRICA ENUMTEXTMETRIC;
typedef PENUMTEXTMETRICA PENUMTEXTMETRIC;
typedef LPENUMTEXTMETRICA LPENUMTEXTMETRIC;
<function name="GetViewportExtEx" ret="BOOL " convention="__stdcall">
<arg name="hdc">HDC</arg>
<arg name="lpsize">LPSIZE</arg>
</function>
<function name="GetViewportOrgEx" ret="BOOL " convention="__stdcall">
<arg name="hdc">HDC</arg>
<arg name="lppoint">LPPOINT</arg>
</function>
<function name="GetWindowExtEx" ret="BOOL " convention="__stdcall">
<arg name="hdc">HDC</arg>
<arg name="lpsize">LPSIZE</arg>
</function>
<function name="GetWindowOrgEx" ret="BOOL " convention="__stdcall">
<arg name="hdc">HDC</arg>
<arg name="lppoint">LPPOINT</arg>
</function>

<function name="IntersectClipRect" ret="int " convention="__stdcall">
<arg name="hdc">HDC</arg>
<arg name="left">int</arg>
<arg name="top">int</arg>
<arg name="right">int</arg>
<arg name="bottom">int</arg>
</function>
<function name="InvertRgn" ret="BOOL" convention="__stdcall">
<arg name="hdc">HDC</arg>
<arg name="hrgn">HRGN</arg>
</function>
<function name="LineDDA" ret="BOOL" convention="__stdcall">
<arg name="xStart">int</arg>
<arg name="yStart">int</arg>
<arg name="xEnd">int</arg>
<arg name="yEnd">int</arg>
<arg name="lpProc">LINEDDAPROC</arg>
<arg name="data">LPARAM</arg>
</function>
<function name="LineTo" ret="BOOL" convention="__stdcall">
<arg name="hdc">HDC</arg>
<arg name="x">int</arg>
<arg name="y">int</arg>
</function>
<function name="MaskBlt" ret="BOOL" convention="__stdcall">
<arg name="hdcDest">HDC</arg>
<arg name="xDest">int</arg>
<arg name="yDest">int</arg>
<arg name="width">int</arg>
<arg name="height">int</arg>
<arg name="hdcSrc">HDC</arg>
<arg name="xSrc">int</arg>
<arg name="ySrc">int</arg>
<arg name="hbmMask">HBITMAP</arg>
<arg name="xMask">int</arg>
<arg name="yMask">int</arg>
<arg name="rop">DWORD</arg>
</function>
<function name="PlgBlt" ret="BOOL" convention="__stdcall">
<arg name="hdcDest">HDC</arg>
<arg name="lpPoint">const POINT *</arg>
<arg name="hdcSrc">HDC</arg>
<arg name="xSrc">int</arg>
<arg name="ySrc">int</arg>
<arg name="width">int</arg>
<arg name="height">int</arg>
<arg name="hbmMask">HBITMAP</arg>
<arg name="xMask">int</arg>
<arg name="yMask">int</arg>
</function>

<function name="OffsetClipRgn" ret="int " convention="__stdcall">
<arg name="hdc">HDC</arg>
<arg name="x">int</arg>
<arg name="y">int</arg>
</function>
<function name="OffsetRgn" ret="int " convention="__stdcall">
<arg name="hrgn">HRGN</arg>
<arg name="x">int</arg>
<arg name="y">int</arg>
</function>
<function name="PatBlt" ret="BOOL" convention="__stdcall">
<arg name="hdc">HDC</arg>
<arg name="x">int</arg>
<arg name="y">int</arg>
<arg name="w">int</arg>
<arg name="h">int</arg>
<arg name="rop">DWORD</arg>
</function>
<function name="Pie" ret="BOOL" convention="__stdcall">
<arg name="hdc">HDC</arg>
<arg name="left">int</arg>
<arg name="top">int</arg>
<arg name="right">int</arg>
<arg name="bottom">int</arg>
<arg name="xr1">int</arg>
<arg name="yr1">int</arg>
<arg name="xr2">int</arg>
<arg name="yr2">int</arg>
</function>
<function name="PlayMetaFile" ret="BOOL" convention="__stdcall">
<arg name="hdc">HDC</arg>
<arg name="hmf">HMETAFILE</arg>
</function>
<function name="PaintRgn" ret="BOOL" convention="__stdcall">
<arg name="hdc">HDC</arg>
<arg name="hrgn">HRGN</arg>
</function>
<function name="PolyPolygon" ret="BOOL" convention="__stdcall">
<arg name="hdc">HDC</arg>
<arg name="apt">const POINT *</arg>
<arg name="asz">const INT *</arg>
   int csz);
<function name="PtInRegion" ret="BOOL" convention="__stdcall">
<arg name="hrgn">HRGN</arg>
<arg name="x">int</arg>
<arg name="y">int</arg>
</function>
<function name="PtVisible" ret="BOOL" convention="__stdcall">
<arg name="hdc">HDC</arg>
<arg name="x">int</arg>
<arg name="y">int</arg>
</function>
<function name="RectInRegion" ret="BOOL" convention="__stdcall">
<arg name="hrgn">HRGN</arg>
<arg name="lprect">const RECT *</arg>
</function>
<function name="RectVisible" ret="BOOL" convention="__stdcall">
<arg name="hdc">HDC</arg>
<arg name="lprect">const RECT *</arg>
</function>
<function name="Rectangle" ret="BOOL" convention="__stdcall">
<arg name="hdc">HDC</arg>
<arg name="left">int</arg>
<arg name="top">int</arg>
<arg name="right">int</arg>
<arg name="bottom">int</arg>
</function>
<function name="RestoreDC" ret="BOOL" convention="__stdcall">
<arg name="hdc">HDC</arg>
<arg name="nSavedDC">int</arg>
</function>
<function name="ResetDCA" ret="HDC " convention="__stdcall">
<arg name="hdc">HDC</arg>
<arg name="lpdm">const DEVMODEA *</arg>
</function>
<function name="ResetDCW" ret="HDC " convention="__stdcall">
<arg name="hdc">HDC</arg>
<arg name="lpdm">const DEVMODEW *</arg>
</function>
<function name="RealizePalette" ret="UINT" convention="__stdcall">
<arg name="hdc">HDC</arg>
</function>
<function name="RemoveFontResourceA" ret="BOOL" convention="__stdcall">
<arg name="lpFileName">LPCSTR</arg>
</function>
<function name="RemoveFontResourceW" ret="BOOL" convention="__stdcall">
<arg name="lpFileName">LPCWSTR</arg>
</function>
<function name="RoundRect" ret="BOOL " convention="__stdcall">
<arg name="hdc">HDC</arg>
<arg name="left">int</arg>
<arg name="top">int</arg>
<arg name="right">int</arg>
<arg name="bottom">int</arg>
<arg name="width">int</arg>
<arg name="height">int</arg>
</function>
<function name="ResizePalette" ret="BOOL" convention="__stdcall">
<arg name="hpal">HPALETTE</arg>
<arg name="n">UINT</arg>
</function>

<function name="SaveDC" ret="int " convention="__stdcall">
<arg name="hdc">HDC</arg>
</function>
<function name="SelectClipRgn" ret="int " convention="__stdcall">
<arg name="hdc">HDC</arg>
<arg name="hrgn">HRGN</arg>
</function>
<function name="ExtSelectClipRgn" ret="int " convention="__stdcall">
<arg name="hdc">HDC</arg>
<arg name="hrgn">HRGN</arg>
<arg name="mode">int</arg>
</function>
<function name="SetMetaRgn" ret="int " convention="__stdcall">
<arg name="hdc">HDC</arg>
</function>
<function name="SelectObject" ret="HGDIOBJ" convention="__stdcall">
<arg name="hdc">HDC</arg>
<arg name="h">HGDIOBJ</arg>
</function>
<function name="SelectPalette" ret="HPALETTE" convention="__stdcall">
<arg name="hdc">HDC</arg>
<arg name="hPal">HPALETTE</arg>
<arg name="bForceBkgd">BOOL</arg>
</function>
<function name="SetBkColor" ret="COLORREF" convention="__stdcall">
<arg name="hdc">HDC</arg>
<arg name="color">COLORREF</arg>
</function>
<function name="SetDCBrushColor" ret="COLORREF" convention="__stdcall">
<arg name="hdc">HDC</arg>
<arg name="color">COLORREF</arg>
</function>
<function name="SetDCPenColor" ret="COLORREF" convention="__stdcall">
<arg name="hdc">HDC</arg>
<arg name="color">COLORREF</arg>
</function>
<function name="SetBkMode" ret="int  " convention="__stdcall">
<arg name="hdc">HDC</arg>
<arg name="mode">int</arg>
</function>

<function name="SetBitmapBits" ret="LONG" convention="__stdcall">
<arg name="hbm">HBITMAP</arg>
<arg name="cb">DWORD</arg>

     const void *pvBits);

<function name="SetBoundsRect" ret="UINT " convention="__stdcall">
<arg name="hdc">HDC</arg>
<arg name="lprect">const RECT *</arg>
<arg name="flags">UINT</arg>
</function>
<function name="SetDIBits" ret="int  " convention="__stdcall">
<arg name="hdc">HDC</arg>
<arg name="hbm">HBITMAP</arg>
<arg name="start">UINT</arg>
<arg name="cLines">UINT</arg>
<arg name="lpBits">const void *</arg>
<arg name="lpbmi">const BITMAPINFO * </arg>
  UINT ColorUse);
<function name="SetDIBitsToDevice" ret="int  " convention="__stdcall">
<arg name="hdc">HDC</arg>
<arg name="xDest">int</arg>
<arg name="yDest">int</arg>
<arg name="w">DWORD</arg>
<arg name="h">DWORD</arg>
<arg name="xSrc">int</arg>
<arg name="ySrc">int</arg>
<arg name="StartScan">UINT</arg>
<arg name="cLines">UINT</arg>
<arg name="lpvBits">const void *</arg>
<arg name="lpbmi">const BITMAPINFO *</arg>
<arg name="ColorUse">UINT</arg>
</function>
<function name="SetMapperFlags" ret="DWORD" convention="__stdcall">
<arg name="hdc">HDC</arg>
<arg name="flags">DWORD</arg>
</function>
<function name="SetGraphicsMode" ret="int  " convention="__stdcall">
<arg name="hdc">HDC</arg>
<arg name="iMode">int</arg>
</function>
<function name="SetMapMode" ret="int  " convention="__stdcall">
<arg name="hdc">HDC</arg>
<arg name="iMode">int</arg>
</function>
<function name="SetLayout" ret="DWORD" convention="__stdcall">
<arg name="hdc">HDC</arg>
<arg name="l">DWORD</arg>
</function>
<function name="GetLayout" ret="DWORD" convention="__stdcall">
<arg name="hdc">HDC</arg>
</function>
<function name="SetMetaFileBitsEx" ret="HMETAFILE  " convention="__stdcall">
<arg name="cbBuffer">UINT</arg>
  const BYTE *lpData);
<function name="SetPaletteEntries" ret="UINT " convention="__stdcall">
<arg name="hpal">HPALETTE</arg>
<arg name="iStart">UINT</arg>
<arg name="cEntries">UINT</arg>

                                             const PALETTEENTRY *pPalEntries);
<function name="SetPixel" ret="COLORREF" convention="__stdcall">
<arg name="hdc">HDC</arg>
<arg name="x">int</arg>
<arg name="y">int</arg>
<arg name="color">COLORREF</arg>
</function>
<function name="SetPixelV" ret="BOOL  " convention="__stdcall">
<arg name="hdc">HDC</arg>
<arg name="x">int</arg>
<arg name="y">int</arg>
<arg name="color">COLORREF</arg>
</function>
<function name="SetPixelFormat" ret="BOOL " convention="__stdcall">
<arg name="hdc">HDC</arg>
<arg name="format">int</arg>
<arg name="ppfd">const PIXELFORMATDESCRIPTOR *</arg>
</function>
<function name="SetPolyFillMode" ret="int  " convention="__stdcall">
<arg name="hdc">HDC</arg>
<arg name="mode">int</arg>
</function>
<function name="StretchBlt" ret="BOOL " convention="__stdcall">
<arg name="hdcDest">HDC</arg>
<arg name="xDest">int</arg>
<arg name="yDest">int</arg>
<arg name="wDest">int</arg>
<arg name="hDest">int</arg>
<arg name="hdcSrc">HDC</arg>
<arg name="xSrc">int</arg>
<arg name="ySrc">int</arg>
<arg name="wSrc">int</arg>
<arg name="hSrc">int</arg>
<arg name="rop">DWORD</arg>
</function>
<function name="SetRectRgn" ret="BOOL  " convention="__stdcall">
<arg name="hrgn">HRGN</arg>
<arg name="left">int</arg>
<arg name="top">int</arg>
<arg name="right">int</arg>
<arg name="bottom">int</arg>
</function>
<function name="StretchDIBits" ret="int  " convention="__stdcall">
<arg name="hdc">HDC</arg>
<arg name="xDest">int</arg>
<arg name="yDest">int</arg>
<arg name="DestWidth">int</arg>
<arg name="DestHeight">int</arg>
<arg name="xSrc">int</arg>
<arg name="ySrc">int</arg>
<arg name="SrcWidth">int</arg>
<arg name="SrcHeight">int</arg>
<arg name="lpBits">const void *</arg>
<arg name="lpbmi">const BITMAPINFO *</arg>
<arg name="iUsage">UINT</arg>
<arg name="rop">DWORD</arg>
</function>
<function name="SetROP2" ret="int  " convention="__stdcall">
<arg name="hdc">HDC</arg>
<arg name="rop2">int</arg>
</function>
<function name="SetStretchBltMode" ret="int  " convention="__stdcall">
<arg name="hdc">HDC</arg>
<arg name="mode">int</arg>
</function>
<function name="SetSystemPaletteUse" ret="UINT " convention="__stdcall">
<arg name="hdc">HDC</arg>
<arg name="use">UINT</arg>
</function>
<function name="SetTextCharacterExtra" ret="int  " convention="__stdcall">
<arg name="hdc">HDC</arg>
<arg name="extra">int</arg>
</function>
<function name="SetTextColor" ret="COLORREF" convention="__stdcall">
<arg name="hdc">HDC</arg>
<arg name="color">COLORREF</arg>
</function>
<function name="SetTextAlign" ret="UINT " convention="__stdcall">
<arg name="hdc">HDC</arg>
<arg name="align">UINT</arg>
</function>
<function name="SetTextJustification" ret="BOOL " convention="__stdcall">
<arg name="hdc">HDC</arg>
<arg name="extra">int</arg>
<arg name="count">int</arg>
</function>
<function name="UpdateColors" ret="BOOL " convention="__stdcall">
<arg name="hdc">HDC</arg>
</function>

typedef USHORT COLOR16;

<struct name="_TRIVERTEX">
<field name="x">LONG</field>
<field name="y">LONG</field>
<field name="Red">COLOR16</field>
<field name="Green">COLOR16</field>
<field name="Blue">COLOR16</field>
<field name="Alpha">COLOR16</field>
}TRIVERTEX,*PTRIVERTEX,*LPTRIVERTEX;

<struct name="_GRADIENT_TRIANGLE">
<field name="Vertex1">ULONG</field>
<field name="Vertex2">ULONG</field>
<field name="Vertex3">ULONG</field>
} GRADIENT_TRIANGLE,*PGRADIENT_TRIANGLE,*LPGRADIENT_TRIANGLE;

<struct name="_GRADIENT_RECT">
<field name="UpperLeft">ULONG</field>
<field name="LowerRight">ULONG</field>
}GRADIENT_RECT,*PGRADIENT_RECT,*LPGRADIENT_RECT;

<struct name="_BLENDFUNCTION">
<field name="BlendOp">BYTE</field>
<field name="BlendFlags">BYTE</field>
<field name="SourceConstantAlpha">BYTE</field>
<field name="AlphaFormat">BYTE</field>
}BLENDFUNCTION,*PBLENDFUNCTION;

<function name="AlphaBlend" ret="BOOL" convention="__stdcall">
<arg name="hdcDest">HDC</arg>
<arg name="xoriginDest">int</arg>
<arg name="yoriginDest">int</arg>
<arg name="wDest">int</arg>
<arg name="hDest">int</arg>
<arg name="hdcSrc">HDC</arg>
<arg name="xoriginSrc">int</arg>
<arg name="yoriginSrc">int</arg>
<arg name="wSrc">int</arg>
<arg name="hSrc">int</arg>
<arg name="ftn">BLENDFUNCTION</arg>
</function>

<function name="TransparentBlt" ret="BOOL" convention="__stdcall">
<arg name="hdcDest">HDC</arg>
<arg name="xoriginDest">int</arg>
<arg name="yoriginDest">int</arg>
<arg name="wDest">int</arg>
<arg name="hDest">int</arg>
<arg name="hdcSrc">HDC</arg>
<arg name="xoriginSrc">int</arg>
<arg name="yoriginSrc">int</arg>
<arg name="wSrc">int</arg>
<arg name="hSrc">int</arg>
<arg name="crTransparent">UINT</arg>
</function>

<function name="GradientFill" ret="BOOL" convention="__stdcall">
<arg name="hdc">HDC</arg>
<arg name="pVertex">PTRIVERTEX</arg>
<arg name="nVertex">ULONG</arg>
<arg name="pMesh">PVOID</arg>
<arg name="nMesh">ULONG</arg>
<arg name="ulMode">ULONG</arg>
</function>
<function name="GdiAlphaBlend" ret="BOOL " convention="__stdcall">
<arg name="hdcDest">HDC</arg>
<arg name="xoriginDest">int</arg>
<arg name="yoriginDest">int</arg>
<arg name="wDest">int</arg>
<arg name="hDest">int</arg>
<arg name="hdcSrc">HDC</arg>
<arg name="xoriginSrc">int</arg>
<arg name="yoriginSrc">int</arg>
<arg name="wSrc">int</arg>
<arg name="hSrc">int</arg>
<arg name="ftn">BLENDFUNCTION</arg>
</function>

<function name="GdiTransparentBlt" ret="BOOL " convention="__stdcall">
<arg name="hdcDest">HDC</arg>
<arg name="xoriginDest">int</arg>
<arg name="yoriginDest">int</arg>
<arg name="wDest">int</arg>
<arg name="hDest">int</arg>
<arg name="hdcSrc">HDC</arg>
<arg name="xoriginSrc">int</arg>
<arg name="yoriginSrc">int</arg>
<arg name="wSrc">int</arg>
<arg name="hSrc">int</arg>
<arg name="crTransparent">UINT</arg>
</function>

<function name="GdiGradientFill" ret="BOOL " convention="__stdcall">
<arg name="hdc">HDC</arg>
<arg name="pVertex">PTRIVERTEX</arg>
<arg name="nVertex">ULONG</arg>
<arg name="pMesh">PVOID</arg>
<arg name="nCount">ULONG</arg>
<arg name="ulMode">ULONG</arg>
</function>
<function name="PlayMetaFileRecord" ret="BOOL " convention="__stdcall">
<arg name="hdc">HDC</arg>
<arg name="lpHandleTable">LPHANDLETABLE</arg>
<arg name="lpMR">LPMETARECORD</arg>
<arg name="noObjs">UINT</arg>
</function>

typedef int (__stdcall* MFENUMPROC)(  HDC hdc,  HANDLETABLE * lpht,  METARECORD * lpMR,  int nObj,  LPARAM param);
<function name="EnumMetaFile" ret="BOOL " convention="__stdcall">
<arg name="hdc">HDC</arg>
<arg name="hmf">HMETAFILE</arg>
<arg name="proc">MFENUMPROC</arg>
<arg name="param">LPARAM</arg>
</function>

typedef int (__stdcall* ENHMFENUMPROC)( HDC hdc,  HANDLETABLE * lpht,  const ENHMETARECORD * lpmr,  int hHandles,  LPARAM data);
<function name="CloseEnhMetaFile" ret="HENHMETAFILE" convention="__stdcall">
<arg name="hdc">HDC</arg>
</function>
<function name="CopyEnhMetaFileA" ret="HENHMETAFILE" convention="__stdcall">
<arg name="hEnh">HENHMETAFILE</arg>
<arg name="lpFileName">LPCSTR</arg>
</function>
<function name="CopyEnhMetaFileW" ret="HENHMETAFILE" convention="__stdcall">
<arg name="hEnh">HENHMETAFILE</arg>
<arg name="lpFileName">LPCWSTR</arg>
</function>
<function name="CreateEnhMetaFileA" ret="HDC  " convention="__stdcall">
<arg name="hdc">HDC</arg>
<arg name="lpFilename">LPCSTR</arg>
<arg name="lprc">const RECT *</arg>
  LPCSTR lpDesc);
<function name="CreateEnhMetaFileW" ret="HDC  " convention="__stdcall">
<arg name="hdc">HDC</arg>
<arg name="lpFilename">LPCWSTR</arg>
<arg name="lprc">const RECT *</arg>
  LPCWSTR lpDesc);
<function name="DeleteEnhMetaFile" ret="BOOL " convention="__stdcall">
<arg name="hmf">HENHMETAFILE</arg>
</function>
<function name="EnumEnhMetaFile" ret="BOOL " convention="__stdcall">
<arg name="hdc">HDC</arg>
<arg name="hmf">HENHMETAFILE</arg>
<arg name="proc">ENHMFENUMPROC</arg>
<arg name="param">LPVOID</arg>
<arg name="lpRect">const RECT *</arg>
</function>
<function name="GetEnhMetaFileA" ret="HENHMETAFILE " convention="__stdcall">
<arg name="lpName">LPCSTR</arg>
</function>
<function name="GetEnhMetaFileW" ret="HENHMETAFILE " convention="__stdcall">
<arg name="lpName">LPCWSTR</arg>
</function>
<function name="GetEnhMetaFileBits" ret="UINT " convention="__stdcall">
<arg name="hEMF">HENHMETAFILE</arg>
<arg name="nSize">UINT</arg>
<arg name="lpData">LPBYTE</arg>
</function>
<function name="GetEnhMetaFileDescriptionA" ret="UINT " convention="__stdcall">
<arg name="hemf">HENHMETAFILE</arg>
<arg name="cchBuffer">UINT</arg>
<arg name="lpDescription">LPSTR</arg>
</function>
<function name="GetEnhMetaFileDescriptionW" ret="UINT " convention="__stdcall">
<arg name="hemf">HENHMETAFILE</arg>
<arg name="cchBuffer">UINT</arg>
<arg name="lpDescription">LPWSTR</arg>
</function>
<function name="GetEnhMetaFileHeader" ret="UINT " convention="__stdcall">
<arg name="hemf">HENHMETAFILE</arg>
<arg name="nSize">UINT</arg>
<arg name="lpEnhMetaHeader">LPENHMETAHEADER</arg>
</function>
<function name="GetEnhMetaFilePaletteEntries" ret="UINT " convention="__stdcall">
<arg name="hemf">HENHMETAFILE</arg>
<arg name="nNumEntries">UINT</arg>
<arg name="lpPaletteEntries">LPPALETTEENTRY</arg>
</function>

<function name="GetEnhMetaFilePixelFormat" ret="UINT " convention="__stdcall">
<arg name="hemf">HENHMETAFILE</arg>
<arg name="cbBuffer">UINT</arg>

                                                     PIXELFORMATDESCRIPTOR *ppfd);
<function name="GetWinMetaFileBits" ret="UINT " convention="__stdcall">
<arg name="hemf">HENHMETAFILE</arg>
<arg name="cbData16">UINT</arg>
<arg name="pData16">LPBYTE</arg>
<arg name="iMapMode">INT</arg>
<arg name="hdcRef">HDC</arg>
</function>
<function name="PlayEnhMetaFile" ret="BOOL " convention="__stdcall">
<arg name="hdc">HDC</arg>
<arg name="hmf">HENHMETAFILE</arg>
<arg name="lprect">const RECT *</arg>
</function>
<function name="PlayEnhMetaFileRecord" ret="BOOL " convention="__stdcall">
<arg name="hdc">HDC</arg>
<arg name="pht">LPHANDLETABLE</arg>

                                                 const ENHMETARECORD *pmr,
                                                 UINT cht);

<function name="SetEnhMetaFileBits" ret="HENHMETAFILE " convention="__stdcall">
<arg name="nSize">UINT</arg>
<arg name="pb">const BYTE *</arg>
</function>

<function name="SetWinMetaFileBits" ret="HENHMETAFILE " convention="__stdcall">
<arg name="nSize">UINT</arg>

                                                     const BYTE *lpMeta16Data,
                                                     HDC hdcRef,
                                                     const METAFILEPICT *lpMFP);
<function name="GdiComment" ret="BOOL " convention="__stdcall">
<arg name="hdc">HDC</arg>
<arg name="nSize">UINT</arg>
  const BYTE *lpData);
<function name="GetTextMetricsA" ret="BOOL" convention="__stdcall">
<arg name="hdc">HDC</arg>
<arg name="lptm">LPTEXTMETRICA</arg>
</function>
<function name="GetTextMetricsW" ret="BOOL" convention="__stdcall">
<arg name="hdc">HDC</arg>
<arg name="lptm">LPTEXTMETRICW</arg>
</function>
<struct name="tagDIBSECTION">
<field name="dsBm">BITMAP</field>
<field name="dsBmih">BITMAPINFOHEADER</field>
<field name="dsBitfields[3]">DWORD</field>
<field name="dshSection">HANDLE</field>
<field name="dsOffset">DWORD</field>
} DIBSECTION,  *LPDIBSECTION, *PDIBSECTION;
<function name="AngleArc" ret="BOOL" convention="__stdcall">
<arg name="hdc">HDC</arg>
<arg name="x">int</arg>
<arg name="y">int</arg>
<arg name="r">DWORD</arg>
<arg name="StartAngle">FLOAT</arg>
<arg name="SweepAngle">FLOAT</arg>
</function>
<function name="PolyPolyline" ret="BOOL" convention="__stdcall">
<arg name="hdc">HDC</arg>
<arg name="apt">const POINT *</arg>
<arg name="asz">const DWORD *</arg>
  DWORD csz);
<function name="GetWorldTransform" ret="BOOL" convention="__stdcall">
<arg name="hdc">HDC</arg>
<arg name="lpxf">LPXFORM</arg>
</function>
<function name="SetWorldTransform" ret="BOOL" convention="__stdcall">
<arg name="hdc">HDC</arg>
<arg name="lpxf">const XFORM *</arg>
</function>
<function name="ModifyWorldTransform" ret="BOOL" convention="__stdcall">
<arg name="hdc">HDC</arg>
<arg name="lpxf">const XFORM *</arg>
<arg name="mode">DWORD</arg>
</function>
<function name="CombineTransform" ret="BOOL" convention="__stdcall">
<arg name="lpxfOut">LPXFORM</arg>
<arg name="lpxf1">const XFORM *</arg>
  const XFORM *lpxf2);
<function name="CreateDIBSection" ret="HBITMAP" convention="__stdcall">
<arg name="hdc">HDC</arg>
<arg name="lpbmi">const BITMAPINFO *</arg>
<arg name="usage">UINT </arg>
<arg name="ppvBits">void **</arg>
<arg name="hSection">HANDLE </arg>
  DWORD offset);
<function name="GetDIBColorTable" ret="UINT" convention="__stdcall">
<arg name="hdc">HDC </arg>
<arg name="iStart">UINT</arg>
<arg name="cEntries">UINT</arg>

                                         RGBQUAD *prgbq);
<function name="SetDIBColorTable" ret="UINT" convention="__stdcall">
<arg name="hdc">HDC </arg>
<arg name="iStart">UINT</arg>
<arg name="cEntries">UINT</arg>

                                         const RGBQUAD *prgbq);
<struct name="tagCOLORADJUSTMENT">
<field name="caSize">WORD</field>
<field name="caFlags">WORD</field>
<field name="caIlluminantIndex">WORD</field>
<field name="caRedGamma">WORD</field>
<field name="caGreenGamma">WORD</field>
<field name="caBlueGamma">WORD</field>
<field name="caReferenceBlack">WORD</field>
<field name="caReferenceWhite">WORD</field>
<field name="caContrast">SHORT</field>
<field name="caBrightness">SHORT</field>
<field name="caColorfulness">SHORT</field>
<field name="caRedGreenTint">SHORT</field>
} COLORADJUSTMENT, *PCOLORADJUSTMENT,  *LPCOLORADJUSTMENT;

<function name="SetColorAdjustment" ret="BOOL" convention="__stdcall">
<arg name="hdc">HDC</arg>
  const COLORADJUSTMENT *lpca);
<function name="GetColorAdjustment" ret="BOOL" convention="__stdcall">
<arg name="hdc">HDC</arg>
<arg name="lpca">LPCOLORADJUSTMENT</arg>
</function>
<function name="CreateHalftonePalette" ret="HPALETTE" convention="__stdcall">
<arg name="hdc">HDC</arg>
</function>
typedef BOOL (__stdcall* ABORTPROC)(  HDC,  int);
<struct name="_DOCINFOA">
<field name="cbSize">int</field>
<field name="lpszDocName">LPCSTR</field>
<field name="lpszOutput">LPCSTR</field>
<field name="lpszDatatype">LPCSTR</field>
<field name="fwType">DWORD</field>

} DOCINFOA, *LPDOCINFOA;
<struct name="_DOCINFOW">
<field name="cbSize">int</field>
<field name="lpszDocName">LPCWSTR</field>
<field name="lpszOutput">LPCWSTR</field>
<field name="lpszDatatype">LPCWSTR</field>
<field name="fwType">DWORD</field>

} DOCINFOW, *LPDOCINFOW;

typedef DOCINFOA DOCINFO;
typedef LPDOCINFOA LPDOCINFO;

<function name="StartDocA" ret="int" convention="__stdcall">
<arg name="hdc">HDC</arg>
  const DOCINFOA *lpdi);
<function name="StartDocW" ret="int" convention="__stdcall">
<arg name="hdc">HDC</arg>
  const DOCINFOW *lpdi);
<function name="EndDoc" ret="int" convention="__stdcall">
<arg name="hdc">HDC</arg>
</function>
<function name="StartPage" ret="int" convention="__stdcall">
<arg name="hdc">HDC</arg>
</function>
<function name="EndPage" ret="int" convention="__stdcall">
<arg name="hdc">HDC</arg>
</function>
<function name="AbortDoc" ret="int" convention="__stdcall">
<arg name="hdc">HDC</arg>
</function>
<function name="SetAbortProc" ret="int" convention="__stdcall">
<arg name="hdc">HDC</arg>
<arg name="proc">ABORTPROC</arg>
</function>

<function name="AbortPath" ret="BOOL" convention="__stdcall">
<arg name="hdc">HDC</arg>
</function>
<function name="ArcTo" ret="BOOL" convention="__stdcall">
<arg name="hdc">HDC</arg>
<arg name="left">int</arg>
<arg name="top">int</arg>
<arg name="right">int</arg>
<arg name="bottom">int</arg>
<arg name="xr1">int</arg>
<arg name="yr1">int</arg>
<arg name="xr2">int</arg>
<arg name="yr2">int</arg>
</function>
<function name="BeginPath" ret="BOOL" convention="__stdcall">
<arg name="hdc">HDC</arg>
</function>
<function name="CloseFigure" ret="BOOL" convention="__stdcall">
<arg name="hdc">HDC</arg>
</function>
<function name="EndPath" ret="BOOL" convention="__stdcall">
<arg name="hdc">HDC</arg>
</function>
<function name="FillPath" ret="BOOL" convention="__stdcall">
<arg name="hdc">HDC</arg>
</function>
<function name="FlattenPath" ret="BOOL" convention="__stdcall">
<arg name="hdc">HDC</arg>
</function>
<function name="GetPath" ret="int " convention="__stdcall">
<arg name="hdc">HDC</arg>
<arg name="apt">LPPOINT</arg>
<arg name="aj">LPBYTE</arg>
<arg name="cpt">int</arg>
</function>
<function name="PathToRegion" ret="HRGN" convention="__stdcall">
<arg name="hdc">HDC</arg>
</function>
<function name="PolyDraw" ret="BOOL" convention="__stdcall">
<arg name="hdc">HDC</arg>
<arg name="apt">const POINT *</arg>
<arg name="aj">const BYTE *</arg>
<arg name="cpt">int</arg>
</function>
<function name="SelectClipPath" ret="BOOL" convention="__stdcall">
<arg name="hdc">HDC</arg>
<arg name="mode">int</arg>
</function>
<function name="SetArcDirection" ret="int " convention="__stdcall">
<arg name="hdc">HDC</arg>
<arg name="dir">int</arg>
</function>
<function name="SetMiterLimit" ret="BOOL" convention="__stdcall">
<arg name="hdc">HDC</arg>
<arg name="limit">FLOAT</arg>
<arg name="old">PFLOAT</arg>
</function>
<function name="StrokeAndFillPath" ret="BOOL" convention="__stdcall">
<arg name="hdc">HDC</arg>
</function>
<function name="StrokePath" ret="BOOL" convention="__stdcall">
<arg name="hdc">HDC</arg>
</function>
<function name="WidenPath" ret="BOOL" convention="__stdcall">
<arg name="hdc">HDC</arg>
</function>
<function name="ExtCreatePen" ret="HPEN" convention="__stdcall">
<arg name="iPenStyle">DWORD</arg>
<arg name="cWidth">DWORD</arg>

                                     const LOGBRUSH *plbrush,
                                     DWORD cStyle,
                                     const DWORD *pstyle);
<function name="GetMiterLimit" ret="BOOL" convention="__stdcall">
<arg name="hdc">HDC</arg>
<arg name="plimit">PFLOAT</arg>
</function>
<function name="GetArcDirection" ret="int " convention="__stdcall">
<arg name="hdc">HDC</arg>
</function>

<function name="GetObjectA" ret="int  " convention="__stdcall">
<arg name="h">HANDLE</arg>
<arg name="c">int</arg>
<arg name="pv">LPVOID</arg>
</function>
<function name="GetObjectW" ret="int  " convention="__stdcall">
<arg name="h">HANDLE</arg>
<arg name="c">int</arg>
<arg name="pv">LPVOID</arg>
</function>

<function name="MoveToEx" ret="BOOL " convention="__stdcall">
<arg name="hdc">HDC</arg>
<arg name="x">int</arg>
<arg name="y">int</arg>
<arg name="lppt">LPPOINT</arg>
</function>
<function name="TextOutA" ret="BOOL " convention="__stdcall">
<arg name="hdc">HDC</arg>
<arg name="x">int</arg>
<arg name="y">int</arg>
<arg name="lpString">LPCSTR</arg>
<arg name="c">int</arg>
</function>
<function name="TextOutW" ret="BOOL " convention="__stdcall">
<arg name="hdc">HDC</arg>
<arg name="x">int</arg>
<arg name="y">int</arg>
<arg name="lpString">LPCWSTR</arg>
<arg name="c">int</arg>
</function>
<function name="ExtTextOutA" ret="BOOL " convention="__stdcall">
<arg name="hdc">HDC</arg>
<arg name="x">int</arg>
<arg name="y">int</arg>
<arg name="options">UINT</arg>
<arg name="lprect">const RECT *</arg>
<arg name="lpString">LPCSTR</arg>
<arg name="c">UINT</arg>
<arg name="lpDx">const INT *</arg>
</function>
<function name="ExtTextOutW" ret="BOOL " convention="__stdcall">
<arg name="hdc">HDC</arg>
<arg name="x">int</arg>
<arg name="y">int</arg>
<arg name="options">UINT</arg>
<arg name="lprect">const RECT *</arg>
<arg name="lpString">LPCWSTR</arg>
<arg name="c">UINT</arg>
<arg name="lpDx">const INT *</arg>
</function>
<function name="PolyTextOutA" ret="BOOL " convention="__stdcall">
<arg name="hdc">HDC</arg>
<arg name="ppt">const POLYTEXTA *</arg>
<arg name="nstrings">int</arg>
</function>
<function name="PolyTextOutW" ret="BOOL " convention="__stdcall">
<arg name="hdc">HDC</arg>
<arg name="ppt">const POLYTEXTW *</arg>
<arg name="nstrings">int</arg>
</function>
<function name="CreatePolygonRgn" ret="HRGN " convention="__stdcall">
<arg name="pptl">const POINT *</arg>

                                             int cPoint,
                                             int iMode);
<function name="DPtoLP" ret="BOOL " convention="__stdcall">
<arg name="hdc">HDC</arg>
<arg name="lppt">LPPOINT</arg>
<arg name="c">int</arg>
</function>
<function name="LPtoDP" ret="BOOL " convention="__stdcall">
<arg name="hdc">HDC</arg>
<arg name="lppt">LPPOINT</arg>
<arg name="c">int</arg>
</function>
<function name="Polygon" ret="BOOL " convention="__stdcall">
<arg name="hdc">HDC</arg>
<arg name="apt">const POINT *</arg>
  int cpt);
<function name="Polyline" ret="BOOL " convention="__stdcall">
<arg name="hdc">HDC</arg>
<arg name="apt">const POINT *</arg>
  int cpt);

<function name="PolyBezier" ret="BOOL " convention="__stdcall">
<arg name="hdc">HDC</arg>
<arg name="apt">const POINT *</arg>
<arg name="cpt">DWORD</arg>
</function>
<function name="PolyBezierTo" ret="BOOL " convention="__stdcall">
<arg name="hdc">HDC</arg>
<arg name="apt">const POINT *</arg>
<arg name="cpt">DWORD</arg>
</function>
<function name="PolylineTo" ret="BOOL " convention="__stdcall">
<arg name="hdc">HDC</arg>
<arg name="apt">const POINT *</arg>
<arg name="cpt">DWORD</arg>
</function>

<function name="SetViewportExtEx" ret="BOOL " convention="__stdcall">
<arg name="hdc">HDC</arg>
<arg name="x">int</arg>
<arg name="y">int</arg>
<arg name="lpsz">LPSIZE</arg>
</function>
<function name="SetViewportOrgEx" ret="BOOL " convention="__stdcall">
<arg name="hdc">HDC</arg>
<arg name="x">int</arg>
<arg name="y">int</arg>
<arg name="lppt">LPPOINT</arg>
</function>
<function name="SetWindowExtEx" ret="BOOL " convention="__stdcall">
<arg name="hdc">HDC</arg>
<arg name="x">int</arg>
<arg name="y">int</arg>
<arg name="lpsz">LPSIZE</arg>
</function>
<function name="SetWindowOrgEx" ret="BOOL " convention="__stdcall">
<arg name="hdc">HDC</arg>
<arg name="x">int</arg>
<arg name="y">int</arg>
<arg name="lppt">LPPOINT</arg>
</function>

<function name="OffsetViewportOrgEx" ret="BOOL " convention="__stdcall">
<arg name="hdc">HDC</arg>
<arg name="x">int</arg>
<arg name="y">int</arg>
<arg name="lppt">LPPOINT</arg>
</function>
<function name="OffsetWindowOrgEx" ret="BOOL " convention="__stdcall">
<arg name="hdc">HDC</arg>
<arg name="x">int</arg>
<arg name="y">int</arg>
<arg name="lppt">LPPOINT</arg>
</function>
<function name="ScaleViewportExtEx" ret="BOOL " convention="__stdcall">
<arg name="hdc">HDC</arg>
<arg name="xn">int</arg>
<arg name="dx">int</arg>
<arg name="yn">int</arg>
<arg name="yd">int</arg>
<arg name="lpsz">LPSIZE</arg>
</function>
<function name="ScaleWindowExtEx" ret="BOOL " convention="__stdcall">
<arg name="hdc">HDC</arg>
<arg name="xn">int</arg>
<arg name="xd">int</arg>
<arg name="yn">int</arg>
<arg name="yd">int</arg>
<arg name="lpsz">LPSIZE</arg>
</function>
<function name="SetBitmapDimensionEx" ret="BOOL " convention="__stdcall">
<arg name="hbm">HBITMAP</arg>
<arg name="w">int</arg>
<arg name="h">int</arg>
<arg name="lpsz">LPSIZE</arg>
</function>
<function name="SetBrushOrgEx" ret="BOOL " convention="__stdcall">
<arg name="hdc">HDC</arg>
<arg name="x">int</arg>
<arg name="y">int</arg>
<arg name="lppt">LPPOINT</arg>
</function>

<function name="GetTextFaceA" ret="int  " convention="__stdcall">
<arg name="hdc">HDC</arg>
<arg name="c">int</arg>
<arg name="lpName">LPSTR</arg>
</function>
<function name="GetTextFaceW" ret="int  " convention="__stdcall">
<arg name="hdc">HDC</arg>
<arg name="c">int</arg>
<arg name="lpName">LPWSTR</arg>
</function>
<struct name="tagKERNINGPAIR">
<field name="wFirst">WORD</field>
<field name="wSecond">WORD</field>
<field name="iKernAmount">int</field>
</struct>
<typedefprev id="KERNINGPAIR"/>
<typedefptrprev id="LPKERNINGPAIR"/>

<function name="GetKerningPairsA" ret="DWORD" convention="__stdcall">
<arg name="hdc">HDC</arg>
<arg name="nPairs">DWORD</arg>
<arg name="lpKernPair">LPKERNINGPAIR  </arg>
</function>
<function name="GetKerningPairsW" ret="DWORD" convention="__stdcall">
<arg name="hdc">HDC</arg>
<arg name="nPairs">DWORD</arg>
<arg name="lpKernPair">LPKERNINGPAIR  </arg>
</function>
<function name="GetDCOrgEx" ret="BOOL " convention="__stdcall">
<arg name="hdc">HDC</arg>
<arg name="lppt">LPPOINT</arg>
</function>
<function name="FixBrushOrgEx" ret="BOOL " convention="__stdcall">
<arg name="hdc">HDC</arg>
<arg name="x">int</arg>
<arg name="y">int</arg>
<arg name="ptl">LPPOINT</arg>
</function>
<function name="UnrealizeObject" ret="BOOL " convention="__stdcall">
<arg name="h">HGDIOBJ</arg>
</function>

<function name="GdiFlush" ret="BOOL " convention="__stdcall">
void);
<function name="GdiSetBatchLimit" ret="DWORD" convention="__stdcall">
<arg name="dw">DWORD</arg>
</function>
<function name="GdiGetBatchLimit" ret="DWORD" convention="__stdcall">
void);

typedef int (__stdcall* ICMENUMPROCA)(LPSTR, LPARAM);
typedef int (__stdcall* ICMENUMPROCW)(LPWSTR, LPARAM);
<function name="SetICMMode" ret="int        " convention="__stdcall">
<arg name="hdc">HDC</arg>
<arg name="mode">int</arg>
</function>
<function name="CheckColorsInGamut" ret="BOOL       " convention="__stdcall">
<arg name="hdc">HDC</arg>
<arg name="lpRGBTriple">LPRGBTRIPLE</arg>
<arg name="dlpBuffer">LPVOID</arg>
<arg name="nCount">DWORD</arg>
</function>

<function name="GetColorSpace" ret="HCOLORSPACE" convention="__stdcall">
<arg name="hdc">HDC</arg>
</function>
<function name="GetLogColorSpaceA" ret="BOOL       " convention="__stdcall">
<arg name="hColorSpace">HCOLORSPACE</arg>
<arg name="lpBuffer">LPLOGCOLORSPACEA</arg>
<arg name="nSize">DWORD</arg>
</function>
<function name="GetLogColorSpaceW" ret="BOOL       " convention="__stdcall">
<arg name="hColorSpace">HCOLORSPACE</arg>
<arg name="lpBuffer">LPLOGCOLORSPACEW</arg>
<arg name="nSize">DWORD</arg>
</function>
<function name="CreateColorSpaceA" ret="HCOLORSPACE" convention="__stdcall">
<arg name="lplcs">LPLOGCOLORSPACEA</arg>
</function>
<function name="CreateColorSpaceW" ret="HCOLORSPACE" convention="__stdcall">
<arg name="lplcs">LPLOGCOLORSPACEW</arg>
</function>
<function name="SetColorSpace" ret="HCOLORSPACE" convention="__stdcall">
<arg name="hdc">HDC</arg>
<arg name="hcs">HCOLORSPACE</arg>
</function>
<function name="DeleteColorSpace" ret="BOOL       " convention="__stdcall">
<arg name="hcs">HCOLORSPACE</arg>
</function>
<function name="GetICMProfileA" ret="BOOL       " convention="__stdcall">
<arg name="hdc">HDC</arg>
<arg name="pBufSize">LPDWORD</arg>
<arg name="pszFilename">LPSTR</arg>
</function>
<function name="GetICMProfileW" ret="BOOL       " convention="__stdcall">
<arg name="hdc">HDC</arg>
<arg name="pBufSize">LPDWORD</arg>
<arg name="pszFilename">LPWSTR</arg>
</function>
<function name="SetICMProfileA" ret="BOOL       " convention="__stdcall">
<arg name="hdc">HDC</arg>
<arg name="lpFileName">LPSTR</arg>
</function>
<function name="SetICMProfileW" ret="BOOL       " convention="__stdcall">
<arg name="hdc">HDC</arg>
<arg name="lpFileName">LPWSTR</arg>
</function>
<function name="GetDeviceGammaRamp" ret="BOOL       " convention="__stdcall">
<arg name="hdc">HDC</arg>
<arg name="lpRamp">LPVOID</arg>
</function>
<function name="SetDeviceGammaRamp" ret="BOOL       " convention="__stdcall">
<arg name="hdc">HDC</arg>
<arg name="lpRamp">LPVOID</arg>
</function>
<function name="ColorMatchToTarget" ret="BOOL       " convention="__stdcall">
<arg name="hdc">HDC</arg>
<arg name="hdcTarget">HDC</arg>
<arg name="action">DWORD</arg>
</function>
<function name="EnumICMProfilesA" ret="int        " convention="__stdcall">
<arg name="hdc">HDC</arg>
<arg name="proc">ICMENUMPROCA</arg>
<arg name="param">LPARAM</arg>
</function>
<function name="EnumICMProfilesW" ret="int        " convention="__stdcall">
<arg name="hdc">HDC</arg>
<arg name="proc">ICMENUMPROCW</arg>
<arg name="param">LPARAM</arg>
</function>
<function name="UpdateICMRegKeyA" ret="BOOL       " convention="__stdcall">
<arg name="reserved">DWORD</arg>
<arg name="lpszCMID">LPSTR</arg>
<arg name="lpszFileName">LPSTR</arg>
<arg name="command">UINT</arg>
</function>

<function name="UpdateICMRegKeyW" ret="BOOL       " convention="__stdcall">
<arg name="reserved">DWORD</arg>
<arg name="lpszCMID">LPWSTR</arg>
<arg name="lpszFileName">LPWSTR</arg>
<arg name="command">UINT</arg>
</function>
#pragma deprecated (UpdateICMRegKeyW)
#pragma deprecated (UpdateICMRegKeyA)
<function name="ColorCorrectPalette" ret="BOOL       " convention="__stdcall">
<arg name="hdc">HDC</arg>
<arg name="hPal">HPALETTE</arg>
<arg name="deFirst">DWORD</arg>
<arg name="num">DWORD</arg>
</function>

<struct name="tagEMR">
<field name="iType">DWORD</field>
<field name="nSize">DWORD</field>
                                
} EMR, *PEMR;
<struct name="tagEMRTEXT">
<field name="ptlReference">POINTL</field>
<field name="nChars">DWORD</field>
<field name="offString">DWORD</field>
<field name="fOptions">DWORD</field>
<field name="rcl">RECTL</field>
<field name="offDx">DWORD</field>
                                
} EMRTEXT, *PEMRTEXT;
<struct name="tagABORTPATH">
<field name="emr">EMR</field>
} EMRABORTPATH,      *PEMRABORTPATH,
  EMRBEGINPATH,      *PEMRBEGINPATH,
  EMRENDPATH,        *PEMRENDPATH,
  EMRCLOSEFIGURE,    *PEMRCLOSEFIGURE,
  EMRFLATTENPATH,    *PEMRFLATTENPATH,
  EMRWIDENPATH,      *PEMRWIDENPATH,
  EMRSETMETARGN,     *PEMRSETMETARGN,
  EMRSAVEDC,         *PEMRSAVEDC,
  EMRREALIZEPALETTE, *PEMRREALIZEPALETTE;

<struct name="tagEMRSELECTCLIPPATH">
<field name="emr">EMR</field>
<field name="iMode">DWORD</field>
} EMRSELECTCLIPPATH,    *PEMRSELECTCLIPPATH,
  EMRSETBKMODE,         *PEMRSETBKMODE,
  EMRSETMAPMODE,        *PEMRSETMAPMODE,

  EMRSETLAYOUT,         *PEMRSETLAYOUT,

  EMRSETPOLYFILLMODE,   *PEMRSETPOLYFILLMODE,
  EMRSETROP2,           *PEMRSETROP2,
  EMRSETSTRETCHBLTMODE, *PEMRSETSTRETCHBLTMODE,
  EMRSETICMMODE,        *PEMRSETICMMODE,
  EMRSETTEXTALIGN,      *PEMRSETTEXTALIGN;

<struct name="tagEMRSETMITERLIMIT">
<field name="emr">EMR</field>
<field name="eMiterLimit">FLOAT</field>
</struct>
<typedefprev id="EMRSETMITERLIMIT"/>
<typedefptrprev id="PEMRSETMITERLIMIT"/>

<struct name="tagEMRRESTOREDC">
<field name="emr">EMR</field>
<field name="iRelative">LONG</field>
</struct>
<typedefprev id="EMRRESTOREDC"/>
<typedefptrprev id="PEMRRESTOREDC"/>

<struct name="tagEMRSETARCDIRECTION">
<field name="emr">EMR</field>
<field name="iArcDirection">DWORD</field>
                                
} EMRSETARCDIRECTION, *PEMRSETARCDIRECTION;

<struct name="tagEMRSETMAPPERFLAGS">
<field name="emr">EMR</field>
<field name="dwFlags">DWORD</field>
</struct>
<typedefprev id="EMRSETMAPPERFLAGS"/>
<typedefptrprev id="PEMRSETMAPPERFLAGS"/>

<struct name="tagEMRSETTEXTCOLOR">
<field name="emr">EMR</field>
<field name="crColor">COLORREF</field>
} EMRSETBKCOLOR,   *PEMRSETBKCOLOR,
  EMRSETTEXTCOLOR, *PEMRSETTEXTCOLOR;

<struct name="tagEMRSELECTOBJECT">
<field name="emr">EMR</field>
<field name="ihObject">DWORD</field>
} EMRSELECTOBJECT, *PEMRSELECTOBJECT,
  EMRDELETEOBJECT, *PEMRDELETEOBJECT;

<struct name="tagEMRSELECTPALETTE">
<field name="emr">EMR</field>
<field name="ihPal">DWORD</field>
</struct>
<typedefprev id="EMRSELECTPALETTE"/>
<typedefptrprev id="PEMRSELECTPALETTE"/>

<struct name="tagEMRRESIZEPALETTE">
<field name="emr">EMR</field>
<field name="ihPal">DWORD</field>
<field name="cEntries">DWORD</field>
</struct>
<typedefprev id="EMRRESIZEPALETTE"/>
<typedefptrprev id="PEMRRESIZEPALETTE"/>

<struct name="tagEMRSETPALETTEENTRIES">
<field name="emr">EMR</field>
<field name="ihPal">DWORD</field>
<field name="iStart">DWORD</field>
<field name="cEntries">DWORD</field>
<field name="aPalEntries[1]">PALETTEENTRY</field>
</struct>
<typedefprev id="EMRSETPALETTEENTRIES"/>
<typedefptrprev id="PEMRSETPALETTEENTRIES"/>

<struct name="tagEMRSETCOLORADJUSTMENT">
<field name="emr">EMR</field>
<field name="ColorAdjustment">COLORADJUSTMENT</field>
</struct>
<typedefprev id="EMRSETCOLORADJUSTMENT"/>
<typedefptrprev id="PEMRSETCOLORADJUSTMENT"/>

<struct name="tagEMRGDICOMMENT">
<field name="emr">EMR</field>
<field name="cbData">DWORD</field>
<field name="Data[1]">BYTE</field>
</struct>
<typedefprev id="EMRGDICOMMENT"/>
<typedefptrprev id="PEMRGDICOMMENT"/>

<struct name="tagEMREOF">
<field name="emr">EMR</field>
<field name="nPalEntries">DWORD</field>
<field name="offPalEntries">DWORD</field>
<field name="nSizeLast">DWORD</field>
                                
                                
} EMREOF, *PEMREOF;

<struct name="tagEMRLINETO">
<field name="emr">EMR</field>
<field name="ptl">POINTL</field>
} EMRLINETO,   *PEMRLINETO,
  EMRMOVETOEX, *PEMRMOVETOEX;

<struct name="tagEMROFFSETCLIPRGN">
<field name="emr">EMR</field>
<field name="ptlOffset">POINTL</field>
</struct>
<typedefprev id="EMROFFSETCLIPRGN"/>
<typedefptrprev id="PEMROFFSETCLIPRGN"/>

<struct name="tagEMRFILLPATH">
<field name="emr">EMR</field>
<field name="rclBounds">RECTL</field>
} EMRFILLPATH,          *PEMRFILLPATH,
  EMRSTROKEANDFILLPATH, *PEMRSTROKEANDFILLPATH,
  EMRSTROKEPATH,        *PEMRSTROKEPATH;

<struct name="tagEMREXCLUDECLIPRECT">
<field name="emr">EMR</field>
<field name="rclClip">RECTL</field>
} EMREXCLUDECLIPRECT,   *PEMREXCLUDECLIPRECT,
  EMRINTERSECTCLIPRECT, *PEMRINTERSECTCLIPRECT;

<struct name="tagEMRSETVIEWPORTORGEX">
<field name="emr">EMR</field>
<field name="ptlOrigin">POINTL</field>
} EMRSETVIEWPORTORGEX, *PEMRSETVIEWPORTORGEX,
  EMRSETWINDOWORGEX,   *PEMRSETWINDOWORGEX,
  EMRSETBRUSHORGEX,    *PEMRSETBRUSHORGEX;

<struct name="tagEMRSETVIEWPORTEXTEX">
<field name="emr">EMR</field>
<field name="szlExtent">SIZEL</field>
} EMRSETVIEWPORTEXTEX, *PEMRSETVIEWPORTEXTEX,
  EMRSETWINDOWEXTEX,   *PEMRSETWINDOWEXTEX;

<struct name="tagEMRSCALEVIEWPORTEXTEX">
<field name="emr">EMR</field>
<field name="xNum">LONG</field>
<field name="xDenom">LONG</field>
<field name="yNum">LONG</field>
<field name="yDenom">LONG</field>
} EMRSCALEVIEWPORTEXTEX, *PEMRSCALEVIEWPORTEXTEX,
  EMRSCALEWINDOWEXTEX,   *PEMRSCALEWINDOWEXTEX;

<struct name="tagEMRSETWORLDTRANSFORM">
<field name="emr">EMR</field>
<field name="xform">XFORM</field>
</struct>
<typedefprev id="EMRSETWORLDTRANSFORM"/>
<typedefptrprev id="PEMRSETWORLDTRANSFORM"/>

<struct name="tagEMRMODIFYWORLDTRANSFORM">
<field name="emr">EMR</field>
<field name="xform">XFORM</field>
<field name="iMode">DWORD</field>
</struct>
<typedefprev id="EMRMODIFYWORLDTRANSFORM"/>
<typedefptrprev id="PEMRMODIFYWORLDTRANSFORM"/>

<struct name="tagEMRSETPIXELV">
<field name="emr">EMR</field>
<field name="ptlPixel">POINTL</field>
<field name="crColor">COLORREF</field>
</struct>
<typedefprev id="EMRSETPIXELV"/>
<typedefptrprev id="PEMRSETPIXELV"/>

<struct name="tagEMREXTFLOODFILL">
<field name="emr">EMR</field>
<field name="ptlStart">POINTL</field>
<field name="crColor">COLORREF</field>
<field name="iMode">DWORD</field>
</struct>
<typedefprev id="EMREXTFLOODFILL"/>
<typedefptrprev id="PEMREXTFLOODFILL"/>

<struct name="tagEMRELLIPSE">
<field name="emr">EMR</field>
<field name="rclBox">RECTL</field>
} EMRELLIPSE,  *PEMRELLIPSE,
  EMRRECTANGLE, *PEMRRECTANGLE;
<struct name="tagEMRROUNDRECT">
<field name="emr">EMR</field>
<field name="rclBox">RECTL</field>
<field name="szlCorner">SIZEL</field>
</struct>
<typedefprev id="EMRROUNDRECT"/>
<typedefptrprev id="PEMRROUNDRECT"/>

<struct name="tagEMRARC">
<field name="emr">EMR</field>
<field name="rclBox">RECTL</field>
<field name="ptlStart">POINTL</field>
<field name="ptlEnd">POINTL</field>
} EMRARC,   *PEMRARC,
  EMRARCTO, *PEMRARCTO,
  EMRCHORD, *PEMRCHORD,
  EMRPIE,   *PEMRPIE;

<struct name="tagEMRANGLEARC">
<field name="emr">EMR</field>
<field name="ptlCenter">POINTL</field>
<field name="nRadius">DWORD</field>
<field name="eStartAngle">FLOAT</field>
<field name="eSweepAngle">FLOAT</field>
</struct>
<typedefprev id="EMRANGLEARC"/>
<typedefptrprev id="PEMRANGLEARC"/>

<struct name="tagEMRPOLYLINE">
<field name="emr">EMR</field>
<field name="rclBounds">RECTL</field>
<field name="cptl">DWORD</field>
<field name="aptl[1]">POINTL</field>
} EMRPOLYLINE,     *PEMRPOLYLINE,
  EMRPOLYBEZIER,   *PEMRPOLYBEZIER,
  EMRPOLYGON,      *PEMRPOLYGON,
  EMRPOLYBEZIERTO, *PEMRPOLYBEZIERTO,
  EMRPOLYLINETO,   *PEMRPOLYLINETO;

<struct name="tagEMRPOLYLINE16">
<field name="emr">EMR</field>
<field name="rclBounds">RECTL</field>
<field name="cpts">DWORD</field>
<field name="apts[1]">POINTS</field>
} EMRPOLYLINE16,     *PEMRPOLYLINE16,
  EMRPOLYBEZIER16,   *PEMRPOLYBEZIER16,
  EMRPOLYGON16,      *PEMRPOLYGON16,
  EMRPOLYBEZIERTO16, *PEMRPOLYBEZIERTO16,
  EMRPOLYLINETO16,   *PEMRPOLYLINETO16;

<struct name="tagEMRPOLYDRAW">
<field name="emr">EMR</field>
<field name="rclBounds">RECTL</field>
<field name="cptl">DWORD</field>
<field name="aptl[1]">POINTL</field>
<field name="abTypes[1]">BYTE</field>
</struct>
<typedefprev id="EMRPOLYDRAW"/>
<typedefptrprev id="PEMRPOLYDRAW"/>

<struct name="tagEMRPOLYDRAW16">
<field name="emr">EMR</field>
<field name="rclBounds">RECTL</field>
<field name="cpts">DWORD</field>
<field name="apts[1]">POINTS</field>
<field name="abTypes[1]">BYTE</field>
</struct>
<typedefprev id="EMRPOLYDRAW16"/>
<typedefptrprev id="PEMRPOLYDRAW16"/>

<struct name="tagEMRPOLYPOLYLINE">
<field name="emr">EMR</field>
<field name="rclBounds">RECTL</field>
<field name="nPolys">DWORD</field>
<field name="cptl">DWORD</field>
<field name="aPolyCounts[1]">DWORD</field>
<field name="aptl[1]">POINTL</field>
} EMRPOLYPOLYLINE, *PEMRPOLYPOLYLINE,
  EMRPOLYPOLYGON,  *PEMRPOLYPOLYGON;

<struct name="tagEMRPOLYPOLYLINE16">
<field name="emr">EMR</field>
<field name="rclBounds">RECTL</field>
<field name="nPolys">DWORD</field>
<field name="cpts">DWORD</field>
<field name="aPolyCounts[1]">DWORD</field>
<field name="apts[1]">POINTS</field>
} EMRPOLYPOLYLINE16, *PEMRPOLYPOLYLINE16,
  EMRPOLYPOLYGON16,  *PEMRPOLYPOLYGON16;

<struct name="tagEMRINVERTRGN">
<field name="emr">EMR</field>
<field name="rclBounds">RECTL</field>
<field name="cbRgnData">DWORD</field>
<field name="RgnData[1]">BYTE</field>
} EMRINVERTRGN, *PEMRINVERTRGN,
  EMRPAINTRGN,  *PEMRPAINTRGN;

<struct name="tagEMRFILLRGN">
<field name="emr">EMR</field>
<field name="rclBounds">RECTL</field>
<field name="cbRgnData">DWORD</field>
<field name="ihBrush">DWORD</field>
<field name="RgnData[1]">BYTE</field>
</struct>
<typedefprev id="EMRFILLRGN"/>
<typedefptrprev id="PEMRFILLRGN"/>

<struct name="tagEMRFRAMERGN">
<field name="emr">EMR</field>
<field name="rclBounds">RECTL</field>
<field name="cbRgnData">DWORD</field>
<field name="ihBrush">DWORD</field>
<field name="szlStroke">SIZEL</field>
<field name="RgnData[1]">BYTE</field>
</struct>
<typedefprev id="EMRFRAMERGN"/>
<typedefptrprev id="PEMRFRAMERGN"/>

<struct name="tagEMREXTSELECTCLIPRGN">
<field name="emr">EMR</field>
<field name="cbRgnData">DWORD</field>
<field name="iMode">DWORD</field>
<field name="RgnData[1]">BYTE</field>
</struct>
<typedefprev id="EMREXTSELECTCLIPRGN"/>
<typedefptrprev id="PEMREXTSELECTCLIPRGN"/>

<struct name="tagEMREXTTEXTOUTA">
<field name="emr">EMR</field>
<field name="rclBounds">RECTL</field>
<field name="iGraphicsMode">DWORD</field>
<field name="exScale">FLOAT</field>
<field name="eyScale">FLOAT</field>
<field name="emrtext">EMRTEXT</field>
                                
} EMREXTTEXTOUTA, *PEMREXTTEXTOUTA,
  EMREXTTEXTOUTW, *PEMREXTTEXTOUTW;

<struct name="tagEMRPOLYTEXTOUTA">
<field name="emr">EMR</field>
<field name="rclBounds">RECTL</field>
<field name="iGraphicsMode">DWORD</field>
<field name="exScale">FLOAT</field>
<field name="eyScale">FLOAT</field>
<field name="cStrings">LONG</field>
<field name="aemrtext[1]">EMRTEXT</field>
                                
} EMRPOLYTEXTOUTA, *PEMRPOLYTEXTOUTA,
  EMRPOLYTEXTOUTW, *PEMRPOLYTEXTOUTW;

<struct name="tagEMRBITBLT">
<field name="emr">EMR</field>
<field name="rclBounds">RECTL</field>
<field name="xDest">LONG</field>
<field name="yDest">LONG</field>
<field name="cxDest">LONG</field>
<field name="cyDest">LONG</field>
<field name="dwRop">DWORD</field>
<field name="xSrc">LONG</field>
<field name="ySrc">LONG</field>
<field name="xformSrc">XFORM</field>
<field name="crBkColorSrc">COLORREF</field>
<field name="iUsageSrc">DWORD</field>
                                
    DWORD   offBmiSrc;          
    DWORD   cbBmiSrc;           
    DWORD   offBitsSrc;         
    DWORD   cbBitsSrc;          
} EMRBITBLT, *PEMRBITBLT;

<struct name="tagEMRSTRETCHBLT">
<field name="emr">EMR</field>
<field name="rclBounds">RECTL</field>
<field name="xDest">LONG</field>
<field name="yDest">LONG</field>
<field name="cxDest">LONG</field>
<field name="cyDest">LONG</field>
<field name="dwRop">DWORD</field>
<field name="xSrc">LONG</field>
<field name="ySrc">LONG</field>
<field name="xformSrc">XFORM</field>
<field name="crBkColorSrc">COLORREF</field>
<field name="iUsageSrc">DWORD</field>
                                
    DWORD   offBmiSrc;          
    DWORD   cbBmiSrc;           
    DWORD   offBitsSrc;         
    DWORD   cbBitsSrc;          
    LONG    cxSrc;
    LONG    cySrc;
} EMRSTRETCHBLT, *PEMRSTRETCHBLT;

<struct name="tagEMRMASKBLT">
<field name="emr">EMR</field>
<field name="rclBounds">RECTL</field>
<field name="xDest">LONG</field>
<field name="yDest">LONG</field>
<field name="cxDest">LONG</field>
<field name="cyDest">LONG</field>
<field name="dwRop">DWORD</field>
<field name="xSrc">LONG</field>
<field name="ySrc">LONG</field>
<field name="xformSrc">XFORM</field>
<field name="crBkColorSrc">COLORREF</field>
<field name="iUsageSrc">DWORD</field>
                                
    DWORD   offBmiSrc;          
    DWORD   cbBmiSrc;           
    DWORD   offBitsSrc;         
    DWORD   cbBitsSrc;          
    LONG    xMask;
    LONG    yMask;
    DWORD   iUsageMask;         
    DWORD   offBmiMask;         
    DWORD   cbBmiMask;          
    DWORD   offBitsMask;        
    DWORD   cbBitsMask;         
} EMRMASKBLT, *PEMRMASKBLT;

<struct name="tagEMRPLGBLT">
<field name="emr">EMR</field>
<field name="rclBounds">RECTL</field>
<field name="aptlDest[3]">POINTL</field>
<field name="xSrc">LONG</field>
<field name="ySrc">LONG</field>
<field name="cxSrc">LONG</field>
<field name="cySrc">LONG</field>
<field name="xformSrc">XFORM</field>
<field name="crBkColorSrc">COLORREF</field>
<field name="iUsageSrc">DWORD</field>
                                
    DWORD   offBmiSrc;          
    DWORD   cbBmiSrc;           
    DWORD   offBitsSrc;         
    DWORD   cbBitsSrc;          
    LONG    xMask;
    LONG    yMask;
    DWORD   iUsageMask;         
    DWORD   offBmiMask;         
    DWORD   cbBmiMask;          
    DWORD   offBitsMask;        
    DWORD   cbBitsMask;         
} EMRPLGBLT, *PEMRPLGBLT;

<struct name="tagEMRSETDIBITSTODEVICE">
<field name="emr">EMR</field>
<field name="rclBounds">RECTL</field>
<field name="xDest">LONG</field>
<field name="yDest">LONG</field>
<field name="xSrc">LONG</field>
<field name="ySrc">LONG</field>
<field name="cxSrc">LONG</field>
<field name="cySrc">LONG</field>
<field name="offBmiSrc">DWORD</field>
<field name="cbBmiSrc">DWORD</field>
<field name="offBitsSrc">DWORD</field>
<field name="cbBitsSrc">DWORD</field>
<field name="iUsageSrc">DWORD</field>
<field name="iStartScan">DWORD</field>
<field name="cScans">DWORD</field>
</struct>
<typedefprev id="EMRSETDIBITSTODEVICE"/>
<typedefptrprev id="PEMRSETDIBITSTODEVICE"/>

<struct name="tagEMRSTRETCHDIBITS">
<field name="emr">EMR</field>
<field name="rclBounds">RECTL</field>
<field name="xDest">LONG</field>
<field name="yDest">LONG</field>
<field name="xSrc">LONG</field>
<field name="ySrc">LONG</field>
<field name="cxSrc">LONG</field>
<field name="cySrc">LONG</field>
<field name="offBmiSrc">DWORD</field>
<field name="cbBmiSrc">DWORD</field>
<field name="offBitsSrc">DWORD</field>
<field name="cbBitsSrc">DWORD</field>
<field name="iUsageSrc">DWORD</field>
<field name="dwRop">DWORD</field>
<field name="cxDest">LONG</field>
<field name="cyDest">LONG</field>
</struct>
<typedefprev id="EMRSTRETCHDIBITS"/>
<typedefptrprev id="PEMRSTRETCHDIBITS"/>

<struct name="tagEMREXTCREATEFONTINDIRECTW">
<field name="emr">EMR</field>
<field name="ihFont">DWORD</field>
<field name="elfw">EXTLOGFONTW</field>
</struct>
<typedefprev id="EMREXTCREATEFONTINDIRECTW"/>
<typedefptrprev id="PEMREXTCREATEFONTINDIRECTW"/>

<struct name="tagEMRCREATEPALETTE">
<field name="emr">EMR</field>
<field name="ihPal">DWORD</field>
<field name="lgpl">LOGPALETTE</field>
                                
} EMRCREATEPALETTE, *PEMRCREATEPALETTE;

<struct name="tagEMRCREATEPEN">
<field name="emr">EMR</field>
<field name="ihPen">DWORD</field>
<field name="lopn">LOGPEN</field>
</struct>
<typedefprev id="EMRCREATEPEN"/>
<typedefptrprev id="PEMRCREATEPEN"/>

<struct name="tagEMREXTCREATEPEN">
<field name="emr">EMR</field>
<field name="ihPen">DWORD</field>
<field name="offBmi">DWORD</field>
<field name="cbBmi">DWORD</field>
                                
                                
    DWORD   offBits;            
    DWORD   cbBits;             
    EXTLOGPEN elp;              
} EMREXTCREATEPEN, *PEMREXTCREATEPEN;

<struct name="tagEMRCREATEBRUSHINDIRECT">
<field name="emr">EMR</field>
<field name="ihBrush">DWORD</field>
<field name="lb">LOGBRUSH32</field>
                                 
} EMRCREATEBRUSHINDIRECT, *PEMRCREATEBRUSHINDIRECT;

<struct name="tagEMRCREATEMONOBRUSH">
<field name="emr">EMR</field>
<field name="ihBrush">DWORD</field>
<field name="iUsage">DWORD</field>
<field name="offBmi">DWORD</field>
<field name="cbBmi">DWORD</field>
<field name="offBits">DWORD</field>
<field name="cbBits">DWORD</field>
</struct>
<typedefprev id="EMRCREATEMONOBRUSH"/>
<typedefptrprev id="PEMRCREATEMONOBRUSH"/>

<struct name="tagEMRCREATEDIBPATTERNBRUSHPT">
<field name="emr">EMR</field>
<field name="ihBrush">DWORD</field>
<field name="iUsage">DWORD</field>
<field name="offBmi">DWORD</field>
<field name="cbBmi">DWORD</field>
                                
                                
    DWORD   offBits;            
    DWORD   cbBits;             
} EMRCREATEDIBPATTERNBRUSHPT, *PEMRCREATEDIBPATTERNBRUSHPT;

<struct name="tagEMRFORMAT">
<field name="dSignature">DWORD</field>
<field name="nVersion">DWORD</field>
<field name="cbData">DWORD</field>
<field name="offData">DWORD</field>
                                
} EMRFORMAT, *PEMRFORMAT;
<struct name="tagEMRGLSRECORD">
<field name="emr">EMR</field>
<field name="cbData">DWORD</field>
<field name="Data[1]">BYTE</field>
</struct>
<typedefprev id="EMRGLSRECORD"/>
<typedefptrprev id="PEMRGLSRECORD"/>

<struct name="tagEMRGLSBOUNDEDRECORD">
<field name="emr">EMR</field>
<field name="rclBounds">RECTL</field>
<field name="cbData">DWORD</field>
<field name="Data[1]">BYTE</field>
</struct>
<typedefprev id="EMRGLSBOUNDEDRECORD"/>
<typedefptrprev id="PEMRGLSBOUNDEDRECORD"/>

<struct name="tagEMRPIXELFORMAT">
<field name="emr">EMR</field>
<field name="pfd">PIXELFORMATDESCRIPTOR</field>
</struct>
<typedefprev id="EMRPIXELFORMAT"/>
<typedefptrprev id="PEMRPIXELFORMAT"/>

<struct name="tagEMRCREATECOLORSPACE">
<field name="emr">EMR</field>
<field name="ihCS">DWORD</field>
<field name="lcs">LOGCOLORSPACEA</field>
</struct>
<typedefprev id="EMRCREATECOLORSPACE"/>
<typedefptrprev id="PEMRCREATECOLORSPACE"/>

<struct name="tagEMRSETCOLORSPACE">
<field name="emr">EMR</field>
<field name="ihCS">DWORD</field>
} EMRSETCOLORSPACE,    *PEMRSETCOLORSPACE,
  EMRSELECTCOLORSPACE, *PEMRSELECTCOLORSPACE,
  EMRDELETECOLORSPACE, *PEMRDELETECOLORSPACE;
<struct name="tagEMREXTESCAPE">
<field name="emr">EMR</field>
<field name="iEscape">INT</field>
<field name="cbEscData">INT</field>
<field name="EscData[1]">BYTE</field>
} EMREXTESCAPE,  *PEMREXTESCAPE,
  EMRDRAWESCAPE, *PEMRDRAWESCAPE;

<struct name="tagEMRNAMEDESCAPE">
<field name="emr">EMR</field>
<field name="iEscape">INT</field>
<field name="cbDriver">INT</field>
<field name="cbEscData">INT</field>
<field name="EscData[1]">BYTE</field>
</struct>
<typedefprev id="EMRNAMEDESCAPE"/>
<typedefptrprev id="PEMRNAMEDESCAPE"/>
<struct name="tagEMRSETICMPROFILE">
<field name="emr">EMR</field>
<field name="dwFlags">DWORD</field>
<field name="cbName">DWORD</field>
<field name="cbData">DWORD</field>
<field name="Data[1]">BYTE</field>
} EMRSETICMPROFILE,  *PEMRSETICMPROFILE,
  EMRSETICMPROFILEA, *PEMRSETICMPROFILEA,
  EMRSETICMPROFILEW, *PEMRSETICMPROFILEW;
<struct name="tagEMRCREATECOLORSPACEW">
<field name="emr">EMR</field>
<field name="ihCS">DWORD</field>
<field name="lcs">LOGCOLORSPACEW</field>
<field name="dwFlags">DWORD</field>
<field name="cbData">DWORD</field>
<field name="Data[1]">BYTE</field>
</struct>
<typedefprev id="EMRCREATECOLORSPACEW"/>
<typedefptrprev id="PEMRCREATECOLORSPACEW"/>
<struct name="tagCOLORMATCHTOTARGET">
<field name="emr">EMR</field>
<field name="dwAction">DWORD</field>
<field name="dwFlags">DWORD</field>
<field name="cbName">DWORD</field>
<field name="cbData">DWORD</field>
<field name="Data[1]">BYTE</field>
</struct>
<typedefprev id="EMRCOLORMATCHTOTARGET"/>
<typedefptrprev id="PEMRCOLORMATCHTOTARGET"/>

<struct name="tagCOLORCORRECTPALETTE">
<field name="emr">EMR</field>
<field name="ihPalette">DWORD</field>
<field name="nFirstEntry">DWORD</field>
<field name="nPalEntries">DWORD</field>
<field name="nReserved">DWORD</field>
</struct>
<typedefprev id="EMRCOLORCORRECTPALETTE"/>
<typedefptrprev id="PEMRCOLORCORRECTPALETTE"/>

<struct name="tagEMRALPHABLEND">
<field name="emr">EMR</field>
<field name="rclBounds">RECTL</field>
<field name="xDest">LONG</field>
<field name="yDest">LONG</field>
<field name="cxDest">LONG</field>
<field name="cyDest">LONG</field>
<field name="dwRop">DWORD</field>
<field name="xSrc">LONG</field>
<field name="ySrc">LONG</field>
<field name="xformSrc">XFORM</field>
<field name="crBkColorSrc">COLORREF</field>
<field name="iUsageSrc">DWORD</field>
                                
    DWORD   offBmiSrc;          
    DWORD   cbBmiSrc;           
    DWORD   offBitsSrc;         
    DWORD   cbBitsSrc;          
    LONG    cxSrc;
    LONG    cySrc;
} EMRALPHABLEND, *PEMRALPHABLEND;

<struct name="tagEMRGRADIENTFILL">
<field name="emr">EMR</field>
<field name="rclBounds">RECTL</field>
<field name="nVer">DWORD</field>
<field name="nTri">DWORD</field>
<field name="ulMode">ULONG</field>
<field name="Ver[1]">TRIVERTEX</field>
}EMRGRADIENTFILL,*PEMRGRADIENTFILL;

<struct name="tagEMRTRANSPARENTBLT">
<field name="emr">EMR</field>
<field name="rclBounds">RECTL</field>
<field name="xDest">LONG</field>
<field name="yDest">LONG</field>
<field name="cxDest">LONG</field>
<field name="cyDest">LONG</field>
<field name="dwRop">DWORD</field>
<field name="xSrc">LONG</field>
<field name="ySrc">LONG</field>
<field name="xformSrc">XFORM</field>
<field name="crBkColorSrc">COLORREF</field>
<field name="iUsageSrc">DWORD</field>
                                
    DWORD   offBmiSrc;          
    DWORD   cbBmiSrc;           
    DWORD   offBitsSrc;         
    DWORD   cbBitsSrc;          
    LONG    cxSrc;
    LONG    cySrc;
} EMRTRANSPARENTBLT, *PEMRTRANSPARENTBLT;
<function name="wglCopyContext" ret="BOOL " convention="__stdcall">
HGLRC, HGLRC, UINT);
<function name="wglCreateContext" ret="HGLRC" convention="__stdcall">
HDC);
<function name="wglCreateLayerContext" ret="HGLRC" convention="__stdcall">
HDC, int);
<function name="wglDeleteContext" ret="BOOL " convention="__stdcall">
HGLRC);
<function name="wglGetCurrentContext" ret="HGLRC" convention="__stdcall">
void);
<function name="wglGetCurrentDC" ret="HDC  " convention="__stdcall">
void);
<function name="wglGetProcAddress" ret="PROC " convention="__stdcall">
LPCSTR);
<function name="wglMakeCurrent" ret="BOOL " convention="__stdcall">
HDC, HGLRC);
<function name="wglShareLists" ret="BOOL " convention="__stdcall">
HGLRC, HGLRC);
<function name="wglUseFontBitmapsA" ret="BOOL " convention="__stdcall">
HDC, DWORD, DWORD, DWORD);
<function name="wglUseFontBitmapsW" ret="BOOL " convention="__stdcall">
HDC, DWORD, DWORD, DWORD);
<function name="SwapBuffers" ret="BOOL " convention="__stdcall">
HDC);

<struct name="_POINTFLOAT">
<field name="x">FLOAT</field>
<field name="y">FLOAT</field>
</struct>
<typedefprev id="POINTFLOAT"/>
<typedefptrprev id="PPOINTFLOAT"/>

<struct name="_GLYPHMETRICSFLOAT">
<field name="gmfBlackBoxX">FLOAT</field>
<field name="gmfBlackBoxY">FLOAT</field>
<field name="gmfptGlyphOrigin">POINTFLOAT</field>
<field name="gmfCellIncX">FLOAT</field>
<field name="gmfCellIncY">FLOAT</field>
} GLYPHMETRICSFLOAT, *PGLYPHMETRICSFLOAT,  *LPGLYPHMETRICSFLOAT;
<function name="wglUseFontOutlinesA" ret="BOOL " convention="__stdcall">
HDC, DWORD, DWORD, DWORD, FLOAT,
                                           FLOAT, int, LPGLYPHMETRICSFLOAT);
<function name="wglUseFontOutlinesW" ret="BOOL " convention="__stdcall">
HDC, DWORD, DWORD, DWORD, FLOAT,
                                           FLOAT, int, LPGLYPHMETRICSFLOAT);
<struct name="tagLAYERPLANEDESCRIPTOR">
<field name="nSize">WORD</field>
<field name="nVersion">WORD</field>
<field name="dwFlags">DWORD</field>
<field name="iPixelType">BYTE</field>
<field name="cColorBits">BYTE</field>
<field name="cRedBits">BYTE</field>
<field name="cRedShift">BYTE</field>
<field name="cGreenBits">BYTE</field>
<field name="cGreenShift">BYTE</field>
<field name="cBlueBits">BYTE</field>
<field name="cBlueShift">BYTE</field>
<field name="cAlphaBits">BYTE</field>
<field name="cAlphaShift">BYTE</field>
<field name="cAccumBits">BYTE</field>
<field name="cAccumRedBits">BYTE</field>
<field name="cAccumGreenBits">BYTE</field>
<field name="cAccumBlueBits">BYTE</field>
<field name="cAccumAlphaBits">BYTE</field>
<field name="cDepthBits">BYTE</field>
<field name="cStencilBits">BYTE</field>
<field name="cAuxBuffers">BYTE</field>
<field name="iLayerPlane">BYTE</field>
<field name="bReserved">BYTE</field>
<field name="crTransparent">COLORREF</field>
} LAYERPLANEDESCRIPTOR, *PLAYERPLANEDESCRIPTOR,  *LPLAYERPLANEDESCRIPTOR;

<function name="wglDescribeLayerPlane" ret="BOOL " convention="__stdcall">
HDC, int, int, UINT,
                                             LPLAYERPLANEDESCRIPTOR);
<function name="wglSetLayerPaletteEntries" ret="int  " convention="__stdcall">
HDC, int, int, int,
                                                 const COLORREF *);
<function name="wglGetLayerPaletteEntries" ret="int  " convention="__stdcall">
HDC, int, int, int,
                                                 COLORREF *);
<function name="wglRealizeLayerPalette" ret="BOOL " convention="__stdcall">
HDC, int, BOOL);
<function name="wglSwapLayerBuffers" ret="BOOL " convention="__stdcall">
HDC, UINT);
<struct name="_WGLSWAP">
<field name="hdc">HDC</field>
<field name="uiFlags">UINT</field>
} WGLSWAP, *PWGLSWAP,  *LPWGLSWAP;
<function name="wglSwapMultipleBuffers" ret="DWORD" convention="__stdcall">
UINT, const WGLSWAP *);
#line 1 "\\program files\\Microsoft SDKs\\Windows\\v6.0A\\Include\\winuser.h"

#pragma once
typedef HANDLE HDWP;
typedef void MENUTEMPLATEA;
typedef void MENUTEMPLATEW;
typedef MENUTEMPLATEA MENUTEMPLATE;

typedef PVOID LPMENUTEMPLATEA;
typedef PVOID LPMENUTEMPLATEW;
typedef LPMENUTEMPLATEA LPMENUTEMPLATE;
typedef LRESULT (__stdcall* WNDPROC)(HWND, UINT, WPARAM, LPARAM);
typedef INT_PTR (__stdcall* DLGPROC)(HWND, UINT, WPARAM, LPARAM);
typedef void (__stdcall* TIMERPROC)(HWND, UINT, UINT_PTR, DWORD);
typedef BOOL (__stdcall* GRAYSTRINGPROC)(HDC, LPARAM, int);
typedef BOOL (__stdcall* WNDENUMPROC)(HWND, LPARAM);
typedef LRESULT (__stdcall* HOOKPROC)(int code, WPARAM wParam, LPARAM lParam);
typedef void (__stdcall* SENDASYNCPROC)(HWND, UINT, ULONG_PTR, LRESULT);

typedef BOOL (__stdcall* PROPENUMPROCA)(HWND, LPCSTR, HANDLE);
typedef BOOL (__stdcall* PROPENUMPROCW)(HWND, LPCWSTR, HANDLE);

typedef BOOL (__stdcall* PROPENUMPROCEXA)(HWND, LPSTR, HANDLE, ULONG_PTR);
typedef BOOL (__stdcall* PROPENUMPROCEXW)(HWND, LPWSTR, HANDLE, ULONG_PTR);

typedef int (__stdcall* EDITWORDBREAKPROCA)(LPSTR lpch, int ichCurrent, int cch, int code);
typedef int (__stdcall* EDITWORDBREAKPROCW)(LPWSTR lpch, int ichCurrent, int cch, int code);
typedef BOOL (__stdcall* DRAWSTATEPROC)(HDC hdc, LPARAM lData, WPARAM wData, int cx, int cy);
typedef PROPENUMPROCA        PROPENUMPROC;
typedef PROPENUMPROCEXA      PROPENUMPROCEX;
typedef EDITWORDBREAKPROCA   EDITWORDBREAKPROC;
typedef BOOL (__stdcall* NAMEENUMPROCA)(LPSTR, LPARAM);
typedef BOOL (__stdcall* NAMEENUMPROCW)(LPWSTR, LPARAM);

typedef NAMEENUMPROCA   WINSTAENUMPROCA;
typedef NAMEENUMPROCA   DESKTOPENUMPROCA;
typedef NAMEENUMPROCW   WINSTAENUMPROCW;
typedef NAMEENUMPROCW   DESKTOPENUMPROCW;
typedef WINSTAENUMPROCA     WINSTAENUMPROC;
typedef DESKTOPENUMPROCA    DESKTOPENUMPROC;

#pragma warning(push)
#pragma warning(disable:4995)
<function name="wvsprintfA" ret="int" convention="__stdcall">
<arg name="LPSTR"> </arg>
<arg name="LPCSTR"> </arg>
<arg name="arglist">va_list</arg>
</function>
<function name="wvsprintfW" ret="int" convention="__stdcall">
<arg name="LPWSTR"> </arg>
<arg name="LPCWSTR"> </arg>
<arg name="arglist">va_list</arg>
</function>
<function name="wsprintfA" ret="int" convention="__cdecl">
<arg name="LPSTR"> </arg>
<arg name="LPCSTR"> </arg>

    ...);
<function name="wsprintfW" ret="int" convention="__cdecl">
<arg name="LPWSTR"> </arg>
<arg name="LPCWSTR"> </arg>

    ...);
#pragma warning(pop)

<struct name="tagCBT_CREATEWNDA">
    struct tagCREATESTRUCTA *lpcs;
    HWND           hwndInsertAfter;
} CBT_CREATEWNDA, *LPCBT_CREATEWNDA;
<struct name="tagCBT_CREATEWNDW">
    struct tagCREATESTRUCTW *lpcs;
    HWND           hwndInsertAfter;
} CBT_CREATEWNDW, *LPCBT_CREATEWNDW;

typedef CBT_CREATEWNDA CBT_CREATEWND;
typedef LPCBT_CREATEWNDA LPCBT_CREATEWND;
<struct name="tagCBTACTIVATESTRUCT">
<field name="fMouse">BOOL</field>
<field name="hWndActive">HWND</field>
</struct>
<typedefprev id="CBTACTIVATESTRUCT"/>
<typedefptrprev id="LPCBTACTIVATESTRUCT"/>
<struct name="tagWTSSESSION_NOTIFICATION">
<field name="cbSize">DWORD</field>
<field name="dwSessionId">DWORD</field>
</struct>
<typedefprev id="WTSSESSION_NOTIFICATION"/>
<typedefptrprev id="PWTSSESSION_NOTIFICATION"/>

<struct>
<field name="hwnd">HWND</field>
<field name="rc">RECT</field>
} SHELLHOOKINFO, *LPSHELLHOOKINFO;

<struct name="tagEVENTMSG">
<field name="message">UINT</field>
<field name="paramL">UINT</field>
<field name="paramH">UINT</field>
<field name="time">DWORD</field>
<field name="hwnd">HWND</field>
} EVENTMSG, *PEVENTMSGMSG,  *NPEVENTMSGMSG,  *LPEVENTMSGMSG;

<typedef name="LPEVENTMSG">tagEVENTMSG *PEVENTMSG,  *NPEVENTMSG,  *</typedef>

<struct name="tagCWPSTRUCT">
<field name="lParam">LPARAM</field>
<field name="wParam">WPARAM</field>
<field name="message">UINT</field>
<field name="hwnd">HWND</field>
} CWPSTRUCT, *PCWPSTRUCT,  *NPCWPSTRUCT,  *LPCWPSTRUCT;
<struct name="tagCWPRETSTRUCT">
<field name="lResult">LRESULT</field>
<field name="lParam">LPARAM</field>
<field name="wParam">WPARAM</field>
<field name="message">UINT</field>
<field name="hwnd">HWND</field>
} CWPRETSTRUCT, *PCWPRETSTRUCT,  *NPCWPRETSTRUCT,  *LPCWPRETSTRUCT;
<struct name="tagKBDLLHOOKSTRUCT">
<field name="vkCode">DWORD</field>
<field name="scanCode">DWORD</field>
<field name="flags">DWORD</field>
<field name="time">DWORD</field>
<field name="dwExtraInfo">ULONG_PTR</field>
} KBDLLHOOKSTRUCT,  *LPKBDLLHOOKSTRUCT, *PKBDLLHOOKSTRUCT;

<struct name="tagMSLLHOOKSTRUCT">
<field name="pt">POINT</field>
<field name="mouseData">DWORD</field>
<field name="flags">DWORD</field>
<field name="time">DWORD</field>
<field name="dwExtraInfo">ULONG_PTR</field>
} MSLLHOOKSTRUCT,  *LPMSLLHOOKSTRUCT, *PMSLLHOOKSTRUCT;
<struct name="tagDEBUGHOOKINFO">
<field name="idThread">DWORD</field>
<field name="idThreadInstaller">DWORD</field>
<field name="lParam">LPARAM</field>
<field name="wParam">WPARAM</field>
<field name="code">int</field>
} DEBUGHOOKINFO, *PDEBUGHOOKINFO,  *NPDEBUGHOOKINFO, * LPDEBUGHOOKINFO;

<struct name="tagMOUSEHOOKSTRUCT">
<field name="pt">POINT</field>
<field name="hwnd">HWND</field>
<field name="wHitTestCode">UINT</field>
<field name="dwExtraInfo">ULONG_PTR</field>
} MOUSEHOOKSTRUCT,  *LPMOUSEHOOKSTRUCT, *PMOUSEHOOKSTRUCT;

<struct name="tagMOUSEHOOKSTRUCTEX">
    MOUSEHOOKSTRUCT;
    DWORD   mouseData;
} MOUSEHOOKSTRUCTEX, *LPMOUSEHOOKSTRUCTEX, *PMOUSEHOOKSTRUCTEX;

<struct name="tagHARDWAREHOOKSTRUCT">
<field name="hwnd">HWND</field>
<field name="message">UINT</field>
<field name="wParam">WPARAM</field>
<field name="lParam">LPARAM</field>
} HARDWAREHOOKSTRUCT,  *LPHARDWAREHOOKSTRUCT, *PHARDWAREHOOKSTRUCT;
<function name="LoadKeyboardLayoutA" ret="HKL" convention="__stdcall">
<arg name="pwszKLID">LPCSTR</arg>
<arg name="Flags">UINT</arg>
</function>
<function name="LoadKeyboardLayoutW" ret="HKL" convention="__stdcall">
<arg name="pwszKLID">LPCWSTR</arg>
<arg name="Flags">UINT</arg>
</function>

<function name="ActivateKeyboardLayout" ret="HKL" convention="__stdcall">
<arg name="hkl">HKL</arg>
<arg name="Flags">UINT</arg>
</function>
<function name="ToUnicodeEx" ret="int" convention="__stdcall">
<arg name="wVirtKey">UINT</arg>
<arg name="wScanCode">UINT</arg>

     const BYTE *lpKeyState,
     LPWSTR pwszBuff,
     int cchBuff,
     UINT wFlags,
     HKL dwhkl);

<function name="UnloadKeyboardLayout" ret="BOOL" convention="__stdcall">
<arg name="hkl">HKL</arg>
</function>

<function name="GetKeyboardLayoutNameA" ret="BOOL" convention="__stdcall">
<arg name="pwszKLID">LPSTR</arg>
</function>
<function name="GetKeyboardLayoutNameW" ret="BOOL" convention="__stdcall">
<arg name="pwszKLID">LPWSTR</arg>
</function>

<function name="GetKeyboardLayoutList" ret="int" convention="__stdcall">
<arg name="nBuff">int</arg>

     HKL  *lpList);

<function name="GetKeyboardLayout" ret="HKL" convention="__stdcall">
<arg name="idThread">DWORD</arg>
</function>

<struct name="tagMOUSEMOVEPOINT">
<field name="x">int</field>
<field name="y">int</field>
<field name="time">DWORD</field>
<field name="dwExtraInfo">ULONG_PTR</field>
} MOUSEMOVEPOINT, *PMOUSEMOVEPOINT, * LPMOUSEMOVEPOINT;
<function name="GetMouseMovePointsEx" ret="int" convention="__stdcall">
<arg name="cbSize">UINT</arg>
<arg name="lppt">LPMOUSEMOVEPOINT</arg>
<arg name="lpptBuf">LPMOUSEMOVEPOINT</arg>
<arg name="nBufPoints">int</arg>
<arg name="resolution">DWORD</arg>
</function>

<function name="CreateDesktopA" ret="HDESK" convention="__stdcall">
<arg name="lpszDesktop">LPCSTR</arg>
<arg name="lpszDevice">LPCSTR</arg>
<arg name="pDevmode">LPDEVMODEA</arg>
<arg name="dwFlags">DWORD</arg>
<arg name="dwDesiredAccess">ACCESS_MASK</arg>
<arg name="lpsa">LPSECURITY_ATTRIBUTES</arg>
</function>
<function name="CreateDesktopW" ret="HDESK" convention="__stdcall">
<arg name="lpszDesktop">LPCWSTR</arg>
<arg name="lpszDevice">LPCWSTR</arg>
<arg name="pDevmode">LPDEVMODEW</arg>
<arg name="dwFlags">DWORD</arg>
<arg name="dwDesiredAccess">ACCESS_MASK</arg>
<arg name="lpsa">LPSECURITY_ATTRIBUTES</arg>
</function>
<function name="CreateDesktopExA" ret="HDESK" convention="__stdcall">
<arg name="lpszDesktop">LPCSTR</arg>
<arg name="lpszDevice">LPCSTR</arg>
<arg name="pDevmode">LPDEVMODEA</arg>
<arg name="dwFlags">DWORD</arg>
<arg name="dwDesiredAccess">ACCESS_MASK</arg>
<arg name="lpsa">LPSECURITY_ATTRIBUTES</arg>
<arg name="ulHeapSize">ULONG</arg>
<arg name="pvoid">PVOID</arg>
</function>
<function name="CreateDesktopExW" ret="HDESK" convention="__stdcall">
<arg name="lpszDesktop">LPCWSTR</arg>
<arg name="lpszDevice">LPCWSTR</arg>
<arg name="pDevmode">LPDEVMODEW</arg>
<arg name="dwFlags">DWORD</arg>
<arg name="dwDesiredAccess">ACCESS_MASK</arg>
<arg name="lpsa">LPSECURITY_ATTRIBUTES</arg>
<arg name="ulHeapSize">ULONG</arg>
<arg name="pvoid">PVOID</arg>
</function>
<function name="OpenDesktopA" ret="HDESK" convention="__stdcall">
<arg name="lpszDesktop">LPCSTR</arg>
<arg name="dwFlags">DWORD</arg>
<arg name="fInherit">BOOL</arg>
<arg name="dwDesiredAccess">ACCESS_MASK</arg>
</function>
<function name="OpenDesktopW" ret="HDESK" convention="__stdcall">
<arg name="lpszDesktop">LPCWSTR</arg>
<arg name="dwFlags">DWORD</arg>
<arg name="fInherit">BOOL</arg>
<arg name="dwDesiredAccess">ACCESS_MASK</arg>
</function>
<function name="OpenInputDesktop" ret="HDESK" convention="__stdcall">
<arg name="dwFlags">DWORD</arg>
<arg name="fInherit">BOOL</arg>
<arg name="dwDesiredAccess">ACCESS_MASK</arg>
</function>
<function name="EnumDesktopsA" ret="BOOL" convention="__stdcall">
<arg name="hwinsta">HWINSTA</arg>
<arg name="lpEnumFunc">DESKTOPENUMPROCA</arg>
<arg name="lParam">LPARAM</arg>
</function>
<function name="EnumDesktopsW" ret="BOOL" convention="__stdcall">
<arg name="hwinsta">HWINSTA</arg>
<arg name="lpEnumFunc">DESKTOPENUMPROCW</arg>
<arg name="lParam">LPARAM</arg>
</function>
<function name="EnumDesktopWindows" ret="BOOL" convention="__stdcall">
<arg name="hDesktop">HDESK</arg>
<arg name="lpfn">WNDENUMPROC</arg>
<arg name="lParam">LPARAM</arg>
</function>

<function name="SwitchDesktop" ret="BOOL" convention="__stdcall">
<arg name="hDesktop">HDESK</arg>
</function>
<function name="SetThreadDesktop" ret="BOOL" convention="__stdcall">
<arg name="hDesktop">HDESK</arg>
</function>

<function name="CloseDesktop" ret="BOOL" convention="__stdcall">
<arg name="hDesktop">HDESK</arg>
</function>

<function name="GetThreadDesktop" ret="HDESK" convention="__stdcall">
<arg name="dwThreadId">DWORD</arg>
</function>

<function name="CreateWindowStationA" ret="HWINSTA" convention="__stdcall">
<arg name="lpwinsta">LPCSTR</arg>
<arg name="dwFlags">DWORD</arg>
<arg name="dwDesiredAccess">ACCESS_MASK</arg>
<arg name="lpsa">LPSECURITY_ATTRIBUTES</arg>
</function>
<function name="CreateWindowStationW" ret="HWINSTA" convention="__stdcall">
<arg name="lpwinsta">LPCWSTR</arg>
<arg name="dwFlags">DWORD</arg>
<arg name="dwDesiredAccess">ACCESS_MASK</arg>
<arg name="lpsa">LPSECURITY_ATTRIBUTES</arg>
</function>
<function name="OpenWindowStationA" ret="HWINSTA" convention="__stdcall">
<arg name="lpszWinSta">LPCSTR</arg>
<arg name="fInherit">BOOL</arg>
<arg name="dwDesiredAccess">ACCESS_MASK</arg>
</function>
<function name="OpenWindowStationW" ret="HWINSTA" convention="__stdcall">
<arg name="lpszWinSta">LPCWSTR</arg>
<arg name="fInherit">BOOL</arg>
<arg name="dwDesiredAccess">ACCESS_MASK</arg>
</function>
<function name="EnumWindowStationsA" ret="BOOL" convention="__stdcall">
<arg name="lpEnumFunc">WINSTAENUMPROCA</arg>
<arg name="lParam">LPARAM</arg>
</function>
<function name="EnumWindowStationsW" ret="BOOL" convention="__stdcall">
<arg name="lpEnumFunc">WINSTAENUMPROCW</arg>
<arg name="lParam">LPARAM</arg>
</function>
<function name="CloseWindowStation" ret="BOOL" convention="__stdcall">
<arg name="hWinSta">HWINSTA</arg>
</function>

<function name="SetProcessWindowStation" ret="BOOL" convention="__stdcall">
<arg name="hWinSta">HWINSTA</arg>
</function>

<function name="GetProcessWindowStation" ret="HWINSTA" convention="__stdcall">
<arg name="void"> </arg>
</function>
<function name="SetUserObjectSecurity" ret="BOOL" convention="__stdcall">
<arg name="hObj">HANDLE</arg>
<arg name="pSIRequested">PSECURITY_INFORMATION</arg>
<arg name="pSID">PSECURITY_DESCRIPTOR</arg>
</function>

<function name="GetUserObjectSecurity" ret="BOOL" convention="__stdcall">
<arg name="hObj">HANDLE</arg>
<arg name="pSIRequested">PSECURITY_INFORMATION</arg>
<arg name="pSID">PSECURITY_DESCRIPTOR</arg>
<arg name="nLength">DWORD</arg>
<arg name="lpnLengthNeeded">LPDWORD</arg>
</function>
<struct name="tagUSEROBJECTFLAGS">
<field name="fInherit">BOOL</field>
<field name="fReserved">BOOL</field>
<field name="dwFlags">DWORD</field>
</struct>
<typedefprev id="USEROBJECTFLAGS"/>
<typedefptrprev id="PUSEROBJECTFLAGS"/>

<function name="GetUserObjectInformationA" ret="BOOL" convention="__stdcall">
<arg name="hObj">HANDLE</arg>
<arg name="nIndex">int</arg>
<arg name="pvInfo">PVOID</arg>
<arg name="nLength">DWORD</arg>
<arg name="lpnLengthNeeded">LPDWORD</arg>
</function>
<function name="GetUserObjectInformationW" ret="BOOL" convention="__stdcall">
<arg name="hObj">HANDLE</arg>
<arg name="nIndex">int</arg>
<arg name="pvInfo">PVOID</arg>
<arg name="nLength">DWORD</arg>
<arg name="lpnLengthNeeded">LPDWORD</arg>
</function>
<function name="SetUserObjectInformationA" ret="BOOL" convention="__stdcall">
<arg name="hObj">HANDLE</arg>
<arg name="nIndex">int</arg>
<arg name="pvInfo">PVOID</arg>
<arg name="nLength">DWORD</arg>
</function>
<function name="SetUserObjectInformationW" ret="BOOL" convention="__stdcall">
<arg name="hObj">HANDLE</arg>
<arg name="nIndex">int</arg>
<arg name="pvInfo">PVOID</arg>
<arg name="nLength">DWORD</arg>
</function>
<struct name="tagWNDCLASSEXA">
<field name="cbSize">UINT</field>
    
    UINT        style;
    WNDPROC     lpfnWndProc;
    int         cbClsExtra;
    int         cbWndExtra;
    HINSTANCE   hInstance;
    HICON       hIcon;
    HCURSOR     hCursor;
    HBRUSH      hbrBackground;
    LPCSTR      lpszMenuName;
    LPCSTR      lpszClassName;
    
    HICON       hIconSm;
} WNDCLASSEXA, *PWNDCLASSEXA,  *NPWNDCLASSEXA,  *LPWNDCLASSEXA;
<struct name="tagWNDCLASSEXW">
<field name="cbSize">UINT</field>
    
    UINT        style;
    WNDPROC     lpfnWndProc;
    int         cbClsExtra;
    int         cbWndExtra;
    HINSTANCE   hInstance;
    HICON       hIcon;
    HCURSOR     hCursor;
    HBRUSH      hbrBackground;
    LPCWSTR     lpszMenuName;
    LPCWSTR     lpszClassName;
    
    HICON       hIconSm;
} WNDCLASSEXW, *PWNDCLASSEXW,  *NPWNDCLASSEXW,  *LPWNDCLASSEXW;

typedef WNDCLASSEXA WNDCLASSEX;
typedef PWNDCLASSEXA PWNDCLASSEX;
typedef NPWNDCLASSEXA NPWNDCLASSEX;
typedef LPWNDCLASSEXA LPWNDCLASSEX;

<struct name="tagWNDCLASSA">
<field name="style">UINT</field>
<field name="lpfnWndProc">WNDPROC</field>
<field name="cbClsExtra">int</field>
<field name="cbWndExtra">int</field>
<field name="hInstance">HINSTANCE</field>
<field name="hIcon">HICON</field>
<field name="hCursor">HCURSOR</field>
<field name="hbrBackground">HBRUSH</field>
<field name="lpszMenuName">LPCSTR</field>
<field name="lpszClassName">LPCSTR</field>
} WNDCLASSA, *PWNDCLASSA,  *NPWNDCLASSA,  *LPWNDCLASSA;
<struct name="tagWNDCLASSW">
<field name="style">UINT</field>
<field name="lpfnWndProc">WNDPROC</field>
<field name="cbClsExtra">int</field>
<field name="cbWndExtra">int</field>
<field name="hInstance">HINSTANCE</field>
<field name="hIcon">HICON</field>
<field name="hCursor">HCURSOR</field>
<field name="hbrBackground">HBRUSH</field>
<field name="lpszMenuName">LPCWSTR</field>
<field name="lpszClassName">LPCWSTR</field>
} WNDCLASSW, *PWNDCLASSW,  *NPWNDCLASSW,  *LPWNDCLASSW;

typedef WNDCLASSA WNDCLASS;
typedef PWNDCLASSA PWNDCLASS;
typedef NPWNDCLASSA NPWNDCLASS;
typedef LPWNDCLASSA LPWNDCLASS;

<function name="IsHungAppWindow" ret="BOOL" convention="__stdcall">
<arg name="hwnd">HWND</arg>
</function>
<function name="DisableProcessWindowsGhosting" ret="void" convention="__stdcall">
<arg name="void"> </arg>
</function>
<struct name="tagMSG">
<field name="hwnd">HWND</field>
<field name="message">UINT</field>
<field name="wParam">WPARAM</field>
<field name="lParam">LPARAM</field>
<field name="time">DWORD</field>
<field name="pt">POINT</field>
} MSG, *PMSG,  *NPMSG,  *LPMSG;
<struct name="tagMINMAXINFO">
<field name="ptReserved">POINT</field>
<field name="ptMaxSize">POINT</field>
<field name="ptMaxPosition">POINT</field>
<field name="ptMinTrackSize">POINT</field>
<field name="ptMaxTrackSize">POINT</field>
} MINMAXINFO, *PMINMAXINFO, *LPMINMAXINFO;
<struct name="tagCOPYDATASTRUCT">
<field name="dwData">ULONG_PTR</field>
<field name="cbData">DWORD</field>
<field name="lpData">PVOID</field>
</struct>
<typedefprev id="COPYDATASTRUCT"/>
<typedefptrprev id="PCOPYDATASTRUCT"/>
<struct name="tagMDINEXTMENU">
<field name="hmenuIn">HMENU</field>
<field name="hmenuNext">HMENU</field>
<field name="hwndNext">HWND</field>
} MDINEXTMENU, * PMDINEXTMENU,  * LPMDINEXTMENU;
<struct>
<field name="PowerSetting">GUID</field>
<field name="DataLength">DWORD</field>
<field name="Data[1]">UCHAR</field>
} POWERBROADCAST_SETTING, *PPOWERBROADCAST_SETTING;

<function name="RegisterWindowMessageA" ret="UINT" convention="__stdcall">
<arg name="lpString">LPCSTR</arg>
</function>
<function name="RegisterWindowMessageW" ret="UINT" convention="__stdcall">
<arg name="lpString">LPCWSTR</arg>
</function>
<struct name="tagWINDOWPOS">
<field name="hwnd">HWND</field>
<field name="hwndInsertAfter">HWND</field>
<field name="x">int</field>
<field name="y">int</field>
<field name="cx">int</field>
<field name="cy">int</field>
<field name="flags">UINT</field>
} WINDOWPOS, *LPWINDOWPOS, *PWINDOWPOS;

<struct name="tagNCCALCSIZE_PARAMS">
    RECT       rgrc[3];
    PWINDOWPOS lppos;
} NCCALCSIZE_PARAMS, *LPNCCALCSIZE_PARAMS;

<struct name="tagTRACKMOUSEEVENT">
<field name="cbSize">DWORD</field>
<field name="dwFlags">DWORD</field>
<field name="hwndTrack">HWND</field>
<field name="dwHoverTime">DWORD</field>
</struct>
<typedefprev id="TRACKMOUSEEVENT"/>
<typedefptrprev id="LPTRACKMOUSEEVENT"/>

<function name="TrackMouseEvent" ret="BOOL" convention="__stdcall">
<arg name="lpEventTrack">LPTRACKMOUSEEVENT</arg>
</function>
<function name="DrawEdge" ret="BOOL" convention="__stdcall">
<arg name="hdc">HDC</arg>
<arg name="qrc">LPRECT</arg>
<arg name="edge">UINT</arg>
<arg name="grfFlags">UINT</arg>
</function>
<function name="DrawFrameControl" ret="BOOL" convention="__stdcall">
<arg name="HDC"> </arg>
<arg name="LPRECT"> </arg>
<arg name="UINT"> </arg>
<arg name="UINT"></arg>
</function>
<function name="DrawCaption" ret="BOOL" convention="__stdcall">
<arg name="hwnd">HWND</arg>
<arg name="hdc">HDC</arg>
<arg name="lprect">const RECT *</arg>
<arg name="flags">UINT</arg>
</function>
<function name="DrawAnimatedRects" ret="BOOL" convention="__stdcall">
<arg name="hwnd">HWND</arg>
<arg name="idAni">int</arg>

     const RECT *lprcFrom,
     const RECT *lprcTo);
<struct name="tagACCEL">

    BYTE   fVirt;               
    WORD   key;
    WORD   cmd;
} ACCEL, *LPACCEL;

<struct name="tagPAINTSTRUCT">
<field name="hdc">HDC</field>
<field name="fErase">BOOL</field>
<field name="rcPaint">RECT</field>
<field name="fRestore">BOOL</field>
<field name="fIncUpdate">BOOL</field>
<field name="rgbReserved[32]">BYTE</field>
} PAINTSTRUCT, *PPAINTSTRUCT, *NPPAINTSTRUCT, *LPPAINTSTRUCT;

<struct name="tagCREATESTRUCTA">
<field name="lpCreateParams">LPVOID</field>
<field name="hInstance">HINSTANCE</field>
<field name="hMenu">HMENU</field>
<field name="hwndParent">HWND</field>
<field name="cy">int</field>
<field name="cx">int</field>
<field name="y">int</field>
<field name="x">int</field>
<field name="style">LONG</field>
<field name="lpszName">LPCSTR</field>
<field name="lpszClass">LPCSTR</field>
<field name="dwExStyle">DWORD</field>
</struct>
<typedefprev id="CREATESTRUCTA"/>
<typedefptrprev id="LPCREATESTRUCTA"/>
<struct name="tagCREATESTRUCTW">
<field name="lpCreateParams">LPVOID</field>
<field name="hInstance">HINSTANCE</field>
<field name="hMenu">HMENU</field>
<field name="hwndParent">HWND</field>
<field name="cy">int</field>
<field name="cx">int</field>
<field name="y">int</field>
<field name="x">int</field>
<field name="style">LONG</field>
<field name="lpszName">LPCWSTR</field>
<field name="lpszClass">LPCWSTR</field>
<field name="dwExStyle">DWORD</field>
</struct>
<typedefprev id="CREATESTRUCTW"/>
<typedefptrprev id="LPCREATESTRUCTW"/>

typedef CREATESTRUCTA CREATESTRUCT;
typedef LPCREATESTRUCTA LPCREATESTRUCT;
<struct name="tagWINDOWPLACEMENT">
<field name="length">UINT</field>
<field name="flags">UINT</field>
<field name="showCmd">UINT</field>
<field name="ptMinPosition">POINT</field>
<field name="ptMaxPosition">POINT</field>
<field name="rcNormalPosition">RECT</field>
} WINDOWPLACEMENT;
typedef WINDOWPLACEMENT *PWINDOWPLACEMENT, *LPWINDOWPLACEMENT;

<struct name="tagNMHDR">
<field name="hwndFrom">HWND</field>
<field name="idFrom">UINT_PTR</field>
<field name="code">UINT</field>
}   NMHDR;
typedef NMHDR  * LPNMHDR;

<struct name="tagSTYLESTRUCT">
<field name="styleOld">DWORD</field>
<field name="styleNew">DWORD</field>
</struct>
<typedefprev id="STYLESTRUCT"/>
<typedefptrprev id="LPSTYLESTRUCT"/>

<struct name="tagMEASUREITEMSTRUCT">
<field name="CtlType">UINT</field>
<field name="CtlID">UINT</field>
<field name="itemID">UINT</field>
<field name="itemWidth">UINT</field>
<field name="itemHeight">UINT</field>
<field name="itemData">ULONG_PTR</field>
} MEASUREITEMSTRUCT,  *PMEASUREITEMSTRUCT,  *LPMEASUREITEMSTRUCT;

<struct name="tagDRAWITEMSTRUCT">
<field name="CtlType">UINT</field>
<field name="CtlID">UINT</field>
<field name="itemID">UINT</field>
<field name="itemAction">UINT</field>
<field name="itemState">UINT</field>
<field name="hwndItem">HWND</field>
<field name="hDC">HDC</field>
<field name="rcItem">RECT</field>
<field name="itemData">ULONG_PTR</field>
} DRAWITEMSTRUCT,  *PDRAWITEMSTRUCT,  *LPDRAWITEMSTRUCT;

<struct name="tagDELETEITEMSTRUCT">
<field name="CtlType">UINT</field>
<field name="CtlID">UINT</field>
<field name="itemID">UINT</field>
<field name="hwndItem">HWND</field>
<field name="itemData">ULONG_PTR</field>
} DELETEITEMSTRUCT,  *PDELETEITEMSTRUCT,  *LPDELETEITEMSTRUCT;

<struct name="tagCOMPAREITEMSTRUCT">
<field name="CtlType">UINT</field>
<field name="CtlID">UINT</field>
<field name="hwndItem">HWND</field>
<field name="itemID1">UINT</field>
<field name="itemData1">ULONG_PTR</field>
<field name="itemID2">UINT</field>
<field name="itemData2">ULONG_PTR</field>
<field name="dwLocaleId">DWORD</field>
} COMPAREITEMSTRUCT,  *PCOMPAREITEMSTRUCT,  *LPCOMPAREITEMSTRUCT;
<function name="GetMessageA" ret="BOOL" convention="__stdcall">
<arg name="lpMsg">LPMSG</arg>
<arg name="hWnd">HWND</arg>
<arg name="wMsgFilterMin">UINT</arg>
<arg name="wMsgFilterMax">UINT</arg>
</function>
<function name="GetMessageW" ret="BOOL" convention="__stdcall">
<arg name="lpMsg">LPMSG</arg>
<arg name="hWnd">HWND</arg>
<arg name="wMsgFilterMin">UINT</arg>
<arg name="wMsgFilterMax">UINT</arg>
</function>
<function name="TranslateMessage" ret="BOOL" convention="__stdcall">
     const MSG *lpMsg);

<function name="DispatchMessageA" ret="LRESULT" convention="__stdcall">
     const MSG *lpMsg);
<function name="DispatchMessageW" ret="LRESULT" convention="__stdcall">
     const MSG *lpMsg);

<function name="SetMessageQueue" ret="BOOL" convention="__stdcall">
<arg name="cMessagesMax">int</arg>
</function>

<function name="PeekMessageA" ret="BOOL" convention="__stdcall">
<arg name="lpMsg">LPMSG</arg>
<arg name="hWnd">HWND</arg>
<arg name="wMsgFilterMin">UINT</arg>
<arg name="wMsgFilterMax">UINT</arg>
<arg name="wRemoveMsg">UINT</arg>
</function>
<function name="PeekMessageW" ret="BOOL" convention="__stdcall">
<arg name="lpMsg">LPMSG</arg>
<arg name="hWnd">HWND</arg>
<arg name="wMsgFilterMin">UINT</arg>
<arg name="wMsgFilterMax">UINT</arg>
<arg name="wRemoveMsg">UINT</arg>
</function>

<function name="RegisterHotKey" ret="BOOL" convention="__stdcall">
<arg name="hWnd">HWND</arg>
<arg name="id">int</arg>
<arg name="fsModifiers">UINT</arg>
<arg name="vk">UINT</arg>
</function>

<function name="UnregisterHotKey" ret="BOOL" convention="__stdcall">
<arg name="hWnd">HWND</arg>
<arg name="id">int</arg>
</function>
<function name="ExitWindowsEx" ret="BOOL" convention="__stdcall">
<arg name="uFlags">UINT</arg>
<arg name="dwReason">DWORD</arg>
</function>

<function name="SwapMouseButton" ret="BOOL" convention="__stdcall">
<arg name="fSwap">BOOL</arg>
</function>

<function name="GetMessagePos" ret="DWORD" convention="__stdcall">
<arg name="void"> </arg>
</function>

<function name="GetMessageTime" ret="LONG" convention="__stdcall">
<arg name="void"> </arg>
</function>

<function name="GetMessageExtraInfo" ret="LPARAM" convention="__stdcall">
<arg name="void"> </arg>
</function>
<function name="IsWow64Message" ret="BOOL" convention="__stdcall">
<arg name="void"> </arg>
</function>

<function name="SetMessageExtraInfo" ret="LPARAM" convention="__stdcall">
<arg name="lParam">LPARAM</arg>
</function>
<function name="SendMessageA" ret="LRESULT" convention="__stdcall">
<arg name="hWnd">HWND</arg>
<arg name="Msg">UINT</arg>
<arg name="wParam">WPARAM</arg>
<arg name="lParam">LPARAM</arg>
</function>
<function name="SendMessageW" ret="LRESULT" convention="__stdcall">
<arg name="hWnd">HWND</arg>
<arg name="Msg">UINT</arg>
<arg name="wParam">WPARAM</arg>
<arg name="lParam">LPARAM</arg>
</function>
<function name="SendMessageTimeoutA" ret="LRESULT" convention="__stdcall">
<arg name="hWnd">HWND</arg>
<arg name="Msg">UINT</arg>
<arg name="wParam">WPARAM</arg>
<arg name="lParam">LPARAM</arg>
<arg name="fuFlags">UINT</arg>
<arg name="uTimeout">UINT</arg>
<arg name="lpdwResult">PDWORD_PTR</arg>
</function>
<function name="SendMessageTimeoutW" ret="LRESULT" convention="__stdcall">
<arg name="hWnd">HWND</arg>
<arg name="Msg">UINT</arg>
<arg name="wParam">WPARAM</arg>
<arg name="lParam">LPARAM</arg>
<arg name="fuFlags">UINT</arg>
<arg name="uTimeout">UINT</arg>
<arg name="lpdwResult">PDWORD_PTR</arg>
</function>
<function name="SendNotifyMessageA" ret="BOOL" convention="__stdcall">
<arg name="hWnd">HWND</arg>
<arg name="Msg">UINT</arg>
<arg name="wParam">WPARAM</arg>
<arg name="lParam">LPARAM</arg>
</function>
<function name="SendNotifyMessageW" ret="BOOL" convention="__stdcall">
<arg name="hWnd">HWND</arg>
<arg name="Msg">UINT</arg>
<arg name="wParam">WPARAM</arg>
<arg name="lParam">LPARAM</arg>
</function>
<function name="SendMessageCallbackA" ret="BOOL" convention="__stdcall">
<arg name="hWnd">HWND</arg>
<arg name="Msg">UINT</arg>
<arg name="wParam">WPARAM</arg>
<arg name="lParam">LPARAM</arg>
<arg name="lpResultCallBack">SENDASYNCPROC</arg>
<arg name="dwData">ULONG_PTR</arg>
</function>
<function name="SendMessageCallbackW" ret="BOOL" convention="__stdcall">
<arg name="hWnd">HWND</arg>
<arg name="Msg">UINT</arg>
<arg name="wParam">WPARAM</arg>
<arg name="lParam">LPARAM</arg>
<arg name="lpResultCallBack">SENDASYNCPROC</arg>
<arg name="dwData">ULONG_PTR</arg>
</function>
<struct>
<field name="cbSize">UINT</field>
<field name="hdesk">HDESK</field>
<field name="hwnd">HWND</field>
<field name="luid">LUID</field>
} BSMINFO, *PBSMINFO;

<function name="BroadcastSystemMessageExA" ret="long" convention="__stdcall">
<arg name="flags">DWORD</arg>
<arg name="lpInfo">LPDWORD</arg>
<arg name="Msg">UINT</arg>
<arg name="wParam">WPARAM</arg>
<arg name="lParam">LPARAM</arg>
<arg name="pbsmInfo">PBSMINFO</arg>
</function>
<function name="BroadcastSystemMessageExW" ret="long" convention="__stdcall">
<arg name="flags">DWORD</arg>
<arg name="lpInfo">LPDWORD</arg>
<arg name="Msg">UINT</arg>
<arg name="wParam">WPARAM</arg>
<arg name="lParam">LPARAM</arg>
<arg name="pbsmInfo">PBSMINFO</arg>
</function>

<function name="BroadcastSystemMessageA" ret="long" convention="__stdcall">
<arg name="flags">DWORD</arg>
<arg name="lpInfo">LPDWORD</arg>
<arg name="Msg">UINT</arg>
<arg name="wParam">WPARAM</arg>
<arg name="lParam">LPARAM</arg>
</function>
<function name="BroadcastSystemMessageW" ret="long" convention="__stdcall">
<arg name="flags">DWORD</arg>
<arg name="lpInfo">LPDWORD</arg>
<arg name="Msg">UINT</arg>
<arg name="wParam">WPARAM</arg>
<arg name="lParam">LPARAM</arg>
</function>

typedef  PVOID           HDEVNOTIFY;
typedef  HDEVNOTIFY     *PHDEVNOTIFY;
<function name="RegisterDeviceNotificationA" ret="HDEVNOTIFY" convention="__stdcall">
<arg name="hRecipient">HANDLE</arg>
<arg name="NotificationFilter">LPVOID</arg>
<arg name="Flags">DWORD</arg>
</function>
<function name="RegisterDeviceNotificationW" ret="HDEVNOTIFY" convention="__stdcall">
<arg name="hRecipient">HANDLE</arg>
<arg name="NotificationFilter">LPVOID</arg>
<arg name="Flags">DWORD</arg>
</function>
<function name="UnregisterDeviceNotification" ret="BOOL" convention="__stdcall">
<arg name="Handle">HDEVNOTIFY</arg>
</function>
typedef  PVOID           HPOWERNOTIFY;
typedef  HPOWERNOTIFY   *PHPOWERNOTIFY;

<function name="RegisterPowerSettingNotification" ret="HPOWERNOTIFY" convention="__stdcall">
<arg name="hRecipient">HANDLE</arg>
<arg name="PowerSettingGuid">LPCGUID</arg>
<arg name="Flags">DWORD</arg>
</function>

<function name="UnregisterPowerSettingNotification" ret="BOOL" convention="__stdcall">
<arg name="Handle">HPOWERNOTIFY</arg>
</function>
<function name="PostMessageA" ret="BOOL" convention="__stdcall">
<arg name="hWnd">HWND</arg>
<arg name="Msg">UINT</arg>
<arg name="wParam">WPARAM</arg>
<arg name="lParam">LPARAM</arg>
</function>
<function name="PostMessageW" ret="BOOL" convention="__stdcall">
<arg name="hWnd">HWND</arg>
<arg name="Msg">UINT</arg>
<arg name="wParam">WPARAM</arg>
<arg name="lParam">LPARAM</arg>
</function>
<function name="PostThreadMessageA" ret="BOOL" convention="__stdcall">
<arg name="idThread">DWORD</arg>
<arg name="Msg">UINT</arg>
<arg name="wParam">WPARAM</arg>
<arg name="lParam">LPARAM</arg>
</function>
<function name="PostThreadMessageW" ret="BOOL" convention="__stdcall">
<arg name="idThread">DWORD</arg>
<arg name="Msg">UINT</arg>
<arg name="wParam">WPARAM</arg>
<arg name="lParam">LPARAM</arg>
</function>

<function name="AttachThreadInput" ret="BOOL" convention="__stdcall">
<arg name="idAttach">DWORD</arg>
<arg name="idAttachTo">DWORD</arg>
<arg name="fAttach">BOOL</arg>
</function>
<function name="ReplyMessage" ret="BOOL" convention="__stdcall">
<arg name="lResult">LRESULT</arg>
</function>

<function name="WaitMessage" ret="BOOL" convention="__stdcall">
<arg name="void"> </arg>
</function>
<function name="WaitForInputIdle" ret="DWORD" convention="__stdcall">
<arg name="hProcess">HANDLE</arg>
<arg name="dwMilliseconds">DWORD</arg>
</function>

<function name="DefWindowProcA" ret="LRESULT" convention="__stdcall">
<arg name="hWnd">HWND</arg>
<arg name="Msg">UINT</arg>
<arg name="wParam">WPARAM</arg>
<arg name="lParam">LPARAM</arg>
</function>
<function name="DefWindowProcW" ret="LRESULT" convention="__stdcall">
<arg name="hWnd">HWND</arg>
<arg name="Msg">UINT</arg>
<arg name="wParam">WPARAM</arg>
<arg name="lParam">LPARAM</arg>
</function>
<function name="PostQuitMessage" ret="void" convention="__stdcall">
<arg name="nExitCode">int</arg>
</function>
<function name="CallWindowProcA" ret="LRESULT" convention="__stdcall">
<arg name="lpPrevWndFunc">WNDPROC</arg>
<arg name="hWnd">HWND</arg>
<arg name="Msg">UINT</arg>
<arg name="wParam">WPARAM</arg>
<arg name="lParam">LPARAM</arg>
</function>
<function name="CallWindowProcW" ret="LRESULT" convention="__stdcall">
<arg name="lpPrevWndFunc">WNDPROC</arg>
<arg name="hWnd">HWND</arg>
<arg name="Msg">UINT</arg>
<arg name="wParam">WPARAM</arg>
<arg name="lParam">LPARAM</arg>
</function>
<function name="InSendMessage" ret="BOOL" convention="__stdcall">
<arg name="void"> </arg>
</function>
<function name="InSendMessageEx" ret="DWORD" convention="__stdcall">
<arg name="lpReserved">LPVOID</arg>
</function>
<function name="GetDoubleClickTime" ret="UINT" convention="__stdcall">
<arg name="void"> </arg>
</function>

<function name="SetDoubleClickTime" ret="BOOL" convention="__stdcall">
<arg name="UINT"> </arg>
</function>

<function name="RegisterClassA" ret="ATOM" convention="__stdcall">
     const WNDCLASSA *lpWndClass);
<function name="RegisterClassW" ret="ATOM" convention="__stdcall">
     const WNDCLASSW *lpWndClass);
<function name="UnregisterClassA" ret="BOOL" convention="__stdcall">
<arg name="lpClassName">LPCSTR</arg>
<arg name="hInstance">HINSTANCE</arg>
</function>
<function name="UnregisterClassW" ret="BOOL" convention="__stdcall">
<arg name="lpClassName">LPCWSTR</arg>
<arg name="hInstance">HINSTANCE</arg>
</function>
<function name="GetClassInfoA" ret="BOOL" convention="__stdcall">
<arg name="hInstance">HINSTANCE</arg>
<arg name="lpClassName">LPCSTR</arg>
<arg name="lpWndClass">LPWNDCLASSA</arg>
</function>
<function name="GetClassInfoW" ret="BOOL" convention="__stdcall">
<arg name="hInstance">HINSTANCE</arg>
<arg name="lpClassName">LPCWSTR</arg>
<arg name="lpWndClass">LPWNDCLASSW</arg>
</function>
<function name="RegisterClassExA" ret="ATOM" convention="__stdcall">
     const WNDCLASSEXA *);
<function name="RegisterClassExW" ret="ATOM" convention="__stdcall">
     const WNDCLASSEXW *);
<function name="GetClassInfoExA" ret="BOOL" convention="__stdcall">
<arg name="hInstance">HINSTANCE</arg>
<arg name="lpszClass">LPCSTR</arg>
<arg name="lpwcx">LPWNDCLASSEXA</arg>
</function>
<function name="GetClassInfoExW" ret="BOOL" convention="__stdcall">
<arg name="hInstance">HINSTANCE</arg>
<arg name="lpszClass">LPCWSTR</arg>
<arg name="lpwcx">LPWNDCLASSEXW</arg>
</function>

typedef<fnptr name="PREGISTERCLASSNAMEW" ret="BOOLEAN" convention="__stdcall">
LPCWSTR);
<function name="CreateWindowExA" ret="HWND" convention="__stdcall">
<arg name="dwExStyle">DWORD</arg>
<arg name="lpClassName">LPCSTR</arg>
<arg name="lpWindowName">LPCSTR</arg>
<arg name="dwStyle">DWORD</arg>
<arg name="X">int</arg>
<arg name="Y">int</arg>
<arg name="nWidth">int</arg>
<arg name="nHeight">int</arg>
<arg name="hWndParent">HWND</arg>
<arg name="hMenu">HMENU</arg>
<arg name="hInstance">HINSTANCE</arg>
<arg name="lpParam">LPVOID</arg>
</function>
<function name="CreateWindowExW" ret="HWND" convention="__stdcall">
<arg name="dwExStyle">DWORD</arg>
<arg name="lpClassName">LPCWSTR</arg>
<arg name="lpWindowName">LPCWSTR</arg>
<arg name="dwStyle">DWORD</arg>
<arg name="X">int</arg>
<arg name="Y">int</arg>
<arg name="nWidth">int</arg>
<arg name="nHeight">int</arg>
<arg name="hWndParent">HWND</arg>
<arg name="hMenu">HMENU</arg>
<arg name="hInstance">HINSTANCE</arg>
<arg name="lpParam">LPVOID</arg>
</function>
<function name="IsWindow" ret="BOOL" convention="__stdcall">
<arg name="hWnd">HWND</arg>
</function>

<function name="IsMenu" ret="BOOL" convention="__stdcall">
<arg name="hMenu">HMENU</arg>
</function>

<function name="IsChild" ret="BOOL" convention="__stdcall">
<arg name="hWndParent">HWND</arg>
<arg name="hWnd">HWND</arg>
</function>

<function name="DestroyWindow" ret="BOOL" convention="__stdcall">
<arg name="hWnd">HWND</arg>
</function>

<function name="ShowWindow" ret="BOOL" convention="__stdcall">
<arg name="hWnd">HWND</arg>
<arg name="nCmdShow">int</arg>
</function>
<function name="AnimateWindow" ret="BOOL" convention="__stdcall">
<arg name="hWnd">HWND</arg>
<arg name="dwTime">DWORD</arg>
<arg name="dwFlags">DWORD</arg>
</function>
<function name="UpdateLayeredWindow" ret="BOOL" convention="__stdcall">
<arg name="hWnd">HWND</arg>
<arg name="hdcDst">HDC</arg>

     POINT *pptDst,
     SIZE *psize,
     HDC hdcSrc,
     POINT *pptSrc,
     COLORREF crKey,
     BLENDFUNCTION *pblend,
     DWORD dwFlags);

<struct name="tagUPDATELAYEREDWINDOWINFO">
<field name="cbSize">DWORD</field>
<field name="hdcDst">HDC</field>
      POINT const         *pptDst;
      SIZE const          *psize;
                HDC                 hdcSrc;
      POINT const         *pptSrc;
                COLORREF            crKey;
      BLENDFUNCTION const *pblend;
                    DWORD               dwFlags;
      RECT const          *prcDirty;
} UPDATELAYEREDWINDOWINFO, *PUPDATELAYEREDWINDOWINFO;
<function name="UpdateLayeredWindowIndirect" ret="BOOL" convention="__stdcall">
<arg name="hWnd">HWND</arg>

     UPDATELAYEREDWINDOWINFO const *pULWInfo);
<function name="GetLayeredWindowAttributes" ret="BOOL" convention="__stdcall">
<arg name="hwnd">HWND</arg>

     COLORREF *pcrKey,
     BYTE *pbAlpha,
     DWORD *pdwFlags);

<function name="PrintWindow" ret="BOOL" convention="__stdcall">
<arg name="hwnd">HWND</arg>
<arg name="hdcBlt">HDC</arg>
<arg name="nFlags">UINT</arg>
</function>
<function name="SetLayeredWindowAttributes" ret="BOOL" convention="__stdcall">
<arg name="hwnd">HWND</arg>
<arg name="crKey">COLORREF</arg>
<arg name="bAlpha">BYTE</arg>
<arg name="dwFlags">DWORD</arg>
</function>
<function name="ShowWindowAsync" ret="BOOL" convention="__stdcall">
<arg name="hWnd">HWND</arg>
<arg name="nCmdShow">int</arg>
</function>
<function name="FlashWindow" ret="BOOL" convention="__stdcall">
<arg name="hWnd">HWND</arg>
<arg name="bInvert">BOOL</arg>
</function>
<struct>
<field name="cbSize">UINT</field>
<field name="hwnd">HWND</field>
<field name="dwFlags">DWORD</field>
<field name="uCount">UINT</field>
<field name="dwTimeout">DWORD</field>
} FLASHWINFO, *PFLASHWINFO;

<function name="FlashWindowEx" ret="BOOL" convention="__stdcall">
<arg name="pfwi">PFLASHWINFO</arg>
</function>
<function name="ShowOwnedPopups" ret="BOOL" convention="__stdcall">
<arg name="hWnd">HWND</arg>
<arg name="fShow">BOOL</arg>
</function>

<function name="OpenIcon" ret="BOOL" convention="__stdcall">
<arg name="hWnd">HWND</arg>
</function>

<function name="CloseWindow" ret="BOOL" convention="__stdcall">
<arg name="hWnd">HWND</arg>
</function>

<function name="MoveWindow" ret="BOOL" convention="__stdcall">
<arg name="hWnd">HWND</arg>
<arg name="X">int</arg>
<arg name="Y">int</arg>
<arg name="nWidth">int</arg>
<arg name="nHeight">int</arg>
<arg name="bRepaint">BOOL</arg>
</function>

<function name="SetWindowPos" ret="BOOL" convention="__stdcall">
<arg name="hWnd">HWND</arg>
<arg name="hWndInsertAfter">HWND</arg>
<arg name="X">int</arg>
<arg name="Y">int</arg>
<arg name="cx">int</arg>
<arg name="cy">int</arg>
<arg name="uFlags">UINT</arg>
</function>

<function name="GetWindowPlacement" ret="BOOL" convention="__stdcall">
<arg name="hWnd">HWND</arg>

     WINDOWPLACEMENT *lpwndpl);

<function name="SetWindowPlacement" ret="BOOL" convention="__stdcall">
<arg name="hWnd">HWND</arg>

     const WINDOWPLACEMENT *lpwndpl);

<function name="BeginDeferWindowPos" ret="HDWP" convention="__stdcall">
<arg name="nNumWindows">int</arg>
</function>

<function name="DeferWindowPos" ret="HDWP" convention="__stdcall">
<arg name="hWinPosInfo">HDWP</arg>
<arg name="hWnd">HWND</arg>
<arg name="hWndInsertAfter">HWND</arg>
<arg name="x">int</arg>
<arg name="y">int</arg>
<arg name="cx">int</arg>
<arg name="cy">int</arg>
<arg name="uFlags">UINT</arg>
</function>

<function name="EndDeferWindowPos" ret="BOOL" convention="__stdcall">
<arg name="hWinPosInfo">HDWP</arg>
</function>
<function name="IsWindowVisible" ret="BOOL" convention="__stdcall">
<arg name="hWnd">HWND</arg>
</function>

<function name="IsIconic" ret="BOOL" convention="__stdcall">
<arg name="hWnd">HWND</arg>
</function>

<function name="AnyPopup" ret="BOOL" convention="__stdcall">
<arg name="void"> </arg>
</function>

<function name="BringWindowToTop" ret="BOOL" convention="__stdcall">
<arg name="hWnd">HWND</arg>
</function>

<function name="IsZoomed" ret="BOOL" convention="__stdcall">
<arg name="hWnd">HWND</arg>
</function>
#line 1 "\\program files\\Microsoft SDKs\\Windows\\v6.0A\\Include\\pshpack2.h"
#pragma warning(disable:4103)

#pragma pack(push,2)

<struct>
<field name="style">DWORD</field>
<field name="dwExtendedStyle">DWORD</field>
<field name="cdit">WORD</field>
<field name="x">short</field>
<field name="y">short</field>
<field name="cx">short</field>
<field name="cy">short</field>
} DLGTEMPLATE;
typedef DLGTEMPLATE *LPDLGTEMPLATEA;
typedef DLGTEMPLATE *LPDLGTEMPLATEW;
typedef LPDLGTEMPLATEA LPDLGTEMPLATE;

typedef const DLGTEMPLATE *LPCDLGTEMPLATEA;
typedef const DLGTEMPLATE *LPCDLGTEMPLATEW;
typedef LPCDLGTEMPLATEA LPCDLGTEMPLATE;
<struct>
<field name="style">DWORD</field>
<field name="dwExtendedStyle">DWORD</field>
<field name="x">short</field>
<field name="y">short</field>
<field name="cx">short</field>
<field name="cy">short</field>
<field name="id">WORD</field>
} DLGITEMTEMPLATE;
typedef DLGITEMTEMPLATE *PDLGITEMTEMPLATEA;
typedef DLGITEMTEMPLATE *PDLGITEMTEMPLATEW;
typedef PDLGITEMTEMPLATEA PDLGITEMTEMPLATE;

typedef DLGITEMTEMPLATE *LPDLGITEMTEMPLATEA;
typedef DLGITEMTEMPLATE *LPDLGITEMTEMPLATEW;
typedef LPDLGITEMTEMPLATEA LPDLGITEMTEMPLATE;

#line 1 "\\program files\\Microsoft SDKs\\Windows\\v6.0A\\Include\\poppack.h"
#pragma warning(disable:4103)

#pragma pack(pop)

<function name="CreateDialogParamA" ret="HWND" convention="__stdcall">
<arg name="hInstance">HINSTANCE</arg>
<arg name="lpTemplateName">LPCSTR</arg>
<arg name="hWndParent">HWND</arg>
<arg name="lpDialogFunc">DLGPROC</arg>
<arg name="dwInitParam">LPARAM</arg>
</function>
<function name="CreateDialogParamW" ret="HWND" convention="__stdcall">
<arg name="hInstance">HINSTANCE</arg>
<arg name="lpTemplateName">LPCWSTR</arg>
<arg name="hWndParent">HWND</arg>
<arg name="lpDialogFunc">DLGPROC</arg>
<arg name="dwInitParam">LPARAM</arg>
</function>
<function name="CreateDialogIndirectParamA" ret="HWND" convention="__stdcall">
<arg name="hInstance">HINSTANCE</arg>
<arg name="lpTemplate">LPCDLGTEMPLATEA</arg>
<arg name="hWndParent">HWND</arg>
<arg name="lpDialogFunc">DLGPROC</arg>
<arg name="dwInitParam">LPARAM</arg>
</function>
<function name="CreateDialogIndirectParamW" ret="HWND" convention="__stdcall">
<arg name="hInstance">HINSTANCE</arg>
<arg name="lpTemplate">LPCDLGTEMPLATEW</arg>
<arg name="hWndParent">HWND</arg>
<arg name="lpDialogFunc">DLGPROC</arg>
<arg name="dwInitParam">LPARAM</arg>
</function>
<function name="DialogBoxParamA" ret="INT_PTR" convention="__stdcall">
<arg name="hInstance">HINSTANCE</arg>
<arg name="lpTemplateName">LPCSTR</arg>
<arg name="hWndParent">HWND</arg>
<arg name="lpDialogFunc">DLGPROC</arg>
<arg name="dwInitParam">LPARAM</arg>
</function>
<function name="DialogBoxParamW" ret="INT_PTR" convention="__stdcall">
<arg name="hInstance">HINSTANCE</arg>
<arg name="lpTemplateName">LPCWSTR</arg>
<arg name="hWndParent">HWND</arg>
<arg name="lpDialogFunc">DLGPROC</arg>
<arg name="dwInitParam">LPARAM</arg>
</function>
<function name="DialogBoxIndirectParamA" ret="INT_PTR" convention="__stdcall">
<arg name="hInstance">HINSTANCE</arg>
<arg name="hDialogTemplate">LPCDLGTEMPLATEA</arg>
<arg name="hWndParent">HWND</arg>
<arg name="lpDialogFunc">DLGPROC</arg>
<arg name="dwInitParam">LPARAM</arg>
</function>
<function name="DialogBoxIndirectParamW" ret="INT_PTR" convention="__stdcall">
<arg name="hInstance">HINSTANCE</arg>
<arg name="hDialogTemplate">LPCDLGTEMPLATEW</arg>
<arg name="hWndParent">HWND</arg>
<arg name="lpDialogFunc">DLGPROC</arg>
<arg name="dwInitParam">LPARAM</arg>
</function>
<function name="EndDialog" ret="BOOL" convention="__stdcall">
<arg name="hDlg">HWND</arg>
<arg name="nResult">INT_PTR</arg>
</function>

<function name="GetDlgItem" ret="HWND" convention="__stdcall">
<arg name="hDlg">HWND</arg>
<arg name="nIDDlgItem">int</arg>
</function>

<function name="SetDlgItemInt" ret="BOOL" convention="__stdcall">
<arg name="hDlg">HWND</arg>
<arg name="nIDDlgItem">int</arg>
<arg name="uValue">UINT</arg>
<arg name="bSigned">BOOL</arg>
</function>

<function name="GetDlgItemInt" ret="UINT" convention="__stdcall">
<arg name="hDlg">HWND</arg>
<arg name="nIDDlgItem">int</arg>

     BOOL *lpTranslated,
     BOOL bSigned);

<function name="SetDlgItemTextA" ret="BOOL" convention="__stdcall">
<arg name="hDlg">HWND</arg>
<arg name="nIDDlgItem">int</arg>
<arg name="lpString">LPCSTR</arg>
</function>
<function name="SetDlgItemTextW" ret="BOOL" convention="__stdcall">
<arg name="hDlg">HWND</arg>
<arg name="nIDDlgItem">int</arg>
<arg name="lpString">LPCWSTR</arg>
</function>
<function name="GetDlgItemTextA" ret="UINT" convention="__stdcall">
<arg name="hDlg">HWND</arg>
<arg name="nIDDlgItem">int</arg>
<arg name="lpString">LPSTR</arg>
<arg name="cchMax">int</arg>
</function>
<function name="GetDlgItemTextW" ret="UINT" convention="__stdcall">
<arg name="hDlg">HWND</arg>
<arg name="nIDDlgItem">int</arg>
<arg name="lpString">LPWSTR</arg>
<arg name="cchMax">int</arg>
</function>
<function name="CheckDlgButton" ret="BOOL" convention="__stdcall">
<arg name="hDlg">HWND</arg>
<arg name="nIDButton">int</arg>
<arg name="uCheck">UINT</arg>
</function>

<function name="CheckRadioButton" ret="BOOL" convention="__stdcall">
<arg name="hDlg">HWND</arg>
<arg name="nIDFirstButton">int</arg>
<arg name="nIDLastButton">int</arg>
<arg name="nIDCheckButton">int</arg>
</function>

<function name="IsDlgButtonChecked" ret="UINT" convention="__stdcall">
<arg name="hDlg">HWND</arg>
<arg name="nIDButton">int</arg>
</function>

<function name="SendDlgItemMessageA" ret="LRESULT" convention="__stdcall">
<arg name="hDlg">HWND</arg>
<arg name="nIDDlgItem">int</arg>
<arg name="Msg">UINT</arg>
<arg name="wParam">WPARAM</arg>
<arg name="lParam">LPARAM</arg>
</function>
<function name="SendDlgItemMessageW" ret="LRESULT" convention="__stdcall">
<arg name="hDlg">HWND</arg>
<arg name="nIDDlgItem">int</arg>
<arg name="Msg">UINT</arg>
<arg name="wParam">WPARAM</arg>
<arg name="lParam">LPARAM</arg>
</function>
<function name="GetNextDlgGroupItem" ret="HWND" convention="__stdcall">
<arg name="hDlg">HWND</arg>
<arg name="hCtl">HWND</arg>
<arg name="bPrevious">BOOL</arg>
</function>

<function name="GetNextDlgTabItem" ret="HWND" convention="__stdcall">
<arg name="hDlg">HWND</arg>
<arg name="hCtl">HWND</arg>
<arg name="bPrevious">BOOL</arg>
</function>

<function name="GetDlgCtrlID" ret="int" convention="__stdcall">
<arg name="hWnd">HWND</arg>
</function>

<function name="GetDialogBaseUnits" ret="long" convention="__stdcall">
void);

<function name="DefDlgProcA" ret="LRESULT" convention="__stdcall">
<arg name="hDlg">HWND</arg>
<arg name="Msg">UINT</arg>
<arg name="wParam">WPARAM</arg>
<arg name="lParam">LPARAM</arg>
</function>
<function name="DefDlgProcW" ret="LRESULT" convention="__stdcall">
<arg name="hDlg">HWND</arg>
<arg name="Msg">UINT</arg>
<arg name="wParam">WPARAM</arg>
<arg name="lParam">LPARAM</arg>
</function>

<function name="CallMsgFilterA" ret="BOOL" convention="__stdcall">
<arg name="lpMsg">LPMSG</arg>
<arg name="nCode">int</arg>
</function>
<function name="CallMsgFilterW" ret="BOOL" convention="__stdcall">
<arg name="lpMsg">LPMSG</arg>
<arg name="nCode">int</arg>
</function>

<function name="OpenClipboard" ret="BOOL" convention="__stdcall">
<arg name="hWndNewOwner">HWND</arg>
</function>

<function name="CloseClipboard" ret="BOOL" convention="__stdcall">
<arg name="void"> </arg>
</function>

<function name="GetClipboardSequenceNumber" ret="DWORD" convention="__stdcall">
<arg name="void"> </arg>
</function>
<function name="GetClipboardOwner" ret="HWND" convention="__stdcall">
<arg name="void"> </arg>
</function>

<function name="SetClipboardViewer" ret="HWND" convention="__stdcall">
<arg name="hWndNewViewer">HWND</arg>
</function>

<function name="GetClipboardViewer" ret="HWND" convention="__stdcall">
<arg name="void"> </arg>
</function>

<function name="ChangeClipboardChain" ret="BOOL" convention="__stdcall">
<arg name="hWndRemove">HWND</arg>
<arg name="hWndNewNext">HWND</arg>
</function>

<function name="SetClipboardData" ret="HANDLE" convention="__stdcall">
<arg name="uFormat">UINT</arg>
<arg name="hMem">HANDLE</arg>
</function>

<function name="GetClipboardData" ret="HANDLE" convention="__stdcall">
<arg name="uFormat">UINT</arg>
</function>

<function name="RegisterClipboardFormatA" ret="UINT" convention="__stdcall">
<arg name="lpszFormat">LPCSTR</arg>
</function>
<function name="RegisterClipboardFormatW" ret="UINT" convention="__stdcall">
<arg name="lpszFormat">LPCWSTR</arg>
</function>
<function name="CountClipboardFormats" ret="int" convention="__stdcall">
<arg name="void"> </arg>
</function>

<function name="EnumClipboardFormats" ret="UINT" convention="__stdcall">
<arg name="format">UINT</arg>
</function>

<function name="GetClipboardFormatNameA" ret="int" convention="__stdcall">
<arg name="format">UINT</arg>
<arg name="lpszFormatName">LPSTR</arg>
<arg name="cchMaxCount">int</arg>
</function>
<function name="GetClipboardFormatNameW" ret="int" convention="__stdcall">
<arg name="format">UINT</arg>
<arg name="lpszFormatName">LPWSTR</arg>
<arg name="cchMaxCount">int</arg>
</function>
<function name="EmptyClipboard" ret="BOOL" convention="__stdcall">
<arg name="void"> </arg>
</function>

<function name="IsClipboardFormatAvailable" ret="BOOL" convention="__stdcall">
<arg name="format">UINT</arg>
</function>

<function name="GetPriorityClipboardFormat" ret="int" convention="__stdcall">
<arg name="paFormatPriorityList">UINT *</arg>
<arg name="cFormats">int</arg>
</function>

<function name="GetOpenClipboardWindow" ret="HWND" convention="__stdcall">
<arg name="void"> </arg>
</function>
<function name="AddClipboardFormatListener" ret="BOOL" convention="__stdcall">
<arg name="hwnd">HWND</arg>
</function>

<function name="RemoveClipboardFormatListener" ret="BOOL" convention="__stdcall">
<arg name="hwnd">HWND</arg>
</function>

<function name="GetUpdatedClipboardFormats" ret="BOOL" convention="__stdcall">
<arg name="lpuiFormats">PUINT</arg>
<arg name="cFormats">UINT</arg>
<arg name="pcFormatsOut">PUINT</arg>
</function>
<function name="CharToOemA" ret="BOOL" convention="__stdcall">
<arg name="pSrc">LPCSTR</arg>
<arg name="pDst">LPSTR</arg>
</function>
<function name="CharToOemW" ret="BOOL" convention="__stdcall">
<arg name="pSrc">LPCWSTR</arg>
<arg name="pDst">LPSTR</arg>
</function>
<function name="OemToCharA" ret="BOOL" convention="__stdcall">
<arg name="pSrc">LPCSTR</arg>
<arg name="pDst">LPSTR</arg>
</function>
<function name="OemToCharW" ret="BOOL" convention="__stdcall">
<arg name="pSrc">LPCSTR</arg>
<arg name="pDst">LPWSTR</arg>
</function>
<function name="CharToOemBuffA" ret="BOOL" convention="__stdcall">
<arg name="lpszSrc">LPCSTR</arg>
<arg name="lpszDst">LPSTR</arg>
<arg name="cchDstLength">DWORD</arg>
</function>
<function name="CharToOemBuffW" ret="BOOL" convention="__stdcall">
<arg name="lpszSrc">LPCWSTR</arg>
<arg name="lpszDst">LPSTR</arg>
<arg name="cchDstLength">DWORD</arg>
</function>
<function name="OemToCharBuffA" ret="BOOL" convention="__stdcall">
<arg name="lpszSrc">LPCSTR</arg>
<arg name="lpszDst">LPSTR</arg>
<arg name="cchDstLength">DWORD</arg>
</function>
<function name="OemToCharBuffW" ret="BOOL" convention="__stdcall">
<arg name="lpszSrc">LPCSTR</arg>
<arg name="lpszDst">LPWSTR</arg>
<arg name="cchDstLength">DWORD</arg>
</function>
<function name="CharUpperA" ret="LPSTR" convention="__stdcall">
<arg name="lpsz">LPSTR</arg>
</function>
<function name="CharUpperW" ret="LPWSTR" convention="__stdcall">
<arg name="lpsz">LPWSTR</arg>
</function>
<function name="CharUpperBuffA" ret="DWORD" convention="__stdcall">
<arg name="lpsz">LPSTR</arg>
<arg name="cchLength">DWORD</arg>
</function>
<function name="CharUpperBuffW" ret="DWORD" convention="__stdcall">
<arg name="lpsz">LPWSTR</arg>
<arg name="cchLength">DWORD</arg>
</function>
<function name="CharLowerA" ret="LPSTR" convention="__stdcall">
<arg name="lpsz">LPSTR</arg>
</function>
<function name="CharLowerW" ret="LPWSTR" convention="__stdcall">
<arg name="lpsz">LPWSTR</arg>
</function>
<function name="CharLowerBuffA" ret="DWORD" convention="__stdcall">
<arg name="lpsz">LPSTR</arg>
<arg name="cchLength">DWORD</arg>
</function>
<function name="CharLowerBuffW" ret="DWORD" convention="__stdcall">
<arg name="lpsz">LPWSTR</arg>
<arg name="cchLength">DWORD</arg>
</function>
<function name="CharNextA" ret="LPSTR" convention="__stdcall">
<arg name="lpsz">LPCSTR</arg>
</function>
<function name="CharNextW" ret="LPWSTR" convention="__stdcall">
<arg name="lpsz">LPCWSTR</arg>
</function>
<function name="CharPrevA" ret="LPSTR" convention="__stdcall">
<arg name="lpszStart">LPCSTR</arg>
<arg name="lpszCurrent">LPCSTR</arg>
</function>
<function name="CharPrevW" ret="LPWSTR" convention="__stdcall">
<arg name="lpszStart">LPCWSTR</arg>
<arg name="lpszCurrent">LPCWSTR</arg>
</function>
<function name="CharNextExA" ret="LPSTR" convention="__stdcall">
<arg name="CodePage">WORD</arg>
<arg name="lpCurrentChar">LPCSTR</arg>
<arg name="dwFlags">DWORD</arg>
</function>

<function name="CharPrevExA" ret="LPSTR" convention="__stdcall">
<arg name="CodePage">WORD</arg>
<arg name="lpStart">LPCSTR</arg>
<arg name="lpCurrentChar">LPCSTR</arg>
<arg name="dwFlags">DWORD</arg>
</function>
<function name="IsCharAlphaA" ret="BOOL" convention="__stdcall">
<arg name="ch">CHAR</arg>
</function>
<function name="IsCharAlphaW" ret="BOOL" convention="__stdcall">
<arg name="ch">WCHAR</arg>
</function>
<function name="IsCharAlphaNumericA" ret="BOOL" convention="__stdcall">
<arg name="ch">CHAR</arg>
</function>
<function name="IsCharAlphaNumericW" ret="BOOL" convention="__stdcall">
<arg name="ch">WCHAR</arg>
</function>
<function name="IsCharUpperA" ret="BOOL" convention="__stdcall">
<arg name="ch">CHAR</arg>
</function>
<function name="IsCharUpperW" ret="BOOL" convention="__stdcall">
<arg name="ch">WCHAR</arg>
</function>
<function name="IsCharLowerA" ret="BOOL" convention="__stdcall">
<arg name="ch">CHAR</arg>
</function>
<function name="IsCharLowerW" ret="BOOL" convention="__stdcall">
<arg name="ch">WCHAR</arg>
</function>
<function name="SetFocus" ret="HWND" convention="__stdcall">
<arg name="hWnd">HWND</arg>
</function>

<function name="GetActiveWindow" ret="HWND" convention="__stdcall">
<arg name="void"> </arg>
</function>

<function name="GetFocus" ret="HWND" convention="__stdcall">
<arg name="void"> </arg>
</function>

<function name="GetKBCodePage" ret="UINT" convention="__stdcall">
<arg name="void"> </arg>
</function>

<function name="GetKeyState" ret="SHORT" convention="__stdcall">
<arg name="nVirtKey">int</arg>
</function>

<function name="GetAsyncKeyState" ret="SHORT" convention="__stdcall">
<arg name="vKey">int</arg>
</function>

<function name="GetKeyboardState" ret="BOOL" convention="__stdcall">
<arg name="lpKeyState">PBYTE</arg>
</function>

<function name="SetKeyboardState" ret="BOOL" convention="__stdcall">
<arg name="lpKeyState">LPBYTE</arg>
</function>

<function name="GetKeyNameTextA" ret="int" convention="__stdcall">
<arg name="lParam">LONG</arg>
<arg name="lpString">LPSTR</arg>
<arg name="cchSize">int</arg>
</function>
<function name="GetKeyNameTextW" ret="int" convention="__stdcall">
<arg name="lParam">LONG</arg>
<arg name="lpString">LPWSTR</arg>
<arg name="cchSize">int</arg>
</function>
<function name="GetKeyboardType" ret="int" convention="__stdcall">
<arg name="nTypeFlag">int</arg>
</function>

<function name="ToAscii" ret="int" convention="__stdcall">
<arg name="uVirtKey">UINT</arg>
<arg name="uScanCode">UINT</arg>

     const BYTE *lpKeyState,
     LPWORD lpChar,
     UINT uFlags);
<function name="ToAsciiEx" ret="int" convention="__stdcall">
<arg name="uVirtKey">UINT</arg>
<arg name="uScanCode">UINT</arg>

     const BYTE *lpKeyState,
     LPWORD lpChar,
     UINT uFlags,
     HKL dwhkl);
<function name="ToUnicode" ret="int" convention="__stdcall">
<arg name="wVirtKey">UINT</arg>
<arg name="wScanCode">UINT</arg>

     const BYTE *lpKeyState,
     LPWSTR pwszBuff,
     int cchBuff,
     UINT wFlags);

<function name="OemKeyScan" ret="DWORD" convention="__stdcall">
<arg name="wOemChar">WORD</arg>
</function>

<function name="VkKeyScanA" ret="SHORT" convention="__stdcall">
<arg name="ch">CHAR</arg>
</function>
<function name="VkKeyScanW" ret="SHORT" convention="__stdcall">
<arg name="ch">WCHAR</arg>
</function>
<function name="VkKeyScanExA" ret="SHORT" convention="__stdcall">
<arg name="ch">CHAR</arg>
<arg name="dwhkl">HKL</arg>
</function>
<function name="VkKeyScanExW" ret="SHORT" convention="__stdcall">
<arg name="ch">WCHAR</arg>
<arg name="dwhkl">HKL</arg>
</function>
<function name="keybd_event" ret="void" convention="__stdcall">
<arg name="bVk">BYTE</arg>
<arg name="bScan">BYTE</arg>
<arg name="dwFlags">DWORD</arg>
<arg name="dwExtraInfo">ULONG_PTR</arg>
</function>

<function name="mouse_event" ret="void" convention="__stdcall">
<arg name="dwFlags">DWORD</arg>
<arg name="dx">DWORD</arg>
<arg name="dy">DWORD</arg>
<arg name="dwData">DWORD</arg>
<arg name="dwExtraInfo">ULONG_PTR</arg>
</function>
<struct name="tagMOUSEINPUT">
<field name="dx">LONG</field>
<field name="dy">LONG</field>
<field name="mouseData">DWORD</field>
<field name="dwFlags">DWORD</field>
<field name="time">DWORD</field>
<field name="dwExtraInfo">ULONG_PTR</field>
} MOUSEINPUT, *PMOUSEINPUT, * LPMOUSEINPUT;

<struct name="tagKEYBDINPUT">
<field name="wVk">WORD</field>
<field name="wScan">WORD</field>
<field name="dwFlags">DWORD</field>
<field name="time">DWORD</field>
<field name="dwExtraInfo">ULONG_PTR</field>
} KEYBDINPUT, *PKEYBDINPUT, * LPKEYBDINPUT;

<struct name="tagHARDWAREINPUT">
<field name="uMsg">DWORD</field>
<field name="wParamL">WORD</field>
<field name="wParamH">WORD</field>
} HARDWAREINPUT, *PHARDWAREINPUT, * LPHARDWAREINPUT;
<struct name="tagINPUT">
<field name="type">DWORD</field>
    union
    {
        MOUSEINPUT      mi;
        KEYBDINPUT      ki;
        HARDWAREINPUT   hi;
    };
} INPUT, *PINPUT, * LPINPUT;

<function name="SendInput" ret="UINT" convention="__stdcall">
<arg name="cInputs">UINT</arg>
                     
     LPINPUT pInputs,  
     int cbSize);                      
<struct name="tagLASTINPUTINFO">
<field name="cbSize">UINT</field>
<field name="dwTime">DWORD</field>
</struct>
<typedefprev id="LASTINPUTINFO"/>
<typedefptrprev id="PLASTINPUTINFO"/>

<function name="GetLastInputInfo" ret="BOOL" convention="__stdcall">
<arg name="plii">PLASTINPUTINFO</arg>
</function>
<function name="MapVirtualKeyA" ret="UINT" convention="__stdcall">
<arg name="uCode">UINT</arg>
<arg name="uMapType">UINT</arg>
</function>
<function name="MapVirtualKeyW" ret="UINT" convention="__stdcall">
<arg name="uCode">UINT</arg>
<arg name="uMapType">UINT</arg>
</function>
<function name="MapVirtualKeyExA" ret="UINT" convention="__stdcall">
<arg name="uCode">UINT</arg>
<arg name="uMapType">UINT</arg>
<arg name="dwhkl">HKL</arg>
</function>
<function name="MapVirtualKeyExW" ret="UINT" convention="__stdcall">
<arg name="uCode">UINT</arg>
<arg name="uMapType">UINT</arg>
<arg name="dwhkl">HKL</arg>
</function>
<function name="GetInputState" ret="BOOL" convention="__stdcall">
<arg name="void"> </arg>
</function>

<function name="GetQueueStatus" ret="DWORD" convention="__stdcall">
<arg name="flags">UINT</arg>
</function>
<function name="GetCapture" ret="HWND" convention="__stdcall">
<arg name="void"> </arg>
</function>

<function name="SetCapture" ret="HWND" convention="__stdcall">
<arg name="hWnd">HWND</arg>
</function>

<function name="ReleaseCapture" ret="BOOL" convention="__stdcall">
<arg name="void"> </arg>
</function>

<function name="MsgWaitForMultipleObjects" ret="DWORD" convention="__stdcall">
<arg name="nCount">DWORD</arg>

     const HANDLE *pHandles,
     BOOL fWaitAll,
     DWORD dwMilliseconds,
     DWORD dwWakeMask);

<function name="MsgWaitForMultipleObjectsEx" ret="DWORD" convention="__stdcall">
<arg name="nCount">DWORD</arg>

     const HANDLE *pHandles,
     DWORD dwMilliseconds,
     DWORD dwWakeMask,
     DWORD dwFlags);

<function name="SetTimer" ret="UINT_PTR" convention="__stdcall">
<arg name="hWnd">HWND</arg>
<arg name="nIDEvent">UINT_PTR</arg>
<arg name="uElapse">UINT</arg>
<arg name="lpTimerFunc">TIMERPROC</arg>
</function>

<function name="KillTimer" ret="BOOL" convention="__stdcall">
<arg name="hWnd">HWND</arg>
<arg name="uIDEvent">UINT_PTR</arg>
</function>

<function name="IsWindowUnicode" ret="BOOL" convention="__stdcall">
<arg name="hWnd">HWND</arg>
</function>

<function name="EnableWindow" ret="BOOL" convention="__stdcall">
<arg name="hWnd">HWND</arg>
<arg name="bEnable">BOOL</arg>
</function>

<function name="IsWindowEnabled" ret="BOOL" convention="__stdcall">
<arg name="hWnd">HWND</arg>
</function>

<function name="LoadAcceleratorsA" ret="HACCEL" convention="__stdcall">
<arg name="hInstance">HINSTANCE</arg>
<arg name="lpTableName">LPCSTR</arg>
</function>
<function name="LoadAcceleratorsW" ret="HACCEL" convention="__stdcall">
<arg name="hInstance">HINSTANCE</arg>
<arg name="lpTableName">LPCWSTR</arg>
</function>
<function name="CreateAcceleratorTableA" ret="HACCEL" convention="__stdcall">
<arg name="paccel">LPACCEL</arg>
<arg name="cAccel">int</arg>
</function>
<function name="CreateAcceleratorTableW" ret="HACCEL" convention="__stdcall">
<arg name="paccel">LPACCEL</arg>
<arg name="cAccel">int</arg>
</function>
<function name="DestroyAcceleratorTable" ret="BOOL" convention="__stdcall">
<arg name="hAccel">HACCEL</arg>
</function>

<function name="CopyAcceleratorTableA" ret="int" convention="__stdcall">
<arg name="hAccelSrc">HACCEL</arg>
<arg name="lpAccelDst">LPACCEL</arg>
<arg name="cAccelEntries">int</arg>
</function>
<function name="CopyAcceleratorTableW" ret="int" convention="__stdcall">
<arg name="hAccelSrc">HACCEL</arg>
<arg name="lpAccelDst">LPACCEL</arg>
<arg name="cAccelEntries">int</arg>
</function>
<function name="TranslateAcceleratorA" ret="int" convention="__stdcall">
<arg name="hWnd">HWND</arg>
<arg name="hAccTable">HACCEL</arg>
<arg name="lpMsg">LPMSG</arg>
</function>
<function name="TranslateAcceleratorW" ret="int" convention="__stdcall">
<arg name="hWnd">HWND</arg>
<arg name="hAccTable">HACCEL</arg>
<arg name="lpMsg">LPMSG</arg>
</function>

<function name="GetSystemMetrics" ret="int" convention="__stdcall">
<arg name="nIndex">int</arg>
</function>

<function name="LoadMenuA" ret="HMENU" convention="__stdcall">
<arg name="hInstance">HINSTANCE</arg>
<arg name="lpMenuName">LPCSTR</arg>
</function>
<function name="LoadMenuW" ret="HMENU" convention="__stdcall">
<arg name="hInstance">HINSTANCE</arg>
<arg name="lpMenuName">LPCWSTR</arg>
</function>
<function name="LoadMenuIndirectA" ret="HMENU" convention="__stdcall">
     const MENUTEMPLATEA *lpMenuTemplate);
<function name="LoadMenuIndirectW" ret="HMENU" convention="__stdcall">
     const MENUTEMPLATEW *lpMenuTemplate);
<function name="GetMenu" ret="HMENU" convention="__stdcall">
<arg name="hWnd">HWND</arg>
</function>

<function name="SetMenu" ret="BOOL" convention="__stdcall">
<arg name="hWnd">HWND</arg>
<arg name="hMenu">HMENU</arg>
</function>

<function name="ChangeMenuA" ret="BOOL" convention="__stdcall">
<arg name="hMenu">HMENU</arg>
<arg name="cmd">UINT</arg>
<arg name="lpszNewItem">LPCSTR</arg>
<arg name="cmdInsert">UINT</arg>
<arg name="flags">UINT</arg>
</function>
<function name="ChangeMenuW" ret="BOOL" convention="__stdcall">
<arg name="hMenu">HMENU</arg>
<arg name="cmd">UINT</arg>
<arg name="lpszNewItem">LPCWSTR</arg>
<arg name="cmdInsert">UINT</arg>
<arg name="flags">UINT</arg>
</function>
<function name="HiliteMenuItem" ret="BOOL" convention="__stdcall">
<arg name="hWnd">HWND</arg>
<arg name="hMenu">HMENU</arg>
<arg name="uIDHiliteItem">UINT</arg>
<arg name="uHilite">UINT</arg>
</function>

<function name="GetMenuStringA" ret="int" convention="__stdcall">
<arg name="hMenu">HMENU</arg>
<arg name="uIDItem">UINT</arg>
<arg name="lpString">LPSTR</arg>
<arg name="cchMax">int</arg>
<arg name="flags">UINT</arg>
</function>
<function name="GetMenuStringW" ret="int" convention="__stdcall">
<arg name="hMenu">HMENU</arg>
<arg name="uIDItem">UINT</arg>
<arg name="lpString">LPWSTR</arg>
<arg name="cchMax">int</arg>
<arg name="flags">UINT</arg>
</function>
<function name="GetMenuState" ret="UINT" convention="__stdcall">
<arg name="hMenu">HMENU</arg>
<arg name="uId">UINT</arg>
<arg name="uFlags">UINT</arg>
</function>

<function name="DrawMenuBar" ret="BOOL" convention="__stdcall">
<arg name="hWnd">HWND</arg>
</function>
<function name="GetSystemMenu" ret="HMENU" convention="__stdcall">
<arg name="hWnd">HWND</arg>
<arg name="bRevert">BOOL</arg>
</function>
<function name="CreateMenu" ret="HMENU" convention="__stdcall">
<arg name="void"> </arg>
</function>

<function name="CreatePopupMenu" ret="HMENU" convention="__stdcall">
<arg name="void"> </arg>
</function>

<function name="DestroyMenu" ret="BOOL" convention="__stdcall">
<arg name="hMenu">HMENU</arg>
</function>

<function name="CheckMenuItem" ret="DWORD" convention="__stdcall">
<arg name="hMenu">HMENU</arg>
<arg name="uIDCheckItem">UINT</arg>
<arg name="uCheck">UINT</arg>
</function>

<function name="EnableMenuItem" ret="BOOL" convention="__stdcall">
<arg name="hMenu">HMENU</arg>
<arg name="uIDEnableItem">UINT</arg>
<arg name="uEnable">UINT</arg>
</function>

<function name="GetSubMenu" ret="HMENU" convention="__stdcall">
<arg name="hMenu">HMENU</arg>
<arg name="nPos">int</arg>
</function>

<function name="GetMenuItemID" ret="UINT" convention="__stdcall">
<arg name="hMenu">HMENU</arg>
<arg name="nPos">int</arg>
</function>

<function name="GetMenuItemCount" ret="int" convention="__stdcall">
<arg name="hMenu">HMENU</arg>
</function>

<function name="InsertMenuA" ret="BOOL" convention="__stdcall">
<arg name="hMenu">HMENU</arg>
<arg name="uPosition">UINT</arg>
<arg name="uFlags">UINT</arg>
<arg name="uIDNewItem">UINT_PTR</arg>
<arg name="lpNewItem">LPCSTR</arg>
</function>
<function name="InsertMenuW" ret="BOOL" convention="__stdcall">
<arg name="hMenu">HMENU</arg>
<arg name="uPosition">UINT</arg>
<arg name="uFlags">UINT</arg>
<arg name="uIDNewItem">UINT_PTR</arg>
<arg name="lpNewItem">LPCWSTR</arg>
</function>
<function name="AppendMenuA" ret="BOOL" convention="__stdcall">
<arg name="hMenu">HMENU</arg>
<arg name="uFlags">UINT</arg>
<arg name="uIDNewItem">UINT_PTR</arg>
<arg name="lpNewItem">LPCSTR</arg>
</function>
<function name="AppendMenuW" ret="BOOL" convention="__stdcall">
<arg name="hMenu">HMENU</arg>
<arg name="uFlags">UINT</arg>
<arg name="uIDNewItem">UINT_PTR</arg>
<arg name="lpNewItem">LPCWSTR</arg>
</function>
<function name="ModifyMenuA" ret="BOOL" convention="__stdcall">
<arg name="hMnu">HMENU</arg>
<arg name="uPosition">UINT</arg>
<arg name="uFlags">UINT</arg>
<arg name="uIDNewItem">UINT_PTR</arg>
<arg name="lpNewItem">LPCSTR</arg>
</function>
<function name="ModifyMenuW" ret="BOOL" convention="__stdcall">
<arg name="hMnu">HMENU</arg>
<arg name="uPosition">UINT</arg>
<arg name="uFlags">UINT</arg>
<arg name="uIDNewItem">UINT_PTR</arg>
<arg name="lpNewItem">LPCWSTR</arg>
</function>
<function name="RemoveMenu" ret="BOOL" convention="__stdcall">
<arg name="hMenu">HMENU</arg>
<arg name="uPosition">UINT</arg>
<arg name="uFlags">UINT</arg>
</function>

<function name="DeleteMenu" ret="BOOL" convention="__stdcall">
<arg name="hMenu">HMENU</arg>
<arg name="uPosition">UINT</arg>
<arg name="uFlags">UINT</arg>
</function>

<function name="SetMenuItemBitmaps" ret="BOOL" convention="__stdcall">
<arg name="hMenu">HMENU</arg>
<arg name="uPosition">UINT</arg>
<arg name="uFlags">UINT</arg>
<arg name="hBitmapUnchecked">HBITMAP</arg>
<arg name="hBitmapChecked">HBITMAP</arg>
</function>

<function name="GetMenuCheckMarkDimensions" ret="LONG" convention="__stdcall">
<arg name="void"> </arg>
</function>

<function name="TrackPopupMenu" ret="BOOL" convention="__stdcall">
<arg name="hMenu">HMENU</arg>
<arg name="uFlags">UINT</arg>
<arg name="x">int</arg>
<arg name="y">int</arg>
<arg name="nReserved">int</arg>
<arg name="hWnd">HWND</arg>

     const RECT *prcRect);

<struct name="tagTPMPARAMS">
<field name="cbSize">UINT</field>
<field name="rcExclude">RECT</field>
}   TPMPARAMS;
typedef TPMPARAMS  *LPTPMPARAMS;

<function name="TrackPopupMenuEx" ret="BOOL" convention="__stdcall">
<arg name="HMENU"> </arg>
<arg name="UINT"> </arg>
<arg name="int"> </arg>
<arg name="int"> </arg>
<arg name="HWND"> </arg>
<arg name="LPTPMPARAMS"></arg>
</function>

<struct name="tagMENUINFO">
<field name="cbSize">DWORD</field>
<field name="fMask">DWORD</field>
<field name="dwStyle">DWORD</field>
<field name="cyMax">UINT</field>
<field name="hbrBack">HBRUSH</field>
<field name="dwContextHelpID">DWORD</field>
<field name="dwMenuData">ULONG_PTR</field>
</struct>
<typedefprev id="MENUINFO"/>
<typedefptrprev id="LPMENUINFO"/>
typedef MENUINFO const  *LPCMENUINFO;

<function name="GetMenuInfo" ret="BOOL" convention="__stdcall">
<arg name="HMENU"> </arg>
<arg name="LPMENUINFO"></arg>
</function>

<function name="SetMenuInfo" ret="BOOL" convention="__stdcall">
<arg name="HMENU"> </arg>
<arg name="LPCMENUINFO"></arg>
</function>

<function name="EndMenu" ret="BOOL" convention="__stdcall">
<arg name="void"> </arg>
</function>
<struct name="tagMENUGETOBJECTINFO">
<field name="dwFlags">DWORD</field>
<field name="uPos">UINT</field>
<field name="hmenu">HMENU</field>
<field name="riid">PVOID</field>
<field name="pvObj">PVOID</field>
</struct>
<typedefprev id="MENUGETOBJECTINFO"/>
<typedefptrprev id="PMENUGETOBJECTINFO"/>

<struct name="tagMENUITEMINFOA">
<field name="cbSize">UINT</field>
<field name="fMask">UINT</field>
<field name="fType">UINT</field>
<field name="fState">UINT</field>
<field name="wID">UINT</field>
<field name="hSubMenu">HMENU</field>
<field name="hbmpChecked">HBITMAP</field>
<field name="hbmpUnchecked">HBITMAP</field>
<field name="dwItemData">ULONG_PTR</field>
<field name="dwTypeData">LPSTR</field>
<field name="cch">UINT</field>
<field name="hbmpItem">HBITMAP</field>      

}   MENUITEMINFOA,  *LPMENUITEMINFOA;
<struct name="tagMENUITEMINFOW">
<field name="cbSize">UINT</field>
<field name="fMask">UINT</field>
<field name="fType">UINT</field>
<field name="fState">UINT</field>
<field name="wID">UINT</field>
<field name="hSubMenu">HMENU</field>
<field name="hbmpChecked">HBITMAP</field>
<field name="hbmpUnchecked">HBITMAP</field>
<field name="dwItemData">ULONG_PTR</field>
<field name="dwTypeData">LPWSTR</field>
<field name="cch">UINT</field>
<field name="hbmpItem">HBITMAP</field>      

}   MENUITEMINFOW,  *LPMENUITEMINFOW;

typedef MENUITEMINFOA MENUITEMINFO;
typedef LPMENUITEMINFOA LPMENUITEMINFO;

typedef MENUITEMINFOA const  *LPCMENUITEMINFOA;
typedef MENUITEMINFOW const  *LPCMENUITEMINFOW;
typedef LPCMENUITEMINFOA LPCMENUITEMINFO;

<function name="InsertMenuItemA" ret="BOOL" convention="__stdcall">
<arg name="hmenu">HMENU</arg>
<arg name="item">UINT</arg>
<arg name="fByPosition">BOOL</arg>
<arg name="lpmi">LPCMENUITEMINFOA</arg>
</function>
<function name="InsertMenuItemW" ret="BOOL" convention="__stdcall">
<arg name="hmenu">HMENU</arg>
<arg name="item">UINT</arg>
<arg name="fByPosition">BOOL</arg>
<arg name="lpmi">LPCMENUITEMINFOW</arg>
</function>
<function name="GetMenuItemInfoA" ret="BOOL" convention="__stdcall">
<arg name="hmenu">HMENU</arg>
<arg name="item">UINT</arg>
<arg name="fByPosition">BOOL</arg>
<arg name="lpmii">LPMENUITEMINFOA</arg>
</function>
<function name="GetMenuItemInfoW" ret="BOOL" convention="__stdcall">
<arg name="hmenu">HMENU</arg>
<arg name="item">UINT</arg>
<arg name="fByPosition">BOOL</arg>
<arg name="lpmii">LPMENUITEMINFOW</arg>
</function>
<function name="SetMenuItemInfoA" ret="BOOL" convention="__stdcall">
<arg name="hmenu">HMENU</arg>
<arg name="item">UINT</arg>
<arg name="fByPositon">BOOL</arg>
<arg name="lpmii">LPCMENUITEMINFOA</arg>
</function>
<function name="SetMenuItemInfoW" ret="BOOL" convention="__stdcall">
<arg name="hmenu">HMENU</arg>
<arg name="item">UINT</arg>
<arg name="fByPositon">BOOL</arg>
<arg name="lpmii">LPCMENUITEMINFOW</arg>
</function>
<function name="GetMenuDefaultItem" ret="UINT" convention="__stdcall">
<arg name="hMenu">HMENU</arg>
<arg name="fByPos">UINT</arg>
<arg name="gmdiFlags">UINT</arg>
</function>

<function name="SetMenuDefaultItem" ret="BOOL" convention="__stdcall">
<arg name="hMenu">HMENU</arg>
<arg name="uItem">UINT</arg>
<arg name="fByPos">UINT</arg>
</function>

<function name="GetMenuItemRect" ret="BOOL" convention="__stdcall">
<arg name="hWnd">HWND</arg>
<arg name="hMenu">HMENU</arg>
<arg name="uItem">UINT</arg>
<arg name="lprcItem">LPRECT</arg>
</function>

<function name="MenuItemFromPoint" ret="int" convention="__stdcall">
<arg name="hWnd">HWND</arg>
<arg name="hMenu">HMENU</arg>
<arg name="ptScreen">POINT</arg>
</function>

<struct name="tagDROPSTRUCT">
<field name="hwndSource">HWND</field>
<field name="hwndSink">HWND</field>
<field name="wFmt">DWORD</field>
<field name="dwData">ULONG_PTR</field>
<field name="ptDrop">POINT</field>
<field name="dwControlData">DWORD</field>
} DROPSTRUCT, *PDROPSTRUCT, *LPDROPSTRUCT;

<function name="DragObject" ret="DWORD" convention="__stdcall">
<arg name="hwndParent">HWND</arg>
<arg name="hwndFrom">HWND</arg>
<arg name="fmt">UINT</arg>
<arg name="data">ULONG_PTR</arg>
<arg name="hcur">HCURSOR</arg>
</function>

<function name="DragDetect" ret="BOOL" convention="__stdcall">
<arg name="hwnd">HWND</arg>
<arg name="pt">POINT</arg>
</function>
<function name="DrawIcon" ret="BOOL" convention="__stdcall">
<arg name="hDC">HDC</arg>
<arg name="X">int</arg>
<arg name="Y">int</arg>
<arg name="hIcon">HICON</arg>
</function>

<struct name="tagDRAWTEXTPARAMS">
<field name="cbSize">UINT</field>
<field name="iTabLength">int</field>
<field name="iLeftMargin">int</field>
<field name="iRightMargin">int</field>
<field name="uiLengthDrawn">UINT</field>
</struct>
<typedefprev id="DRAWTEXTPARAMS"/>
<typedefptrprev id="LPDRAWTEXTPARAMS"/>

<function name="DrawTextA" ret="int" convention="__stdcall">
<arg name="hdc">HDC</arg>
<arg name="lpchText">LPCSTR</arg>
<arg name="cchText">int</arg>
<arg name="lprc">LPRECT</arg>
<arg name="format">UINT</arg>
</function>
<function name="DrawTextW" ret="int" convention="__stdcall">
<arg name="hdc">HDC</arg>
<arg name="lpchText">LPCWSTR</arg>
<arg name="cchText">int</arg>
<arg name="lprc">LPRECT</arg>
<arg name="format">UINT</arg>
</function>

<function name="DrawTextExA" ret="int" convention="__stdcall">
<arg name="hdc">HDC</arg>
<arg name="lpchText">LPSTR</arg>
<arg name="cchText">int</arg>
<arg name="lprc">LPRECT</arg>
<arg name="format">UINT</arg>
<arg name="lpdtp">LPDRAWTEXTPARAMS</arg>
</function>
<function name="DrawTextExW" ret="int" convention="__stdcall">
<arg name="hdc">HDC</arg>
<arg name="lpchText">LPWSTR</arg>
<arg name="cchText">int</arg>
<arg name="lprc">LPRECT</arg>
<arg name="format">UINT</arg>
<arg name="lpdtp">LPDRAWTEXTPARAMS</arg>
</function>

<function name="GrayStringA" ret="BOOL" convention="__stdcall">
<arg name="hDC">HDC</arg>
<arg name="hBrush">HBRUSH</arg>
<arg name="lpOutputFunc">GRAYSTRINGPROC</arg>
<arg name="lpData">LPARAM</arg>
<arg name="nCount">int</arg>
<arg name="X">int</arg>
<arg name="Y">int</arg>
<arg name="nWidth">int</arg>
<arg name="nHeight">int</arg>
</function>
<function name="GrayStringW" ret="BOOL" convention="__stdcall">
<arg name="hDC">HDC</arg>
<arg name="hBrush">HBRUSH</arg>
<arg name="lpOutputFunc">GRAYSTRINGPROC</arg>
<arg name="lpData">LPARAM</arg>
<arg name="nCount">int</arg>
<arg name="X">int</arg>
<arg name="Y">int</arg>
<arg name="nWidth">int</arg>
<arg name="nHeight">int</arg>
</function>

<function name="DrawStateA" ret="BOOL" convention="__stdcall">
<arg name="hdc">HDC</arg>
<arg name="hbrFore">HBRUSH</arg>
<arg name="qfnCallBack">DRAWSTATEPROC</arg>
<arg name="lData">LPARAM</arg>
<arg name="wData">WPARAM</arg>
<arg name="x">int</arg>
<arg name="y">int</arg>
<arg name="cx">int</arg>
<arg name="cy">int</arg>
<arg name="uFlags">UINT</arg>
</function>
<function name="DrawStateW" ret="BOOL" convention="__stdcall">
<arg name="hdc">HDC</arg>
<arg name="hbrFore">HBRUSH</arg>
<arg name="qfnCallBack">DRAWSTATEPROC</arg>
<arg name="lData">LPARAM</arg>
<arg name="wData">WPARAM</arg>
<arg name="x">int</arg>
<arg name="y">int</arg>
<arg name="cx">int</arg>
<arg name="cy">int</arg>
<arg name="uFlags">UINT</arg>
</function>

<function name="TabbedTextOutA" ret="LONG" convention="__stdcall">
<arg name="hdc">HDC</arg>
<arg name="x">int</arg>
<arg name="y">int</arg>
<arg name="lpString">LPCSTR</arg>
<arg name="chCount">int</arg>
<arg name="nTabPositions">int</arg>

     const INT *lpnTabStopPositions,
     int nTabOrigin);
<function name="TabbedTextOutW" ret="LONG" convention="__stdcall">
<arg name="hdc">HDC</arg>
<arg name="x">int</arg>
<arg name="y">int</arg>
<arg name="lpString">LPCWSTR</arg>
<arg name="chCount">int</arg>
<arg name="nTabPositions">int</arg>

     const INT *lpnTabStopPositions,
     int nTabOrigin);
<function name="GetTabbedTextExtentA" ret="DWORD" convention="__stdcall">
<arg name="hdc">HDC</arg>
<arg name="lpString">LPCSTR</arg>
<arg name="chCount">int</arg>
<arg name="nTabPositions">int</arg>

     const INT *lpnTabStopPositions);
<function name="GetTabbedTextExtentW" ret="DWORD" convention="__stdcall">
<arg name="hdc">HDC</arg>
<arg name="lpString">LPCWSTR</arg>
<arg name="chCount">int</arg>
<arg name="nTabPositions">int</arg>

     const INT *lpnTabStopPositions);
<function name="UpdateWindow" ret="BOOL" convention="__stdcall">
<arg name="hWnd">HWND</arg>
</function>

<function name="SetActiveWindow" ret="HWND" convention="__stdcall">
<arg name="hWnd">HWND</arg>
</function>

<function name="GetForegroundWindow" ret="HWND" convention="__stdcall">
<arg name="void"> </arg>
</function>
<function name="PaintDesktop" ret="BOOL" convention="__stdcall">
<arg name="hdc">HDC</arg>
</function>

<function name="SwitchToThisWindow" ret="void" convention="__stdcall">
<arg name="hwnd">HWND</arg>
<arg name="fUnknown">BOOL</arg>
</function>

<function name="SetForegroundWindow" ret="BOOL" convention="__stdcall">
<arg name="hWnd">HWND</arg>
</function>
<function name="AllowSetForegroundWindow" ret="BOOL" convention="__stdcall">
<arg name="dwProcessId">DWORD</arg>
</function>
<function name="LockSetForegroundWindow" ret="BOOL" convention="__stdcall">
<arg name="uLockCode">UINT</arg>
</function>
<function name="WindowFromDC" ret="HWND" convention="__stdcall">
<arg name="hDC">HDC</arg>
</function>

<function name="GetDC" ret="HDC" convention="__stdcall">
<arg name="hWnd">HWND</arg>
</function>

<function name="GetDCEx" ret="HDC" convention="__stdcall">
<arg name="hWnd">HWND</arg>
<arg name="hrgnClip">HRGN</arg>
<arg name="flags">DWORD</arg>
</function>
<function name="GetWindowDC" ret="HDC" convention="__stdcall">
<arg name="hWnd">HWND</arg>
</function>

<function name="ReleaseDC" ret="int" convention="__stdcall">
<arg name="hWnd">HWND</arg>
<arg name="hDC">HDC</arg>
</function>

<function name="BeginPaint" ret="HDC" convention="__stdcall">
<arg name="hWnd">HWND</arg>
<arg name="lpPaint">LPPAINTSTRUCT</arg>
</function>

<function name="EndPaint" ret="BOOL" convention="__stdcall">
<arg name="hWnd">HWND</arg>

     const PAINTSTRUCT *lpPaint);

<function name="GetUpdateRect" ret="BOOL" convention="__stdcall">
<arg name="hWnd">HWND</arg>
<arg name="lpRect">LPRECT</arg>
<arg name="bErase">BOOL</arg>
</function>

<function name="GetUpdateRgn" ret="int" convention="__stdcall">
<arg name="hWnd">HWND</arg>
<arg name="hRgn">HRGN</arg>
<arg name="bErase">BOOL</arg>
</function>

<function name="SetWindowRgn" ret="int" convention="__stdcall">
<arg name="hWnd">HWND</arg>
<arg name="hRgn">HRGN</arg>
<arg name="bRedraw">BOOL</arg>
</function>
<function name="GetWindowRgn" ret="int" convention="__stdcall">
<arg name="hWnd">HWND</arg>
<arg name="hRgn">HRGN</arg>
</function>
<function name="GetWindowRgnBox" ret="int" convention="__stdcall">
<arg name="hWnd">HWND</arg>
<arg name="lprc">LPRECT</arg>
</function>
<function name="ExcludeUpdateRgn" ret="int" convention="__stdcall">
<arg name="hDC">HDC</arg>
<arg name="hWnd">HWND</arg>
</function>

<function name="InvalidateRect" ret="BOOL" convention="__stdcall">
<arg name="hWnd">HWND</arg>

     const RECT *lpRect,
     BOOL bErase);

<function name="ValidateRect" ret="BOOL" convention="__stdcall">
<arg name="hWnd">HWND</arg>

     const RECT *lpRect);

<function name="InvalidateRgn" ret="BOOL" convention="__stdcall">
<arg name="hWnd">HWND</arg>
<arg name="hRgn">HRGN</arg>
<arg name="bErase">BOOL</arg>
</function>

<function name="ValidateRgn" ret="BOOL" convention="__stdcall">
<arg name="hWnd">HWND</arg>
<arg name="hRgn">HRGN</arg>
</function>
<function name="RedrawWindow" ret="BOOL" convention="__stdcall">
<arg name="hWnd">HWND</arg>

     const RECT *lprcUpdate,
     HRGN hrgnUpdate,
     UINT flags);
<function name="LockWindowUpdate" ret="BOOL" convention="__stdcall">
<arg name="hWndLock">HWND</arg>
</function>

<function name="ScrollWindow" ret="BOOL" convention="__stdcall">
<arg name="hWnd">HWND</arg>
<arg name="XAmount">int</arg>
<arg name="YAmount">int</arg>

     const RECT *lpRect,
     const RECT *lpClipRect);

<function name="ScrollDC" ret="BOOL" convention="__stdcall">
<arg name="hDC">HDC</arg>
<arg name="dx">int</arg>
<arg name="dy">int</arg>

     const RECT *lprcScroll,
     const RECT *lprcClip,
     HRGN hrgnUpdate,
     LPRECT lprcUpdate);

<function name="ScrollWindowEx" ret="int" convention="__stdcall">
<arg name="hWnd">HWND</arg>
<arg name="dx">int</arg>
<arg name="dy">int</arg>

     const RECT *prcScroll,
     const RECT *prcClip,
     HRGN hrgnUpdate,
     LPRECT prcUpdate,
     UINT flags);
<function name="SetScrollPos" ret="int" convention="__stdcall">
<arg name="hWnd">HWND</arg>
<arg name="nBar">int</arg>
<arg name="nPos">int</arg>
<arg name="bRedraw">BOOL</arg>
</function>

<function name="GetScrollPos" ret="int" convention="__stdcall">
<arg name="hWnd">HWND</arg>
<arg name="nBar">int</arg>
</function>

<function name="SetScrollRange" ret="BOOL" convention="__stdcall">
<arg name="hWnd">HWND</arg>
<arg name="nBar">int</arg>
<arg name="nMinPos">int</arg>
<arg name="nMaxPos">int</arg>
<arg name="bRedraw">BOOL</arg>
</function>

<function name="GetScrollRange" ret="BOOL" convention="__stdcall">
<arg name="hWnd">HWND</arg>
<arg name="nBar">int</arg>
<arg name="lpMinPos">LPINT</arg>
<arg name="lpMaxPos">LPINT</arg>
</function>

<function name="ShowScrollBar" ret="BOOL" convention="__stdcall">
<arg name="hWnd">HWND</arg>
<arg name="wBar">int</arg>
<arg name="bShow">BOOL</arg>
</function>

<function name="EnableScrollBar" ret="BOOL" convention="__stdcall">
<arg name="hWnd">HWND</arg>
<arg name="wSBflags">UINT</arg>
<arg name="wArrows">UINT</arg>
</function>
<function name="SetPropA" ret="BOOL" convention="__stdcall">
<arg name="hWnd">HWND</arg>
<arg name="lpString">LPCSTR</arg>
<arg name="hData">HANDLE</arg>
</function>
<function name="SetPropW" ret="BOOL" convention="__stdcall">
<arg name="hWnd">HWND</arg>
<arg name="lpString">LPCWSTR</arg>
<arg name="hData">HANDLE</arg>
</function>
<function name="GetPropA" ret="HANDLE" convention="__stdcall">
<arg name="hWnd">HWND</arg>
<arg name="lpString">LPCSTR</arg>
</function>
<function name="GetPropW" ret="HANDLE" convention="__stdcall">
<arg name="hWnd">HWND</arg>
<arg name="lpString">LPCWSTR</arg>
</function>
<function name="RemovePropA" ret="HANDLE" convention="__stdcall">
<arg name="hWnd">HWND</arg>
<arg name="lpString">LPCSTR</arg>
</function>
<function name="RemovePropW" ret="HANDLE" convention="__stdcall">
<arg name="hWnd">HWND</arg>
<arg name="lpString">LPCWSTR</arg>
</function>
<function name="EnumPropsExA" ret="int" convention="__stdcall">
<arg name="hWnd">HWND</arg>
<arg name="lpEnumFunc">PROPENUMPROCEXA</arg>
<arg name="lParam">LPARAM</arg>
</function>
<function name="EnumPropsExW" ret="int" convention="__stdcall">
<arg name="hWnd">HWND</arg>
<arg name="lpEnumFunc">PROPENUMPROCEXW</arg>
<arg name="lParam">LPARAM</arg>
</function>
<function name="EnumPropsA" ret="int" convention="__stdcall">
<arg name="hWnd">HWND</arg>
<arg name="lpEnumFunc">PROPENUMPROCA</arg>
</function>
<function name="EnumPropsW" ret="int" convention="__stdcall">
<arg name="hWnd">HWND</arg>
<arg name="lpEnumFunc">PROPENUMPROCW</arg>
</function>
<function name="SetWindowTextA" ret="BOOL" convention="__stdcall">
<arg name="hWnd">HWND</arg>
<arg name="lpString">LPCSTR</arg>
</function>
<function name="SetWindowTextW" ret="BOOL" convention="__stdcall">
<arg name="hWnd">HWND</arg>
<arg name="lpString">LPCWSTR</arg>
</function>
<function name="GetWindowTextA" ret="int" convention="__stdcall">
<arg name="hWnd">HWND</arg>
<arg name="lpString">LPSTR</arg>
<arg name="nMaxCount">int</arg>
</function>
<function name="GetWindowTextW" ret="int" convention="__stdcall">
<arg name="hWnd">HWND</arg>
<arg name="lpString">LPWSTR</arg>
<arg name="nMaxCount">int</arg>
</function>
<function name="GetWindowTextLengthA" ret="int" convention="__stdcall">
<arg name="hWnd">HWND</arg>
</function>
<function name="GetWindowTextLengthW" ret="int" convention="__stdcall">
<arg name="hWnd">HWND</arg>
</function>
<function name="GetClientRect" ret="BOOL" convention="__stdcall">
<arg name="hWnd">HWND</arg>
<arg name="lpRect">LPRECT</arg>
</function>

<function name="GetWindowRect" ret="BOOL" convention="__stdcall">
<arg name="hWnd">HWND</arg>
<arg name="lpRect">LPRECT</arg>
</function>

<function name="AdjustWindowRect" ret="BOOL" convention="__stdcall">
<arg name="lpRect">LPRECT</arg>
<arg name="dwStyle">DWORD</arg>
<arg name="bMenu">BOOL</arg>
</function>

<function name="AdjustWindowRectEx" ret="BOOL" convention="__stdcall">
<arg name="lpRect">LPRECT</arg>
<arg name="dwStyle">DWORD</arg>
<arg name="bMenu">BOOL</arg>
<arg name="dwExStyle">DWORD</arg>
</function>
typedef struct tagHELPINFO      
{
    UINT    cbSize;             
    int     iContextType;       
    int     iCtrlId;            
    HANDLE  hItemHandle;        
    DWORD_PTR dwContextId;      
    POINT   MousePos;           
}  HELPINFO,  *LPHELPINFO;

<function name="SetWindowContextHelpId" ret="BOOL" convention="__stdcall">
<arg name="HWND"> </arg>
<arg name="DWORD"></arg>
</function>

<function name="GetWindowContextHelpId" ret="DWORD" convention="__stdcall">
<arg name="HWND"> </arg>
</function>

<function name="SetMenuContextHelpId" ret="BOOL" convention="__stdcall">
<arg name="HMENU"> </arg>
<arg name="DWORD"></arg>
</function>

<function name="GetMenuContextHelpId" ret="DWORD" convention="__stdcall">
<arg name="HMENU"> </arg>
</function>

<function name="MessageBoxA" ret="int" convention="__stdcall">
<arg name="hWnd">HWND</arg>
<arg name="lpText">LPCSTR</arg>
<arg name="lpCaption">LPCSTR</arg>
<arg name="uType">UINT</arg>
</function>
<function name="MessageBoxW" ret="int" convention="__stdcall">
<arg name="hWnd">HWND</arg>
<arg name="lpText">LPCWSTR</arg>
<arg name="lpCaption">LPCWSTR</arg>
<arg name="uType">UINT</arg>
</function>

<function name="MessageBoxExA" ret="int" convention="__stdcall">
<arg name="hWnd">HWND</arg>
<arg name="lpText">LPCSTR</arg>
<arg name="lpCaption">LPCSTR</arg>
<arg name="uType">UINT</arg>
<arg name="wLanguageId">WORD</arg>
</function>
<function name="MessageBoxExW" ret="int" convention="__stdcall">
<arg name="hWnd">HWND</arg>
<arg name="lpText">LPCWSTR</arg>
<arg name="lpCaption">LPCWSTR</arg>
<arg name="uType">UINT</arg>
<arg name="wLanguageId">WORD</arg>
</function>
typedef<fnptr name="MSGBOXCALLBACK" ret="void" convention="__stdcall">
LPHELPINFO lpHelpInfo);

<struct name="tagMSGBOXPARAMSA">
<field name="cbSize">UINT</field>
<field name="hwndOwner">HWND</field>
<field name="hInstance">HINSTANCE</field>
<field name="lpszText">LPCSTR</field>
<field name="lpszCaption">LPCSTR</field>
<field name="dwStyle">DWORD</field>
<field name="lpszIcon">LPCSTR</field>
<field name="dwContextHelpId">DWORD_PTR</field>
<field name="lpfnMsgBoxCallback">MSGBOXCALLBACK</field>
<field name="dwLanguageId">DWORD</field>
} MSGBOXPARAMSA, *PMSGBOXPARAMSA, *LPMSGBOXPARAMSA;
<struct name="tagMSGBOXPARAMSW">
<field name="cbSize">UINT</field>
<field name="hwndOwner">HWND</field>
<field name="hInstance">HINSTANCE</field>
<field name="lpszText">LPCWSTR</field>
<field name="lpszCaption">LPCWSTR</field>
<field name="dwStyle">DWORD</field>
<field name="lpszIcon">LPCWSTR</field>
<field name="dwContextHelpId">DWORD_PTR</field>
<field name="lpfnMsgBoxCallback">MSGBOXCALLBACK</field>
<field name="dwLanguageId">DWORD</field>
} MSGBOXPARAMSW, *PMSGBOXPARAMSW, *LPMSGBOXPARAMSW;
typedef MSGBOXPARAMSA MSGBOXPARAMS;
typedef PMSGBOXPARAMSA PMSGBOXPARAMS;
typedef LPMSGBOXPARAMSA LPMSGBOXPARAMS;
<function name="MessageBoxIndirectA" ret="int" convention="__stdcall">
<arg name="lpmbp">const MSGBOXPARAMSA *</arg>
</function>
<function name="MessageBoxIndirectW" ret="int" convention="__stdcall">
<arg name="lpmbp">const MSGBOXPARAMSW *</arg>
</function>
<function name="MessageBeep" ret="BOOL" convention="__stdcall">
<arg name="uType">UINT</arg>
</function>
<function name="ShowCursor" ret="int" convention="__stdcall">
<arg name="bShow">BOOL</arg>
</function>

<function name="SetCursorPos" ret="BOOL" convention="__stdcall">
<arg name="X">int</arg>
<arg name="Y">int</arg>
</function>
<function name="SetPhysicalCursorPos" ret="BOOL" convention="__stdcall">
<arg name="X">int</arg>
<arg name="Y">int</arg>
</function>

<function name="SetCursor" ret="HCURSOR" convention="__stdcall">
<arg name="hCursor">HCURSOR</arg>
</function>

<function name="GetCursorPos" ret="BOOL" convention="__stdcall">
<arg name="lpPoint">LPPOINT</arg>
</function>

<function name="GetPhysicalCursorPos" ret="BOOL" convention="__stdcall">
<arg name="lpPoint">LPPOINT</arg>
</function>

<function name="ClipCursor" ret="BOOL" convention="__stdcall">
     const RECT *lpRect);

<function name="GetClipCursor" ret="BOOL" convention="__stdcall">
<arg name="lpRect">LPRECT</arg>
</function>

<function name="GetCursor" ret="HCURSOR" convention="__stdcall">
<arg name="void"> </arg>
</function>

<function name="CreateCaret" ret="BOOL" convention="__stdcall">
<arg name="hWnd">HWND</arg>
<arg name="hBitmap">HBITMAP</arg>
<arg name="nWidth">int</arg>
<arg name="nHeight">int</arg>
</function>

<function name="GetCaretBlinkTime" ret="UINT" convention="__stdcall">
<arg name="void"> </arg>
</function>

<function name="SetCaretBlinkTime" ret="BOOL" convention="__stdcall">
<arg name="uMSeconds">UINT</arg>
</function>

<function name="DestroyCaret" ret="BOOL" convention="__stdcall">
<arg name="void"> </arg>
</function>

<function name="HideCaret" ret="BOOL" convention="__stdcall">
<arg name="hWnd">HWND</arg>
</function>

<function name="ShowCaret" ret="BOOL" convention="__stdcall">
<arg name="hWnd">HWND</arg>
</function>

<function name="SetCaretPos" ret="BOOL" convention="__stdcall">
<arg name="X">int</arg>
<arg name="Y">int</arg>
</function>

<function name="GetCaretPos" ret="BOOL" convention="__stdcall">
<arg name="lpPoint">LPPOINT</arg>
</function>

<function name="ClientToScreen" ret="BOOL" convention="__stdcall">
<arg name="hWnd">HWND</arg>
<arg name="lpPoint">LPPOINT</arg>
</function>

<function name="ScreenToClient" ret="BOOL" convention="__stdcall">
<arg name="hWnd">HWND</arg>
<arg name="lpPoint">LPPOINT</arg>
</function>
<function name="LogicalToPhysicalPoint" ret="BOOL" convention="__stdcall">
<arg name="hWnd">HWND</arg>
<arg name="lpPoint">LPPOINT</arg>
</function>

<function name="PhysicalToLogicalPoint" ret="BOOL" convention="__stdcall">
<arg name="hWnd">HWND</arg>
<arg name="lpPoint">LPPOINT</arg>
</function>
<function name="MapWindowPoints" ret="int" convention="__stdcall">
<arg name="hWndFrom">HWND</arg>
<arg name="hWndTo">HWND</arg>
<arg name="lpPoints">LPPOINT</arg>
<arg name="cPoints">UINT</arg>
</function>

<function name="WindowFromPoint" ret="HWND" convention="__stdcall">
<arg name="Point">POINT</arg>
</function>
<function name="WindowFromPhysicalPoint" ret="HWND" convention="__stdcall">
<arg name="Point">POINT</arg>
</function>
<function name="ChildWindowFromPoint" ret="HWND" convention="__stdcall">
<arg name="hWndParent">HWND</arg>
<arg name="Point">POINT</arg>
</function>
<function name="ChildWindowFromPointEx" ret="HWND" convention="__stdcall">
<arg name="hwnd">HWND</arg>
<arg name="pt">POINT</arg>
<arg name="flags">UINT</arg>
</function>

<function name="GetSysColor" ret="DWORD" convention="__stdcall">
<arg name="nIndex">int</arg>
</function>
<function name="GetSysColorBrush" ret="HBRUSH" convention="__stdcall">
<arg name="nIndex">int</arg>
</function>
<function name="SetSysColors" ret="BOOL" convention="__stdcall">
<arg name="cElements">int</arg>
<arg name="lpaElements">const INT *</arg>
<arg name="lpaRgbValues">const COLORREF *</arg>
</function>
<function name="DrawFocusRect" ret="BOOL" convention="__stdcall">
<arg name="hDC">HDC</arg>
<arg name="lprc">const RECT *</arg>
</function>

<function name="FillRect" ret="int" convention="__stdcall">
<arg name="hDC">HDC</arg>

     const RECT *lprc,
     HBRUSH hbr);

<function name="FrameRect" ret="int" convention="__stdcall">
<arg name="hDC">HDC</arg>

     const RECT *lprc,
     HBRUSH hbr);

<function name="InvertRect" ret="BOOL" convention="__stdcall">
<arg name="hDC">HDC</arg>

     const RECT *lprc);

<function name="SetRect" ret="BOOL" convention="__stdcall">
<arg name="lprc">LPRECT</arg>
<arg name="xLeft">int</arg>
<arg name="yTop">int</arg>
<arg name="xRight">int</arg>
<arg name="yBottom">int</arg>
</function>

<function name="SetRectEmpty" ret="BOOL" convention="__stdcall">
<arg name="lprc">LPRECT</arg>
</function>

<function name="CopyRect" ret="BOOL" convention="__stdcall">
<arg name="lprcDst">LPRECT</arg>

     const RECT *lprcSrc);

<function name="InflateRect" ret="BOOL" convention="__stdcall">
<arg name="lprc">LPRECT</arg>
<arg name="dx">int</arg>
<arg name="dy">int</arg>
</function>

<function name="IntersectRect" ret="BOOL" convention="__stdcall">
<arg name="lprcDst">LPRECT</arg>

     const RECT *lprcSrc1,
     const RECT *lprcSrc2);

<function name="UnionRect" ret="BOOL" convention="__stdcall">
<arg name="lprcDst">LPRECT</arg>

     const RECT *lprcSrc1,
     const RECT *lprcSrc2);

<function name="SubtractRect" ret="BOOL" convention="__stdcall">
<arg name="lprcDst">LPRECT</arg>

     const RECT *lprcSrc1,
     const RECT *lprcSrc2);

<function name="OffsetRect" ret="BOOL" convention="__stdcall">
<arg name="lprc">LPRECT</arg>
<arg name="dx">int</arg>
<arg name="dy">int</arg>
</function>

<function name="IsRectEmpty" ret="BOOL" convention="__stdcall">
     const RECT *lprc);

<function name="EqualRect" ret="BOOL" convention="__stdcall">
<arg name="lprc1">const RECT *</arg>

     const RECT *lprc2);

<function name="PtInRect" ret="BOOL" convention="__stdcall">
<arg name="lprc">const RECT *</arg>
<arg name="pt">POINT</arg>
</function>
<function name="GetWindowWord" ret="WORD" convention="__stdcall">
<arg name="hWnd">HWND</arg>
<arg name="nIndex">int</arg>
</function>

<function name="SetWindowWord" ret="WORD" convention="__stdcall">
<arg name="hWnd">HWND</arg>
<arg name="nIndex">int</arg>
<arg name="wNewWord">WORD</arg>
</function>

<function name="GetWindowLongA" ret="LONG" convention="__stdcall">
<arg name="hWnd">HWND</arg>
<arg name="nIndex">int</arg>
</function>
<function name="GetWindowLongW" ret="LONG" convention="__stdcall">
<arg name="hWnd">HWND</arg>
<arg name="nIndex">int</arg>
</function>
<function name="SetWindowLongA" ret="LONG" convention="__stdcall">
<arg name="hWnd">HWND</arg>
<arg name="nIndex">int</arg>
<arg name="dwNewLong">LONG</arg>
</function>
<function name="SetWindowLongW" ret="LONG" convention="__stdcall">
<arg name="hWnd">HWND</arg>
<arg name="nIndex">int</arg>
<arg name="dwNewLong">LONG</arg>
</function>

<function name="GetClassWord" ret="WORD" convention="__stdcall">
<arg name="hWnd">HWND</arg>
<arg name="nIndex">int</arg>
</function>

<function name="SetClassWord" ret="WORD" convention="__stdcall">
<arg name="hWnd">HWND</arg>
<arg name="nIndex">int</arg>
<arg name="wNewWord">WORD</arg>
</function>

<function name="GetClassLongA" ret="DWORD" convention="__stdcall">
<arg name="hWnd">HWND</arg>
<arg name="nIndex">int</arg>
</function>
<function name="GetClassLongW" ret="DWORD" convention="__stdcall">
<arg name="hWnd">HWND</arg>
<arg name="nIndex">int</arg>
</function>
<function name="SetClassLongA" ret="DWORD" convention="__stdcall">
<arg name="hWnd">HWND</arg>
<arg name="nIndex">int</arg>
<arg name="dwNewLong">LONG</arg>
</function>
<function name="SetClassLongW" ret="DWORD" convention="__stdcall">
<arg name="hWnd">HWND</arg>
<arg name="nIndex">int</arg>
<arg name="dwNewLong">LONG</arg>
</function>
<function name="GetProcessDefaultLayout" ret="BOOL" convention="__stdcall">
     DWORD *pdwDefaultLayout);

<function name="SetProcessDefaultLayout" ret="BOOL" convention="__stdcall">
<arg name="dwDefaultLayout">DWORD</arg>
</function>
<function name="GetDesktopWindow" ret="HWND" convention="__stdcall">
<arg name="void"> </arg>
</function>
<function name="GetParent" ret="HWND" convention="__stdcall">
<arg name="hWnd">HWND</arg>
</function>

<function name="SetParent" ret="HWND" convention="__stdcall">
<arg name="hWndChild">HWND</arg>
<arg name="hWndNewParent">HWND</arg>
</function>

<function name="EnumChildWindows" ret="BOOL" convention="__stdcall">
<arg name="hWndParent">HWND</arg>
<arg name="lpEnumFunc">WNDENUMPROC</arg>
<arg name="lParam">LPARAM</arg>
</function>

<function name="FindWindowA" ret="HWND" convention="__stdcall">
<arg name="lpClassName">LPCSTR</arg>
<arg name="lpWindowName">LPCSTR</arg>
</function>
<function name="FindWindowW" ret="HWND" convention="__stdcall">
<arg name="lpClassName">LPCWSTR</arg>
<arg name="lpWindowName">LPCWSTR</arg>
</function>
<function name="FindWindowExA" ret="HWND" convention="__stdcall">
<arg name="hWndParent">HWND</arg>
<arg name="hWndChildAfter">HWND</arg>
<arg name="lpszClass">LPCSTR</arg>
<arg name="lpszWindow">LPCSTR</arg>
</function>
<function name="FindWindowExW" ret="HWND" convention="__stdcall">
<arg name="hWndParent">HWND</arg>
<arg name="hWndChildAfter">HWND</arg>
<arg name="lpszClass">LPCWSTR</arg>
<arg name="lpszWindow">LPCWSTR</arg>
</function>
<function name="GetShellWindow" ret="HWND" convention="__stdcall">
<arg name="void"> </arg>
</function>
<function name="RegisterShellHookWindow" ret="BOOL" convention="__stdcall">
<arg name="hwnd">HWND</arg>
</function>

<function name="DeregisterShellHookWindow" ret="BOOL" convention="__stdcall">
<arg name="hwnd">HWND</arg>
</function>

<function name="EnumWindows" ret="BOOL" convention="__stdcall">
<arg name="lpEnumFunc">WNDENUMPROC</arg>
<arg name="lParam">LPARAM</arg>
</function>

<function name="EnumThreadWindows" ret="BOOL" convention="__stdcall">
<arg name="dwThreadId">DWORD</arg>
<arg name="lpfn">WNDENUMPROC</arg>
<arg name="lParam">LPARAM</arg>
</function>
<function name="GetClassNameA" ret="int" convention="__stdcall">
<arg name="hWnd">HWND</arg>
<arg name="lpClassName">LPSTR</arg>
<arg name="nMaxCount">int</arg>
</function>
<function name="GetClassNameW" ret="int" convention="__stdcall">
<arg name="hWnd">HWND</arg>
<arg name="lpClassName">LPWSTR</arg>
<arg name="nMaxCount">int</arg>
</function>

<function name="GetTopWindow" ret="HWND" convention="__stdcall">
<arg name="hWnd">HWND</arg>
</function>
<function name="GetWindowThreadProcessId" ret="DWORD" convention="__stdcall">
<arg name="hWnd">HWND</arg>
<arg name="lpdwProcessId">LPDWORD</arg>
</function>
<function name="IsGUIThread" ret="BOOL" convention="__stdcall">
<arg name="bConvert">BOOL</arg>
</function>
<function name="GetLastActivePopup" ret="HWND" convention="__stdcall">
<arg name="hWnd">HWND</arg>
</function>
<function name="GetWindow" ret="HWND" convention="__stdcall">
<arg name="hWnd">HWND</arg>
<arg name="uCmd">UINT</arg>
</function>

<function name="SetWindowsHookA" ret="HHOOK" convention="__stdcall">
<arg name="nFilterType">int</arg>
<arg name="pfnFilterProc">HOOKPROC</arg>
</function>
<function name="SetWindowsHookW" ret="HHOOK" convention="__stdcall">
<arg name="nFilterType">int</arg>
<arg name="pfnFilterProc">HOOKPROC</arg>
</function>
<function name="UnhookWindowsHook" ret="BOOL" convention="__stdcall">
<arg name="nCode">int</arg>
<arg name="pfnFilterProc">HOOKPROC</arg>
</function>

<function name="SetWindowsHookExA" ret="HHOOK" convention="__stdcall">
<arg name="idHook">int</arg>
<arg name="lpfn">HOOKPROC</arg>
<arg name="hmod">HINSTANCE</arg>
<arg name="dwThreadId">DWORD</arg>
</function>
<function name="SetWindowsHookExW" ret="HHOOK" convention="__stdcall">
<arg name="idHook">int</arg>
<arg name="lpfn">HOOKPROC</arg>
<arg name="hmod">HINSTANCE</arg>
<arg name="dwThreadId">DWORD</arg>
</function>
<function name="UnhookWindowsHookEx" ret="BOOL" convention="__stdcall">
<arg name="hhk">HHOOK</arg>
</function>

<function name="CallNextHookEx" ret="LRESULT" convention="__stdcall">
<arg name="hhk">HHOOK</arg>
<arg name="nCode">int</arg>
<arg name="wParam">WPARAM</arg>
<arg name="lParam">LPARAM</arg>
</function>
<function name="CheckMenuRadioItem" ret="BOOL" convention="__stdcall">
<arg name="hmenu">HMENU</arg>
<arg name="first">UINT</arg>
<arg name="last">UINT</arg>
<arg name="check">UINT</arg>
<arg name="flags">UINT</arg>
</function>
<struct>
<field name="versionNumber">WORD</field>
<field name="offset">WORD</field>
} MENUITEMTEMPLATEHEADER, *PMENUITEMTEMPLATEHEADER;

<struct>
<field name="mtOption">WORD</field>
<field name="mtID">WORD</field>
<field name="mtString[1]">WCHAR</field>
} MENUITEMTEMPLATE, *PMENUITEMTEMPLATE;
<function name="LoadBitmapA" ret="HBITMAP" convention="__stdcall">
<arg name="hInstance">HINSTANCE</arg>
<arg name="lpBitmapName">LPCSTR</arg>
</function>
<function name="LoadBitmapW" ret="HBITMAP" convention="__stdcall">
<arg name="hInstance">HINSTANCE</arg>
<arg name="lpBitmapName">LPCWSTR</arg>
</function>
<function name="LoadCursorA" ret="HCURSOR" convention="__stdcall">
<arg name="hInstance">HINSTANCE</arg>
<arg name="lpCursorName">LPCSTR</arg>
</function>
<function name="LoadCursorW" ret="HCURSOR" convention="__stdcall">
<arg name="hInstance">HINSTANCE</arg>
<arg name="lpCursorName">LPCWSTR</arg>
</function>
<function name="LoadCursorFromFileA" ret="HCURSOR" convention="__stdcall">
<arg name="lpFileName">LPCSTR</arg>
</function>
<function name="LoadCursorFromFileW" ret="HCURSOR" convention="__stdcall">
<arg name="lpFileName">LPCWSTR</arg>
</function>
<function name="CreateCursor" ret="HCURSOR" convention="__stdcall">
<arg name="hInst">HINSTANCE</arg>
<arg name="xHotSpot">int</arg>
<arg name="yHotSpot">int</arg>
<arg name="nWidth">int</arg>
<arg name="nHeight">int</arg>

     const void *pvANDPlane,
     const void *pvXORPlane);

<function name="DestroyCursor" ret="BOOL" convention="__stdcall">
<arg name="hCursor">HCURSOR</arg>
</function>

<function name="SetSystemCursor" ret="BOOL" convention="__stdcall">
<arg name="hcur">HCURSOR</arg>
<arg name="id">DWORD</arg>
</function>

<struct name="_ICONINFO">
<field name="fIcon">BOOL</field>
<field name="xHotspot">DWORD</field>
<field name="yHotspot">DWORD</field>
<field name="hbmMask">HBITMAP</field>
<field name="hbmColor">HBITMAP</field>
} ICONINFO;
typedef ICONINFO *PICONINFO;

<function name="LoadIconA" ret="HICON" convention="__stdcall">
<arg name="hInstance">HINSTANCE</arg>
<arg name="lpIconName">LPCSTR</arg>
</function>
<function name="LoadIconW" ret="HICON" convention="__stdcall">
<arg name="hInstance">HINSTANCE</arg>
<arg name="lpIconName">LPCWSTR</arg>
</function>
<function name="PrivateExtractIconsA" ret="UINT" convention="__stdcall">
<arg name="szFileName">LPCSTR</arg>
<arg name="nIconIndex">int</arg>
<arg name="cxIcon">int</arg>
<arg name="cyIcon">int</arg>

     HICON *phicon,
     UINT *piconid,
     UINT nIcons,
     UINT flags);
<function name="PrivateExtractIconsW" ret="UINT" convention="__stdcall">
<arg name="szFileName">LPCWSTR</arg>
<arg name="nIconIndex">int</arg>
<arg name="cxIcon">int</arg>
<arg name="cyIcon">int</arg>

     HICON *phicon,
     UINT *piconid,
     UINT nIcons,
     UINT flags);
<function name="CreateIcon" ret="HICON" convention="__stdcall">
<arg name="hInstance">HINSTANCE</arg>
<arg name="nWidth">int</arg>
<arg name="nHeight">int</arg>
<arg name="cPlanes">BYTE</arg>
<arg name="cBitsPixel">BYTE</arg>

     const BYTE *lpbANDbits,
     const BYTE *lpbXORbits);

<function name="DestroyIcon" ret="BOOL" convention="__stdcall">
<arg name="hIcon">HICON</arg>
</function>

<function name="LookupIconIdFromDirectory" ret="int" convention="__stdcall">
<arg name="presbits">PBYTE</arg>
<arg name="fIcon">BOOL</arg>
</function>
<function name="LookupIconIdFromDirectoryEx" ret="int" convention="__stdcall">
<arg name="presbits">PBYTE</arg>
<arg name="fIcon">BOOL</arg>
<arg name="cxDesired">int</arg>
<arg name="cyDesired">int</arg>
<arg name="Flags">UINT</arg>
</function>
<function name="CreateIconFromResource" ret="HICON" convention="__stdcall">
<arg name="presbits">PBYTE</arg>
<arg name="dwResSize">DWORD</arg>
<arg name="fIcon">BOOL</arg>
<arg name="dwVer">DWORD</arg>
</function>
<function name="CreateIconFromResourceEx" ret="HICON" convention="__stdcall">
<arg name="presbits">PBYTE</arg>
<arg name="dwResSize">DWORD</arg>
<arg name="fIcon">BOOL</arg>
<arg name="dwVer">DWORD</arg>
<arg name="cxDesired">int</arg>
<arg name="cyDesired">int</arg>
<arg name="Flags">UINT</arg>
</function>
<struct name="tagCURSORSHAPE">
<field name="xHotSpot">int</field>
<field name="yHotSpot">int</field>
<field name="cx">int</field>
<field name="cy">int</field>
<field name="cbWidth">int</field>
<field name="Planes">BYTE</field>
<field name="BitsPixel">BYTE</field>
</struct>
<typedefprev id="CURSORSHAPE"/>
<typedefptrprev id="LPCURSORSHAPE"/>
<function name="LoadImageA" ret="HANDLE" convention="__stdcall">
<arg name="hInst">HINSTANCE</arg>
<arg name="name">LPCSTR</arg>
<arg name="type">UINT</arg>
<arg name="cx">int</arg>
<arg name="cy">int</arg>
<arg name="fuLoad">UINT</arg>
</function>
<function name="LoadImageW" ret="HANDLE" convention="__stdcall">
<arg name="hInst">HINSTANCE</arg>
<arg name="name">LPCWSTR</arg>
<arg name="type">UINT</arg>
<arg name="cx">int</arg>
<arg name="cy">int</arg>
<arg name="fuLoad">UINT</arg>
</function>
<function name="CopyImage" ret="HANDLE" convention="__stdcall">
<arg name="h">HANDLE</arg>
<arg name="type">UINT</arg>
<arg name="cx">int</arg>
<arg name="cy">int</arg>
<arg name="flags">UINT</arg>
</function>
<function name="DrawIconEx" ret="BOOL" convention="__stdcall">
<arg name="hdc">HDC</arg>
<arg name="xLeft">int</arg>
<arg name="yTop">int</arg>
<arg name="hIcon">HICON</arg>
<arg name="cxWidth">int</arg>
<arg name="cyWidth">int</arg>
<arg name="istepIfAniCur">UINT</arg>
<arg name="hbrFlickerFreeDraw">HBRUSH</arg>
<arg name="diFlags">UINT</arg>
</function>
<function name="CreateIconIndirect" ret="HICON" convention="__stdcall">
<arg name="piconinfo">PICONINFO</arg>
</function>

<function name="CopyIcon" ret="HICON" convention="__stdcall">
<arg name="hIcon">HICON</arg>
</function>

<function name="GetIconInfo" ret="BOOL" convention="__stdcall">
<arg name="hIcon">HICON</arg>
<arg name="piconinfo">PICONINFO</arg>
</function>
<struct name="_ICONINFOEXA">
<field name="cbSize">DWORD</field>
<field name="fIcon">BOOL</field>
<field name="xHotspot">DWORD</field>
<field name="yHotspot">DWORD</field>
<field name="hbmMask">HBITMAP</field>
<field name="hbmColor">HBITMAP</field>
<field name="wResID">WORD</field>
<field name="szModName[260]">CHAR</field>
<field name="szResName[260]">CHAR</field>
</struct>
<typedefprev id="ICONINFOEXA"/>
<typedefptrprev id="PICONINFOEXA"/>
<struct name="_ICONINFOEXW">
<field name="cbSize">DWORD</field>
<field name="fIcon">BOOL</field>
<field name="xHotspot">DWORD</field>
<field name="yHotspot">DWORD</field>
<field name="hbmMask">HBITMAP</field>
<field name="hbmColor">HBITMAP</field>
<field name="wResID">WORD</field>
<field name="szModName[260]">WCHAR</field>
<field name="szResName[260]">WCHAR</field>
</struct>
<typedefprev id="ICONINFOEXW"/>
<typedefptrprev id="PICONINFOEXW"/>

typedef ICONINFOEXA ICONINFOEX;
typedef PICONINFOEXA PICONINFOEX;
<function name="GetIconInfoExA" ret="BOOL" convention="__stdcall">
<arg name="hicon">HICON</arg>
<arg name="piconinfo">PICONINFOEXA</arg>
</function>
<function name="GetIconInfoExW" ret="BOOL" convention="__stdcall">
<arg name="hicon">HICON</arg>
<arg name="piconinfo">PICONINFOEXW</arg>
</function>
<function name="LoadStringA" ret="int" convention="__stdcall">
<arg name="hInstance">HINSTANCE</arg>
<arg name="uID">UINT</arg>
<arg name="lpBuffer">LPSTR</arg>
<arg name="cchBufferMax">int</arg>
</function>
<function name="LoadStringW" ret="int" convention="__stdcall">
<arg name="hInstance">HINSTANCE</arg>
<arg name="uID">UINT</arg>
<arg name="lpBuffer">LPWSTR</arg>
<arg name="cchBufferMax">int</arg>
</function>

<function name="IsDialogMessageA" ret="BOOL" convention="__stdcall">
<arg name="hDlg">HWND</arg>
<arg name="lpMsg">LPMSG</arg>
</function>
<function name="IsDialogMessageW" ret="BOOL" convention="__stdcall">
<arg name="hDlg">HWND</arg>
<arg name="lpMsg">LPMSG</arg>
</function>
<function name="MapDialogRect" ret="BOOL" convention="__stdcall">
<arg name="hDlg">HWND</arg>
<arg name="lpRect">LPRECT</arg>
</function>

<function name="DlgDirListA" ret="int" convention="__stdcall">
<arg name="hDlg">HWND</arg>
<arg name="lpPathSpec">LPSTR</arg>
<arg name="nIDListBox">int</arg>
<arg name="nIDStaticPath">int</arg>
<arg name="uFileType">UINT</arg>
</function>
<function name="DlgDirListW" ret="int" convention="__stdcall">
<arg name="hDlg">HWND</arg>
<arg name="lpPathSpec">LPWSTR</arg>
<arg name="nIDListBox">int</arg>
<arg name="nIDStaticPath">int</arg>
<arg name="uFileType">UINT</arg>
</function>
<function name="DlgDirSelectExA" ret="BOOL" convention="__stdcall">
<arg name="hwndDlg">HWND</arg>
<arg name="lpString">LPSTR</arg>
<arg name="chCount">int</arg>
<arg name="idListBox">int</arg>
</function>
<function name="DlgDirSelectExW" ret="BOOL" convention="__stdcall">
<arg name="hwndDlg">HWND</arg>
<arg name="lpString">LPWSTR</arg>
<arg name="chCount">int</arg>
<arg name="idListBox">int</arg>
</function>
<function name="DlgDirListComboBoxA" ret="int" convention="__stdcall">
<arg name="hDlg">HWND</arg>
<arg name="lpPathSpec">LPSTR</arg>
<arg name="nIDComboBox">int</arg>
<arg name="nIDStaticPath">int</arg>
<arg name="uFiletype">UINT</arg>
</function>
<function name="DlgDirListComboBoxW" ret="int" convention="__stdcall">
<arg name="hDlg">HWND</arg>
<arg name="lpPathSpec">LPWSTR</arg>
<arg name="nIDComboBox">int</arg>
<arg name="nIDStaticPath">int</arg>
<arg name="uFiletype">UINT</arg>
</function>
<function name="DlgDirSelectComboBoxExA" ret="BOOL" convention="__stdcall">
<arg name="hwndDlg">HWND</arg>
<arg name="lpString">LPSTR</arg>
<arg name="cchOut">int</arg>
<arg name="idComboBox">int</arg>
</function>
<function name="DlgDirSelectComboBoxExW" ret="BOOL" convention="__stdcall">
<arg name="hwndDlg">HWND</arg>
<arg name="lpString">LPWSTR</arg>
<arg name="cchOut">int</arg>
<arg name="idComboBox">int</arg>
</function>
                                  
<struct name="tagSCROLLINFO">
<field name="cbSize">UINT</field>
<field name="fMask">UINT</field>
<field name="nMin">int</field>
<field name="nMax">int</field>
<field name="nPage">UINT</field>
<field name="nPos">int</field>
<field name="nTrackPos">int</field>
</struct>
<typedefprev id="SCROLLINFO"/>
<typedefptrprev id="LPSCROLLINFO"/>
typedef SCROLLINFO const  *LPCSCROLLINFO;

<function name="SetScrollInfo" ret="int" convention="__stdcall">
<arg name="hwnd">HWND</arg>
<arg name="nBar">int</arg>
<arg name="lpsi">LPCSCROLLINFO</arg>
<arg name="redraw">BOOL</arg>
</function>

<function name="GetScrollInfo" ret="BOOL" convention="__stdcall">
<arg name="hwnd">HWND</arg>
<arg name="nBar">int</arg>
<arg name="lpsi">LPSCROLLINFO</arg>
</function>

<struct name="tagMDICREATESTRUCTA">
<field name="szClass">LPCSTR</field>
<field name="szTitle">LPCSTR</field>
<field name="hOwner">HANDLE</field>
<field name="x">int</field>
<field name="y">int</field>
<field name="cx">int</field>
<field name="cy">int</field>
<field name="style">DWORD</field>
<field name="lParam">LPARAM</field>
</struct>
<typedefprev id="MDICREATESTRUCTA"/>
<typedefptrprev id="LPMDICREATESTRUCTA"/>
<struct name="tagMDICREATESTRUCTW">
<field name="szClass">LPCWSTR</field>
<field name="szTitle">LPCWSTR</field>
<field name="hOwner">HANDLE</field>
<field name="x">int</field>
<field name="y">int</field>
<field name="cx">int</field>
<field name="cy">int</field>
<field name="style">DWORD</field>
<field name="lParam">LPARAM</field>
</struct>
<typedefprev id="MDICREATESTRUCTW"/>
<typedefptrprev id="LPMDICREATESTRUCTW"/>

typedef MDICREATESTRUCTA MDICREATESTRUCT;
typedef LPMDICREATESTRUCTA LPMDICREATESTRUCT;
<struct name="tagCLIENTCREATESTRUCT">
<field name="hWindowMenu">HANDLE</field>
<field name="idFirstChild">UINT</field>
</struct>
<typedefprev id="CLIENTCREATESTRUCT"/>
<typedefptrprev id="LPCLIENTCREATESTRUCT"/>

<function name="DefFrameProcA" ret="LRESULT" convention="__stdcall">
<arg name="hWnd">HWND</arg>
<arg name="hWndMDIClient">HWND</arg>
<arg name="uMsg">UINT</arg>
<arg name="wParam">WPARAM</arg>
<arg name="lParam">LPARAM</arg>
</function>
<function name="DefFrameProcW" ret="LRESULT" convention="__stdcall">
<arg name="hWnd">HWND</arg>
<arg name="hWndMDIClient">HWND</arg>
<arg name="uMsg">UINT</arg>
<arg name="wParam">WPARAM</arg>
<arg name="lParam">LPARAM</arg>
</function>

<function name="DefMDIChildProcA" ret="LRESULT" convention="__stdcall">
<arg name="hWnd">HWND</arg>
<arg name="uMsg">UINT</arg>
<arg name="wParam">WPARAM</arg>
<arg name="lParam">LPARAM</arg>
</function>


<function name="DefMDIChildProcW" ret="LRESULT" convention="__stdcall">
<arg name="hWnd">HWND</arg>
<arg name="uMsg">UINT</arg>
<arg name="wParam">WPARAM</arg>
<arg name="lParam">LPARAM</arg>
</function>

<function name="TranslateMDISysAccel" ret="BOOL" convention="__stdcall">
<arg name="hWndClient">HWND</arg>
<arg name="lpMsg">LPMSG</arg>
</function>
<function name="ArrangeIconicWindows" ret="UINT" convention="__stdcall">
<arg name="hWnd">HWND</arg>
</function>

<function name="CreateMDIWindowA" ret="HWND" convention="__stdcall">
<arg name="lpClassName">LPCSTR</arg>
<arg name="lpWindowName">LPCSTR</arg>
<arg name="dwStyle">DWORD</arg>
<arg name="X">int</arg>
<arg name="Y">int</arg>
<arg name="nWidth">int</arg>
<arg name="nHeight">int</arg>
<arg name="hWndParent">HWND</arg>
<arg name="hInstance">HINSTANCE</arg>
<arg name="lParam">LPARAM</arg>
</function>
<function name="CreateMDIWindowW" ret="HWND" convention="__stdcall">
<arg name="lpClassName">LPCWSTR</arg>
<arg name="lpWindowName">LPCWSTR</arg>
<arg name="dwStyle">DWORD</arg>
<arg name="X">int</arg>
<arg name="Y">int</arg>
<arg name="nWidth">int</arg>
<arg name="nHeight">int</arg>
<arg name="hWndParent">HWND</arg>
<arg name="hInstance">HINSTANCE</arg>
<arg name="lParam">LPARAM</arg>
</function>

<function name="TileWindows" ret="WORD" convention="__stdcall">
<arg name="hwndParent">HWND</arg>
<arg name="wHow">UINT</arg>
<arg name="lpRect">const RECT *</arg>
<arg name="cKids">UINT</arg>
<arg name="lpKids">const HWND  *</arg>
</function>

<function name="CascadeWindows" ret="WORD" convention="__stdcall">
<arg name="hwndParent">HWND</arg>
<arg name="wHow">UINT</arg>
<arg name="lpRect">const RECT *</arg>
<arg name="cKids">UINT</arg>
<arg name="lpKids">const HWND  *</arg>
</function>
typedef DWORD HELPPOLY;
<struct name="tagMULTIKEYHELPA">

    DWORD  mkSize;
    CHAR   mkKeylist;
    CHAR   szKeyphrase[1];
} MULTIKEYHELPA, *PMULTIKEYHELPA, *LPMULTIKEYHELPA;
<struct name="tagMULTIKEYHELPW">

    DWORD  mkSize;
    WCHAR  mkKeylist;
    WCHAR  szKeyphrase[1];
} MULTIKEYHELPW, *PMULTIKEYHELPW, *LPMULTIKEYHELPW;
typedef MULTIKEYHELPA MULTIKEYHELP;
typedef PMULTIKEYHELPA PMULTIKEYHELP;
typedef LPMULTIKEYHELPA LPMULTIKEYHELP;

<struct name="tagHELPWININFOA">
<field name="wStructSize">int</field>
<field name="x">int</field>
<field name="y">int</field>
<field name="dx">int</field>
<field name="dy">int</field>
<field name="wMax">int</field>
<field name="rgchMember[2]">CHAR</field>
} HELPWININFOA, *PHELPWININFOA, *LPHELPWININFOA;
<struct name="tagHELPWININFOW">
<field name="wStructSize">int</field>
<field name="x">int</field>
<field name="y">int</field>
<field name="dx">int</field>
<field name="dy">int</field>
<field name="wMax">int</field>
<field name="rgchMember[2]">WCHAR</field>
} HELPWININFOW, *PHELPWININFOW, *LPHELPWININFOW;
typedef HELPWININFOA HELPWININFO;
typedef PHELPWININFOA PHELPWININFO;
typedef LPHELPWININFOA LPHELPWININFO;

<function name="WinHelpA" ret="BOOL" convention="__stdcall">
<arg name="hWndMain">HWND</arg>
<arg name="lpszHelp">LPCSTR</arg>
<arg name="uCommand">UINT</arg>
<arg name="dwData">ULONG_PTR</arg>
</function>
<function name="WinHelpW" ret="BOOL" convention="__stdcall">
<arg name="hWndMain">HWND</arg>
<arg name="lpszHelp">LPCWSTR</arg>
<arg name="uCommand">UINT</arg>
<arg name="dwData">ULONG_PTR</arg>
</function>
<function name="GetGuiResources" ret="DWORD" convention="__stdcall">
<arg name="hProcess">HANDLE</arg>
<arg name="uiFlags">DWORD</arg>
</function>

<struct name="tagNONCLIENTMETRICSA">
<field name="cbSize">UINT</field>
<field name="iBorderWidth">int</field>
<field name="iScrollWidth">int</field>
<field name="iScrollHeight">int</field>
<field name="iCaptionWidth">int</field>
<field name="iCaptionHeight">int</field>
<field name="lfCaptionFont">LOGFONTA</field>
<field name="iSmCaptionWidth">int</field>
<field name="iSmCaptionHeight">int</field>
<field name="lfSmCaptionFont">LOGFONTA</field>
<field name="iMenuWidth">int</field>
<field name="iMenuHeight">int</field>
<field name="lfMenuFont">LOGFONTA</field>
<field name="lfStatusFont">LOGFONTA</field>
<field name="lfMessageFont">LOGFONTA</field>
<field name="iPaddedBorderWidth">int</field>
}   NONCLIENTMETRICSA, *PNONCLIENTMETRICSA, * LPNONCLIENTMETRICSA;
<struct name="tagNONCLIENTMETRICSW">
<field name="cbSize">UINT</field>
<field name="iBorderWidth">int</field>
<field name="iScrollWidth">int</field>
<field name="iScrollHeight">int</field>
<field name="iCaptionWidth">int</field>
<field name="iCaptionHeight">int</field>
<field name="lfCaptionFont">LOGFONTW</field>
<field name="iSmCaptionWidth">int</field>
<field name="iSmCaptionHeight">int</field>
<field name="lfSmCaptionFont">LOGFONTW</field>
<field name="iMenuWidth">int</field>
<field name="iMenuHeight">int</field>
<field name="lfMenuFont">LOGFONTW</field>
<field name="lfStatusFont">LOGFONTW</field>
<field name="lfMessageFont">LOGFONTW</field>
<field name="iPaddedBorderWidth">int</field>
}   NONCLIENTMETRICSW, *PNONCLIENTMETRICSW, * LPNONCLIENTMETRICSW;
typedef NONCLIENTMETRICSA NONCLIENTMETRICS;
typedef PNONCLIENTMETRICSA PNONCLIENTMETRICS;
typedef LPNONCLIENTMETRICSA LPNONCLIENTMETRICS;

<struct name="tagMINIMIZEDMETRICS">
<field name="cbSize">UINT</field>
<field name="iWidth">int</field>
<field name="iHorzGap">int</field>
<field name="iVertGap">int</field>
<field name="iArrange">int</field>
}   MINIMIZEDMETRICS, *PMINIMIZEDMETRICS, *LPMINIMIZEDMETRICS;
<struct name="tagICONMETRICSA">
<field name="cbSize">UINT</field>
<field name="iHorzSpacing">int</field>
<field name="iVertSpacing">int</field>
<field name="iTitleWrap">int</field>
<field name="lfFont">LOGFONTA</field>
}   ICONMETRICSA, *PICONMETRICSA, *LPICONMETRICSA;
<struct name="tagICONMETRICSW">
<field name="cbSize">UINT</field>
<field name="iHorzSpacing">int</field>
<field name="iVertSpacing">int</field>
<field name="iTitleWrap">int</field>
<field name="lfFont">LOGFONTW</field>
}   ICONMETRICSW, *PICONMETRICSW, *LPICONMETRICSW;
typedef ICONMETRICSA ICONMETRICS;
typedef PICONMETRICSA PICONMETRICS;
typedef LPICONMETRICSA LPICONMETRICS;

<struct name="tagANIMATIONINFO">
<field name="cbSize">UINT</field>
<field name="iMinAnimate">int</field>
</struct>
<typedefprev id="ANIMATIONINFO"/>
<typedefptrprev id="LPANIMATIONINFO"/>

<struct name="tagSERIALKEYSA">
<field name="cbSize">UINT</field>
<field name="dwFlags">DWORD</field>
<field name="lpszActivePort">LPSTR</field>
<field name="lpszPort">LPSTR</field>
<field name="iBaudRate">UINT</field>
<field name="iPortState">UINT</field>
<field name="iActive">UINT</field>
</struct>
<typedefprev id="SERIALKEYSA"/>
<typedefptrprev id="LPSERIALKEYSA"/>
<struct name="tagSERIALKEYSW">
<field name="cbSize">UINT</field>
<field name="dwFlags">DWORD</field>
<field name="lpszActivePort">LPWSTR</field>
<field name="lpszPort">LPWSTR</field>
<field name="iBaudRate">UINT</field>
<field name="iPortState">UINT</field>
<field name="iActive">UINT</field>
</struct>
<typedefprev id="SERIALKEYSW"/>
<typedefptrprev id="LPSERIALKEYSW"/>

typedef SERIALKEYSA SERIALKEYS;
typedef LPSERIALKEYSA LPSERIALKEYS;
<struct name="tagHIGHCONTRASTA">
<field name="cbSize">UINT</field>
<field name="dwFlags">DWORD</field>
<field name="lpszDefaultScheme">LPSTR</field>
</struct>
<typedefprev id="HIGHCONTRASTA"/>
<typedefptrprev id="LPHIGHCONTRASTA"/>
<struct name="tagHIGHCONTRASTW">
<field name="cbSize">UINT</field>
<field name="dwFlags">DWORD</field>
<field name="lpszDefaultScheme">LPWSTR</field>
</struct>
<typedefprev id="HIGHCONTRASTW"/>
<typedefptrprev id="LPHIGHCONTRASTW"/>

typedef HIGHCONTRASTA HIGHCONTRAST;
typedef LPHIGHCONTRASTA LPHIGHCONTRAST;
#line 1 "\\program files\\Microsoft SDKs\\Windows\\v6.0A\\Include\\tvout.h"
#pragma once
<struct name="_VIDEOPARAMETERS">
<field name="Guid">GUID</field>
<field name="dwOffset">ULONG</field>
<field name="dwCommand">ULONG</field>
<field name="dwFlags">ULONG</field>
<field name="dwMode">ULONG</field>
<field name="dwTVStandard">ULONG</field>
<field name="dwAvailableModes">ULONG</field>
<field name="dwAvailableTVStandard">ULONG</field>
<field name="dwFlickerFilter">ULONG</field>
<field name="dwOverScanX">ULONG</field>
<field name="dwOverScanY">ULONG</field>
<field name="dwMaxUnscaledX">ULONG</field>
<field name="dwMaxUnscaledY">ULONG</field>
<field name="dwPositionX">ULONG</field>
<field name="dwPositionY">ULONG</field>
<field name="dwBrightness">ULONG</field>
<field name="dwContrast">ULONG</field>
<field name="dwCPType">ULONG</field>
<field name="dwCPCommand">ULONG</field>
<field name="dwCPStandard">ULONG</field>
<field name="dwCPKey">ULONG</field>
<field name="bCP_APSTriggerBits">ULONG</field>
<field name="bOEMCopyProtection[256]">UCHAR</field>
} VIDEOPARAMETERS, *PVIDEOPARAMETERS, *LPVIDEOPARAMETERS;
                                        
<function name="ChangeDisplaySettingsA" ret="LONG" convention="__stdcall">
<arg name="lpDevMode">LPDEVMODEA</arg>
<arg name="dwFlags">DWORD</arg>
</function>
<function name="ChangeDisplaySettingsW" ret="LONG" convention="__stdcall">
<arg name="lpDevMode">LPDEVMODEW</arg>
<arg name="dwFlags">DWORD</arg>
</function>
<function name="ChangeDisplaySettingsExA" ret="LONG" convention="__stdcall">
<arg name="lpszDeviceName">LPCSTR</arg>
<arg name="lpDevMode">LPDEVMODEA</arg>
<arg name="hwnd">HWND</arg>
<arg name="dwflags">DWORD</arg>
<arg name="lParam">LPVOID</arg>
</function>
<function name="ChangeDisplaySettingsExW" ret="LONG" convention="__stdcall">
<arg name="lpszDeviceName">LPCWSTR</arg>
<arg name="lpDevMode">LPDEVMODEW</arg>
<arg name="hwnd">HWND</arg>
<arg name="dwflags">DWORD</arg>
<arg name="lParam">LPVOID</arg>
</function>
<function name="EnumDisplaySettingsA" ret="BOOL" convention="__stdcall">
<arg name="lpszDeviceName">LPCSTR</arg>
<arg name="iModeNum">DWORD</arg>
<arg name="lpDevMode">LPDEVMODEA</arg>
</function>
<function name="EnumDisplaySettingsW" ret="BOOL" convention="__stdcall">
<arg name="lpszDeviceName">LPCWSTR</arg>
<arg name="iModeNum">DWORD</arg>
<arg name="lpDevMode">LPDEVMODEW</arg>
</function>

<function name="EnumDisplaySettingsExA" ret="BOOL" convention="__stdcall">
<arg name="lpszDeviceName">LPCSTR</arg>
<arg name="iModeNum">DWORD</arg>
<arg name="lpDevMode">LPDEVMODEA</arg>
<arg name="dwFlags">DWORD</arg>
</function>
<function name="EnumDisplaySettingsExW" ret="BOOL" convention="__stdcall">
<arg name="lpszDeviceName">LPCWSTR</arg>
<arg name="iModeNum">DWORD</arg>
<arg name="lpDevMode">LPDEVMODEW</arg>
<arg name="dwFlags">DWORD</arg>
</function>

<function name="EnumDisplayDevicesA" ret="BOOL" convention="__stdcall">
<arg name="lpDevice">LPCSTR</arg>
<arg name="iDevNum">DWORD</arg>
<arg name="lpDisplayDevice">PDISPLAY_DEVICEA</arg>
<arg name="dwFlags">DWORD</arg>
</function>
<function name="EnumDisplayDevicesW" ret="BOOL" convention="__stdcall">
<arg name="lpDevice">LPCWSTR</arg>
<arg name="iDevNum">DWORD</arg>
<arg name="lpDisplayDevice">PDISPLAY_DEVICEW</arg>
<arg name="dwFlags">DWORD</arg>
</function>
<function name="SystemParametersInfoA" ret="BOOL" convention="__stdcall">
<arg name="uiAction">UINT</arg>
<arg name="uiParam">UINT</arg>
<arg name="pvParam">PVOID</arg>
<arg name="fWinIni">UINT</arg>
</function>
<function name="SystemParametersInfoW" ret="BOOL" convention="__stdcall">
<arg name="uiAction">UINT</arg>
<arg name="uiParam">UINT</arg>
<arg name="pvParam">PVOID</arg>
<arg name="fWinIni">UINT</arg>
</function>
<struct name="tagFILTERKEYS">
<field name="cbSize">UINT</field>
<field name="dwFlags">DWORD</field>
<field name="iWaitMSec">DWORD</field>
<field name="iDelayMSec">DWORD</field>
<field name="iRepeatMSec">DWORD</field>
<field name="iBounceMSec">DWORD</field>
</struct>
<typedefprev id="FILTERKEYS"/>
<typedefptrprev id="LPFILTERKEYS"/>
<struct name="tagSTICKYKEYS">
<field name="cbSize">UINT</field>
<field name="dwFlags">DWORD</field>
</struct>
<typedefprev id="STICKYKEYS"/>
<typedefptrprev id="LPSTICKYKEYS"/>
<struct name="tagMOUSEKEYS">
<field name="cbSize">UINT</field>
<field name="dwFlags">DWORD</field>
<field name="iMaxSpeed">DWORD</field>
<field name="iTimeToMaxSpeed">DWORD</field>
<field name="iCtrlSpeed">DWORD</field>
<field name="dwReserved1">DWORD</field>
<field name="dwReserved2">DWORD</field>
</struct>
<typedefprev id="MOUSEKEYS"/>
<typedefptrprev id="LPMOUSEKEYS"/>
<struct name="tagACCESSTIMEOUT">
<field name="cbSize">UINT</field>
<field name="dwFlags">DWORD</field>
<field name="iTimeOutMSec">DWORD</field>
</struct>
<typedefprev id="ACCESSTIMEOUT"/>
<typedefptrprev id="LPACCESSTIMEOUT"/>
<struct name="tagSOUNDSENTRYA">
<field name="cbSize">UINT</field>
<field name="dwFlags">DWORD</field>
<field name="iFSTextEffect">DWORD</field>
<field name="iFSTextEffectMSec">DWORD</field>
<field name="iFSTextEffectColorBits">DWORD</field>
<field name="iFSGrafEffect">DWORD</field>
<field name="iFSGrafEffectMSec">DWORD</field>
<field name="iFSGrafEffectColor">DWORD</field>
<field name="iWindowsEffect">DWORD</field>
<field name="iWindowsEffectMSec">DWORD</field>
<field name="lpszWindowsEffectDLL">LPSTR</field>
<field name="iWindowsEffectOrdinal">DWORD</field>
</struct>
<typedefprev id="SOUNDSENTRYA"/>
<typedefptrprev id="LPSOUNDSENTRYA"/>
<struct name="tagSOUNDSENTRYW">
<field name="cbSize">UINT</field>
<field name="dwFlags">DWORD</field>
<field name="iFSTextEffect">DWORD</field>
<field name="iFSTextEffectMSec">DWORD</field>
<field name="iFSTextEffectColorBits">DWORD</field>
<field name="iFSGrafEffect">DWORD</field>
<field name="iFSGrafEffectMSec">DWORD</field>
<field name="iFSGrafEffectColor">DWORD</field>
<field name="iWindowsEffect">DWORD</field>
<field name="iWindowsEffectMSec">DWORD</field>
<field name="lpszWindowsEffectDLL">LPWSTR</field>
<field name="iWindowsEffectOrdinal">DWORD</field>
</struct>
<typedefprev id="SOUNDSENTRYW"/>
<typedefptrprev id="LPSOUNDSENTRYW"/>

typedef SOUNDSENTRYA SOUNDSENTRY;
typedef LPSOUNDSENTRYA LPSOUNDSENTRY;
<function name="SoundSentry" ret="BOOL" convention="__stdcall">
void);

<struct name="tagTOGGLEKEYS">
<field name="cbSize">UINT</field>
<field name="dwFlags">DWORD</field>
</struct>
<typedefprev id="TOGGLEKEYS"/>
<typedefptrprev id="LPTOGGLEKEYS"/>
<struct name="tagAUDIODESCRIPTION">
<field name="cbSize">UINT</field>
<field name="Enabled">BOOL</field>
<field name="Locale">LCID</field>
</struct>
<typedefprev id="AUDIODESCRIPTION"/>
<typedefptrprev id="LPAUDIODESCRIPTION"/>

<function name="SetDebugErrorLevel" ret="void" convention="__stdcall">
<arg name="dwLevel">DWORD</arg>
</function>
<function name="SetLastErrorEx" ret="void" convention="__stdcall">
<arg name="dwErrCode">DWORD</arg>
<arg name="dwType">DWORD</arg>
</function>

<function name="InternalGetWindowText" ret="int" convention="__stdcall">
<arg name="hWnd">HWND</arg>
<arg name="pString">LPWSTR</arg>
<arg name="cchMaxCount">int</arg>
</function>

<function name="CancelShutdown" ret="BOOL" convention="__stdcall">
<arg name="void"> </arg>
</function>
<function name="MonitorFromPoint" ret="HMONITOR" convention="__stdcall">
<arg name="pt">POINT</arg>
<arg name="dwFlags">DWORD</arg>
</function>

<function name="MonitorFromRect" ret="HMONITOR" convention="__stdcall">
<arg name="lprc">LPCRECT</arg>
<arg name="dwFlags">DWORD</arg>
</function>

<function name="MonitorFromWindow" ret="HMONITOR" convention="__stdcall">
<arg name="hwnd">HWND</arg>
<arg name="dwFlags">DWORD</arg>
</function>
<struct name="tagMONITORINFO">
<field name="cbSize">DWORD</field>
<field name="rcMonitor">RECT</field>
<field name="rcWork">RECT</field>
<field name="dwFlags">DWORD</field>
</struct>
<typedefprev id="MONITORINFO"/>
<typedefptrprev id="LPMONITORINFO"/>

<struct name="tagMONITORINFOEXA">
    MONITORINFO;
    CHAR        szDevice[32];
} MONITORINFOEXA, *LPMONITORINFOEXA;
<struct name="tagMONITORINFOEXW">
    MONITORINFO;
    WCHAR       szDevice[32];
} MONITORINFOEXW, *LPMONITORINFOEXW;

typedef MONITORINFOEXA MONITORINFOEX;
typedef LPMONITORINFOEXA LPMONITORINFOEX;

<function name="GetMonitorInfoA" ret="BOOL" convention="__stdcall">
<arg name="hMonitor">HMONITOR</arg>
<arg name="lpmi">LPMONITORINFO</arg>
</function>
<function name="GetMonitorInfoW" ret="BOOL" convention="__stdcall">
<arg name="hMonitor">HMONITOR</arg>
<arg name="lpmi">LPMONITORINFO</arg>
</function>
typedef BOOL (__stdcall* MONITORENUMPROC)(HMONITOR, HDC, LPRECT, LPARAM);

<function name="EnumDisplayMonitors" ret="BOOL" convention="__stdcall">
<arg name="hdc">HDC</arg>
<arg name="lprcClip">LPCRECT</arg>
<arg name="lpfnEnum">MONITORENUMPROC</arg>
<arg name="dwData">LPARAM</arg>
</function>

<function name="NotifyWinEvent" ret="void" convention="__stdcall">
<arg name="event">DWORD</arg>
<arg name="hwnd">HWND </arg>
<arg name="idObject">LONG </arg>
<arg name="idChild">LONG </arg>
</function>

typedef void (__stdcall* WINEVENTPROC)(
    HWINEVENTHOOK hWinEventHook,
    DWORD         event,
    HWND          hwnd,
    LONG          idObject,
    LONG          idChild,
    DWORD         idEventThread,
    DWORD         dwmsEventTime);

<function name="SetWinEventHook" ret="HWINEVENTHOOK" convention="__stdcall">
<arg name="eventMin">DWORD</arg>
<arg name="eventMax">DWORD</arg>
<arg name="hmodWinEventProc">HMODULE</arg>
<arg name="pfnWinEventProc">WINEVENTPROC</arg>
<arg name="idProcess">DWORD</arg>
<arg name="idThread">DWORD</arg>
<arg name="dwFlags">DWORD</arg>
</function>
<function name="IsWinEventHookInstalled" ret="BOOL" convention="__stdcall">
<arg name="event">DWORD</arg>
</function>
<function name="UnhookWinEvent" ret="BOOL" convention="__stdcall">
<arg name="hWinEventHook">HWINEVENTHOOK</arg>
</function>

<struct name="tagGUITHREADINFO">
<field name="cbSize">DWORD</field>
<field name="flags">DWORD</field>
<field name="hwndActive">HWND</field>
<field name="hwndFocus">HWND</field>
<field name="hwndCapture">HWND</field>
<field name="hwndMenuOwner">HWND</field>
<field name="hwndMoveSize">HWND</field>
<field name="hwndCaret">HWND</field>
<field name="rcCaret">RECT</field>
} GUITHREADINFO, *PGUITHREADINFO,  * LPGUITHREADINFO;
<function name="GetGUIThreadInfo" ret="BOOL" convention="__stdcall">
<arg name="idThread">DWORD</arg>
<arg name="pgui">PGUITHREADINFO</arg>
</function>

<function name="BlockInput" ret="BOOL" convention="__stdcall">
<arg name="fBlockIt">BOOL</arg>
</function>
<function name="SetProcessDPIAware" ret="BOOL" convention="__stdcall">
<arg name="void"> </arg>
</function>

<function name="IsProcessDPIAware" ret="BOOL" convention="__stdcall">
<arg name="void"> </arg>
</function>

<function name="GetWindowModuleFileNameA" ret="UINT" convention="__stdcall">
<arg name="hwnd">HWND</arg>
<arg name="pszFileName">LPSTR</arg>
<arg name="cchFileNameMax">UINT</arg>
</function>
<function name="GetWindowModuleFileNameW" ret="UINT" convention="__stdcall">
<arg name="hwnd">HWND</arg>
<arg name="pszFileName">LPWSTR</arg>
<arg name="cchFileNameMax">UINT</arg>
</function>
<struct name="tagCURSORINFO">
<field name="cbSize">DWORD</field>
<field name="flags">DWORD</field>
<field name="hCursor">HCURSOR</field>
<field name="ptScreenPos">POINT</field>
} CURSORINFO, *PCURSORINFO, *LPCURSORINFO;
<function name="GetCursorInfo" ret="BOOL" convention="__stdcall">
<arg name="pci">PCURSORINFO</arg>
</function>

<struct name="tagWINDOWINFO">
<field name="cbSize">DWORD</field>
<field name="rcWindow">RECT</field>
<field name="rcClient">RECT</field>
<field name="dwStyle">DWORD</field>
<field name="dwExStyle">DWORD</field>
<field name="dwWindowStatus">DWORD</field>
<field name="cxWindowBorders">UINT</field>
<field name="cyWindowBorders">UINT</field>
<field name="atomWindowType">ATOM</field>
<field name="wCreatorVersion">WORD</field>
} WINDOWINFO, *PWINDOWINFO, *LPWINDOWINFO;
<function name="GetWindowInfo" ret="BOOL" convention="__stdcall">
<arg name="hwnd">HWND</arg>
<arg name="pwi">PWINDOWINFO</arg>
</function>

<struct name="tagTITLEBARINFO">
<field name="cbSize">DWORD</field>
<field name="rcTitleBar">RECT</field>
<field name="rgstate[5 + 1]">DWORD</field>
} TITLEBARINFO, *PTITLEBARINFO, *LPTITLEBARINFO;

<function name="GetTitleBarInfo" ret="BOOL" convention="__stdcall">
<arg name="hwnd">HWND</arg>
<arg name="pti">PTITLEBARINFO</arg>
</function>
<struct name="tagTITLEBARINFOEX">
<field name="cbSize">DWORD</field>
<field name="rcTitleBar">RECT</field>
<field name="rgstate[5 + 1]">DWORD</field>
<field name="rgrect[5 + 1]">RECT</field>
} TITLEBARINFOEX, *PTITLEBARINFOEX, *LPTITLEBARINFOEX;

<struct name="tagMENUBARINFO">
<field name="cbSize">DWORD</field>
<field name="rcBar">RECT</field>
<field name="hMenu">HMENU</field>
<field name="hwndMenu">HWND</field>
    BOOL fBarFocused:1;  
    BOOL fFocused:1;     
} MENUBARINFO, *PMENUBARINFO, *LPMENUBARINFO;

<function name="GetMenuBarInfo" ret="BOOL" convention="__stdcall">
<arg name="hwnd">HWND</arg>
<arg name="idObject">LONG</arg>
<arg name="idItem">LONG</arg>
<arg name="pmbi">PMENUBARINFO</arg>
</function>

<struct name="tagSCROLLBARINFO">
<field name="cbSize">DWORD</field>
<field name="rcScrollBar">RECT</field>
<field name="dxyLineButton">int</field>
<field name="xyThumbTop">int</field>
<field name="xyThumbBottom">int</field>
<field name="reserved">int</field>
<field name="rgstate[5 + 1]">DWORD</field>
} SCROLLBARINFO, *PSCROLLBARINFO, *LPSCROLLBARINFO;

<function name="GetScrollBarInfo" ret="BOOL" convention="__stdcall">
<arg name="hwnd">HWND</arg>
<arg name="idObject">LONG</arg>
<arg name="psbi">PSCROLLBARINFO</arg>
</function>

<struct name="tagCOMBOBOXINFO">
<field name="cbSize">DWORD</field>
<field name="rcItem">RECT</field>
<field name="rcButton">RECT</field>
<field name="stateButton">DWORD</field>
<field name="hwndCombo">HWND</field>
<field name="hwndItem">HWND</field>
<field name="hwndList">HWND</field>
} COMBOBOXINFO, *PCOMBOBOXINFO, *LPCOMBOBOXINFO;

<function name="GetComboBoxInfo" ret="BOOL" convention="__stdcall">
<arg name="hwndCombo">HWND</arg>
<arg name="pcbi">PCOMBOBOXINFO</arg>
</function>

<function name="GetAncestor" ret="HWND" convention="__stdcall">
<arg name="hwnd">HWND</arg>
<arg name="gaFlags">UINT</arg>
</function>

<function name="RealChildWindowFromPoint" ret="HWND" convention="__stdcall">
<arg name="hwndParent">HWND</arg>
<arg name="ptParentClientCoords">POINT</arg>
</function>

<function name="RealGetWindowClassA" ret="UINT" convention="__stdcall">
<arg name="hwnd">HWND</arg>
<arg name="ptszClassName">LPSTR</arg>
<arg name="cchClassNameMax">UINT</arg>
</function>

<function name="RealGetWindowClassW" ret="UINT" convention="__stdcall">
<arg name="hwnd">HWND</arg>
<arg name="ptszClassName">LPWSTR</arg>
<arg name="cchClassNameMax">UINT</arg>
</function>
<struct name="tagALTTABINFO">
<field name="cbSize">DWORD</field>
<field name="cItems">int</field>
<field name="cColumns">int</field>
<field name="cRows">int</field>
<field name="iColFocus">int</field>
<field name="iRowFocus">int</field>
<field name="cxItem">int</field>
<field name="cyItem">int</field>
<field name="ptStart">POINT</field>
} ALTTABINFO, *PALTTABINFO, *LPALTTABINFO;

<function name="GetAltTabInfoA" ret="BOOL" convention="__stdcall">
<arg name="hwnd">HWND</arg>
<arg name="iItem">int</arg>
<arg name="pati">PALTTABINFO</arg>
<arg name="pszItemText">LPSTR</arg>
<arg name="cchItemText">UINT</arg>
</function>
<function name="GetAltTabInfoW" ret="BOOL" convention="__stdcall">
<arg name="hwnd">HWND</arg>
<arg name="iItem">int</arg>
<arg name="pati">PALTTABINFO</arg>
<arg name="pszItemText">LPWSTR</arg>
<arg name="cchItemText">UINT</arg>
</function>

<function name="GetListBoxInfo" ret="DWORD" convention="__stdcall">
<arg name="hwnd">HWND</arg>
</function>

<function name="LockWorkStation" ret="BOOL" convention="__stdcall">
<arg name="void"> </arg>
</function>
<function name="UserHandleGrantAccess" ret="BOOL" convention="__stdcall">
<arg name="hUserHandle">HANDLE</arg>
<arg name="hJob">HANDLE</arg>
<arg name="bGrant">BOOL  </arg>
</function>

<struct name="HRAWINPUT__">
int unused; };
<typedef name="HRAWINPUT">HRAWINPUT__ *</typedef>

<struct name="tagRAWINPUTHEADER">
<field name="dwType">DWORD</field>
<field name="dwSize">DWORD</field>
<field name="hDevice">HANDLE</field>
<field name="wParam">WPARAM</field>
} RAWINPUTHEADER, *PRAWINPUTHEADER, *LPRAWINPUTHEADER;

<struct name="tagRAWMOUSE">
    
    USHORT usFlags;

    
    union {
        ULONG ulButtons;
        <struct>
<field name="usButtonFlags">USHORT</field>
<field name="usButtonData">USHORT</field>
        };
    };
    
    ULONG ulRawButtons;

    
    LONG lLastX;

    
    LONG lLastY;

    
    ULONG ulExtraInformation;

} RAWMOUSE, *PRAWMOUSE, *LPRAWMOUSE;
<struct name="tagRAWKEYBOARD">
    
    USHORT MakeCode;

    
    USHORT Flags;

    USHORT Reserved;

    
    USHORT VKey;
    UINT   Message;

    
    ULONG ExtraInformation;
} RAWKEYBOARD, *PRAWKEYBOARD, *LPRAWKEYBOARD;
<struct name="tagRAWHID">
<field name="dwSizeHid">DWORD</field>
<field name="dwCount">DWORD</field>
<field name="bRawData[1]">BYTE</field>
} RAWHID, *PRAWHID, *LPRAWHID;

<struct name="tagRAWINPUT">
<field name="header">RAWINPUTHEADER</field>
    union {
        RAWMOUSE    mouse;
        RAWKEYBOARD keyboard;
        RAWHID      hid;
    } data;
} RAWINPUT, *PRAWINPUT, *LPRAWINPUT;
<function name="GetRawInputData" ret="UINT" convention="__stdcall">
<arg name="hRawInput">HRAWINPUT</arg>
<arg name="uiCommand">UINT</arg>
<arg name="pData">LPVOID</arg>
<arg name="pcbSize">PUINT</arg>
<arg name="cbSizeHeader">UINT</arg>
</function>

<struct name="tagRID_DEVICE_INFO_MOUSE">
<field name="dwId">DWORD</field>
<field name="dwNumberOfButtons">DWORD</field>
<field name="dwSampleRate">DWORD</field>
<field name="fHasHorizontalWheel">BOOL</field>
</struct>
<typedefprev id="RID_DEVICE_INFO_MOUSE"/>
<typedefptrprev id="PRID_DEVICE_INFO_MOUSE"/>

<struct name="tagRID_DEVICE_INFO_KEYBOARD">
<field name="dwType">DWORD</field>
<field name="dwSubType">DWORD</field>
<field name="dwKeyboardMode">DWORD</field>
<field name="dwNumberOfFunctionKeys">DWORD</field>
<field name="dwNumberOfIndicators">DWORD</field>
<field name="dwNumberOfKeysTotal">DWORD</field>
</struct>
<typedefprev id="RID_DEVICE_INFO_KEYBOARD"/>
<typedefptrprev id="PRID_DEVICE_INFO_KEYBOARD"/>

<struct name="tagRID_DEVICE_INFO_HID">
<field name="dwVendorId">DWORD</field>
<field name="dwProductId">DWORD</field>
<field name="dwVersionNumber">DWORD</field>
    
    USHORT usUsagePage;
    USHORT usUsage;
} RID_DEVICE_INFO_HID, *PRID_DEVICE_INFO_HID;

<struct name="tagRID_DEVICE_INFO">
<field name="cbSize">DWORD</field>
<field name="dwType">DWORD</field>
    union {
        RID_DEVICE_INFO_MOUSE mouse;
        RID_DEVICE_INFO_KEYBOARD keyboard;
        RID_DEVICE_INFO_HID hid;
    };
} RID_DEVICE_INFO, *PRID_DEVICE_INFO, *LPRID_DEVICE_INFO;

<function name="GetRawInputDeviceInfoA" ret="UINT" convention="__stdcall">
<arg name="hDevice">HANDLE</arg>
<arg name="uiCommand">UINT</arg>
<arg name="pData">LPVOID</arg>
<arg name="pcbSize">PUINT</arg>
</function>
<function name="GetRawInputDeviceInfoW" ret="UINT" convention="__stdcall">
<arg name="hDevice">HANDLE</arg>
<arg name="uiCommand">UINT</arg>
<arg name="pData">LPVOID</arg>
<arg name="pcbSize">PUINT</arg>
</function>

<function name="GetRawInputBuffer" ret="UINT" convention="__stdcall">
<arg name="pData">PRAWINPUT</arg>
<arg name="pcbSize">PUINT</arg>
<arg name="cbSizeHeader">UINT</arg>
</function>

<struct name="tagRAWINPUTDEVICE">
<field name="usUsagePage">USHORT</field>
<field name="usUsage">USHORT</field>
<field name="dwFlags">DWORD</field>
<field name="hwndTarget">HWND</field>
} RAWINPUTDEVICE, *PRAWINPUTDEVICE, *LPRAWINPUTDEVICE;

typedef const RAWINPUTDEVICE* PCRAWINPUTDEVICE;
<function name="RegisterRawInputDevices" ret="BOOL" convention="__stdcall">
<arg name="pRawInputDevices">PCRAWINPUTDEVICE</arg>
<arg name="uiNumDevices">UINT</arg>
<arg name="cbSize">UINT</arg>
</function>

<function name="GetRegisteredRawInputDevices" ret="UINT" convention="__stdcall">
<arg name="pRawInputDevices">PRAWINPUTDEVICE</arg>
<arg name="puiNumDevices">PUINT</arg>
<arg name="cbSize">UINT</arg>
</function>
<struct name="tagRAWINPUTDEVICELIST">
<field name="hDevice">HANDLE</field>
<field name="dwType">DWORD</field>
</struct>
<typedefprev id="RAWINPUTDEVICELIST"/>
<typedefptrprev id="PRAWINPUTDEVICELIST"/>

<function name="GetRawInputDeviceList" ret="UINT" convention="__stdcall">
<arg name="pRawInputDeviceList">PRAWINPUTDEVICELIST</arg>
<arg name="puiNumDevices">PUINT</arg>
<arg name="cbSize">UINT</arg>
</function>

<function name="DefRawInputProc" ret="LRESULT" convention="__stdcall">
<arg name="paRawInput">PRAWINPUT*</arg>
<arg name="nInput">INT</arg>
<arg name="cbSizeHeader">UINT</arg>
</function>
<function name="ChangeWindowMessageFilter" ret="BOOL" convention="__stdcall">
<arg name="message">UINT</arg>
<arg name="dwFlag">DWORD</arg>
</function>

<function name="ShutdownBlockReasonCreate" ret="BOOL" convention="__stdcall">
<arg name="hWnd">HWND</arg>
<arg name="pwszReason">LPCWSTR</arg>
</function>

<function name="ShutdownBlockReasonQuery" ret="BOOL" convention="__stdcall">
<arg name="hWnd">HWND</arg>
<arg name="pwszBuff">LPWSTR</arg>

     DWORD *pcchBuff);

<function name="ShutdownBlockReasonDestroy" ret="BOOL" convention="__stdcall">
<arg name="hWnd">HWND</arg>
</function>
#line 1 "\\program files\\Microsoft SDKs\\Windows\\v6.0A\\Include\\winnls.h"
typedef DWORD LGRPID;
typedef DWORD LCTYPE;
typedef DWORD CALTYPE;
typedef DWORD CALID;

<struct name="_cpinfo">
<field name="MaxCharSize">UINT</field>
<field name="DefaultChar[2]">BYTE</field>
<field name="LeadByte[12]">BYTE</field>
</struct>
<typedefprev id="CPINFO"/>
<typedefptrprev id="LPCPINFO"/>

<struct name="_cpinfoexA">
<field name="MaxCharSize">UINT</field>
<field name="DefaultChar[2]">BYTE</field>
<field name="LeadByte[12]">BYTE</field>
<field name="UnicodeDefaultChar">WCHAR</field>
<field name="CodePage">UINT</field>
<field name="CodePageName[260]">CHAR</field>
</struct>
<typedefprev id="CPINFOEXA"/>
<typedefptrprev id="LPCPINFOEXA"/>
<struct name="_cpinfoexW">
<field name="MaxCharSize">UINT</field>
<field name="DefaultChar[2]">BYTE</field>
<field name="LeadByte[12]">BYTE</field>
<field name="UnicodeDefaultChar">WCHAR</field>
<field name="CodePage">UINT</field>
<field name="CodePageName[260]">WCHAR</field>
</struct>
<typedefprev id="CPINFOEXW"/>
<typedefptrprev id="LPCPINFOEXW"/>

typedef CPINFOEXA CPINFOEX;
typedef LPCPINFOEXA LPCPINFOEX;
<struct name="_numberfmtA">
<field name="NumDigits">UINT</field>
<field name="LeadingZero">UINT</field>
<field name="Grouping">UINT</field>
<field name="lpDecimalSep">LPSTR</field>
<field name="lpThousandSep">LPSTR</field>
<field name="NegativeOrder">UINT</field>
</struct>
<typedefprev id="NUMBERFMTA"/>
<typedefptrprev id="LPNUMBERFMTA"/>
<struct name="_numberfmtW">
<field name="NumDigits">UINT</field>
<field name="LeadingZero">UINT</field>
<field name="Grouping">UINT</field>
<field name="lpDecimalSep">LPWSTR</field>
<field name="lpThousandSep">LPWSTR</field>
<field name="NegativeOrder">UINT</field>
</struct>
<typedefprev id="NUMBERFMTW"/>
<typedefptrprev id="LPNUMBERFMTW"/>

typedef NUMBERFMTA NUMBERFMT;
typedef LPNUMBERFMTA LPNUMBERFMT;
<struct name="_currencyfmtA">
<field name="NumDigits">UINT</field>
<field name="LeadingZero">UINT</field>
<field name="Grouping">UINT</field>
<field name="lpDecimalSep">LPSTR</field>
<field name="lpThousandSep">LPSTR</field>
<field name="NegativeOrder">UINT</field>
<field name="PositiveOrder">UINT</field>
<field name="lpCurrencySymbol">LPSTR</field>
</struct>
<typedefprev id="CURRENCYFMTA"/>
<typedefptrprev id="LPCURRENCYFMTA"/>
<struct name="_currencyfmtW">
<field name="NumDigits">UINT</field>
<field name="LeadingZero">UINT</field>
<field name="Grouping">UINT</field>
<field name="lpDecimalSep">LPWSTR</field>
<field name="lpThousandSep">LPWSTR</field>
<field name="NegativeOrder">UINT</field>
<field name="PositiveOrder">UINT</field>
<field name="lpCurrencySymbol">LPWSTR</field>
</struct>
<typedefprev id="CURRENCYFMTW"/>
<typedefptrprev id="LPCURRENCYFMTW"/>

typedef CURRENCYFMTA CURRENCYFMT;
typedef LPCURRENCYFMTA LPCURRENCYFMT;

enum SYSNLS_FUNCTION{
    COMPARE_STRING    =  0x0001,
};
typedef DWORD NLS_FUNCTION;

<struct name="_nlsversioninfo">
<field name="dwNLSVersionInfoSize">DWORD</field>
<field name="dwNLSVersion">DWORD</field>
<field name="dwDefinedVersion">DWORD</field>
</struct>
<typedefprev id="NLSVERSIONINFO"/>
<typedefptrprev id="LPNLSVERSIONINFO"/>

<struct name="_nlsversioninfoex">
<field name="dwNLSVersionInfoSize">DWORD</field>
<field name="dwNLSVersion">DWORD</field>
<field name="dwDefinedVersion">DWORD</field>
<field name="dwEffectiveId">DWORD</field>
<field name="guidCustomVersion">GUID</field>
</struct>
<typedefprev id="NLSVERSIONINFOEX"/>
<typedefptrprev id="LPNLSVERSIONINFOEX"/>
typedef LONG    GEOID;
typedef DWORD   GEOTYPE;
typedef DWORD   GEOCLASS;
enum SYSGEOTYPE {
    GEO_NATION      =       0x0001,
    GEO_LATITUDE    =       0x0002,
    GEO_LONGITUDE   =       0x0003,
    GEO_ISO2        =       0x0004,
    GEO_ISO3        =       0x0005,
    GEO_RFC1766     =       0x0006,
    GEO_LCID        =       0x0007,
    GEO_FRIENDLYNAME=       0x0008,
    GEO_OFFICIALNAME=       0x0009,
    GEO_TIMEZONES   =       0x000A,
    GEO_OFFICIALLANGUAGES = 0x000B,
};
enum SYSGEOCLASS {
    GEOCLASS_NATION  = 16,
    GEOCLASS_REGION  = 14,
};

typedef enum _NORM_FORM {
    NormalizationOther  = 0,       
    NormalizationC      = 0x1,     
    NormalizationD      = 0x2,     
    NormalizationKC     = 0x5,     
                                   
    NormalizationKD     = 0x6      
                                   
} NORM_FORM;
typedef BOOL (__stdcall* LANGUAGEGROUP_ENUMPROCA)(LGRPID, LPSTR, LPSTR, DWORD, LONG_PTR);
typedef BOOL (__stdcall* LANGGROUPLOCALE_ENUMPROCA)(LGRPID, LCID, LPSTR, LONG_PTR);
typedef BOOL (__stdcall* UILANGUAGE_ENUMPROCA)(LPSTR, LONG_PTR);
typedef BOOL (__stdcall* LOCALE_ENUMPROCA)(LPSTR);
typedef BOOL (__stdcall* CODEPAGE_ENUMPROCA)(LPSTR);
typedef BOOL (__stdcall* DATEFMT_ENUMPROCA)(LPSTR);
typedef BOOL (__stdcall* DATEFMT_ENUMPROCEXA)(LPSTR, CALID);
typedef BOOL (__stdcall* TIMEFMT_ENUMPROCA)(LPSTR);
typedef BOOL (__stdcall* CALINFO_ENUMPROCA)(LPSTR);
typedef BOOL (__stdcall* CALINFO_ENUMPROCEXA)(LPSTR, CALID);

typedef BOOL (__stdcall* LANGUAGEGROUP_ENUMPROCW)(LGRPID, LPWSTR, LPWSTR, DWORD, LONG_PTR);
typedef BOOL (__stdcall* LANGGROUPLOCALE_ENUMPROCW)(LGRPID, LCID, LPWSTR, LONG_PTR);
typedef BOOL (__stdcall* UILANGUAGE_ENUMPROCW)(LPWSTR, LONG_PTR);
typedef BOOL (__stdcall* LOCALE_ENUMPROCW)(LPWSTR);
typedef BOOL (__stdcall* CODEPAGE_ENUMPROCW)(LPWSTR);
typedef BOOL (__stdcall* DATEFMT_ENUMPROCW)(LPWSTR);
typedef BOOL (__stdcall* DATEFMT_ENUMPROCEXW)(LPWSTR, CALID);
typedef BOOL (__stdcall* TIMEFMT_ENUMPROCW)(LPWSTR);
typedef BOOL (__stdcall* CALINFO_ENUMPROCW)(LPWSTR);
typedef BOOL (__stdcall* CALINFO_ENUMPROCEXW)(LPWSTR, CALID);
typedef BOOL (__stdcall* GEO_ENUMPROC)(GEOID);
<struct name="_FILEMUIINFO">
<field name="dwSize">DWORD</field>
<field name="dwVersion">DWORD</field>
<field name="dwFileType">DWORD</field>
<field name="pChecksum[16]">BYTE</field>
<field name="pServiceChecksum[16]">BYTE</field>
<field name="dwLanguageNameOffset">DWORD</field>
<field name="dwTypeIDMainSize">DWORD</field>
<field name="dwTypeIDMainOffset">DWORD</field>
<field name="dwTypeNameMainOffset">DWORD</field>
<field name="dwTypeIDMUISize">DWORD</field>
<field name="dwTypeIDMUIOffset">DWORD</field>
<field name="dwTypeNameMUIOffset">DWORD</field>
<field name="abBuffer[8]">BYTE</field>
</struct>
<typedefprev id="FILEMUIINFO"/>
<typedefptrprev id="PFILEMUIINFO"/>

<function name="IsValidCodePage" ret="BOOL" convention="__stdcall">
<arg name="CodePage">UINT </arg>
</function>

<function name="GetACP" ret="UINT" convention="__stdcall">
void);

<function name="GetOEMCP" ret="UINT" convention="__stdcall">
void);

<function name="GetCPInfo" ret="BOOL" convention="__stdcall">
<arg name="CodePage">UINT      </arg>
<arg name="lpCPInfo">LPCPINFO </arg>
</function>

<function name="GetCPInfoExA" ret="BOOL" convention="__stdcall">
<arg name="CodePage">UINT         </arg>
<arg name="dwFlags">DWORD        </arg>
<arg name="lpCPInfoEx">LPCPINFOEXA </arg>
</function>
<function name="GetCPInfoExW" ret="BOOL" convention="__stdcall">
<arg name="CodePage">UINT         </arg>
<arg name="dwFlags">DWORD        </arg>
<arg name="lpCPInfoEx">LPCPINFOEXW </arg>
</function>
<function name="IsDBCSLeadByte" ret="BOOL" convention="__stdcall">
<arg name="TestChar">BYTE </arg>
</function>

<function name="IsDBCSLeadByteEx" ret="BOOL" convention="__stdcall">
<arg name="CodePage">UINT </arg>
<arg name="TestChar">BYTE </arg>
</function>

<function name="MultiByteToWideChar" ret="int" convention="__stdcall">
<arg name="CodePage">UINT    </arg>
<arg name="dwFlags">DWORD   </arg>
<arg name="lpMultiByteStr">LPCSTR  </arg>
<arg name="cbMultiByte">int     </arg>
<arg name="lpWideCharStr">LPWSTR </arg>
<arg name="cchWideChar">int     </arg>
</function>

<function name="WideCharToMultiByte" ret="int" convention="__stdcall">
<arg name="CodePage">UINT    </arg>
<arg name="dwFlags">DWORD   </arg>
<arg name="lpWideCharStr">LPCWSTR </arg>
<arg name="cchWideChar">int     </arg>
<arg name="lpMultiByteStr">LPSTR  </arg>
<arg name="cbMultiByte">int     </arg>
<arg name="lpDefaultChar">LPCSTR  </arg>
<arg name="lpUsedDefaultChar">LPBOOL </arg>
</function>

<function name="CompareStringA" ret="int" convention="__stdcall">
<arg name="Locale">LCID    </arg>
<arg name="dwCmpFlags">DWORD   </arg>
<arg name="lpString1">LPCSTR </arg>
<arg name="cchCount1">int     </arg>
<arg name="lpString2">LPCSTR </arg>
<arg name="cchCount2">int     </arg>
</function>
<function name="CompareStringW" ret="int" convention="__stdcall">
<arg name="Locale">LCID    </arg>
<arg name="dwCmpFlags">DWORD   </arg>
<arg name="lpString1">LPCWSTR </arg>
<arg name="cchCount1">int     </arg>
<arg name="lpString2">LPCWSTR </arg>
<arg name="cchCount2">int     </arg>
</function>
<function name="FindNLSString" ret="int " convention="__stdcall">
<arg name="Locale">LCID</arg>
<arg name="dwFindNLSStringFlags">DWORD</arg>
<arg name="lpStringSource">LPCWSTR</arg>
<arg name="cchSource">int</arg>
<arg name="lpStringValue">LPCWSTR</arg>
<arg name="cchValue">int</arg>
<arg name="pcchFound">LPINT</arg>
</function>
<function name="LCMapStringA" ret="int" convention="__stdcall">
<arg name="Locale">LCID    </arg>
<arg name="dwMapFlags">DWORD   </arg>
<arg name="lpSrcStr">LPCSTR </arg>
<arg name="cchSrc">int     </arg>
<arg name="lpDestStr">LPSTR </arg>
<arg name="cchDest">int     </arg>
</function>
<function name="LCMapStringW" ret="int" convention="__stdcall">
<arg name="Locale">LCID    </arg>
<arg name="dwMapFlags">DWORD   </arg>
<arg name="lpSrcStr">LPCWSTR </arg>
<arg name="cchSrc">int     </arg>
<arg name="lpDestStr">LPWSTR </arg>
<arg name="cchDest">int     </arg>
</function>
<function name="GetLocaleInfoA" ret="int" convention="__stdcall">
<arg name="Locale">LCID    </arg>
<arg name="LCType">LCTYPE  </arg>
<arg name="lpLCData">LPSTR </arg>
<arg name="cchData">int     </arg>
</function>
<function name="GetLocaleInfoW" ret="int" convention="__stdcall">
<arg name="Locale">LCID    </arg>
<arg name="LCType">LCTYPE  </arg>
<arg name="lpLCData">LPWSTR </arg>
<arg name="cchData">int     </arg>
</function>
<function name="SetLocaleInfoA" ret="BOOL" convention="__stdcall">
<arg name="Locale">LCID    </arg>
<arg name="LCType">LCTYPE  </arg>
<arg name="lpLCData">LPCSTR </arg>
</function>
<function name="SetLocaleInfoW" ret="BOOL" convention="__stdcall">
<arg name="Locale">LCID    </arg>
<arg name="LCType">LCTYPE  </arg>
<arg name="lpLCData">LPCWSTR </arg>
</function>

<function name="GetCalendarInfoA" ret="int" convention="__stdcall">
<arg name="Locale">LCID    </arg>
<arg name="Calendar">CALID   </arg>
<arg name="CalType">CALTYPE </arg>
<arg name="lpCalData">LPSTR  </arg>
<arg name="cchData">int     </arg>
<arg name="lpValue">LPDWORD </arg>
</function>
<function name="GetCalendarInfoW" ret="int" convention="__stdcall">
<arg name="Locale">LCID    </arg>
<arg name="Calendar">CALID   </arg>
<arg name="CalType">CALTYPE </arg>
<arg name="lpCalData">LPWSTR  </arg>
<arg name="cchData">int     </arg>
<arg name="lpValue">LPDWORD </arg>
</function>
<function name="SetCalendarInfoA" ret="BOOL" convention="__stdcall">
<arg name="Locale">LCID    </arg>
<arg name="Calendar">CALID   </arg>
<arg name="CalType">CALTYPE </arg>
<arg name="lpCalData">LPCSTR </arg>
</function>
<function name="SetCalendarInfoW" ret="BOOL" convention="__stdcall">
<arg name="Locale">LCID    </arg>
<arg name="Calendar">CALID   </arg>
<arg name="CalType">CALTYPE </arg>
<arg name="lpCalData">LPCWSTR </arg>
</function>

<function name="LCIDToLocaleName" ret="int" convention="__stdcall">
<arg name="Locale">LCID    </arg>
<arg name="lpName">LPWSTR </arg>
<arg name="cchName">int     </arg>
<arg name="dwFlags">DWORD   </arg>
</function>

<function name="LocaleNameToLCID" ret="LCID" convention="__stdcall">
<arg name="lpName">LPCWSTR</arg>
<arg name="dwFlags">DWORD</arg>
</function>
    

<function name="GetTimeFormatA" ret="int" convention="__stdcall">
<arg name="Locale">LCID            </arg>
<arg name="dwFlags">DWORD           </arg>

     const SYSTEMTIME *lpTime,
     LPCSTR          lpFormat,
     LPSTR          lpTimeStr,
     int              cchTime);
<function name="GetTimeFormatW" ret="int" convention="__stdcall">
<arg name="Locale">LCID            </arg>
<arg name="dwFlags">DWORD           </arg>

     const SYSTEMTIME *lpTime,
     LPCWSTR          lpFormat,
     LPWSTR          lpTimeStr,
     int              cchTime);

<function name="GetDurationFormat" ret="int" convention="__stdcall">
<arg name="Locale">LCID            </arg>
<arg name="dwFlags">DWORD           </arg>

     const SYSTEMTIME *lpDuration,
     ULONGLONG ullDuration,
     LPCWSTR          lpFormat,
     LPWSTR          lpDurationStr,
     int              cchDuration);

<function name="GetDateFormatA" ret="int" convention="__stdcall">
<arg name="Locale">LCID            </arg>
<arg name="dwFlags">DWORD           </arg>

     const SYSTEMTIME *lpDate,
     LPCSTR          lpFormat,
     LPSTR          lpDateStr,
     int              cchDate);
<function name="GetDateFormatW" ret="int" convention="__stdcall">
<arg name="Locale">LCID            </arg>
<arg name="dwFlags">DWORD           </arg>

     const SYSTEMTIME *lpDate,
     LPCWSTR          lpFormat,
     LPWSTR          lpDateStr,
     int              cchDate);
<function name="GetNumberFormatA" ret="int" convention="__stdcall">
<arg name="Locale">LCID            </arg>
<arg name="dwFlags">DWORD           </arg>
<arg name="lpValue">LPCSTR         </arg>

     const NUMBERFMTA *lpFormat,
     LPSTR          lpNumberStr,
     int              cchNumber);
<function name="GetNumberFormatW" ret="int" convention="__stdcall">
<arg name="Locale">LCID            </arg>
<arg name="dwFlags">DWORD           </arg>
<arg name="lpValue">LPCWSTR         </arg>

     const NUMBERFMTW *lpFormat,
     LPWSTR          lpNumberStr,
     int              cchNumber);
<function name="GetCurrencyFormatA" ret="int" convention="__stdcall">
<arg name="Locale">LCID              </arg>
<arg name="dwFlags">DWORD             </arg>
<arg name="lpValue">LPCSTR           </arg>

     const CURRENCYFMTA *lpFormat,
     LPSTR            lpCurrencyStr,
     int                cchCurrency);
<function name="GetCurrencyFormatW" ret="int" convention="__stdcall">
<arg name="Locale">LCID              </arg>
<arg name="dwFlags">DWORD             </arg>
<arg name="lpValue">LPCWSTR           </arg>

     const CURRENCYFMTW *lpFormat,
     LPWSTR            lpCurrencyStr,
     int                cchCurrency);
<function name="EnumCalendarInfoA" ret="BOOL" convention="__stdcall">
<arg name="lpCalInfoEnumProc">CALINFO_ENUMPROCA</arg>
<arg name="Locale">LCID             </arg>
<arg name="Calendar">CALID            </arg>
<arg name="CalType">CALTYPE          </arg>
</function>
<function name="EnumCalendarInfoW" ret="BOOL" convention="__stdcall">
<arg name="lpCalInfoEnumProc">CALINFO_ENUMPROCW</arg>
<arg name="Locale">LCID             </arg>
<arg name="Calendar">CALID            </arg>
<arg name="CalType">CALTYPE          </arg>
</function>

<function name="EnumCalendarInfoExA" ret="BOOL" convention="__stdcall">
<arg name="lpCalInfoEnumProcEx">CALINFO_ENUMPROCEXA</arg>
<arg name="Locale">LCID               </arg>
<arg name="Calendar">CALID              </arg>
<arg name="CalType">CALTYPE            </arg>
</function>
<function name="EnumCalendarInfoExW" ret="BOOL" convention="__stdcall">
<arg name="lpCalInfoEnumProcEx">CALINFO_ENUMPROCEXW</arg>
<arg name="Locale">LCID               </arg>
<arg name="Calendar">CALID              </arg>
<arg name="CalType">CALTYPE            </arg>
</function>
<function name="EnumTimeFormatsA" ret="BOOL" convention="__stdcall">
<arg name="lpTimeFmtEnumProc">TIMEFMT_ENUMPROCA</arg>
<arg name="Locale">LCID             </arg>
<arg name="dwFlags">DWORD            </arg>
</function>
<function name="EnumTimeFormatsW" ret="BOOL" convention="__stdcall">
<arg name="lpTimeFmtEnumProc">TIMEFMT_ENUMPROCW</arg>
<arg name="Locale">LCID             </arg>
<arg name="dwFlags">DWORD            </arg>
</function>
<function name="EnumDateFormatsA" ret="BOOL" convention="__stdcall">
<arg name="lpDateFmtEnumProc">DATEFMT_ENUMPROCA</arg>
<arg name="Locale">LCID             </arg>
<arg name="dwFlags">DWORD            </arg>
</function>
<function name="EnumDateFormatsW" ret="BOOL" convention="__stdcall">
<arg name="lpDateFmtEnumProc">DATEFMT_ENUMPROCW</arg>
<arg name="Locale">LCID             </arg>
<arg name="dwFlags">DWORD            </arg>
</function>

<function name="EnumDateFormatsExA" ret="BOOL" convention="__stdcall">
<arg name="lpDateFmtEnumProcEx">DATEFMT_ENUMPROCEXA</arg>
<arg name="Locale">LCID               </arg>
<arg name="dwFlags">DWORD              </arg>
</function>
<function name="EnumDateFormatsExW" ret="BOOL" convention="__stdcall">
<arg name="lpDateFmtEnumProcEx">DATEFMT_ENUMPROCEXW</arg>
<arg name="Locale">LCID               </arg>
<arg name="dwFlags">DWORD              </arg>
</function>

<function name="IsValidLanguageGroup" ret="BOOL" convention="__stdcall">
<arg name="LanguageGroup">LGRPID </arg>
<arg name="dwFlags">DWORD  </arg>
</function>

<function name="GetNLSVersion" ret="BOOL" convention="__stdcall">
<arg name="Function">NLS_FUNCTION    </arg>
<arg name="Locale">LCID            </arg>
<arg name="lpVersionInformation">LPNLSVERSIONINFO</arg>
</function>

<function name="IsNLSDefinedString" ret="BOOL" convention="__stdcall">
<arg name="Function">NLS_FUNCTION    </arg>
<arg name="dwFlags">DWORD           </arg>
<arg name="lpVersionInformation">LPNLSVERSIONINFO</arg>
<arg name="lpString">LPCWSTR         </arg>
<arg name="cchStr">INT             </arg>
</function>

<function name="IsValidLocale" ret="BOOL" convention="__stdcall">
<arg name="Locale">LCID  </arg>
<arg name="dwFlags">DWORD </arg>
</function>

<function name="GetGeoInfoA" ret="int" convention="__stdcall">
<arg name="Location">GEOID      </arg>
<arg name="GeoType">GEOTYPE    </arg>
<arg name="lpGeoData">LPSTR    </arg>
<arg name="cchData">int        </arg>
<arg name="LangId">LANGID     </arg>
</function>
<function name="GetGeoInfoW" ret="int" convention="__stdcall">
<arg name="Location">GEOID      </arg>
<arg name="GeoType">GEOTYPE    </arg>
<arg name="lpGeoData">LPWSTR    </arg>
<arg name="cchData">int        </arg>
<arg name="LangId">LANGID     </arg>
</function>
<function name="EnumSystemGeoID" ret="BOOL" convention="__stdcall">
<arg name="GeoClass">GEOCLASS       </arg>
<arg name="ParentGeoId">GEOID          </arg>
<arg name="lpGeoEnumProc">GEO_ENUMPROC   </arg>
</function>

<function name="GetUserGeoID" ret="GEOID" convention="__stdcall">
<arg name="GeoClass">GEOCLASS   </arg>
</function>

<function name="SetUserGeoID" ret="BOOL" convention="__stdcall">
<arg name="GeoId">GEOID      </arg>
</function>

<function name="ConvertDefaultLocale" ret="LCID" convention="__stdcall">
<arg name="Locale">LCID  </arg>
</function>

<function name="GetThreadLocale" ret="LCID" convention="__stdcall">
void);

<function name="SetThreadLocale" ret="BOOL" convention="__stdcall">
<arg name="Locale">LCID </arg>
</function>
<function name="GetSystemDefaultUILanguage" ret="LANGID" convention="__stdcall">
void);

<function name="GetUserDefaultUILanguage" ret="LANGID" convention="__stdcall">
void);

<function name="GetSystemDefaultLangID" ret="LANGID" convention="__stdcall">
void);

<function name="GetUserDefaultLangID" ret="LANGID" convention="__stdcall">
void);

<function name="GetSystemDefaultLCID" ret="LCID" convention="__stdcall">
void);

<function name="GetUserDefaultLCID" ret="LCID" convention="__stdcall">
void);
<function name="SetThreadUILanguage" ret="LANGID" convention="__stdcall">
<arg name="LangId">LANGID</arg>
</function>

<function name="GetThreadUILanguage" ret="LANGID" convention="__stdcall">
void);
<function name="GetUserPreferredUILanguages" ret="BOOL" convention="__stdcall">
<arg name="dwFlags">DWORD</arg>
<arg name="pulNumLanguages">PULONG</arg>
<arg name="pwszLanguagesBuffer">PWSTR</arg>

     PULONG pcchLanguagesBuffer
);
<function name="GetSystemPreferredUILanguages" ret="BOOL" convention="__stdcall">
<arg name="dwFlags">DWORD</arg>
<arg name="pulNumLanguages">PULONG</arg>
<arg name="pwszLanguagesBuffer">PWSTR</arg>

     PULONG pcchLanguagesBuffer
);
<function name="GetThreadPreferredUILanguages" ret="BOOL" convention="__stdcall">
<arg name="dwFlags">DWORD</arg>
<arg name="pulNumLanguages">PULONG</arg>
<arg name="pwszLanguagesBuffer">PWSTR</arg>

     PULONG pcchLanguagesBuffer
);
<function name="SetThreadPreferredUILanguages" ret="BOOL" convention="__stdcall">
<arg name="dwFlags">DWORD</arg>
<arg name="pwszLanguagesBuffer">PCWSTR</arg>

       PULONG pulNumLanguages
);

<function name="GetFileMUIInfo" ret="BOOL" convention="__stdcall">
<arg name="dwFlags">DWORD          </arg>
<arg name="pcwszFilePath">PCWSTR         </arg>
<arg name="pFileMUIInfo">PFILEMUIINFO   </arg>
<arg name="pcbFileMUIInfo">DWORD*         </arg>
</function>

<function name="GetFileMUIPath" ret="BOOL" convention="__stdcall">
<arg name="dwFlags">DWORD     </arg>

     PCWSTR     pcwszFilePath ,
       PWSTR pwszLanguage,
     PULONG  pcchLanguage,
     PWSTR pwszFileMUIPath,
             PULONG pcchFileMUIPath,               
             PULONGLONG pululEnumerator
);
<function name="GetUILanguageInfo" ret="BOOL" convention="__stdcall">
<arg name="dwFlags">DWORD</arg>
<arg name="pwmszLanguage">PCWSTR</arg>
<arg name="pwszFallbackLanguages">PWSTR</arg>
<arg name="pcchFallbackLanguages">PDWORD</arg>

     PDWORD pAttributes
);
<function name="NotifyUILanguageChange" ret="BOOL" convention="__stdcall">
<arg name="dwFlags">DWORD</arg>
<arg name="pcwstrNewLanguage">PCWSTR</arg>
<arg name="pcwstrPreviousLanguage">PCWSTR</arg>
<arg name="dwReserved">DWORD</arg>

       PDWORD pdwStatusRtrn
);

<function name="GetStringTypeExA" ret="BOOL" convention="__stdcall">
<arg name="Locale">LCID      </arg>
<arg name="dwInfoType">DWORD     </arg>
<arg name="lpSrcStr">LPCSTR  </arg>
<arg name="cchSrc">int       </arg>
<arg name="lpCharType">LPWORD    </arg>
</function>
<function name="GetStringTypeExW" ret="BOOL" convention="__stdcall">
<arg name="Locale">LCID      </arg>
<arg name="dwInfoType">DWORD     </arg>
<arg name="lpSrcStr">LPCWSTR  </arg>
<arg name="cchSrc">int       </arg>
<arg name="lpCharType">LPWORD    </arg>
</function>

<function name="GetStringTypeA" ret="BOOL" convention="__stdcall">
<arg name="Locale">LCID    </arg>
<arg name="dwInfoType">DWORD   </arg>
<arg name="lpSrcStr">LPCSTR  </arg>
<arg name="cchSrc">int     </arg>
<arg name="lpCharType">LPWORD </arg>
</function>

<function name="GetStringTypeW" ret="BOOL" convention="__stdcall">
<arg name="dwInfoType">DWORD   </arg>
<arg name="lpSrcStr">LPCWSTR </arg>
<arg name="cchSrc">int     </arg>
<arg name="lpCharType">LPWORD </arg>
</function>
<function name="FoldStringA" ret="int" convention="__stdcall">
<arg name="dwMapFlags">DWORD   </arg>
<arg name="lpSrcStr">LPCSTR </arg>
<arg name="cchSrc">int     </arg>
<arg name="lpDestStr">LPSTR </arg>
<arg name="cchDest">int     </arg>
</function>
<function name="FoldStringW" ret="int" convention="__stdcall">
<arg name="dwMapFlags">DWORD   </arg>
<arg name="lpSrcStr">LPCWSTR </arg>
<arg name="cchSrc">int     </arg>
<arg name="lpDestStr">LPWSTR </arg>
<arg name="cchDest">int     </arg>
</function>
<function name="EnumSystemLanguageGroupsA" ret="BOOL" convention="__stdcall">
<arg name="lpLanguageGroupEnumProc">LANGUAGEGROUP_ENUMPROCA</arg>
<arg name="dwFlags">DWORD                  </arg>
<arg name="lParam">LONG_PTR               </arg>
</function>
<function name="EnumSystemLanguageGroupsW" ret="BOOL" convention="__stdcall">
<arg name="lpLanguageGroupEnumProc">LANGUAGEGROUP_ENUMPROCW</arg>
<arg name="dwFlags">DWORD                  </arg>
<arg name="lParam">LONG_PTR               </arg>
</function>
<function name="EnumLanguageGroupLocalesA" ret="BOOL" convention="__stdcall">
<arg name="lpLangGroupLocaleEnumProc">LANGGROUPLOCALE_ENUMPROCA</arg>
<arg name="LanguageGroup">LGRPID                   </arg>
<arg name="dwFlags">DWORD                    </arg>
<arg name="lParam">LONG_PTR                 </arg>
</function>
<function name="EnumLanguageGroupLocalesW" ret="BOOL" convention="__stdcall">
<arg name="lpLangGroupLocaleEnumProc">LANGGROUPLOCALE_ENUMPROCW</arg>
<arg name="LanguageGroup">LGRPID                   </arg>
<arg name="dwFlags">DWORD                    </arg>
<arg name="lParam">LONG_PTR                 </arg>
</function>
<function name="EnumUILanguagesA" ret="BOOL" convention="__stdcall">
<arg name="lpUILanguageEnumProc">UILANGUAGE_ENUMPROCA</arg>
<arg name="dwFlags">DWORD               </arg>
<arg name="lParam">LONG_PTR            </arg>
</function>
<function name="EnumUILanguagesW" ret="BOOL" convention="__stdcall">
<arg name="lpUILanguageEnumProc">UILANGUAGE_ENUMPROCW</arg>
<arg name="dwFlags">DWORD               </arg>
<arg name="lParam">LONG_PTR            </arg>
</function>

<function name="EnumSystemLocalesA" ret="BOOL" convention="__stdcall">
<arg name="lpLocaleEnumProc">LOCALE_ENUMPROCA</arg>
<arg name="dwFlags">DWORD           </arg>
</function>
<function name="EnumSystemLocalesW" ret="BOOL" convention="__stdcall">
<arg name="lpLocaleEnumProc">LOCALE_ENUMPROCW</arg>
<arg name="dwFlags">DWORD           </arg>
</function>
<function name="EnumSystemCodePagesA" ret="BOOL" convention="__stdcall">
<arg name="lpCodePageEnumProc">CODEPAGE_ENUMPROCA</arg>
<arg name="dwFlags">DWORD             </arg>
</function>
<function name="EnumSystemCodePagesW" ret="BOOL" convention="__stdcall">
<arg name="lpCodePageEnumProc">CODEPAGE_ENUMPROCW</arg>
<arg name="dwFlags">DWORD             </arg>
</function>
<function name="NormalizeString" ret="int" convention="__stdcall">
<arg name="NormForm">NORM_FORM</arg>
<arg name="lpSrcString">LPCWSTR  </arg>
<arg name="cwSrcLength">int      </arg>
<arg name="lpDstString">LPWSTR   </arg>

                                                  int       cwDstLength );

<function name="IsNormalizedString" ret="BOOL" convention="__stdcall">
<arg name="NormForm">NORM_FORM</arg>
<arg name="lpString">LPCWSTR  </arg>

                                              int       cwLength );

<function name="IdnToAscii" ret="int" convention="__stdcall">
<arg name="dwFlags">DWORD   </arg>
<arg name="lpUnicodeCharStr">LPCWSTR </arg>
<arg name="cchUnicodeChar">int     </arg>
<arg name="lpASCIICharStr">LPWSTR  </arg>
<arg name="cchASCIIChar">int     </arg>
</function>

<function name="IdnToNameprepUnicode" ret="int" convention="__stdcall">
<arg name="dwFlags">DWORD  </arg>
<arg name="lpUnicodeCharStr">LPCWSTR</arg>
<arg name="cchUnicodeChar">int    </arg>
<arg name="lpNameprepCharStr">LPWSTR </arg>
<arg name="cchNameprepChar">int    </arg>
</function>

<function name="IdnToUnicode" ret="int" convention="__stdcall">
<arg name="dwFlags">DWORD  </arg>
<arg name="lpASCIICharStr">LPCWSTR</arg>
<arg name="cchASCIIChar">int    </arg>
<arg name="lpUnicodeCharStr">LPWSTR </arg>
<arg name="cchUnicodeChar">int    </arg>
</function>

<function name="VerifyScripts" ret="BOOL" convention="__stdcall">
<arg name="dwFlags">DWORD  </arg>
            
        LPCWSTR lpLocaleScripts,    
        int     cchLocaleScripts,   
        LPCWSTR lpTestScripts,      
        int     cchTestScripts);    

<function name="GetStringScripts" ret="int" convention="__stdcall">
<arg name="dwFlags">DWORD  </arg>
        
                                 LPCWSTR lpString,       
                                 int     cchString,      
         LPWSTR  lpScripts,      
                                 int     cchScripts);    
    

<function name="GetLocaleInfoEx" ret="int " convention="__stdcall">
<arg name="lpLocaleName">LPCWSTR</arg>
<arg name="LCType">LCTYPE</arg>
<arg name="lpLCData">LPWSTR</arg>

     int cchData
);

<function name="GetCalendarInfoEx" ret="int " convention="__stdcall">
<arg name="lpLocaleName">LPCWSTR</arg>
<arg name="Calendar">CALID</arg>
<arg name="lpReserved">LPCWSTR</arg>
<arg name="CalType">CALTYPE</arg>
<arg name="lpCalData">LPWSTR</arg>
<arg name="cchData">int</arg>

     LPDWORD lpValue
);
<function name="GetTimeFormatEx" ret="int " convention="__stdcall">
<arg name="lpLocaleName">LPCWSTR</arg>
<arg name="dwFlags">DWORD</arg>

     const SYSTEMTIME *lpTime,
     LPCWSTR lpFormat,
     LPWSTR lpTimeStr,
     int cchTime
);

<function name="GetDateFormatEx" ret="int " convention="__stdcall">
<arg name="lpLocaleName">LPCWSTR</arg>
<arg name="dwFlags">DWORD</arg>

     const SYSTEMTIME *lpDate,
     LPCWSTR lpFormat,
     LPWSTR lpDateStr,
     int cchDate,
     LPCWSTR lpCalendar
);

<function name="GetDurationFormatEx" ret="int " convention="__stdcall">
<arg name="lpLocaleName">LPCWSTR</arg>
<arg name="dwFlags">DWORD</arg>

     const SYSTEMTIME *lpDuration,
     ULONGLONG ullDuration,
     LPCWSTR lpFormat,
     LPWSTR lpDurationStr,
     int cchDuration
);

<function name="GetNumberFormatEx" ret="int " convention="__stdcall">
<arg name="lpLocaleName">LPCWSTR</arg>
<arg name="dwFlags">DWORD</arg>
<arg name="lpValue">LPCWSTR</arg>

     const NUMBERFMTW *lpFormat,
     LPWSTR lpNumberStr,
     int cchNumber
);

<function name="GetCurrencyFormatEx" ret="int " convention="__stdcall">
<arg name="lpLocaleName">LPCWSTR</arg>
<arg name="dwFlags">DWORD</arg>
<arg name="lpValue">LPCWSTR</arg>

     const CURRENCYFMTW *lpFormat,
     LPWSTR lpCurrencyStr,
     int cchCurrency
);

<function name="GetUserDefaultLocaleName" ret="int" convention="__stdcall">
<arg name="lpLocaleName">LPWSTR</arg>

     int cchLocaleName
);

<function name="GetSystemDefaultLocaleName" ret="int" convention="__stdcall">
<arg name="lpLocaleName">LPWSTR</arg>

     int cchLocaleName
);

<function name="GetNLSVersionEx" ret="BOOL " convention="__stdcall">
<arg name="function">NLS_FUNCTION</arg>
<arg name="lpLocaleName">LPCWSTR</arg>

     LPNLSVERSIONINFOEX lpVersionInformation
);

<function name="CompareStringEx" ret="int " convention="__stdcall">
<arg name="lpLocaleName">LPCWSTR</arg>
<arg name="dwCmpFlags">DWORD</arg>
<arg name="lpString1">LPCWSTR</arg>
<arg name="cchCount1">int</arg>
<arg name="lpString2">LPCWSTR</arg>
<arg name="cchCount2">int</arg>
<arg name="lpVersionInformation">LPNLSVERSIONINFO</arg>
<arg name="lpReserved">LPVOID</arg>

     LPARAM lParam
);

<function name="FindNLSStringEx" ret="int " convention="__stdcall">
<arg name="lpLocaleName">LPCWSTR</arg>
<arg name="dwFindNLSStringFlags">DWORD</arg>
<arg name="lpStringSource">LPCWSTR</arg>
<arg name="cchSource">int</arg>
<arg name="lpStringValue">LPCWSTR</arg>
<arg name="cchValue">int</arg>
<arg name="pcchFound">LPINT</arg>
<arg name="lpVersionInformation">LPNLSVERSIONINFO</arg>
<arg name="lpReserved">LPVOID</arg>

     LPARAM lParam
);
<function name="LCMapStringEx" ret="int " convention="__stdcall">
<arg name="lpLocaleName">LPCWSTR</arg>
<arg name="dwMapFlags">DWORD</arg>
<arg name="lpSrcStr">LPCWSTR</arg>
<arg name="cchSrc">int</arg>
<arg name="lpDestStr">LPWSTR</arg>
<arg name="cchDest">int</arg>
<arg name="lpVersionInformation">LPNLSVERSIONINFO</arg>
<arg name="lpReserved">LPVOID</arg>

     LPARAM lParam
);

<function name="CompareStringOrdinal" ret="int" convention="__stdcall">
<arg name="lpString1">LPCWSTR</arg>
<arg name="cchCount1">int    </arg>
<arg name="lpString2">LPCWSTR</arg>
<arg name="cchCount2">int    </arg>

     BOOL    bIgnoreCase
);

<function name="IsValidLocaleName" ret="BOOL" convention="__stdcall">
     LPCWSTR lpLocaleName
);

typedef BOOL (__stdcall* CALINFO_ENUMPROCEXEX)(LPWSTR, CALID, LPWSTR, LPARAM);

<function name="EnumCalendarInfoExEx" ret="BOOL " convention="__stdcall">
<arg name="pCalInfoEnumProcExEx">CALINFO_ENUMPROCEXEX</arg>
<arg name="lpLocaleName">LPCWSTR</arg>
<arg name="Calendar">CALID</arg>
<arg name="lpReserved">LPCWSTR</arg>
<arg name="CalType">CALTYPE</arg>

     LPARAM lParam
);

typedef BOOL (__stdcall* DATEFMT_ENUMPROCEXEX)(LPWSTR, CALID, LPARAM);

<function name="EnumDateFormatsExEx" ret="BOOL " convention="__stdcall">
<arg name="lpDateFmtEnumProcExEx">DATEFMT_ENUMPROCEXEX</arg>
<arg name="lpLocaleName">LPCWSTR</arg>
<arg name="dwFlags">DWORD</arg>

     LPARAM lParam
);

typedef BOOL (__stdcall* TIMEFMT_ENUMPROCEX)(LPWSTR, LPARAM);

<function name="EnumTimeFormatsEx" ret="BOOL " convention="__stdcall">
<arg name="lpTimeFmtEnumProcEx">TIMEFMT_ENUMPROCEX</arg>
<arg name="lpLocaleName">LPCWSTR</arg>
<arg name="dwFlags">DWORD</arg>

     LPARAM lParam
);

typedef BOOL (__stdcall* LOCALE_ENUMPROCEX)(LPWSTR, DWORD, LPARAM);

<function name="EnumSystemLocalesEx" ret="BOOL " convention="__stdcall">
<arg name="lpLocaleEnumProcEx">LOCALE_ENUMPROCEX</arg>
<arg name="dwFlags">DWORD</arg>
<arg name="lParam">LPARAM</arg>

     LPVOID lpReserved
);
#line 1 "\\program files\\Microsoft SDKs\\Windows\\v6.0A\\Include\\wincon.h"
#pragma once
<struct name="_COORD">
<field name="X">SHORT</field>
<field name="Y">SHORT</field>
</struct>
<typedefprev id="COORD"/>
<typedefptrprev id="PCOORD"/>

<struct name="_SMALL_RECT">
<field name="Left">SHORT</field>
<field name="Top">SHORT</field>
<field name="Right">SHORT</field>
<field name="Bottom">SHORT</field>
</struct>
<typedefprev id="SMALL_RECT"/>
<typedefptrprev id="PSMALL_RECT"/>

<struct name="_KEY_EVENT_RECORD">
<field name="bKeyDown">BOOL</field>
<field name="wRepeatCount">WORD</field>
<field name="wVirtualKeyCode">WORD</field>
<field name="wVirtualScanCode">WORD</field>
    union {
        WCHAR UnicodeChar;
        CHAR   AsciiChar;
    } uChar;
    DWORD dwControlKeyState;
} KEY_EVENT_RECORD, *PKEY_EVENT_RECORD;
<struct name="_MOUSE_EVENT_RECORD">
<field name="dwMousePosition">COORD</field>
<field name="dwButtonState">DWORD</field>
<field name="dwControlKeyState">DWORD</field>
<field name="dwEventFlags">DWORD</field>
</struct>
<typedefprev id="MOUSE_EVENT_RECORD"/>
<typedefptrprev id="PMOUSE_EVENT_RECORD"/>
<struct name="_WINDOW_BUFFER_SIZE_RECORD">
<field name="dwSize">COORD</field>
</struct>
<typedefprev id="WINDOW_BUFFER_SIZE_RECORD"/>
<typedefptrprev id="PWINDOW_BUFFER_SIZE_RECORD"/>

<struct name="_MENU_EVENT_RECORD">
<field name="dwCommandId">UINT</field>
</struct>
<typedefprev id="MENU_EVENT_RECORD"/>
<typedefptrprev id="PMENU_EVENT_RECORD"/>

<struct name="_FOCUS_EVENT_RECORD">
<field name="bSetFocus">BOOL</field>
</struct>
<typedefprev id="FOCUS_EVENT_RECORD"/>
<typedefptrprev id="PFOCUS_EVENT_RECORD"/>

<struct name="_INPUT_RECORD">
<field name="EventType">WORD</field>
    union {
        KEY_EVENT_RECORD KeyEvent;
        MOUSE_EVENT_RECORD MouseEvent;
        WINDOW_BUFFER_SIZE_RECORD WindowBufferSizeEvent;
        MENU_EVENT_RECORD MenuEvent;
        FOCUS_EVENT_RECORD FocusEvent;
    } Event;
} INPUT_RECORD, *PINPUT_RECORD;

<struct name="_CHAR_INFO">
    union {
        WCHAR UnicodeChar;
        CHAR   AsciiChar;
    } Char;
    WORD Attributes;
} CHAR_INFO, *PCHAR_INFO;
<struct name="_CONSOLE_SCREEN_BUFFER_INFO">
<field name="dwSize">COORD</field>
<field name="dwCursorPosition">COORD</field>
<field name="wAttributes">WORD</field>
<field name="srWindow">SMALL_RECT</field>
<field name="dwMaximumWindowSize">COORD</field>
</struct>
<typedefprev id="CONSOLE_SCREEN_BUFFER_INFO"/>
<typedefptrprev id="PCONSOLE_SCREEN_BUFFER_INFO"/>

<struct name="_CONSOLE_SCREEN_BUFFER_INFOEX">
<field name="cbSize">ULONG</field>
<field name="dwSize">COORD</field>
<field name="dwCursorPosition">COORD</field>
<field name="wAttributes">WORD</field>
<field name="srWindow">SMALL_RECT</field>
<field name="dwMaximumWindowSize">COORD</field>
<field name="wPopupAttributes">WORD</field>
<field name="bFullscreenSupported">BOOL</field>
<field name="ColorTable[16]">COLORREF</field>
</struct>
<typedefprev id="CONSOLE_SCREEN_BUFFER_INFOEX"/>
<typedefptrprev id="PCONSOLE_SCREEN_BUFFER_INFOEX"/>

<struct name="_CONSOLE_CURSOR_INFO">
<field name="dwSize">DWORD</field>
<field name="bVisible">BOOL</field>
</struct>
<typedefprev id="CONSOLE_CURSOR_INFO"/>
<typedefptrprev id="PCONSOLE_CURSOR_INFO"/>

<struct name="_CONSOLE_FONT_INFO">
<field name="nFont">DWORD</field>
<field name="dwFontSize">COORD</field>
</struct>
<typedefprev id="CONSOLE_FONT_INFO"/>
<typedefptrprev id="PCONSOLE_FONT_INFO"/>
<struct name="_CONSOLE_FONT_INFOEX">
<field name="cbSize">ULONG</field>
<field name="nFont">DWORD</field>
<field name="dwFontSize">COORD</field>
<field name="FontFamily">UINT</field>
<field name="FontWeight">UINT</field>
<field name="FaceName[32]">WCHAR</field>
</struct>
<typedefprev id="CONSOLE_FONT_INFOEX"/>
<typedefptrprev id="PCONSOLE_FONT_INFOEX"/>

<struct name="_CONSOLE_HISTORY_INFO">
<field name="cbSize">UINT</field>
<field name="HistoryBufferSize">UINT</field>
<field name="NumberOfHistoryBuffers">UINT</field>
<field name="dwFlags">DWORD</field>
</struct>
<typedefprev id="CONSOLE_HISTORY_INFO"/>
<typedefptrprev id="PCONSOLE_HISTORY_INFO"/>
<struct name="_CONSOLE_SELECTION_INFO">
<field name="dwFlags">DWORD</field>
<field name="dwSelectionAnchor">COORD</field>
<field name="srSelection">SMALL_RECT</field>
</struct>
<typedefprev id="CONSOLE_SELECTION_INFO"/>
<typedefptrprev id="PCONSOLE_SELECTION_INFO"/>

typedef
BOOL
(__stdcall *PHANDLER_ROUTINE)(
<arg name="CtrlType">DWORD</arg>
</function>

<function name="PeekConsoleInputA" ret="BOOL" convention="__stdcall">
<arg name="hConsoleInput">HANDLE</arg>
<arg name="lpBuffer">PINPUT_RECORD</arg>
<arg name="nLength">DWORD</arg>
<arg name="lpNumberOfEventsRead">LPDWORD</arg>
</function>
<function name="PeekConsoleInputW" ret="BOOL" convention="__stdcall">
<arg name="hConsoleInput">HANDLE</arg>
<arg name="lpBuffer">PINPUT_RECORD</arg>
<arg name="nLength">DWORD</arg>
<arg name="lpNumberOfEventsRead">LPDWORD</arg>
</function>
<function name="ReadConsoleInputA" ret="BOOL" convention="__stdcall">
<arg name="hConsoleInput">HANDLE</arg>
<arg name="lpBuffer">PINPUT_RECORD</arg>
<arg name="nLength">DWORD</arg>
<arg name="lpNumberOfEventsRead">LPDWORD</arg>
</function>
<function name="ReadConsoleInputW" ret="BOOL" convention="__stdcall">
<arg name="hConsoleInput">HANDLE</arg>
<arg name="lpBuffer">PINPUT_RECORD</arg>
<arg name="nLength">DWORD</arg>
<arg name="lpNumberOfEventsRead">LPDWORD</arg>
</function>
<function name="WriteConsoleInputA" ret="BOOL" convention="__stdcall">
<arg name="hConsoleInput">HANDLE</arg>

     const INPUT_RECORD *lpBuffer,
     DWORD nLength,
<arg name="lpNumberOfEventsWritten">LPDWORD</arg>
</function>
<function name="WriteConsoleInputW" ret="BOOL" convention="__stdcall">
<arg name="hConsoleInput">HANDLE</arg>

     const INPUT_RECORD *lpBuffer,
     DWORD nLength,
<arg name="lpNumberOfEventsWritten">LPDWORD</arg>
</function>
<function name="ReadConsoleOutputA" ret="BOOL" convention="__stdcall">
<arg name="hConsoleOutput">HANDLE</arg>
<arg name="lpBuffer">PCHAR_INFO</arg>
<arg name="dwBufferSize">COORD</arg>
<arg name="dwBufferCoord">COORD</arg>
<arg name="lpReadRegion">PSMALL_RECT</arg>
</function>
<function name="ReadConsoleOutputW" ret="BOOL" convention="__stdcall">
<arg name="hConsoleOutput">HANDLE</arg>
<arg name="lpBuffer">PCHAR_INFO</arg>
<arg name="dwBufferSize">COORD</arg>
<arg name="dwBufferCoord">COORD</arg>
<arg name="lpReadRegion">PSMALL_RECT</arg>
</function>
<function name="WriteConsoleOutputA" ret="BOOL" convention="__stdcall">
<arg name="hConsoleOutput">HANDLE</arg>

     const CHAR_INFO *lpBuffer,
     COORD dwBufferSize,
     COORD dwBufferCoord,
<arg name="lpWriteRegion">PSMALL_RECT</arg>
</function>
<function name="WriteConsoleOutputW" ret="BOOL" convention="__stdcall">
<arg name="hConsoleOutput">HANDLE</arg>

     const CHAR_INFO *lpBuffer,
     COORD dwBufferSize,
     COORD dwBufferCoord,
<arg name="lpWriteRegion">PSMALL_RECT</arg>
</function>
<function name="ReadConsoleOutputCharacterA" ret="BOOL" convention="__stdcall">
<arg name="hConsoleOutput">HANDLE</arg>
<arg name="lpCharacter">LPSTR</arg>
<arg name="nLength">DWORD</arg>
<arg name="dwReadCoord">COORD</arg>
<arg name="lpNumberOfCharsRead">LPDWORD</arg>
</function>
<function name="ReadConsoleOutputCharacterW" ret="BOOL" convention="__stdcall">
<arg name="hConsoleOutput">HANDLE</arg>
<arg name="lpCharacter">LPWSTR</arg>
<arg name="nLength">DWORD</arg>
<arg name="dwReadCoord">COORD</arg>
<arg name="lpNumberOfCharsRead">LPDWORD</arg>
</function>
<function name="ReadConsoleOutputAttribute" ret="BOOL" convention="__stdcall">
<arg name="hConsoleOutput">HANDLE</arg>
<arg name="lpAttribute">LPWORD</arg>
<arg name="nLength">DWORD</arg>
<arg name="dwReadCoord">COORD</arg>
<arg name="lpNumberOfAttrsRead">LPDWORD</arg>
</function>

<function name="WriteConsoleOutputCharacterA" ret="BOOL" convention="__stdcall">
<arg name="hConsoleOutput">HANDLE</arg>
<arg name="lpCharacter">LPCSTR</arg>
<arg name="nLength">DWORD</arg>
<arg name="dwWriteCoord">COORD</arg>
<arg name="lpNumberOfCharsWritten">LPDWORD</arg>
</function>
<function name="WriteConsoleOutputCharacterW" ret="BOOL" convention="__stdcall">
<arg name="hConsoleOutput">HANDLE</arg>
<arg name="lpCharacter">LPCWSTR</arg>
<arg name="nLength">DWORD</arg>
<arg name="dwWriteCoord">COORD</arg>
<arg name="lpNumberOfCharsWritten">LPDWORD</arg>
</function>
<function name="WriteConsoleOutputAttribute" ret="BOOL" convention="__stdcall">
<arg name="hConsoleOutput">HANDLE</arg>

     const WORD *lpAttribute,
     DWORD nLength,
     COORD dwWriteCoord,
<arg name="lpNumberOfAttrsWritten">LPDWORD</arg>
</function>

<function name="FillConsoleOutputCharacterA" ret="BOOL" convention="__stdcall">
<arg name="hConsoleOutput">HANDLE</arg>
<arg name="cCharacter">CHAR </arg>
<arg name="nLength">DWORD </arg>
<arg name="dwWriteCoord">COORD </arg>
<arg name="lpNumberOfCharsWritten">LPDWORD</arg>
</function>
<function name="FillConsoleOutputCharacterW" ret="BOOL" convention="__stdcall">
<arg name="hConsoleOutput">HANDLE</arg>
<arg name="cCharacter">WCHAR </arg>
<arg name="nLength">DWORD </arg>
<arg name="dwWriteCoord">COORD </arg>
<arg name="lpNumberOfCharsWritten">LPDWORD</arg>
</function>
<function name="FillConsoleOutputAttribute" ret="BOOL" convention="__stdcall">
<arg name="hConsoleOutput">HANDLE</arg>
<arg name="wAttribute">WORD  </arg>
<arg name="nLength">DWORD </arg>
<arg name="dwWriteCoord">COORD </arg>
<arg name="lpNumberOfAttrsWritten">LPDWORD</arg>
</function>

<function name="GetConsoleMode" ret="BOOL" convention="__stdcall">
<arg name="hConsoleHandle">HANDLE</arg>
<arg name="lpMode">LPDWORD</arg>
</function>

<function name="GetNumberOfConsoleInputEvents" ret="BOOL" convention="__stdcall">
<arg name="hConsoleInput">HANDLE</arg>
<arg name="lpNumberOfEvents">LPDWORD</arg>
</function>

<function name="GetConsoleScreenBufferInfo" ret="BOOL" convention="__stdcall">
<arg name="hConsoleOutput">HANDLE</arg>
<arg name="lpConsoleScreenBufferInfo">PCONSOLE_SCREEN_BUFFER_INFO</arg>
</function>

<function name="GetConsoleScreenBufferInfoEx" ret="BOOL" convention="__stdcall">
<arg name="hConsoleOutput">HANDLE</arg>
<arg name="lpConsoleScreenBufferInfoEx">PCONSOLE_SCREEN_BUFFER_INFOEX</arg>
</function>

<function name="SetConsoleScreenBufferInfoEx" ret="BOOL" convention="__stdcall">
<arg name="hConsoleOutput">HANDLE</arg>
<arg name="lpConsoleScreenBufferInfoEx">PCONSOLE_SCREEN_BUFFER_INFOEX</arg>
</function>

<function name="GetLargestConsoleWindowSize" ret="COORD" convention="__stdcall">
<arg name="hConsoleOutput">HANDLE</arg>
</function>

<function name="GetConsoleCursorInfo" ret="BOOL" convention="__stdcall">
<arg name="hConsoleOutput">HANDLE</arg>
<arg name="lpConsoleCursorInfo">PCONSOLE_CURSOR_INFO</arg>
</function>
<function name="GetCurrentConsoleFont" ret="BOOL" convention="__stdcall">
<arg name="hConsoleOutput">HANDLE</arg>
<arg name="bMaximumWindow">BOOL</arg>
<arg name="lpConsoleCurrentFont">PCONSOLE_FONT_INFO</arg>
</function>
<function name="GetCurrentConsoleFontEx" ret="BOOL" convention="__stdcall">
<arg name="hConsoleOutput">HANDLE</arg>
<arg name="bMaximumWindow">BOOL</arg>
<arg name="lpConsoleCurrentFontEx">PCONSOLE_FONT_INFOEX</arg>
</function>

<function name="SetCurrentConsoleFontEx" ret="BOOL" convention="__stdcall">
<arg name="hConsoleOutput">HANDLE</arg>
<arg name="bMaximumWindow">BOOL</arg>
<arg name="lpConsoleCurrentFontEx">PCONSOLE_FONT_INFOEX</arg>
</function>
<function name="GetConsoleHistoryInfo" ret="BOOL" convention="__stdcall">
<arg name="lpConsoleHistoryInfo">PCONSOLE_HISTORY_INFO</arg>
</function>

<function name="SetConsoleHistoryInfo" ret="BOOL" convention="__stdcall">
<arg name="lpConsoleHistoryInfo">PCONSOLE_HISTORY_INFO</arg>
</function>

<function name="GetConsoleFontSize" ret="COORD" convention="__stdcall">
<arg name="hConsoleOutput">HANDLE</arg>
<arg name="nFont">DWORD</arg>
</function>

<function name="GetConsoleSelectionInfo" ret="BOOL" convention="__stdcall">
<arg name="lpConsoleSelectionInfo">PCONSOLE_SELECTION_INFO</arg>
</function>
<function name="GetNumberOfConsoleMouseButtons" ret="BOOL" convention="__stdcall">
<arg name="lpNumberOfMouseButtons">LPDWORD</arg>
</function>

<function name="SetConsoleMode" ret="BOOL" convention="__stdcall">
<arg name="hConsoleHandle">HANDLE</arg>
<arg name="dwMode">DWORD</arg>
</function>

<function name="SetConsoleActiveScreenBuffer" ret="BOOL" convention="__stdcall">
<arg name="hConsoleOutput">HANDLE</arg>
</function>

<function name="FlushConsoleInputBuffer" ret="BOOL" convention="__stdcall">
<arg name="hConsoleInput">HANDLE</arg>
</function>

<function name="SetConsoleScreenBufferSize" ret="BOOL" convention="__stdcall">
<arg name="hConsoleOutput">HANDLE</arg>
<arg name="dwSize">COORD</arg>
</function>

<function name="SetConsoleCursorPosition" ret="BOOL" convention="__stdcall">
<arg name="hConsoleOutput">HANDLE</arg>
<arg name="dwCursorPosition">COORD</arg>
</function>

<function name="SetConsoleCursorInfo" ret="BOOL" convention="__stdcall">
<arg name="hConsoleOutput">HANDLE</arg>
<arg name="lpConsoleCursorInfo">const CONSOLE_CURSOR_INFO *</arg>
</function>

<function name="ScrollConsoleScreenBufferA" ret="BOOL" convention="__stdcall">
<arg name="hConsoleOutput">HANDLE</arg>

     const SMALL_RECT *lpScrollRectangle,
     const SMALL_RECT *lpClipRectangle,
     COORD dwDestinationOrigin,
<arg name="lpFill">const CHAR_INFO *</arg>
</function>
<function name="ScrollConsoleScreenBufferW" ret="BOOL" convention="__stdcall">
<arg name="hConsoleOutput">HANDLE</arg>

     const SMALL_RECT *lpScrollRectangle,
     const SMALL_RECT *lpClipRectangle,
     COORD dwDestinationOrigin,
<arg name="lpFill">const CHAR_INFO *</arg>
</function>
<function name="SetConsoleWindowInfo" ret="BOOL" convention="__stdcall">
<arg name="hConsoleOutput">HANDLE</arg>
<arg name="bAbsolute">BOOL</arg>
<arg name="lpConsoleWindow">const SMALL_RECT *</arg>
</function>

<function name="SetConsoleTextAttribute" ret="BOOL" convention="__stdcall">
<arg name="hConsoleOutput">HANDLE</arg>
<arg name="wAttributes">WORD</arg>
</function>

<function name="SetConsoleCtrlHandler" ret="BOOL" convention="__stdcall">
<arg name="HandlerRoutine">PHANDLER_ROUTINE</arg>
<arg name="Add">BOOL</arg>
</function>

<function name="GenerateConsoleCtrlEvent" ret="BOOL" convention="__stdcall">
<arg name="dwCtrlEvent">DWORD</arg>
<arg name="dwProcessGroupId">DWORD</arg>
</function>

<function name="AllocConsole" ret="BOOL" convention="__stdcall">
 void );

<function name="FreeConsole" ret="BOOL" convention="__stdcall">
 void );
<function name="AttachConsole" ret="BOOL" convention="__stdcall">
<arg name="dwProcessId">DWORD</arg>
</function>
<function name="GetConsoleTitleA" ret="DWORD" convention="__stdcall">
<arg name="lpConsoleTitle">LPSTR</arg>
<arg name="nSize">DWORD</arg>
</function>
<function name="GetConsoleTitleW" ret="DWORD" convention="__stdcall">
<arg name="lpConsoleTitle">LPWSTR</arg>
<arg name="nSize">DWORD</arg>
</function>
<function name="GetConsoleOriginalTitleA" ret="DWORD" convention="__stdcall">
<arg name="lpConsoleTitle">LPSTR</arg>
<arg name="nSize">DWORD</arg>
</function>
<function name="GetConsoleOriginalTitleW" ret="DWORD" convention="__stdcall">
<arg name="lpConsoleTitle">LPWSTR</arg>
<arg name="nSize">DWORD</arg>
</function>

<function name="SetConsoleTitleA" ret="BOOL" convention="__stdcall">
<arg name="lpConsoleTitle">LPCSTR</arg>
</function>
<function name="SetConsoleTitleW" ret="BOOL" convention="__stdcall">
<arg name="lpConsoleTitle">LPCWSTR</arg>
</function>
<struct name="_CONSOLE_READCONSOLE_CONTROL">
<field name="nLength">ULONG</field>
<field name="nInitialChars">ULONG</field>
<field name="dwCtrlWakeupMask">ULONG</field>
<field name="dwControlKeyState">ULONG</field>
</struct>
<typedefprev id="CONSOLE_READCONSOLE_CONTROL"/>
<typedefptrprev id="PCONSOLE_READCONSOLE_CONTROL"/>

<function name="ReadConsoleA" ret="BOOL" convention="__stdcall">
<arg name="hConsoleInput">HANDLE</arg>

    
       LPVOID lpBuffer,
     DWORD nNumberOfCharsToRead,
     LPDWORD lpNumberOfCharsRead,
<arg name="pInputControl">PCONSOLE_READCONSOLE_CONTROL</arg>
</function>
<function name="ReadConsoleW" ret="BOOL" convention="__stdcall">
<arg name="hConsoleInput">HANDLE</arg>

    
       LPVOID lpBuffer,
     DWORD nNumberOfCharsToRead,
     LPDWORD lpNumberOfCharsRead,
<arg name="pInputControl">PCONSOLE_READCONSOLE_CONTROL</arg>
</function>
<function name="WriteConsoleA" ret="BOOL" convention="__stdcall">
<arg name="hConsoleOutput">HANDLE</arg>

     const void *lpBuffer,
     DWORD nNumberOfCharsToWrite,
     LPDWORD lpNumberOfCharsWritten,
<arg name="lpReserved">LPVOID</arg>
</function>
<function name="WriteConsoleW" ret="BOOL" convention="__stdcall">
<arg name="hConsoleOutput">HANDLE</arg>

     const void *lpBuffer,
     DWORD nNumberOfCharsToWrite,
     LPDWORD lpNumberOfCharsWritten,
<arg name="lpReserved">LPVOID</arg>
</function>
<function name="CreateConsoleScreenBuffer" ret="HANDLE" convention="__stdcall">
<arg name="dwDesiredAccess">DWORD</arg>
<arg name="dwShareMode">DWORD</arg>

     const SECURITY_ATTRIBUTES *lpSecurityAttributes,
     DWORD dwFlags,
<arg name="lpScreenBufferData">LPVOID</arg>
</function>

<function name="GetConsoleCP" ret="UINT" convention="__stdcall">
 void );

<function name="SetConsoleCP" ret="BOOL" convention="__stdcall">
<arg name="wCodePageID">UINT</arg>
</function>

<function name="GetConsoleOutputCP" ret="UINT" convention="__stdcall">
 void );

<function name="SetConsoleOutputCP" ret="BOOL" convention="__stdcall">
<arg name="wCodePageID">UINT</arg>
</function>

<function name="GetConsoleDisplayMode" ret="BOOL" convention="__stdcall">
<arg name="lpModeFlags">LPDWORD</arg>
</function>

<function name="SetConsoleDisplayMode" ret="BOOL" convention="__stdcall">
<arg name="hConsoleOutput">HANDLE</arg>
<arg name="dwFlags">DWORD</arg>
<arg name="lpNewScreenBufferDimensions">PCOORD</arg>
</function>

<function name="GetConsoleWindow" ret="HWND" convention="__stdcall">
<arg name="void"></arg>
</function>
<function name="GetConsoleProcessList" ret="DWORD" convention="__stdcall">
<arg name="lpdwProcessList">LPDWORD</arg>
<arg name="dwProcessCount">DWORD</arg>
</function>
<function name="AddConsoleAliasA" ret="BOOL" convention="__stdcall">
<arg name="Source">LPSTR</arg>
<arg name="Target">LPSTR</arg>
<arg name="ExeName">LPSTR</arg>
</function>
<function name="AddConsoleAliasW" ret="BOOL" convention="__stdcall">
<arg name="Source">LPWSTR</arg>
<arg name="Target">LPWSTR</arg>
<arg name="ExeName">LPWSTR</arg>
</function>
<function name="GetConsoleAliasA" ret="DWORD" convention="__stdcall">
<arg name="Source">LPSTR</arg>
<arg name="TargetBuffer">LPSTR</arg>
<arg name="TargetBufferLength">DWORD</arg>
<arg name="ExeName">LPSTR</arg>
</function>
<function name="GetConsoleAliasW" ret="DWORD" convention="__stdcall">
<arg name="Source">LPWSTR</arg>
<arg name="TargetBuffer">LPWSTR</arg>
<arg name="TargetBufferLength">DWORD</arg>
<arg name="ExeName">LPWSTR</arg>
</function>
<function name="GetConsoleAliasesLengthA" ret="DWORD" convention="__stdcall">
<arg name="ExeName">LPSTR</arg>
</function>
<function name="GetConsoleAliasesLengthW" ret="DWORD" convention="__stdcall">
<arg name="ExeName">LPWSTR</arg>
</function>
<function name="GetConsoleAliasExesLengthA" ret="DWORD" convention="__stdcall">
<arg name="void"> </arg>
</function>
<function name="GetConsoleAliasExesLengthW" ret="DWORD" convention="__stdcall">
<arg name="void"> </arg>
</function>
<function name="GetConsoleAliasesA" ret="DWORD" convention="__stdcall">
<arg name="AliasBuffer">LPSTR</arg>
<arg name="AliasBufferLength">DWORD</arg>
<arg name="ExeName">LPSTR</arg>
</function>
<function name="GetConsoleAliasesW" ret="DWORD" convention="__stdcall">
<arg name="AliasBuffer">LPWSTR</arg>
<arg name="AliasBufferLength">DWORD</arg>
<arg name="ExeName">LPWSTR</arg>
</function>
<function name="GetConsoleAliasExesA" ret="DWORD" convention="__stdcall">
<arg name="ExeNameBuffer">LPSTR</arg>
<arg name="ExeNameBufferLength">DWORD</arg>
</function>
<function name="GetConsoleAliasExesW" ret="DWORD" convention="__stdcall">
<arg name="ExeNameBuffer">LPWSTR</arg>
<arg name="ExeNameBufferLength">DWORD</arg>
</function>
#line 1 "\\program files\\Microsoft SDKs\\Windows\\v6.0A\\Include\\winver.h"

    
<struct name="tagVS_FIXEDFILEINFO">
<field name="dwSignature">DWORD</field>
<field name="dwStrucVersion">DWORD</field>
<field name="dwFileVersionMS">DWORD</field>
<field name="dwFileVersionLS">DWORD</field>
<field name="dwProductVersionMS">DWORD</field>
<field name="dwProductVersionLS">DWORD</field>
<field name="dwFileFlagsMask">DWORD</field>
<field name="dwFileFlags">DWORD</field>
<field name="dwFileOS">DWORD</field>
<field name="dwFileType">DWORD</field>
<field name="dwFileSubtype">DWORD</field>
<field name="dwFileDateMS">DWORD</field>
<field name="dwFileDateLS">DWORD</field>
} VS_FIXEDFILEINFO;
<function name="VerFindFileA" ret="DWORD" convention="__stdcall">
<arg name="uFlags">DWORD</arg>
<arg name="szFileName">LPCSTR</arg>
<arg name="szWinDir">LPCSTR</arg>
<arg name="szAppDir">LPCSTR</arg>
<arg name="szCurDir">LPSTR</arg>
<arg name="lpuCurDirLen">PUINT</arg>
<arg name="szDestDir">LPSTR</arg>
<arg name="lpuDestDirLen">PUINT</arg>
</function>
<function name="VerFindFileW" ret="DWORD" convention="__stdcall">
<arg name="uFlags">DWORD</arg>
<arg name="szFileName">LPCWSTR</arg>
<arg name="szWinDir">LPCWSTR</arg>
<arg name="szAppDir">LPCWSTR</arg>
<arg name="szCurDir">LPWSTR</arg>
<arg name="lpuCurDirLen">PUINT</arg>
<arg name="szDestDir">LPWSTR</arg>
<arg name="lpuDestDirLen">PUINT</arg>
</function>
<function name="VerInstallFileA" ret="DWORD" convention="__stdcall">
<arg name="uFlags">DWORD</arg>
<arg name="szSrcFileName">LPCSTR</arg>
<arg name="szDestFileName">LPCSTR</arg>
<arg name="szSrcDir">LPCSTR</arg>
<arg name="szDestDir">LPCSTR</arg>
<arg name="szCurDir">LPCSTR</arg>
<arg name="szTmpFile">LPSTR</arg>
<arg name="lpuTmpFileLen">PUINT</arg>
</function>
<function name="VerInstallFileW" ret="DWORD" convention="__stdcall">
<arg name="uFlags">DWORD</arg>
<arg name="szSrcFileName">LPCWSTR</arg>
<arg name="szDestFileName">LPCWSTR</arg>
<arg name="szSrcDir">LPCWSTR</arg>
<arg name="szDestDir">LPCWSTR</arg>
<arg name="szCurDir">LPCWSTR</arg>
<arg name="szTmpFile">LPWSTR</arg>
<arg name="lpuTmpFileLen">PUINT</arg>
</function>
<function name="GetFileVersionInfoSizeA" ret="DWORD" convention="__stdcall">
<arg name="lptstrFilename">LPCSTR</arg>
 
         LPDWORD lpdwHandle       
        );                      

<function name="GetFileVersionInfoSizeW" ret="DWORD" convention="__stdcall">
<arg name="lptstrFilename">LPCWSTR</arg>
 
         LPDWORD lpdwHandle       
        );                      
<function name="GetFileVersionInfoA" ret="BOOL" convention="__stdcall">
<arg name="lptstrFilename">LPCSTR</arg>
 
                  DWORD dwHandle,          
                        DWORD dwLen,             
         LPVOID lpData            
        );                      

<function name="GetFileVersionInfoW" ret="BOOL" convention="__stdcall">
<arg name="lptstrFilename">LPCWSTR</arg>
 
                  DWORD dwHandle,          
                        DWORD dwLen,             
         LPVOID lpData            
        );                      
<function name="GetFileVersionInfoSizeExA" ret="DWORD" convention="__stdcall">
<arg name="dwFlags">DWORD</arg>
<arg name="lpwstrFilename">LPCSTR</arg>
<arg name="lpdwHandle">LPDWORD</arg>
</function>
<function name="GetFileVersionInfoSizeExW" ret="DWORD" convention="__stdcall">
<arg name="dwFlags">DWORD</arg>
<arg name="lpwstrFilename">LPCWSTR</arg>
<arg name="lpdwHandle">LPDWORD</arg>
</function>
<function name="GetFileVersionInfoExA" ret="BOOL" convention="__stdcall">
<arg name="dwFlags">DWORD</arg>
<arg name="lpwstrFilename">LPCSTR</arg>
<arg name="dwHandle">DWORD</arg>
<arg name="dwLen">DWORD</arg>
<arg name="lpData">LPVOID</arg>
</function>
<function name="GetFileVersionInfoExW" ret="BOOL" convention="__stdcall">
<arg name="dwFlags">DWORD</arg>
<arg name="lpwstrFilename">LPCWSTR</arg>
<arg name="dwHandle">DWORD</arg>
<arg name="dwLen">DWORD</arg>
<arg name="lpData">LPVOID</arg>
</function>
<function name="VerLanguageNameA" ret="DWORD" convention="__stdcall">
<arg name="wLang">DWORD</arg>
<arg name="szLang">LPSTR</arg>
<arg name="cchLang">DWORD</arg>
</function>
<function name="VerLanguageNameW" ret="DWORD" convention="__stdcall">
<arg name="wLang">DWORD</arg>
<arg name="szLang">LPWSTR</arg>
<arg name="cchLang">DWORD</arg>
</function>
<function name="VerQueryValueA" ret="BOOL" convention="__stdcall">
<arg name="pBlock">LPCVOID</arg>
<arg name="lpSubBlock">LPCSTR</arg>
<arg name="lplpBuffer">LPVOID *</arg>
<arg name="puLen">PUINT</arg>
</function>
<function name="VerQueryValueW" ret="BOOL" convention="__stdcall">
<arg name="pBlock">LPCVOID</arg>
<arg name="lpSubBlock">LPCWSTR</arg>
<arg name="lplpBuffer">LPVOID *</arg>
<arg name="puLen">PUINT</arg>
</function>

#line 1 "\\program files\\Microsoft SDKs\\Windows\\v6.0A\\Include\\winreg.h"
typedef ACCESS_MASK REGSAM;

<struct name="val_context">

    int valuelen;       
    LPVOID value_context;   
    LPVOID val_buff_ptr;    
};

<typedef name="PVALCONTEXT">val_context  *</typedef>

<struct name="pvalueA">
<field name="pv_valuename">LPSTR</field>
<field name="pv_valuelen">int</field>
<field name="pv_value_context">LPVOID</field>
<field name="pv_type">DWORD</field>
}PVALUEA,  *PPVALUEA;
<struct name="pvalueW">
<field name="pv_valuename">LPWSTR</field>
<field name="pv_valuelen">int</field>
<field name="pv_value_context">LPVOID</field>
<field name="pv_type">DWORD</field>
}PVALUEW,  *PPVALUEW;

typedef PVALUEA PVALUE;
typedef PPVALUEA PPVALUE;

typedef
DWORD _cdecl
QUERYHANDLER (LPVOID keycontext, PVALCONTEXT val_list, DWORD num_vals,
          LPVOID outputbuffer, DWORD  *total_outlen, DWORD input_blen);

typedef QUERYHANDLER  *PQUERYHANDLER;

<struct name="provider_info">
<field name="pi_R0_1val">PQUERYHANDLER</field>
<field name="pi_R0_allvals">PQUERYHANDLER</field>
<field name="pi_R3_1val">PQUERYHANDLER</field>
<field name="pi_R3_allvals">PQUERYHANDLER</field>
<field name="pi_flags">DWORD</field>
<field name="pi_key_context">LPVOID</field>
}REG_PROVIDER;

<typedef name="PPROVIDER">provider_info  *</typedef>

<struct name="value_entA">
<field name="ve_valuename">LPSTR</field>
<field name="ve_valuelen">DWORD</field>
<field name="ve_valueptr">DWORD_PTR</field>
<field name="ve_type">DWORD</field>
}VALENTA,  *PVALENTA;
<struct name="value_entW">
<field name="ve_valuename">LPWSTR</field>
<field name="ve_valuelen">DWORD</field>
<field name="ve_valueptr">DWORD_PTR</field>
<field name="ve_type">DWORD</field>
}VALENTW,  *PVALENTW;

typedef VALENTA VALENT;
typedef PVALENTA PVALENT;

typedef  LONG LSTATUS;

<function name="RegCloseKey" ret="LSTATUS" convention="__stdcall">

<arg name="hKey">HKEY</arg>
</function>

<function name="RegOverridePredefKey" ret="LSTATUS" convention="__stdcall">
<arg name="hKey">HKEY</arg>
<arg name="hNewHKey">HKEY</arg>
</function>

<function name="RegOpenUserClassesRoot" ret="LSTATUS" convention="__stdcall">
<arg name="hToken">HANDLE</arg>
<arg name="dwOptions">DWORD</arg>
<arg name="samDesired">REGSAM</arg>
<arg name="phkResult">PHKEY </arg>
</function>

<function name="RegOpenCurrentUser" ret="LSTATUS" convention="__stdcall">
<arg name="samDesired">REGSAM</arg>
<arg name="phkResult">PHKEY</arg>
</function>

<function name="RegDisablePredefinedCache" ret="LSTATUS" convention="__stdcall">
<arg name="void"></arg>
</function>

<function name="RegDisablePredefinedCacheEx" ret="LSTATUS" convention="__stdcall">
<arg name="void"></arg>
</function>

<function name="RegConnectRegistryA" ret="LSTATUS" convention="__stdcall">
<arg name="lpMachineName">LPCSTR</arg>
<arg name="hKey">HKEY</arg>
<arg name="phkResult">PHKEY</arg>
</function>
<function name="RegConnectRegistryW" ret="LSTATUS" convention="__stdcall">
<arg name="lpMachineName">LPCWSTR</arg>
<arg name="hKey">HKEY</arg>
<arg name="phkResult">PHKEY</arg>
</function>
<function name="RegConnectRegistryExA" ret="LSTATUS" convention="__stdcall">
<arg name="lpMachineName">LPCSTR</arg>
<arg name="hKey">HKEY</arg>
<arg name="Flags">ULONG</arg>
<arg name="phkResult">PHKEY</arg>
</function>
<function name="RegConnectRegistryExW" ret="LSTATUS" convention="__stdcall">
<arg name="lpMachineName">LPCWSTR</arg>
<arg name="hKey">HKEY</arg>
<arg name="Flags">ULONG</arg>
<arg name="phkResult">PHKEY</arg>
</function>
<function name="RegCreateKeyA" ret="LSTATUS" convention="__stdcall">
<arg name="hKey">HKEY</arg>
<arg name="lpSubKey">LPCSTR</arg>
<arg name="phkResult">PHKEY</arg>
</function>
<function name="RegCreateKeyW" ret="LSTATUS" convention="__stdcall">
<arg name="hKey">HKEY</arg>
<arg name="lpSubKey">LPCWSTR</arg>
<arg name="phkResult">PHKEY</arg>
</function>
<function name="RegCreateKeyExA" ret="LSTATUS" convention="__stdcall">
<arg name="hKey">HKEY</arg>
<arg name="lpSubKey">LPCSTR</arg>
<arg name="Reserved">DWORD</arg>
<arg name="lpClass">LPSTR</arg>
<arg name="dwOptions">DWORD</arg>
<arg name="samDesired">REGSAM</arg>
<arg name="lpSecurityAttributes">const LPSECURITY_ATTRIBUTES</arg>
<arg name="phkResult">PHKEY</arg>
<arg name="lpdwDisposition">LPDWORD</arg>
</function>
<function name="RegCreateKeyExW" ret="LSTATUS" convention="__stdcall">
<arg name="hKey">HKEY</arg>
<arg name="lpSubKey">LPCWSTR</arg>
<arg name="Reserved">DWORD</arg>
<arg name="lpClass">LPWSTR</arg>
<arg name="dwOptions">DWORD</arg>
<arg name="samDesired">REGSAM</arg>
<arg name="lpSecurityAttributes">const LPSECURITY_ATTRIBUTES</arg>
<arg name="phkResult">PHKEY</arg>
<arg name="lpdwDisposition">LPDWORD</arg>
</function>
<function name="RegCreateKeyTransactedA" ret="LSTATUS" convention="__stdcall">
<arg name="hKey">HKEY</arg>
<arg name="lpSubKey">LPCSTR</arg>
<arg name="Reserved">DWORD</arg>
<arg name="lpClass">LPSTR</arg>
<arg name="dwOptions">DWORD</arg>
<arg name="samDesired">REGSAM</arg>
<arg name="lpSecurityAttributes">const LPSECURITY_ATTRIBUTES</arg>
<arg name="phkResult">PHKEY</arg>
<arg name="lpdwDisposition">LPDWORD</arg>
<arg name="hTransaction">HANDLE</arg>
<arg name="pExtendedParemeter">PVOID </arg>
</function>
<function name="RegCreateKeyTransactedW" ret="LSTATUS" convention="__stdcall">
<arg name="hKey">HKEY</arg>
<arg name="lpSubKey">LPCWSTR</arg>
<arg name="Reserved">DWORD</arg>
<arg name="lpClass">LPWSTR</arg>
<arg name="dwOptions">DWORD</arg>
<arg name="samDesired">REGSAM</arg>
<arg name="lpSecurityAttributes">const LPSECURITY_ATTRIBUTES</arg>
<arg name="phkResult">PHKEY</arg>
<arg name="lpdwDisposition">LPDWORD</arg>
<arg name="hTransaction">HANDLE</arg>
<arg name="pExtendedParemeter">PVOID </arg>
</function>
<function name="RegDeleteKeyA" ret="LSTATUS" convention="__stdcall">
<arg name="hKey">HKEY</arg>
<arg name="lpSubKey">LPCSTR</arg>
</function>
<function name="RegDeleteKeyW" ret="LSTATUS" convention="__stdcall">
<arg name="hKey">HKEY</arg>
<arg name="lpSubKey">LPCWSTR</arg>
</function>
<function name="RegDeleteKeyExA" ret="LSTATUS" convention="__stdcall">
<arg name="hKey">HKEY</arg>
<arg name="lpSubKey">LPCSTR</arg>
<arg name="samDesired">REGSAM</arg>
<arg name="Reserved">DWORD</arg>
</function>
<function name="RegDeleteKeyExW" ret="LSTATUS" convention="__stdcall">
<arg name="hKey">HKEY</arg>
<arg name="lpSubKey">LPCWSTR</arg>
<arg name="samDesired">REGSAM</arg>
<arg name="Reserved">DWORD</arg>
</function>
<function name="RegDeleteKeyTransactedA" ret="LSTATUS" convention="__stdcall">
<arg name="hKey">HKEY</arg>
<arg name="lpSubKey">LPCSTR</arg>
<arg name="samDesired">REGSAM</arg>
<arg name="Reserved">DWORD</arg>
<arg name="hTransaction">HANDLE</arg>
<arg name="pExtendedParameter">PVOID </arg>
</function>
<function name="RegDeleteKeyTransactedW" ret="LSTATUS" convention="__stdcall">
<arg name="hKey">HKEY</arg>
<arg name="lpSubKey">LPCWSTR</arg>
<arg name="samDesired">REGSAM</arg>
<arg name="Reserved">DWORD</arg>
<arg name="hTransaction">HANDLE</arg>
<arg name="pExtendedParameter">PVOID </arg>
</function>
<function name="RegDisableReflectionKey" ret="LONG" convention="__stdcall">

<arg name="hBase">HKEY</arg>
</function>    

<function name="RegEnableReflectionKey" ret="LONG" convention="__stdcall">

<arg name="hBase">HKEY</arg>
</function>    

<function name="RegQueryReflectionKey" ret="LONG" convention="__stdcall">
<arg name="hBase">HKEY</arg>
<arg name="bIsReflectionDisabled">BOOL *</arg>
</function>    
    
<function name="RegDeleteValueA" ret="LSTATUS" convention="__stdcall">
<arg name="hKey">HKEY</arg>
<arg name="lpValueName">LPCSTR</arg>
</function>
<function name="RegDeleteValueW" ret="LSTATUS" convention="__stdcall">
<arg name="hKey">HKEY</arg>
<arg name="lpValueName">LPCWSTR</arg>
</function>
<function name="RegEnumKeyA" ret="LSTATUS" convention="__stdcall">
<arg name="hKey">HKEY</arg>
<arg name="dwIndex">DWORD</arg>
<arg name="lpName">LPSTR</arg>
<arg name="cchName">DWORD</arg>
</function>
<function name="RegEnumKeyW" ret="LSTATUS" convention="__stdcall">
<arg name="hKey">HKEY</arg>
<arg name="dwIndex">DWORD</arg>
<arg name="lpName">LPWSTR</arg>
<arg name="cchName">DWORD</arg>
</function>
<function name="RegEnumKeyExA" ret="LSTATUS" convention="__stdcall">
<arg name="hKey">HKEY</arg>
<arg name="dwIndex">DWORD</arg>
<arg name="lpName">LPSTR</arg>
<arg name="lpcchName">LPDWORD</arg>
<arg name="lpReserved">LPDWORD</arg>
<arg name="lpClass">LPSTR</arg>
<arg name="lpcchClass">LPDWORD</arg>
<arg name="lpftLastWriteTime">PFILETIME</arg>
</function>
<function name="RegEnumKeyExW" ret="LSTATUS" convention="__stdcall">
<arg name="hKey">HKEY</arg>
<arg name="dwIndex">DWORD</arg>
<arg name="lpName">LPWSTR</arg>
<arg name="lpcchName">LPDWORD</arg>
<arg name="lpReserved">LPDWORD</arg>
<arg name="lpClass">LPWSTR</arg>
<arg name="lpcchClass">LPDWORD</arg>
<arg name="lpftLastWriteTime">PFILETIME</arg>
</function>
<function name="RegEnumValueA" ret="LSTATUS" convention="__stdcall">
<arg name="hKey">HKEY</arg>
<arg name="dwIndex">DWORD</arg>
<arg name="lpValueName">LPSTR</arg>
<arg name="lpcchValueName">LPDWORD</arg>
<arg name="lpReserved">LPDWORD</arg>
<arg name="lpType">LPDWORD</arg>
<arg name="lpData">LPBYTE</arg>
<arg name="lpcbData">LPDWORD</arg>
</function>
<function name="RegEnumValueW" ret="LSTATUS" convention="__stdcall">
<arg name="hKey">HKEY</arg>
<arg name="dwIndex">DWORD</arg>
<arg name="lpValueName">LPWSTR</arg>
<arg name="lpcchValueName">LPDWORD</arg>
<arg name="lpReserved">LPDWORD</arg>
<arg name="lpType">LPDWORD</arg>
<arg name="lpData">LPBYTE</arg>
<arg name="lpcbData">LPDWORD</arg>
</function>
<function name="RegFlushKey" ret="LSTATUS" convention="__stdcall">

<arg name="hKey">HKEY</arg>
</function>

<function name="RegGetKeySecurity" ret="LSTATUS" convention="__stdcall">
<arg name="hKey">HKEY</arg>
<arg name="SecurityInformation">SECURITY_INFORMATION</arg>
<arg name="pSecurityDescriptor">PSECURITY_DESCRIPTOR</arg>
<arg name="lpcbSecurityDescriptor">LPDWORD</arg>
</function>

<function name="RegLoadKeyA" ret="LSTATUS" convention="__stdcall">
<arg name="hKey">HKEY   </arg>
<arg name="lpSubKey">LPCSTR </arg>
<arg name="lpFile">LPCSTR </arg>
</function>
<function name="RegLoadKeyW" ret="LSTATUS" convention="__stdcall">
<arg name="hKey">HKEY   </arg>
<arg name="lpSubKey">LPCWSTR </arg>
<arg name="lpFile">LPCWSTR </arg>
</function>
<function name="RegNotifyChangeKeyValue" ret="LSTATUS" convention="__stdcall">
<arg name="hKey">HKEY</arg>
<arg name="bWatchSubtree">BOOL</arg>
<arg name="dwNotifyFilter">DWORD</arg>
<arg name="hEvent">HANDLE</arg>
<arg name="fAsynchronous">BOOL</arg>
</function>

<function name="RegOpenKeyA" ret="LSTATUS" convention="__stdcall">
<arg name="hKey">HKEY</arg>
<arg name="lpSubKey">LPCSTR</arg>
<arg name="phkResult">PHKEY</arg>
</function>
<function name="RegOpenKeyW" ret="LSTATUS" convention="__stdcall">
<arg name="hKey">HKEY</arg>
<arg name="lpSubKey">LPCWSTR</arg>
<arg name="phkResult">PHKEY</arg>
</function>
<function name="RegOpenKeyExA" ret="LSTATUS" convention="__stdcall">
<arg name="hKey">HKEY</arg>
<arg name="lpSubKey">LPCSTR</arg>
<arg name="ulOptions">DWORD</arg>
<arg name="samDesired">REGSAM</arg>
<arg name="phkResult">PHKEY</arg>
</function>
<function name="RegOpenKeyExW" ret="LSTATUS" convention="__stdcall">
<arg name="hKey">HKEY</arg>
<arg name="lpSubKey">LPCWSTR</arg>
<arg name="ulOptions">DWORD</arg>
<arg name="samDesired">REGSAM</arg>
<arg name="phkResult">PHKEY</arg>
</function>
<function name="RegOpenKeyTransactedA" ret="LSTATUS" convention="__stdcall">
<arg name="hKey">HKEY</arg>
<arg name="lpSubKey">LPCSTR</arg>
<arg name="ulOptions">DWORD</arg>
<arg name="samDesired">REGSAM</arg>
<arg name="phkResult">PHKEY</arg>
<arg name="hTransaction">HANDLE</arg>
<arg name="pExtendedParemeter">PVOID </arg>
</function>
<function name="RegOpenKeyTransactedW" ret="LSTATUS" convention="__stdcall">
<arg name="hKey">HKEY</arg>
<arg name="lpSubKey">LPCWSTR</arg>
<arg name="ulOptions">DWORD</arg>
<arg name="samDesired">REGSAM</arg>
<arg name="phkResult">PHKEY</arg>
<arg name="hTransaction">HANDLE</arg>
<arg name="pExtendedParemeter">PVOID </arg>
</function>
<function name="RegQueryInfoKeyA" ret="LSTATUS" convention="__stdcall">
<arg name="hKey">HKEY</arg>
<arg name="lpClass">LPSTR</arg>
<arg name="lpcchClass">LPDWORD</arg>
<arg name="lpReserved">LPDWORD</arg>
<arg name="lpcSubKeys">LPDWORD</arg>
<arg name="lpcbMaxSubKeyLen">LPDWORD</arg>
<arg name="lpcbMaxClassLen">LPDWORD</arg>
<arg name="lpcValues">LPDWORD</arg>
<arg name="lpcbMaxValueNameLen">LPDWORD</arg>
<arg name="lpcbMaxValueLen">LPDWORD</arg>
<arg name="lpcbSecurityDescriptor">LPDWORD</arg>
<arg name="lpftLastWriteTime">PFILETIME</arg>
</function>
<function name="RegQueryInfoKeyW" ret="LSTATUS" convention="__stdcall">
<arg name="hKey">HKEY</arg>
<arg name="lpClass">LPWSTR</arg>
<arg name="lpcchClass">LPDWORD</arg>
<arg name="lpReserved">LPDWORD</arg>
<arg name="lpcSubKeys">LPDWORD</arg>
<arg name="lpcbMaxSubKeyLen">LPDWORD</arg>
<arg name="lpcbMaxClassLen">LPDWORD</arg>
<arg name="lpcValues">LPDWORD</arg>
<arg name="lpcbMaxValueNameLen">LPDWORD</arg>
<arg name="lpcbMaxValueLen">LPDWORD</arg>
<arg name="lpcbSecurityDescriptor">LPDWORD</arg>
<arg name="lpftLastWriteTime">PFILETIME</arg>
</function>
<function name="RegQueryValueA" ret="LSTATUS" convention="__stdcall">
<arg name="hKey">HKEY</arg>
<arg name="lpSubKey">LPCSTR</arg>
<arg name="lpData">LPSTR</arg>
<arg name="lpcbData">PLONG</arg>
</function>
<function name="RegQueryValueW" ret="LSTATUS" convention="__stdcall">
<arg name="hKey">HKEY</arg>
<arg name="lpSubKey">LPCWSTR</arg>
<arg name="lpData">LPWSTR</arg>
<arg name="lpcbData">PLONG</arg>
</function>
<function name="RegQueryMultipleValuesA" ret="LSTATUS" convention="__stdcall">
<arg name="hKey">HKEY</arg>
<arg name="val_list">PVALENTA</arg>
<arg name="num_vals">DWORD</arg>
<arg name="lpValueBuf">LPSTR</arg>
<arg name="ldwTotsize">LPDWORD</arg>
</function>
<function name="RegQueryMultipleValuesW" ret="LSTATUS" convention="__stdcall">
<arg name="hKey">HKEY</arg>
<arg name="val_list">PVALENTW</arg>
<arg name="num_vals">DWORD</arg>
<arg name="lpValueBuf">LPWSTR</arg>
<arg name="ldwTotsize">LPDWORD</arg>
</function>

<function name="RegQueryValueExA" ret="LSTATUS" convention="__stdcall">
<arg name="hKey">HKEY</arg>
<arg name="lpValueName">LPCSTR</arg>
<arg name="lpReserved">LPDWORD</arg>
<arg name="lpType">LPDWORD</arg>
<arg name="lpData">LPBYTE</arg>
<arg name="lpcbData">LPDWORD</arg>
</function>
<function name="RegQueryValueExW" ret="LSTATUS" convention="__stdcall">
<arg name="hKey">HKEY</arg>
<arg name="lpValueName">LPCWSTR</arg>
<arg name="lpReserved">LPDWORD</arg>
<arg name="lpType">LPDWORD</arg>
<arg name="lpData">LPBYTE</arg>
<arg name="lpcbData">LPDWORD</arg>
</function>
<function name="RegReplaceKeyA" ret="LSTATUS" convention="__stdcall">
<arg name="hKey">HKEY</arg>
<arg name="lpSubKey">LPCSTR</arg>
<arg name="lpNewFile">LPCSTR</arg>
<arg name="lpOldFile">LPCSTR</arg>
</function>
<function name="RegReplaceKeyW" ret="LSTATUS" convention="__stdcall">
<arg name="hKey">HKEY</arg>
<arg name="lpSubKey">LPCWSTR</arg>
<arg name="lpNewFile">LPCWSTR</arg>
<arg name="lpOldFile">LPCWSTR</arg>
</function>
<function name="RegRestoreKeyA" ret="LSTATUS" convention="__stdcall">
<arg name="hKey">HKEY</arg>
<arg name="lpFile">LPCSTR</arg>
<arg name="dwFlags">DWORD</arg>
</function>
<function name="RegRestoreKeyW" ret="LSTATUS" convention="__stdcall">
<arg name="hKey">HKEY</arg>
<arg name="lpFile">LPCWSTR</arg>
<arg name="dwFlags">DWORD</arg>
</function>
<function name="RegSaveKeyA" ret="LSTATUS" convention="__stdcall">
<arg name="hKey">HKEY</arg>
<arg name="lpFile">LPCSTR</arg>
<arg name="lpSecurityAttributes">const LPSECURITY_ATTRIBUTES</arg>
</function>
<function name="RegSaveKeyW" ret="LSTATUS" convention="__stdcall">
<arg name="hKey">HKEY</arg>
<arg name="lpFile">LPCWSTR</arg>
<arg name="lpSecurityAttributes">const LPSECURITY_ATTRIBUTES</arg>
</function>
<function name="RegSetKeySecurity" ret="LSTATUS" convention="__stdcall">
<arg name="hKey">HKEY</arg>
<arg name="SecurityInformation">SECURITY_INFORMATION</arg>
<arg name="pSecurityDescriptor">PSECURITY_DESCRIPTOR</arg>
</function>

<function name="RegSetValueA" ret="LSTATUS" convention="__stdcall">
<arg name="hKey">HKEY</arg>
<arg name="lpSubKey">LPCSTR</arg>
<arg name="dwType">DWORD</arg>
<arg name="lpData">LPCSTR</arg>
<arg name="cbData">DWORD</arg>
</function>
<function name="RegSetValueW" ret="LSTATUS" convention="__stdcall">
<arg name="hKey">HKEY</arg>
<arg name="lpSubKey">LPCWSTR</arg>
<arg name="dwType">DWORD</arg>
<arg name="lpData">LPCWSTR</arg>
<arg name="cbData">DWORD</arg>
</function>
<function name="RegSetValueExA" ret="LSTATUS" convention="__stdcall">
<arg name="hKey">HKEY</arg>
<arg name="lpValueName">LPCSTR</arg>
<arg name="Reserved">DWORD</arg>
<arg name="dwType">DWORD</arg>
<arg name="lpData">const BYTE*</arg>
<arg name="cbData">DWORD</arg>
</function>
<function name="RegSetValueExW" ret="LSTATUS" convention="__stdcall">
<arg name="hKey">HKEY</arg>
<arg name="lpValueName">LPCWSTR</arg>
<arg name="Reserved">DWORD</arg>
<arg name="dwType">DWORD</arg>
<arg name="lpData">const BYTE*</arg>
<arg name="cbData">DWORD</arg>
</function>
<function name="RegUnLoadKeyA" ret="LSTATUS" convention="__stdcall">
<arg name="hKey">HKEY   </arg>
<arg name="lpSubKey">LPCSTR</arg>
</function>
<function name="RegUnLoadKeyW" ret="LSTATUS" convention="__stdcall">
<arg name="hKey">HKEY   </arg>
<arg name="lpSubKey">LPCWSTR</arg>
</function>
<function name="RegDeleteKeyValueA" ret="LSTATUS" convention="__stdcall">
<arg name="hKey">HKEY    </arg>
<arg name="lpSubKey">LPCSTR</arg>
<arg name="lpValueName">LPCSTR</arg>
</function>
<function name="RegDeleteKeyValueW" ret="LSTATUS" convention="__stdcall">
<arg name="hKey">HKEY    </arg>
<arg name="lpSubKey">LPCWSTR</arg>
<arg name="lpValueName">LPCWSTR</arg>
</function>
<function name="RegSetKeyValueA" ret="LSTATUS" convention="__stdcall">
<arg name="hKey">HKEY    </arg>
<arg name="lpSubKey">LPCSTR </arg>
<arg name="lpValueName">LPCSTR </arg>
<arg name="dwType">DWORD   </arg>
<arg name="lpData">LPCVOID </arg>
<arg name="cbData">DWORD   </arg>
</function>
<function name="RegSetKeyValueW" ret="LSTATUS" convention="__stdcall">
<arg name="hKey">HKEY    </arg>
<arg name="lpSubKey">LPCWSTR </arg>
<arg name="lpValueName">LPCWSTR </arg>
<arg name="dwType">DWORD   </arg>
<arg name="lpData">LPCVOID </arg>
<arg name="cbData">DWORD   </arg>
</function>
<function name="RegDeleteTreeA" ret="LSTATUS" convention="__stdcall">
<arg name="hKey">HKEY    </arg>
<arg name="lpSubKey">LPCSTR </arg>
</function>
<function name="RegDeleteTreeW" ret="LSTATUS" convention="__stdcall">
<arg name="hKey">HKEY    </arg>
<arg name="lpSubKey">LPCWSTR </arg>
</function>
<function name="RegCopyTreeA" ret="LSTATUS" convention="__stdcall">
<arg name="hKeySrc">HKEY    </arg>
<arg name="lpSubKey">LPCSTR </arg>
<arg name="hKeyDest">HKEY    </arg>
</function>
<function name="RegCopyTreeW" ret="LSTATUS" convention="__stdcall">
<arg name="hKeySrc">HKEY    </arg>
<arg name="lpSubKey">LPCWSTR </arg>
<arg name="hKeyDest">HKEY    </arg>
</function>
<function name="RegGetValueA" ret="LSTATUS" convention="__stdcall">
<arg name="hkey">HKEY   </arg>
<arg name="lpSubKey">LPCSTR </arg>
<arg name="lpValue">LPCSTR </arg>
<arg name="dwFlags">DWORD   </arg>
<arg name="pdwType">LPDWORD</arg>
<arg name="pvData">PVOID  </arg>
<arg name="pcbData">LPDWORD</arg>
</function>
<function name="RegGetValueW" ret="LSTATUS" convention="__stdcall">
<arg name="hkey">HKEY   </arg>
<arg name="lpSubKey">LPCWSTR </arg>
<arg name="lpValue">LPCWSTR </arg>
<arg name="dwFlags">DWORD   </arg>
<arg name="pdwType">LPDWORD</arg>
<arg name="pvData">PVOID  </arg>
<arg name="pcbData">LPDWORD</arg>
</function>
<function name="RegLoadMUIStringA" ret="LSTATUS" convention="__stdcall">
<arg name="hKey">HKEY       </arg>
<arg name="pszValue">LPCSTR   </arg>
<arg name="pszOutBuf">LPSTR    </arg>
<arg name="cbOutBuf">DWORD      </arg>
<arg name="pcbData">LPDWORD    </arg>
<arg name="Flags">DWORD      </arg>
   
<arg name="pszDirectory">LPCSTR   </arg>
</function>
<function name="RegLoadMUIStringW" ret="LSTATUS" convention="__stdcall">
<arg name="hKey">HKEY       </arg>
<arg name="pszValue">LPCWSTR   </arg>
<arg name="pszOutBuf">LPWSTR    </arg>
<arg name="cbOutBuf">DWORD      </arg>
<arg name="pcbData">LPDWORD    </arg>
<arg name="Flags">DWORD      </arg>
   
<arg name="pszDirectory">LPCWSTR   </arg>
</function>

<function name="RegLoadAppKeyA" ret="LSTATUS" convention="__stdcall">
<arg name="lpFile">LPCSTR   </arg>
<arg name="phkResult">PHKEY      </arg>
<arg name="samDesired">REGSAM     </arg>
 
                DWORD       dwOptions,
<arg name="Reserved">DWORD      </arg>
</function>
<function name="RegLoadAppKeyW" ret="LSTATUS" convention="__stdcall">
<arg name="lpFile">LPCWSTR   </arg>
<arg name="phkResult">PHKEY      </arg>
<arg name="samDesired">REGSAM     </arg>
 
                DWORD       dwOptions,
<arg name="Reserved">DWORD      </arg>
</function>
<function name="InitiateSystemShutdownA" ret="BOOL" convention="__stdcall">
<arg name="lpMachineName">LPSTR</arg>
<arg name="lpMessage">LPSTR</arg>
<arg name="dwTimeout">DWORD</arg>
<arg name="bForceAppsClosed">BOOL</arg>
<arg name="bRebootAfterShutdown">BOOL</arg>
</function>
<function name="InitiateSystemShutdownW" ret="BOOL" convention="__stdcall">
<arg name="lpMachineName">LPWSTR</arg>
<arg name="lpMessage">LPWSTR</arg>
<arg name="dwTimeout">DWORD</arg>
<arg name="bForceAppsClosed">BOOL</arg>
<arg name="bRebootAfterShutdown">BOOL</arg>
</function>

<function name="AbortSystemShutdownA" ret="BOOL" convention="__stdcall">
<arg name="lpMachineName">LPSTR</arg>
</function>
<function name="AbortSystemShutdownW" ret="BOOL" convention="__stdcall">
<arg name="lpMachineName">LPWSTR</arg>
</function>

#line 1 "\\program files\\Microsoft SDKs\\Windows\\v6.0A\\Include\\reason.h"

#pragma once
<function name="InitiateSystemShutdownExA" ret="BOOL" convention="__stdcall">
<arg name="lpMachineName">LPSTR</arg>
<arg name="lpMessage">LPSTR</arg>
<arg name="dwTimeout">DWORD</arg>
<arg name="bForceAppsClosed">BOOL</arg>
<arg name="bRebootAfterShutdown">BOOL</arg>
<arg name="dwReason">DWORD</arg>
</function>
<function name="InitiateSystemShutdownExW" ret="BOOL" convention="__stdcall">
<arg name="lpMachineName">LPWSTR</arg>
<arg name="lpMessage">LPWSTR</arg>
<arg name="dwTimeout">DWORD</arg>
<arg name="bForceAppsClosed">BOOL</arg>
<arg name="bRebootAfterShutdown">BOOL</arg>
<arg name="dwReason">DWORD</arg>
</function>
<function name="InitiateShutdownA" ret="DWORD" convention="__stdcall">
<arg name="lpMachineName">LPSTR</arg>
<arg name="lpMessage">LPSTR</arg>
<arg name="dwGracePeriod">DWORD</arg>
<arg name="dwShutdownFlags">DWORD</arg>
<arg name="dwReason">DWORD</arg>
</function>
<function name="InitiateShutdownW" ret="DWORD" convention="__stdcall">
<arg name="lpMachineName">LPWSTR</arg>
<arg name="lpMessage">LPWSTR</arg>
<arg name="dwGracePeriod">DWORD</arg>
<arg name="dwShutdownFlags">DWORD</arg>
<arg name="dwReason">DWORD</arg>
</function>
<function name="RegSaveKeyExA" ret="LSTATUS" convention="__stdcall">
<arg name="hKey">HKEY</arg>
<arg name="lpFile">LPCSTR</arg>
<arg name="lpSecurityAttributes">const LPSECURITY_ATTRIBUTES</arg>
<arg name="Flags">DWORD</arg>
</function>
<function name="RegSaveKeyExW" ret="LSTATUS" convention="__stdcall">
<arg name="hKey">HKEY</arg>
<arg name="lpFile">LPCWSTR</arg>
<arg name="lpSecurityAttributes">const LPSECURITY_ATTRIBUTES</arg>
<arg name="Flags">DWORD</arg>
</function>
<function name="Wow64Win32ApiEntry" ret="LONG" convention="__stdcall">
<arg name="dwFuncNumber">DWORD</arg>
<arg name="dwFlag">DWORD</arg>
<arg name="dwRes">DWORD</arg>
</function>
#line 1 "\\program files\\Microsoft SDKs\\Windows\\v6.0A\\Include\\winnetwk.h"
#pragma once

<struct name="_NETRESOURCEA">
<field name="dwScope">DWORD</field>
<field name="dwType">DWORD</field>
<field name="dwDisplayType">DWORD</field>
<field name="dwUsage">DWORD</field>
<field name="lpLocalName">LPSTR</field>
<field name="lpRemoteName">LPSTR</field>
    LPSTR    lpComment ;
    LPSTR    lpProvider;
}NETRESOURCEA, *LPNETRESOURCEA;
<struct name="_NETRESOURCEW">
<field name="dwScope">DWORD</field>
<field name="dwType">DWORD</field>
<field name="dwDisplayType">DWORD</field>
<field name="dwUsage">DWORD</field>
<field name="lpLocalName">LPWSTR</field>
<field name="lpRemoteName">LPWSTR</field>
    LPWSTR   lpComment ;
    LPWSTR   lpProvider;
}NETRESOURCEW, *LPNETRESOURCEW;

typedef NETRESOURCEA NETRESOURCE;
typedef LPNETRESOURCEA LPNETRESOURCE;
<function name="WNetAddConnectionA" ret="DWORD" convention="__stdcall">
<arg name="lpRemoteName">LPCSTR  </arg>
<arg name="lpPassword">LPCSTR  </arg>
<arg name="lpLocalName">LPCSTR  </arg>
</function>
<function name="WNetAddConnectionW" ret="DWORD" convention="__stdcall">
<arg name="lpRemoteName">LPCWSTR  </arg>
<arg name="lpPassword">LPCWSTR  </arg>
<arg name="lpLocalName">LPCWSTR  </arg>
</function>
<function name="WNetAddConnection2A" ret="DWORD" convention="__stdcall">
<arg name="lpNetResource">LPNETRESOURCEA</arg>
<arg name="lpPassword">LPCSTR      </arg>
<arg name="lpUserName">LPCSTR      </arg>
<arg name="dwFlags">DWORD         </arg>
</function>
<function name="WNetAddConnection2W" ret="DWORD" convention="__stdcall">
<arg name="lpNetResource">LPNETRESOURCEW</arg>
<arg name="lpPassword">LPCWSTR      </arg>
<arg name="lpUserName">LPCWSTR      </arg>
<arg name="dwFlags">DWORD         </arg>
</function>
<function name="WNetAddConnection3A" ret="DWORD" convention="__stdcall">
<arg name="hwndOwner">HWND          </arg>
<arg name="lpNetResource">LPNETRESOURCEA</arg>
<arg name="lpPassword">LPCSTR      </arg>
<arg name="lpUserName">LPCSTR      </arg>
<arg name="dwFlags">DWORD         </arg>
</function>
<function name="WNetAddConnection3W" ret="DWORD" convention="__stdcall">
<arg name="hwndOwner">HWND          </arg>
<arg name="lpNetResource">LPNETRESOURCEW</arg>
<arg name="lpPassword">LPCWSTR      </arg>
<arg name="lpUserName">LPCWSTR      </arg>
<arg name="dwFlags">DWORD         </arg>
</function>
<function name="WNetCancelConnectionA" ret="DWORD" convention="__stdcall">
<arg name="lpName">LPCSTR</arg>
<arg name="fForce">BOOL    </arg>
</function>
<function name="WNetCancelConnectionW" ret="DWORD" convention="__stdcall">
<arg name="lpName">LPCWSTR</arg>
<arg name="fForce">BOOL    </arg>
</function>
<function name="WNetCancelConnection2A" ret="DWORD" convention="__stdcall">
<arg name="lpName">LPCSTR</arg>
<arg name="dwFlags">DWORD   </arg>
<arg name="fForce">BOOL    </arg>
</function>
<function name="WNetCancelConnection2W" ret="DWORD" convention="__stdcall">
<arg name="lpName">LPCWSTR</arg>
<arg name="dwFlags">DWORD   </arg>
<arg name="fForce">BOOL    </arg>
</function>
<function name="WNetGetConnectionA" ret="DWORD" convention="__stdcall">
<arg name="lpLocalName">LPCSTR</arg>
<arg name="lpRemoteName">LPSTR </arg>
<arg name="lpnLength">LPDWORD</arg>
</function>
<function name="WNetGetConnectionW" ret="DWORD" convention="__stdcall">
<arg name="lpLocalName">LPCWSTR</arg>
<arg name="lpRemoteName">LPWSTR </arg>
<arg name="lpnLength">LPDWORD</arg>
</function>
<function name="WNetRestoreSingleConnectionW" ret="DWORD" convention="__stdcall">
<arg name="hwndParent">HWND   </arg>
<arg name="lpDevice">LPCWSTR</arg>
<arg name="fUseUI">BOOL   </arg>
</function>

<function name="WNetUseConnectionA" ret="DWORD" convention="__stdcall">
<arg name="hwndOwner">HWND           </arg>
<arg name="lpNetResource">LPNETRESOURCEA </arg>
<arg name="lpPassword">LPCSTR       </arg>
<arg name="lpUserId">LPCSTR       </arg>
<arg name="dwFlags">DWORD          </arg>
<arg name="lpAccessName">LPSTR</arg>
<arg name="lpBufferSize">LPDWORD</arg>
<arg name="lpResult">LPDWORD  </arg>
</function>
<function name="WNetUseConnectionW" ret="DWORD" convention="__stdcall">
<arg name="hwndOwner">HWND           </arg>
<arg name="lpNetResource">LPNETRESOURCEW </arg>
<arg name="lpPassword">LPCWSTR       </arg>
<arg name="lpUserId">LPCWSTR       </arg>
<arg name="dwFlags">DWORD          </arg>
<arg name="lpAccessName">LPWSTR</arg>
<arg name="lpBufferSize">LPDWORD</arg>
<arg name="lpResult">LPDWORD  </arg>
</function>

<function name="WNetConnectionDialog" ret="DWORD" convention="__stdcall">
<arg name="hwnd">HWND </arg>
<arg name="dwType">DWORD</arg>
</function>

<function name="WNetDisconnectDialog" ret="DWORD" convention="__stdcall">
<arg name="hwnd">HWND </arg>
<arg name="dwType">DWORD</arg>
</function>
<struct name="_CONNECTDLGSTRUCTA">
<field name="cbStructure">DWORD</field>
<field name="hwndOwner">HWND</field>
<field name="lpConnRes">LPNETRESOURCEA</field>
<field name="dwFlags">DWORD</field>
<field name="dwDevNum">DWORD</field>
</struct>
<typedefprev id="CONNECTDLGSTRUCTA"/>
<typedefptrprev id="LPCONNECTDLGSTRUCTA"/>
<struct name="_CONNECTDLGSTRUCTW">
<field name="cbStructure">DWORD</field>
<field name="hwndOwner">HWND</field>
<field name="lpConnRes">LPNETRESOURCEW</field>
<field name="dwFlags">DWORD</field>
<field name="dwDevNum">DWORD</field>
</struct>
<typedefprev id="CONNECTDLGSTRUCTW"/>
<typedefptrprev id="LPCONNECTDLGSTRUCTW"/>

typedef CONNECTDLGSTRUCTA CONNECTDLGSTRUCT;
typedef LPCONNECTDLGSTRUCTA LPCONNECTDLGSTRUCT;
<function name="WNetConnectionDialog1A" ret="DWORD" convention="__stdcall">
<arg name="lpConnDlgStruct">LPCONNECTDLGSTRUCTA</arg>
</function>
<function name="WNetConnectionDialog1W" ret="DWORD" convention="__stdcall">
<arg name="lpConnDlgStruct">LPCONNECTDLGSTRUCTW</arg>
</function>
<struct name="_DISCDLGSTRUCTA">
<field name="cbStructure">DWORD</field>
<field name="hwndOwner">HWND</field>
<field name="lpLocalName">LPSTR</field>
<field name="lpRemoteName">LPSTR</field>
<field name="dwFlags">DWORD</field>
</struct>
<typedefprev id="DISCDLGSTRUCTA"/>
<typedefptrprev id="LPDISCDLGSTRUCTA"/>
<struct name="_DISCDLGSTRUCTW">
<field name="cbStructure">DWORD</field>
<field name="hwndOwner">HWND</field>
<field name="lpLocalName">LPWSTR</field>
<field name="lpRemoteName">LPWSTR</field>
<field name="dwFlags">DWORD</field>
</struct>
<typedefprev id="DISCDLGSTRUCTW"/>
<typedefptrprev id="LPDISCDLGSTRUCTW"/>

typedef DISCDLGSTRUCTA DISCDLGSTRUCT;
typedef LPDISCDLGSTRUCTA LPDISCDLGSTRUCT;
<function name="WNetDisconnectDialog1A" ret="DWORD" convention="__stdcall">
<arg name="lpConnDlgStruct">LPDISCDLGSTRUCTA</arg>
</function>
<function name="WNetDisconnectDialog1W" ret="DWORD" convention="__stdcall">
<arg name="lpConnDlgStruct">LPDISCDLGSTRUCTW</arg>
</function>
<function name="WNetOpenEnumA" ret="DWORD" convention="__stdcall">
<arg name="dwScope">DWORD         </arg>
<arg name="dwType">DWORD         </arg>
<arg name="dwUsage">DWORD         </arg>
<arg name="lpNetResource">LPNETRESOURCEA</arg>
<arg name="lphEnum">LPHANDLE      </arg>
</function>
<function name="WNetOpenEnumW" ret="DWORD" convention="__stdcall">
<arg name="dwScope">DWORD         </arg>
<arg name="dwType">DWORD         </arg>
<arg name="dwUsage">DWORD         </arg>
<arg name="lpNetResource">LPNETRESOURCEW</arg>
<arg name="lphEnum">LPHANDLE      </arg>
</function>
<function name="WNetEnumResourceA" ret="DWORD" convention="__stdcall">
<arg name="hEnum">HANDLE </arg>
<arg name="lpcCount">LPDWORD</arg>
<arg name="lpBuffer">LPVOID </arg>
<arg name="lpBufferSize">LPDWORD</arg>
</function>
<function name="WNetEnumResourceW" ret="DWORD" convention="__stdcall">
<arg name="hEnum">HANDLE </arg>
<arg name="lpcCount">LPDWORD</arg>
<arg name="lpBuffer">LPVOID </arg>
<arg name="lpBufferSize">LPDWORD</arg>
</function>
<function name="WNetCloseEnum" ret="DWORD" convention="__stdcall">
<arg name="hEnum">HANDLE  </arg>
</function>
<function name="WNetGetResourceParentA" ret="DWORD" convention="__stdcall">
<arg name="lpNetResource">LPNETRESOURCEA</arg>
<arg name="lpBuffer">LPVOID</arg>
<arg name="lpcbBuffer">LPDWORD</arg>
</function>
<function name="WNetGetResourceParentW" ret="DWORD" convention="__stdcall">
<arg name="lpNetResource">LPNETRESOURCEW</arg>
<arg name="lpBuffer">LPVOID</arg>
<arg name="lpcbBuffer">LPDWORD</arg>
</function>
<function name="WNetGetResourceInformationA" ret="DWORD" convention="__stdcall">
<arg name="lpNetResource">LPNETRESOURCEA </arg>
<arg name="lpBuffer">LPVOID</arg>
<arg name="lpcbBuffer">LPDWORD</arg>
<arg name="lplpSystem">LPSTR *</arg>
</function>
<function name="WNetGetResourceInformationW" ret="DWORD" convention="__stdcall">
<arg name="lpNetResource">LPNETRESOURCEW </arg>
<arg name="lpBuffer">LPVOID</arg>
<arg name="lpcbBuffer">LPDWORD</arg>
<arg name="lplpSystem">LPWSTR *</arg>
</function>

<struct name="_UNIVERSAL_NAME_INFOA">
<field name="lpUniversalName">LPSTR</field>
}UNIVERSAL_NAME_INFOA, *LPUNIVERSAL_NAME_INFOA;
<struct name="_UNIVERSAL_NAME_INFOW">
<field name="lpUniversalName">LPWSTR</field>
}UNIVERSAL_NAME_INFOW, *LPUNIVERSAL_NAME_INFOW;

typedef UNIVERSAL_NAME_INFOA UNIVERSAL_NAME_INFO;
typedef LPUNIVERSAL_NAME_INFOA LPUNIVERSAL_NAME_INFO;
<struct name="_REMOTE_NAME_INFOA">
<field name="lpUniversalName">LPSTR</field>
<field name="lpConnectionName">LPSTR</field>
<field name="lpRemainingPath">LPSTR</field>
}REMOTE_NAME_INFOA, *LPREMOTE_NAME_INFOA;
<struct name="_REMOTE_NAME_INFOW">
<field name="lpUniversalName">LPWSTR</field>
<field name="lpConnectionName">LPWSTR</field>
<field name="lpRemainingPath">LPWSTR</field>
}REMOTE_NAME_INFOW, *LPREMOTE_NAME_INFOW;

typedef REMOTE_NAME_INFOA REMOTE_NAME_INFO;
typedef LPREMOTE_NAME_INFOA LPREMOTE_NAME_INFO;
<function name="WNetGetUniversalNameA" ret="DWORD" convention="__stdcall">
<arg name="lpLocalPath">LPCSTR</arg>
<arg name="dwInfoLevel">DWORD   </arg>
<arg name="lpBuffer">LPVOID</arg>
<arg name="lpBufferSize">LPDWORD</arg>
</function>
<function name="WNetGetUniversalNameW" ret="DWORD" convention="__stdcall">
<arg name="lpLocalPath">LPCWSTR</arg>
<arg name="dwInfoLevel">DWORD   </arg>
<arg name="lpBuffer">LPVOID</arg>
<arg name="lpBufferSize">LPDWORD</arg>
</function>
<function name="WNetGetUserA" ret="DWORD" convention="__stdcall">
<arg name="lpName">LPCSTR </arg>
<arg name="lpUserName">LPSTR</arg>
<arg name="lpnLength">LPDWORD</arg>
</function>
<function name="WNetGetUserW" ret="DWORD" convention="__stdcall">
<arg name="lpName">LPCWSTR </arg>
<arg name="lpUserName">LPWSTR</arg>
<arg name="lpnLength">LPDWORD</arg>
</function>
<function name="WNetGetProviderNameA" ret="DWORD" convention="__stdcall">
<arg name="dwNetType">DWORD  </arg>
<arg name="lpProviderName">LPSTR</arg>
<arg name="lpBufferSize">LPDWORD</arg>
</function>
<function name="WNetGetProviderNameW" ret="DWORD" convention="__stdcall">
<arg name="dwNetType">DWORD  </arg>
<arg name="lpProviderName">LPWSTR</arg>
<arg name="lpBufferSize">LPDWORD</arg>
</function>
<struct name="_NETINFOSTRUCT">
<field name="cbStructure">DWORD</field>
<field name="dwProviderVersion">DWORD</field>
<field name="dwStatus">DWORD</field>
<field name="dwCharacteristics">DWORD</field>
<field name="dwHandle">ULONG_PTR</field>
<field name="wNetType">WORD</field>
<field name="dwPrinters">DWORD</field>
<field name="dwDrives">DWORD</field>
</struct>
<typedefprev id="NETINFOSTRUCT"/>
<typedefptrprev id="LPNETINFOSTRUCT"/>
<function name="WNetGetNetworkInformationA" ret="DWORD" convention="__stdcall">
<arg name="lpProvider">LPCSTR       </arg>
<arg name="lpNetInfoStruct">LPNETINFOSTRUCT</arg>
</function>
<function name="WNetGetNetworkInformationW" ret="DWORD" convention="__stdcall">
<arg name="lpProvider">LPCWSTR       </arg>
<arg name="lpNetInfoStruct">LPNETINFOSTRUCT</arg>
</function>

<function name="WNetGetLastErrorA" ret="DWORD" convention="__stdcall">
<arg name="lpError">LPDWORD   </arg>
<arg name="lpErrorBuf">LPSTR</arg>
<arg name="nErrorBufSize">DWORD     </arg>
<arg name="lpNameBuf">LPSTR </arg>
<arg name="nNameBufSize">DWORD     </arg>
</function>
<function name="WNetGetLastErrorW" ret="DWORD" convention="__stdcall">
<arg name="lpError">LPDWORD   </arg>
<arg name="lpErrorBuf">LPWSTR</arg>
<arg name="nErrorBufSize">DWORD     </arg>
<arg name="lpNameBuf">LPWSTR </arg>
<arg name="nNameBufSize">DWORD     </arg>
</function>
<struct name="_NETCONNECTINFOSTRUCT">
<field name="cbStructure">DWORD</field>
<field name="dwFlags">DWORD</field>
<field name="dwSpeed">DWORD</field>
<field name="dwDelay">DWORD</field>
<field name="dwOptDataSize">DWORD</field>
</struct>
<typedefprev id="NETCONNECTINFOSTRUCT"/>
<typedefptrprev id="LPNETCONNECTINFOSTRUCT"/>

<function name="MultinetGetConnectionPerformanceA" ret="DWORD" convention="__stdcall">
<arg name="lpNetResource">LPNETRESOURCEA</arg>
<arg name="lpNetConnectInfoStruct">LPNETCONNECTINFOSTRUCT</arg>
</function>
<function name="MultinetGetConnectionPerformanceW" ret="DWORD" convention="__stdcall">
<arg name="lpNetResource">LPNETRESOURCEW</arg>
<arg name="lpNetConnectInfoStruct">LPNETCONNECTINFOSTRUCT</arg>
</function>
#line 1 "\\program files\\Microsoft SDKs\\Windows\\v6.0A\\Include\\cderr.h"

#pragma once

#line 1 "\\program files\\Microsoft SDKs\\Windows\\v6.0A\\Include\\dde.h"

#pragma once
<struct>

        unsigned short bAppReturnCode:8,
                 reserved:6,
                 fBusy:1,
		 fAck:1;

} DDEACK;
<struct>

        unsigned short reserved:14,
                 fDeferUpd:1,
		 fAckReq:1;

	short     cfFormat;
} DDEADVISE;

<struct>

	unsigned short unused:12,
                 fResponse:1,
                 fRelease:1,
                 reserved:1,
                 fAckReq:1;
	short	 cfFormat;
	BYTE	 Value[1];
} DDEDATA;

<struct>

	unsigned short unused:13,  
                             
		 fRelease:1,
		 fReserved:2;
	short    cfFormat;
	BYTE	 Value[1];  
                            

} DDEPOKE;

<struct>

        unsigned short unused:13,
                 fRelease:1,
                 fDeferUpd:1,
		 fAckReq:1;
	short	 cfFormat;
} DDELN;

<struct>

	unsigned short unused:12,
                 fAck:1,
                 fRelease:1,
                 fReserved:1,
                 fAckReq:1;
	short	 cfFormat;
	BYTE	 rgb[1];
} DDEUP;

<function name="DdeSetQualityOfService" ret="BOOL" convention="__stdcall">
<arg name="hwndClient">HWND</arg>

    const SECURITY_QUALITY_OF_SERVICE *pqosNew,
    PSECURITY_QUALITY_OF_SERVICE pqosPrev);

<function name="ImpersonateDdeClientWindow" ret="BOOL" convention="__stdcall">
<arg name="hWndClient">HWND</arg>
<arg name="hWndServer">HWND</arg>
</function>

<function name="PackDDElParam" ret="LPARAM" convention="__stdcall">
<arg name="msg">UINT</arg>
<arg name="uiLo">UINT_PTR</arg>
<arg name="uiHi">UINT_PTR</arg>
</function>
<function name="UnpackDDElParam" ret="BOOL" convention="__stdcall">
<arg name="msg">UINT</arg>
<arg name="lParam">LPARAM</arg>
<arg name="puiLo">PUINT_PTR</arg>
<arg name="puiHi">PUINT_PTR</arg>
</function>
<function name="FreeDDElParam" ret="BOOL" convention="__stdcall">
<arg name="msg">UINT</arg>
<arg name="lParam">LPARAM</arg>
</function>
<function name="ReuseDDElParam" ret="LPARAM" convention="__stdcall">
<arg name="lParam">LPARAM</arg>
<arg name="msgIn">UINT</arg>
<arg name="msgOut">UINT</arg>
<arg name="uiLo">UINT_PTR</arg>
<arg name="uiHi">UINT_PTR</arg>
</function>

#line 1 "\\program files\\Microsoft SDKs\\Windows\\v6.0A\\Include\\ddeml.h"

<struct name="HCONVLIST__">
int unused; };
<typedef name="HCONVLIST">HCONVLIST__ *</typedef>
<struct name="HCONV__">
int unused; };
<typedef name="HCONV">HCONV__ *</typedef>
<struct name="HSZ__">
int unused; };
<typedef name="HSZ">HSZ__ *</typedef>
<struct name="HDDEDATA__">
int unused; };
<typedef name="HDDEDATA">HDDEDATA__ *</typedef>

<struct name="tagHSZPAIR">
<field name="hszSvc">HSZ</field>
<field name="hszTopic">HSZ</field>
</struct>
<typedefprev id="HSZPAIR"/>
<typedefptrprev id="PHSZPAIR"/>

<struct name="tagCONVCONTEXT">
<field name="cb">UINT</field>
<field name="wFlags">UINT</field>
<field name="wCountryID">UINT</field>
<field name="iCodePage">int</field>
<field name="dwLangID">DWORD</field>
<field name="dwSecurity">DWORD</field>
<field name="qos">SECURITY_QUALITY_OF_SERVICE</field>
</struct>
<typedefprev id="CONVCONTEXT"/>
<typedefptrprev id="PCONVCONTEXT"/>

<struct name="tagCONVINFO">
<field name="cb">DWORD</field>
<field name="hUser">DWORD_PTR</field>
<field name="hConvPartner">HCONV</field>
<field name="hszSvcPartner">HSZ</field>
<field name="hszServiceReq">HSZ</field>
<field name="hszTopic">HSZ</field>
<field name="hszItem">HSZ</field>
<field name="wFmt">UINT</field>
<field name="wType">UINT</field>
<field name="wStatus">UINT</field>
<field name="wConvst">UINT</field>
<field name="wLastError">UINT</field>
<field name="hConvList">HCONVLIST</field>
<field name="ConvCtxt">CONVCONTEXT</field>
<field name="hwnd">HWND</field>
<field name="hwndPartner">HWND</field>
</struct>
<typedefprev id="CONVINFO"/>
<typedefptrprev id="PCONVINFO"/>

<function name="FNCALLBACK" ret="typedef HDDEDATA" convention="__stdcall">
<arg name="wType">UINT</arg>
<arg name="wFmt">UINT</arg>
<arg name="hConv">HCONV</arg>
<arg name="hsz1">HSZ</arg>
<arg name="hsz2">HSZ</arg>
<arg name="hData">HDDEDATA</arg>
<arg name="dwData1">ULONG_PTR</arg>
<arg name="dwData2">ULONG_PTR</arg>
</function>
typedef<fnptr name="PFNCALLBACK" ret="HDDEDATA" convention="__stdcall">
<arg name="wType">UINT</arg>
<arg name="wFmt">UINT</arg>
<arg name="hConv">HCONV</arg>
<arg name="hsz1">HSZ</arg>
<arg name="hsz2">HSZ</arg>
<arg name="hData">HDDEDATA</arg>
<arg name="dwData1">ULONG_PTR</arg>
<arg name="dwData2">ULONG_PTR</arg>
</function>
<function name="DdeInitializeA" ret="UINT" convention="__stdcall">
<arg name="pidInst">LPDWORD</arg>
<arg name="pfnCallback">PFNCALLBACK</arg>
<arg name="afCmd">DWORD</arg>
<arg name="ulRes">DWORD</arg>
</function>
<function name="DdeInitializeW" ret="UINT" convention="__stdcall">
<arg name="pidInst">LPDWORD</arg>
<arg name="pfnCallback">PFNCALLBACK</arg>
<arg name="afCmd">DWORD</arg>
<arg name="ulRes">DWORD</arg>
</function>
<function name="DdeUninitialize" ret="BOOL" convention="__stdcall">
<arg name="idInst">DWORD</arg>
</function>

<function name="DdeConnectList" ret="HCONVLIST" convention="__stdcall">
<arg name="idInst">DWORD</arg>
<arg name="hszService">HSZ</arg>
<arg name="hszTopic">HSZ</arg>
<arg name="hConvList">HCONVLIST</arg>
<arg name="pCC">PCONVCONTEXT</arg>
</function>

<function name="DdeQueryNextServer" ret="HCONV" convention="__stdcall">
<arg name="hConvList">HCONVLIST</arg>
<arg name="hConvPrev">HCONV</arg>
</function>
<function name="DdeDisconnectList" ret="BOOL" convention="__stdcall">
<arg name="hConvList">HCONVLIST</arg>
</function>

<function name="DdeConnect" ret="HCONV" convention="__stdcall">
<arg name="idInst">DWORD</arg>
<arg name="hszService">HSZ</arg>
<arg name="hszTopic">HSZ</arg>
<arg name="pCC">PCONVCONTEXT</arg>
</function>

<function name="DdeDisconnect" ret="BOOL" convention="__stdcall">
<arg name="hConv">HCONV</arg>
</function>

<function name="DdeReconnect" ret="HCONV" convention="__stdcall">
<arg name="hConv">HCONV</arg>
</function>

<function name="DdeQueryConvInfo" ret="UINT" convention="__stdcall">
<arg name="hConv">HCONV</arg>
<arg name="idTransaction">DWORD</arg>
<arg name="pConvInfo">PCONVINFO</arg>
</function>

<function name="DdeSetUserHandle" ret="BOOL" convention="__stdcall">
<arg name="hConv">HCONV</arg>
<arg name="id">DWORD</arg>
<arg name="hUser">DWORD_PTR</arg>
</function>

<function name="DdeAbandonTransaction" ret="BOOL" convention="__stdcall">
<arg name="idInst">DWORD</arg>
<arg name="hConv">HCONV</arg>
<arg name="idTransaction">DWORD</arg>
</function>
<function name="DdePostAdvise" ret="BOOL" convention="__stdcall">
<arg name="idInst">DWORD</arg>
<arg name="hszTopic">HSZ</arg>
<arg name="hszItem">HSZ</arg>
</function>

<function name="DdeEnableCallback" ret="BOOL" convention="__stdcall">
<arg name="idInst">DWORD</arg>
<arg name="hConv">HCONV</arg>
<arg name="wCmd">UINT</arg>
</function>

<function name="DdeImpersonateClient" ret="BOOL" convention="__stdcall">
<arg name="hConv">HCONV</arg>
</function>
<function name="DdeNameService" ret="HDDEDATA" convention="__stdcall">
<arg name="idInst">DWORD</arg>
<arg name="hsz1">HSZ</arg>
<arg name="hsz2">HSZ</arg>
<arg name="afCmd">UINT</arg>
</function>
<function name="DdeClientTransaction" ret="HDDEDATA" convention="__stdcall">
<arg name="pData">LPBYTE</arg>
<arg name="cbData">DWORD</arg>
<arg name="hConv">HCONV</arg>
<arg name="hszItem">HSZ</arg>
<arg name="wFmt">UINT</arg>
<arg name="wType">UINT</arg>
<arg name="dwTimeout">DWORD</arg>
<arg name="pdwResult">LPDWORD</arg>
</function>

<function name="DdeCreateDataHandle" ret="HDDEDATA" convention="__stdcall">
<arg name="idInst">DWORD</arg>
<arg name="pSrc">LPBYTE</arg>
<arg name="cb">DWORD</arg>
<arg name="cbOff">DWORD</arg>
<arg name="hszItem">HSZ</arg>
<arg name="wFmt">UINT</arg>
<arg name="afCmd">UINT</arg>
</function>

<function name="DdeAddData" ret="HDDEDATA" convention="__stdcall">
<arg name="hData">HDDEDATA</arg>
<arg name="pSrc">LPBYTE</arg>
<arg name="cb">DWORD</arg>
<arg name="cbOff">DWORD</arg>
</function>

<function name="DdeGetData" ret="DWORD" convention="__stdcall">
<arg name="hData">HDDEDATA</arg>
<arg name="pDst">LPBYTE</arg>
<arg name="cbMax">DWORD</arg>
<arg name="cbOff">DWORD</arg>
</function>

<function name="DdeAccessData" ret="LPBYTE" convention="__stdcall">
<arg name="hData">HDDEDATA</arg>
<arg name="pcbDataSize">LPDWORD</arg>
</function>

<function name="DdeUnaccessData" ret="BOOL" convention="__stdcall">
<arg name="hData">HDDEDATA</arg>
</function>

<function name="DdeFreeDataHandle" ret="BOOL" convention="__stdcall">
<arg name="hData">HDDEDATA</arg>
</function>

<function name="DdeGetLastError" ret="UINT" convention="__stdcall">
<arg name="idInst">DWORD</arg>
</function>

<function name="DdeCreateStringHandleA" ret="HSZ" convention="__stdcall">
<arg name="idInst">DWORD</arg>
<arg name="psz">LPCSTR</arg>
<arg name="iCodePage">int</arg>
</function>
<function name="DdeCreateStringHandleW" ret="HSZ" convention="__stdcall">
<arg name="idInst">DWORD</arg>
<arg name="psz">LPCWSTR</arg>
<arg name="iCodePage">int</arg>
</function>
<function name="DdeQueryStringA" ret="DWORD" convention="__stdcall">
<arg name="idInst">DWORD</arg>
<arg name="hsz">HSZ</arg>
<arg name="psz">LPSTR</arg>
<arg name="cchMax">DWORD</arg>
<arg name="iCodePage">int</arg>
</function>
<function name="DdeQueryStringW" ret="DWORD" convention="__stdcall">
<arg name="idInst">DWORD</arg>
<arg name="hsz">HSZ</arg>
<arg name="psz">LPWSTR</arg>
<arg name="cchMax">DWORD</arg>
<arg name="iCodePage">int</arg>
</function>
<function name="DdeFreeStringHandle" ret="BOOL" convention="__stdcall">
<arg name="idInst">DWORD</arg>
<arg name="hsz">HSZ</arg>
</function>

<function name="DdeKeepStringHandle" ret="BOOL" convention="__stdcall">
<arg name="idInst">DWORD</arg>
<arg name="hsz">HSZ</arg>
</function>

<function name="DdeCmpStringHandles" ret="int" convention="__stdcall">
<arg name="hsz1">HSZ</arg>
<arg name="hsz2">HSZ</arg>
</function>

<struct name="tagDDEML_MSG_HOOK_DATA">
<field name="uiLo">UINT_PTR</field>
<field name="uiHi">UINT_PTR</field>
<field name="cbData">DWORD</field>
<field name="Data[8]">DWORD</field>
</struct>
<typedefprev id="DDEML_MSG_HOOK_DATA"/>
<typedefptrprev id="PDDEML_MSG_HOOK_DATA"/>
<struct name="tagMONMSGSTRUCT">
<field name="cb">UINT</field>
<field name="hwndTo">HWND</field>
<field name="dwTime">DWORD</field>
<field name="hTask">HANDLE</field>
<field name="wMsg">UINT</field>
<field name="wParam">WPARAM</field>
<field name="lParam">LPARAM</field>
<field name="dmhd">DDEML_MSG_HOOK_DATA</field>
</struct>
<typedefprev id="MONMSGSTRUCT"/>
<typedefptrprev id="PMONMSGSTRUCT"/>

<struct name="tagMONCBSTRUCT">
<field name="cb">UINT</field>
<field name="dwTime">DWORD</field>
<field name="hTask">HANDLE</field>
<field name="dwRet">DWORD</field>
<field name="wType">UINT</field>
<field name="wFmt">UINT</field>
<field name="hConv">HCONV</field>
<field name="hsz1">HSZ</field>
<field name="hsz2">HSZ</field>
<field name="hData">HDDEDATA</field>
<field name="dwData1">ULONG_PTR</field>
<field name="dwData2">ULONG_PTR</field>
<field name="cc">CONVCONTEXT</field>
<field name="cbData">DWORD</field>
<field name="Data[8]">DWORD</field>
</struct>
<typedefprev id="MONCBSTRUCT"/>
<typedefptrprev id="PMONCBSTRUCT"/>

<struct name="tagMONHSZSTRUCTA">
<field name="cb">UINT</field>
<field name="fsAction">BOOL</field>
<field name="dwTime">DWORD</field>
<field name="hsz">HSZ</field>
<field name="hTask">HANDLE</field>
<field name="str[1]">CHAR</field>
</struct>
<typedefprev id="MONHSZSTRUCTA"/>
<typedefptrprev id="PMONHSZSTRUCTA"/>
<struct name="tagMONHSZSTRUCTW">
<field name="cb">UINT</field>
<field name="fsAction">BOOL</field>
<field name="dwTime">DWORD</field>
<field name="hsz">HSZ</field>
<field name="hTask">HANDLE</field>
<field name="str[1]">WCHAR</field>
</struct>
<typedefprev id="MONHSZSTRUCTW"/>
<typedefptrprev id="PMONHSZSTRUCTW"/>

typedef MONHSZSTRUCTA MONHSZSTRUCT;
typedef PMONHSZSTRUCTA PMONHSZSTRUCT;
<struct name="tagMONERRSTRUCT">
<field name="cb">UINT</field>
<field name="wLastError">UINT</field>
<field name="dwTime">DWORD</field>
<field name="hTask">HANDLE</field>
</struct>
<typedefprev id="MONERRSTRUCT"/>
<typedefptrprev id="PMONERRSTRUCT"/>

<struct name="tagMONLINKSTRUCT">
<field name="cb">UINT</field>
<field name="dwTime">DWORD</field>
<field name="hTask">HANDLE</field>
<field name="fEstablished">BOOL</field>
<field name="fNoData">BOOL</field>
<field name="hszSvc">HSZ</field>
<field name="hszTopic">HSZ</field>
<field name="hszItem">HSZ</field>
<field name="wFmt">UINT</field>
<field name="fServer">BOOL</field>
<field name="hConvServer">HCONV</field>
<field name="hConvClient">HCONV</field>
</struct>
<typedefprev id="MONLINKSTRUCT"/>
<typedefptrprev id="PMONLINKSTRUCT"/>

<struct name="tagMONCONVSTRUCT">
<field name="cb">UINT</field>
<field name="fConnect">BOOL</field>
<field name="dwTime">DWORD</field>
<field name="hTask">HANDLE</field>
<field name="hszSvc">HSZ</field>
<field name="hszTopic">HSZ</field>
<field name="hConvClient">HCONV</field>
<field name="hConvServer">HCONV</field>
</struct>
<typedefprev id="MONCONVSTRUCT"/>
<typedefptrprev id="PMONCONVSTRUCT"/>
#line 1 "\\program files\\Microsoft SDKs\\Windows\\v6.0A\\Include\\dlgs.h"

#pragma once
<struct name="tagCRGB">
<field name="bRed">BYTE</field>
<field name="bGreen">BYTE</field>
<field name="bBlue">BYTE</field>
<field name="bExtra">BYTE</field>
} CRGB;           
#line 1 "\\program files\\Microsoft SDKs\\Windows\\v6.0A\\Include\\lzexpand.h"

<function name="LZStart" ret="INT" convention="__stdcall">
	void
	);

<function name="LZDone" ret="void" convention="__stdcall">
	void
	);

<function name="CopyLZFile" ret="LONG" convention="__stdcall">
	INT,
	INT
	);

<function name="LZCopy" ret="LONG" convention="__stdcall">
	INT,
	INT
	);

<function name="LZInit" ret="INT" convention="__stdcall">
	INT
	);

<function name="GetExpandedNameA" ret="INT" convention="__stdcall">
	LPSTR,
	LPSTR
	);
<function name="GetExpandedNameW" ret="INT" convention="__stdcall">
	LPWSTR,
	LPWSTR
	);
<function name="LZOpenFileA" ret="INT" convention="__stdcall">
	LPSTR,
	LPOFSTRUCT,
	WORD
	);
<function name="LZOpenFileW" ret="INT" convention="__stdcall">
	LPWSTR,
	LPOFSTRUCT,
	WORD
	);
<function name="LZSeek" ret="LONG" convention="__stdcall">
	INT,
	LONG,
	INT
	);

<function name="LZRead" ret="INT" convention="__stdcall">
	INT,
	LPSTR,
	INT
	);

<function name="LZClose" ret="void" convention="__stdcall">
	INT
	);
#line 1 "\\program files\\Microsoft SDKs\\Windows\\v6.0A\\Include\\mmsystem.h"
#line 1 "\\program files\\Microsoft SDKs\\Windows\\v6.0A\\Include\\pshpack1.h"
#pragma warning(disable:4103)

#pragma pack(push,1)
typedef UINT        MMVERSION;  
typedef  UINT        MMRESULT;   
                                
typedef UINT    *LPUINT;

<struct name="mmtime_tag">
<field name="wType">UINT</field>
    union
    {
        DWORD       ms;         
        DWORD       sample;     
        DWORD       cb;         
        DWORD       ticks;      

        
<struct>
<field name="hour">BYTE</field>       
            BYTE    min;        
            BYTE    sec;        
            BYTE    frame;      
            BYTE    fps;        
            BYTE    dummy;      

            BYTE    pad[2];
        } smpte;

        
<struct>
<field name="songptrpos">DWORD</field>   
        } midi;
    } u;
} MMTIME, *PMMTIME,  *NPMMTIME,  *LPMMTIME;
 
 
 
 
 
                                                   
                                                   
<struct name="HDRVR__">
int unused; };
<typedef name="HDRVR">HDRVR__ *</typedef>

<struct name="DRVCONFIGINFOEX">
<field name="dwDCISize">DWORD</field>
<field name="lpszDCISectionName">LPCWSTR</field>
<field name="lpszDCIAliasName">LPCWSTR</field>
<field name="dnDevNode">DWORD</field>
} DRVCONFIGINFOEX, *PDRVCONFIGINFOEX,  *NPDRVCONFIGINFOEX,  *LPDRVCONFIGINFOEX;
<struct name="tagDRVCONFIGINFO">
<field name="dwDCISize">DWORD</field>
<field name="lpszDCISectionName">LPCWSTR</field>
<field name="lpszDCIAliasName">LPCWSTR</field>
} DRVCONFIGINFO, *PDRVCONFIGINFO,  *NPDRVCONFIGINFO,  *LPDRVCONFIGINFO;
typedef LRESULT (__stdcall* DRIVERPROC)(DWORD_PTR, HDRVR, UINT, LPARAM, LPARAM);

<function name="CloseDriver" ret="LRESULT  " convention="__stdcall">
<arg name="hDriver">HDRVR</arg>
<arg name="lParam1">LPARAM</arg>
<arg name="lParam2">LPARAM</arg>
</function>
<function name="OpenDriver" ret="HDRVR    " convention="__stdcall">
<arg name="szDriverName">LPCWSTR</arg>
<arg name="szSectionName">LPCWSTR</arg>
<arg name="lParam2">LPARAM</arg>
</function>
<function name="SendDriverMessage" ret="LRESULT  " convention="__stdcall">
<arg name="hDriver">HDRVR</arg>
<arg name="message">UINT</arg>
<arg name="lParam1">LPARAM</arg>
<arg name="lParam2">LPARAM</arg>
</function>
<function name="DrvGetModuleHandle" ret="HMODULE  " convention="__stdcall">
<arg name="hDriver">HDRVR</arg>
</function>
<function name="GetDriverModuleHandle" ret="HMODULE  " convention="__stdcall">
<arg name="hDriver">HDRVR</arg>
</function>
<function name="DefDriverProc" ret="LRESULT  " convention="__stdcall">
<arg name="dwDriverIdentifier">DWORD_PTR</arg>
<arg name="hdrvr">HDRVR</arg>
<arg name="uMsg">UINT</arg>
<arg name="lParam1">LPARAM</arg>
<arg name="lParam2">LPARAM</arg>
</function>

typedef void (__stdcall DRVCALLBACK)(HDRVR hdrvr, UINT uMsg, DWORD_PTR dwUser, DWORD_PTR dw1, DWORD_PTR dw2);

typedef DRVCALLBACK  *LPDRVCALLBACK;

typedef DRVCALLBACK     *PDRVCALLBACK;

<function name="sndPlaySoundA" ret="BOOL" convention="__stdcall">
<arg name="pszSound">LPCSTR</arg>
<arg name="fuSound">UINT</arg>
</function>
<function name="sndPlaySoundW" ret="BOOL" convention="__stdcall">
<arg name="pszSound">LPCWSTR</arg>
<arg name="fuSound">UINT</arg>
</function>
<function name="PlaySoundA" ret="BOOL" convention="__stdcall">
<arg name="pszSound">LPCSTR</arg>
<arg name="hmod">HMODULE</arg>
<arg name="fdwSound">DWORD</arg>
</function>
<function name="PlaySoundW" ret="BOOL" convention="__stdcall">
<arg name="pszSound">LPCWSTR</arg>
<arg name="hmod">HMODULE</arg>
<arg name="fdwSound">DWORD</arg>
</function>
<struct name="HWAVE__">
int unused; };
<typedef name="HWAVE">HWAVE__ *</typedef>
<struct name="HWAVEIN__">
int unused; };
<typedef name="HWAVEIN">HWAVEIN__ *</typedef>
<struct name="HWAVEOUT__">
int unused; };
<typedef name="HWAVEOUT">HWAVEOUT__ *</typedef>
typedef HWAVEIN  *LPHWAVEIN;
typedef HWAVEOUT  *LPHWAVEOUT;
typedef DRVCALLBACK WAVECALLBACK;
typedef WAVECALLBACK  *LPWAVECALLBACK;

<struct name="wavehdr_tag">
<field name="lpData">LPSTR</field>
<field name="dwBufferLength">DWORD</field>
<field name="dwBytesRecorded">DWORD</field>
<field name="dwUser">DWORD_PTR</field>
<field name="dwFlags">DWORD</field>
<field name="dwLoops">DWORD</field>
    struct wavehdr_tag  *lpNext;     
    DWORD_PTR   reserved;               
} WAVEHDR, *PWAVEHDR,  *NPWAVEHDR,  *LPWAVEHDR;

<struct name="tagWAVEOUTCAPSA">
<field name="wMid">WORD</field>
<field name="wPid">WORD</field>
<field name="vDriverVersion">MMVERSION</field>
<field name="szPname[32]">CHAR</field>
<field name="dwFormats">DWORD</field>
<field name="wChannels">WORD</field>
<field name="wReserved1">WORD</field>
<field name="dwSupport">DWORD</field>
} WAVEOUTCAPSA, *PWAVEOUTCAPSA, *NPWAVEOUTCAPSA, *LPWAVEOUTCAPSA;
<struct name="tagWAVEOUTCAPSW">
<field name="wMid">WORD</field>
<field name="wPid">WORD</field>
<field name="vDriverVersion">MMVERSION</field>
<field name="szPname[32]">WCHAR</field>
<field name="dwFormats">DWORD</field>
<field name="wChannels">WORD</field>
<field name="wReserved1">WORD</field>
<field name="dwSupport">DWORD</field>
} WAVEOUTCAPSW, *PWAVEOUTCAPSW, *NPWAVEOUTCAPSW, *LPWAVEOUTCAPSW;

typedef WAVEOUTCAPSA WAVEOUTCAPS;
typedef PWAVEOUTCAPSA PWAVEOUTCAPS;
typedef NPWAVEOUTCAPSA NPWAVEOUTCAPS;
typedef LPWAVEOUTCAPSA LPWAVEOUTCAPS;

<struct name="tagWAVEOUTCAPS2A">
<field name="wMid">WORD</field>
<field name="wPid">WORD</field>
<field name="vDriverVersion">MMVERSION</field>
<field name="szPname[32]">CHAR</field>
<field name="dwFormats">DWORD</field>
<field name="wChannels">WORD</field>
<field name="wReserved1">WORD</field>
<field name="dwSupport">DWORD</field>
<field name="ManufacturerGuid">GUID</field>
<field name="ProductGuid">GUID</field>
<field name="NameGuid">GUID</field>
} WAVEOUTCAPS2A, *PWAVEOUTCAPS2A, *NPWAVEOUTCAPS2A, *LPWAVEOUTCAPS2A;
<struct name="tagWAVEOUTCAPS2W">
<field name="wMid">WORD</field>
<field name="wPid">WORD</field>
<field name="vDriverVersion">MMVERSION</field>
<field name="szPname[32]">WCHAR</field>
<field name="dwFormats">DWORD</field>
<field name="wChannels">WORD</field>
<field name="wReserved1">WORD</field>
<field name="dwSupport">DWORD</field>
<field name="ManufacturerGuid">GUID</field>
<field name="ProductGuid">GUID</field>
<field name="NameGuid">GUID</field>
} WAVEOUTCAPS2W, *PWAVEOUTCAPS2W, *NPWAVEOUTCAPS2W, *LPWAVEOUTCAPS2W;

typedef WAVEOUTCAPS2A WAVEOUTCAPS2;
typedef PWAVEOUTCAPS2A PWAVEOUTCAPS2;
typedef NPWAVEOUTCAPS2A NPWAVEOUTCAPS2;
typedef LPWAVEOUTCAPS2A LPWAVEOUTCAPS2;

<struct name="tagWAVEINCAPSA">
<field name="wMid">WORD</field>
<field name="wPid">WORD</field>
<field name="vDriverVersion">MMVERSION</field>
<field name="szPname[32]">CHAR</field>
<field name="dwFormats">DWORD</field>
<field name="wChannels">WORD</field>
<field name="wReserved1">WORD</field>
} WAVEINCAPSA, *PWAVEINCAPSA, *NPWAVEINCAPSA, *LPWAVEINCAPSA;
<struct name="tagWAVEINCAPSW">
<field name="wMid">WORD</field>
<field name="wPid">WORD</field>
<field name="vDriverVersion">MMVERSION</field>
<field name="szPname[32]">WCHAR</field>
<field name="dwFormats">DWORD</field>
<field name="wChannels">WORD</field>
<field name="wReserved1">WORD</field>
} WAVEINCAPSW, *PWAVEINCAPSW, *NPWAVEINCAPSW, *LPWAVEINCAPSW;

typedef WAVEINCAPSA WAVEINCAPS;
typedef PWAVEINCAPSA PWAVEINCAPS;
typedef NPWAVEINCAPSA NPWAVEINCAPS;
typedef LPWAVEINCAPSA LPWAVEINCAPS;

<struct name="tagWAVEINCAPS2A">
<field name="wMid">WORD</field>
<field name="wPid">WORD</field>
<field name="vDriverVersion">MMVERSION</field>
<field name="szPname[32]">CHAR</field>
<field name="dwFormats">DWORD</field>
<field name="wChannels">WORD</field>
<field name="wReserved1">WORD</field>
<field name="ManufacturerGuid">GUID</field>
<field name="ProductGuid">GUID</field>
<field name="NameGuid">GUID</field>
} WAVEINCAPS2A, *PWAVEINCAPS2A, *NPWAVEINCAPS2A, *LPWAVEINCAPS2A;
<struct name="tagWAVEINCAPS2W">
<field name="wMid">WORD</field>
<field name="wPid">WORD</field>
<field name="vDriverVersion">MMVERSION</field>
<field name="szPname[32]">WCHAR</field>
<field name="dwFormats">DWORD</field>
<field name="wChannels">WORD</field>
<field name="wReserved1">WORD</field>
<field name="ManufacturerGuid">GUID</field>
<field name="ProductGuid">GUID</field>
<field name="NameGuid">GUID</field>
} WAVEINCAPS2W, *PWAVEINCAPS2W, *NPWAVEINCAPS2W, *LPWAVEINCAPS2W;

typedef WAVEINCAPS2A WAVEINCAPS2;
typedef PWAVEINCAPS2A PWAVEINCAPS2;
typedef NPWAVEINCAPS2A NPWAVEINCAPS2;
typedef LPWAVEINCAPS2A LPWAVEINCAPS2;
<struct name="waveformat_tag">
<field name="wFormatTag">WORD</field>
<field name="nChannels">WORD</field>
<field name="nSamplesPerSec">DWORD</field>
<field name="nAvgBytesPerSec">DWORD</field>
<field name="nBlockAlign">WORD</field>
} WAVEFORMAT, *PWAVEFORMAT,  *NPWAVEFORMAT,  *LPWAVEFORMAT;

<struct name="pcmwaveformat_tag">
<field name="wf">WAVEFORMAT</field>
<field name="wBitsPerSample">WORD</field>
} PCMWAVEFORMAT, *PPCMWAVEFORMAT,  *NPPCMWAVEFORMAT,  *LPPCMWAVEFORMAT;
<struct name="tWAVEFORMATEX">
<field name="wFormatTag">WORD</field>
<field name="nChannels">WORD</field>
<field name="nSamplesPerSec">DWORD</field>
<field name="nAvgBytesPerSec">DWORD</field>
<field name="nBlockAlign">WORD</field>
<field name="wBitsPerSample">WORD</field>
<field name="cbSize">WORD</field>
                                    
} WAVEFORMATEX, *PWAVEFORMATEX,  *NPWAVEFORMATEX,  *LPWAVEFORMATEX;
typedef const WAVEFORMATEX  *LPCWAVEFORMATEX;
<function name="waveOutGetNumDevs" ret="UINT" convention="__stdcall">
void);
<function name="waveOutGetDevCapsA" ret="MMRESULT" convention="__stdcall">
<arg name="uDeviceID">UINT_PTR</arg>
<arg name="pwoc">LPWAVEOUTCAPSA</arg>
<arg name="cbwoc">UINT</arg>
</function>
<function name="waveOutGetDevCapsW" ret="MMRESULT" convention="__stdcall">
<arg name="uDeviceID">UINT_PTR</arg>
<arg name="pwoc">LPWAVEOUTCAPSW</arg>
<arg name="cbwoc">UINT</arg>
</function>
<function name="waveOutGetVolume" ret="MMRESULT" convention="__stdcall">
<arg name="hwo">HWAVEOUT</arg>
<arg name="pdwVolume">LPDWORD</arg>
</function>
<function name="waveOutSetVolume" ret="MMRESULT" convention="__stdcall">
<arg name="hwo">HWAVEOUT</arg>
<arg name="dwVolume">DWORD</arg>
</function>

<function name="waveOutGetErrorTextA" ret="MMRESULT" convention="__stdcall">
<arg name="mmrError">MMRESULT</arg>
<arg name="pszText">LPSTR</arg>
<arg name="cchText">UINT</arg>
</function>
<function name="waveOutGetErrorTextW" ret="MMRESULT" convention="__stdcall">
<arg name="mmrError">MMRESULT</arg>
<arg name="pszText">LPWSTR</arg>
<arg name="cchText">UINT</arg>
</function>

<function name="waveOutOpen" ret="MMRESULT" convention="__stdcall">
<arg name="phwo">LPHWAVEOUT</arg>
<arg name="uDeviceID">UINT</arg>
<arg name="pwfx">LPCWAVEFORMATEX</arg>
<arg name="dwCallback">DWORD_PTR</arg>
<arg name="dwInstance">DWORD_PTR</arg>
<arg name="fdwOpen">DWORD</arg>
</function>

<function name="waveOutClose" ret="MMRESULT" convention="__stdcall">
<arg name="hwo">HWAVEOUT</arg>
</function>
<function name="waveOutPrepareHeader" ret="MMRESULT" convention="__stdcall">
<arg name="hwo">HWAVEOUT</arg>
<arg name="pwh">LPWAVEHDR</arg>
<arg name="cbwh">UINT</arg>
</function>
<function name="waveOutUnprepareHeader" ret="MMRESULT" convention="__stdcall">
<arg name="hwo">HWAVEOUT</arg>
<arg name="pwh">LPWAVEHDR</arg>
<arg name="cbwh">UINT</arg>
</function>
<function name="waveOutWrite" ret="MMRESULT" convention="__stdcall">
<arg name="hwo">HWAVEOUT</arg>
<arg name="pwh">LPWAVEHDR</arg>
<arg name="cbwh">UINT</arg>
</function>
<function name="waveOutPause" ret="MMRESULT" convention="__stdcall">
<arg name="hwo">HWAVEOUT</arg>
</function>
<function name="waveOutRestart" ret="MMRESULT" convention="__stdcall">
<arg name="hwo">HWAVEOUT</arg>
</function>
<function name="waveOutReset" ret="MMRESULT" convention="__stdcall">
<arg name="hwo">HWAVEOUT</arg>
</function>
<function name="waveOutBreakLoop" ret="MMRESULT" convention="__stdcall">
<arg name="hwo">HWAVEOUT</arg>
</function>
<function name="waveOutGetPosition" ret="MMRESULT" convention="__stdcall">
<arg name="hwo">HWAVEOUT</arg>
<arg name="pmmt">LPMMTIME</arg>
<arg name="cbmmt">UINT</arg>
</function>
<function name="waveOutGetPitch" ret="MMRESULT" convention="__stdcall">
<arg name="hwo">HWAVEOUT</arg>
<arg name="pdwPitch">LPDWORD</arg>
</function>
<function name="waveOutSetPitch" ret="MMRESULT" convention="__stdcall">
<arg name="hwo">HWAVEOUT</arg>
<arg name="dwPitch">DWORD</arg>
</function>
<function name="waveOutGetPlaybackRate" ret="MMRESULT" convention="__stdcall">
<arg name="hwo">HWAVEOUT</arg>
<arg name="pdwRate">LPDWORD</arg>
</function>
<function name="waveOutSetPlaybackRate" ret="MMRESULT" convention="__stdcall">
<arg name="hwo">HWAVEOUT</arg>
<arg name="dwRate">DWORD</arg>
</function>
<function name="waveOutGetID" ret="MMRESULT" convention="__stdcall">
<arg name="hwo">HWAVEOUT</arg>
<arg name="puDeviceID">LPUINT</arg>
</function>
<function name="waveOutMessage" ret="MMRESULT" convention="__stdcall">
<arg name="hwo">HWAVEOUT</arg>
<arg name="uMsg">UINT</arg>
<arg name="dw1">DWORD_PTR</arg>
<arg name="dw2">DWORD_PTR</arg>
</function>
<function name="waveInGetNumDevs" ret="UINT" convention="__stdcall">
void);
<function name="waveInGetDevCapsA" ret="MMRESULT" convention="__stdcall">
<arg name="uDeviceID">UINT_PTR</arg>
<arg name="pwic">LPWAVEINCAPSA</arg>
<arg name="cbwic">UINT</arg>
</function>
<function name="waveInGetDevCapsW" ret="MMRESULT" convention="__stdcall">
<arg name="uDeviceID">UINT_PTR</arg>
<arg name="pwic">LPWAVEINCAPSW</arg>
<arg name="cbwic">UINT</arg>
</function>
<function name="waveInGetErrorTextA" ret="MMRESULT" convention="__stdcall">
<arg name="mmrError">MMRESULT</arg>
<arg name="pszText">LPSTR</arg>
<arg name="cchText">UINT</arg>
</function>
<function name="waveInGetErrorTextW" ret="MMRESULT" convention="__stdcall">
<arg name="mmrError">MMRESULT</arg>
<arg name="pszText">LPWSTR</arg>
<arg name="cchText">UINT</arg>
</function>

<function name="waveInOpen" ret="MMRESULT" convention="__stdcall">
<arg name="phwi">LPHWAVEIN</arg>
<arg name="uDeviceID">UINT</arg>
<arg name="pwfx">LPCWAVEFORMATEX</arg>
<arg name="dwCallback">DWORD_PTR</arg>
<arg name="dwInstance">DWORD_PTR</arg>
<arg name="fdwOpen">DWORD</arg>
</function>

<function name="waveInClose" ret="MMRESULT" convention="__stdcall">
<arg name="hwi">HWAVEIN</arg>
</function>
<function name="waveInPrepareHeader" ret="MMRESULT" convention="__stdcall">
<arg name="hwi">HWAVEIN</arg>
<arg name="pwh">LPWAVEHDR</arg>
<arg name="cbwh">UINT</arg>
</function>
<function name="waveInUnprepareHeader" ret="MMRESULT" convention="__stdcall">
<arg name="hwi">HWAVEIN</arg>
<arg name="pwh">LPWAVEHDR</arg>
<arg name="cbwh">UINT</arg>
</function>
<function name="waveInAddBuffer" ret="MMRESULT" convention="__stdcall">
<arg name="hwi">HWAVEIN</arg>
<arg name="pwh">LPWAVEHDR</arg>
<arg name="cbwh">UINT</arg>
</function>
<function name="waveInStart" ret="MMRESULT" convention="__stdcall">
<arg name="hwi">HWAVEIN</arg>
</function>
<function name="waveInStop" ret="MMRESULT" convention="__stdcall">
<arg name="hwi">HWAVEIN</arg>
</function>
<function name="waveInReset" ret="MMRESULT" convention="__stdcall">
<arg name="hwi">HWAVEIN</arg>
</function>
<function name="waveInGetPosition" ret="MMRESULT" convention="__stdcall">
<arg name="hwi">HWAVEIN</arg>
<arg name="pmmt">LPMMTIME</arg>
<arg name="cbmmt">UINT</arg>
</function>
<function name="waveInGetID" ret="MMRESULT" convention="__stdcall">
<arg name="hwi">HWAVEIN</arg>
<arg name="puDeviceID">LPUINT</arg>
</function>
<function name="waveInMessage" ret="MMRESULT" convention="__stdcall">
<arg name="hwi">HWAVEIN</arg>
<arg name="uMsg">UINT</arg>
<arg name="dw1">DWORD_PTR</arg>
<arg name="dw2">DWORD_PTR</arg>
</function>
<struct name="HMIDI__">
int unused; };
<typedef name="HMIDI">HMIDI__ *</typedef>
<struct name="HMIDIIN__">
int unused; };
<typedef name="HMIDIIN">HMIDIIN__ *</typedef>
<struct name="HMIDIOUT__">
int unused; };
<typedef name="HMIDIOUT">HMIDIOUT__ *</typedef>
<struct name="HMIDISTRM__">
int unused; };
<typedef name="HMIDISTRM">HMIDISTRM__ *</typedef>
typedef HMIDI  *LPHMIDI;
typedef HMIDIIN  *LPHMIDIIN;
typedef HMIDIOUT  *LPHMIDIOUT;
typedef HMIDISTRM  *LPHMIDISTRM;
typedef DRVCALLBACK MIDICALLBACK;
typedef MIDICALLBACK  *LPMIDICALLBACK;

typedef WORD PATCHARRAY[128];
typedef WORD  *LPPATCHARRAY;
typedef WORD KEYARRAY[128];
typedef WORD  *LPKEYARRAY;

<struct name="tagMIDIOUTCAPSA">
<field name="wMid">WORD</field>
<field name="wPid">WORD</field>
<field name="vDriverVersion">MMVERSION</field>
<field name="szPname[32]">CHAR</field>
<field name="wTechnology">WORD</field>
<field name="wVoices">WORD</field>
<field name="wNotes">WORD</field>
<field name="wChannelMask">WORD</field>
<field name="dwSupport">DWORD</field>
} MIDIOUTCAPSA, *PMIDIOUTCAPSA, *NPMIDIOUTCAPSA, *LPMIDIOUTCAPSA;
<struct name="tagMIDIOUTCAPSW">
<field name="wMid">WORD</field>
<field name="wPid">WORD</field>
<field name="vDriverVersion">MMVERSION</field>
<field name="szPname[32]">WCHAR</field>
<field name="wTechnology">WORD</field>
<field name="wVoices">WORD</field>
<field name="wNotes">WORD</field>
<field name="wChannelMask">WORD</field>
<field name="dwSupport">DWORD</field>
} MIDIOUTCAPSW, *PMIDIOUTCAPSW, *NPMIDIOUTCAPSW, *LPMIDIOUTCAPSW;

typedef MIDIOUTCAPSA MIDIOUTCAPS;
typedef PMIDIOUTCAPSA PMIDIOUTCAPS;
typedef NPMIDIOUTCAPSA NPMIDIOUTCAPS;
typedef LPMIDIOUTCAPSA LPMIDIOUTCAPS;
<struct name="tagMIDIOUTCAPS2A">
<field name="wMid">WORD</field>
<field name="wPid">WORD</field>
<field name="vDriverVersion">MMVERSION</field>
<field name="szPname[32]">CHAR</field>
<field name="wTechnology">WORD</field>
<field name="wVoices">WORD</field>
<field name="wNotes">WORD</field>
<field name="wChannelMask">WORD</field>
<field name="dwSupport">DWORD</field>
<field name="ManufacturerGuid">GUID</field>
<field name="ProductGuid">GUID</field>
<field name="NameGuid">GUID</field>
} MIDIOUTCAPS2A, *PMIDIOUTCAPS2A, *NPMIDIOUTCAPS2A, *LPMIDIOUTCAPS2A;
<struct name="tagMIDIOUTCAPS2W">
<field name="wMid">WORD</field>
<field name="wPid">WORD</field>
<field name="vDriverVersion">MMVERSION</field>
<field name="szPname[32]">WCHAR</field>
<field name="wTechnology">WORD</field>
<field name="wVoices">WORD</field>
<field name="wNotes">WORD</field>
<field name="wChannelMask">WORD</field>
<field name="dwSupport">DWORD</field>
<field name="ManufacturerGuid">GUID</field>
<field name="ProductGuid">GUID</field>
<field name="NameGuid">GUID</field>
} MIDIOUTCAPS2W, *PMIDIOUTCAPS2W, *NPMIDIOUTCAPS2W, *LPMIDIOUTCAPS2W;

typedef MIDIOUTCAPS2A MIDIOUTCAPS2;
typedef PMIDIOUTCAPS2A PMIDIOUTCAPS2;
typedef NPMIDIOUTCAPS2A NPMIDIOUTCAPS2;
typedef LPMIDIOUTCAPS2A LPMIDIOUTCAPS2;
<struct name="tagMIDIINCAPSA">
<field name="wMid">WORD</field>
<field name="wPid">WORD</field>
<field name="vDriverVersion">MMVERSION</field>
<field name="szPname[32]">CHAR</field>
<field name="dwSupport">DWORD</field>             
} MIDIINCAPSA, *PMIDIINCAPSA, *NPMIDIINCAPSA, *LPMIDIINCAPSA;
<struct name="tagMIDIINCAPSW">
<field name="wMid">WORD</field>
<field name="wPid">WORD</field>
<field name="vDriverVersion">MMVERSION</field>
<field name="szPname[32]">WCHAR</field>
<field name="dwSupport">DWORD</field>             
} MIDIINCAPSW, *PMIDIINCAPSW, *NPMIDIINCAPSW, *LPMIDIINCAPSW;

typedef MIDIINCAPSA MIDIINCAPS;
typedef PMIDIINCAPSA PMIDIINCAPS;
typedef NPMIDIINCAPSA NPMIDIINCAPS;
typedef LPMIDIINCAPSA LPMIDIINCAPS;
<struct name="tagMIDIINCAPS2A">
<field name="wMid">WORD</field>
<field name="wPid">WORD</field>
<field name="vDriverVersion">MMVERSION</field>
<field name="szPname[32]">CHAR</field>
<field name="dwSupport">DWORD</field>              
    GUID        ManufacturerGuid;       
    GUID        ProductGuid;            
    GUID        NameGuid;               
} MIDIINCAPS2A, *PMIDIINCAPS2A, *NPMIDIINCAPS2A, *LPMIDIINCAPS2A;
<struct name="tagMIDIINCAPS2W">
<field name="wMid">WORD</field>
<field name="wPid">WORD</field>
<field name="vDriverVersion">MMVERSION</field>
<field name="szPname[32]">WCHAR</field>
<field name="dwSupport">DWORD</field>              
    GUID        ManufacturerGuid;       
    GUID        ProductGuid;            
    GUID        NameGuid;               
} MIDIINCAPS2W, *PMIDIINCAPS2W, *NPMIDIINCAPS2W, *LPMIDIINCAPS2W;

typedef MIDIINCAPS2A MIDIINCAPS2;
typedef PMIDIINCAPS2A PMIDIINCAPS2;
typedef NPMIDIINCAPS2A NPMIDIINCAPS2;
typedef LPMIDIINCAPS2A LPMIDIINCAPS2;

<struct name="midihdr_tag">
<field name="lpData">LPSTR</field>
<field name="dwBufferLength">DWORD</field>
<field name="dwBytesRecorded">DWORD</field>
<field name="dwUser">DWORD_PTR</field>
<field name="dwFlags">DWORD</field>
    struct midihdr_tag  *lpNext;   
    DWORD_PTR   reserved;             

    DWORD       dwOffset;             
    DWORD_PTR   dwReserved[8];        
} MIDIHDR, *PMIDIHDR,  *NPMIDIHDR,  *LPMIDIHDR;
<struct name="midievent_tag">
<field name="dwDeltaTime">DWORD</field>
<field name="dwStreamID">DWORD</field>
<field name="dwEvent">DWORD</field>
<field name="dwParms[1]">DWORD</field>
} MIDIEVENT;

<struct name="midistrmbuffver_tag">
<field name="dwVersion">DWORD</field>
<field name="dwMid">DWORD</field>
<field name="dwOEMVersion">DWORD</field>
} MIDISTRMBUFFVER;

<struct name="midiproptimediv_tag">
<field name="cbStruct">DWORD</field>
<field name="dwTimeDiv">DWORD</field>
</struct>
<typedefprev id="MIDIPROPTIMEDIV"/>
<typedefptrprev id="LPMIDIPROPTIMEDIV"/>

<struct name="midiproptempo_tag">
<field name="cbStruct">DWORD</field>
<field name="dwTempo">DWORD</field>
</struct>
<typedefprev id="MIDIPROPTEMPO"/>
<typedefptrprev id="LPMIDIPROPTEMPO"/>

<function name="midiOutGetNumDevs" ret="UINT" convention="__stdcall">
void);

<function name="midiStreamOpen" ret="MMRESULT" convention="__stdcall">
<arg name="phms">LPHMIDISTRM</arg>
<arg name="puDeviceID">LPUINT</arg>
<arg name="cMidi">DWORD</arg>
<arg name="dwCallback">DWORD_PTR</arg>
<arg name="dwInstance">DWORD_PTR</arg>
<arg name="fdwOpen">DWORD</arg>
</function>
<function name="midiStreamClose" ret="MMRESULT" convention="__stdcall">
<arg name="hms">HMIDISTRM</arg>
</function>

<function name="midiStreamProperty" ret="MMRESULT" convention="__stdcall">
<arg name="hms">HMIDISTRM</arg>
<arg name="lppropdata">LPBYTE</arg>
<arg name="dwProperty">DWORD</arg>
</function>
<function name="midiStreamPosition" ret="MMRESULT" convention="__stdcall">
<arg name="hms">HMIDISTRM</arg>
<arg name="lpmmt">LPMMTIME</arg>
<arg name="cbmmt">UINT</arg>
</function>

<function name="midiStreamOut" ret="MMRESULT" convention="__stdcall">
<arg name="hms">HMIDISTRM</arg>
<arg name="pmh">LPMIDIHDR</arg>
<arg name="cbmh">UINT</arg>
</function>
<function name="midiStreamPause" ret="MMRESULT" convention="__stdcall">
<arg name="hms">HMIDISTRM</arg>
</function>
<function name="midiStreamRestart" ret="MMRESULT" convention="__stdcall">
<arg name="hms">HMIDISTRM</arg>
</function>
<function name="midiStreamStop" ret="MMRESULT" convention="__stdcall">
<arg name="hms">HMIDISTRM</arg>
</function>
<function name="midiConnect" ret="MMRESULT" convention="__stdcall">
<arg name="hmi">HMIDI</arg>
<arg name="hmo">HMIDIOUT</arg>
<arg name="pReserved">LPVOID</arg>
</function>
<function name="midiDisconnect" ret="MMRESULT" convention="__stdcall">
<arg name="hmi">HMIDI</arg>
<arg name="hmo">HMIDIOUT</arg>
<arg name="pReserved">LPVOID</arg>
</function>
<function name="midiOutGetDevCapsA" ret="MMRESULT" convention="__stdcall">
<arg name="uDeviceID">UINT_PTR</arg>
<arg name="pmoc">LPMIDIOUTCAPSA</arg>
<arg name="cbmoc">UINT</arg>
</function>
<function name="midiOutGetDevCapsW" ret="MMRESULT" convention="__stdcall">
<arg name="uDeviceID">UINT_PTR</arg>
<arg name="pmoc">LPMIDIOUTCAPSW</arg>
<arg name="cbmoc">UINT</arg>
</function>

<function name="midiOutGetVolume" ret="MMRESULT" convention="__stdcall">
<arg name="hmo">HMIDIOUT</arg>
<arg name="pdwVolume">LPDWORD</arg>
</function>
<function name="midiOutSetVolume" ret="MMRESULT" convention="__stdcall">
<arg name="hmo">HMIDIOUT</arg>
<arg name="dwVolume">DWORD</arg>
</function>
<function name="midiOutGetErrorTextA" ret="MMRESULT" convention="__stdcall">
<arg name="mmrError">MMRESULT</arg>
<arg name="pszText">LPSTR</arg>
<arg name="cchText">UINT</arg>
</function>
<function name="midiOutGetErrorTextW" ret="MMRESULT" convention="__stdcall">
<arg name="mmrError">MMRESULT</arg>
<arg name="pszText">LPWSTR</arg>
<arg name="cchText">UINT</arg>
</function>
<function name="midiOutOpen" ret="MMRESULT" convention="__stdcall">
<arg name="phmo">LPHMIDIOUT</arg>
<arg name="uDeviceID">UINT</arg>
<arg name="dwCallback">DWORD_PTR</arg>
<arg name="dwInstance">DWORD_PTR</arg>
<arg name="fdwOpen">DWORD</arg>
</function>
<function name="midiOutClose" ret="MMRESULT" convention="__stdcall">
<arg name="hmo">HMIDIOUT</arg>
</function>
<function name="midiOutPrepareHeader" ret="MMRESULT" convention="__stdcall">
<arg name="hmo">HMIDIOUT</arg>
<arg name="pmh">LPMIDIHDR</arg>
<arg name="cbmh">UINT</arg>
</function>
<function name="midiOutUnprepareHeader" ret="MMRESULT" convention="__stdcall">
<arg name="hmo">HMIDIOUT</arg>
<arg name="pmh">LPMIDIHDR</arg>
<arg name="cbmh">UINT</arg>
</function>
<function name="midiOutShortMsg" ret="MMRESULT" convention="__stdcall">
<arg name="hmo">HMIDIOUT</arg>
<arg name="dwMsg">DWORD</arg>
</function>
<function name="midiOutLongMsg" ret="MMRESULT" convention="__stdcall">
<arg name="hmo">HMIDIOUT</arg>
<arg name="pmh">LPMIDIHDR</arg>
<arg name="cbmh">UINT</arg>
</function>
<function name="midiOutReset" ret="MMRESULT" convention="__stdcall">
<arg name="hmo">HMIDIOUT</arg>
</function>
<function name="midiOutCachePatches" ret="MMRESULT" convention="__stdcall">
<arg name="hmo">HMIDIOUT</arg>
<arg name="uBank">UINT</arg>
<arg name="pwpa">LPWORD</arg>
<arg name="fuCache">UINT</arg>
</function>
<function name="midiOutCacheDrumPatches" ret="MMRESULT" convention="__stdcall">
<arg name="hmo">HMIDIOUT</arg>
<arg name="uPatch">UINT</arg>
<arg name="pwkya">LPWORD</arg>
<arg name="fuCache">UINT</arg>
</function>
<function name="midiOutGetID" ret="MMRESULT" convention="__stdcall">
<arg name="hmo">HMIDIOUT</arg>
<arg name="puDeviceID">LPUINT</arg>
</function>
<function name="midiOutMessage" ret="MMRESULT" convention="__stdcall">
<arg name="hmo">HMIDIOUT</arg>
<arg name="uMsg">UINT</arg>
<arg name="dw1">DWORD_PTR</arg>
<arg name="dw2">DWORD_PTR</arg>
</function>

<function name="midiInGetNumDevs" ret="UINT" convention="__stdcall">
void);
<function name="midiInGetDevCapsA" ret="MMRESULT" convention="__stdcall">
<arg name="uDeviceID">UINT_PTR</arg>
<arg name="pmic">LPMIDIINCAPSA</arg>
<arg name="cbmic">UINT</arg>
</function>
<function name="midiInGetDevCapsW" ret="MMRESULT" convention="__stdcall">
<arg name="uDeviceID">UINT_PTR</arg>
<arg name="pmic">LPMIDIINCAPSW</arg>
<arg name="cbmic">UINT</arg>
</function>

<function name="midiInGetErrorTextA" ret="MMRESULT" convention="__stdcall">
<arg name="mmrError">MMRESULT</arg>
<arg name="pszText">LPSTR</arg>
<arg name="cchText">UINT</arg>
</function>
<function name="midiInGetErrorTextW" ret="MMRESULT" convention="__stdcall">
<arg name="mmrError">MMRESULT</arg>
<arg name="pszText">LPWSTR</arg>
<arg name="cchText">UINT</arg>
</function>
<function name="midiInOpen" ret="MMRESULT" convention="__stdcall">
<arg name="phmi">LPHMIDIIN</arg>
<arg name="uDeviceID">UINT</arg>
<arg name="dwCallback">DWORD_PTR</arg>
<arg name="dwInstance">DWORD_PTR</arg>
<arg name="fdwOpen">DWORD</arg>
</function>
<function name="midiInClose" ret="MMRESULT" convention="__stdcall">
<arg name="hmi">HMIDIIN</arg>
</function>
<function name="midiInPrepareHeader" ret="MMRESULT" convention="__stdcall">
<arg name="hmi">HMIDIIN</arg>
<arg name="pmh">LPMIDIHDR</arg>
<arg name="cbmh">UINT</arg>
</function>
<function name="midiInUnprepareHeader" ret="MMRESULT" convention="__stdcall">
<arg name="hmi">HMIDIIN</arg>
<arg name="pmh">LPMIDIHDR</arg>
<arg name="cbmh">UINT</arg>
</function>
<function name="midiInAddBuffer" ret="MMRESULT" convention="__stdcall">
<arg name="hmi">HMIDIIN</arg>
<arg name="pmh">LPMIDIHDR</arg>
<arg name="cbmh">UINT</arg>
</function>
<function name="midiInStart" ret="MMRESULT" convention="__stdcall">
<arg name="hmi">HMIDIIN</arg>
</function>
<function name="midiInStop" ret="MMRESULT" convention="__stdcall">
<arg name="hmi">HMIDIIN</arg>
</function>
<function name="midiInReset" ret="MMRESULT" convention="__stdcall">
<arg name="hmi">HMIDIIN</arg>
</function>
<function name="midiInGetID" ret="MMRESULT" convention="__stdcall">
<arg name="hmi">HMIDIIN</arg>
<arg name="puDeviceID">LPUINT</arg>
</function>
<function name="midiInMessage" ret="MMRESULT" convention="__stdcall">
<arg name="hmi">HMIDIIN</arg>
<arg name="uMsg">UINT</arg>
<arg name="dw1">DWORD_PTR</arg>
<arg name="dw2">DWORD_PTR</arg>
</function>

<struct name="tagAUXCAPSA">
<field name="wMid">WORD</field>
<field name="wPid">WORD</field>
<field name="vDriverVersion">MMVERSION</field>
<field name="szPname[32]">CHAR</field>
<field name="wTechnology">WORD</field>
<field name="wReserved1">WORD</field>
<field name="dwSupport">DWORD</field>
} AUXCAPSA, *PAUXCAPSA, *NPAUXCAPSA, *LPAUXCAPSA;
<struct name="tagAUXCAPSW">
<field name="wMid">WORD</field>
<field name="wPid">WORD</field>
<field name="vDriverVersion">MMVERSION</field>
<field name="szPname[32]">WCHAR</field>
<field name="wTechnology">WORD</field>
<field name="wReserved1">WORD</field>
<field name="dwSupport">DWORD</field>
} AUXCAPSW, *PAUXCAPSW, *NPAUXCAPSW, *LPAUXCAPSW;

typedef AUXCAPSA AUXCAPS;
typedef PAUXCAPSA PAUXCAPS;
typedef NPAUXCAPSA NPAUXCAPS;
typedef LPAUXCAPSA LPAUXCAPS;
<struct name="tagAUXCAPS2A">
<field name="wMid">WORD</field>
<field name="wPid">WORD</field>
<field name="vDriverVersion">MMVERSION</field>
<field name="szPname[32]">CHAR</field>
<field name="wTechnology">WORD</field>
<field name="wReserved1">WORD</field>
<field name="dwSupport">DWORD</field>
<field name="ManufacturerGuid">GUID</field>
<field name="ProductGuid">GUID</field>
<field name="NameGuid">GUID</field>
} AUXCAPS2A, *PAUXCAPS2A, *NPAUXCAPS2A, *LPAUXCAPS2A;
<struct name="tagAUXCAPS2W">
<field name="wMid">WORD</field>
<field name="wPid">WORD</field>
<field name="vDriverVersion">MMVERSION</field>
<field name="szPname[32]">WCHAR</field>
<field name="wTechnology">WORD</field>
<field name="wReserved1">WORD</field>
<field name="dwSupport">DWORD</field>
<field name="ManufacturerGuid">GUID</field>
<field name="ProductGuid">GUID</field>
<field name="NameGuid">GUID</field>
} AUXCAPS2W, *PAUXCAPS2W, *NPAUXCAPS2W, *LPAUXCAPS2W;

typedef AUXCAPS2A AUXCAPS2;
typedef PAUXCAPS2A PAUXCAPS2;
typedef NPAUXCAPS2A NPAUXCAPS2;
typedef LPAUXCAPS2A LPAUXCAPS2;
<function name="auxGetNumDevs" ret="UINT" convention="__stdcall">
void);
<function name="auxGetDevCapsA" ret="MMRESULT" convention="__stdcall">
<arg name="uDeviceID">UINT_PTR</arg>
<arg name="pac">LPAUXCAPSA</arg>
<arg name="cbac">UINT</arg>
</function>
<function name="auxGetDevCapsW" ret="MMRESULT" convention="__stdcall">
<arg name="uDeviceID">UINT_PTR</arg>
<arg name="pac">LPAUXCAPSW</arg>
<arg name="cbac">UINT</arg>
</function>

<function name="auxSetVolume" ret="MMRESULT" convention="__stdcall">
<arg name="uDeviceID">UINT</arg>
<arg name="dwVolume">DWORD</arg>
</function>
<function name="auxGetVolume" ret="MMRESULT" convention="__stdcall">
<arg name="uDeviceID">UINT</arg>
<arg name="pdwVolume">LPDWORD</arg>
</function>
<function name="auxOutMessage" ret="MMRESULT" convention="__stdcall">
<arg name="uDeviceID">UINT</arg>
<arg name="uMsg">UINT</arg>
<arg name="dw1">DWORD_PTR</arg>
<arg name="dw2">DWORD_PTR</arg>
</function>
<struct name="HMIXEROBJ__">
int unused; };
<typedef name="HMIXEROBJ">HMIXEROBJ__ *</typedef>
typedef HMIXEROBJ  *LPHMIXEROBJ;

<struct name="HMIXER__">
int unused; };
<typedef name="HMIXER">HMIXER__ *</typedef>
typedef HMIXER      *LPHMIXER;

<function name="mixerGetNumDevs" ret="UINT" convention="__stdcall">
void);
<struct name="tagMIXERCAPSA">
<field name="wMid">WORD</field>
<field name="wPid">WORD</field>
<field name="vDriverVersion">MMVERSION</field>
<field name="szPname[32]">CHAR</field>
<field name="fdwSupport">DWORD</field>
<field name="cDestinations">DWORD</field>
} MIXERCAPSA, *PMIXERCAPSA, *LPMIXERCAPSA;
<struct name="tagMIXERCAPSW">
<field name="wMid">WORD</field>
<field name="wPid">WORD</field>
<field name="vDriverVersion">MMVERSION</field>
<field name="szPname[32]">WCHAR</field>
<field name="fdwSupport">DWORD</field>
<field name="cDestinations">DWORD</field>
} MIXERCAPSW, *PMIXERCAPSW, *LPMIXERCAPSW;
typedef MIXERCAPSA MIXERCAPS;
typedef PMIXERCAPSA PMIXERCAPS;
typedef LPMIXERCAPSA LPMIXERCAPS;
<struct name="tagMIXERCAPS2A">
<field name="wMid">WORD</field>
<field name="wPid">WORD</field>
<field name="vDriverVersion">MMVERSION</field>
<field name="szPname[32]">CHAR</field>
<field name="fdwSupport">DWORD</field>
<field name="cDestinations">DWORD</field>
<field name="ManufacturerGuid">GUID</field>
<field name="ProductGuid">GUID</field>
<field name="NameGuid">GUID</field>
} MIXERCAPS2A, *PMIXERCAPS2A, *LPMIXERCAPS2A;
<struct name="tagMIXERCAPS2W">
<field name="wMid">WORD</field>
<field name="wPid">WORD</field>
<field name="vDriverVersion">MMVERSION</field>
<field name="szPname[32]">WCHAR</field>
<field name="fdwSupport">DWORD</field>
<field name="cDestinations">DWORD</field>
<field name="ManufacturerGuid">GUID</field>
<field name="ProductGuid">GUID</field>
<field name="NameGuid">GUID</field>
} MIXERCAPS2W, *PMIXERCAPS2W, *LPMIXERCAPS2W;
typedef MIXERCAPS2A MIXERCAPS2;
typedef PMIXERCAPS2A PMIXERCAPS2;
typedef LPMIXERCAPS2A LPMIXERCAPS2;

<function name="mixerGetDevCapsA" ret="MMRESULT" convention="__stdcall">
<arg name="uMxId">UINT_PTR</arg>
<arg name="pmxcaps">LPMIXERCAPSA</arg>
<arg name="cbmxcaps">UINT</arg>
</function>
<function name="mixerGetDevCapsW" ret="MMRESULT" convention="__stdcall">
<arg name="uMxId">UINT_PTR</arg>
<arg name="pmxcaps">LPMIXERCAPSW</arg>
<arg name="cbmxcaps">UINT</arg>
</function>
<function name="mixerOpen" ret="MMRESULT" convention="__stdcall">
<arg name="phmx">LPHMIXER</arg>
<arg name="uMxId">UINT</arg>
<arg name="dwCallback">DWORD_PTR</arg>
<arg name="dwInstance">DWORD_PTR</arg>
<arg name="fdwOpen">DWORD</arg>
</function>
<function name="mixerClose" ret="MMRESULT" convention="__stdcall">
<arg name="hmx">HMIXER</arg>
</function>

<function name="mixerMessage" ret="DWORD" convention="__stdcall">
<arg name="hmx">HMIXER</arg>
<arg name="uMsg">UINT</arg>
<arg name="dwParam1">DWORD_PTR</arg>
<arg name="dwParam2">DWORD_PTR</arg>
</function>
<struct name="tagMIXERLINEA">
<field name="cbStruct">DWORD</field>
<field name="dwDestination">DWORD</field>
<field name="dwSource">DWORD</field>
<field name="dwLineID">DWORD</field>
<field name="fdwLine">DWORD</field>
<field name="dwUser">DWORD_PTR</field>
<field name="dwComponentType">DWORD</field>
<field name="cChannels">DWORD</field>
<field name="cConnections">DWORD</field>
<field name="cControls">DWORD</field>
<field name="szShortName[16]">CHAR</field>
<field name="szName[64]">CHAR</field>
<struct>
<field name="dwType">DWORD</field>                 
        DWORD       dwDeviceID;             
        WORD        wMid;                   
        WORD        wPid;                   
        MMVERSION   vDriverVersion;         
        CHAR        szPname[32];   
    } Target;
} MIXERLINEA, *PMIXERLINEA, *LPMIXERLINEA;
<struct name="tagMIXERLINEW">
<field name="cbStruct">DWORD</field>
<field name="dwDestination">DWORD</field>
<field name="dwSource">DWORD</field>
<field name="dwLineID">DWORD</field>
<field name="fdwLine">DWORD</field>
<field name="dwUser">DWORD_PTR</field>
<field name="dwComponentType">DWORD</field>
<field name="cChannels">DWORD</field>
<field name="cConnections">DWORD</field>
<field name="cControls">DWORD</field>
<field name="szShortName[16]">WCHAR</field>
<field name="szName[64]">WCHAR</field>
<struct>
<field name="dwType">DWORD</field>                 
        DWORD       dwDeviceID;             
        WORD        wMid;                   
        WORD        wPid;                   
        MMVERSION   vDriverVersion;         
        WCHAR       szPname[32];   
    } Target;
} MIXERLINEW, *PMIXERLINEW, *LPMIXERLINEW;
typedef MIXERLINEA MIXERLINE;
typedef PMIXERLINEA PMIXERLINE;
typedef LPMIXERLINEA LPMIXERLINE;

<function name="mixerGetLineInfoA" ret="MMRESULT" convention="__stdcall">
<arg name="hmxobj">HMIXEROBJ</arg>
<arg name="pmxl">LPMIXERLINEA</arg>
<arg name="fdwInfo">DWORD</arg>
</function>
<function name="mixerGetLineInfoW" ret="MMRESULT" convention="__stdcall">
<arg name="hmxobj">HMIXEROBJ</arg>
<arg name="pmxl">LPMIXERLINEW</arg>
<arg name="fdwInfo">DWORD</arg>
</function>

<function name="mixerGetID" ret="MMRESULT" convention="__stdcall">
<arg name="hmxobj">HMIXEROBJ</arg>
<arg name="puMxId">UINT  *</arg>
  DWORD fdwId);

<struct name="tagMIXERCONTROLA">
<field name="cbStruct">DWORD</field>
<field name="dwControlID">DWORD</field>
<field name="dwControlType">DWORD</field>
<field name="fdwControl">DWORD</field>
<field name="cMultipleItems">DWORD</field>
<field name="szShortName[16]">CHAR</field>
<field name="szName[64]">CHAR</field>
    union {
<struct>
<field name="lMinimum">LONG</field>           
            LONG    lMaximum;           
        };
<struct>
<field name="dwMinimum">DWORD</field>          
            DWORD   dwMaximum;          
        };
        DWORD       dwReserved[6];
    } Bounds;
    union {
        DWORD       cSteps;             
        DWORD       cbCustomData;       
        DWORD       dwReserved[6];      
    } Metrics;
} MIXERCONTROLA, *PMIXERCONTROLA, *LPMIXERCONTROLA;
<struct name="tagMIXERCONTROLW">
<field name="cbStruct">DWORD</field>
<field name="dwControlID">DWORD</field>
<field name="dwControlType">DWORD</field>
<field name="fdwControl">DWORD</field>
<field name="cMultipleItems">DWORD</field>
<field name="szShortName[16]">WCHAR</field>
<field name="szName[64]">WCHAR</field>
    union {
<struct>
<field name="lMinimum">LONG</field>           
            LONG    lMaximum;           
        };
<struct>
<field name="dwMinimum">DWORD</field>          
            DWORD   dwMaximum;          
        };
        DWORD       dwReserved[6];
    } Bounds;
    union {
        DWORD       cSteps;             
        DWORD       cbCustomData;       
        DWORD       dwReserved[6];      
    } Metrics;
} MIXERCONTROLW, *PMIXERCONTROLW, *LPMIXERCONTROLW;
typedef MIXERCONTROLA MIXERCONTROL;
typedef PMIXERCONTROLA PMIXERCONTROL;
typedef LPMIXERCONTROLA LPMIXERCONTROL;
<struct name="tagMIXERLINECONTROLSA">
<field name="cbStruct">DWORD</field>
<field name="dwLineID">DWORD</field>
    union {
        DWORD       dwControlID;    
        DWORD       dwControlType;  
    };
    DWORD           cControls;      
    DWORD           cbmxctrl;       
    LPMIXERCONTROLA pamxctrl;       
} MIXERLINECONTROLSA, *PMIXERLINECONTROLSA, *LPMIXERLINECONTROLSA;
<struct name="tagMIXERLINECONTROLSW">
<field name="cbStruct">DWORD</field>
<field name="dwLineID">DWORD</field>
    union {
        DWORD       dwControlID;    
        DWORD       dwControlType;  
    };
    DWORD           cControls;      
    DWORD           cbmxctrl;       
    LPMIXERCONTROLW pamxctrl;       
} MIXERLINECONTROLSW, *PMIXERLINECONTROLSW, *LPMIXERLINECONTROLSW;
typedef MIXERLINECONTROLSA MIXERLINECONTROLS;
typedef PMIXERLINECONTROLSA PMIXERLINECONTROLS;
typedef LPMIXERLINECONTROLSA LPMIXERLINECONTROLS;
<function name="mixerGetLineControlsA" ret="MMRESULT" convention="__stdcall">
<arg name="hmxobj">HMIXEROBJ</arg>
<arg name="pmxlc">LPMIXERLINECONTROLSA</arg>
<arg name="fdwControls">DWORD</arg>
</function>
<function name="mixerGetLineControlsW" ret="MMRESULT" convention="__stdcall">
<arg name="hmxobj">HMIXEROBJ</arg>
<arg name="pmxlc">LPMIXERLINECONTROLSW</arg>
<arg name="fdwControls">DWORD</arg>
</function>

<struct name="tMIXERCONTROLDETAILS">
<field name="cbStruct">DWORD</field>
<field name="dwControlID">DWORD</field>
<field name="cChannels">DWORD</field>
    union {
        HWND        hwndOwner;      
        DWORD       cMultipleItems; 
    };
    DWORD           cbDetails;      
    LPVOID          paDetails;      
} MIXERCONTROLDETAILS, *PMIXERCONTROLDETAILS,  *LPMIXERCONTROLDETAILS;

<struct name="tagMIXERCONTROLDETAILS_LISTTEXTA">
<field name="dwParam1">DWORD</field>
<field name="dwParam2">DWORD</field>
<field name="szName[64]">CHAR</field>
} MIXERCONTROLDETAILS_LISTTEXTA, *PMIXERCONTROLDETAILS_LISTTEXTA, *LPMIXERCONTROLDETAILS_LISTTEXTA;
<struct name="tagMIXERCONTROLDETAILS_LISTTEXTW">
<field name="dwParam1">DWORD</field>
<field name="dwParam2">DWORD</field>
<field name="szName[64]">WCHAR</field>
} MIXERCONTROLDETAILS_LISTTEXTW, *PMIXERCONTROLDETAILS_LISTTEXTW, *LPMIXERCONTROLDETAILS_LISTTEXTW;
typedef MIXERCONTROLDETAILS_LISTTEXTA MIXERCONTROLDETAILS_LISTTEXT;
typedef PMIXERCONTROLDETAILS_LISTTEXTA PMIXERCONTROLDETAILS_LISTTEXT;
typedef LPMIXERCONTROLDETAILS_LISTTEXTA LPMIXERCONTROLDETAILS_LISTTEXT;
<struct name="tMIXERCONTROLDETAILS_BOOLEAN">
<field name="fValue">LONG</field>
}       MIXERCONTROLDETAILS_BOOLEAN,
      *PMIXERCONTROLDETAILS_BOOLEAN,
  *LPMIXERCONTROLDETAILS_BOOLEAN;

<struct name="tMIXERCONTROLDETAILS_SIGNED">
<field name="lValue">LONG</field>
}       MIXERCONTROLDETAILS_SIGNED,
      *PMIXERCONTROLDETAILS_SIGNED,
  *LPMIXERCONTROLDETAILS_SIGNED;
<struct name="tMIXERCONTROLDETAILS_UNSIGNED">
<field name="dwValue">DWORD</field>
}       MIXERCONTROLDETAILS_UNSIGNED,
      *PMIXERCONTROLDETAILS_UNSIGNED,
  *LPMIXERCONTROLDETAILS_UNSIGNED;

<function name="mixerGetControlDetailsA" ret="MMRESULT" convention="__stdcall">
<arg name="hmxobj">HMIXEROBJ</arg>
<arg name="pmxcd">LPMIXERCONTROLDETAILS</arg>
<arg name="fdwDetails">DWORD</arg>
</function>
<function name="mixerGetControlDetailsW" ret="MMRESULT" convention="__stdcall">
<arg name="hmxobj">HMIXEROBJ</arg>
<arg name="pmxcd">LPMIXERCONTROLDETAILS</arg>
<arg name="fdwDetails">DWORD</arg>
</function>
<function name="mixerSetControlDetails" ret="MMRESULT" convention="__stdcall">
<arg name="hmxobj">HMIXEROBJ</arg>
<arg name="pmxcd">LPMIXERCONTROLDETAILS</arg>
<arg name="fdwDetails">DWORD</arg>
</function>
typedef void (__stdcall TIMECALLBACK)(UINT uTimerID, UINT uMsg, DWORD_PTR dwUser, DWORD_PTR dw1, DWORD_PTR dw2);

typedef TIMECALLBACK  *LPTIMECALLBACK;

                                        
                                        
<struct name="timecaps_tag">
<field name="wPeriodMin">UINT</field>
<field name="wPeriodMax">UINT</field>
} TIMECAPS, *PTIMECAPS,  *NPTIMECAPS,  *LPTIMECAPS;
<function name="timeGetSystemTime" ret="MMRESULT" convention="__stdcall">
<arg name="pmmt">LPMMTIME</arg>
<arg name="cbmmt">UINT</arg>
</function>
<function name="timeGetTime" ret="DWORD" convention="__stdcall">
void);
<function name="timeSetEvent" ret="MMRESULT" convention="__stdcall">
<arg name="uDelay">UINT</arg>
<arg name="uResolution">UINT</arg>
<arg name="fptc">LPTIMECALLBACK</arg>
<arg name="dwUser">DWORD_PTR</arg>
<arg name="fuEvent">UINT</arg>
</function>
<function name="timeKillEvent" ret="MMRESULT" convention="__stdcall">
<arg name="uTimerID">UINT</arg>
</function>
<function name="timeGetDevCaps" ret="MMRESULT" convention="__stdcall">
<arg name="ptc">LPTIMECAPS</arg>
<arg name="cbtc">UINT</arg>
</function>
<function name="timeBeginPeriod" ret="MMRESULT" convention="__stdcall">
<arg name="uPeriod">UINT</arg>
</function>
<function name="timeEndPeriod" ret="MMRESULT" convention="__stdcall">
<arg name="uPeriod">UINT</arg>
</function>

<struct name="tagJOYCAPSA">
<field name="wMid">WORD</field>
<field name="wPid">WORD</field>
<field name="szPname[32]">CHAR</field>
<field name="wXmin">UINT</field>
<field name="wXmax">UINT</field>
<field name="wYmin">UINT</field>
<field name="wYmax">UINT</field>
<field name="wZmin">UINT</field>
<field name="wZmax">UINT</field>
<field name="wNumButtons">UINT</field>
<field name="wPeriodMin">UINT</field>
<field name="wPeriodMax">UINT</field>
<field name="wRmin">UINT</field>               
    UINT    wRmax;               
    UINT    wUmin;               
    UINT    wUmax;               
    UINT    wVmin;               
    UINT    wVmax;               
    UINT    wCaps;               
    UINT    wMaxAxes;            
    UINT    wNumAxes;            
    UINT    wMaxButtons;         
    CHAR    szRegKey[32];
    CHAR    szOEMVxD[260]; 

} JOYCAPSA, *PJOYCAPSA, *NPJOYCAPSA, *LPJOYCAPSA;
<struct name="tagJOYCAPSW">
<field name="wMid">WORD</field>
<field name="wPid">WORD</field>
<field name="szPname[32]">WCHAR</field>
<field name="wXmin">UINT</field>
<field name="wXmax">UINT</field>
<field name="wYmin">UINT</field>
<field name="wYmax">UINT</field>
<field name="wZmin">UINT</field>
<field name="wZmax">UINT</field>
<field name="wNumButtons">UINT</field>
<field name="wPeriodMin">UINT</field>
<field name="wPeriodMax">UINT</field>
<field name="wRmin">UINT</field>               
    UINT    wRmax;               
    UINT    wUmin;               
    UINT    wUmax;               
    UINT    wVmin;               
    UINT    wVmax;               
    UINT    wCaps;               
    UINT    wMaxAxes;            
    UINT    wNumAxes;            
    UINT    wMaxButtons;         
    WCHAR   szRegKey[32];
    WCHAR   szOEMVxD[260]; 

} JOYCAPSW, *PJOYCAPSW, *NPJOYCAPSW, *LPJOYCAPSW;

typedef JOYCAPSA JOYCAPS;
typedef PJOYCAPSA PJOYCAPS;
typedef NPJOYCAPSA NPJOYCAPS;
typedef LPJOYCAPSA LPJOYCAPS;

<struct name="tagJOYCAPS2A">
<field name="wMid">WORD</field>
<field name="wPid">WORD</field>
<field name="szPname[32]">CHAR</field>
<field name="wXmin">UINT</field>
<field name="wXmax">UINT</field>
<field name="wYmin">UINT</field>
<field name="wYmax">UINT</field>
<field name="wZmin">UINT</field>
<field name="wZmax">UINT</field>
<field name="wNumButtons">UINT</field>
<field name="wPeriodMin">UINT</field>
<field name="wPeriodMax">UINT</field>
<field name="wRmin">UINT</field>
<field name="wRmax">UINT</field>
<field name="wUmin">UINT</field>
<field name="wUmax">UINT</field>
<field name="wVmin">UINT</field>
<field name="wVmax">UINT</field>
<field name="wCaps">UINT</field>
<field name="wMaxAxes">UINT</field>
<field name="wNumAxes">UINT</field>
<field name="wMaxButtons">UINT</field>
<field name="szRegKey[32]">CHAR</field>
<field name="szOEMVxD[260]">CHAR</field>
<field name="ManufacturerGuid">GUID</field>
<field name="ProductGuid">GUID</field>
<field name="NameGuid">GUID</field>
} JOYCAPS2A, *PJOYCAPS2A, *NPJOYCAPS2A, *LPJOYCAPS2A;
<struct name="tagJOYCAPS2W">
<field name="wMid">WORD</field>
<field name="wPid">WORD</field>
<field name="szPname[32]">WCHAR</field>
<field name="wXmin">UINT</field>
<field name="wXmax">UINT</field>
<field name="wYmin">UINT</field>
<field name="wYmax">UINT</field>
<field name="wZmin">UINT</field>
<field name="wZmax">UINT</field>
<field name="wNumButtons">UINT</field>
<field name="wPeriodMin">UINT</field>
<field name="wPeriodMax">UINT</field>
<field name="wRmin">UINT</field>
<field name="wRmax">UINT</field>
<field name="wUmin">UINT</field>
<field name="wUmax">UINT</field>
<field name="wVmin">UINT</field>
<field name="wVmax">UINT</field>
<field name="wCaps">UINT</field>
<field name="wMaxAxes">UINT</field>
<field name="wNumAxes">UINT</field>
<field name="wMaxButtons">UINT</field>
<field name="szRegKey[32]">WCHAR</field>
<field name="szOEMVxD[260]">WCHAR</field>
<field name="ManufacturerGuid">GUID</field>
<field name="ProductGuid">GUID</field>
<field name="NameGuid">GUID</field>
} JOYCAPS2W, *PJOYCAPS2W, *NPJOYCAPS2W, *LPJOYCAPS2W;

typedef JOYCAPS2A JOYCAPS2;
typedef PJOYCAPS2A PJOYCAPS2;
typedef NPJOYCAPS2A NPJOYCAPS2;
typedef LPJOYCAPS2A LPJOYCAPS2;
<struct name="joyinfo_tag">
<field name="wXpos">UINT</field>
<field name="wYpos">UINT</field>
<field name="wZpos">UINT</field>
<field name="wButtons">UINT</field>
} JOYINFO, *PJOYINFO,  *NPJOYINFO,  *LPJOYINFO;
<struct name="joyinfoex_tag">
<field name="dwSize">DWORD</field>
<field name="dwFlags">DWORD</field>
<field name="dwXpos">DWORD</field>
<field name="dwYpos">DWORD</field>
<field name="dwZpos">DWORD</field>
<field name="dwRpos">DWORD</field>
<field name="dwUpos">DWORD</field>
<field name="dwVpos">DWORD</field>
<field name="dwButtons">DWORD</field>
<field name="dwButtonNumber">DWORD</field>
<field name="dwPOV">DWORD</field>
<field name="dwReserved1">DWORD</field>
<field name="dwReserved2">DWORD</field>
} JOYINFOEX, *PJOYINFOEX,  *NPJOYINFOEX,  *LPJOYINFOEX;

<function name="joyGetNumDevs" ret="UINT" convention="__stdcall">
void);
<function name="joyGetDevCapsA" ret="MMRESULT" convention="__stdcall">
<arg name="uJoyID">UINT_PTR</arg>
<arg name="pjc">LPJOYCAPSA</arg>
<arg name="cbjc">UINT</arg>
</function>
<function name="joyGetDevCapsW" ret="MMRESULT" convention="__stdcall">
<arg name="uJoyID">UINT_PTR</arg>
<arg name="pjc">LPJOYCAPSW</arg>
<arg name="cbjc">UINT</arg>
</function>
<function name="joyGetPos" ret="MMRESULT" convention="__stdcall">
<arg name="uJoyID">UINT</arg>
<arg name="pji">LPJOYINFO</arg>
</function>
<function name="joyGetPosEx" ret="MMRESULT" convention="__stdcall">
<arg name="uJoyID">UINT</arg>
<arg name="pji">LPJOYINFOEX</arg>
</function>
<function name="joyGetThreshold" ret="MMRESULT" convention="__stdcall">
<arg name="uJoyID">UINT</arg>
<arg name="puThreshold">LPUINT</arg>
</function>
<function name="joyReleaseCapture" ret="MMRESULT" convention="__stdcall">
<arg name="uJoyID">UINT</arg>
</function>
<function name="joySetCapture" ret="MMRESULT" convention="__stdcall">
<arg name="hwnd">HWND</arg>
<arg name="uJoyID">UINT</arg>
<arg name="uPeriod">UINT</arg>
<arg name="fChanged">BOOL</arg>
</function>
<function name="joySetThreshold" ret="MMRESULT" convention="__stdcall">
<arg name="uJoyID">UINT</arg>
<arg name="uThreshold">UINT</arg>
</function>

typedef DWORD           FOURCC;         
typedef char  *    HPSTR;          
<struct name="HMMIO__">
int unused; };
<typedef name="HMMIO">HMMIO__ *</typedef>                  
typedef LRESULT (__stdcall MMIOPROC)(LPSTR lpmmioinfo, UINT uMsg,
            LPARAM lParam1, LPARAM lParam2);
typedef MMIOPROC  *LPMMIOPROC;
<struct name="_MMIOINFO">
        
        DWORD           dwFlags;        
        FOURCC          fccIOProc;      
        LPMMIOPROC      pIOProc;        
        UINT            wErrorRet;      
        HTASK           htask;          

        
        LONG            cchBuffer;      
        HPSTR           pchBuffer;      
        HPSTR           pchNext;        
        HPSTR           pchEndRead;     
        HPSTR           pchEndWrite;    
        LONG            lBufOffset;     

        
        LONG            lDiskOffset;    
        DWORD           adwInfo[3];     

        
        DWORD           dwReserved1;    
        DWORD           dwReserved2;    
        HMMIO           hmmio;          
} MMIOINFO, *PMMIOINFO,  *NPMMIOINFO,  *LPMMIOINFO;
typedef const MMIOINFO  *LPCMMIOINFO;
<struct name="_MMCKINFO">
<field name="ckid">FOURCC</field>
<field name="cksize">DWORD</field>
<field name="fccType">FOURCC</field>
<field name="dwDataOffset">DWORD</field>
<field name="dwFlags">DWORD</field>
} MMCKINFO, *PMMCKINFO,  *NPMMCKINFO,  *LPMMCKINFO;
typedef const MMCKINFO *LPCMMCKINFO;
<function name="mmioStringToFOURCCA" ret="FOURCC" convention="__stdcall">
<arg name="sz">LPCSTR</arg>
<arg name="uFlags">UINT</arg>
</function>
<function name="mmioStringToFOURCCW" ret="FOURCC" convention="__stdcall">
<arg name="sz">LPCWSTR</arg>
<arg name="uFlags">UINT</arg>
</function>
<function name="mmioInstallIOProcA" ret="LPMMIOPROC" convention="__stdcall">
<arg name="fccIOProc">FOURCC</arg>
<arg name="pIOProc">LPMMIOPROC</arg>
<arg name="dwFlags">DWORD</arg>
</function>
<function name="mmioInstallIOProcW" ret="LPMMIOPROC" convention="__stdcall">
<arg name="fccIOProc">FOURCC</arg>
<arg name="pIOProc">LPMMIOPROC</arg>
<arg name="dwFlags">DWORD</arg>
</function>
<function name="mmioOpenA" ret="HMMIO" convention="__stdcall">
<arg name="pszFileName">LPSTR</arg>
<arg name="pmmioinfo">LPMMIOINFO</arg>
<arg name="fdwOpen">DWORD</arg>
</function>
<function name="mmioOpenW" ret="HMMIO" convention="__stdcall">
<arg name="pszFileName">LPWSTR</arg>
<arg name="pmmioinfo">LPMMIOINFO</arg>
<arg name="fdwOpen">DWORD</arg>
</function>
<function name="mmioRenameA" ret="MMRESULT" convention="__stdcall">
<arg name="pszFileName">LPCSTR</arg>
<arg name="pszNewFileName">LPCSTR</arg>
<arg name="pmmioinfo">LPCMMIOINFO</arg>
<arg name="fdwRename">DWORD</arg>
</function>
<function name="mmioRenameW" ret="MMRESULT" convention="__stdcall">
<arg name="pszFileName">LPCWSTR</arg>
<arg name="pszNewFileName">LPCWSTR</arg>
<arg name="pmmioinfo">LPCMMIOINFO</arg>
<arg name="fdwRename">DWORD</arg>
</function>

<function name="mmioClose" ret="MMRESULT" convention="__stdcall">
<arg name="hmmio">HMMIO</arg>
<arg name="fuClose">UINT</arg>
</function>
<function name="mmioRead" ret="LONG" convention="__stdcall">
<arg name="hmmio">HMMIO</arg>
<arg name="pch">HPSTR</arg>
<arg name="cch">LONG</arg>
</function>
<function name="mmioWrite" ret="LONG" convention="__stdcall">
<arg name="hmmio">HMMIO</arg>
<arg name="pch">const char *</arg>
<arg name="cch">LONG</arg>
</function>
<function name="mmioSeek" ret="LONG" convention="__stdcall">
<arg name="hmmio">HMMIO</arg>
<arg name="lOffset">LONG</arg>
<arg name="iOrigin">int</arg>
</function>
<function name="mmioGetInfo" ret="MMRESULT" convention="__stdcall">
<arg name="hmmio">HMMIO</arg>
<arg name="pmmioinfo">LPMMIOINFO</arg>
<arg name="fuInfo">UINT</arg>
</function>
<function name="mmioSetInfo" ret="MMRESULT" convention="__stdcall">
<arg name="hmmio">HMMIO</arg>
<arg name="pmmioinfo">LPCMMIOINFO</arg>
<arg name="fuInfo">UINT</arg>
</function>
<function name="mmioSetBuffer" ret="MMRESULT" convention="__stdcall">
<arg name="hmmio">HMMIO</arg>
<arg name="pchBuffer">LPSTR</arg>
<arg name="cchBuffer">LONG</arg>
<arg name="fuBuffer">UINT</arg>
</function>
<function name="mmioFlush" ret="MMRESULT" convention="__stdcall">
<arg name="hmmio">HMMIO</arg>
<arg name="fuFlush">UINT</arg>
</function>
<function name="mmioAdvance" ret="MMRESULT" convention="__stdcall">
<arg name="hmmio">HMMIO</arg>
<arg name="pmmioinfo">LPMMIOINFO</arg>
<arg name="fuAdvance">UINT</arg>
</function>
<function name="mmioSendMessage" ret="LRESULT" convention="__stdcall">
<arg name="hmmio">HMMIO</arg>
<arg name="uMsg">UINT</arg>
<arg name="lParam1">LPARAM</arg>
<arg name="lParam2">LPARAM</arg>
</function>
<function name="mmioDescend" ret="MMRESULT" convention="__stdcall">
<arg name="hmmio">HMMIO</arg>
<arg name="pmmcki">LPMMCKINFO</arg>
<arg name="pmmckiParent">const MMCKINFO *</arg>
<arg name="fuDescend">UINT</arg>
</function>
<function name="mmioAscend" ret="MMRESULT" convention="__stdcall">
<arg name="hmmio">HMMIO</arg>
<arg name="pmmcki">LPMMCKINFO</arg>
<arg name="fuAscend">UINT</arg>
</function>
<function name="mmioCreateChunk" ret="MMRESULT" convention="__stdcall">
<arg name="hmmio">HMMIO</arg>
<arg name="pmmcki">LPMMCKINFO</arg>
<arg name="fuCreate">UINT</arg>
</function>
typedef DWORD   MCIERROR;       

typedef UINT    MCIDEVICEID;    

typedef<fnptr name="YIELDPROC" ret="UINT" convention="__stdcall">
<arg name="mciId">MCIDEVICEID</arg>
<arg name="dwYieldData">DWORD</arg>
</function>

<function name="mciSendCommandA" ret="MCIERROR" convention="__stdcall">
<arg name="mciId">MCIDEVICEID</arg>
<arg name="uMsg">UINT</arg>
<arg name="dwParam1">DWORD_PTR</arg>
<arg name="dwParam2">DWORD_PTR</arg>
</function>
<function name="mciSendCommandW" ret="MCIERROR" convention="__stdcall">
<arg name="mciId">MCIDEVICEID</arg>
<arg name="uMsg">UINT</arg>
<arg name="dwParam1">DWORD_PTR</arg>
<arg name="dwParam2">DWORD_PTR</arg>
</function>
<function name="mciSendStringA" ret="MCIERROR " convention="__stdcall">
<arg name="lpstrCommand">LPCSTR</arg>
<arg name="lpstrReturnString">LPSTR</arg>
<arg name="uReturnLength">UINT</arg>
<arg name="hwndCallback">HWND</arg>
</function>
<function name="mciSendStringW" ret="MCIERROR " convention="__stdcall">
<arg name="lpstrCommand">LPCWSTR</arg>
<arg name="lpstrReturnString">LPWSTR</arg>
<arg name="uReturnLength">UINT</arg>
<arg name="hwndCallback">HWND</arg>
</function>
<function name="mciGetDeviceIDA" ret="MCIDEVICEID" convention="__stdcall">
<arg name="pszDevice">LPCSTR</arg>
</function>
<function name="mciGetDeviceIDW" ret="MCIDEVICEID" convention="__stdcall">
<arg name="pszDevice">LPCWSTR</arg>
</function>
<function name="mciGetDeviceIDFromElementIDA" ret="MCIDEVICEID" convention="__stdcall">
<arg name="dwElementID">DWORD</arg>
  LPCSTR lpstrType );
<function name="mciGetDeviceIDFromElementIDW" ret="MCIDEVICEID" convention="__stdcall">
<arg name="dwElementID">DWORD</arg>
  LPCWSTR lpstrType );
<function name="mciGetErrorStringA" ret="BOOL" convention="__stdcall">
<arg name="mcierr">MCIERROR</arg>
<arg name="pszText">LPSTR</arg>
<arg name="cchText">UINT</arg>
</function>
<function name="mciGetErrorStringW" ret="BOOL" convention="__stdcall">
<arg name="mcierr">MCIERROR</arg>
<arg name="pszText">LPWSTR</arg>
<arg name="cchText">UINT</arg>
</function>
<function name="mciSetYieldProc" ret="BOOL" convention="__stdcall">
<arg name="mciId">MCIDEVICEID</arg>
<arg name="fpYieldProc">YIELDPROC</arg>
<arg name="dwYieldData">DWORD</arg>
</function>
<function name="mciGetCreatorTask" ret="HTASK" convention="__stdcall">
<arg name="mciId">MCIDEVICEID</arg>
</function>
<function name="mciGetYieldProc" ret="YIELDPROC" convention="__stdcall">
<arg name="mciId">MCIDEVICEID</arg>
<arg name="pdwYieldData">LPDWORD</arg>
</function>
<struct name="tagMCI_GENERIC_PARMS">
<field name="dwCallback">DWORD_PTR</field>
} MCI_GENERIC_PARMS, *PMCI_GENERIC_PARMS,  *LPMCI_GENERIC_PARMS;
<struct name="tagMCI_OPEN_PARMSA">
<field name="dwCallback">DWORD_PTR</field>
<field name="wDeviceID">MCIDEVICEID</field>
<field name="lpstrDeviceType">LPCSTR</field>
<field name="lpstrElementName">LPCSTR</field>
<field name="lpstrAlias">LPCSTR</field>
} MCI_OPEN_PARMSA, *PMCI_OPEN_PARMSA, *LPMCI_OPEN_PARMSA;
<struct name="tagMCI_OPEN_PARMSW">
<field name="dwCallback">DWORD_PTR</field>
<field name="wDeviceID">MCIDEVICEID</field>
<field name="lpstrDeviceType">LPCWSTR</field>
<field name="lpstrElementName">LPCWSTR</field>
<field name="lpstrAlias">LPCWSTR</field>
} MCI_OPEN_PARMSW, *PMCI_OPEN_PARMSW, *LPMCI_OPEN_PARMSW;
typedef MCI_OPEN_PARMSA MCI_OPEN_PARMS;
typedef PMCI_OPEN_PARMSA PMCI_OPEN_PARMS;
typedef LPMCI_OPEN_PARMSA LPMCI_OPEN_PARMS;
<struct name="tagMCI_PLAY_PARMS">
<field name="dwCallback">DWORD_PTR</field>
<field name="dwFrom">DWORD</field>
<field name="dwTo">DWORD</field>
} MCI_PLAY_PARMS, *PMCI_PLAY_PARMS,  *LPMCI_PLAY_PARMS;
<struct name="tagMCI_SEEK_PARMS">
<field name="dwCallback">DWORD_PTR</field>
<field name="dwTo">DWORD</field>
} MCI_SEEK_PARMS, *PMCI_SEEK_PARMS,  *LPMCI_SEEK_PARMS;
<struct name="tagMCI_STATUS_PARMS">
<field name="dwCallback">DWORD_PTR</field>
<field name="dwReturn">DWORD_PTR</field>
<field name="dwItem">DWORD</field>
<field name="dwTrack">DWORD</field>
} MCI_STATUS_PARMS, *PMCI_STATUS_PARMS,  * LPMCI_STATUS_PARMS;
<struct name="tagMCI_INFO_PARMSA">
<field name="dwCallback">DWORD_PTR</field>
<field name="lpstrReturn">LPSTR</field>
<field name="dwRetSize">DWORD</field>
</struct>
<typedefprev id="MCI_INFO_PARMSA"/>
<typedefptrprev id="LPMCI_INFO_PARMSA"/>
<struct name="tagMCI_INFO_PARMSW">
<field name="dwCallback">DWORD_PTR</field>
<field name="lpstrReturn">LPWSTR</field>
<field name="dwRetSize">DWORD</field>
</struct>
<typedefprev id="MCI_INFO_PARMSW"/>
<typedefptrprev id="LPMCI_INFO_PARMSW"/>

typedef MCI_INFO_PARMSA MCI_INFO_PARMS;
typedef LPMCI_INFO_PARMSA LPMCI_INFO_PARMS;
<struct name="tagMCI_GETDEVCAPS_PARMS">
<field name="dwCallback">DWORD_PTR</field>
<field name="dwReturn">DWORD</field>
<field name="dwItem">DWORD</field>
} MCI_GETDEVCAPS_PARMS, *PMCI_GETDEVCAPS_PARMS,  * LPMCI_GETDEVCAPS_PARMS;
<struct name="tagMCI_SYSINFO_PARMSA">
<field name="dwCallback">DWORD_PTR</field>
<field name="lpstrReturn">LPSTR</field>
<field name="dwRetSize">DWORD</field>
<field name="dwNumber">DWORD</field>
<field name="wDeviceType">UINT</field>
} MCI_SYSINFO_PARMSA, *PMCI_SYSINFO_PARMSA, * LPMCI_SYSINFO_PARMSA;
<struct name="tagMCI_SYSINFO_PARMSW">
<field name="dwCallback">DWORD_PTR</field>
<field name="lpstrReturn">LPWSTR</field>
<field name="dwRetSize">DWORD</field>
<field name="dwNumber">DWORD</field>
<field name="wDeviceType">UINT</field>
} MCI_SYSINFO_PARMSW, *PMCI_SYSINFO_PARMSW, * LPMCI_SYSINFO_PARMSW;
typedef MCI_SYSINFO_PARMSA MCI_SYSINFO_PARMS;
typedef PMCI_SYSINFO_PARMSA PMCI_SYSINFO_PARMS;
typedef LPMCI_SYSINFO_PARMSA LPMCI_SYSINFO_PARMS;
<struct name="tagMCI_SET_PARMS">
<field name="dwCallback">DWORD_PTR</field>
<field name="dwTimeFormat">DWORD</field>
<field name="dwAudio">DWORD</field>
} MCI_SET_PARMS, *PMCI_SET_PARMS,  *LPMCI_SET_PARMS;
<struct name="tagMCI_BREAK_PARMS">
<field name="dwCallback">DWORD_PTR</field>
<field name="nVirtKey">int</field>
<field name="hwndBreak">HWND</field>

} MCI_BREAK_PARMS, *PMCI_BREAK_PARMS,  * LPMCI_BREAK_PARMS;
<struct name="tagMCI_SAVE_PARMSA">
<field name="dwCallback">DWORD_PTR</field>
<field name="lpfilename">LPCSTR</field>
} MCI_SAVE_PARMSA, *PMCI_SAVE_PARMSA, * LPMCI_SAVE_PARMSA;
<struct name="tagMCI_SAVE_PARMSW">
<field name="dwCallback">DWORD_PTR</field>
<field name="lpfilename">LPCWSTR</field>
} MCI_SAVE_PARMSW, *PMCI_SAVE_PARMSW, * LPMCI_SAVE_PARMSW;
typedef MCI_SAVE_PARMSA MCI_SAVE_PARMS;
typedef PMCI_SAVE_PARMSA PMCI_SAVE_PARMS;
typedef LPMCI_SAVE_PARMSA LPMCI_SAVE_PARMS;
<struct name="tagMCI_LOAD_PARMSA">
<field name="dwCallback">DWORD_PTR</field>
<field name="lpfilename">LPCSTR</field>
} MCI_LOAD_PARMSA, *PMCI_LOAD_PARMSA, * LPMCI_LOAD_PARMSA;
<struct name="tagMCI_LOAD_PARMSW">
<field name="dwCallback">DWORD_PTR</field>
<field name="lpfilename">LPCWSTR</field>
} MCI_LOAD_PARMSW, *PMCI_LOAD_PARMSW, * LPMCI_LOAD_PARMSW;
typedef MCI_LOAD_PARMSA MCI_LOAD_PARMS;
typedef PMCI_LOAD_PARMSA PMCI_LOAD_PARMS;
typedef LPMCI_LOAD_PARMSA LPMCI_LOAD_PARMS;
<struct name="tagMCI_RECORD_PARMS">
<field name="dwCallback">DWORD_PTR</field>
<field name="dwFrom">DWORD</field>
<field name="dwTo">DWORD</field>
</struct>
<typedefprev id="MCI_RECORD_PARMS"/>
<typedefptrprev id="LPMCI_RECORD_PARMS"/>

<struct name="tagMCI_VD_PLAY_PARMS">
<field name="dwCallback">DWORD_PTR</field>
<field name="dwFrom">DWORD</field>
<field name="dwTo">DWORD</field>
<field name="dwSpeed">DWORD</field>
} MCI_VD_PLAY_PARMS, *PMCI_VD_PLAY_PARMS,  *LPMCI_VD_PLAY_PARMS;
<struct name="tagMCI_VD_STEP_PARMS">
<field name="dwCallback">DWORD_PTR</field>
<field name="dwFrames">DWORD</field>
} MCI_VD_STEP_PARMS, *PMCI_VD_STEP_PARMS,  *LPMCI_VD_STEP_PARMS;
<struct name="tagMCI_VD_ESCAPE_PARMSA">
<field name="dwCallback">DWORD_PTR</field>
<field name="lpstrCommand">LPCSTR</field>
} MCI_VD_ESCAPE_PARMSA, *PMCI_VD_ESCAPE_PARMSA, *LPMCI_VD_ESCAPE_PARMSA;
<struct name="tagMCI_VD_ESCAPE_PARMSW">
<field name="dwCallback">DWORD_PTR</field>
<field name="lpstrCommand">LPCWSTR</field>
} MCI_VD_ESCAPE_PARMSW, *PMCI_VD_ESCAPE_PARMSW, *LPMCI_VD_ESCAPE_PARMSW;
typedef MCI_VD_ESCAPE_PARMSA MCI_VD_ESCAPE_PARMS;
typedef PMCI_VD_ESCAPE_PARMSA PMCI_VD_ESCAPE_PARMS;
typedef LPMCI_VD_ESCAPE_PARMSA LPMCI_VD_ESCAPE_PARMS;
<struct name="tagMCI_WAVE_OPEN_PARMSA">
<field name="dwCallback">DWORD_PTR</field>
<field name="wDeviceID">MCIDEVICEID</field>
<field name="lpstrDeviceType">LPCSTR</field>
<field name="lpstrElementName">LPCSTR</field>
<field name="lpstrAlias">LPCSTR</field>
<field name="dwBufferSeconds">DWORD</field>
} MCI_WAVE_OPEN_PARMSA, *PMCI_WAVE_OPEN_PARMSA, *LPMCI_WAVE_OPEN_PARMSA;
<struct name="tagMCI_WAVE_OPEN_PARMSW">
<field name="dwCallback">DWORD_PTR</field>
<field name="wDeviceID">MCIDEVICEID</field>
<field name="lpstrDeviceType">LPCWSTR</field>
<field name="lpstrElementName">LPCWSTR</field>
<field name="lpstrAlias">LPCWSTR</field>
<field name="dwBufferSeconds">DWORD</field>
} MCI_WAVE_OPEN_PARMSW, *PMCI_WAVE_OPEN_PARMSW, *LPMCI_WAVE_OPEN_PARMSW;
typedef MCI_WAVE_OPEN_PARMSA MCI_WAVE_OPEN_PARMS;
typedef PMCI_WAVE_OPEN_PARMSA PMCI_WAVE_OPEN_PARMS;
typedef LPMCI_WAVE_OPEN_PARMSA LPMCI_WAVE_OPEN_PARMS;
<struct name="tagMCI_WAVE_DELETE_PARMS">
<field name="dwCallback">DWORD_PTR</field>
<field name="dwFrom">DWORD</field>
<field name="dwTo">DWORD</field>
} MCI_WAVE_DELETE_PARMS, *PMCI_WAVE_DELETE_PARMS,  *LPMCI_WAVE_DELETE_PARMS;
<struct name="tagMCI_WAVE_SET_PARMS">
<field name="dwCallback">DWORD_PTR</field>
<field name="dwTimeFormat">DWORD</field>
<field name="dwAudio">DWORD</field>
<field name="wInput">UINT</field>
<field name="wOutput">UINT</field>

    WORD    wFormatTag;
    WORD    wReserved2;
    WORD    nChannels;
    WORD    wReserved3;
    DWORD   nSamplesPerSec;
    DWORD   nAvgBytesPerSec;
    WORD    nBlockAlign;
    WORD    wReserved4;
    WORD    wBitsPerSample;
    WORD    wReserved5;
} MCI_WAVE_SET_PARMS, *PMCI_WAVE_SET_PARMS,  * LPMCI_WAVE_SET_PARMS;
<struct name="tagMCI_SEQ_SET_PARMS">
<field name="dwCallback">DWORD_PTR</field>
<field name="dwTimeFormat">DWORD</field>
<field name="dwAudio">DWORD</field>
<field name="dwTempo">DWORD</field>
<field name="dwPort">DWORD</field>
<field name="dwSlave">DWORD</field>
<field name="dwMaster">DWORD</field>
<field name="dwOffset">DWORD</field>
} MCI_SEQ_SET_PARMS, *PMCI_SEQ_SET_PARMS,  * LPMCI_SEQ_SET_PARMS;

<struct name="tagMCI_ANIM_OPEN_PARMSA">
<field name="dwCallback">DWORD_PTR</field>
<field name="wDeviceID">MCIDEVICEID</field>
<field name="lpstrDeviceType">LPCSTR</field>
<field name="lpstrElementName">LPCSTR</field>
<field name="lpstrAlias">LPCSTR</field>
<field name="dwStyle">DWORD</field>
<field name="hWndParent">HWND</field>
} MCI_ANIM_OPEN_PARMSA, *PMCI_ANIM_OPEN_PARMSA, *LPMCI_ANIM_OPEN_PARMSA;
<struct name="tagMCI_ANIM_OPEN_PARMSW">
<field name="dwCallback">DWORD_PTR</field>
<field name="wDeviceID">MCIDEVICEID</field>
<field name="lpstrDeviceType">LPCWSTR</field>
<field name="lpstrElementName">LPCWSTR</field>
<field name="lpstrAlias">LPCWSTR</field>
<field name="dwStyle">DWORD</field>
<field name="hWndParent">HWND</field>
} MCI_ANIM_OPEN_PARMSW, *PMCI_ANIM_OPEN_PARMSW, *LPMCI_ANIM_OPEN_PARMSW;
typedef MCI_ANIM_OPEN_PARMSA MCI_ANIM_OPEN_PARMS;
typedef PMCI_ANIM_OPEN_PARMSA PMCI_ANIM_OPEN_PARMS;
typedef LPMCI_ANIM_OPEN_PARMSA LPMCI_ANIM_OPEN_PARMS;
<struct name="tagMCI_ANIM_PLAY_PARMS">
<field name="dwCallback">DWORD_PTR</field>
<field name="dwFrom">DWORD</field>
<field name="dwTo">DWORD</field>
<field name="dwSpeed">DWORD</field>
} MCI_ANIM_PLAY_PARMS, *PMCI_ANIM_PLAY_PARMS,  *LPMCI_ANIM_PLAY_PARMS;
<struct name="tagMCI_ANIM_STEP_PARMS">
<field name="dwCallback">DWORD_PTR</field>
<field name="dwFrames">DWORD</field>
} MCI_ANIM_STEP_PARMS, *PMCI_ANIM_STEP_PARMS,  *LPMCI_ANIM_STEP_PARMS;
<struct name="tagMCI_ANIM_WINDOW_PARMSA">
<field name="dwCallback">DWORD_PTR</field>
<field name="hWnd">HWND</field>
<field name="nCmdShow">UINT</field>
<field name="lpstrText">LPCSTR</field>
} MCI_ANIM_WINDOW_PARMSA, *PMCI_ANIM_WINDOW_PARMSA, * LPMCI_ANIM_WINDOW_PARMSA;
<struct name="tagMCI_ANIM_WINDOW_PARMSW">
<field name="dwCallback">DWORD_PTR</field>
<field name="hWnd">HWND</field>
<field name="nCmdShow">UINT</field>
<field name="lpstrText">LPCWSTR</field>
} MCI_ANIM_WINDOW_PARMSW, *PMCI_ANIM_WINDOW_PARMSW, * LPMCI_ANIM_WINDOW_PARMSW;
typedef MCI_ANIM_WINDOW_PARMSA MCI_ANIM_WINDOW_PARMS;
typedef PMCI_ANIM_WINDOW_PARMSA PMCI_ANIM_WINDOW_PARMS;
typedef LPMCI_ANIM_WINDOW_PARMSA LPMCI_ANIM_WINDOW_PARMS;
<struct name="tagMCI_ANIM_RECT_PARMS">
<field name="dwCallback">DWORD_PTR</field>
<field name="rc">RECT</field>

} MCI_ANIM_RECT_PARMS;
typedef MCI_ANIM_RECT_PARMS * PMCI_ANIM_RECT_PARMS;
typedef MCI_ANIM_RECT_PARMS  * LPMCI_ANIM_RECT_PARMS;
<struct name="tagMCI_ANIM_UPDATE_PARMS">
<field name="dwCallback">DWORD_PTR</field>
<field name="rc">RECT</field>
<field name="hDC">HDC</field>
} MCI_ANIM_UPDATE_PARMS, *PMCI_ANIM_UPDATE_PARMS,  * LPMCI_ANIM_UPDATE_PARMS;
<struct name="tagMCI_OVLY_OPEN_PARMSA">
<field name="dwCallback">DWORD_PTR</field>
<field name="wDeviceID">MCIDEVICEID</field>
<field name="lpstrDeviceType">LPCSTR</field>
<field name="lpstrElementName">LPCSTR</field>
<field name="lpstrAlias">LPCSTR</field>
<field name="dwStyle">DWORD</field>
<field name="hWndParent">HWND</field>
} MCI_OVLY_OPEN_PARMSA, *PMCI_OVLY_OPEN_PARMSA, *LPMCI_OVLY_OPEN_PARMSA;
<struct name="tagMCI_OVLY_OPEN_PARMSW">
<field name="dwCallback">DWORD_PTR</field>
<field name="wDeviceID">MCIDEVICEID</field>
<field name="lpstrDeviceType">LPCWSTR</field>
<field name="lpstrElementName">LPCWSTR</field>
<field name="lpstrAlias">LPCWSTR</field>
<field name="dwStyle">DWORD</field>
<field name="hWndParent">HWND</field>
} MCI_OVLY_OPEN_PARMSW, *PMCI_OVLY_OPEN_PARMSW, *LPMCI_OVLY_OPEN_PARMSW;
typedef MCI_OVLY_OPEN_PARMSA MCI_OVLY_OPEN_PARMS;
typedef PMCI_OVLY_OPEN_PARMSA PMCI_OVLY_OPEN_PARMS;
typedef LPMCI_OVLY_OPEN_PARMSA LPMCI_OVLY_OPEN_PARMS;
<struct name="tagMCI_OVLY_WINDOW_PARMSA">
<field name="dwCallback">DWORD_PTR</field>
<field name="hWnd">HWND</field>
<field name="nCmdShow">UINT</field>
<field name="lpstrText">LPCSTR</field>
} MCI_OVLY_WINDOW_PARMSA, *PMCI_OVLY_WINDOW_PARMSA, * LPMCI_OVLY_WINDOW_PARMSA;
<struct name="tagMCI_OVLY_WINDOW_PARMSW">
<field name="dwCallback">DWORD_PTR</field>
<field name="hWnd">HWND</field>
<field name="nCmdShow">UINT</field>
<field name="lpstrText">LPCWSTR</field>
} MCI_OVLY_WINDOW_PARMSW, *PMCI_OVLY_WINDOW_PARMSW, * LPMCI_OVLY_WINDOW_PARMSW;
typedef MCI_OVLY_WINDOW_PARMSA MCI_OVLY_WINDOW_PARMS;
typedef PMCI_OVLY_WINDOW_PARMSA PMCI_OVLY_WINDOW_PARMS;
typedef LPMCI_OVLY_WINDOW_PARMSA LPMCI_OVLY_WINDOW_PARMS;
<struct name="tagMCI_OVLY_RECT_PARMS">
<field name="dwCallback">DWORD_PTR</field>
<field name="rc">RECT</field>

} MCI_OVLY_RECT_PARMS, *PMCI_OVLY_RECT_PARMS,  * LPMCI_OVLY_RECT_PARMS;
<struct name="tagMCI_OVLY_SAVE_PARMSA">
<field name="dwCallback">DWORD_PTR</field>
<field name="lpfilename">LPCSTR</field>
<field name="rc">RECT</field>
} MCI_OVLY_SAVE_PARMSA, *PMCI_OVLY_SAVE_PARMSA, * LPMCI_OVLY_SAVE_PARMSA;
<struct name="tagMCI_OVLY_SAVE_PARMSW">
<field name="dwCallback">DWORD_PTR</field>
<field name="lpfilename">LPCWSTR</field>
<field name="rc">RECT</field>
} MCI_OVLY_SAVE_PARMSW, *PMCI_OVLY_SAVE_PARMSW, * LPMCI_OVLY_SAVE_PARMSW;
typedef MCI_OVLY_SAVE_PARMSA MCI_OVLY_SAVE_PARMS;
typedef PMCI_OVLY_SAVE_PARMSA PMCI_OVLY_SAVE_PARMS;
typedef LPMCI_OVLY_SAVE_PARMSA LPMCI_OVLY_SAVE_PARMS;
<struct name="tagMCI_OVLY_LOAD_PARMSA">
<field name="dwCallback">DWORD_PTR</field>
<field name="lpfilename">LPCSTR</field>
<field name="rc">RECT</field>
} MCI_OVLY_LOAD_PARMSA, *PMCI_OVLY_LOAD_PARMSA, * LPMCI_OVLY_LOAD_PARMSA;
<struct name="tagMCI_OVLY_LOAD_PARMSW">
<field name="dwCallback">DWORD_PTR</field>
<field name="lpfilename">LPCWSTR</field>
<field name="rc">RECT</field>
} MCI_OVLY_LOAD_PARMSW, *PMCI_OVLY_LOAD_PARMSW, * LPMCI_OVLY_LOAD_PARMSW;
typedef MCI_OVLY_LOAD_PARMSA MCI_OVLY_LOAD_PARMS;
typedef PMCI_OVLY_LOAD_PARMSA PMCI_OVLY_LOAD_PARMS;
typedef LPMCI_OVLY_LOAD_PARMSA LPMCI_OVLY_LOAD_PARMS;

    

    

#line 1 "\\program files\\Microsoft SDKs\\Windows\\v6.0A\\Include\\poppack.h"
#pragma warning(disable:4103)

#pragma pack(pop)
#line 1 "\\program files\\Microsoft SDKs\\Windows\\v6.0A\\Include\\nb30.h"
#pragma once
<struct name="_NCB">
<field name="ncb_command">UCHAR</field>
<field name="ncb_retcode">UCHAR</field>
<field name="ncb_lsn">UCHAR</field>
<field name="ncb_num">UCHAR</field>
<field name="ncb_buffer">PUCHAR</field>
<field name="ncb_length">WORD</field>
<field name="ncb_callname[16]">UCHAR</field>
<field name="ncb_name[16]">UCHAR</field>
<field name="ncb_rto">UCHAR</field>
<field name="ncb_sto">UCHAR</field>
<fnptr name="ncb_post" ret="void" convention="__stdcall">
 struct _NCB * ); 
    UCHAR   ncb_lana_num;           
    UCHAR   ncb_cmd_cplt;           
    UCHAR   ncb_reserve[10];        

    HANDLE  ncb_event;              
                                    
                                    
                                    
} NCB, *PNCB;

<struct name="_ADAPTER_STATUS">
    UCHAR   adapter_address[6];
    UCHAR   rev_major;
    UCHAR   reserved0;
    UCHAR   adapter_type;
    UCHAR   rev_minor;
    WORD    duration;
    WORD    frmr_recv;
    WORD    frmr_xmit;

    WORD    iframe_recv_err;

    WORD    xmit_aborts;
    DWORD   xmit_success;
    DWORD   recv_success;

    WORD    iframe_xmit_err;

    WORD    recv_buff_unavail;
    WORD    t1_timeouts;
    WORD    ti_timeouts;
    DWORD   reserved1;
    WORD    free_ncbs;
    WORD    max_cfg_ncbs;
    WORD    max_ncbs;
    WORD    xmit_buf_unavail;
    WORD    max_dgram_size;
    WORD    pending_sess;
    WORD    max_cfg_sess;
    WORD    max_sess;
    WORD    max_sess_pkt_size;
    WORD    name_count;
} ADAPTER_STATUS, *PADAPTER_STATUS;

<struct name="_NAME_BUFFER">
    UCHAR   name[16];
    UCHAR   name_num;
    UCHAR   name_flags;
} NAME_BUFFER, *PNAME_BUFFER;

<struct name="_SESSION_HEADER">
<field name="sess_name">UCHAR</field>
<field name="num_sess">UCHAR</field>
<field name="rcv_dg_outstanding">UCHAR</field>
<field name="rcv_any_outstanding">UCHAR</field>
</struct>
<typedefprev id="SESSION_HEADER"/>
<typedefptrprev id="PSESSION_HEADER"/>

<struct name="_SESSION_BUFFER">
<field name="lsn">UCHAR</field>
<field name="state">UCHAR</field>
<field name="local_name[16]">UCHAR</field>
<field name="remote_name[16]">UCHAR</field>
<field name="rcvs_outstanding">UCHAR</field>
<field name="sends_outstanding">UCHAR</field>
</struct>
<typedefprev id="SESSION_BUFFER"/>
<typedefptrprev id="PSESSION_BUFFER"/>
<struct name="_LANA_ENUM">
<field name="length">UCHAR</field>
<field name="lana[254+1]">UCHAR</field>
</struct>
<typedefprev id="LANA_ENUM"/>
<typedefptrprev id="PLANA_ENUM"/>

<struct name="_FIND_NAME_HEADER">
<field name="node_count">WORD</field>
<field name="reserved">UCHAR</field>
<field name="unique_group">UCHAR</field>
</struct>
<typedefprev id="FIND_NAME_HEADER"/>
<typedefptrprev id="PFIND_NAME_HEADER"/>

<struct name="_FIND_NAME_BUFFER">
<field name="length">UCHAR</field>
<field name="access_control">UCHAR</field>
<field name="frame_control">UCHAR</field>
<field name="destination_addr[6]">UCHAR</field>
<field name="source_addr[6]">UCHAR</field>
<field name="routing_info[18]">UCHAR</field>
</struct>
<typedefprev id="FIND_NAME_BUFFER"/>
<typedefptrprev id="PFIND_NAME_BUFFER"/>

<struct name="_ACTION_HEADER">
<field name="transport_id">ULONG</field>
<field name="action_code">USHORT</field>
<field name="reserved">USHORT</field>
</struct>
<typedefprev id="ACTION_HEADER"/>
<typedefptrprev id="PACTION_HEADER"/>
                                
<function name="Netbios" ret="UCHAR" convention="__stdcall">
<arg name="pncb">PNCB</arg>
</function>
#line 1 "\\program files\\Microsoft SDKs\\Windows\\v6.0A\\Include\\rpc.h"
#pragma once

typedef void * I_RPC_HANDLE;
typedef long RPC_STATUS;
#line 1 "\\program files\\Microsoft SDKs\\Windows\\v6.0A\\Include\\rpcdce.h"

#pragma once

typedef  unsigned char  * RPC_CSTR;

typedef  unsigned short  * RPC_WSTR;
typedef I_RPC_HANDLE RPC_BINDING_HANDLE;
typedef RPC_BINDING_HANDLE handle_t;

typedef GUID UUID;
<struct name="_RPC_BINDING_VECTOR">
    unsigned long Count;
    RPC_BINDING_HANDLE BindingH[1];
} RPC_BINDING_VECTOR;
<struct name="_UUID_VECTOR">
  unsigned long Count;
  UUID *Uuid[1];
} UUID_VECTOR;
typedef void  * RPC_IF_HANDLE;
<struct name="_RPC_IF_ID">
<field name="Uuid">UUID</field>
    unsigned short VersMajor;
    unsigned short VersMinor;
} RPC_IF_ID;
<struct name="_RPC_PROTSEQ_VECTORA">
    unsigned int Count;
    unsigned char  * Protseq[1];
} RPC_PROTSEQ_VECTORA;

<struct name="_RPC_PROTSEQ_VECTORW">
    unsigned int Count;
    unsigned short  * Protseq[1];
} RPC_PROTSEQ_VECTORW;

<struct name="_RPC_POLICY">
    unsigned int Length ;
    unsigned long EndpointFlags ;
    unsigned long NICFlags ;
    } RPC_POLICY,   *PRPC_POLICY ;

typedef void __stdcall
RPC_OBJECT_INQ_FN (
     UUID  * ObjectUuid,
     UUID  * TypeUuid,
<arg name="Status">RPC_STATUS  *</arg>
</function>

 
typedef RPC_STATUS __stdcall
RPC_IF_CALLBACK_FN (
     RPC_IF_HANDLE  InterfaceUuid,
     void *Context
    ) ;

typedef void __stdcall
RPC_SECURITY_CALLBACK_FN (
     void *Context
    ) ;
<struct>
    unsigned int Count;
    unsigned long Stats[1];
} RPC_STATS_VECTOR;

<struct>
  unsigned long Count;
  RPC_IF_ID  * IfId[1];
} RPC_IF_ID_VECTOR;
<function name="RpcBindingCopy" ret="RPC_STATUS" convention="__stdcall">
<arg name="SourceBinding">RPC_BINDING_HANDLE</arg>
<arg name="DestinationBinding">RPC_BINDING_HANDLE  *</arg>
</function>
<function name="RpcBindingFree" ret="RPC_STATUS" convention="__stdcall">

<arg name="Binding">RPC_BINDING_HANDLE  *</arg>
</function>
<function name="RpcBindingSetOption" ret="RPC_STATUS" convention="__stdcall">
 
     RPC_BINDING_HANDLE hBinding,
     unsigned long      option,
     ULONG_PTR          optionValue 
    );
<function name="RpcBindingInqOption" ret="RPC_STATUS" convention="__stdcall">
<arg name="hBinding">RPC_BINDING_HANDLE</arg>
<arg name="option">unsigned long     </arg>

     ULONG_PTR         *pOptionValue 
    );
<function name="RpcBindingFromStringBindingA" ret="RPC_STATUS" convention="__stdcall">
    
     RPC_CSTR StringBinding,
<arg name="Binding">RPC_BINDING_HANDLE  *</arg>
</function>

<function name="RpcBindingFromStringBindingW" ret="RPC_STATUS" convention="__stdcall">
<arg name="StringBinding">RPC_WSTR</arg>
        
<arg name="Binding">RPC_BINDING_HANDLE  *</arg>
</function>
<function name="RpcSsGetContextBinding" ret="RPC_STATUS" convention="__stdcall">

     void *ContextHandle,
<arg name="Binding">RPC_BINDING_HANDLE  *</arg>
</function>
<function name="RpcBindingInqObject" ret="RPC_STATUS" convention="__stdcall">
<arg name="Binding">RPC_BINDING_HANDLE</arg>
<arg name="ObjectUuid">UUID  *</arg>
</function>
<function name="RpcBindingReset" ret="RPC_STATUS" convention="__stdcall">

<arg name="Binding">RPC_BINDING_HANDLE</arg>
</function>
<function name="RpcBindingSetObject" ret="RPC_STATUS" convention="__stdcall">
<arg name="Binding">RPC_BINDING_HANDLE</arg>
<arg name="ObjectUuid">UUID  *</arg>
</function>
<function name="RpcMgmtInqDefaultProtectLevel" ret="RPC_STATUS" convention="__stdcall">
<arg name="AuthnSvc">unsigned long</arg>
<arg name="AuthnLevel">unsigned long  *</arg>
</function>
<function name="RpcBindingToStringBindingA" ret="RPC_STATUS" convention="__stdcall">
<arg name="Binding">RPC_BINDING_HANDLE</arg>
<arg name="StringBinding">RPC_CSTR  *</arg>
</function>

<function name="RpcBindingToStringBindingW" ret="RPC_STATUS" convention="__stdcall">
<arg name="Binding">RPC_BINDING_HANDLE</arg>
<arg name="StringBinding">RPC_WSTR  *</arg>
</function>
<function name="RpcBindingVectorFree" ret="RPC_STATUS" convention="__stdcall">

<arg name="BindingVector">RPC_BINDING_VECTOR  *  *</arg>
</function>
<function name="RpcStringBindingComposeA" ret="RPC_STATUS" convention="__stdcall">
<arg name="ObjUuid">RPC_CSTR</arg>
<arg name="ProtSeq">RPC_CSTR</arg>
    
     RPC_CSTR NetworkAddr,
     RPC_CSTR Endpoint,
     RPC_CSTR Options,
<arg name="StringBinding">RPC_CSTR  *</arg>
</function>

<function name="RpcStringBindingComposeW" ret="RPC_STATUS" convention="__stdcall">
<arg name="ObjUuid">RPC_WSTR</arg>
<arg name="ProtSeq">RPC_WSTR</arg>
    
     RPC_WSTR NetworkAddr,
     RPC_WSTR Endpoint,
     RPC_WSTR Options,
<arg name="StringBinding">RPC_WSTR  *</arg>
</function>
<function name="RpcStringBindingParseA" ret="RPC_STATUS" convention="__stdcall">
<arg name="StringBinding">RPC_CSTR</arg>
    
     RPC_CSTR  * ObjUuid,
     RPC_CSTR  * Protseq,
     RPC_CSTR  * NetworkAddr,
     RPC_CSTR  * Endpoint,
<arg name="NetworkOptions">RPC_CSTR  *</arg>
</function>

<function name="RpcStringBindingParseW" ret="RPC_STATUS" convention="__stdcall">
<arg name="StringBinding">RPC_WSTR</arg>
    
     RPC_WSTR  * ObjUuid,
     RPC_WSTR  * Protseq,
     RPC_WSTR  * NetworkAddr,
     RPC_WSTR  * Endpoint,
<arg name="NetworkOptions">RPC_WSTR  *</arg>
</function>
<function name="RpcStringFreeA" ret="RPC_STATUS" convention="__stdcall">

     RPC_CSTR  * String    
    );

<function name="RpcStringFreeW" ret="RPC_STATUS" convention="__stdcall">

<arg name="String">RPC_WSTR  *</arg>
</function>
<function name="RpcIfInqId" ret="RPC_STATUS" convention="__stdcall">
<arg name="RpcIfHandle">RPC_IF_HANDLE</arg>
<arg name="RpcIfId">RPC_IF_ID  *</arg>
</function>
<function name="RpcNetworkIsProtseqValidA" ret="RPC_STATUS" convention="__stdcall">

     RPC_CSTR Protseq     
    );

<function name="RpcNetworkIsProtseqValidW" ret="RPC_STATUS" convention="__stdcall">

<arg name="Protseq">RPC_WSTR</arg>
</function>
<function name="RpcMgmtInqComTimeout" ret="RPC_STATUS" convention="__stdcall">
<arg name="Binding">RPC_BINDING_HANDLE</arg>
<arg name="Timeout">unsigned int  *</arg>
</function>
<function name="RpcMgmtSetComTimeout" ret="RPC_STATUS" convention="__stdcall">
<arg name="Binding">RPC_BINDING_HANDLE</arg>
<arg name="Timeout">unsigned int</arg>
</function>
<function name="RpcMgmtSetCancelTimeout" ret="RPC_STATUS" convention="__stdcall">
<arg name="Timeout">long</arg>
</function>

<function name="RpcNetworkInqProtseqsA" ret="RPC_STATUS" convention="__stdcall">

     RPC_PROTSEQ_VECTORA  *  * ProtseqVector    
    );

<function name="RpcNetworkInqProtseqsW" ret="RPC_STATUS" convention="__stdcall">

     RPC_PROTSEQ_VECTORW  *  * ProtseqVector    
    );
<function name="RpcObjectInqType" ret="RPC_STATUS" convention="__stdcall">
<arg name="ObjUuid">UUID  *</arg>
<arg name="TypeUuid">UUID  *</arg>
</function>
<function name="RpcObjectSetInqFn" ret="RPC_STATUS" convention="__stdcall">

<arg name="InquiryFn">RPC_OBJECT_INQ_FN  *</arg>
</function>
<function name="RpcObjectSetType" ret="RPC_STATUS" convention="__stdcall">
<arg name="ObjUuid">UUID  *</arg>
<arg name="TypeUuid">UUID  *</arg>
</function>
<function name="RpcProtseqVectorFreeA" ret="RPC_STATUS" convention="__stdcall">

<arg name="ProtseqVector">RPC_PROTSEQ_VECTORA  *  *</arg>
</function>

<function name="RpcProtseqVectorFreeW" ret="RPC_STATUS" convention="__stdcall">

<arg name="ProtseqVector">RPC_PROTSEQ_VECTORW  *  *</arg>
</function>
<function name="RpcServerInqBindings" ret="RPC_STATUS" convention="__stdcall">

<arg name="BindingVector">RPC_BINDING_VECTOR  *  *</arg>
</function>
<function name="RpcServerInqIf" ret="RPC_STATUS" convention="__stdcall">
<arg name="IfSpec">RPC_IF_HANDLE</arg>
<arg name="MgrTypeUuid">UUID  *</arg>
<arg name="MgrEpv">void  *  *</arg>
</function>
<function name="RpcServerListen" ret="RPC_STATUS" convention="__stdcall">
<arg name="MinimumCallThreads">unsigned int</arg>
<arg name="MaxCalls">unsigned int</arg>
<arg name="DontWait">unsigned int</arg>
</function>
<function name="RpcServerRegisterIf" ret="RPC_STATUS" convention="__stdcall">
<arg name="IfSpec">RPC_IF_HANDLE</arg>
<arg name="MgrTypeUuid">UUID  *</arg>
<arg name="MgrEpv">void  *</arg>
</function>
<function name="RpcServerRegisterIfEx" ret="RPC_STATUS" convention="__stdcall">
<arg name="IfSpec">RPC_IF_HANDLE</arg>
<arg name="MgrTypeUuid">UUID  *</arg>
<arg name="MgrEpv">void  *</arg>
<arg name="Flags">unsigned int</arg>
<arg name="MaxCalls">unsigned int</arg>
<arg name="IfCallback">RPC_IF_CALLBACK_FN  *</arg>
</function>
<function name="RpcServerRegisterIf2" ret="RPC_STATUS" convention="__stdcall">
<arg name="IfSpec">RPC_IF_HANDLE</arg>
<arg name="MgrTypeUuid">UUID *</arg>
<arg name="MgrEpv">void *</arg>
<arg name="Flags">unsigned int</arg>
<arg name="MaxCalls">unsigned int</arg>
<arg name="MaxRpcSize">unsigned int</arg>
<arg name="IfCallbackFn">RPC_IF_CALLBACK_FN *</arg>
</function>
<function name="RpcServerUnregisterIf" ret="RPC_STATUS" convention="__stdcall">
<arg name="IfSpec">RPC_IF_HANDLE</arg>
<arg name="MgrTypeUuid">UUID  *</arg>
<arg name="WaitForCallsToComplete">unsigned int</arg>
</function>
<function name="RpcServerUnregisterIfEx" ret="RPC_STATUS" convention="__stdcall">
<arg name="IfSpec">RPC_IF_HANDLE</arg>
<arg name="MgrTypeUuid">UUID  *</arg>
<arg name="RundownContextHandles">int</arg>
</function>

<function name="RpcServerUseAllProtseqs" ret="RPC_STATUS" convention="__stdcall">
<arg name="MaxCalls">unsigned int</arg>
<arg name="SecurityDescriptor">void  *</arg>
</function>
<function name="RpcServerUseAllProtseqsEx" ret="RPC_STATUS" convention="__stdcall">
<arg name="MaxCalls">unsigned int</arg>
<arg name="SecurityDescriptor">void  *</arg>
<arg name="Policy">PRPC_POLICY</arg>
</function>
<function name="RpcServerUseAllProtseqsIf" ret="RPC_STATUS" convention="__stdcall">
<arg name="MaxCalls">unsigned int</arg>
<arg name="IfSpec">RPC_IF_HANDLE</arg>
<arg name="SecurityDescriptor">void  *</arg>
</function>
<function name="RpcServerUseAllProtseqsIfEx" ret="RPC_STATUS" convention="__stdcall">
<arg name="MaxCalls">unsigned int</arg>
<arg name="IfSpec">RPC_IF_HANDLE</arg>
<arg name="SecurityDescriptor">void  *</arg>
<arg name="Policy">PRPC_POLICY</arg>
</function>

<function name="RpcServerUseProtseqA" ret="RPC_STATUS" convention="__stdcall">
<arg name="Protseq">RPC_CSTR</arg>
<arg name="MaxCalls">unsigned int</arg>
<arg name="SecurityDescriptor">void  *</arg>
</function>

<function name="RpcServerUseProtseqExA" ret="RPC_STATUS" convention="__stdcall">
<arg name="Protseq">RPC_CSTR</arg>
<arg name="MaxCalls">unsigned int</arg>
<arg name="SecurityDescriptor">void  *</arg>
<arg name="Policy">PRPC_POLICY</arg>
</function>

<function name="RpcServerUseProtseqW" ret="RPC_STATUS" convention="__stdcall">
<arg name="Protseq">RPC_WSTR</arg>
<arg name="MaxCalls">unsigned int</arg>
<arg name="SecurityDescriptor">void  *</arg>
</function>

<function name="RpcServerUseProtseqExW" ret="RPC_STATUS" convention="__stdcall">
<arg name="Protseq">RPC_WSTR</arg>
<arg name="MaxCalls">unsigned int</arg>
<arg name="SecurityDescriptor">void  *</arg>
<arg name="Policy">PRPC_POLICY</arg>
</function>
<function name="RpcServerUseProtseqEpA" ret="RPC_STATUS" convention="__stdcall">
<arg name="Protseq">RPC_CSTR</arg>
<arg name="MaxCalls">unsigned int</arg>
<arg name="Endpoint">RPC_CSTR</arg>
<arg name="SecurityDescriptor">void  *</arg>
</function>

<function name="RpcServerUseProtseqEpExA" ret="RPC_STATUS" convention="__stdcall">
<arg name="Protseq">RPC_CSTR</arg>
<arg name="MaxCalls">unsigned int</arg>
<arg name="Endpoint">RPC_CSTR</arg>
<arg name="SecurityDescriptor">void  *</arg>
<arg name="Policy">PRPC_POLICY</arg>
</function>

<function name="RpcServerUseProtseqEpW" ret="RPC_STATUS" convention="__stdcall">
<arg name="Protseq">RPC_WSTR</arg>
<arg name="MaxCalls">unsigned int</arg>
<arg name="Endpoint">RPC_WSTR</arg>
<arg name="SecurityDescriptor">void  *</arg>
</function>

<function name="RpcServerUseProtseqEpExW" ret="RPC_STATUS" convention="__stdcall">
<arg name="Protseq">RPC_WSTR</arg>
<arg name="MaxCalls">unsigned int</arg>
<arg name="Endpoint">RPC_WSTR</arg>
<arg name="SecurityDescriptor">void  *</arg>
<arg name="Policy">PRPC_POLICY</arg>
</function>

<function name="RpcServerUseProtseqIfA" ret="RPC_STATUS" convention="__stdcall">
<arg name="Protseq">RPC_CSTR</arg>
<arg name="MaxCalls">unsigned int</arg>
<arg name="IfSpec">RPC_IF_HANDLE</arg>
<arg name="SecurityDescriptor">void  *</arg>
</function>

<function name="RpcServerUseProtseqIfExA" ret="RPC_STATUS" convention="__stdcall">
<arg name="Protseq">RPC_CSTR</arg>
<arg name="MaxCalls">unsigned int</arg>
<arg name="IfSpec">RPC_IF_HANDLE</arg>
<arg name="SecurityDescriptor">void  *</arg>
<arg name="Policy">PRPC_POLICY</arg>
</function>

<function name="RpcServerUseProtseqIfW" ret="RPC_STATUS" convention="__stdcall">
<arg name="Protseq">RPC_WSTR</arg>
<arg name="MaxCalls">unsigned int</arg>
<arg name="IfSpec">RPC_IF_HANDLE</arg>
<arg name="SecurityDescriptor">void  *</arg>
</function>

<function name="RpcServerUseProtseqIfExW" ret="RPC_STATUS" convention="__stdcall">
<arg name="Protseq">RPC_WSTR</arg>
<arg name="MaxCalls">unsigned int</arg>
<arg name="IfSpec">RPC_IF_HANDLE</arg>
<arg name="SecurityDescriptor">void  *</arg>
<arg name="Policy">PRPC_POLICY</arg>
</function>

<function name="RpcServerYield" ret="void" convention="__stdcall">

<arg name="void"></arg>
</function>
<function name="RpcMgmtStatsVectorFree" ret="RPC_STATUS" convention="__stdcall">

<arg name="StatsVector">RPC_STATS_VECTOR **</arg>
</function>
<function name="RpcMgmtInqStats" ret="RPC_STATUS" convention="__stdcall">
<arg name="Binding">RPC_BINDING_HANDLE</arg>
<arg name="Statistics">RPC_STATS_VECTOR **</arg>
</function>
<function name="RpcMgmtIsServerListening" ret="RPC_STATUS" convention="__stdcall">

<arg name="Binding">RPC_BINDING_HANDLE</arg>
</function>
<function name="RpcMgmtStopServerListening" ret="RPC_STATUS" convention="__stdcall">

<arg name="Binding">RPC_BINDING_HANDLE</arg>
</function>
<function name="RpcMgmtWaitServerListen" ret="RPC_STATUS" convention="__stdcall">

<arg name="void"></arg>
</function>
<function name="RpcMgmtSetServerStackSize" ret="RPC_STATUS" convention="__stdcall">

<arg name="ThreadStackSize">unsigned long</arg>
</function>
<function name="RpcSsDontSerializeContext" ret="void" convention="__stdcall">

<arg name="void"></arg>
</function>
<function name="RpcMgmtEnableIdleCleanup" ret="RPC_STATUS" convention="__stdcall">

<arg name="void"></arg>
</function>

<function name="RpcMgmtInqIfIds" ret="RPC_STATUS" convention="__stdcall">
<arg name="Binding">RPC_BINDING_HANDLE</arg>
<arg name="IfIdVector">RPC_IF_ID_VECTOR  *  *</arg>
</function>

<function name="RpcIfIdVectorFree" ret="RPC_STATUS" convention="__stdcall">

<arg name="IfIdVector">RPC_IF_ID_VECTOR  *  *</arg>
</function>
<function name="RpcMgmtInqServerPrincNameA" ret="RPC_STATUS" convention="__stdcall">
<arg name="Binding">RPC_BINDING_HANDLE</arg>
<arg name="AuthnSvc">unsigned long</arg>
<arg name="ServerPrincName">RPC_CSTR  *</arg>
</function>

<function name="RpcMgmtInqServerPrincNameW" ret="RPC_STATUS" convention="__stdcall">
<arg name="Binding">RPC_BINDING_HANDLE</arg>
<arg name="AuthnSvc">unsigned long</arg>
<arg name="ServerPrincName">RPC_WSTR  *</arg>
</function>
<function name="RpcServerInqDefaultPrincNameA" ret="RPC_STATUS" convention="__stdcall">
<arg name="AuthnSvc">unsigned long</arg>
<arg name="PrincName">RPC_CSTR  *</arg>
</function>

<function name="RpcServerInqDefaultPrincNameW" ret="RPC_STATUS" convention="__stdcall">
<arg name="AuthnSvc">unsigned long</arg>
<arg name="PrincName">RPC_WSTR  *</arg>
</function>

<function name="RpcEpResolveBinding" ret="RPC_STATUS" convention="__stdcall">
<arg name="Binding">RPC_BINDING_HANDLE</arg>
<arg name="IfSpec">RPC_IF_HANDLE</arg>
</function>
<function name="RpcNsBindingInqEntryNameA" ret="RPC_STATUS" convention="__stdcall">
<arg name="Binding">RPC_BINDING_HANDLE</arg>
<arg name="EntryNameSyntax">unsigned long</arg>
<arg name="EntryName">RPC_CSTR  *</arg>
</function>

<function name="RpcNsBindingInqEntryNameW" ret="RPC_STATUS" convention="__stdcall">
<arg name="Binding">RPC_BINDING_HANDLE</arg>
<arg name="EntryNameSyntax">unsigned long</arg>
<arg name="EntryName">RPC_WSTR  *</arg>
</function>

typedef void  * RPC_AUTH_IDENTITY_HANDLE;
typedef void  * RPC_AUTHZ_HANDLE;
<struct name="_RPC_SECURITY_QOS">
  unsigned long Version;
  unsigned long Capabilities;
  unsigned long IdentityTracking;
  unsigned long ImpersonationType;
} RPC_SECURITY_QOS, *PRPC_SECURITY_QOS;
<struct name="_SEC_WINNT_AUTH_IDENTITY_W">
   unsigned short  *User;
  unsigned long UserLength;
   unsigned short  *Domain;
  unsigned long DomainLength;
   unsigned short  *Password;
  unsigned long PasswordLength;
  unsigned long Flags;
} SEC_WINNT_AUTH_IDENTITY_W, *PSEC_WINNT_AUTH_IDENTITY_W;

<struct name="_SEC_WINNT_AUTH_IDENTITY_A">
   unsigned char  *User;
  unsigned long UserLength;
   unsigned char  *Domain;
  unsigned long DomainLength;
   unsigned char  *Password;
  unsigned long PasswordLength;
  unsigned long Flags;
} SEC_WINNT_AUTH_IDENTITY_A, *PSEC_WINNT_AUTH_IDENTITY_A;

<struct name="_RPC_HTTP_TRANSPORT_CREDENTIALS_W">
    SEC_WINNT_AUTH_IDENTITY_W *TransportCredentials;
    unsigned long Flags;
    unsigned long AuthenticationTarget;
    unsigned long NumberOfAuthnSchemes;
    unsigned long *AuthnSchemes;
    unsigned short  *ServerCertificateSubject;
} RPC_HTTP_TRANSPORT_CREDENTIALS_W, *PRPC_HTTP_TRANSPORT_CREDENTIALS_W;

<struct name="_RPC_HTTP_TRANSPORT_CREDENTIALS_A">
    SEC_WINNT_AUTH_IDENTITY_A *TransportCredentials;
    unsigned long Flags;
    unsigned long AuthenticationTarget;
    unsigned long NumberOfAuthnSchemes;
    unsigned long *AuthnSchemes;
    unsigned char  *ServerCertificateSubject;
} RPC_HTTP_TRANSPORT_CREDENTIALS_A, *PRPC_HTTP_TRANSPORT_CREDENTIALS_A;
<struct name="_RPC_HTTP_TRANSPORT_CREDENTIALS_V2_W">
    SEC_WINNT_AUTH_IDENTITY_W *TransportCredentials;
    unsigned long Flags;
    unsigned long AuthenticationTarget;
    unsigned long NumberOfAuthnSchemes;
     unsigned long *AuthnSchemes;
    unsigned short  *ServerCertificateSubject;
    SEC_WINNT_AUTH_IDENTITY_W *ProxyCredentials;
    unsigned long NumberOfProxyAuthnSchemes;
     unsigned long *ProxyAuthnSchemes;
} RPC_HTTP_TRANSPORT_CREDENTIALS_V2_W, *PRPC_HTTP_TRANSPORT_CREDENTIALS_V2_W;

<struct name="_RPC_HTTP_TRANSPORT_CREDENTIALS_V2_A">
    SEC_WINNT_AUTH_IDENTITY_A *TransportCredentials;
    unsigned long Flags;
    unsigned long AuthenticationTarget;
    unsigned long NumberOfAuthnSchemes;
    unsigned long *AuthnSchemes;
    unsigned char  *ServerCertificateSubject;
    SEC_WINNT_AUTH_IDENTITY_A *ProxyCredentials;
    unsigned long NumberOfProxyAuthnSchemes;
    unsigned long *ProxyAuthnSchemes;
} RPC_HTTP_TRANSPORT_CREDENTIALS_V2_A, *PRPC_HTTP_TRANSPORT_CREDENTIALS_V2_A;
<struct name="_RPC_SECURITY_QOS_V2_W">
  unsigned long Version;
  unsigned long Capabilities;
  unsigned long IdentityTracking;
  unsigned long ImpersonationType;
  unsigned long AdditionalSecurityInfoType;
  union 
      {
      RPC_HTTP_TRANSPORT_CREDENTIALS_W *HttpCredentials;
      } u;
} RPC_SECURITY_QOS_V2_W, *PRPC_SECURITY_QOS_V2_W;

<struct name="_RPC_SECURITY_QOS_V2_A">
  unsigned long Version;
  unsigned long Capabilities;
  unsigned long IdentityTracking;
  unsigned long ImpersonationType;
  unsigned long AdditionalSecurityInfoType;
  union 
      {
      RPC_HTTP_TRANSPORT_CREDENTIALS_A *HttpCredentials;
      } u;
} RPC_SECURITY_QOS_V2_A, *PRPC_SECURITY_QOS_V2_A;

<struct name="_RPC_SECURITY_QOS_V3_W">
  unsigned long Version;
  unsigned long Capabilities;
  unsigned long IdentityTracking;
  unsigned long ImpersonationType;
  unsigned long AdditionalSecurityInfoType;
  union 
      {
      RPC_HTTP_TRANSPORT_CREDENTIALS_W *HttpCredentials;
      } u;
  void *Sid;
} RPC_SECURITY_QOS_V3_W, *PRPC_SECURITY_QOS_V3_W;

<struct name="_RPC_SECURITY_QOS_V3_A">
  unsigned long Version;
  unsigned long Capabilities;
  unsigned long IdentityTracking;
  unsigned long ImpersonationType;
  unsigned long AdditionalSecurityInfoType;
  union 
      {
      RPC_HTTP_TRANSPORT_CREDENTIALS_A *HttpCredentials;
      } u;
  void *Sid;
} RPC_SECURITY_QOS_V3_A, *PRPC_SECURITY_QOS_V3_A;
<struct name="_RPC_SECURITY_QOS_V4_W">
  unsigned long Version;
  unsigned long Capabilities;
  unsigned long IdentityTracking;
  unsigned long ImpersonationType;
  unsigned long AdditionalSecurityInfoType;
  union 
      {
      RPC_HTTP_TRANSPORT_CREDENTIALS_W *HttpCredentials;
      } u;
  void *Sid;
  unsigned int EffectiveOnly;
} RPC_SECURITY_QOS_V4_W, *PRPC_SECURITY_QOS_V4_W;

<struct name="_RPC_SECURITY_QOS_V4_A">
  unsigned long Version;
  unsigned long Capabilities;
  unsigned long IdentityTracking;
  unsigned long ImpersonationType;
  unsigned long AdditionalSecurityInfoType;
  union 
      {
      RPC_HTTP_TRANSPORT_CREDENTIALS_A *HttpCredentials;
      } u;
  void *Sid;
  unsigned int EffectiveOnly;
} RPC_SECURITY_QOS_V4_A, *PRPC_SECURITY_QOS_V4_A;

<struct name="_RPC_BINDING_HANDLE_TEMPLATE_V1_W">
    unsigned long Version;
    unsigned long Flags;
    unsigned long ProtocolSequence;
    unsigned short *NetworkAddress;
    unsigned short *StringEndpoint;
    union
    {
        unsigned short *Reserved;
    } u1;
    UUID ObjectUuid;
} RPC_BINDING_HANDLE_TEMPLATE_V1_W, *PRPC_BINDING_HANDLE_TEMPLATE_V1_W;

<struct name="_RPC_BINDING_HANDLE_TEMPLATE_V1_A">
    unsigned long Version;
    unsigned long Flags;
    unsigned long ProtocolSequence;
    unsigned char *NetworkAddress;
    unsigned char *StringEndpoint;
    union
    {
        unsigned char *Reserved;
    } u1;
    UUID ObjectUuid;
} RPC_BINDING_HANDLE_TEMPLATE_V1_A, *PRPC_BINDING_HANDLE_TEMPLATE_V1_A;

<struct name="_RPC_BINDING_HANDLE_SECURITY_V1_W">
    unsigned long Version;
    unsigned short *ServerPrincName;
    unsigned long AuthnLevel;
    unsigned long AuthnSvc;
    SEC_WINNT_AUTH_IDENTITY_W *AuthIdentity;
    RPC_SECURITY_QOS *SecurityQos;
} RPC_BINDING_HANDLE_SECURITY_V1_W, *PRPC_BINDING_HANDLE_SECURITY_V1_W;
<struct name="_RPC_BINDING_HANDLE_SECURITY_V1_A">
    unsigned long Version;
    unsigned char *ServerPrincName;
    unsigned long AuthnLevel;
    unsigned long AuthnSvc;
    SEC_WINNT_AUTH_IDENTITY_A *AuthIdentity;
    RPC_SECURITY_QOS *SecurityQos;
} RPC_BINDING_HANDLE_SECURITY_V1_A, *PRPC_BINDING_HANDLE_SECURITY_V1_A;
<struct name="_RPC_BINDING_HANDLE_OPTIONS_V1">
    unsigned long Version;
    unsigned long Flags;
    unsigned long ComTimeout;
    unsigned long CallTimeout;
} RPC_BINDING_HANDLE_OPTIONS_V1, *PRPC_BINDING_HANDLE_OPTIONS_V1;

<function name="RpcBindingCreateA" ret="RPC_STATUS" convention="__stdcall">
<arg name="Template">RPC_BINDING_HANDLE_TEMPLATE_V1_A *</arg>
<arg name="Security">RPC_BINDING_HANDLE_SECURITY_V1_A *</arg>
<arg name="Options">RPC_BINDING_HANDLE_OPTIONS_V1 *</arg>
<arg name="Binding">RPC_BINDING_HANDLE *</arg>
</function>
<function name="RpcBindingCreateW" ret="RPC_STATUS" convention="__stdcall">
<arg name="Template">RPC_BINDING_HANDLE_TEMPLATE_V1_W *</arg>
<arg name="Security">RPC_BINDING_HANDLE_SECURITY_V1_W *</arg>
<arg name="Options">RPC_BINDING_HANDLE_OPTIONS_V1 *</arg>
<arg name="Binding">RPC_BINDING_HANDLE *</arg>
</function>

<function name="RpcBindingGetTrainingContextHandle" ret="RPC_STATUS " convention="__stdcall">
<arg name="Binding">RPC_BINDING_HANDLE</arg>
<arg name="ContextHandle">void **</arg>
</function>

<function name="RpcServerInqBindingHandle" ret="RPC_STATUS " convention="__stdcall">

<arg name="Binding">RPC_BINDING_HANDLE *</arg>
</function>
typedef enum _RPC_HTTP_REDIRECTOR_STAGE
{
    RPCHTTP_RS_REDIRECT = 1,
    RPCHTTP_RS_ACCESS_1,
    RPCHTTP_RS_SESSION,
    RPCHTTP_RS_ACCESS_2,
    RPCHTTP_RS_INTERFACE
} RPC_HTTP_REDIRECTOR_STAGE;
typedef RPC_STATUS
(__stdcall * RPC_NEW_HTTP_PROXY_CHANNEL) (
     RPC_HTTP_REDIRECTOR_STAGE RedirectorStage,
     RPC_WSTR ServerName,
     RPC_WSTR ServerPort,
     RPC_WSTR RemoteUser,
     RPC_WSTR AuthType,
     void  * ResourceUuid,
     void  * Metadata,
     void  * SessionId,
     void  * Interface,
     void  * Reserved,
     unsigned long Flags,
     RPC_WSTR  * NewServerName,
<arg name="NewServerPort">RPC_WSTR  *</arg>
</function>
    

typedef void
(__stdcall * RPC_HTTP_PROXY_FREE_STRING) (
<arg name="String">RPC_WSTR</arg>
</function>

<function name="RpcImpersonateClient" ret="RPC_STATUS" convention="__stdcall">

<arg name="BindingHandle">RPC_BINDING_HANDLE</arg>
</function>

<function name="RpcRevertToSelfEx" ret="RPC_STATUS" convention="__stdcall">

<arg name="BindingHandle">RPC_BINDING_HANDLE</arg>
</function>

<function name="RpcRevertToSelf" ret="RPC_STATUS" convention="__stdcall">

<arg name="void"></arg>
</function>
<function name="RpcBindingInqAuthClientA" ret="RPC_STATUS" convention="__stdcall">
<arg name="ClientBinding">RPC_BINDING_HANDLE</arg>
<arg name="Privs">RPC_AUTHZ_HANDLE  *</arg>
<arg name="ServerPrincName">RPC_CSTR  *</arg>
<arg name="AuthnLevel">unsigned long  *</arg>
<arg name="AuthnSvc">unsigned long  *</arg>
<arg name="AuthzSvc">unsigned long  *</arg>
</function>

<function name="RpcBindingInqAuthClientW" ret="RPC_STATUS" convention="__stdcall">
<arg name="ClientBinding">RPC_BINDING_HANDLE</arg>
<arg name="Privs">RPC_AUTHZ_HANDLE  *</arg>
<arg name="ServerPrincName">RPC_WSTR  *</arg>
<arg name="AuthnLevel">unsigned long  *</arg>
<arg name="AuthnSvc">unsigned long  *</arg>
<arg name="AuthzSvc">unsigned long  *</arg>
</function>

<function name="RpcBindingInqAuthClientExA" ret="RPC_STATUS" convention="__stdcall">
<arg name="ClientBinding">RPC_BINDING_HANDLE</arg>
<arg name="Privs">RPC_AUTHZ_HANDLE  *</arg>
<arg name="ServerPrincName">RPC_CSTR  *</arg>
<arg name="AuthnLevel">unsigned long  *</arg>
<arg name="AuthnSvc">unsigned long  *</arg>
<arg name="AuthzSvc">unsigned long  *</arg>
<arg name="Flags">unsigned long            </arg>
</function>

<function name="RpcBindingInqAuthClientExW" ret="RPC_STATUS" convention="__stdcall">
<arg name="ClientBinding">RPC_BINDING_HANDLE</arg>
<arg name="Privs">RPC_AUTHZ_HANDLE  *</arg>
<arg name="ServerPrincName">RPC_WSTR  *</arg>
<arg name="AuthnLevel">unsigned long  *</arg>
<arg name="AuthnSvc">unsigned long  *</arg>
<arg name="AuthzSvc">unsigned long  *</arg>
<arg name="Flags">unsigned long            </arg>
</function>

<function name="RpcBindingInqAuthInfoA" ret="RPC_STATUS" convention="__stdcall">
<arg name="Binding">RPC_BINDING_HANDLE</arg>
<arg name="ServerPrincName">RPC_CSTR  *</arg>
<arg name="AuthnLevel">unsigned long  *</arg>
<arg name="AuthnSvc">unsigned long  *</arg>
<arg name="AuthIdentity">RPC_AUTH_IDENTITY_HANDLE  *</arg>
<arg name="AuthzSvc">unsigned long  *</arg>
</function>

<function name="RpcBindingInqAuthInfoW" ret="RPC_STATUS" convention="__stdcall">
<arg name="Binding">RPC_BINDING_HANDLE</arg>
<arg name="ServerPrincName">RPC_WSTR  *</arg>
<arg name="AuthnLevel">unsigned long  *</arg>
<arg name="AuthnSvc">unsigned long  *</arg>
<arg name="AuthIdentity">RPC_AUTH_IDENTITY_HANDLE  *</arg>
<arg name="AuthzSvc">unsigned long  *</arg>
</function>

<function name="RpcBindingSetAuthInfoA" ret="RPC_STATUS" convention="__stdcall">
<arg name="Binding">RPC_BINDING_HANDLE</arg>
<arg name="ServerPrincName">RPC_CSTR</arg>
<arg name="AuthnLevel">unsigned long</arg>
<arg name="AuthnSvc">unsigned long</arg>
<arg name="AuthIdentity">RPC_AUTH_IDENTITY_HANDLE</arg>
<arg name="AuthzSvc">unsigned long</arg>
</function>

<function name="RpcBindingSetAuthInfoExA" ret="RPC_STATUS" convention="__stdcall">
<arg name="Binding">RPC_BINDING_HANDLE</arg>
<arg name="ServerPrincName">RPC_CSTR</arg>
<arg name="AuthnLevel">unsigned long</arg>
<arg name="AuthnSvc">unsigned long</arg>
<arg name="AuthIdentity">RPC_AUTH_IDENTITY_HANDLE</arg>
<arg name="AuthzSvc">unsigned long</arg>
<arg name="SecurityQos">RPC_SECURITY_QOS *</arg>
</function>

<function name="RpcBindingSetAuthInfoW" ret="RPC_STATUS" convention="__stdcall">
<arg name="Binding">RPC_BINDING_HANDLE</arg>
<arg name="ServerPrincName">RPC_WSTR</arg>
<arg name="AuthnLevel">unsigned long</arg>
<arg name="AuthnSvc">unsigned long</arg>
<arg name="AuthIdentity">RPC_AUTH_IDENTITY_HANDLE</arg>
<arg name="AuthzSvc">unsigned long</arg>
</function>

<function name="RpcBindingSetAuthInfoExW" ret="RPC_STATUS" convention="__stdcall">
<arg name="Binding">RPC_BINDING_HANDLE</arg>
<arg name="ServerPrincName">RPC_WSTR</arg>
<arg name="AuthnLevel">unsigned long</arg>
<arg name="AuthnSvc">unsigned long</arg>
<arg name="AuthIdentity">RPC_AUTH_IDENTITY_HANDLE</arg>
<arg name="AuthzSvc">unsigned long</arg>
<arg name="SecurityQOS">RPC_SECURITY_QOS *</arg>
</function>

<function name="RpcBindingInqAuthInfoExA" ret="RPC_STATUS" convention="__stdcall">
<arg name="Binding">RPC_BINDING_HANDLE</arg>
<arg name="ServerPrincName">RPC_CSTR  *</arg>
<arg name="AuthnLevel">unsigned long  *</arg>
<arg name="AuthnSvc">unsigned long  *</arg>
<arg name="AuthIdentity">RPC_AUTH_IDENTITY_HANDLE  *</arg>
<arg name="AuthzSvc">unsigned long  *</arg>
<arg name="RpcQosVersion">unsigned long</arg>
<arg name="SecurityQOS">RPC_SECURITY_QOS *</arg>
</function>

<function name="RpcBindingInqAuthInfoExW" ret="RPC_STATUS" convention="__stdcall">
<arg name="Binding">RPC_BINDING_HANDLE</arg>
<arg name="ServerPrincName">RPC_WSTR  *</arg>
<arg name="AuthnLevel">unsigned long  *</arg>
<arg name="AuthnSvc">unsigned long  *</arg>
<arg name="AuthIdentity">RPC_AUTH_IDENTITY_HANDLE  *</arg>
<arg name="AuthzSvc">unsigned long  *</arg>
<arg name="RpcQosVersion">unsigned long</arg>
<arg name="SecurityQOS">RPC_SECURITY_QOS *</arg>
</function>

typedef void
(__stdcall * RPC_AUTH_KEY_RETRIEVAL_FN) (
     void  * Arg,
     RPC_WSTR ServerPrincName,
     unsigned long KeyVer,
     void  *  * Key,
<arg name="Status">RPC_STATUS  *</arg>
</function>

<function name="RpcServerCompleteSecurityCallback" ret="RPC_STATUS" convention="__stdcall">
<arg name="BindingHandle">RPC_BINDING_HANDLE</arg>
<arg name="Status">RPC_STATUS</arg>
</function>

<function name="RpcServerRegisterAuthInfoA" ret="RPC_STATUS" convention="__stdcall">
<arg name="ServerPrincName">RPC_CSTR</arg>
<arg name="AuthnSvc">unsigned long</arg>
<arg name="GetKeyFn">RPC_AUTH_KEY_RETRIEVAL_FN</arg>
<arg name="Arg">void  *</arg>
</function>

<function name="RpcServerRegisterAuthInfoW" ret="RPC_STATUS" convention="__stdcall">
<arg name="ServerPrincName">RPC_WSTR</arg>
<arg name="AuthnSvc">unsigned long</arg>
<arg name="GetKeyFn">RPC_AUTH_KEY_RETRIEVAL_FN</arg>
<arg name="Arg">void  *</arg>
</function>
<struct>
    unsigned char  * UserName;
    unsigned char  * ComputerName;
    unsigned short Privilege;
    unsigned long AuthFlags;
} RPC_CLIENT_INFORMATION1,  * PRPC_CLIENT_INFORMATION1;
<function name="RpcBindingServerFromClient" ret="RPC_STATUS" convention="__stdcall">
<arg name="ClientBinding">RPC_BINDING_HANDLE</arg>
<arg name="ServerBinding">RPC_BINDING_HANDLE  *</arg>
</function>

<function name="RpcRaiseException" noreturn="true" ret="void" convention="__stdcall">
<arg name="exception">RPC_STATUS</arg>
</function>

<function name="RpcTestCancel" ret="RPC_STATUS" convention="__stdcall">
<arg name="void"></arg>
</function>

<function name="RpcServerTestCancel" ret="RPC_STATUS" convention="__stdcall">

<arg name="BindingHandle">RPC_BINDING_HANDLE</arg>
</function>

<function name="RpcCancelThread" ret="RPC_STATUS" convention="__stdcall">
<arg name="Thread">void *</arg>
</function>

<function name="RpcCancelThreadEx" ret="RPC_STATUS" convention="__stdcall">
<arg name="Thread">void *</arg>
<arg name="Timeout">long</arg>
</function>
<function name="UuidCreate" ret="RPC_STATUS" convention="__stdcall">

<arg name="Uuid">UUID  *</arg>
</function>
<function name="UuidCreateSequential" ret="RPC_STATUS" convention="__stdcall">

<arg name="Uuid">UUID  *</arg>
</function>

<function name="UuidToStringA" ret="RPC_STATUS" convention="__stdcall">
<arg name="Uuid">const UUID  *</arg>
<arg name="StringUuid">RPC_CSTR  *</arg>
</function>
<function name="UuidFromStringA" ret="RPC_STATUS" convention="__stdcall">
<arg name="StringUuid">RPC_CSTR</arg>
<arg name="Uuid">UUID  *</arg>
</function>
<function name="UuidToStringW" ret="RPC_STATUS" convention="__stdcall">
<arg name="Uuid">const UUID  *</arg>
<arg name="StringUuid">RPC_WSTR  *</arg>
</function>
<function name="UuidFromStringW" ret="RPC_STATUS" convention="__stdcall">
<arg name="StringUuid">RPC_WSTR</arg>
<arg name="Uuid">UUID  *</arg>
</function>

<function name="UuidCompare" ret="signed int" convention="__stdcall">
<arg name="Uuid1">UUID  *</arg>
<arg name="Uuid2">UUID  *</arg>
<arg name="Status">RPC_STATUS  *</arg>
</function>

<function name="UuidCreateNil" ret="RPC_STATUS" convention="__stdcall">

<arg name="NilUuid">UUID  *</arg>
</function>

<function name="UuidEqual" ret="int" convention="__stdcall">
<arg name="Uuid1">UUID  *</arg>
<arg name="Uuid2">UUID  *</arg>
<arg name="Status">RPC_STATUS  *</arg>
</function>

<function name="UuidHash" ret="unsigned short" convention="__stdcall">
<arg name="Uuid">UUID  *</arg>
<arg name="Status">RPC_STATUS  *</arg>
</function>

<function name="UuidIsNil" ret="int" convention="__stdcall">
<arg name="Uuid">UUID  *</arg>
<arg name="Status">RPC_STATUS  *</arg>
</function>
<function name="RpcEpRegisterNoReplaceA" ret="RPC_STATUS" convention="__stdcall">
<arg name="IfSpec">RPC_IF_HANDLE</arg>
<arg name="BindingVector">RPC_BINDING_VECTOR *</arg>
<arg name="UuidVector">UUID_VECTOR *</arg>
<arg name="Annotation">RPC_CSTR</arg>
</function>

<function name="RpcEpRegisterNoReplaceW" ret="RPC_STATUS" convention="__stdcall">
<arg name="IfSpec">RPC_IF_HANDLE</arg>
<arg name="BindingVector">RPC_BINDING_VECTOR *</arg>
<arg name="UuidVector">UUID_VECTOR *</arg>
<arg name="Annotation">RPC_WSTR</arg>
</function>

<function name="RpcEpRegisterA" ret="RPC_STATUS" convention="__stdcall">
<arg name="IfSpec">RPC_IF_HANDLE</arg>
<arg name="BindingVector">RPC_BINDING_VECTOR *</arg>
<arg name="UuidVector">UUID_VECTOR *</arg>
<arg name="Annotation">RPC_CSTR</arg>
</function>

<function name="RpcEpRegisterW" ret="RPC_STATUS" convention="__stdcall">
<arg name="IfSpec">RPC_IF_HANDLE</arg>
<arg name="BindingVector">RPC_BINDING_VECTOR *</arg>
<arg name="UuidVector">UUID_VECTOR *</arg>
<arg name="Annotation">RPC_WSTR</arg>
</function>
<function name="RpcEpUnregister" ret="RPC_STATUS" convention="__stdcall">
<arg name="IfSpec">RPC_IF_HANDLE</arg>
<arg name="BindingVector">RPC_BINDING_VECTOR *</arg>
<arg name="UuidVector">UUID_VECTOR *</arg>
</function>
<function name="DceErrorInqTextA" ret="RPC_STATUS" convention="__stdcall">
<arg name="RpcStatus">RPC_STATUS</arg>
<arg name="ErrorText">RPC_CSTR</arg>
</function>

<function name="DceErrorInqTextW" ret="RPC_STATUS" convention="__stdcall">
<arg name="RpcStatus">RPC_STATUS</arg>
<arg name="ErrorText">RPC_WSTR</arg>
</function>

typedef I_RPC_HANDLE * RPC_EP_INQ_HANDLE;
<function name="RpcMgmtEpEltInqBegin" ret="RPC_STATUS" convention="__stdcall">
<arg name="EpBinding">RPC_BINDING_HANDLE</arg>
<arg name="InquiryType">unsigned long</arg>
<arg name="IfId">RPC_IF_ID  *</arg>
<arg name="VersOption">unsigned long</arg>
<arg name="ObjectUuid">UUID  *</arg>
<arg name="InquiryContext">RPC_EP_INQ_HANDLE  *</arg>
</function>

<function name="RpcMgmtEpEltInqDone" ret="RPC_STATUS" convention="__stdcall">

<arg name="InquiryContext">RPC_EP_INQ_HANDLE  *</arg>
</function>
<function name="RpcMgmtEpEltInqNextA" ret="RPC_STATUS" convention="__stdcall">
<arg name="InquiryContext">RPC_EP_INQ_HANDLE</arg>
<arg name="IfId">RPC_IF_ID  *</arg>
<arg name="Binding">RPC_BINDING_HANDLE  *</arg>
<arg name="ObjectUuid">UUID  *</arg>
<arg name="Annotation">RPC_CSTR  *</arg>
</function>

<function name="RpcMgmtEpEltInqNextW" ret="RPC_STATUS" convention="__stdcall">
<arg name="InquiryContext">RPC_EP_INQ_HANDLE</arg>
<arg name="IfId">RPC_IF_ID  *</arg>
<arg name="Binding">RPC_BINDING_HANDLE  *</arg>
<arg name="ObjectUuid">UUID  *</arg>
<arg name="Annotation">RPC_WSTR  *</arg>
</function>

<function name="RpcMgmtEpUnregister" ret="RPC_STATUS" convention="__stdcall">
<arg name="EpBinding">RPC_BINDING_HANDLE</arg>
<arg name="IfId">RPC_IF_ID  *</arg>
<arg name="Binding">RPC_BINDING_HANDLE</arg>
<arg name="ObjectUuid">UUID  *</arg>
</function>

typedef int
(__stdcall * RPC_MGMT_AUTHORIZATION_FN) (
     RPC_BINDING_HANDLE ClientBinding,
     unsigned long RequestedMgmtOperation,
<arg name="Status">RPC_STATUS  *</arg>
</function>
<function name="RpcMgmtSetAuthorizationFn" ret="RPC_STATUS" convention="__stdcall">

<arg name="AuthorizationFn">RPC_MGMT_AUTHORIZATION_FN</arg>
</function>
<function name="RpcExceptionFilter" ret="int" convention="__stdcall">

<arg name="ExceptionCode">unsigned long</arg>
</function>
#line 1 "\\program files\\Microsoft SDKs\\Windows\\v6.0A\\Include\\rpcdcep.h"

#pragma once

<struct name="_RPC_VERSION">
    unsigned short MajorVersion;
    unsigned short MinorVersion;
} RPC_VERSION;

<struct name="_RPC_SYNTAX_IDENTIFIER">
<field name="SyntaxGUID">GUID</field>
<field name="SyntaxVersion">RPC_VERSION</field>
</struct>
<typedefprev id="RPC_SYNTAX_IDENTIFIER"/>
<typedefptrprev id="PRPC_SYNTAX_IDENTIFIER"/>

<struct name="_RPC_MESSAGE">
<field name="Handle">RPC_BINDING_HANDLE</field>
    unsigned long DataRepresentation;
    void  * Buffer;
    unsigned int BufferLength;
    unsigned int ProcNum;
    PRPC_SYNTAX_IDENTIFIER TransferSyntax;
    void  * RpcInterfaceInformation;
    void  * ReservedForRuntime;
    void  * ManagerEpv;
    void  * ImportContext;
    unsigned long RpcFlags;
} RPC_MESSAGE,  * PRPC_MESSAGE;
typedef RPC_STATUS
__stdcall RPC_FORWARD_FUNCTION(
                        UUID              * InterfaceId,
                        RPC_VERSION       * InterfaceVersion,
                        UUID              * ObjectId,
                        unsigned char          * Rpcpro,
                        void  *  * ppDestEndpoint);

enum RPC_ADDRESS_CHANGE_TYPE
{
    PROTOCOL_NOT_LOADED = 1,
    PROTOCOL_LOADED,
    PROTOCOL_ADDRESS_CHANGE
};

typedef void
__stdcall RPC_ADDRESS_CHANGE_FN(
<arg name="arg">void *</arg>
</function>

typedef
void
(__stdcall  * RPC_DISPATCH_FUNCTION) (
<arg name="Message">PRPC_MESSAGE</arg>
</function>

<struct>
    unsigned int DispatchTableCount;
    RPC_DISPATCH_FUNCTION  * DispatchTable;
    LONG_PTR                          Reserved;
} RPC_DISPATCH_TABLE,  * PRPC_DISPATCH_TABLE;

<struct name="_RPC_PROTSEQ_ENDPOINT">
    unsigned char  * RpcProtocolSequence;
    unsigned char  * Endpoint;
} RPC_PROTSEQ_ENDPOINT,  * PRPC_PROTSEQ_ENDPOINT;

<struct name="_RPC_SERVER_INTERFACE">
    unsigned int Length;
    RPC_SYNTAX_IDENTIFIER InterfaceId;
    RPC_SYNTAX_IDENTIFIER TransferSyntax;
    PRPC_DISPATCH_TABLE DispatchTable;
    unsigned int RpcProtseqEndpointCount;
    PRPC_PROTSEQ_ENDPOINT RpcProtseqEndpoint;
    void  *DefaultManagerEpv;
    void const  *InterpreterInfo;
    unsigned int Flags ;
} RPC_SERVER_INTERFACE,  * PRPC_SERVER_INTERFACE;

<struct name="_RPC_CLIENT_INTERFACE">
    unsigned int Length;
    RPC_SYNTAX_IDENTIFIER   InterfaceId;
    RPC_SYNTAX_IDENTIFIER   TransferSyntax;
    PRPC_DISPATCH_TABLE     DispatchTable;
    unsigned int            RpcProtseqEndpointCount;
    PRPC_PROTSEQ_ENDPOINT   RpcProtseqEndpoint;
    ULONG_PTR               Reserved;
    void const  *  InterpreterInfo;
    unsigned int Flags ;
} RPC_CLIENT_INTERFACE,  * PRPC_CLIENT_INTERFACE;
<function name="I_RpcNegotiateTransferSyntax" ret="RPC_STATUS" convention="__stdcall">

<arg name="Message">RPC_MESSAGE  *</arg>
</function>

<function name="I_RpcGetBuffer" ret="RPC_STATUS" convention="__stdcall">

<arg name="Message">RPC_MESSAGE  *</arg>
</function>

<function name="I_RpcGetBufferWithObject" ret="RPC_STATUS" convention="__stdcall">
<arg name="Message">RPC_MESSAGE  *</arg>
<arg name="ObjectUuid">UUID *</arg>
</function>

<function name="I_RpcSendReceive" ret="RPC_STATUS" convention="__stdcall">

<arg name="Message">RPC_MESSAGE  *</arg>
</function>

<function name="I_RpcFreeBuffer" ret="RPC_STATUS" convention="__stdcall">

<arg name="Message">RPC_MESSAGE  *</arg>
</function>

<function name="I_RpcSend" ret="RPC_STATUS" convention="__stdcall">

<arg name="Message">PRPC_MESSAGE</arg>
</function>

<function name="I_RpcReceive" ret="RPC_STATUS" convention="__stdcall">
<arg name="Message">PRPC_MESSAGE</arg>
<arg name="Size">unsigned int</arg>
</function>

<function name="I_RpcFreePipeBuffer" ret="RPC_STATUS" convention="__stdcall">

<arg name="Message">RPC_MESSAGE  *</arg>
</function>

<function name="I_RpcReallocPipeBuffer" ret="RPC_STATUS" convention="__stdcall">
<arg name="Message">PRPC_MESSAGE</arg>
<arg name="NewSize">unsigned int</arg>
</function>

typedef void * I_RPC_MUTEX;

<function name="I_RpcRequestMutex" ret="void" convention="__stdcall">

<arg name="Mutex">I_RPC_MUTEX *</arg>
</function>

<function name="I_RpcClearMutex" ret="void" convention="__stdcall">

<arg name="Mutex">I_RPC_MUTEX</arg>
</function>

<function name="I_RpcDeleteMutex" ret="void" convention="__stdcall">

<arg name="Mutex">I_RPC_MUTEX</arg>
</function>

<function name="I_RpcAllocate" ret="void  *" convention="__stdcall">

<arg name="Size">unsigned int</arg>
</function>

<function name="I_RpcFree" ret="void" convention="__stdcall">

<arg name="Object">void  *</arg>
</function>

<function name="I_RpcPauseExecution" ret="void" convention="__stdcall">

<arg name="Milliseconds">unsigned long</arg>
</function>

<function name="I_RpcGetExtendedError" ret="RPC_STATUS" convention="__stdcall">

<arg name="void"></arg>
</function>

typedef
void
(__stdcall  * PRPC_RUNDOWN) (
<arg name="AssociationContext">void  *</arg>
</function>

<function name="I_RpcMonitorAssociation" ret="RPC_STATUS" convention="__stdcall">
<arg name="Handle">RPC_BINDING_HANDLE</arg>
<arg name="RundownRoutine">PRPC_RUNDOWN</arg>
<arg name="Context">void *</arg>
</function>

<function name="I_RpcStopMonitorAssociation" ret="RPC_STATUS" convention="__stdcall">

<arg name="Handle">RPC_BINDING_HANDLE</arg>
</function>

<function name="I_RpcGetCurrentCallHandle" ret="RPC_BINDING_HANDLE" convention="__stdcall">
<arg name="void"></arg>
</function>

<function name="I_RpcGetAssociationContext" ret="RPC_STATUS" convention="__stdcall">
<arg name="BindingHandle">RPC_BINDING_HANDLE</arg>
<arg name="AssociationContext">void  *  *</arg>
</function>

<function name="I_RpcGetServerContextList" ret="void *" convention="__stdcall">

<arg name="BindingHandle">RPC_BINDING_HANDLE</arg>
</function>

<function name="I_RpcSetServerContextList" ret="void" convention="__stdcall">
<arg name="BindingHandle">RPC_BINDING_HANDLE</arg>
<arg name="ServerContextList">void *</arg>
</function>

<function name="I_RpcNsInterfaceExported" ret="RPC_STATUS" convention="__stdcall">
<arg name="EntryNameSyntax">unsigned long</arg>

     unsigned short *EntryName,
<arg name="RpcInterfaceInformation">RPC_SERVER_INTERFACE *</arg>
</function>

<function name="I_RpcNsInterfaceUnexported" ret="RPC_STATUS" convention="__stdcall">
<arg name="EntryNameSyntax">unsigned long</arg>

     unsigned short *EntryName,
<arg name="RpcInterfaceInformation">RPC_SERVER_INTERFACE *</arg>
</function>

<function name="I_RpcBindingToStaticStringBindingW" ret="RPC_STATUS" convention="__stdcall">
<arg name="Binding">RPC_BINDING_HANDLE</arg>
<arg name="StringBinding">unsigned short **</arg>
</function>

<function name="I_RpcBindingInqSecurityContext" ret="RPC_STATUS" convention="__stdcall">
<arg name="Binding">RPC_BINDING_HANDLE</arg>
<arg name="SecurityContextHandle">void **</arg>
</function>
<function name="I_RpcBindingInqSecurityContextKeyInfo" ret="RPC_STATUS" convention="__stdcall">
<arg name="Binding">RPC_BINDING_HANDLE</arg>
<arg name="KeyInfo">void *</arg>
</function>
<function name="I_RpcBindingInqWireIdForSnego" ret="RPC_STATUS" convention="__stdcall">
<arg name="Binding">RPC_BINDING_HANDLE</arg>
<arg name="WireId">RPC_CSTR</arg>
</function>
<function name="I_RpcBindingInqMarshalledTargetInfo" ret="RPC_STATUS" convention="__stdcall">
<arg name="Binding">RPC_BINDING_HANDLE</arg>
<arg name="MarshalledTargetInfoSize">unsigned long *</arg>
<arg name="MarshalledTargetInfo">RPC_CSTR *</arg>
</function>

<function name="I_RpcBindingInqLocalClientPID" ret="RPC_STATUS" convention="__stdcall">
<arg name="Binding">RPC_BINDING_HANDLE</arg>
<arg name="Pid">unsigned long *</arg>
</function>

<function name="I_RpcBindingHandleToAsyncHandle" ret="RPC_STATUS" convention="__stdcall">
<arg name="Binding">RPC_BINDING_HANDLE</arg>
<arg name="AsyncHandle">void **</arg>
</function>

<function name="I_RpcNsBindingSetEntryNameW" ret="RPC_STATUS" convention="__stdcall">
<arg name="Binding">RPC_BINDING_HANDLE</arg>
<arg name="EntryNameSyntax">unsigned long</arg>
<arg name="EntryName">RPC_WSTR</arg>
</function>

<function name="I_RpcNsBindingSetEntryNameA" ret="RPC_STATUS" convention="__stdcall">
<arg name="Binding">RPC_BINDING_HANDLE</arg>
<arg name="EntryNameSyntax">unsigned long</arg>
<arg name="EntryName">RPC_CSTR</arg>
</function>

<function name="I_RpcServerUseProtseqEp2A" ret="RPC_STATUS" convention="__stdcall">
<arg name="NetworkAddress">RPC_CSTR</arg>
<arg name="Protseq">RPC_CSTR</arg>
<arg name="MaxCalls">unsigned int</arg>
<arg name="Endpoint">RPC_CSTR</arg>
<arg name="SecurityDescriptor">void  *</arg>
<arg name="Policy">void *</arg>
</function>

<function name="I_RpcServerUseProtseqEp2W" ret="RPC_STATUS" convention="__stdcall">
<arg name="NetworkAddress">RPC_WSTR</arg>
<arg name="Protseq">RPC_WSTR</arg>
<arg name="MaxCalls">unsigned int</arg>
<arg name="Endpoint">RPC_WSTR</arg>
<arg name="SecurityDescriptor">void  *</arg>
<arg name="Policy">void *</arg>
</function>

<function name="I_RpcServerUseProtseq2W" ret="RPC_STATUS" convention="__stdcall">
<arg name="NetworkAddress">RPC_WSTR</arg>
<arg name="Protseq">RPC_WSTR</arg>
<arg name="MaxCalls">unsigned int</arg>
<arg name="SecurityDescriptor">void  *</arg>
<arg name="Policy">void *</arg>
</function>

<function name="I_RpcServerUseProtseq2A" ret="RPC_STATUS" convention="__stdcall">
<arg name="NetworkAddress">RPC_CSTR</arg>
<arg name="Protseq">RPC_CSTR</arg>
<arg name="MaxCalls">unsigned int</arg>
<arg name="SecurityDescriptor">void  *</arg>
<arg name="Policy">void *</arg>
</function>

<function name="I_RpcServerStartService" ret="RPC_STATUS" convention="__stdcall">
<arg name="Protseq">RPC_WSTR</arg>
<arg name="Endpoint">RPC_WSTR</arg>
<arg name="IfSpec">RPC_IF_HANDLE</arg>
</function>
<function name="I_RpcBindingInqDynamicEndpointW" ret="RPC_STATUS" convention="__stdcall">
<arg name="Binding">RPC_BINDING_HANDLE</arg>
<arg name="DynamicEndpoint">RPC_WSTR  *</arg>
</function>

<function name="I_RpcBindingInqDynamicEndpointA" ret="RPC_STATUS" convention="__stdcall">
<arg name="Binding">RPC_BINDING_HANDLE</arg>
<arg name="DynamicEndpoint">RPC_CSTR  *</arg>
</function>
<function name="I_RpcServerCheckClientRestriction" ret="RPC_STATUS" convention="__stdcall">

<arg name="Context">RPC_BINDING_HANDLE</arg>
</function>
<function name="I_RpcBindingInqTransportType" ret="RPC_STATUS" convention="__stdcall">
<arg name="Binding">RPC_BINDING_HANDLE</arg>
<arg name="Type">unsigned int  *</arg>
</function>

<struct name="_RPC_TRANSFER_SYNTAX">
<field name="Uuid">UUID</field>
    unsigned short VersMajor;
    unsigned short VersMinor;
} RPC_TRANSFER_SYNTAX;

<function name="I_RpcIfInqTransferSyntaxes" ret="RPC_STATUS" convention="__stdcall">
<arg name="RpcIfHandle">RPC_IF_HANDLE</arg>
<arg name="TransferSyntaxes">RPC_TRANSFER_SYNTAX  *</arg>
<arg name="TransferSyntaxSize">unsigned int</arg>
<arg name="TransferSyntaxCount">unsigned int  *</arg>
</function>

<function name="I_UuidCreate" ret="RPC_STATUS" convention="__stdcall">

<arg name="Uuid">UUID  *</arg>
</function>

<function name="I_RpcBindingCopy" ret="RPC_STATUS" convention="__stdcall">
<arg name="SourceBinding">RPC_BINDING_HANDLE</arg>
<arg name="DestinationBinding">RPC_BINDING_HANDLE  *</arg>
</function>

<function name="I_RpcBindingIsClientLocal" ret="RPC_STATUS" convention="__stdcall">
<arg name="BindingHandle">RPC_BINDING_HANDLE</arg>
<arg name="ClientLocalFlag">unsigned int  *</arg>
</function>

<function name="I_RpcBindingInqConnId" ret="RPC_STATUS" convention="__stdcall">
<arg name="Binding">RPC_BINDING_HANDLE</arg>

     void **ConnId,
<arg name="pfFirstCall">int *</arg>
</function>

<function name="I_RpcBindingCreateNP" ret="RPC_STATUS" convention="__stdcall">
<arg name="ServerName">RPC_WSTR</arg>
<arg name="ServiceName">RPC_WSTR</arg>
<arg name="NetworkOptions">RPC_WSTR</arg>
<arg name="Binding">RPC_BINDING_HANDLE *</arg>
</function>

<function name="I_RpcSsDontSerializeContext" ret="void" convention="__stdcall">

<arg name="void"></arg>
</function>

<function name="I_RpcLaunchDatagramReceiveThread" ret="RPC_STATUS" convention="__stdcall">
<arg name="pAddress">void  *</arg>
</function>

<function name="I_RpcServerRegisterForwardFunction" ret="RPC_STATUS" convention="__stdcall">

<arg name="pForwardFunction">RPC_FORWARD_FUNCTION  *</arg>
</function>

<function name="I_RpcServerInqAddressChangeFn" ret="RPC_ADDRESS_CHANGE_FN *" convention="__stdcall">
<arg name="void"></arg>
</function>

<function name="I_RpcServerSetAddressChangeFn" ret="RPC_STATUS" convention="__stdcall">
<arg name="pAddressChangeFn">RPC_ADDRESS_CHANGE_FN *</arg>
</function>

<function name="I_RpcServerInqLocalConnAddress" ret="RPC_STATUS" convention="__stdcall">
<arg name="Binding">RPC_BINDING_HANDLE</arg>

      void *Buffer,
      unsigned long *BufferSize,
<arg name="AddressFormat">unsigned long *</arg>
</function>

<function name="I_RpcServerInqRemoteConnAddress" ret="RPC_STATUS" convention="__stdcall">
<arg name="Binding">RPC_BINDING_HANDLE</arg>

      void *Buffer,
      unsigned long *BufferSize,
<arg name="AddressFormat">unsigned long *</arg>
</function>

<function name="I_RpcSessionStrictContextHandle" ret="void" convention="__stdcall">

<arg name="void"></arg>
</function>

<function name="I_RpcTurnOnEEInfoPropagation" ret="RPC_STATUS" convention="__stdcall">

<arg name="void"></arg>
</function>
<function name="I_RpcConnectionInqSockBuffSize" ret="RPC_STATUS" convention="__stdcall">
<arg name="RecvBuffSize">unsigned long  *</arg>
<arg name="SendBuffSize">unsigned long  *</arg>
</function>

<function name="I_RpcConnectionSetSockBuffSize" ret="RPC_STATUS" convention="__stdcall">
<arg name="RecvBuffSize">unsigned long</arg>
<arg name="SendBuffSize">unsigned long</arg>
</function>

typedef
void
(*RPCLT_PDU_FILTER_FUNC) (
     void *Buffer,
     unsigned int BufferLength,
<arg name="fDatagram">int</arg>
</function>

typedef
void
(__cdecl *RPC_SETFILTER_FUNC) (
<arg name="pfnFilter">RPCLT_PDU_FILTER_FUNC</arg>
</function>
<function name="I_RpcServerStartListening" ret="RPC_STATUS" convention="__stdcall">
<arg name="hWnd">void *</arg>
</function>

<function name="I_RpcServerStopListening" ret="RPC_STATUS" convention="__stdcall">
<arg name="void"></arg>
</function>

typedef RPC_STATUS (*RPC_BLOCKING_FN) (
     void * hWnd,
     void * Context,
<arg name="hSyncEvent">void *</arg>
</function>

<function name="I_RpcBindingSetAsync" ret="RPC_STATUS" convention="__stdcall">
<arg name="Binding">RPC_BINDING_HANDLE</arg>
<arg name="BlockingFn">RPC_BLOCKING_FN</arg>
<arg name="ServerTid">unsigned long</arg>
</function>

<function name="I_RpcSetThreadParams" ret="RPC_STATUS" convention="__stdcall">
<arg name="fClientFree">int</arg>

      void *Context,
<arg name="hWndClient">void *</arg>
</function>

<function name="I_RpcWindowProc" ret="unsigned int" convention="__stdcall">
<arg name="hWnd">void *</arg>
<arg name="Message">unsigned int</arg>
<arg name="wParam">unsigned int</arg>
<arg name="lParam">unsigned long</arg>
</function>

<function name="I_RpcServerUnregisterEndpointA" ret="RPC_STATUS" convention="__stdcall">
<arg name="Protseq">RPC_CSTR</arg>
<arg name="Endpoint">RPC_CSTR</arg>
</function>

<function name="I_RpcServerUnregisterEndpointW" ret="RPC_STATUS" convention="__stdcall">
<arg name="Protseq">RPC_WSTR</arg>
<arg name="Endpoint">RPC_WSTR</arg>
</function>
<function name="I_RpcServerInqTransportType" ret="RPC_STATUS" convention="__stdcall">
<arg name="Type">unsigned int  *</arg>
</function>

<function name="I_RpcMapWin32Status" ret="long" convention="__stdcall">

<arg name="Status">RPC_STATUS</arg>
</function>
<struct name="_RPC_C_OPT_METADATA_DESCRIPTOR">
    unsigned long BufferSize;   
     char *Buffer;               
} RPC_C_OPT_METADATA_DESCRIPTOR;

<struct name="_RDR_CALLOUT_STATE">
    
    RPC_STATUS LastError;
    void *LastEEInfo;

    RPC_HTTP_REDIRECTOR_STAGE LastCalledStage;

    
    unsigned short *ServerName;   
    unsigned short *ServerPort;   
    unsigned short *RemoteUser;   
    unsigned short *AuthType;     
    unsigned char ResourceTypePresent;
    unsigned char MetadataPresent;
    unsigned char SessionIdPresent;
    unsigned char InterfacePresent;
    UUID ResourceType;
    RPC_C_OPT_METADATA_DESCRIPTOR Metadata;     
    UUID SessionId;
    RPC_SYNTAX_IDENTIFIER Interface;
    void *CertContext;            
                                  
                                  
} RDR_CALLOUT_STATE;

typedef RPC_STATUS
(__stdcall *I_RpcProxyIsValidMachineFn)
        (
         char *pszMachine,
         char *pszDotMachine,
         unsigned long dwPortNumber        
        );

typedef RPC_STATUS
(__stdcall *I_RpcProxyGetClientAddressFn)
        (
         void *Context,
         char *Buffer,
<arg name="BufferLength">unsigned long *</arg>
</function>

typedef RPC_STATUS
(__stdcall *I_RpcProxyGetConnectionTimeoutFn)
        (
<arg name="ConnectionTimeout">unsigned long *</arg>
</function>
typedef RPC_STATUS
(__stdcall *I_RpcPerformCalloutFn) 
    (
     void *Context,
     RDR_CALLOUT_STATE *CallOutState,
<arg name="Stage">RPC_HTTP_REDIRECTOR_STAGE</arg>
</function>

typedef void
(__stdcall *I_RpcFreeCalloutStateFn)
    (
<arg name="CallOutState">RDR_CALLOUT_STATE *</arg>
</function>

typedef RPC_STATUS
(__stdcall *I_RpcProxyGetClientSessionAndResourceUUID)
        (
         void *Context,
         int *SessionIdPresent,
         UUID *SessionId,
         int *ResourceIdPresent,
<arg name="ResourceId">UUID *</arg>
</function>
typedef RPC_STATUS
(__stdcall *I_RpcProxyFilterIfFn) 
    (
     void *Context,
     UUID *IfUuid,
     unsigned short IfMajorVersion,
<arg name="fAllow">int *</arg>
</function>

<struct name="tagI_RpcProxyCallbackInterface">
<field name="IsValidMachineFn">I_RpcProxyIsValidMachineFn</field>
<field name="GetClientAddressFn">I_RpcProxyGetClientAddressFn</field>
<field name="GetConnectionTimeoutFn">I_RpcProxyGetConnectionTimeoutFn</field>
<field name="PerformCalloutFn">I_RpcPerformCalloutFn</field>
<field name="FreeCalloutStateFn">I_RpcFreeCalloutStateFn</field>
<field name="GetClientSessionAndResourceUUIDFn">I_RpcProxyGetClientSessionAndResourceUUID</field>
<field name="ProxyFilterIfFn">I_RpcProxyFilterIfFn</field>

} I_RpcProxyCallbackInterface;

<function name="I_RpcProxyNewConnection" ret="RPC_STATUS" convention="__stdcall">
<arg name="ConnectionType">unsigned long</arg>

     unsigned short *ServerAddress,
     unsigned short *ServerPort,
     unsigned short *MinConnTimeout,
     void *ConnectionParameter,
      RDR_CALLOUT_STATE *CallOutState, 
<arg name="ProxyCallbackInterface">I_RpcProxyCallbackInterface *</arg>
</function>
    
        
<function name="I_RpcReplyToClientWithStatus" ret="RPC_STATUS" convention="__stdcall">

     void *ConnectionParameter,
<arg name="RpcStatus">RPC_STATUS</arg>
</function>

<function name="I_RpcRecordCalloutFailure" ret="void" convention="__stdcall">
<arg name="RpcStatus">RPC_STATUS</arg>

     RDR_CALLOUT_STATE *CallOutState,
<arg name="DllName">unsigned short *</arg>
</function>

#line 1 "\\program files\\Microsoft SDKs\\Windows\\v6.0A\\Include\\rpcnsi.h"
#pragma once
typedef void  * RPC_NS_HANDLE;

<function name="RpcNsBindingExportA" ret="__declspec(dllimport) RPC_STATUS" convention="__stdcall">
<arg name="EntryNameSyntax">unsigned long</arg>
<arg name="EntryName">RPC_CSTR</arg>
<arg name="IfSpec">RPC_IF_HANDLE</arg>

     RPC_BINDING_VECTOR  *BindingVec,
<arg name="ObjectUuidVec">UUID_VECTOR  *</arg>
</function>
<function name="RpcNsBindingUnexportA" ret="__declspec(dllimport) RPC_STATUS" convention="__stdcall">
<arg name="EntryNameSyntax">unsigned long</arg>
<arg name="EntryName">RPC_CSTR</arg>
<arg name="IfSpec">RPC_IF_HANDLE</arg>
<arg name="ObjectUuidVec">UUID_VECTOR  *</arg>
</function>
<function name="RpcNsBindingExportW" ret="__declspec(dllimport) RPC_STATUS" convention="__stdcall">
<arg name="EntryNameSyntax">unsigned long</arg>
<arg name="EntryName">RPC_WSTR</arg>
<arg name="IfSpec">RPC_IF_HANDLE</arg>

     RPC_BINDING_VECTOR  *BindingVec,
<arg name="ObjectUuidVec">UUID_VECTOR  *</arg>
</function>

<function name="RpcNsBindingUnexportW" ret="__declspec(dllimport) RPC_STATUS" convention="__stdcall">
<arg name="EntryNameSyntax">unsigned long</arg>
<arg name="EntryName">RPC_WSTR</arg>
<arg name="IfSpec">RPC_IF_HANDLE</arg>
<arg name="ObjectUuidVec">UUID_VECTOR  *</arg>
</function>
<function name="RpcNsBindingExportPnPA" ret="RPC_STATUS" convention="__stdcall">
<arg name="EntryNameSyntax">unsigned long</arg>
<arg name="EntryName">RPC_CSTR</arg>
<arg name="IfSpec">RPC_IF_HANDLE</arg>
<arg name="ObjectVector">UUID_VECTOR *</arg>
</function>

<function name="RpcNsBindingUnexportPnPA" ret="RPC_STATUS" convention="__stdcall">
<arg name="EntryNameSyntax">unsigned long</arg>
<arg name="EntryName">RPC_CSTR</arg>
<arg name="IfSpec">RPC_IF_HANDLE</arg>
<arg name="ObjectVector">UUID_VECTOR *</arg>
</function>
<function name="RpcNsBindingExportPnPW" ret="RPC_STATUS" convention="__stdcall">
<arg name="EntryNameSyntax">unsigned long</arg>
<arg name="EntryName">RPC_WSTR</arg>
<arg name="IfSpec">RPC_IF_HANDLE</arg>
<arg name="ObjectVector">UUID_VECTOR *</arg>
</function>

<function name="RpcNsBindingUnexportPnPW" ret="RPC_STATUS" convention="__stdcall">
<arg name="EntryNameSyntax">unsigned long</arg>
<arg name="EntryName">RPC_WSTR</arg>
<arg name="IfSpec">RPC_IF_HANDLE</arg>
<arg name="ObjectVector">UUID_VECTOR *</arg>
</function>

<function name="RpcNsBindingLookupBeginA" ret="__declspec(dllimport) RPC_STATUS" convention="__stdcall">
<arg name="EntryNameSyntax">unsigned long</arg>
<arg name="EntryName">RPC_CSTR</arg>
<arg name="IfSpec">RPC_IF_HANDLE</arg>

     UUID  *ObjUuid,
     unsigned long BindingMaxCount,
<arg name="LookupContext">RPC_NS_HANDLE  *</arg>
</function>
<function name="RpcNsBindingLookupBeginW" ret="__declspec(dllimport) RPC_STATUS" convention="__stdcall">
<arg name="EntryNameSyntax">unsigned long</arg>
<arg name="EntryName">RPC_WSTR</arg>
<arg name="IfSpec">RPC_IF_HANDLE</arg>

     UUID  *ObjUuid,
     unsigned long BindingMaxCount,
<arg name="LookupContext">RPC_NS_HANDLE  *</arg>
</function>

<function name="RpcNsBindingLookupNext" ret="__declspec(dllimport) RPC_STATUS" convention="__stdcall">
<arg name="LookupContext">RPC_NS_HANDLE</arg>
<arg name="BindingVec">RPC_BINDING_VECTOR  *  *</arg>
</function>

<function name="RpcNsBindingLookupDone" ret="__declspec(dllimport) RPC_STATUS" convention="__stdcall">
<arg name="LookupContext">RPC_NS_HANDLE  *</arg>
</function>
<function name="RpcNsGroupDeleteA" ret="__declspec(dllimport) RPC_STATUS" convention="__stdcall">
<arg name="GroupNameSyntax">unsigned long</arg>
<arg name="GroupName">RPC_CSTR</arg>
</function>

<function name="RpcNsGroupMbrAddA" ret="__declspec(dllimport) RPC_STATUS" convention="__stdcall">
<arg name="GroupNameSyntax">unsigned long</arg>
<arg name="GroupName">RPC_CSTR</arg>
<arg name="MemberNameSyntax">unsigned long</arg>
<arg name="MemberName">RPC_CSTR</arg>
</function>

<function name="RpcNsGroupMbrRemoveA" ret="__declspec(dllimport) RPC_STATUS" convention="__stdcall">
<arg name="GroupNameSyntax">unsigned long</arg>
<arg name="GroupName">RPC_CSTR</arg>
<arg name="MemberNameSyntax">unsigned long</arg>
<arg name="MemberName">RPC_CSTR</arg>
</function>

<function name="RpcNsGroupMbrInqBeginA" ret="__declspec(dllimport) RPC_STATUS" convention="__stdcall">
<arg name="GroupNameSyntax">unsigned long</arg>
<arg name="GroupName">RPC_CSTR</arg>
<arg name="MemberNameSyntax">unsigned long</arg>
<arg name="InquiryContext">RPC_NS_HANDLE  *</arg>
</function>

<function name="RpcNsGroupMbrInqNextA" ret="__declspec(dllimport) RPC_STATUS" convention="__stdcall">
<arg name="InquiryContext">RPC_NS_HANDLE</arg>
<arg name="MemberName">RPC_CSTR  *</arg>
</function>
<function name="RpcNsGroupDeleteW" ret="__declspec(dllimport) RPC_STATUS" convention="__stdcall">
<arg name="GroupNameSyntax">unsigned long</arg>
<arg name="GroupName">RPC_WSTR</arg>
</function>

<function name="RpcNsGroupMbrAddW" ret="__declspec(dllimport) RPC_STATUS" convention="__stdcall">
<arg name="GroupNameSyntax">unsigned long</arg>
<arg name="GroupName">RPC_WSTR</arg>
<arg name="MemberNameSyntax">unsigned long</arg>
<arg name="MemberName">RPC_WSTR</arg>
</function>

<function name="RpcNsGroupMbrRemoveW" ret="__declspec(dllimport) RPC_STATUS" convention="__stdcall">
<arg name="GroupNameSyntax">unsigned long</arg>
<arg name="GroupName">RPC_WSTR</arg>
<arg name="MemberNameSyntax">unsigned long</arg>
<arg name="MemberName">RPC_WSTR</arg>
</function>

<function name="RpcNsGroupMbrInqBeginW" ret="__declspec(dllimport) RPC_STATUS" convention="__stdcall">
<arg name="GroupNameSyntax">unsigned long</arg>
<arg name="GroupName">RPC_WSTR</arg>
<arg name="MemberNameSyntax">unsigned long</arg>
<arg name="InquiryContext">RPC_NS_HANDLE  *</arg>
</function>

<function name="RpcNsGroupMbrInqNextW" ret="__declspec(dllimport) RPC_STATUS" convention="__stdcall">
<arg name="InquiryContext">RPC_NS_HANDLE</arg>
<arg name="MemberName">RPC_WSTR  *</arg>
</function>
<function name="RpcNsGroupMbrInqDone" ret="__declspec(dllimport) RPC_STATUS" convention="__stdcall">
<arg name="InquiryContext">RPC_NS_HANDLE  *</arg>
</function>
<function name="RpcNsProfileDeleteA" ret="__declspec(dllimport) RPC_STATUS" convention="__stdcall">
<arg name="ProfileNameSyntax">unsigned long</arg>
<arg name="ProfileName">RPC_CSTR</arg>
</function>

<function name="RpcNsProfileEltAddA" ret="__declspec(dllimport) RPC_STATUS" convention="__stdcall">
<arg name="ProfileNameSyntax">unsigned long</arg>
<arg name="ProfileName">RPC_CSTR</arg>

     RPC_IF_ID  *IfId,
     unsigned long MemberNameSyntax,
     RPC_CSTR MemberName,
     unsigned long Priority,
<arg name="Annotation">RPC_CSTR</arg>
</function>

<function name="RpcNsProfileEltRemoveA" ret="__declspec(dllimport) RPC_STATUS" convention="__stdcall">
<arg name="ProfileNameSyntax">unsigned long</arg>
<arg name="ProfileName">RPC_CSTR</arg>

     RPC_IF_ID  *IfId,
     unsigned long MemberNameSyntax,
<arg name="MemberName">RPC_CSTR</arg>
</function>

<function name="RpcNsProfileEltInqBeginA" ret="__declspec(dllimport) RPC_STATUS" convention="__stdcall">
<arg name="ProfileNameSyntax">unsigned long</arg>
<arg name="ProfileName">RPC_CSTR</arg>
<arg name="InquiryType">unsigned long</arg>

     RPC_IF_ID  *IfId,
     unsigned long VersOption,
     unsigned long MemberNameSyntax,
     RPC_CSTR MemberName,
<arg name="InquiryContext">RPC_NS_HANDLE  *</arg>
</function>

<function name="RpcNsProfileEltInqNextA" ret="__declspec(dllimport) RPC_STATUS" convention="__stdcall">
<arg name="InquiryContext">RPC_NS_HANDLE</arg>

     RPC_IF_ID  *IfId,
     RPC_CSTR  *MemberName,
     unsigned long  *Priority,
<arg name="Annotation">RPC_CSTR  *</arg>
</function>
<function name="RpcNsProfileDeleteW" ret="__declspec(dllimport) RPC_STATUS" convention="__stdcall">
<arg name="ProfileNameSyntax">unsigned long</arg>
<arg name="ProfileName">RPC_WSTR</arg>
</function>

<function name="RpcNsProfileEltAddW" ret="__declspec(dllimport) RPC_STATUS" convention="__stdcall">
<arg name="ProfileNameSyntax">unsigned long</arg>
<arg name="ProfileName">RPC_WSTR</arg>

     RPC_IF_ID  *IfId,
     unsigned long MemberNameSyntax,
     RPC_WSTR MemberName,
     unsigned long Priority,
<arg name="Annotation">RPC_WSTR</arg>
</function>

<function name="RpcNsProfileEltRemoveW" ret="__declspec(dllimport) RPC_STATUS" convention="__stdcall">
<arg name="ProfileNameSyntax">unsigned long</arg>
<arg name="ProfileName">RPC_WSTR</arg>

     RPC_IF_ID  *IfId,
     unsigned long MemberNameSyntax,
<arg name="MemberName">RPC_WSTR</arg>
</function>

<function name="RpcNsProfileEltInqBeginW" ret="__declspec(dllimport) RPC_STATUS" convention="__stdcall">
<arg name="ProfileNameSyntax">unsigned long</arg>
<arg name="ProfileName">RPC_WSTR</arg>
<arg name="InquiryType">unsigned long</arg>

     RPC_IF_ID  *IfId,
     unsigned long VersOption,
     unsigned long MemberNameSyntax,
     RPC_WSTR MemberName,
<arg name="InquiryContext">RPC_NS_HANDLE  *</arg>
</function>

<function name="RpcNsProfileEltInqNextW" ret="__declspec(dllimport) RPC_STATUS" convention="__stdcall">
<arg name="InquiryContext">RPC_NS_HANDLE</arg>

     RPC_IF_ID  *IfId,
     RPC_WSTR  *MemberName,
     unsigned long  *Priority,
<arg name="Annotation">RPC_WSTR  *</arg>
</function>
<function name="RpcNsProfileEltInqDone" ret="__declspec(dllimport) RPC_STATUS" convention="__stdcall">
<arg name="InquiryContext">RPC_NS_HANDLE  *</arg>
</function>
<function name="RpcNsEntryObjectInqBeginA" ret="__declspec(dllimport) RPC_STATUS" convention="__stdcall">
<arg name="EntryNameSyntax">unsigned long</arg>
<arg name="EntryName">RPC_CSTR</arg>
<arg name="InquiryContext">RPC_NS_HANDLE  *</arg>
</function>
<function name="RpcNsEntryObjectInqBeginW" ret="__declspec(dllimport) RPC_STATUS" convention="__stdcall">
<arg name="EntryNameSyntax">unsigned long</arg>
<arg name="EntryName">RPC_WSTR</arg>
<arg name="InquiryContext">RPC_NS_HANDLE  *</arg>
</function>
<function name="RpcNsEntryObjectInqNext" ret="__declspec(dllimport) RPC_STATUS" convention="__stdcall">
<arg name="InquiryContext">RPC_NS_HANDLE</arg>
<arg name="ObjUuid">UUID  *</arg>
</function>

<function name="RpcNsEntryObjectInqDone" ret="__declspec(dllimport) RPC_STATUS" convention="__stdcall">
<arg name="InquiryContext">RPC_NS_HANDLE  *</arg>
</function>
<function name="RpcNsEntryExpandNameA" ret="__declspec(dllimport) RPC_STATUS" convention="__stdcall">
<arg name="EntryNameSyntax">unsigned long</arg>
<arg name="EntryName">RPC_CSTR</arg>
<arg name="ExpandedName">RPC_CSTR  *</arg>
</function>

<function name="RpcNsMgmtBindingUnexportA" ret="__declspec(dllimport) RPC_STATUS" convention="__stdcall">
<arg name="EntryNameSyntax">unsigned long</arg>
<arg name="EntryName">RPC_CSTR</arg>

     RPC_IF_ID  *IfId,
     unsigned long VersOption,
<arg name="ObjectUuidVec">UUID_VECTOR  *</arg>
</function>

<function name="RpcNsMgmtEntryCreateA" ret="__declspec(dllimport) RPC_STATUS" convention="__stdcall">
<arg name="EntryNameSyntax">unsigned long</arg>
<arg name="EntryName">RPC_CSTR</arg>
</function>

<function name="RpcNsMgmtEntryDeleteA" ret="__declspec(dllimport) RPC_STATUS" convention="__stdcall">
<arg name="EntryNameSyntax">unsigned long</arg>
<arg name="EntryName">RPC_CSTR</arg>
</function>

<function name="RpcNsMgmtEntryInqIfIdsA" ret="__declspec(dllimport) RPC_STATUS" convention="__stdcall">
<arg name="EntryNameSyntax">unsigned long</arg>
<arg name="EntryName">RPC_CSTR</arg>
<arg name="IfIdVec">RPC_IF_ID_VECTOR  *  *</arg>
</function>

<function name="RpcNsMgmtHandleSetExpAge" ret="__declspec(dllimport) RPC_STATUS" convention="__stdcall">
<arg name="NsHandle">RPC_NS_HANDLE</arg>
<arg name="ExpirationAge">unsigned long</arg>
</function>

<function name="RpcNsMgmtInqExpAge" ret="__declspec(dllimport) RPC_STATUS" convention="__stdcall">
<arg name="ExpirationAge">unsigned long  *</arg>
</function>

<function name="RpcNsMgmtSetExpAge" ret="__declspec(dllimport) RPC_STATUS" convention="__stdcall">
<arg name="ExpirationAge">unsigned long</arg>
</function>
<function name="RpcNsEntryExpandNameW" ret="__declspec(dllimport) RPC_STATUS" convention="__stdcall">
<arg name="EntryNameSyntax">unsigned long</arg>
<arg name="EntryName">RPC_WSTR</arg>
<arg name="ExpandedName">RPC_WSTR  *</arg>
</function>

<function name="RpcNsMgmtBindingUnexportW" ret="__declspec(dllimport) RPC_STATUS" convention="__stdcall">
<arg name="EntryNameSyntax">unsigned long</arg>
<arg name="EntryName">RPC_WSTR</arg>

     RPC_IF_ID  *IfId,
     unsigned long VersOption,
<arg name="ObjectUuidVec">UUID_VECTOR  *</arg>
</function>

<function name="RpcNsMgmtEntryCreateW" ret="__declspec(dllimport) RPC_STATUS" convention="__stdcall">
<arg name="EntryNameSyntax">unsigned long</arg>
<arg name="EntryName">RPC_WSTR</arg>
</function>

<function name="RpcNsMgmtEntryDeleteW" ret="__declspec(dllimport) RPC_STATUS" convention="__stdcall">
<arg name="EntryNameSyntax">unsigned long</arg>
<arg name="EntryName">RPC_WSTR</arg>
</function>

<function name="RpcNsMgmtEntryInqIfIdsW" ret="__declspec(dllimport) RPC_STATUS" convention="__stdcall">
<arg name="EntryNameSyntax">unsigned long</arg>
<arg name="EntryName">RPC_WSTR</arg>
<arg name="IfIdVec">RPC_IF_ID_VECTOR  *  *</arg>
</function>
<function name="RpcNsBindingImportBeginA" ret="__declspec(dllimport) RPC_STATUS" convention="__stdcall">
<arg name="EntryNameSyntax">unsigned long</arg>
<arg name="EntryName">RPC_CSTR</arg>
<arg name="IfSpec">RPC_IF_HANDLE</arg>

     UUID  *ObjUuid,
<arg name="ImportContext">RPC_NS_HANDLE  *</arg>
</function>
<function name="RpcNsBindingImportBeginW" ret="__declspec(dllimport) RPC_STATUS" convention="__stdcall">
<arg name="EntryNameSyntax">unsigned long</arg>
<arg name="EntryName">RPC_WSTR</arg>
<arg name="IfSpec">RPC_IF_HANDLE</arg>

     UUID  *ObjUuid,
<arg name="ImportContext">RPC_NS_HANDLE  *</arg>
</function>
<function name="RpcNsBindingImportNext" ret="__declspec(dllimport) RPC_STATUS" convention="__stdcall">
<arg name="ImportContext">RPC_NS_HANDLE</arg>
<arg name="Binding">RPC_BINDING_HANDLE   *</arg>
</function>

<function name="RpcNsBindingImportDone" ret="__declspec(dllimport) RPC_STATUS" convention="__stdcall">
<arg name="ImportContext">RPC_NS_HANDLE  *</arg>
</function>

<function name="RpcNsBindingSelect" ret="__declspec(dllimport) RPC_STATUS" convention="__stdcall">
<arg name="BindingVec">RPC_BINDING_VECTOR  *</arg>
<arg name="Binding">RPC_BINDING_HANDLE   *</arg>
</function>

#line 1 "\\program files\\Microsoft SDKs\\Windows\\v6.0A\\Include\\rpcnterr.h"

#pragma once
#line 1 "\\program files\\Microsoft SDKs\\Windows\\v6.0A\\Include\\rpcasync.h"
#pragma once
typedef
enum _RPC_NOTIFICATION_TYPES
{
    RpcNotificationTypeNone,
    RpcNotificationTypeEvent,

    RpcNotificationTypeApc,
    RpcNotificationTypeIoc,
    RpcNotificationTypeHwnd,

    RpcNotificationTypeCallback
} RPC_NOTIFICATION_TYPES;
typedef
enum _RPC_ASYNC_EVENT {
    RpcCallComplete,
    RpcSendComplete,
    RpcReceiveComplete,
    RpcClientDisconnect,
    RpcClientCancel
    } RPC_ASYNC_EVENT;
    
struct _RPC_ASYNC_STATE;

typedef void __stdcall
RPCNOTIFICATION_ROUTINE (
                  struct _RPC_ASYNC_STATE *pAsync,
                  void *Context,
                  RPC_ASYNC_EVENT Event);
typedef RPCNOTIFICATION_ROUTINE *PFN_RPCNOTIFICATION_ROUTINE;

typedef union _RPC_ASYNC_NOTIFICATION_INFO {

    
    
    
<struct>
<field name="NotificationRoutine">PFN_RPCNOTIFICATION_ROUTINE</field>
<field name="hThread">HANDLE</field>
<field name="APC">}</field>

    
    
    
<struct>
<field name="hIOPort">HANDLE</field>
<field name="dwNumberOfBytesTransferred">DWORD</field>
<field name="dwCompletionKey">DWORD_PTR</field>
<field name="lpOverlapped">LPOVERLAPPED</field>
<field name="IOC">}</field>

    
    
    
<struct>
<field name="hWnd">HWND</field>
<field name="Msg">UINT</field>
<field name="HWND">}</field>
    #line 111 "\\program files\\Microsoft SDKs\\Windows\\v6.0A\\Include\\rpcasync.h"
    
    
    
    
    HANDLE hEvent;
    
    
    
    
    
    
    PFN_RPCNOTIFICATION_ROUTINE NotificationRoutine;
} RPC_ASYNC_NOTIFICATION_INFO, *PRPC_ASYNC_NOTIFICATION_INFO;

<struct name="_RPC_ASYNC_STATE">
    unsigned int    Size; 
    unsigned long   Signature;
    long   Lock;
    unsigned long   Flags;
    void           *StubInfo;
    void           *UserInfo;
    void           *RuntimeInfo;
    RPC_ASYNC_EVENT Event;

    RPC_NOTIFICATION_TYPES NotificationType;
    RPC_ASYNC_NOTIFICATION_INFO u;

    LONG_PTR Reserved[4];
    } RPC_ASYNC_STATE, *PRPC_ASYNC_STATE;
<function name="RpcAsyncInitializeHandle" ret="RPC_STATUS" convention="__stdcall">
<arg name="pAsync">PRPC_ASYNC_STATE</arg>
<arg name="Size">unsigned int    </arg>
</function>
<function name="RpcAsyncRegisterInfo" ret="RPC_STATUS" convention="__stdcall">

     PRPC_ASYNC_STATE pAsync
    ) ;

<function name="RpcAsyncGetCallStatus" ret="RPC_STATUS" convention="__stdcall">

     PRPC_ASYNC_STATE pAsync
    ) ;

<function name="RpcAsyncCompleteCall" ret="RPC_STATUS" convention="__stdcall">
<arg name="pAsync">PRPC_ASYNC_STATE</arg>

     void *Reply
    ) ;

<function name="RpcAsyncAbortCall" ret="RPC_STATUS" convention="__stdcall">
<arg name="pAsync">PRPC_ASYNC_STATE</arg>

     unsigned long ExceptionCode
    ) ;

<function name="RpcAsyncCancelCall" ret="RPC_STATUS" convention="__stdcall">
<arg name="pAsync">PRPC_ASYNC_STATE</arg>

     BOOL fAbort
    ) ;
typedef enum tagExtendedErrorParamTypes
{
    eeptAnsiString = 1,
    eeptUnicodeString,
    eeptLongVal,
    eeptShortVal,
    eeptPointerVal,
    eeptNone,
    eeptBinary
} ExtendedErrorParamTypes;

<struct name="tagBinaryParam">
    void *Buffer;
    short Size;
} BinaryParam;

<struct name="tagRPC_EE_INFO_PARAM">
<field name="ParameterType">ExtendedErrorParamTypes</field>
    union
        {
        LPSTR AnsiString;
        LPWSTR UnicodeString;
        long LVal;
        short SVal;
        ULONGLONG PVal;
        BinaryParam BVal;
        } u;
} RPC_EE_INFO_PARAM;
<struct name="tagRPC_EXTENDED_ERROR_INFO">
<field name="Version">ULONG</field>
<field name="ComputerName">LPWSTR</field>
<field name="ProcessID">ULONG</field>
    union
        {

        SYSTEMTIME SystemTime;
        FILETIME FileTime;

        } u;
    ULONG GeneratingComponent;
    ULONG Status;
    USHORT DetectionLocation;
    USHORT Flags;
    int NumberOfParameters;
    RPC_EE_INFO_PARAM Parameters[4];
} RPC_EXTENDED_ERROR_INFO;

<struct name="tagRPC_ERROR_ENUM_HANDLE">
<field name="Signature">ULONG</field>
    void *CurrentPos;
    void *Head;
} RPC_ERROR_ENUM_HANDLE;

<function name="RpcErrorStartEnumeration" ret="RPC_STATUS " convention="__stdcall">

<arg name="EnumHandle">RPC_ERROR_ENUM_HANDLE *</arg>
</function>

<function name="RpcErrorGetNextRecord" ret="RPC_STATUS " convention="__stdcall">

     RPC_ERROR_ENUM_HANDLE *EnumHandle, 
     BOOL CopyStrings, 
<arg name="ErrorInfo">RPC_EXTENDED_ERROR_INFO *</arg>
</function>

<function name="RpcErrorEndEnumeration" ret="RPC_STATUS " convention="__stdcall">

<arg name="EnumHandle">RPC_ERROR_ENUM_HANDLE *</arg>
</function>

<function name="RpcErrorResetEnumeration" ret="RPC_STATUS " convention="__stdcall">

<arg name="EnumHandle">RPC_ERROR_ENUM_HANDLE *</arg>
</function>

<function name="RpcErrorGetNumberOfRecords" ret="RPC_STATUS " convention="__stdcall">

     RPC_ERROR_ENUM_HANDLE *EnumHandle, 
<arg name="Records">int *</arg>
</function>

<function name="RpcErrorSaveErrorInfo" ret="RPC_STATUS " convention="__stdcall">

     RPC_ERROR_ENUM_HANDLE *EnumHandle, 
     PVOID *ErrorBlob, 
<arg name="BlobSize">size_t *</arg>
</function>

<function name="RpcErrorLoadErrorInfo" ret="RPC_STATUS " convention="__stdcall">
<arg name="ErrorBlob">PVOID</arg>
 
     size_t BlobSize, 
<arg name="EnumHandle">RPC_ERROR_ENUM_HANDLE *</arg>
</function>

<function name="RpcErrorAddRecord" ret="RPC_STATUS " convention="__stdcall">

<arg name="ErrorInfo">RPC_EXTENDED_ERROR_INFO *</arg>
</function>

<function name="RpcErrorClearInformation" ret="void " convention="__stdcall">

<arg name="void"></arg>
</function>
<function name="RpcAsyncCleanupThread" ret="RPC_STATUS" convention="__stdcall">

<arg name="dwTimeout">DWORD</arg>
</function>

<function name="RpcGetAuthorizationContextForClient" ret="RPC_STATUS" convention="__stdcalll">
<arg name="ClientBinding">RPC_BINDING_HANDLE</arg>
<arg name="ImpersonateOnReturn">BOOL</arg>
<arg name="Reserved1">PVOID</arg>
<arg name="pExpirationTime">PLARGE_INTEGER</arg>
<arg name="Reserved2">LUID</arg>
<arg name="Reserved3">DWORD</arg>
<arg name="Reserved4">PVOID</arg>
<arg name="pAuthzClientContext">PVOID *</arg>
</function>

<function name="RpcFreeAuthorizationContext" ret="RPC_STATUS " convention="__stdcall">

<arg name="pAuthzClientContext">PVOID *</arg>
</function>

<function name="RpcSsContextLockExclusive" ret="RPC_STATUS" convention="__stdcalll">
<arg name="ServerBindingHandle">RPC_BINDING_HANDLE</arg>
<arg name="UserContext">PVOID</arg>
</function>

<function name="RpcSsContextLockShared" ret="RPC_STATUS" convention="__stdcalll">
<arg name="ServerBindingHandle">RPC_BINDING_HANDLE</arg>
<arg name="UserContext">PVOID</arg>
</function>
typedef enum tagRpcLocalAddressFormat
{
    rlafInvalid = 0,
    rlafIPv4,
    rlafIPv6
} RpcLocalAddressFormat;

<struct name="_RPC_CALL_LOCAL_ADDRESS_V1">
    unsigned int Version;
    void *Buffer;
    unsigned long BufferSize;
    RpcLocalAddressFormat AddressFormat;
} RPC_CALL_LOCAL_ADDRESS_V1, *PRPC_CALL_LOCAL_ADDRESS_V1;
<struct name="tagRPC_CALL_ATTRIBUTES_V1_W">
    unsigned int Version;
    unsigned long Flags;
    unsigned long ServerPrincipalNameBufferLength;
    unsigned short *ServerPrincipalName;
    unsigned long ClientPrincipalNameBufferLength;
    unsigned short *ClientPrincipalName;
    unsigned long AuthenticationLevel;
    unsigned long AuthenticationService;
    BOOL NullSession;
} RPC_CALL_ATTRIBUTES_V1_W;

<struct name="tagRPC_CALL_ATTRIBUTES_V1_A">
    unsigned int Version;
    unsigned long Flags;
    unsigned long ServerPrincipalNameBufferLength;
    unsigned char *ServerPrincipalName;
    unsigned long ClientPrincipalNameBufferLength;
    unsigned char *ClientPrincipalName;
    unsigned long AuthenticationLevel;
    unsigned long AuthenticationService;
    BOOL NullSession;
} RPC_CALL_ATTRIBUTES_V1_A;

typedef enum tagRpcCallType
{
    rctInvalid = 0,
    rctNormal,
    rctTraining,
    rctGuaranteed
} RpcCallType;

typedef enum tagRpcCallClientLocality
{
    rcclInvalid = 0,
    rcclLocal,
    rcclRemote,
    rcclClientUnknownLocality
} RpcCallClientLocality;
<struct name="tagRPC_CALL_ATTRIBUTES_V2_W">
    unsigned int Version;
    unsigned long Flags;
    unsigned long ServerPrincipalNameBufferLength;
    unsigned short *ServerPrincipalName;
    unsigned long ClientPrincipalNameBufferLength;
    unsigned short *ClientPrincipalName;
    unsigned long AuthenticationLevel;
    unsigned long AuthenticationService;
    BOOL NullSession;
    BOOL KernelModeCaller;
    unsigned long ProtocolSequence;
    RpcCallClientLocality IsClientLocal;
    HANDLE ClientPID; 
    unsigned long CallStatus;
    RpcCallType CallType;
    RPC_CALL_LOCAL_ADDRESS_V1 *CallLocalAddress;	
    unsigned short OpNum;
    UUID InterfaceUuid;        
} RPC_CALL_ATTRIBUTES_V2_W;
    
<struct name="tagRPC_CALL_ATTRIBUTES_V2_A">
    unsigned int Version;
    unsigned long Flags;
    unsigned long ServerPrincipalNameBufferLength;
    unsigned char *ServerPrincipalName;
    unsigned long ClientPrincipalNameBufferLength;
    unsigned char *ClientPrincipalName;
    unsigned long AuthenticationLevel;
    unsigned long AuthenticationService;
    BOOL NullSession;
    BOOL KernelModeCaller;
    unsigned long ProtocolSequence;
    unsigned long IsClientLocal;
    HANDLE ClientPID; 
    unsigned long CallStatus;
    RpcCallType CallType;
    RPC_CALL_LOCAL_ADDRESS_V1 *CallLocalAddress;	
    unsigned short OpNum;
    UUID InterfaceUuid;    
} RPC_CALL_ATTRIBUTES_V2_A;
<function name="RpcServerInqCallAttributesW" ret="RPC_STATUS" convention="__stdcalll">
<arg name="ClientBinding">RPC_BINDING_HANDLE</arg>
<arg name="RpcCallAttributes">void *</arg>
</function>

<function name="RpcServerInqCallAttributesA" ret="RPC_STATUS" convention="__stdcalll">
<arg name="ClientBinding">RPC_BINDING_HANDLE</arg>
<arg name="RpcCallAttributes">void *</arg>
</function>

typedef RPC_CALL_ATTRIBUTES_V2_A RPC_CALL_ATTRIBUTES;

typedef enum _RPC_NOTIFICATIONS
{
    RpcNotificationCallNone = 0,
    RpcNotificationClientDisconnect = 1,
    RpcNotificationCallCancel = 2      
} RPC_NOTIFICATIONS;
<function name="RpcServerSubscribeForNotification" ret="RPC_STATUS " convention="__stdcall">
<arg name="Binding">RPC_BINDING_HANDLE</arg>
<arg name="Notification">RPC_NOTIFICATIONS</arg>
<arg name="NotificationType">RPC_NOTIFICATION_TYPES</arg>
<arg name="NotificationInfo">RPC_ASYNC_NOTIFICATION_INFO *</arg>
</function>

<function name="RpcServerUnsubscribeForNotification" ret="RPC_STATUS " convention="__stdcall">
<arg name="Binding">RPC_BINDING_HANDLE</arg>
<arg name="Notification">RPC_NOTIFICATIONS</arg>
<arg name="NotificationsQueued">unsigned long *</arg>
</function>
 

<function name="RpcBindingBind" ret="RPC_STATUS " convention="__stdcall">
<arg name="pAsync">PRPC_ASYNC_STATE</arg>
<arg name="Binding">RPC_BINDING_HANDLE</arg>

     RPC_IF_HANDLE IfSpec    
    );

<function name="RpcBindingUnbind" ret="RPC_STATUS " convention="__stdcall">

<arg name="Binding">RPC_BINDING_HANDLE</arg>
</function>
<function name="RpcDiagnoseError" ret="RPC_STATUS " convention="__stdcall">
<arg name="BindingHandle">RPC_BINDING_HANDLE</arg>
 
     RPC_IF_HANDLE IfSpec, 
     RPC_STATUS RpcStatus, 
     RPC_ERROR_ENUM_HANDLE *EnumHandle, 
     ULONG Options,
<arg name="ParentWindow">HWND</arg>
</function>
RPC_STATUS __stdcall
I_RpcAsyncSetHandle (
      PRPC_MESSAGE Message,
<arg name="pAsync">PRPC_ASYNC_STATE</arg>
</function>

RPC_STATUS __stdcall
I_RpcAsyncAbortCall (
     PRPC_ASYNC_STATE pAsync,
     unsigned long ExceptionCode
    ) ;
int 
__stdcall
I_RpcExceptionFilter (
<arg name="ExceptionCode">unsigned long</arg>
</function>
#line 1 "\\program files\\Microsoft SDKs\\Windows\\v6.0A\\Include\\shellapi.h"
#line 1 "\\program files\\Microsoft SDKs\\Windows\\v6.0A\\Include\\pshpack1.h"
#pragma warning(disable:4103)

#pragma pack(push,1)

<struct name="HDROP__">
int unused; };
<typedef name="HDROP">HDROP__ *</typedef>

<function name="DragQueryFileA" ret="UINT" convention="__stdcall">
<arg name="hDrop">HDROP</arg>
<arg name="iFile">UINT</arg>
<arg name="lpszFile">LPSTR</arg>
 UINT cch
</function>
<function name="DragQueryFileW" ret="UINT" convention="__stdcall">
<arg name="hDrop">HDROP</arg>
<arg name="iFile">UINT</arg>
<arg name="lpszFile">LPWSTR</arg>
 UINT cch
</function>
<function name="DragQueryPoint" ret="BOOL" convention="__stdcall">
<arg name="hDrop">HDROP</arg>
<arg name="lppt">LPPOINT</arg>
</function>
<function name="DragFinish" ret="void" convention="__stdcall">
<arg name="hDrop">HDROP</arg>
</function>
<function name="DragAcceptFiles" ret="void" convention="__stdcall">
<arg name="hWnd">HWND</arg>
<arg name="fAccept">BOOL</arg>
</function>

<function name="ShellExecuteA" ret="HINSTANCE" convention="__stdcall">
<arg name="hwnd">HWND</arg>
<arg name="lpOperation">LPCSTR</arg>
<arg name="lpFile">LPCSTR</arg>
<arg name="lpParameters">LPCSTR</arg>
<arg name="lpDirectory">LPCSTR</arg>
<arg name="nShowCmd">INT</arg>
</function>
<function name="ShellExecuteW" ret="HINSTANCE" convention="__stdcall">
<arg name="hwnd">HWND</arg>
<arg name="lpOperation">LPCWSTR</arg>
<arg name="lpFile">LPCWSTR</arg>
<arg name="lpParameters">LPCWSTR</arg>
<arg name="lpDirectory">LPCWSTR</arg>
<arg name="nShowCmd">INT</arg>
</function>
<function name="FindExecutableA" ret="HINSTANCE" convention="__stdcall">
<arg name="lpFile">LPCSTR</arg>
<arg name="lpDirectory">LPCSTR</arg>
<arg name="lpResult">LPSTR</arg>
</function>
<function name="FindExecutableW" ret="HINSTANCE" convention="__stdcall">
<arg name="lpFile">LPCWSTR</arg>
<arg name="lpDirectory">LPCWSTR</arg>
<arg name="lpResult">LPWSTR</arg>
</function>
<function name="CommandLineToArgvW" ret="LPWSTR *" convention="__stdcall">
<arg name="lpCmdLine">LPCWSTR</arg>
<arg name="pNumArgs">int*</arg>
</function>

<function name="ShellAboutA" ret="INT" convention="__stdcall">
<arg name="hWnd">HWND</arg>
<arg name="szApp">LPCSTR</arg>
<arg name="szOtherStuff">LPCSTR</arg>
<arg name="hIcon">HICON</arg>
</function>
<function name="ShellAboutW" ret="INT" convention="__stdcall">
<arg name="hWnd">HWND</arg>
<arg name="szApp">LPCWSTR</arg>
<arg name="szOtherStuff">LPCWSTR</arg>
<arg name="hIcon">HICON</arg>
</function>
<function name="DuplicateIcon" ret="HICON" convention="__stdcall">
<arg name="hInst">HINSTANCE</arg>
<arg name="hIcon">HICON</arg>
</function>
<function name="ExtractAssociatedIconA" ret="HICON" convention="__stdcall">
<arg name="hInst">HINSTANCE</arg>
<arg name="lpIconPath">LPSTR</arg>
<arg name="lpiIcon">LPWORD</arg>
</function>
<function name="ExtractAssociatedIconW" ret="HICON" convention="__stdcall">
<arg name="hInst">HINSTANCE</arg>
<arg name="lpIconPath">LPWSTR</arg>
<arg name="lpiIcon">LPWORD</arg>
</function>

<function name="ExtractAssociatedIconExA" ret="HICON" convention="__stdcall">
<arg name="hInst">HINSTANCE</arg>
<arg name="lpIconPath">LPSTR</arg>
<arg name="lpiIconIndex">LPWORD</arg>
<arg name="lpiIconId">LPWORD</arg>
</function>
<function name="ExtractAssociatedIconExW" ret="HICON" convention="__stdcall">
<arg name="hInst">HINSTANCE</arg>
<arg name="lpIconPath">LPWSTR</arg>
<arg name="lpiIconIndex">LPWORD</arg>
<arg name="lpiIconId">LPWORD</arg>
</function>

<function name="ExtractIconA" ret="HICON" convention="__stdcall">
<arg name="hInst">HINSTANCE</arg>
<arg name="lpszExeFileName">LPCSTR</arg>
<arg name="nIconIndex">UINT</arg>
</function>
<function name="ExtractIconW" ret="HICON" convention="__stdcall">
<arg name="hInst">HINSTANCE</arg>
<arg name="lpszExeFileName">LPCWSTR</arg>
<arg name="nIconIndex">UINT</arg>
</function>

<struct name="_DRAGINFOA">
<field name="uSize">UINT</field>
<field name="pt">POINT</field>
<field name="fNC">BOOL</field>
<field name="lpFileList">LPSTR</field>
<field name="grfKeyState">DWORD</field>
</struct>
<typedefprev id="DRAGINFOA"/>
<typedefptrprev id="LPDRAGINFOA"/>
<struct name="_DRAGINFOW">
<field name="uSize">UINT</field>
<field name="pt">POINT</field>
<field name="fNC">BOOL</field>
<field name="lpFileList">LPWSTR</field>
<field name="grfKeyState">DWORD</field>
</struct>
<typedefprev id="DRAGINFOW"/>
<typedefptrprev id="LPDRAGINFOW"/>

typedef DRAGINFOA DRAGINFO;
typedef LPDRAGINFOA LPDRAGINFO;

                                        
                                        
<struct name="_AppBarData">
<field name="cbSize">DWORD</field>
<field name="hWnd">HWND</field>
<field name="uCallbackMessage">UINT</field>
<field name="uEdge">UINT</field>
<field name="rc">RECT</field>
<field name="lParam">LPARAM</field>
</struct>
<typedefprev id="APPBARDATA"/>
<typedefptrprev id="PAPPBARDATA"/>
<function name="SHAppBarMessage" ret="UINT_PTR" convention="__stdcall">
<arg name="dwMessage">DWORD</arg>
<arg name="pData">PAPPBARDATA</arg>
</function>
<function name="DoEnvironmentSubstA" ret="DWORD" convention="__stdcall">
<arg name="szString">LPSTR</arg>
<arg name="cchString">UINT</arg>
</function>
<function name="DoEnvironmentSubstW" ret="DWORD" convention="__stdcall">
<arg name="szString">LPWSTR</arg>
<arg name="cchString">UINT</arg>
</function>
<function name="ExtractIconExA" ret="UINT" convention="__stdcall">
<arg name="lpszFile">LPCSTR</arg>
<arg name="nIconIndex">int</arg>
<arg name="phiconLarge">HICON *</arg>
<arg name="phiconSmall">HICON *</arg>
 UINT nIcons);
<function name="ExtractIconExW" ret="UINT" convention="__stdcall">
<arg name="lpszFile">LPCWSTR</arg>
<arg name="nIconIndex">int</arg>
<arg name="phiconLarge">HICON *</arg>
<arg name="phiconSmall">HICON *</arg>
 UINT nIcons);
                                           
typedef WORD FILEOP_FLAGS;

                                
                                
                                
                                

typedef WORD PRINTEROP_FLAGS;

<struct name="_SHFILEOPSTRUCTA">
<field name="hwnd">HWND</field>
<field name="wFunc">UINT</field>
<field name="pFrom">LPCSTR</field>
<field name="pTo">LPCSTR</field>
<field name="fFlags">FILEOP_FLAGS</field>
<field name="fAnyOperationsAborted">BOOL</field>
<field name="hNameMappings">LPVOID</field>
<field name="lpszProgressTitle">LPCSTR</field>
</struct>
<typedefprev id="SHFILEOPSTRUCTA"/>
<typedefptrprev id="LPSHFILEOPSTRUCTA"/>
<struct name="_SHFILEOPSTRUCTW">
<field name="hwnd">HWND</field>
<field name="wFunc">UINT</field>
<field name="pFrom">LPCWSTR</field>
<field name="pTo">LPCWSTR</field>
<field name="fFlags">FILEOP_FLAGS</field>
<field name="fAnyOperationsAborted">BOOL</field>
<field name="hNameMappings">LPVOID</field>
<field name="lpszProgressTitle">LPCWSTR</field>
</struct>
<typedefprev id="SHFILEOPSTRUCTW"/>
<typedefptrprev id="LPSHFILEOPSTRUCTW"/>

typedef SHFILEOPSTRUCTA SHFILEOPSTRUCT;
typedef LPSHFILEOPSTRUCTA LPSHFILEOPSTRUCT;
<function name="SHFileOperationA" ret="int" convention="__stdcall">
<arg name="lpFileOp">LPSHFILEOPSTRUCTA</arg>
</function>
<function name="SHFileOperationW" ret="int" convention="__stdcall">
<arg name="lpFileOp">LPSHFILEOPSTRUCTW</arg>
</function>
<function name="SHFreeNameMappings" ret="void" convention="__stdcall">
HANDLE hNameMappings
</function>

<struct name="_SHNAMEMAPPINGA">
<field name="pszOldPath">LPSTR</field>
<field name="pszNewPath">LPSTR</field>
<field name="cchOldPath">int</field>
<field name="cchNewPath">int</field>
</struct>
<typedefprev id="SHNAMEMAPPINGA"/>
<typedefptrprev id="LPSHNAMEMAPPINGA"/>
<struct name="_SHNAMEMAPPINGW">
<field name="pszOldPath">LPWSTR</field>
<field name="pszNewPath">LPWSTR</field>
<field name="cchOldPath">int</field>
<field name="cchNewPath">int</field>
</struct>
<typedefprev id="SHNAMEMAPPINGW"/>
<typedefptrprev id="LPSHNAMEMAPPINGW"/>

typedef SHNAMEMAPPINGA SHNAMEMAPPING;
typedef LPSHNAMEMAPPINGA LPSHNAMEMAPPING;
#pragma warning(push)
#pragma warning(disable:4201) 
#pragma once
<struct name="_SHELLEXECUTEINFOA">
<field name="cbSize">DWORD</field>
<field name="fMask">ULONG</field>
<field name="hwnd">HWND</field>
<field name="lpVerb">LPCSTR</field>
<field name="lpFile">LPCSTR</field>
<field name="lpParameters">LPCSTR</field>
<field name="lpDirectory">LPCSTR</field>
<field name="nShow">int</field>
<field name="hInstApp">HINSTANCE</field>
        
        LPVOID lpIDList;
        LPCSTR   lpClass;
        HKEY hkeyClass;
        DWORD dwHotKey;
        union {
        HANDLE hIcon;

        HANDLE hMonitor;

        } ;
        HANDLE hProcess;
} SHELLEXECUTEINFOA, *LPSHELLEXECUTEINFOA;
<struct name="_SHELLEXECUTEINFOW">
<field name="cbSize">DWORD</field>
<field name="fMask">ULONG</field>
<field name="hwnd">HWND</field>
<field name="lpVerb">LPCWSTR</field>
<field name="lpFile">LPCWSTR</field>
<field name="lpParameters">LPCWSTR</field>
<field name="lpDirectory">LPCWSTR</field>
<field name="nShow">int</field>
<field name="hInstApp">HINSTANCE</field>
        
        LPVOID lpIDList;
        LPCWSTR  lpClass;
        HKEY hkeyClass;
        DWORD dwHotKey;
        union {
        HANDLE hIcon;

        HANDLE hMonitor;

        } ;
        HANDLE hProcess;
} SHELLEXECUTEINFOW, *LPSHELLEXECUTEINFOW;

typedef SHELLEXECUTEINFOA SHELLEXECUTEINFO;
typedef LPSHELLEXECUTEINFOA LPSHELLEXECUTEINFO;
<function name="ShellExecuteExA" ret="BOOL" convention="__stdcall">
 LPSHELLEXECUTEINFOA lpExecInfo
</function>
<function name="ShellExecuteExW" ret="BOOL" convention="__stdcall">
 LPSHELLEXECUTEINFOW lpExecInfo
</function>
<struct name="_SHCREATEPROCESSINFOW">
<field name="cbSize">DWORD</field>
<field name="fMask">ULONG</field>
<field name="hwnd">HWND</field>
<field name="pszFile">LPCWSTR</field>
<field name="pszParameters">LPCWSTR</field>
<field name="pszCurrentDirectory">LPCWSTR</field>
<field name="hUserToken">HANDLE</field>
<field name="lpProcessAttributes">LPSECURITY_ATTRIBUTES</field>
<field name="lpThreadAttributes">LPSECURITY_ATTRIBUTES</field>
<field name="bInheritHandles">BOOL</field>
<field name="dwCreationFlags">DWORD</field>
<field name="lpStartupInfo">LPSTARTUPINFOW</field>
<field name="lpProcessInformation">LPPROCESS_INFORMATION</field>
</struct>
<typedefprev id="SHCREATEPROCESSINFOW"/>
<typedefptrprev id="PSHCREATEPROCESSINFOW"/>

<function name="SHCreateProcessAsUserW" ret="BOOL" convention="__stdcall">
 PSHCREATEPROCESSINFOW pscpi
</function>

<function name="SHEvaluateSystemCommandTemplate" ret="HRESULT" convention="__stdcall">
<arg name="pszCmdTemplate">PCWSTR</arg>
<arg name="ppszApplication">PWSTR *</arg>
<arg name="ppszCommandLine">PWSTR *</arg>
  PWSTR *ppszParameters
</function>
typedef enum ASSOCCLASS
{                               
    ASSOCCLASS_SHELL_KEY = 0,   
    ASSOCCLASS_PROGID_KEY,      
    ASSOCCLASS_PROGID_STR,      
    ASSOCCLASS_CLSID_KEY,       
    ASSOCCLASS_CLSID_STR,       
    ASSOCCLASS_APP_KEY,         
    ASSOCCLASS_APP_STR,         
    ASSOCCLASS_SYSTEM_STR,      
    ASSOCCLASS_FOLDER,          
    ASSOCCLASS_STAR,            
} ASSOCCLASS;
<struct name="ASSOCIATIONELEMENT_">
<field name="ac">ASSOCCLASS</field>
<field name="hkClass">HKEY</field>
<field name="pszClass">PCWSTR</field>
} ASSOCIATIONELEMENT;
<function name="AssocCreateForClasses" ret="HRESULT" convention="__stdcall">
<arg name="rgClasses">const ASSOCIATIONELEMENT *</arg>
<arg name="cClasses">ULONG </arg>
<arg name="riid">const IID * const </arg>
  void **ppv
</function>
<struct name="_SHQUERYRBINFO">
<field name="cbSize">DWORD</field>
<field name="i64Size">__int64</field>
<field name="i64NumItems">__int64</field>

} SHQUERYRBINFO, *LPSHQUERYRBINFO;
<function name="SHQueryRecycleBinA" ret="HRESULT" convention="__stdcall">
<arg name="pszRootPath">LPCSTR</arg>
  LPSHQUERYRBINFO pSHQueryRBInfo
</function>
<function name="SHQueryRecycleBinW" ret="HRESULT" convention="__stdcall">
<arg name="pszRootPath">LPCWSTR</arg>
  LPSHQUERYRBINFO pSHQueryRBInfo
</function>
<function name="SHEmptyRecycleBinA" ret="HRESULT" convention="__stdcall">
<arg name="hwnd">HWND</arg>
<arg name="pszRootPath">LPCSTR</arg>
 DWORD dwFlags
</function>
<function name="SHEmptyRecycleBinW" ret="HRESULT" convention="__stdcall">
<arg name="hwnd">HWND</arg>
<arg name="pszRootPath">LPCWSTR</arg>
 DWORD dwFlags
</function>
typedef enum
{
    QUNS_NOT_PRESENT               = 1,    
    QUNS_BUSY                      = 2,    
    QUNS_RUNNING_D3D_FULL_SCREEN   = 3,    
    QUNS_PRESENTATION_MODE         = 4,    
    QUNS_ACCEPTS_NOTIFICATIONS     = 5,    
} QUERY_USER_NOTIFICATION_STATE;

<function name="SHQueryUserNotificationState" ret="HRESULT" convention="__stdcall">
 QUERY_USER_NOTIFICATION_STATE *pquns
</function>

<struct name="_NOTIFYICONDATAA">
<field name="cbSize">DWORD</field>
<field name="hWnd">HWND</field>
<field name="uID">UINT</field>
<field name="uFlags">UINT</field>
<field name="uCallbackMessage">UINT</field>
<field name="hIcon">HICON</field>
<field name="szTip[128]">CHAR</field>
<field name="dwState">DWORD</field>
<field name="dwStateMask">DWORD</field>
<field name="szInfo[256]">CHAR</field>
    union {
        UINT  uTimeout;
        UINT  uVersion;  
    } ;
    CHAR   szInfoTitle[64];
    DWORD dwInfoFlags;
    GUID guidItem;
    HICON hBalloonIcon;

} NOTIFYICONDATAA, *PNOTIFYICONDATAA;
<struct name="_NOTIFYICONDATAW">
<field name="cbSize">DWORD</field>
<field name="hWnd">HWND</field>
<field name="uID">UINT</field>
<field name="uFlags">UINT</field>
<field name="uCallbackMessage">UINT</field>
<field name="hIcon">HICON</field>
<field name="szTip[128]">WCHAR</field>
<field name="dwState">DWORD</field>
<field name="dwStateMask">DWORD</field>
<field name="szInfo[256]">WCHAR</field>
    union {
        UINT  uTimeout;
        UINT  uVersion;  
    } ;
    WCHAR  szInfoTitle[64];
    DWORD dwInfoFlags;

    GUID guidItem;

    HICON hBalloonIcon;
} NOTIFYICONDATAW, *PNOTIFYICONDATAW;

typedef NOTIFYICONDATAA NOTIFYICONDATA;
typedef PNOTIFYICONDATAA PNOTIFYICONDATA;
<function name="Shell_NotifyIconA" ret="BOOL" convention="__stdcall">
<arg name="dwMessage">DWORD</arg>
  PNOTIFYICONDATAA lpData
</function>
<function name="Shell_NotifyIconW" ret="BOOL" convention="__stdcall">
<arg name="dwMessage">DWORD</arg>
  PNOTIFYICONDATAW lpData
</function>
<struct name="_SHFILEINFOA">
<field name="hIcon">HICON</field>
<field name="iIcon">int</field>
<field name="dwAttributes">DWORD</field>
<field name="szDisplayName[260]">CHAR</field>
<field name="szTypeName[80]">CHAR</field>
} SHFILEINFOA;
<struct name="_SHFILEINFOW">
<field name="hIcon">HICON</field>
<field name="iIcon">int</field>
<field name="dwAttributes">DWORD</field>
<field name="szDisplayName[260]">WCHAR</field>
<field name="szTypeName[80]">WCHAR</field>
} SHFILEINFOW;
typedef SHFILEINFOA SHFILEINFO;
                                                

<function name="SHGetFileInfoA" ret="extern __declspec(dllimport) DWORD_PTR" convention="__stdcall">
<arg name="pszPath">LPCSTR</arg>
<arg name="dwFileAttributes">DWORD</arg>
<arg name="psfi">SHFILEINFOA *</arg>
<arg name="uFlags">UINT cbFileInfo, UINT</arg>
</function>
<function name="SHGetFileInfoW" ret="DWORD_PTR" convention="__stdcall">
<arg name="pszPath">LPCWSTR</arg>
<arg name="dwFileAttributes">DWORD</arg>
<arg name="psfi">SHFILEINFOW *</arg>
<arg name="uFlags">UINT cbFileInfo, UINT</arg>
</function>

<struct name="_SHSTOCKICONINFO">
<field name="cbSize">DWORD</field>
<field name="hIcon">HICON</field>
<field name="iSysImageIndex">int</field>
<field name="iIcon">int</field>
<field name="szPath[260]">WCHAR</field>
} SHSTOCKICONINFO;

typedef enum SHSTOCKICONID
{
    SIID_DOCNOASSOC = 0,          
    SIID_DOCASSOC = 1,            
    SIID_APPLICATION = 2,         
    SIID_FOLDER = 3,              
    SIID_FOLDEROPEN = 4,          
    SIID_DRIVE525 = 5,            
    SIID_DRIVE35 = 6,             
    SIID_DRIVEREMOVE = 7,         
    SIID_DRIVEFIXED = 8,          
    SIID_DRIVENET = 9,            
    SIID_DRIVENETDISABLED = 10,   
    SIID_DRIVECD = 11,            
    SIID_DRIVERAM = 12,           
    SIID_WORLD = 13,              
    SIID_SERVER = 15,             
    SIID_PRINTER = 16,            
    SIID_MYNETWORK = 17,          
    SIID_FIND = 22,               
    SIID_HELP = 23,               
    SIID_SHARE = 28,              
    SIID_LINK = 29,               
    SIID_SLOWFILE = 30,           
    SIID_RECYCLER = 31,           
    SIID_RECYCLERFULL = 32,       
    SIID_MEDIACDAUDIO = 40,       
    SIID_LOCK = 47,               
    SIID_AUTOLIST = 49,           
    SIID_PRINTERNET = 50,         
    SIID_SERVERSHARE = 51,        
    SIID_PRINTERFAX = 52,         
    SIID_PRINTERFAXNET = 53,      
    SIID_PRINTERFILE = 54,        
    SIID_STACK = 55,              
    SIID_MEDIASVCD = 56,          
    SIID_STUFFEDFOLDER = 57,      
    SIID_DRIVEUNKNOWN = 58,       
    SIID_DRIVEDVD = 59,           
    SIID_MEDIADVD = 60,           
    SIID_MEDIADVDRAM = 61,        
    SIID_MEDIADVDRW = 62,         
    SIID_MEDIADVDR = 63,          
    SIID_MEDIADVDROM = 64,        
    SIID_MEDIACDAUDIOPLUS = 65,   
    SIID_MEDIACDRW = 66,          
    SIID_MEDIACDR = 67,           
    SIID_MEDIACDBURN = 68,        
    SIID_MEDIABLANKCD = 69,       
    SIID_MEDIACDROM = 70,         
    SIID_AUDIOFILES = 71,         
    SIID_IMAGEFILES = 72,         
    SIID_VIDEOFILES = 73,         
    SIID_MIXEDFILES = 74,         
    SIID_FOLDERBACK = 75,         
    SIID_FOLDERFRONT = 76,        
    SIID_SHIELD = 77,             
    SIID_WARNING = 78,            
    SIID_INFO = 79,               
    SIID_ERROR = 80,              
    SIID_KEY = 81,                
    SIID_SOFTWARE = 82,           
    SIID_RENAME = 83,             
    SIID_DELETE = 84,             
    SIID_MEDIAAUDIODVD = 85,      
    SIID_MEDIAMOVIEDVD = 86,      
    SIID_MEDIAENHANCEDCD = 87,    
    SIID_MEDIAENHANCEDDVD = 88,   
    SIID_MEDIAHDDVD = 89,         
    SIID_MEDIABLURAY = 90,        
    SIID_MEDIAVCD = 91,           
    SIID_MEDIADVDPLUSR = 92,      
    SIID_MEDIADVDPLUSRW = 93,     
    SIID_DESKTOPPC = 94,          
    SIID_MOBILEPC = 95,           
    SIID_USERS = 96,              
    SIID_MEDIASMARTMEDIA = 97,    
    SIID_MEDIACOMPACTFLASH = 98,  
    SIID_DEVICECELLPHONE = 99,    
    SIID_DEVICECAMERA = 100,      
    SIID_DEVICEVIDEOCAMERA = 101, 
    SIID_DEVICEAUDIOPLAYER = 102, 
    SIID_NETWORKCONNECT = 103,    
    SIID_INTERNET = 104,          
    SIID_ZIPFILE = 105,           
    SIID_SETTINGS = 106,          
    SIID_MAX_ICONS = 107,
} SHSTOCKICONID;

<function name="SHGetStockIconInfo" ret="HRESULT" convention="__stdcall">
<arg name="siid">SHSTOCKICONID</arg>
<arg name="uFlags">UINT</arg>
  SHSTOCKICONINFO *psii
</function>
<function name="SHGetDiskFreeSpaceExA" ret="BOOL" convention="__stdcall">
<arg name="pszDirectoryName">LPCSTR</arg>
<arg name="pulFreeBytesAvailableToCaller">ULARGE_INTEGER*</arg>
<arg name="pulTotalNumberOfBytes">ULARGE_INTEGER*</arg>
<arg name="pulTotalNumberOfFreeBytes">ULARGE_INTEGER*</arg>
</function>
<function name="SHGetDiskFreeSpaceExW" ret="BOOL" convention="__stdcall">
<arg name="pszDirectoryName">LPCWSTR</arg>
<arg name="pulFreeBytesAvailableToCaller">ULARGE_INTEGER*</arg>
<arg name="pulTotalNumberOfBytes">ULARGE_INTEGER*</arg>
<arg name="pulTotalNumberOfFreeBytes">ULARGE_INTEGER*</arg>
</function>

<function name="SHGetNewLinkInfoA" ret="BOOL" convention="__stdcall">
<arg name="pszLinkTo">LPCSTR</arg>
<arg name="pszDir">LPCSTR</arg>
<arg name="pszName">LPSTR</arg>
<arg name="pfMustCopy">BOOL *</arg>
  UINT uFlags
</function>
<function name="SHGetNewLinkInfoW" ret="BOOL" convention="__stdcall">
<arg name="pszLinkTo">LPCWSTR</arg>
<arg name="pszDir">LPCWSTR</arg>
<arg name="pszName">LPWSTR</arg>
<arg name="pfMustCopy">BOOL *</arg>
  UINT uFlags
</function>
<function name="SHInvokePrinterCommandA" ret="BOOL" convention="__stdcall">
<arg name="hwnd">HWND</arg>
<arg name="uAction">UINT</arg>
<arg name="lpBuf1">LPCSTR</arg>
<arg name="lpBuf2">LPCSTR</arg>
 BOOL fModal
</function>
<function name="SHInvokePrinterCommandW" ret="BOOL" convention="__stdcall">
<arg name="hwnd">HWND</arg>
<arg name="uAction">UINT</arg>
<arg name="lpBuf1">LPCWSTR</arg>
<arg name="lpBuf2">LPCWSTR</arg>
 BOOL fModal
</function>

<struct name="_OPEN_PRINTER_PROPS_INFOA">
<field name="dwSize">DWORD</field>
<field name="pszSheetName">LPSTR</field>
<field name="uSheetIndex">UINT</field>
<field name="dwFlags">DWORD</field>
<field name="bModal">BOOL</field>
</struct>
<typedefprev id="OPEN_PRINTER_PROPS_INFOA"/>
<typedefptrprev id="POPEN_PRINTER_PROPS_INFOA"/>
<struct name="_OPEN_PRINTER_PROPS_INFOW">
<field name="dwSize">DWORD</field>
<field name="pszSheetName">LPWSTR</field>
<field name="uSheetIndex">UINT</field>
<field name="dwFlags">DWORD</field>
<field name="bModal">BOOL</field>
</struct>
<typedefprev id="OPEN_PRINTER_PROPS_INFOW"/>
<typedefptrprev id="POPEN_PRINTER_PROPS_INFOW"/>

typedef OPEN_PRINTER_PROPS_INFOA OPEN_PRINTER_PROPS_INFO;
typedef POPEN_PRINTER_PROPS_INFOA POPEN_PRINTER_PROPS_INFO;
<function name="SHLoadNonloadedIconOverlayIdentifiers" ret="HRESULT" convention="__stdcall">
void
</function>

<function name="SHIsFileAvailableOffline" ret="HRESULT" convention="__stdcall">
<arg name="pwszPath">LPCWSTR</arg>
  LPDWORD pdwStatus
</function>

                                            
                                            
<function name="SHSetLocalizedName" ret="HRESULT" convention="__stdcall">
<arg name="pszPath">LPCWSTR</arg>
<arg name="pszResModule">LPCWSTR</arg>
 int idsRes
</function>
<function name="SHRemoveLocalizedName" ret="HRESULT" convention="__stdcall">
LPCWSTR pszPath
</function>

<function name="SHGetLocalizedName" ret="HRESULT" convention="__stdcall">
<arg name="pszPath">LPCWSTR</arg>
<arg name="pszResModule">LPWSTR</arg>
<arg name="cch">UINT</arg>
  int *pidsRes
</function>
<function name="ShellMessageBoxA" ret="int" convention="__cdecl">
<arg name="hAppInst">HINSTANCE</arg>
<arg name="hWnd">HWND</arg>
<arg name="lpcText">LPCSTR</arg>
<arg name="lpcTitle">LPCSTR</arg>
<arg name="fuStyle">UINT</arg>
 ...);
<function name="ShellMessageBoxW" ret="int" convention="__cdecl">
<arg name="hAppInst">HINSTANCE</arg>
<arg name="hWnd">HWND</arg>
<arg name="lpcText">LPCWSTR</arg>
<arg name="lpcTitle">LPCWSTR</arg>
<arg name="fuStyle">UINT</arg>
 ...);

<function name="IsLFNDriveA" ret="BOOL" convention="__stdcall">
LPCSTR pszPath
</function>
<function name="IsLFNDriveW" ret="BOOL" convention="__stdcall">
LPCWSTR pszPath
</function>
<function name="SHEnumerateUnreadMailAccountsA" ret="extern HRESULT" convention="__stdcall">
<arg name="hKeyUser">HKEY</arg>
<arg name="dwIndex">DWORD</arg>
<arg name="pszMailAddress">LPSTR</arg>
<arg name="cchMailAddress">int</arg>
</function>
<function name="SHEnumerateUnreadMailAccountsW" ret="extern HRESULT" convention="__stdcall">
<arg name="hKeyUser">HKEY</arg>
<arg name="dwIndex">DWORD</arg>
<arg name="pszMailAddress">LPWSTR</arg>
<arg name="cchMailAddress">int</arg>
</function>

<function name="SHGetUnreadMailCountA" ret="extern HRESULT" convention="__stdcall">
<arg name="hKeyUser">HKEY</arg>
<arg name="pszMailAddress">LPCSTR</arg>
<arg name="pdwCount">DWORD *</arg>
<arg name="pFileTime">FILETIME *</arg>
<arg name="pszShellExecuteCommand">LPSTR </arg>
 int cchShellExecuteCommand);
<function name="SHGetUnreadMailCountW" ret="extern HRESULT" convention="__stdcall">
<arg name="hKeyUser">HKEY</arg>
<arg name="pszMailAddress">LPCWSTR</arg>
<arg name="pdwCount">DWORD *</arg>
<arg name="pFileTime">FILETIME *</arg>
<arg name="pszShellExecuteCommand">LPWSTR </arg>
 int cchShellExecuteCommand);

<function name="SHSetUnreadMailCountA" ret="extern HRESULT" convention="__stdcall">
<arg name="pszMailAddress">LPCSTR</arg>
<arg name="dwCount">DWORD</arg>
<arg name="pszShellExecuteCommand">LPCSTR</arg>
</function>
<function name="SHSetUnreadMailCountW" ret="extern HRESULT" convention="__stdcall">
<arg name="pszMailAddress">LPCWSTR</arg>
<arg name="dwCount">DWORD</arg>
<arg name="pszShellExecuteCommand">LPCWSTR</arg>
</function>
<function name="SHTestTokenMembership" ret="extern BOOL" convention="__stdcall">
<arg name="hToken">HANDLE</arg>
<arg name="ulRID">ULONG</arg>
</function>

<function name="SHGetImageList" ret="HRESULT" convention="__stdcall">
<arg name="iImageList">int</arg>
<arg name="riid">const IID * const</arg>
  void **ppvObj
</function>

typedef<fnptr name="PFNCANSHAREFOLDERW" ret="HRESULT" convention="__stdcall">
LPCWSTR pszPath);
typedef<fnptr name="PFNSHOWSHAREFOLDERUIW" ret="HRESULT" convention="__stdcall">
<arg name="hwndParent">HWND</arg>
<arg name="pszPath">LPCWSTR</arg>
</function>
#line 1 "\\program files\\Microsoft SDKs\\Windows\\v6.0A\\Include\\poppack.h"
#pragma warning(disable:4103)

#pragma pack(pop)

#pragma warning(pop)
<function name="InitNetworkAddressControl" ret="BOOL" convention="__stdcall">

</function>
<struct name="tagNC_ADDRESS">
   struct NET_ADDRESS_INFO_ *pAddrInfo; 
   USHORT  PortNumber;
   BYTE    PrefixLength;
} NC_ADDRESS, *PNC_ADDRESS;

<function name="SHGetDriveMedia" ret="extern HRESULT" convention="__stdcall">
<arg name="pszDrive">LPCWSTR</arg>
  DWORD *pdwMediaContent);
#line 1 "\\program files\\Microsoft SDKs\\Windows\\v6.0A\\Include\\winperf.h"
#pragma once
#line 1 "\\program files\\Microsoft SDKs\\Windows\\v6.0A\\Include\\pshpack8.h"
#pragma warning(disable:4103)

#pragma pack(push,8)
<struct name="_PERF_DATA_BLOCK">
    WCHAR           Signature[4];       
    DWORD           LittleEndian;       
    DWORD           Version;            
                                        
    DWORD           Revision;           
                                        
    DWORD           TotalByteLength;    
    DWORD           HeaderLength;       
    DWORD           NumObjectTypes;     
                                        
    LONG            DefaultObject;      
                                        
                                        
                                        
                                        
    SYSTEMTIME      SystemTime;         
                                        
    LARGE_INTEGER   PerfTime;           
                                        
    LARGE_INTEGER   PerfFreq;           
                                        
    LARGE_INTEGER   PerfTime100nSec;    
                                        
    DWORD           SystemNameLength;   
    DWORD           SystemNameOffset;   
                                        
                                        
} PERF_DATA_BLOCK, *PPERF_DATA_BLOCK;
<struct name="_PERF_OBJECT_TYPE">
<field name="TotalByteLength">DWORD</field>
                                        
                                        
                                        
                                        
                                        
                                        
                                        
    DWORD           DefinitionLength;   
                                        
                                        
                                        
                                        
                                        
                                        
                                        
    DWORD           HeaderLength;       
                                        
                                        
                                        
    DWORD           ObjectNameTitleIndex;
                                        
    LPWSTR          ObjectNameTitle;    
                                        
                                        
    DWORD           ObjectHelpTitleIndex;
                                        
    LPWSTR          ObjectHelpTitle;    
                                        
                                        
    DWORD           DetailLevel;        
                                        
                                        
                                        
    DWORD           NumCounters;        
                                        
                                        
    LONG            DefaultCounter;     
                                        
                                        
                                        
    LONG            NumInstances;       
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
    DWORD           CodePage;           
                                        
                                        
    LARGE_INTEGER   PerfTime;           
                                        
    LARGE_INTEGER   PerfFreq;           
                                        
} PERF_OBJECT_TYPE, *PPERF_OBJECT_TYPE;
                                            
                                        

<struct name="_PERF_COUNTER_DEFINITION">
<field name="ByteLength">DWORD</field>
<field name="CounterNameTitleIndex">DWORD</field>
                                        
                                        
    LPWSTR          CounterNameTitle;   
                                        
                                        

    DWORD           CounterHelpTitleIndex;
                                        
                                        
    LPWSTR          CounterHelpTitle;   
                                        
                                        

    LONG            DefaultScale;       
                                        
                                        
    DWORD           DetailLevel;        
                                        
    DWORD           CounterType;        
    DWORD           CounterSize;        
    DWORD           CounterOffset;      
                                        
                                        
} PERF_COUNTER_DEFINITION, *PPERF_COUNTER_DEFINITION;

<struct name="_PERF_INSTANCE_DEFINITION">
<field name="ByteLength">DWORD</field>
                                        
    DWORD           ParentObjectTitleIndex;
                                        
                                        
                                        
                                        
                                        
    DWORD           ParentObjectInstance;
                                        
                                        
                                        
    LONG            UniqueID;           
                                        
                                        
    DWORD           NameOffset;         
                                        
                                        
    DWORD           NameLength;         
                                        
                                        
                                        
                                        
                                        
} PERF_INSTANCE_DEFINITION, *PPERF_INSTANCE_DEFINITION;

<struct name="_PERF_COUNTER_BLOCK">
<field name="ByteLength">DWORD</field>
                                        
} PERF_COUNTER_BLOCK, *PPERF_COUNTER_BLOCK;
typedef DWORD (__stdcall PM_OPEN_PROC) ( LPWSTR);
typedef DWORD (__stdcall PM_COLLECT_PROC) ( LPWSTR, LPVOID *, LPDWORD, LPDWORD);
typedef DWORD (__stdcall PM_CLOSE_PROC) (void);
typedef DWORD (__stdcall PM_QUERY_PROC) (LPDWORD, LPVOID *, LPDWORD, LPDWORD);
#line 1 "\\program files\\Microsoft SDKs\\Windows\\v6.0A\\Include\\poppack.h"
#pragma warning(disable:4103)

#pragma pack(pop)
#line 1 "\\program files\\Microsoft SDKs\\Windows\\v6.0A\\Include\\winsock.h"

#pragma once
typedef unsigned char   u_char;
typedef unsigned short  u_short;
typedef unsigned int    u_int;
typedef unsigned long   u_long;

typedef UINT_PTR        SOCKET;
<struct name="fd_set">
<field name="fd_count">u_int</field>
<field name="fd_array[64]">SOCKET</field>
} fd_set;
<function name="__WSAFDIsSet" ret="extern int" convention="__stdcall">
SOCKET, fd_set  *);
<struct name="timeval">

        long    tv_sec;         
        long    tv_usec;        
};

                                        
<struct name="hostent">

        char     * h_name;           
        char     *  * h_aliases;  
        short   h_addrtype;             
        short   h_length;               
        char     *  * h_addr_list; 

};
<struct name="netent">

        char     * n_name;           
        char     *  * n_aliases;  
        short   n_addrtype;             
        u_long  n_net;                  
};

<struct name="servent">

        char     * s_name;           
        char     *  * s_aliases;  

        short   s_port;                 
        char     * s_proto;          
};

<struct name="protoent">

        char     * p_name;           
        char     *  * p_aliases;  
        short   p_proto;                
};

                                        

#line 1 "\\program files\\Microsoft SDKs\\Windows\\v6.0A\\Include\\inaddr.h"

#pragma once
<struct name="in_addr">
        union {
<struct> UCHAR s_b1,s_b2,s_b3,s_b4; } S_un_b;
<struct> USHORT s_w1,s_w2; } S_un_w;
                ULONG S_addr;
        } S_un;

} IN_ADDR, *PIN_ADDR,  *LPIN_ADDR;

<struct name="sockaddr_in">

        short   sin_family;
        u_short sin_port;
        struct  in_addr sin_addr;
        char    sin_zero[8];
};

<struct name="WSAData">
<field name="wVersion">WORD</field>
<field name="wHighVersion">WORD</field>
<field name="szDescription[256+1]">char</field>
<field name="szSystemStatus[128+1]">char</field>
        unsigned short          iMaxSockets;
        unsigned short          iMaxUdpDg;
        char  *              lpVendorInfo;

} WSADATA;

typedef WSADATA  *LPWSADATA;
<struct name="ip_mreq">

        struct in_addr  imr_multiaddr;  
        struct in_addr  imr_interface;  
};

<struct name="sockaddr">

        u_short sa_family;              
        char    sa_data[14];            
};
<struct name="sockproto">

        u_short sp_family;              
        u_short sp_protocol;            
};
<struct name="linger">

        u_short l_onoff;                
        u_short l_linger;               
};
<function name="accept" ret="SOCKET" convention="__stdcall">
<arg name="s">SOCKET</arg>

                           struct sockaddr  *addr,
                            int  *addrlen);

<function name="bind" ret="int" convention="__stdcall">
<arg name="s">SOCKET</arg>

                      const struct sockaddr  *addr,
                      int namelen);

<function name="closesocket" ret="int" convention="__stdcall">
<arg name="s">SOCKET</arg>
</function>

<function name="connect" ret="int" convention="__stdcall">
<arg name="s">SOCKET</arg>

                         const struct sockaddr  *name,
                         int namelen);

<function name="ioctlsocket" ret="int" convention="__stdcall">
<arg name="s">SOCKET</arg>
<arg name="cmd">long</arg>

                              u_long  *argp);

<function name="getpeername" ret="int" convention="__stdcall">
<arg name="s">SOCKET</arg>

                             struct sockaddr  *name,
                              int  * namelen);

<function name="getsockname" ret="int" convention="__stdcall">
<arg name="s">SOCKET</arg>

                             struct sockaddr  *name,
                              int  * namelen);

<function name="getsockopt" ret="int" convention="__stdcall">
<arg name="s">SOCKET</arg>
<arg name="level">int</arg>
<arg name="optname">int</arg>
<arg name="optval">char  *</arg>

                             int  *optlen);

<function name="htonl" ret="u_long" convention="__stdcall">
<arg name="hostlong">u_long</arg>
</function>

<function name="htons" ret="u_short" convention="__stdcall">
<arg name="hostshort">u_short</arg>
</function>

<function name="inet_addr" ret="unsigned long" convention="__stdcall">
<arg name="cp">const char  *</arg>
</function>

<function name="inet_ntoa" ret="char  *" convention="__stdcall">
<arg name="in">in_addr</arg>
</function>

<function name="listen" ret="int" convention="__stdcall">
<arg name="s">SOCKET</arg>
<arg name="backlog">int</arg>
</function>

<function name="ntohl" ret="u_long" convention="__stdcall">
<arg name="netlong">u_long</arg>
</function>

<function name="ntohs" ret="u_short" convention="__stdcall">
<arg name="netshort">u_short</arg>
</function>

<function name="recv" ret="int" convention="__stdcall">
<arg name="s">SOCKET</arg>
<arg name="buf">char  *</arg>
<arg name="len">int</arg>
<arg name="flags">int</arg>
</function>

<function name="recvfrom" ret="int" convention="__stdcall">
<arg name="s">SOCKET</arg>
<arg name="buf">char  *</arg>
<arg name="len">int</arg>
<arg name="flags">int</arg>
<arg name="from">sockaddr  *</arg>
<arg name="fromlen">int  *</arg>
</function>

<function name="select" ret="int" convention="__stdcall">
<arg name="nfds">int</arg>

                          fd_set  *readfds,
                          fd_set  *writefds,
                          fd_set  *exceptfds,
                         const struct timeval  *timeout);

<function name="send" ret="int" convention="__stdcall">
<arg name="s">SOCKET</arg>
<arg name="buf">const char  *</arg>
<arg name="len">int</arg>
<arg name="flags">int</arg>
</function>

<function name="sendto" ret="int" convention="__stdcall">
<arg name="s">SOCKET</arg>
<arg name="buf">const char  *</arg>
<arg name="len">int</arg>
<arg name="flags">int</arg>

                        const struct sockaddr  *to,
                        int tolen);

<function name="setsockopt" ret="int" convention="__stdcall">
<arg name="s">SOCKET</arg>
<arg name="level">int</arg>
<arg name="optname">int</arg>
<arg name="optval">const char  *</arg>
<arg name="optlen">int</arg>
</function>

<function name="shutdown" ret="int" convention="__stdcall">
<arg name="s">SOCKET</arg>
<arg name="how">int</arg>
</function>

<function name="socket" ret="SOCKET" convention="__stdcall">
<arg name="af">int</arg>
<arg name="type">int</arg>
<arg name="protocol">int</arg>
</function>
<function name="gethostbyaddr" ret="hostent  *" convention="__stdcall">
<arg name="addr">const char  *</arg>
<arg name="len">int</arg>
<arg name="type">int</arg>
</function>

<function name="gethostbyname" ret="hostent  *" convention="__stdcall">
<arg name="name">const char  *</arg>
</function>

<function name="gethostname" ret="int" convention="__stdcall">
<arg name="name">char  *</arg>
<arg name="namelen">int</arg>
</function>

<function name="getservbyport" ret="servent  *" convention="__stdcall">
<arg name="port">int</arg>
<arg name="proto">const char  *</arg>
</function>

<function name="getservbyname" ret="servent  *" convention="__stdcall">
<arg name="name">const char  *</arg>
<arg name="proto">const char  *</arg>
</function>

<function name="getprotobynumber" ret="protoent  *" convention="__stdcall">
<arg name="proto">int</arg>
</function>

<function name="getprotobyname" ret="protoent  *" convention="__stdcall">
<arg name="name">const char  *</arg>
</function>
<function name="WSAStartup" ret="int" convention="__stdcall">
<arg name="wVersionRequired">WORD</arg>
<arg name="lpWSAData">LPWSADATA</arg>
</function>

<function name="WSACleanup" ret="int" convention="__stdcall">
void);

<function name="WSASetLastError" ret="void" convention="__stdcall">
<arg name="iError">int</arg>
</function>

<function name="WSAGetLastError" ret="int" convention="__stdcall">
void);

<function name="WSAIsBlocking" ret="BOOL" convention="__stdcall">
void);

<function name="WSAUnhookBlockingHook" ret="int" convention="__stdcall">
void);

<function name="WSASetBlockingHook" ret="FARPROC" convention="__stdcall">
<arg name="lpBlockFunc">FARPROC</arg>
</function>

<function name="WSACancelBlockingCall" ret="int" convention="__stdcall">
void);

<function name="WSAAsyncGetServByName" ret="HANDLE" convention="__stdcall">
<arg name="hWnd">HWND</arg>
<arg name="wMsg">u_int</arg>
<arg name="name">const char  *</arg>
<arg name="proto">const char  *</arg>
<arg name="buf">char  *</arg>
<arg name="buflen">int</arg>
</function>

<function name="WSAAsyncGetServByPort" ret="HANDLE" convention="__stdcall">
<arg name="hWnd">HWND</arg>
<arg name="wMsg">u_int</arg>
<arg name="port">int</arg>
<arg name="proto">const char  *</arg>
<arg name="buf">char  *</arg>
<arg name="buflen">int</arg>
</function>

<function name="WSAAsyncGetProtoByName" ret="HANDLE" convention="__stdcall">
<arg name="hWnd">HWND</arg>
<arg name="wMsg">u_int</arg>
<arg name="name">const char  *</arg>
<arg name="buf">char  *</arg>
<arg name="buflen">int</arg>
</function>

<function name="WSAAsyncGetProtoByNumber" ret="HANDLE" convention="__stdcall">
<arg name="hWnd">HWND</arg>
<arg name="wMsg">u_int</arg>
<arg name="number">int</arg>
<arg name="buf">char  *</arg>
<arg name="buflen">int</arg>
</function>

<function name="WSAAsyncGetHostByName" ret="HANDLE" convention="__stdcall">
<arg name="hWnd">HWND</arg>
<arg name="wMsg">u_int</arg>
<arg name="name">const char  *</arg>
<arg name="buf">char  *</arg>
<arg name="buflen">int</arg>
</function>

<function name="WSAAsyncGetHostByAddr" ret="HANDLE" convention="__stdcall">
<arg name="hWnd">HWND</arg>
<arg name="wMsg">u_int</arg>
<arg name="addr">const char  *</arg>
<arg name="len">int</arg>
<arg name="type">int</arg>
<arg name="buf">char  *</arg>
<arg name="buflen">int</arg>
</function>

<function name="WSACancelAsyncRequest" ret="int" convention="__stdcall">
<arg name="hAsyncTaskHandle">HANDLE</arg>
</function>

<function name="WSAAsyncSelect" ret="int" convention="__stdcall">
<arg name="s">SOCKET</arg>
<arg name="hWnd">HWND</arg>
<arg name="wMsg">u_int</arg>
<arg name="lEvent">long</arg>
</function>

<function name="WSARecvEx" ret="int" convention="__stdcall">
<arg name="s">SOCKET</arg>
<arg name="buf">char  *</arg>
<arg name="len">int</arg>

                            int  *flags);

<struct name="_TRANSMIT_FILE_BUFFERS">
<field name="Head">PVOID</field>
<field name="HeadLength">DWORD</field>
<field name="Tail">PVOID</field>
<field name="TailLength">DWORD</field>
} TRANSMIT_FILE_BUFFERS, *PTRANSMIT_FILE_BUFFERS, *LPTRANSMIT_FILE_BUFFERS;
BOOL
__stdcall 
TransmitFile (
     SOCKET hSocket,
     HANDLE hFile,
     DWORD nNumberOfBytesToWrite,
     DWORD nNumberOfBytesPerSend,
     LPOVERLAPPED lpOverlapped,
     LPTRANSMIT_FILE_BUFFERS lpTransmitBuffers,
<arg name="dwReserved">DWORD</arg>
</function>

BOOL
__stdcall 
AcceptEx (
     SOCKET sListenSocket,
     SOCKET sAcceptSocket,
     PVOID lpOutputBuffer,
     DWORD dwReceiveDataLength,
     DWORD dwLocalAddressLength,
     DWORD dwRemoteAddressLength,
     LPDWORD lpdwBytesReceived,
<arg name="lpOverlapped">LPOVERLAPPED</arg>
</function>

void
__stdcall 
GetAcceptExSockaddrs (
     PVOID lpOutputBuffer,
     DWORD dwReceiveDataLength,
     DWORD dwLocalAddressLength,
     DWORD dwRemoteAddressLength,
     struct sockaddr **LocalSockaddr,
     LPINT LocalSockaddrLength,
     struct sockaddr **RemoteSockaddr,
<arg name="RemoteSockaddrLength">LPINT</arg>
</function>

typedef struct sockaddr SOCKADDR;
<typedef name="PSOCKADDR">sockaddr *</typedef>
<typedef name="LPSOCKADDR">sockaddr  *</typedef>

typedef struct sockaddr_in SOCKADDR_IN;
<typedef name="PSOCKADDR_IN">sockaddr_in *</typedef>
<typedef name="LPSOCKADDR_IN">sockaddr_in  *</typedef>

typedef struct linger LINGER;
<typedef name="PLINGER">linger *</typedef>
<typedef name="LPLINGER">linger  *</typedef>

typedef struct fd_set FD_SET;
<typedef name="PFD_SET">fd_set *</typedef>
<typedef name="LPFD_SET">fd_set  *</typedef>

typedef struct hostent HOSTENT;
<typedef name="PHOSTENT">hostent *</typedef>
<typedef name="LPHOSTENT">hostent  *</typedef>

typedef struct servent SERVENT;
<typedef name="PSERVENT">servent *</typedef>
<typedef name="LPSERVENT">servent  *</typedef>

typedef struct protoent PROTOENT;
<typedef name="PPROTOENT">protoent *</typedef>
<typedef name="LPPROTOENT">protoent  *</typedef>

typedef struct timeval TIMEVAL;
<typedef name="PTIMEVAL">timeval *</typedef>
<typedef name="LPTIMEVAL">timeval  *</typedef>
#line 1 "\\program files\\Microsoft SDKs\\Windows\\v6.0A\\Include\\wincrypt.h"

#pragma warning(push)

#pragma warning(disable:4201)    

#pragma once

typedef unsigned int ALG_ID;
typedef ULONG_PTR HCRYPTPROV;
typedef ULONG_PTR HCRYPTKEY;
typedef ULONG_PTR HCRYPTHASH;

                                            
                                            

<struct name="_CMS_KEY_INFO">
<field name="dwVersion">DWORD</field>
<field name="Algid">ALG_ID</field>
    BYTE    *pbOID;                             
    DWORD   cbOID;                              
} CMS_KEY_INFO, *PCMS_KEY_INFO;
<struct name="_HMAC_Info">
<field name="HashAlgid">ALG_ID</field>
    BYTE    *pbInnerString;
    DWORD   cbInnerString;
    BYTE    *pbOuterString;
    DWORD   cbOuterString;
} HMAC_INFO, *PHMAC_INFO;
<struct name="_SCHANNEL_ALG">
<field name="dwUse">DWORD</field>
<field name="Algid">ALG_ID</field>
<field name="cBits">DWORD</field>
<field name="dwFlags">DWORD</field>
<field name="dwReserved">DWORD</field>
</struct>
<typedefprev id="SCHANNEL_ALG"/>
<typedefptrprev id="PSCHANNEL_ALG"/>

<struct name="_PROV_ENUMALGS">
<field name="aiAlgid">ALG_ID</field>
<field name="dwBitLen">DWORD</field>
<field name="dwNameLen">DWORD</field>
<field name="szName[20]">CHAR</field>
} PROV_ENUMALGS;
<struct name="_PROV_ENUMALGS_EX">
<field name="aiAlgid">ALG_ID</field>
<field name="dwDefaultLen">DWORD</field>
<field name="dwMinLen">DWORD</field>
<field name="dwMaxLen">DWORD</field>
<field name="dwProtocols">DWORD</field>
<field name="dwNameLen">DWORD</field>
<field name="szName[20]">CHAR</field>
<field name="dwLongNameLen">DWORD</field>
<field name="szLongName[40]">CHAR</field>
} PROV_ENUMALGS_EX;
<struct name="_PUBLICKEYSTRUC">
<field name="bType">BYTE</field>
<field name="bVersion">BYTE</field>
<field name="reserved">WORD</field>
<field name="aiKeyAlg">ALG_ID</field>
} BLOBHEADER, PUBLICKEYSTRUC;

<struct name="_RSAPUBKEY">
<field name="magic">DWORD</field>
<field name="bitlen">DWORD</field>
<field name="pubexp">DWORD</field>
                                        
} RSAPUBKEY;

<struct name="_PUBKEY">
<field name="magic">DWORD</field>
<field name="bitlen">DWORD</field>
} DHPUBKEY, DSSPUBKEY, KEAPUBKEY, TEKPUBKEY;

<struct name="_DSSSEED">
<field name="counter">DWORD</field>
<field name="seed[20]">BYTE</field>
} DSSSEED;

<struct name="_PUBKEYVER3">
<field name="magic">DWORD</field>
<field name="bitlenP">DWORD</field>
<field name="bitlenQ">DWORD</field>
<field name="bitlenJ">DWORD</field>
<field name="DSSSeed">DSSSEED</field>
} DHPUBKEY_VER3, DSSPUBKEY_VER3;

<struct name="_PRIVKEYVER3">
<field name="magic">DWORD</field>
<field name="bitlenP">DWORD</field>
<field name="bitlenQ">DWORD</field>
<field name="bitlenJ">DWORD</field>
<field name="bitlenX">DWORD</field>
<field name="DSSSeed">DSSSEED</field>
} DHPRIVKEY_VER3, DSSPRIVKEY_VER3;

<struct name="_KEY_TYPE_SUBTYPE">
<field name="dwKeySpec">DWORD</field>
<field name="Type">GUID</field>
<field name="Subtype">GUID</field>
</struct>
<typedefprev id="KEY_TYPE_SUBTYPE"/>
<typedefptrprev id="PKEY_TYPE_SUBTYPE"/>

<struct name="_CERT_FORTEZZA_DATA_PROP">
    unsigned char   SerialNumber[8];
    int             CertIndex;
    unsigned char   CertLabel[36];
} CERT_FORTEZZA_DATA_PROP;
<struct name="_CRYPT_RC4_KEY_STATE">
    unsigned char Key[16];
    unsigned char SBox[256];
    unsigned char i;
    unsigned char j;
} CRYPT_RC4_KEY_STATE, *PCRYPT_RC4_KEY_STATE;

<struct name="_CRYPT_DES_KEY_STATE">
    unsigned char Key[8];
    unsigned char IV[8];
    unsigned char Feedback[8];
} CRYPT_DES_KEY_STATE, *PCRYPT_DES_KEY_STATE;

<struct name="_CRYPT_3DES_KEY_STATE">
    unsigned char Key[24];
    unsigned char IV[8];
    unsigned char Feedback[8];
} CRYPT_3DES_KEY_STATE, *PCRYPT_3DES_KEY_STATE;

<struct name="_CRYPT_AES_128_KEY_STATE">
    unsigned char Key[16];
    unsigned char IV[16];
    unsigned char EncryptionState[11][16];      
    unsigned char DecryptionState[11][16];
    unsigned char Feedback[16];
} CRYPT_AES_128_KEY_STATE, *PCRYPT_AES_128_KEY_STATE;

<struct name="_CRYPT_AES_256_KEY_STATE">
    unsigned char Key[32];
    unsigned char IV[16];
    unsigned char EncryptionState[15][16];      
    unsigned char DecryptionState[15][16];
    unsigned char Feedback[16];
} CRYPT_AES_256_KEY_STATE, *PCRYPT_AES_256_KEY_STATE;
<struct name="_CRYPTOAPI_BLOB">
<field name="cbData">DWORD</field>
      BYTE    *pbData;
} CRYPT_INTEGER_BLOB, *PCRYPT_INTEGER_BLOB,
CRYPT_UINT_BLOB, *PCRYPT_UINT_BLOB,
CRYPT_OBJID_BLOB, *PCRYPT_OBJID_BLOB,
CERT_NAME_BLOB, *PCERT_NAME_BLOB,
CERT_RDN_VALUE_BLOB, *PCERT_RDN_VALUE_BLOB,
CERT_BLOB, *PCERT_BLOB,
CRL_BLOB, *PCRL_BLOB,
DATA_BLOB, *PDATA_BLOB,
CRYPT_DATA_BLOB, *PCRYPT_DATA_BLOB,
CRYPT_HASH_BLOB, *PCRYPT_HASH_BLOB,
CRYPT_DIGEST_BLOB, *PCRYPT_DIGEST_BLOB,
CRYPT_DER_BLOB, *PCRYPT_DER_BLOB,
CRYPT_ATTR_BLOB, *PCRYPT_ATTR_BLOB;
<struct name="_CMS_DH_KEY_INFO">
<field name="dwVersion">DWORD</field>
<field name="Algid">ALG_ID</field>
<field name="pszContentEncObjId">LPSTR</field>
<field name="PubInfo">CRYPT_DATA_BLOB</field>
    void            *pReserved;         
} CMS_DH_KEY_INFO, *PCMS_DH_KEY_INFO;
<function name="CryptAcquireContextA" ret="BOOL" convention="__stdcall">
<arg name="phProv">HCRYPTPROV  *</arg>

        LPCSTR    szContainer,
        LPCSTR    szProvider,
            DWORD       dwProvType,
<arg name="dwFlags">DWORD      </arg>
</function>
<function name="CryptAcquireContextW" ret="BOOL" convention="__stdcall">
<arg name="phProv">HCRYPTPROV  *</arg>

        LPCWSTR    szContainer,
        LPCWSTR    szProvider,
            DWORD       dwProvType,
<arg name="dwFlags">DWORD      </arg>
</function>

<function name="CryptReleaseContext" ret="BOOL" convention="__stdcall">
<arg name="hProv">HCRYPTPROV </arg>
<arg name="dwFlags">DWORD      </arg>
</function>

<function name="CryptGenKey" ret="BOOL" convention="__stdcall">
<arg name="hProv">HCRYPTPROV </arg>
<arg name="Algid">ALG_ID     </arg>
<arg name="dwFlags">DWORD      </arg>
<arg name="phKey">HCRYPTKEY   *</arg>
</function>

<function name="CryptDeriveKey" ret="BOOL" convention="__stdcall">
<arg name="hProv">HCRYPTPROV </arg>
<arg name="Algid">ALG_ID     </arg>
<arg name="hBaseData">HCRYPTHASH </arg>
<arg name="dwFlags">DWORD      </arg>
<arg name="phKey">HCRYPTKEY   *</arg>
</function>

<function name="CryptDestroyKey" ret="BOOL" convention="__stdcall">
<arg name="hKey">HCRYPTKEY  </arg>
</function>
<function name="CryptSetKeyParam" ret="BOOL" convention="__stdcall">
<arg name="hKey">HCRYPTKEY  </arg>
<arg name="dwParam">DWORD      </arg>

        const BYTE  *pbData,
<arg name="dwFlags">DWORD      </arg>
</function>
<function name="CryptGetKeyParam" ret="BOOL" convention="__stdcall">
<arg name="hKey">HCRYPTKEY  </arg>
<arg name="dwParam">DWORD  </arg>

     BYTE    *pbData,
                                         DWORD   *pdwDataLen,
<arg name="dwFlags">DWORD  </arg>
</function>
<function name="CryptSetHashParam" ret="BOOL" convention="__stdcall">
<arg name="hHash">HCRYPTHASH </arg>
<arg name="dwParam">DWORD      </arg>

        const BYTE  *pbData,
<arg name="dwFlags">DWORD      </arg>
</function>
<function name="CryptGetHashParam" ret="BOOL" convention="__stdcall">
<arg name="hHash">HCRYPTHASH </arg>
<arg name="dwParam">DWORD  </arg>

     BYTE    *pbData,
                                         DWORD   *pdwDataLen,
<arg name="dwFlags">DWORD  </arg>
</function>
<function name="CryptSetProvParam" ret="BOOL" convention="__stdcall">
<arg name="hProv">HCRYPTPROV </arg>
<arg name="dwParam">DWORD      </arg>

        const BYTE  *pbData,
<arg name="dwFlags">DWORD      </arg>
</function>
<function name="CryptGetProvParam" ret="BOOL" convention="__stdcall">
<arg name="hProv">HCRYPTPROV </arg>
<arg name="dwParam">DWORD  </arg>

     BYTE    *pbData,
                                             DWORD   *pdwDataLen,
<arg name="dwFlags">DWORD  </arg>
</function>

<function name="CryptGenRandom" ret="BOOL" convention="__stdcall">
<arg name="hProv">HCRYPTPROV </arg>
<arg name="dwLen">DWORD  </arg>
<arg name="pbBuffer">BYTE    *</arg>
</function>

<function name="CryptGetUserKey" ret="BOOL" convention="__stdcall">
<arg name="hProv">HCRYPTPROV </arg>
<arg name="dwKeySpec">DWORD      </arg>
<arg name="phUserKey">HCRYPTKEY   *</arg>
</function>

<function name="CryptExportKey" ret="BOOL" convention="__stdcall">
<arg name="hKey">HCRYPTKEY  </arg>
<arg name="hExpKey">HCRYPTKEY  </arg>
<arg name="dwBlobType">DWORD  </arg>
<arg name="dwFlags">DWORD  </arg>

     BYTE    *pbData,
<arg name="pdwDataLen">DWORD   *</arg>
</function>

<function name="CryptImportKey" ret="BOOL" convention="__stdcall">
<arg name="hProv">HCRYPTPROV </arg>

      const BYTE  *pbData,
                        DWORD       dwDataLen,
                        HCRYPTKEY   hPubKey,
                        DWORD       dwFlags,
<arg name="phKey">HCRYPTKEY   *</arg>
</function>

<function name="CryptEncrypt" ret=" BOOL" convention="__stdcall">
<arg name="hKey">HCRYPTKEY  </arg>
<arg name="hHash">HCRYPTHASH </arg>
<arg name="Final">BOOL   </arg>
<arg name="dwFlags">DWORD  </arg>

          BYTE    *pbData,
                                         DWORD   *pdwDataLen,
<arg name="dwBufLen">DWORD  </arg>
</function>

<function name="CryptDecrypt" ret="BOOL" convention="__stdcall">
<arg name="hKey">HCRYPTKEY  </arg>
<arg name="hHash">HCRYPTHASH </arg>
<arg name="Final">BOOL       </arg>
<arg name="dwFlags">DWORD      </arg>

       BYTE        *pbData,
<arg name="pdwDataLen">DWORD       *</arg>
</function>

<function name="CryptCreateHash" ret="BOOL" convention="__stdcall">
<arg name="hProv">HCRYPTPROV </arg>
<arg name="Algid">ALG_ID     </arg>
<arg name="hKey">HCRYPTKEY  </arg>
<arg name="dwFlags">DWORD      </arg>
<arg name="phHash">HCRYPTHASH  *</arg>
</function>

<function name="CryptHashData" ret="BOOL" convention="__stdcall">
<arg name="hHash">HCRYPTHASH </arg>

      const BYTE  *pbData,
                        DWORD   dwDataLen,
<arg name="dwFlags">DWORD  </arg>
</function>

<function name="CryptHashSessionKey" ret="BOOL" convention="__stdcall">
<arg name="hHash">HCRYPTHASH </arg>
<arg name="hKey">HCRYPTKEY  </arg>
<arg name="dwFlags">DWORD  </arg>
</function>

<function name="CryptDestroyHash" ret="BOOL" convention="__stdcall">
<arg name="hHash">HCRYPTHASH </arg>
</function>
<function name="CryptSignHashA" ret="BOOL" convention="__stdcall">
<arg name="hHash">HCRYPTHASH </arg>
<arg name="dwKeySpec">DWORD      </arg>
<arg name="szDescription">LPCSTR   </arg>
<arg name="dwFlags">DWORD      </arg>

     BYTE        *pbSignature,
<arg name="pdwSigLen">DWORD       *</arg>
</function>
<function name="CryptSignHashW" ret="BOOL" convention="__stdcall">
<arg name="hHash">HCRYPTHASH </arg>
<arg name="dwKeySpec">DWORD      </arg>
<arg name="szDescription">LPCWSTR   </arg>
<arg name="dwFlags">DWORD      </arg>

     BYTE        *pbSignature,
<arg name="pdwSigLen">DWORD       *</arg>
</function>

<function name="CryptVerifySignatureA" ret="BOOL" convention="__stdcall">
<arg name="hHash">HCRYPTHASH </arg>

       const BYTE  *pbSignature,
                        DWORD       dwSigLen,
                        HCRYPTKEY   hPubKey,
                        LPCSTR    szDescription,
<arg name="dwFlags">DWORD      </arg>
</function>
<function name="CryptVerifySignatureW" ret="BOOL" convention="__stdcall">
<arg name="hHash">HCRYPTHASH </arg>

       const BYTE  *pbSignature,
                        DWORD       dwSigLen,
                        HCRYPTKEY   hPubKey,
                        LPCWSTR    szDescription,
<arg name="dwFlags">DWORD      </arg>
</function>

<function name="CryptSetProviderA" ret="BOOL" convention="__stdcall">
<arg name="pszProvName">LPCSTR   </arg>
<arg name="dwProvType">DWORD      </arg>
</function>
<function name="CryptSetProviderW" ret="BOOL" convention="__stdcall">
<arg name="pszProvName">LPCWSTR   </arg>
<arg name="dwProvType">DWORD      </arg>
</function>
<function name="CryptSetProviderExA" ret="BOOL" convention="__stdcall">
<arg name="pszProvName">LPCSTR</arg>
<arg name="dwProvType">DWORD</arg>

      DWORD *pdwReserved,
<arg name="dwFlags">DWORD</arg>
</function>
<function name="CryptSetProviderExW" ret="BOOL" convention="__stdcall">
<arg name="pszProvName">LPCWSTR</arg>
<arg name="dwProvType">DWORD</arg>

      DWORD *pdwReserved,
<arg name="dwFlags">DWORD</arg>
</function>
<function name="CryptGetDefaultProviderA" ret="BOOL" convention="__stdcall">
<arg name="dwProvType">DWORD  </arg>

                                          DWORD   *pdwReserved,
                                                DWORD   dwFlags,
       LPSTR pszProvName,
<arg name="pcbProvName">DWORD   *</arg>
</function>
<function name="CryptGetDefaultProviderW" ret="BOOL" convention="__stdcall">
<arg name="dwProvType">DWORD  </arg>

                                          DWORD   *pdwReserved,
                                                DWORD   dwFlags,
       LPWSTR pszProvName,
<arg name="pcbProvName">DWORD   *</arg>
</function>
<function name="CryptEnumProviderTypesA" ret="BOOL" convention="__stdcall">
<arg name="dwIndex">DWORD  </arg>

                                          DWORD   *pdwReserved,
                                                DWORD   dwFlags,
                                               DWORD   *pdwProvType,
       LPSTR szTypeName,
<arg name="pcbTypeName">DWORD   *</arg>
</function>
<function name="CryptEnumProviderTypesW" ret="BOOL" convention="__stdcall">
<arg name="dwIndex">DWORD  </arg>

                                          DWORD   *pdwReserved,
                                                DWORD   dwFlags,
                                               DWORD   *pdwProvType,
       LPWSTR szTypeName,
<arg name="pcbTypeName">DWORD   *</arg>
</function>

<function name="CryptEnumProvidersA" ret="BOOL" convention="__stdcall">
<arg name="dwIndex">DWORD  </arg>

                                              DWORD   *pdwReserved,
                                                    DWORD   dwFlags,
                                                   DWORD   *pdwProvType,
     LPSTR szProvName,
<arg name="pcbProvName">DWORD   *</arg>
</function>
<function name="CryptEnumProvidersW" ret="BOOL" convention="__stdcall">
<arg name="dwIndex">DWORD  </arg>

                                              DWORD   *pdwReserved,
                                                    DWORD   dwFlags,
                                                   DWORD   *pdwProvType,
     LPWSTR szProvName,
<arg name="pcbProvName">DWORD   *</arg>
</function>
<function name="CryptContextAddRef" ret="BOOL" convention="__stdcall">
<arg name="hProv">HCRYPTPROV </arg>

      DWORD       *pdwReserved,
<arg name="dwFlags">DWORD      </arg>
</function>

<function name="CryptDuplicateKey" ret="BOOL" convention="__stdcall">
<arg name="hKey">HCRYPTKEY  </arg>

      DWORD   *pdwReserved,
            DWORD   dwFlags,
<arg name="phKey">HCRYPTKEY   *</arg>
</function>

<function name="CryptDuplicateHash" ret="BOOL" convention="__stdcall">
<arg name="hHash">HCRYPTHASH </arg>

      DWORD       *pdwReserved,
            DWORD       dwFlags,
<arg name="phHash">HCRYPTHASH  *</arg>
</function>

BOOL
__cdecl
GetEncSChannel(
    BYTE **pData,
<arg name="dwDecSize">DWORD *</arg>
</function>

#line 1 "\\program files\\Microsoft SDKs\\Windows\\v6.0A\\Include\\bcrypt.h"
typedef  LONG NTSTATUS, *PNTSTATUS;
 
<struct name="__BCRYPT_KEY_LENGTHS_STRUCT">
<field name="dwMinLength">ULONG</field>
<field name="dwMaxLength">ULONG</field>
<field name="dwIncrement">ULONG</field>
} BCRYPT_KEY_LENGTHS_STRUCT;

#pragma pack(push, 4)
typedef __declspec(align(4)) struct _BCRYPT_OID
{
    ULONG   cbOID;
    PUCHAR  pbOID;
} BCRYPT_OID;

typedef __declspec(align(4)) struct _BCRYPT_OID_LIST
{
    ULONG       dwOIDCount;
    BCRYPT_OID  *pOIDs;
} BCRYPT_OID_LIST;
#pragma pack(pop)

<struct name="_BCRYPT_PKCS1_PADDING_INFO">
<field name="pszAlgId">LPCWSTR</field>
} BCRYPT_PKCS1_PADDING_INFO;

<struct name="_BCRYPT_PSS_PADDING_INFO">
<field name="pszAlgId">LPCWSTR</field>
<field name="cbSalt">ULONG</field>
} BCRYPT_PSS_PADDING_INFO;

<struct name="_BCRYPT_OAEP_PADDING_INFO">
<field name="pszAlgId">LPCWSTR</field>
<field name="pbLabel">PUCHAR</field>
<field name="cbLabel">ULONG</field>
} BCRYPT_OAEP_PADDING_INFO;

<struct name="_BCryptBuffer">
<field name="cbBuffer">ULONG</field>
<field name="BufferType">ULONG</field>
<field name="pvBuffer">PVOID</field>
</struct>
<typedefprev id="BCryptBuffer"/>
<typedefptrprev id="PBCryptBuffer"/>

<struct name="_BCryptBufferDesc">
<field name="ulVersion">ULONG</field>
<field name="cBuffers">ULONG</field>
<field name="pBuffers">PBCryptBuffer</field>
</struct>
<typedefprev id="BCryptBufferDesc"/>
<typedefptrprev id="PBCryptBufferDesc"/>

typedef PVOID BCRYPT_HANDLE;
typedef PVOID BCRYPT_ALG_HANDLE;
typedef PVOID BCRYPT_KEY_HANDLE;
typedef PVOID BCRYPT_HASH_HANDLE;
typedef PVOID BCRYPT_SECRET_HANDLE;
<struct name="_BCRYPT_KEY_BLOB">
<field name="Magic">ULONG</field>
} BCRYPT_KEY_BLOB;

<struct name="_BCRYPT_RSAKEY_BLOB">
<field name="Magic">ULONG</field>
<field name="BitLength">ULONG</field>
<field name="cbPublicExp">ULONG</field>
<field name="cbModulus">ULONG</field>
<field name="cbPrime1">ULONG</field>
<field name="cbPrime2">ULONG</field>
} BCRYPT_RSAKEY_BLOB;

<struct name="_BCRYPT_ECCKEY_BLOB">
<field name="dwMagic">ULONG</field>
<field name="cbKey">ULONG</field>
</struct>
<typedefprev id="BCRYPT_ECCKEY_BLOB"/>
<typedefptrprev id="PBCRYPT_ECCKEY_BLOB"/>
<struct name="_BCRYPT_DH_KEY_BLOB">
<field name="dwMagic">ULONG</field>
<field name="cbKey">ULONG</field>
</struct>
<typedefprev id="BCRYPT_DH_KEY_BLOB"/>
<typedefptrprev id="PBCRYPT_DH_KEY_BLOB"/>

<struct name="_BCRYPT_DH_PARAMETER_HEADER">
<field name="cbLength">ULONG</field>
<field name="dwMagic">ULONG</field>
<field name="cbKeyLength">ULONG</field>
} BCRYPT_DH_PARAMETER_HEADER;

<struct name="_BCRYPT_DSA_KEY_BLOB">
<field name="dwMagic">ULONG</field>
<field name="cbKey">ULONG</field>
<field name="Count[4]">UCHAR</field>
<field name="Seed[20]">UCHAR</field>
<field name="q[20]">UCHAR</field>
</struct>
<typedefprev id="BCRYPT_DSA_KEY_BLOB"/>
<typedefptrprev id="PBCRYPT_DSA_KEY_BLOB"/>

<struct name="_BCRYPT_KEY_DATA_BLOB_HEADER">
<field name="dwMagic">ULONG</field>
<field name="dwVersion">ULONG</field>
<field name="cbKeyData">ULONG</field>
</struct>
<typedefprev id="BCRYPT_KEY_DATA_BLOB_HEADER"/>
<typedefptrprev id="PBCRYPT_KEY_DATA_BLOB_HEADER"/>
<struct name="_BCRYPT_DSA_PARAMETER_HEADER">
<field name="cbLength">ULONG</field>
<field name="dwMagic">ULONG</field>
<field name="cbKeyLength">ULONG</field>
<field name="Count[4]">UCHAR</field>
<field name="Seed[20]">UCHAR</field>
<field name="q[20]">UCHAR</field>
} BCRYPT_DSA_PARAMETER_HEADER;

<function name="BCryptOpenAlgorithmProvider" ret="NTSTATUS" convention="__stdcall">
<arg name="phAlgorithm">BCRYPT_ALG_HANDLE   *</arg>

            LPCWSTR pszAlgId,
        LPCWSTR pszImplementation,
            ULONG   dwFlags);

typedef NTSTATUS
(__stdcall * BCryptOpenAlgorithmProviderFn)(
       BCRYPT_ALG_HANDLE   *phAlgorithm,
        LPCWSTR pszAlgId,
        ULONG   dwFlags);

<struct name="_BCRYPT_ALGORITHM_IDENTIFIER">
<field name="pszName">LPWSTR</field>
<field name="dwClass">ULONG</field>
<field name="dwFlags">ULONG</field>
} BCRYPT_ALGORITHM_IDENTIFIER;
<function name="BCryptEnumAlgorithms" ret="NTSTATUS" convention="__stdcall">
<arg name="dwAlgOperations">ULONG  </arg>

       ULONG   *pAlgCount,
       BCRYPT_ALGORITHM_IDENTIFIER **ppAlgList,
        ULONG   dwFlags);
<struct name="_BCRYPT_PROVIDER_NAME">
<field name="pszProviderName">LPWSTR</field>
} BCRYPT_PROVIDER_NAME;

<function name="BCryptEnumProviders" ret="NTSTATUS" convention="__stdcall">
<arg name="pszAlgId">LPCWSTR</arg>

       ULONG   *pImplCount,
       BCRYPT_PROVIDER_NAME    **ppImplList,
        ULONG   dwFlags);
<function name="BCryptGetProperty" ret="NTSTATUS" convention="__stdcall">
<arg name="hObject">BCRYPT_HANDLE  </arg>
<arg name="pszProperty">LPCWSTR</arg>
<arg name="pbOutput">PUCHAR  </arg>
<arg name="cbOutput">ULONG  </arg>

                                           ULONG   *pcbResult,
                                            ULONG   dwFlags);
<function name="BCryptSetProperty" ret="NTSTATUS" convention="__stdcall">
<arg name="hObject">BCRYPT_HANDLE  </arg>
<arg name="pszProperty">LPCWSTR</arg>
<arg name="pbInput">PUCHAR  </arg>
<arg name="cbInput">ULONG  </arg>
<arg name="dwFlags">ULONG  </arg>
</function>
<function name="BCryptCloseAlgorithmProvider" ret="NTSTATUS" convention="__stdcall">
<arg name="hAlgorithm">BCRYPT_ALG_HANDLE  </arg>
<arg name="dwFlags">ULONG  </arg>
</function>
<function name="BCryptFreeBuffer" ret="void" convention="__stdcall">
<arg name="pvBuffer">PVOID  </arg>
</function>

<function name="BCryptGenerateSymmetricKey" ret="NTSTATUS" convention="__stdcall">
<arg name="hAlgorithm">BCRYPT_ALG_HANDLE  </arg>

                               BCRYPT_KEY_HANDLE   *phKey,
      PUCHAR   pbKeyObject,
                                ULONG   cbKeyObject,
               PUCHAR   pbSecret,
                                ULONG   cbSecret,
                                ULONG   dwFlags);
<function name="BCryptGenerateKeyPair" ret="NTSTATUS" convention="__stdcall">
<arg name="hAlgorithm">BCRYPT_ALG_HANDLE  </arg>

       BCRYPT_KEY_HANDLE   *phKey,
        ULONG   dwLength,
        ULONG   dwFlags);
<function name="BCryptEncrypt" ret="NTSTATUS" convention="__stdcall">
<arg name="hKey">BCRYPT_KEY_HANDLE</arg>
<arg name="pbInput">PUCHAR  </arg>
<arg name="cbInput">ULONG  </arg>

                                        void    *pPaddingInfo,
                        PUCHAR   pbIV,
                                            ULONG   cbIV,
     PUCHAR   pbOutput,
                                            ULONG   cbOutput,
                                           ULONG   *pcbResult,
                                            ULONG   dwFlags);
<function name="BCryptDecrypt" ret="NTSTATUS" convention="__stdcall">
<arg name="hKey">BCRYPT_KEY_HANDLE  </arg>
<arg name="pbInput">PUCHAR  </arg>
<arg name="cbInput">ULONG  </arg>

                                        void    *pPaddingInfo,
                        PUCHAR   pbIV,
                                            ULONG   cbIV,
     PUCHAR   pbOutput,
                                            ULONG   cbOutput,
                                           ULONG   *pcbResult,
                                            ULONG   dwFlags);
<function name="BCryptExportKey" ret="NTSTATUS" convention="__stdcall">
<arg name="hKey">BCRYPT_KEY_HANDLE  </arg>
<arg name="hExportKey">BCRYPT_KEY_HANDLE  </arg>
<arg name="pszBlobType">LPCWSTR</arg>
<arg name="pbOutput">PUCHAR  </arg>
<arg name="cbOutput">ULONG  </arg>

                                           ULONG   *pcbResult,
                                            ULONG   dwFlags);
<function name="BCryptImportKey" ret="NTSTATUS" convention="__stdcall">
<arg name="hAlgorithm">BCRYPT_ALG_HANDLE</arg>
<arg name="hImportKey">BCRYPT_KEY_HANDLE</arg>
<arg name="pszBlobType">LPCWSTR</arg>

                               BCRYPT_KEY_HANDLE *phKey,
      PUCHAR   pbKeyObject,
                                ULONG   cbKeyObject,
                PUCHAR   pbInput,
                                ULONG   cbInput,
                                ULONG   dwFlags);

<function name="BCryptImportKeyPair" ret="NTSTATUS" convention="__stdcall">
<arg name="hAlgorithm">BCRYPT_ALG_HANDLE</arg>
<arg name="hImportKey">BCRYPT_KEY_HANDLE</arg>
<arg name="pszBlobType">LPCWSTR</arg>

                               BCRYPT_KEY_HANDLE *phKey,
                PUCHAR   pbInput,
                                ULONG   cbInput,
                                ULONG   dwFlags);
<function name="BCryptDuplicateKey" ret="NTSTATUS" convention="__stdcall">
<arg name="hKey">BCRYPT_KEY_HANDLE  </arg>

                               BCRYPT_KEY_HANDLE   *phNewKey,
      PUCHAR   pbKeyObject,
                                ULONG   cbKeyObject,
                                ULONG   dwFlags);
<function name="BCryptFinalizeKeyPair" ret="NTSTATUS" convention="__stdcall">
<arg name="hKey">BCRYPT_KEY_HANDLE  </arg>
<arg name="dwFlags">ULONG  </arg>
</function>
<function name="BCryptDestroyKey" ret="NTSTATUS" convention="__stdcall">
<arg name="hKey">BCRYPT_KEY_HANDLE  </arg>
</function>
<function name="BCryptDestroySecret" ret="NTSTATUS" convention="__stdcall">
<arg name="hSecret">BCRYPT_SECRET_HANDLE  </arg>
</function>
<function name="BCryptSignHash" ret="NTSTATUS" convention="__stdcall">
<arg name="hKey">BCRYPT_KEY_HANDLE  </arg>

                                        void    *pPaddingInfo,
                            PUCHAR   pbInput,
                                            ULONG   cbInput,
     PUCHAR   pbOutput,
                                            ULONG   cbOutput,
                                           ULONG   *pcbResult,
                                            ULONG   dwFlags);
<function name="BCryptVerifySignature" ret="NTSTATUS" convention="__stdcall">
<arg name="hKey">BCRYPT_KEY_HANDLE  </arg>

                        void    *pPaddingInfo,
             PUCHAR   pbHash,
                            ULONG   cbHash,
        PUCHAR   pbSignature,
                            ULONG   cbSignature,
                            ULONG   dwFlags);
<function name="BCryptSecretAgreement" ret="NTSTATUS" convention="__stdcall">
<arg name="hPrivKey">BCRYPT_KEY_HANDLE      </arg>
<arg name="hPubKey">BCRYPT_KEY_HANDLE      </arg>

       BCRYPT_SECRET_HANDLE    *phAgreedSecret,
        ULONG                   dwFlags);
<function name="BCryptDeriveKey" ret="NTSTATUS" convention="__stdcall">
<arg name="hSharedSecret">BCRYPT_SECRET_HANDLE</arg>
<arg name="pwszKDF">LPCWSTR             </arg>

        BCryptBufferDesc     *pParameterList,
     PUCHAR pbDerivedKey,
            ULONG                cbDerivedKey,
           ULONG                *pcbResult,
            ULONG                dwFlags);

<function name="BCryptCreateHash" ret="NTSTATUS" convention="__stdcall">
<arg name="hAlgorithm">BCRYPT_ALG_HANDLE  </arg>

                               BCRYPT_HASH_HANDLE  *phHash,
     PUCHAR   pbHashObject,
                                ULONG   cbHashObject,
           PUCHAR   pbSecret,   
                                ULONG   cbSecret,   
                                ULONG   dwFlags);
<function name="BCryptHashData" ret="NTSTATUS" convention="__stdcall">
<arg name="hHash">BCRYPT_HASH_HANDLE </arg>
<arg name="pbInput">PUCHAR  </arg>
<arg name="cbInput">ULONG  </arg>
<arg name="dwFlags">ULONG  </arg>
</function>
<function name="BCryptFinishHash" ret="NTSTATUS" convention="__stdcall">
<arg name="hHash">BCRYPT_HASH_HANDLE</arg>
<arg name="pbOutput">PUCHAR  </arg>
<arg name="cbOutput">ULONG  </arg>
<arg name="dwFlags">ULONG  </arg>
</function>
<function name="BCryptDuplicateHash" ret="NTSTATUS" convention="__stdcall">
<arg name="hHash">BCRYPT_HASH_HANDLE </arg>

                               BCRYPT_HASH_HANDLE  *phNewHash,
     PUCHAR   pbHashObject,
                                ULONG   cbHashObject,
                                ULONG   dwFlags);
<function name="BCryptDestroyHash" ret="NTSTATUS" convention="__stdcall">
<arg name="hHash">BCRYPT_HASH_HANDLE </arg>
</function>
<function name="BCryptGenRandom" ret="NTSTATUS" convention="__stdcall">
<arg name="hAlgorithm">BCRYPT_ALG_HANDLE  </arg>
<arg name="pbBuffer">PUCHAR </arg>
<arg name="cbBuffer">ULONG  </arg>
<arg name="dwFlags">ULONG  </arg>
</function>
<struct name="_BCRYPT_INTERFACE_VERSION">
<field name="MajorVersion">USHORT</field>
<field name="MinorVersion">USHORT</field>
</struct>
<typedefprev id="BCRYPT_INTERFACE_VERSION"/>
<typedefptrprev id="PBCRYPT_INTERFACE_VERSION"/>

<struct name="_CRYPT_INTERFACE_REG">
<field name="dwInterface">ULONG</field>
<field name="dwFlags">ULONG</field>
<field name="cFunctions">ULONG</field>
    PWSTR *rgpszFunctions;
}
CRYPT_INTERFACE_REG, *PCRYPT_INTERFACE_REG;

<struct name="_CRYPT_IMAGE_REG">
<field name="pszImage">PWSTR</field>
<field name="cInterfaces">ULONG</field>
    PCRYPT_INTERFACE_REG *rgpInterfaces;
}
CRYPT_IMAGE_REG, *PCRYPT_IMAGE_REG;

<struct name="_CRYPT_PROVIDER_REG">
<field name="cAliases">ULONG</field>
    PWSTR *rgpszAliases;
    
    PCRYPT_IMAGE_REG pUM;
    PCRYPT_IMAGE_REG pKM;
}
CRYPT_PROVIDER_REG, *PCRYPT_PROVIDER_REG;

<struct name="_CRYPT_PROVIDERS">
<field name="cProviders">ULONG</field>
    PWSTR *rgpszProviders;
}
CRYPT_PROVIDERS, *PCRYPT_PROVIDERS;
<struct name="_CRYPT_CONTEXT_CONFIG">
<field name="dwFlags">ULONG</field>
<field name="dwReserved">ULONG</field>
}
CRYPT_CONTEXT_CONFIG, *PCRYPT_CONTEXT_CONFIG;

<struct name="_CRYPT_CONTEXT_FUNCTION_CONFIG">
<field name="dwFlags">ULONG</field>
<field name="dwReserved">ULONG</field>
}
CRYPT_CONTEXT_FUNCTION_CONFIG, *PCRYPT_CONTEXT_FUNCTION_CONFIG;

<struct name="_CRYPT_CONTEXTS">
<field name="cContexts">ULONG</field>
    PWSTR *rgpszContexts;
}
CRYPT_CONTEXTS, *PCRYPT_CONTEXTS;

<struct name="_CRYPT_CONTEXT_FUNCTIONS">
<field name="cFunctions">ULONG</field>
    PWSTR *rgpszFunctions;
}
CRYPT_CONTEXT_FUNCTIONS, *PCRYPT_CONTEXT_FUNCTIONS;

<struct name="_CRYPT_CONTEXT_FUNCTION_PROVIDERS">
<field name="cProviders">ULONG</field>
    PWSTR *rgpszProviders;
}
CRYPT_CONTEXT_FUNCTION_PROVIDERS, *PCRYPT_CONTEXT_FUNCTION_PROVIDERS;
<struct name="_CRYPT_PROPERTY_REF">
<field name="pszProperty">PWSTR</field>
<field name="cbValue">ULONG</field>
<field name="pbValue">PUCHAR</field>
}
CRYPT_PROPERTY_REF, *PCRYPT_PROPERTY_REF;

<struct name="_CRYPT_IMAGE_REF">
<field name="pszImage">PWSTR</field>
<field name="dwFlags">ULONG</field>
}
CRYPT_IMAGE_REF, *PCRYPT_IMAGE_REF;

<struct name="_CRYPT_PROVIDER_REF">
<field name="dwInterface">ULONG</field>
<field name="pszFunction">PWSTR</field>
<field name="pszProvider">PWSTR</field>
<field name="cProperties">ULONG</field>
    PCRYPT_PROPERTY_REF *rgpProperties;

    PCRYPT_IMAGE_REF pUM;
    PCRYPT_IMAGE_REF pKM;
}
CRYPT_PROVIDER_REF, *PCRYPT_PROVIDER_REF;

<struct name="_CRYPT_PROVIDER_REFS">
<field name="cProviders">ULONG</field>
    PCRYPT_PROVIDER_REF *rgpProviders;
}
CRYPT_PROVIDER_REFS, *PCRYPT_PROVIDER_REFS;

<function name="BCryptQueryProviderRegistration" ret="NTSTATUS" convention="__stdcall">
<arg name="pszProvider">LPCWSTR</arg>
<arg name="dwMode">ULONG</arg>
<arg name="dwInterface">ULONG</arg>
<arg name="pcbBuffer">ULONG*</arg>

     PCRYPT_PROVIDER_REG *ppBuffer);

<function name="BCryptEnumRegisteredProviders" ret="NTSTATUS" convention="__stdcall">
<arg name="pcbBuffer">ULONG*</arg>

     PCRYPT_PROVIDERS *ppBuffer);
<function name="BCryptCreateContext" ret="NTSTATUS" convention="__stdcall">
<arg name="dwTable">ULONG</arg>
<arg name="pszContext">LPCWSTR</arg>
<arg name="pConfig">PCRYPT_CONTEXT_CONFIG</arg>
</function> 

<function name="BCryptDeleteContext" ret="NTSTATUS" convention="__stdcall">
<arg name="dwTable">ULONG</arg>
<arg name="pszContext">LPCWSTR</arg>
</function>

<function name="BCryptEnumContexts" ret="NTSTATUS" convention="__stdcall">
<arg name="dwTable">ULONG</arg>
<arg name="pcbBuffer">ULONG*</arg>

     PCRYPT_CONTEXTS *ppBuffer);

<function name="BCryptConfigureContext" ret="NTSTATUS" convention="__stdcall">
<arg name="dwTable">ULONG</arg>
<arg name="pszContext">LPCWSTR</arg>
<arg name="pConfig">PCRYPT_CONTEXT_CONFIG</arg>
</function>

<function name="BCryptQueryContextConfiguration" ret="NTSTATUS" convention="__stdcall">
<arg name="dwTable">ULONG</arg>
<arg name="pszContext">LPCWSTR</arg>
<arg name="pcbBuffer">ULONG*</arg>

     PCRYPT_CONTEXT_CONFIG *ppBuffer);

<function name="BCryptAddContextFunction" ret="NTSTATUS" convention="__stdcall">
<arg name="dwTable">ULONG</arg>
<arg name="pszContext">LPCWSTR</arg>
<arg name="dwInterface">ULONG</arg>
<arg name="pszFunction">LPCWSTR</arg>
<arg name="dwPosition">ULONG</arg>
</function>

<function name="BCryptRemoveContextFunction" ret="NTSTATUS" convention="__stdcall">
<arg name="dwTable">ULONG</arg>
<arg name="pszContext">LPCWSTR</arg>
<arg name="dwInterface">ULONG</arg>
<arg name="pszFunction">LPCWSTR</arg>
</function>

<function name="BCryptEnumContextFunctions" ret="NTSTATUS" convention="__stdcall">
<arg name="dwTable">ULONG</arg>
<arg name="pszContext">LPCWSTR</arg>
<arg name="dwInterface">ULONG</arg>
<arg name="pcbBuffer">ULONG*</arg>

     PCRYPT_CONTEXT_FUNCTIONS *ppBuffer);

<function name="BCryptConfigureContextFunction" ret="NTSTATUS" convention="__stdcall">
<arg name="dwTable">ULONG</arg>
<arg name="pszContext">LPCWSTR</arg>
<arg name="dwInterface">ULONG</arg>
<arg name="pszFunction">LPCWSTR</arg>
<arg name="pConfig">PCRYPT_CONTEXT_FUNCTION_CONFIG</arg>
</function>

<function name="BCryptQueryContextFunctionConfiguration" ret="NTSTATUS" convention="__stdcall">
<arg name="dwTable">ULONG</arg>
<arg name="pszContext">LPCWSTR</arg>
<arg name="dwInterface">ULONG</arg>
<arg name="pszFunction">LPCWSTR</arg>
<arg name="pcbBuffer">ULONG*</arg>

     PCRYPT_CONTEXT_FUNCTION_CONFIG *ppBuffer);
<function name="BCryptEnumContextFunctionProviders" ret="NTSTATUS" convention="__stdcall">
<arg name="dwTable">ULONG</arg>
<arg name="pszContext">LPCWSTR</arg>
<arg name="dwInterface">ULONG</arg>
<arg name="pszFunction">LPCWSTR</arg>
<arg name="pcbBuffer">ULONG*</arg>

     PCRYPT_CONTEXT_FUNCTION_PROVIDERS *ppBuffer);

<function name="BCryptSetContextFunctionProperty" ret="NTSTATUS" convention="__stdcall">
<arg name="dwTable">ULONG</arg>
<arg name="pszContext">LPCWSTR</arg>
<arg name="dwInterface">ULONG</arg>
<arg name="pszFunction">LPCWSTR</arg>
<arg name="pszProperty">LPCWSTR</arg>
<arg name="cbValue">ULONG</arg>
<arg name="pbValue">PUCHAR</arg>
</function>

<function name="BCryptQueryContextFunctionProperty" ret="NTSTATUS" convention="__stdcall">
<arg name="dwTable">ULONG</arg>
<arg name="pszContext">LPCWSTR</arg>
<arg name="dwInterface">ULONG</arg>
<arg name="pszFunction">LPCWSTR</arg>
<arg name="pszProperty">LPCWSTR</arg>
<arg name="pcbValue">ULONG*</arg>

     PUCHAR *ppbValue);
<function name="BCryptRegisterConfigChangeNotify" ret="NTSTATUS" convention="__stdcall">
     HANDLE *phEvent);
<function name="BCryptUnregisterConfigChangeNotify" ret="NTSTATUS" convention="__stdcall">
<arg name="hEvent">HANDLE</arg>
</function>
<function name="BCryptResolveProviders" ret="NTSTATUS" convention="__stdcall">
<arg name="pszContext">LPCWSTR</arg>
<arg name="dwInterface">ULONG</arg>
<arg name="pszFunction">LPCWSTR</arg>
<arg name="pszProvider">LPCWSTR</arg>
<arg name="dwMode">ULONG</arg>
<arg name="dwFlags">ULONG</arg>
<arg name="pcbBuffer">ULONG*</arg>

     PCRYPT_PROVIDER_REFS *ppBuffer);

<function name="BCryptGetFipsAlgorithmMode" ret="NTSTATUS" convention="__stdcall">
<arg name="pfEnabled">BOOLEAN *</arg>
</function>

#line 1 "\\program files\\Microsoft SDKs\\Windows\\v6.0A\\Include\\ncrypt.h"
typedef LONG SECURITY_STATUS;
#line 1 "\\program files\\Microsoft SDKs\\Windows\\v6.0A\\Include\\bcrypt.h"

typedef BCryptBuffer     NCryptBuffer;
typedef BCryptBuffer*    PNCryptBuffer;
typedef BCryptBufferDesc NCryptBufferDesc;
typedef BCryptBufferDesc* PNCryptBufferDesc;
typedef ULONG_PTR NCRYPT_HANDLE;
typedef ULONG_PTR NCRYPT_PROV_HANDLE;
typedef ULONG_PTR NCRYPT_KEY_HANDLE;
typedef ULONG_PTR NCRYPT_HASH_HANDLE;
typedef ULONG_PTR NCRYPT_SECRET_HANDLE;
<function name="NCryptOpenStorageProvider" ret="SECURITY_STATUS" convention="__stdcall">
<arg name="phProvider">NCRYPT_PROV_HANDLE *</arg>

     LPCWSTR pszProviderName,
        DWORD   dwFlags);

<struct name="_NCryptAlgorithmName">
<field name="pszName">LPWSTR</field>
<field name="dwClass">DWORD</field>
<field name="dwAlgOperations">DWORD</field>
<field name="dwFlags">DWORD</field>
} NCryptAlgorithmName;
<function name="NCryptEnumAlgorithms" ret="SECURITY_STATUS" convention="__stdcall">
<arg name="hProvider">NCRYPT_PROV_HANDLE</arg>
<arg name="dwAlgOperations">DWORD  </arg>
<arg name="pdwAlgCount">DWORD *</arg>

     NCryptAlgorithmName **ppAlgList,
        DWORD   dwFlags);
<function name="NCryptIsAlgSupported" ret="SECURITY_STATUS" convention="__stdcall">
<arg name="hProvider">NCRYPT_PROV_HANDLE</arg>
<arg name="pszAlgId">LPCWSTR</arg>
<arg name="dwFlags">DWORD  </arg>
</function>

<struct name="NCryptKeyName">
<field name="pszName">LPWSTR</field>
<field name="pszAlgid">LPWSTR</field>
<field name="dwLegacyKeySpec">DWORD</field>
<field name="dwFlags">DWORD</field>
} NCryptKeyName;

<function name="NCryptEnumKeys" ret="SECURITY_STATUS" convention="__stdcall">
<arg name="hProvider">NCRYPT_PROV_HANDLE</arg>
<arg name="pszScope">LPCWSTR</arg>

     NCryptKeyName **ppKeyName,
     PVOID * ppEnumState,
        DWORD   dwFlags);
<struct name="NCryptProviderName">
<field name="pszName">LPWSTR</field>
<field name="pszComment">LPWSTR</field>
} NCryptProviderName;

<function name="NCryptEnumStorageProviders" ret="SECURITY_STATUS" convention="__stdcall">
<arg name="pdwProviderCount">DWORD *</arg>

     NCryptProviderName **ppProviderList,
        DWORD   dwFlags);
<function name="NCryptFreeBuffer" ret="SECURITY_STATUS" convention="__stdcall">
<arg name="pvInput">PVOID  </arg>
</function>
<function name="NCryptOpenKey" ret="SECURITY_STATUS" convention="__stdcall">
<arg name="hProvider">NCRYPT_PROV_HANDLE</arg>

       NCRYPT_KEY_HANDLE *phKey,
        LPCWSTR pszKeyName,
     DWORD  dwLegacyKeySpec,
        DWORD   dwFlags);
<function name="NCryptCreatePersistedKey" ret="SECURITY_STATUS" convention="__stdcall">
<arg name="hProvider">NCRYPT_PROV_HANDLE</arg>

       NCRYPT_KEY_HANDLE *phKey,
        LPCWSTR pszAlgId,
     LPCWSTR pszKeyName,
        DWORD   dwLegacyKeySpec,
        DWORD   dwFlags);

<struct name="__NCRYPT_UI_POLICY_BLOB">
<field name="dwVersion">DWORD</field>
<field name="dwFlags">DWORD</field>
<field name="cbCreationTitle">DWORD</field>
<field name="cbFriendlyName">DWORD</field>
<field name="cbDescription">DWORD</field>
    
    
    
} NCRYPT_UI_POLICY_BLOB;

<struct name="__NCRYPT_UI_POLICY">
<field name="dwVersion">DWORD</field>
<field name="dwFlags">DWORD</field>
<field name="pszCreationTitle">LPCWSTR</field>
<field name="pszFriendlyName">LPCWSTR</field>
<field name="pszDescription">LPCWSTR</field>
} NCRYPT_UI_POLICY;
<struct name="__NCRYPT_SUPPORTED_LENGTHS">
<field name="dwMinLength">DWORD</field>
<field name="dwMaxLength">DWORD</field>
<field name="dwIncrement">DWORD</field>
<field name="dwDefaultLength">DWORD</field>
} NCRYPT_SUPPORTED_LENGTHS;

<function name="NCryptGetProperty" ret="SECURITY_STATUS" convention="__stdcall">
<arg name="hObject">NCRYPT_HANDLE</arg>
<arg name="pszProperty">LPCWSTR</arg>
<arg name="pbOutput">PBYTE</arg>
<arg name="cbOutput">DWORD  </arg>
<arg name="pcbResult">DWORD *</arg>
<arg name="dwFlags">DWORD  </arg>
</function>
<function name="NCryptSetProperty" ret="SECURITY_STATUS" convention="__stdcall">
<arg name="hObject">NCRYPT_HANDLE</arg>
<arg name="pszProperty">LPCWSTR</arg>
<arg name="pbInput">PBYTE</arg>
<arg name="cbInput">DWORD  </arg>
<arg name="dwFlags">DWORD  </arg>
</function>
<function name="NCryptFinalizeKey" ret="SECURITY_STATUS" convention="__stdcall">
<arg name="hKey">NCRYPT_KEY_HANDLE</arg>
<arg name="dwFlags">DWORD  </arg>
</function>
<function name="NCryptEncrypt" ret="SECURITY_STATUS" convention="__stdcall">
<arg name="hKey">NCRYPT_KEY_HANDLE</arg>
<arg name="pbInput">PBYTE</arg>
<arg name="cbInput">DWORD  </arg>

        void *pPaddingInfo,
     PBYTE pbOutput,
        DWORD   cbOutput,
       DWORD * pcbResult,
        DWORD   dwFlags);
<function name="NCryptDecrypt" ret="SECURITY_STATUS" convention="__stdcall">
<arg name="hKey">NCRYPT_KEY_HANDLE</arg>
<arg name="pbInput">PBYTE</arg>
<arg name="cbInput">DWORD  </arg>

        void *pPaddingInfo,
     PBYTE pbOutput,
        DWORD   cbOutput,
       DWORD * pcbResult,
        DWORD   dwFlags);
<function name="NCryptImportKey" ret="SECURITY_STATUS" convention="__stdcall">
<arg name="hProvider">NCRYPT_PROV_HANDLE</arg>
<arg name="hImportKey">NCRYPT_KEY_HANDLE</arg>
<arg name="pszBlobType">LPCWSTR</arg>

     NCryptBufferDesc *pParameterList,
       NCRYPT_KEY_HANDLE *phKey,
     PBYTE pbData,
        DWORD   cbData,
        DWORD   dwFlags);
<function name="NCryptExportKey" ret="SECURITY_STATUS" convention="__stdcall">
<arg name="hKey">NCRYPT_KEY_HANDLE</arg>
<arg name="hExportKey">NCRYPT_KEY_HANDLE</arg>
<arg name="pszBlobType">LPCWSTR</arg>

     NCryptBufferDesc *pParameterList,
     PBYTE pbOutput,
        DWORD   cbOutput,
       DWORD * pcbResult,
        DWORD   dwFlags);
<function name="NCryptSignHash" ret="SECURITY_STATUS" convention="__stdcall">
<arg name="hKey">NCRYPT_KEY_HANDLE</arg>

        void *pPaddingInfo,
     PBYTE pbHashValue,
        DWORD   cbHashValue,
     PBYTE pbSignature,
        DWORD   cbSignature,
       DWORD * pcbResult,
        DWORD   dwFlags);
<function name="NCryptVerifySignature" ret="SECURITY_STATUS" convention="__stdcall">
<arg name="hKey">NCRYPT_KEY_HANDLE</arg>

        void *pPaddingInfo,
     PBYTE pbHashValue,
        DWORD   cbHashValue,
     PBYTE pbSignature,
        DWORD   cbSignature,
        DWORD   dwFlags);
<function name="NCryptDeleteKey" ret="SECURITY_STATUS" convention="__stdcall">
<arg name="hKey">NCRYPT_KEY_HANDLE</arg>
<arg name="dwFlags">DWORD  </arg>
</function>
<function name="NCryptFreeObject" ret="SECURITY_STATUS" convention="__stdcall">
<arg name="hObject">NCRYPT_HANDLE</arg>
</function>
<function name="NCryptIsKeyHandle" ret="BOOL" convention="__stdcall">
<arg name="hKey">NCRYPT_KEY_HANDLE</arg>
</function>

<function name="NCryptTranslateHandle" ret="SECURITY_STATUS" convention="__stdcall">
<arg name="phProvider">NCRYPT_PROV_HANDLE *</arg>

       NCRYPT_KEY_HANDLE *phKey,
        HCRYPTPROV hLegacyProv,
     HCRYPTKEY hLegacyKey,
     DWORD  dwLegacyKeySpec,
        DWORD   dwFlags);

<function name="NCryptNotifyChangeKey" ret="SECURITY_STATUS" convention="__stdcall">
<arg name="hProvider">NCRYPT_PROV_HANDLE</arg>

     HANDLE *phEvent,
        DWORD   dwFlags);
<function name="NCryptSecretAgreement" ret="SECURITY_STATUS" convention="__stdcall">
<arg name="hPrivKey">NCRYPT_KEY_HANDLE</arg>
<arg name="hPubKey">NCRYPT_KEY_HANDLE</arg>

       NCRYPT_SECRET_HANDLE *phAgreedSecret,
        DWORD   dwFlags);
<function name="NCryptDeriveKey" ret="SECURITY_STATUS" convention="__stdcall">
<arg name="hSharedSecret">NCRYPT_SECRET_HANDLE</arg>
<arg name="pwszKDF">LPCWSTR             </arg>

        NCryptBufferDesc     *pParameterList,
     PBYTE pbDerivedKey,
            DWORD                cbDerivedKey,
           DWORD                *pcbResult,
            ULONG                dwFlags);
typedef ULONG_PTR HCRYPTPROV_OR_NCRYPT_KEY_HANDLE;
typedef ULONG_PTR HCRYPTPROV_LEGACY;

<struct name="_CRYPT_BIT_BLOB">
<field name="cbData">DWORD</field>
    BYTE    *pbData;
    DWORD   cUnusedBits;
} CRYPT_BIT_BLOB, *PCRYPT_BIT_BLOB;
<struct name="_CRYPT_ALGORITHM_IDENTIFIER">
<field name="pszObjId">LPSTR</field>
<field name="Parameters">CRYPT_OBJID_BLOB</field>
</struct>
<typedefprev id="CRYPT_ALGORITHM_IDENTIFIER"/>
<typedefptrprev id="PCRYPT_ALGORITHM_IDENTIFIER"/>
<struct name="_CRYPT_OBJID_TABLE">
<field name="dwAlgId">DWORD</field>
<field name="pszObjId">LPCSTR</field>
</struct>
<typedefprev id="CRYPT_OBJID_TABLE"/>
<typedefptrprev id="PCRYPT_OBJID_TABLE"/>
<struct name="_CRYPT_HASH_INFO">
<field name="HashAlgorithm">CRYPT_ALGORITHM_IDENTIFIER</field>
<field name="Hash">CRYPT_HASH_BLOB</field>
</struct>
<typedefprev id="CRYPT_HASH_INFO"/>
<typedefptrprev id="PCRYPT_HASH_INFO"/>
<struct name="_CERT_EXTENSION">
<field name="pszObjId">LPSTR</field>
<field name="fCritical">BOOL</field>
<field name="Value">CRYPT_OBJID_BLOB</field>
</struct>
<typedefprev id="CERT_EXTENSION"/>
<typedefptrprev id="PCERT_EXTENSION"/>

<struct name="_CRYPT_ATTRIBUTE_TYPE_VALUE">
<field name="pszObjId">LPSTR</field>
<field name="Value">CRYPT_OBJID_BLOB</field>
</struct>
<typedefprev id="CRYPT_ATTRIBUTE_TYPE_VALUE"/>
<typedefptrprev id="PCRYPT_ATTRIBUTE_TYPE_VALUE"/>

<struct name="_CRYPT_ATTRIBUTE">
<field name="pszObjId">LPSTR</field>
<field name="cValue">DWORD</field>
<field name="rgValue">PCRYPT_ATTR_BLOB</field>
</struct>
<typedefprev id="CRYPT_ATTRIBUTE"/>
<typedefptrprev id="PCRYPT_ATTRIBUTE"/>

<struct name="_CRYPT_ATTRIBUTES">
<field name="cAttr">DWORD</field>
<field name="rgAttr">PCRYPT_ATTRIBUTE</field>
</struct>
<typedefprev id="CRYPT_ATTRIBUTES"/>
<typedefptrprev id="PCRYPT_ATTRIBUTES"/>

<struct name="_CERT_RDN_ATTR">
<field name="pszObjId">LPSTR</field>
<field name="dwValueType">DWORD</field>
<field name="Value">CERT_RDN_VALUE_BLOB</field>
</struct>
<typedefprev id="CERT_RDN_ATTR"/>
<typedefptrprev id="PCERT_RDN_ATTR"/>
<struct name="_CERT_RDN">
<field name="cRDNAttr">DWORD</field>
<field name="rgRDNAttr">PCERT_RDN_ATTR</field>
</struct>
<typedefprev id="CERT_RDN"/>
<typedefptrprev id="PCERT_RDN"/>
<struct name="_CERT_NAME_INFO">
<field name="cRDN">DWORD</field>
<field name="rgRDN">PCERT_RDN</field>
</struct>
<typedefprev id="CERT_NAME_INFO"/>
<typedefptrprev id="PCERT_NAME_INFO"/>
<struct name="_CERT_NAME_VALUE">
<field name="dwValueType">DWORD</field>
<field name="Value">CERT_RDN_VALUE_BLOB</field>
</struct>
<typedefprev id="CERT_NAME_VALUE"/>
<typedefptrprev id="PCERT_NAME_VALUE"/>

<struct name="_CERT_PUBLIC_KEY_INFO">
<field name="Algorithm">CRYPT_ALGORITHM_IDENTIFIER</field>
<field name="PublicKey">CRYPT_BIT_BLOB</field>
</struct>
<typedefprev id="CERT_PUBLIC_KEY_INFO"/>
<typedefptrprev id="PCERT_PUBLIC_KEY_INFO"/>
<struct name="_CRYPT_PRIVATE_KEY_INFO">
<field name="Version">DWORD</field>
<field name="Algorithm">CRYPT_ALGORITHM_IDENTIFIER</field>
<field name="PrivateKey">CRYPT_DER_BLOB</field>
<field name="pAttributes">PCRYPT_ATTRIBUTES</field>
</struct>
<typedefprev id="CRYPT_PRIVATE_KEY_INFO"/>
<typedefptrprev id="PCRYPT_PRIVATE_KEY_INFO"/>
<struct name="_CRYPT_ENCRYPTED_PRIVATE_KEY_INFO">
<field name="EncryptionAlgorithm">CRYPT_ALGORITHM_IDENTIFIER</field>
<field name="EncryptedPrivateKey">CRYPT_DATA_BLOB</field>
</struct>
<typedefprev id="CRYPT_ENCRYPTED_PRIVATE_KEY_INFO"/>
<typedefptrprev id="PCRYPT_ENCRYPTED_PRIVATE_KEY_INFO"/>
typedef<fnptr name="PCRYPT_DECRYPT_PRIVATE_KEY_FUNC" ret="BOOL" convention="__stdcall">
<arg name="Algorithm">CRYPT_ALGORITHM_IDENTIFIER</arg>
<arg name="EncryptedPrivateKey">CRYPT_DATA_BLOB</arg>
<arg name="pbClearTextKey">BYTE*</arg>
<arg name="pcbClearTextKey">DWORD*</arg>
<arg name="pVoidDecryptFunc">LPVOID</arg>
</function>
typedef<fnptr name="PCRYPT_ENCRYPT_PRIVATE_KEY_FUNC" ret="BOOL" convention="__stdcall">
<arg name="pAlgorithm">CRYPT_ALGORITHM_IDENTIFIER*</arg>
<arg name="pClearTextPrivateKey">CRYPT_DATA_BLOB*</arg>
<arg name="pbEncryptedKey">BYTE*</arg>
<arg name="pcbEncryptedKey">DWORD*</arg>
<arg name="pVoidEncryptFunc">LPVOID</arg>
</function>

typedef<fnptr name="PCRYPT_RESOLVE_HCRYPTPROV_FUNC" ret="BOOL" convention="__stdcall">

                                                       CRYPT_PRIVATE_KEY_INFO      *pPrivateKeyInfo,
                                                       HCRYPTPROV                  *phCryptProv,
                                                       LPVOID                      pVoidResolveFunc);
<struct name="_CRYPT_PKCS8_IMPORT_PARAMS">
<field name="PrivateKey">CRYPT_DIGEST_BLOB</field>
<field name="pResolvehCryptProvFunc">PCRYPT_RESOLVE_HCRYPTPROV_FUNC</field>
<field name="pVoidResolveFunc">LPVOID</field>
<field name="pDecryptPrivateKeyFunc">PCRYPT_DECRYPT_PRIVATE_KEY_FUNC</field>
<field name="pVoidDecryptFunc">LPVOID</field>
} CRYPT_PKCS8_IMPORT_PARAMS, *PCRYPT_PKCS8_IMPORT_PARAMS, CRYPT_PRIVATE_KEY_BLOB_AND_PARAMS, *PCRYPT_PRIVATE_KEY_BLOB_AND_PARAMS;
<struct name="_CRYPT_PKCS8_EXPORT_PARAMS">
<field name="hCryptProv">HCRYPTPROV</field>
<field name="dwKeySpec">DWORD</field>
<field name="pszPrivateKeyObjId">LPSTR</field>
<field name="pEncryptPrivateKeyFunc">PCRYPT_ENCRYPT_PRIVATE_KEY_FUNC</field>
<field name="pVoidEncryptFunc">LPVOID</field>
} CRYPT_PKCS8_EXPORT_PARAMS, *PCRYPT_PKCS8_EXPORT_PARAMS;

<struct name="_CERT_INFO">
<field name="dwVersion">DWORD</field>
<field name="SerialNumber">CRYPT_INTEGER_BLOB</field>
<field name="SignatureAlgorithm">CRYPT_ALGORITHM_IDENTIFIER</field>
<field name="Issuer">CERT_NAME_BLOB</field>
<field name="NotBefore">FILETIME</field>
<field name="NotAfter">FILETIME</field>
<field name="Subject">CERT_NAME_BLOB</field>
<field name="SubjectPublicKeyInfo">CERT_PUBLIC_KEY_INFO</field>
<field name="IssuerUniqueId">CRYPT_BIT_BLOB</field>
<field name="SubjectUniqueId">CRYPT_BIT_BLOB</field>
<field name="cExtension">DWORD</field>
<field name="rgExtension">PCERT_EXTENSION</field>
</struct>
<typedefprev id="CERT_INFO"/>
<typedefptrprev id="PCERT_INFO"/>
<struct name="_CRL_ENTRY">
<field name="SerialNumber">CRYPT_INTEGER_BLOB</field>
<field name="RevocationDate">FILETIME</field>
<field name="cExtension">DWORD</field>
<field name="rgExtension">PCERT_EXTENSION</field>
</struct>
<typedefprev id="CRL_ENTRY"/>
<typedefptrprev id="PCRL_ENTRY"/>
<struct name="_CRL_INFO">
<field name="dwVersion">DWORD</field>
<field name="SignatureAlgorithm">CRYPT_ALGORITHM_IDENTIFIER</field>
<field name="Issuer">CERT_NAME_BLOB</field>
<field name="ThisUpdate">FILETIME</field>
<field name="NextUpdate">FILETIME</field>
<field name="cCRLEntry">DWORD</field>
<field name="rgCRLEntry">PCRL_ENTRY</field>
<field name="cExtension">DWORD</field>
<field name="rgExtension">PCERT_EXTENSION</field>
</struct>
<typedefprev id="CRL_INFO"/>
<typedefptrprev id="PCRL_INFO"/>

<struct name="_CERT_REQUEST_INFO">
<field name="dwVersion">DWORD</field>
<field name="Subject">CERT_NAME_BLOB</field>
<field name="SubjectPublicKeyInfo">CERT_PUBLIC_KEY_INFO</field>
<field name="cAttribute">DWORD</field>
<field name="rgAttribute">PCRYPT_ATTRIBUTE</field>
</struct>
<typedefprev id="CERT_REQUEST_INFO"/>
<typedefptrprev id="PCERT_REQUEST_INFO"/>
<struct name="_CERT_KEYGEN_REQUEST_INFO">
<field name="dwVersion">DWORD</field>
<field name="SubjectPublicKeyInfo">CERT_PUBLIC_KEY_INFO</field>
<field name="pwszChallengeString">LPWSTR</field>
</struct>
<typedefprev id="CERT_KEYGEN_REQUEST_INFO"/>
<typedefptrprev id="PCERT_KEYGEN_REQUEST_INFO"/>

<struct name="_CERT_SIGNED_CONTENT_INFO">
<field name="ToBeSigned">CRYPT_DER_BLOB</field>
<field name="SignatureAlgorithm">CRYPT_ALGORITHM_IDENTIFIER</field>
<field name="Signature">CRYPT_BIT_BLOB</field>
</struct>
<typedefprev id="CERT_SIGNED_CONTENT_INFO"/>
<typedefptrprev id="PCERT_SIGNED_CONTENT_INFO"/>
<struct name="_CTL_USAGE">
<field name="cUsageIdentifier">DWORD</field>
    LPSTR               *rgpszUsageIdentifier;      
} CTL_USAGE, *PCTL_USAGE,
CERT_ENHKEY_USAGE, *PCERT_ENHKEY_USAGE;
<struct name="_CTL_ENTRY">
<field name="SubjectIdentifier">CRYPT_DATA_BLOB</field>
<field name="cAttribute">DWORD</field>
<field name="rgAttribute">PCRYPT_ATTRIBUTE</field>
</struct>
<typedefprev id="CTL_ENTRY"/>
<typedefptrprev id="PCTL_ENTRY"/>

<struct name="_CTL_INFO">
<field name="dwVersion">DWORD</field>
<field name="SubjectUsage">CTL_USAGE</field>
<field name="ListIdentifier">CRYPT_DATA_BLOB</field>
<field name="SequenceNumber">CRYPT_INTEGER_BLOB</field>
<field name="ThisUpdate">FILETIME</field>
<field name="NextUpdate">FILETIME</field>
<field name="SubjectAlgorithm">CRYPT_ALGORITHM_IDENTIFIER</field>
<field name="cCTLEntry">DWORD</field>
<field name="rgCTLEntry">PCTL_ENTRY</field>
<field name="cExtension">DWORD</field>
<field name="rgExtension">PCERT_EXTENSION</field>
</struct>
<typedefprev id="CTL_INFO"/>
<typedefptrprev id="PCTL_INFO"/>

<struct name="_CRYPT_TIME_STAMP_REQUEST_INFO">
<field name="pszTimeStampAlgorithm">LPSTR</field>
<field name="pszContentType">LPSTR</field>
<field name="Content">CRYPT_OBJID_BLOB</field>
<field name="cAttribute">DWORD</field>
<field name="rgAttribute">PCRYPT_ATTRIBUTE</field>
</struct>
<typedefprev id="CRYPT_TIME_STAMP_REQUEST_INFO"/>
<typedefptrprev id="PCRYPT_TIME_STAMP_REQUEST_INFO"/>

<struct name="_CRYPT_ENROLLMENT_NAME_VALUE_PAIR">
<field name="pwszName">LPWSTR</field>
<field name="pwszValue">LPWSTR</field>
</struct>
<typedefprev id="CRYPT_ENROLLMENT_NAME_VALUE_PAIR"/>
<typedefptrprev id="PCRYPT_ENROLLMENT_NAME_VALUE_PAIR"/>

<struct name="_CRYPT_CSP_PROVIDER">
<field name="dwKeySpec">DWORD</field>
<field name="pwszProviderName">LPWSTR</field>
<field name="Signature">CRYPT_BIT_BLOB</field>
</struct>
<typedefprev id="CRYPT_CSP_PROVIDER"/>
<typedefptrprev id="PCRYPT_CSP_PROVIDER"/>

<function name="CryptFormatObject" ret="BOOL" convention="__stdcall">
<arg name="dwCertEncodingType">DWORD</arg>
<arg name="dwFormatType">DWORD</arg>
<arg name="dwFormatStrType">DWORD</arg>

     void *pFormatStruct,
     LPCSTR lpszStructType,
     const BYTE *pbEncoded,
     DWORD cbEncoded,
      void *pbFormat,
<arg name="pcbFormat">DWORD *</arg>
</function>
typedef<fnptr name="PFN_CRYPT_ALLOC" ret="LPVOID" convention="__stdcall">

<arg name="cbSize">size_t</arg>
</function>

typedef<fnptr name="PFN_CRYPT_FREE" ret="void" convention="__stdcall">

<arg name="pv">LPVOID</arg>
</function>
<struct name="_CRYPT_ENCODE_PARA">
<field name="cbSize">DWORD</field>
<field name="pfnAlloc">PFN_CRYPT_ALLOC</field>
<field name="pfnFree">PFN_CRYPT_FREE</field>
</struct>
<typedefprev id="CRYPT_ENCODE_PARA"/>
<typedefptrprev id="PCRYPT_ENCODE_PARA"/>
<function name="CryptEncodeObjectEx" ret="BOOL" convention="__stdcall">
<arg name="dwCertEncodingType">DWORD</arg>
<arg name="lpszStructType">LPCSTR</arg>

     const void *pvStructInfo,
     DWORD dwFlags,
     PCRYPT_ENCODE_PARA pEncodePara,
     void *pvEncoded,
<arg name="pcbEncoded">DWORD *</arg>
</function>

<function name="CryptEncodeObject" ret="BOOL" convention="__stdcall">
<arg name="dwCertEncodingType">DWORD</arg>
<arg name="lpszStructType">LPCSTR</arg>

     const void *pvStructInfo,
     BYTE *pbEncoded,
<arg name="pcbEncoded">DWORD *</arg>
</function>

<struct name="_CRYPT_DECODE_PARA">
<field name="cbSize">DWORD</field>
<field name="pfnAlloc">PFN_CRYPT_ALLOC</field>
<field name="pfnFree">PFN_CRYPT_FREE</field>
</struct>
<typedefprev id="CRYPT_DECODE_PARA"/>
<typedefptrprev id="PCRYPT_DECODE_PARA"/>

<function name="CryptDecodeObjectEx" ret="BOOL" convention="__stdcall">
<arg name="dwCertEncodingType">DWORD</arg>
<arg name="lpszStructType">LPCSTR</arg>

     const BYTE *pbEncoded,
     DWORD cbEncoded,
     DWORD dwFlags,
     PCRYPT_DECODE_PARA pDecodePara,
     void *pvStructInfo,
<arg name="pcbStructInfo">DWORD *</arg>
</function>
<function name="CryptDecodeObject" ret="BOOL" convention="__stdcall">
<arg name="dwCertEncodingType">DWORD</arg>
<arg name="lpszStructType">LPCSTR</arg>

     const BYTE *pbEncoded,
     DWORD cbEncoded,
     DWORD dwFlags,
     void *pvStructInfo,
<arg name="pcbStructInfo">DWORD *</arg>
</function>
<struct name="_CERT_EXTENSIONS">
<field name="cExtension">DWORD</field>
<field name="rgExtension">PCERT_EXTENSION</field>
</struct>
<typedefprev id="CERT_EXTENSIONS"/>
<typedefptrprev id="PCERT_EXTENSIONS"/>

<struct name="_CERT_AUTHORITY_KEY_ID_INFO">
<field name="KeyId">CRYPT_DATA_BLOB</field>
<field name="CertIssuer">CERT_NAME_BLOB</field>
<field name="CertSerialNumber">CRYPT_INTEGER_BLOB</field>
</struct>
<typedefprev id="CERT_AUTHORITY_KEY_ID_INFO"/>
<typedefptrprev id="PCERT_AUTHORITY_KEY_ID_INFO"/>
<struct name="_CERT_PRIVATE_KEY_VALIDITY">
<field name="NotBefore">FILETIME</field>
<field name="NotAfter">FILETIME</field>
</struct>
<typedefprev id="CERT_PRIVATE_KEY_VALIDITY"/>
<typedefptrprev id="PCERT_PRIVATE_KEY_VALIDITY"/>

<struct name="_CERT_KEY_ATTRIBUTES_INFO">
<field name="KeyId">CRYPT_DATA_BLOB</field>
<field name="IntendedKeyUsage">CRYPT_BIT_BLOB</field>
<field name="pPrivateKeyUsagePeriod">PCERT_PRIVATE_KEY_VALIDITY</field>
</struct>
<typedefprev id="CERT_KEY_ATTRIBUTES_INFO"/>
<typedefptrprev id="PCERT_KEY_ATTRIBUTES_INFO"/>
<struct name="_CERT_POLICY_ID">
<field name="cCertPolicyElementId">DWORD</field>
    LPSTR                   *rgpszCertPolicyElementId;  
} CERT_POLICY_ID, *PCERT_POLICY_ID;

<struct name="_CERT_KEY_USAGE_RESTRICTION_INFO">
<field name="cCertPolicyId">DWORD</field>
<field name="rgCertPolicyId">PCERT_POLICY_ID</field>
<field name="RestrictedKeyUsage">CRYPT_BIT_BLOB</field>
</struct>
<typedefprev id="CERT_KEY_USAGE_RESTRICTION_INFO"/>
<typedefptrprev id="PCERT_KEY_USAGE_RESTRICTION_INFO"/>

<struct name="_CERT_OTHER_NAME">
<field name="pszObjId">LPSTR</field>
<field name="Value">CRYPT_OBJID_BLOB</field>
</struct>
<typedefprev id="CERT_OTHER_NAME"/>
<typedefptrprev id="PCERT_OTHER_NAME"/>

<struct name="_CERT_ALT_NAME_ENTRY">
<field name="dwAltNameChoice">DWORD</field>
    union {                                             
        PCERT_OTHER_NAME            pOtherName;         
        LPWSTR                      pwszRfc822Name;     
        LPWSTR                      pwszDNSName;        
        
        CERT_NAME_BLOB              DirectoryName;      
        
        LPWSTR                      pwszURL;            
        CRYPT_DATA_BLOB             IPAddress;          
        LPSTR                       pszRegisteredID;    
    };                                                  
} CERT_ALT_NAME_ENTRY, *PCERT_ALT_NAME_ENTRY;

<struct name="_CERT_ALT_NAME_INFO">
<field name="cAltEntry">DWORD</field>
<field name="rgAltEntry">PCERT_ALT_NAME_ENTRY</field>
</struct>
<typedefprev id="CERT_ALT_NAME_INFO"/>
<typedefptrprev id="PCERT_ALT_NAME_INFO"/>
<struct name="_CERT_BASIC_CONSTRAINTS_INFO">
<field name="SubjectType">CRYPT_BIT_BLOB</field>
<field name="fPathLenConstraint">BOOL</field>
<field name="dwPathLenConstraint">DWORD</field>
<field name="cSubtreesConstraint">DWORD</field>
    CERT_NAME_BLOB          *rgSubtreesConstraint;
} CERT_BASIC_CONSTRAINTS_INFO, *PCERT_BASIC_CONSTRAINTS_INFO;
<struct name="_CERT_BASIC_CONSTRAINTS2_INFO">
<field name="fCA">BOOL</field>
<field name="fPathLenConstraint">BOOL</field>
<field name="dwPathLenConstraint">DWORD</field>
</struct>
<typedefprev id="CERT_BASIC_CONSTRAINTS2_INFO"/>
<typedefptrprev id="PCERT_BASIC_CONSTRAINTS2_INFO"/>

<struct name="_CERT_POLICY_QUALIFIER_INFO">
<field name="pszPolicyQualifierId">LPSTR</field>
<field name="Qualifier">CRYPT_OBJID_BLOB</field>
</struct>
<typedefprev id="CERT_POLICY_QUALIFIER_INFO"/>
<typedefptrprev id="PCERT_POLICY_QUALIFIER_INFO"/>

<struct name="_CERT_POLICY_INFO">
<field name="pszPolicyIdentifier">LPSTR</field>
<field name="cPolicyQualifier">DWORD</field>
    CERT_POLICY_QUALIFIER_INFO  *rgPolicyQualifier;
} CERT_POLICY_INFO, *PCERT_POLICY_INFO;

<struct name="_CERT_POLICIES_INFO">
<field name="cPolicyInfo">DWORD</field>
    CERT_POLICY_INFO            *rgPolicyInfo;
} CERT_POLICIES_INFO, *PCERT_POLICIES_INFO;
<struct name="_CERT_POLICY_QUALIFIER_NOTICE_REFERENCE">
<field name="pszOrganization">LPSTR</field>
<field name="cNoticeNumbers">DWORD</field>
    int     *rgNoticeNumbers;
} CERT_POLICY_QUALIFIER_NOTICE_REFERENCE, *PCERT_POLICY_QUALIFIER_NOTICE_REFERENCE;

<struct name="_CERT_POLICY_QUALIFIER_USER_NOTICE">
    CERT_POLICY_QUALIFIER_NOTICE_REFERENCE  *pNoticeReference;  
    LPWSTR                                  pszDisplayText;     
} CERT_POLICY_QUALIFIER_USER_NOTICE, *PCERT_POLICY_QUALIFIER_USER_NOTICE;
<struct name="_CPS_URLS">
<field name="pszURL">LPWSTR</field>
    CRYPT_ALGORITHM_IDENTIFIER  *pAlgorithm; 
    CRYPT_DATA_BLOB             *pDigest;    
} CPS_URLS, *PCPS_URLS;

<struct name="_CERT_POLICY95_QUALIFIER1">
<field name="pszPracticesReference">LPWSTR</field>
<field name="pszNoticeIdentifier">LPSTR</field>
<field name="pszNSINoticeIdentifier">LPSTR</field>
<field name="cCPSURLs">DWORD</field>
    CPS_URLS    *rgCPSURLs;                 
} CERT_POLICY95_QUALIFIER1, *PCERT_POLICY95_QUALIFIER1;

<struct name="_CERT_POLICY_MAPPING">
<field name="pszIssuerDomainPolicy">LPSTR</field>
<field name="pszSubjectDomainPolicy">LPSTR</field>
</struct>
<typedefprev id="CERT_POLICY_MAPPING"/>
<typedefptrprev id="PCERT_POLICY_MAPPING"/>

<struct name="_CERT_POLICY_MAPPINGS_INFO">
<field name="cPolicyMapping">DWORD</field>
<field name="rgPolicyMapping">PCERT_POLICY_MAPPING</field>
</struct>
<typedefprev id="CERT_POLICY_MAPPINGS_INFO"/>
<typedefptrprev id="PCERT_POLICY_MAPPINGS_INFO"/>
<struct name="_CERT_POLICY_CONSTRAINTS_INFO">
<field name="fRequireExplicitPolicy">BOOL</field>
<field name="dwRequireExplicitPolicySkipCerts">DWORD</field>
<field name="fInhibitPolicyMapping">BOOL</field>
<field name="dwInhibitPolicyMappingSkipCerts">DWORD</field>
} CERT_POLICY_CONSTRAINTS_INFO, *PCERT_POLICY_CONSTRAINTS_INFO;

<struct name="_CRYPT_CONTENT_INFO_SEQUENCE_OF_ANY">
<field name="pszObjId">LPSTR</field>
<field name="cValue">DWORD</field>
<field name="rgValue">PCRYPT_DER_BLOB</field>
</struct>
<typedefprev id="CRYPT_CONTENT_INFO_SEQUENCE_OF_ANY"/>
<typedefptrprev id="PCRYPT_CONTENT_INFO_SEQUENCE_OF_ANY"/>
<struct name="_CRYPT_CONTENT_INFO">
<field name="pszObjId">LPSTR</field>
<field name="Content">CRYPT_DER_BLOB</field>
</struct>
<typedefprev id="CRYPT_CONTENT_INFO"/>
<typedefptrprev id="PCRYPT_CONTENT_INFO"/>

<struct name="_CRYPT_SEQUENCE_OF_ANY">
<field name="cValue">DWORD</field>
<field name="rgValue">PCRYPT_DER_BLOB</field>
</struct>
<typedefprev id="CRYPT_SEQUENCE_OF_ANY"/>
<typedefptrprev id="PCRYPT_SEQUENCE_OF_ANY"/>

<struct name="_CERT_AUTHORITY_KEY_ID2_INFO">
<field name="KeyId">CRYPT_DATA_BLOB</field>
<field name="AuthorityCertIssuer">CERT_ALT_NAME_INFO</field>
                                                
    CRYPT_INTEGER_BLOB  AuthorityCertSerialNumber;
} CERT_AUTHORITY_KEY_ID2_INFO, *PCERT_AUTHORITY_KEY_ID2_INFO;

<struct name="_CERT_ACCESS_DESCRIPTION">
<field name="pszAccessMethod">LPSTR</field>
<field name="AccessLocation">CERT_ALT_NAME_ENTRY</field>
</struct>
<typedefprev id="CERT_ACCESS_DESCRIPTION"/>
<typedefptrprev id="PCERT_ACCESS_DESCRIPTION"/>
<struct name="_CERT_AUTHORITY_INFO_ACCESS">
<field name="cAccDescr">DWORD</field>
<field name="rgAccDescr">PCERT_ACCESS_DESCRIPTION</field>
} CERT_AUTHORITY_INFO_ACCESS, *PCERT_AUTHORITY_INFO_ACCESS,
  CERT_SUBJECT_INFO_ACCESS, *PCERT_SUBJECT_INFO_ACCESS;

<struct name="_CRL_DIST_POINT_NAME">
<field name="dwDistPointNameChoice">DWORD</field>
    union {
        CERT_ALT_NAME_INFO      FullName;       
        
    };
} CRL_DIST_POINT_NAME, *PCRL_DIST_POINT_NAME;
<struct name="_CRL_DIST_POINT">
<field name="DistPointName">CRL_DIST_POINT_NAME</field>
<field name="ReasonFlags">CRYPT_BIT_BLOB</field>
<field name="CRLIssuer">CERT_ALT_NAME_INFO</field>
</struct>
<typedefprev id="CRL_DIST_POINT"/>
<typedefptrprev id="PCRL_DIST_POINT"/>
<struct name="_CRL_DIST_POINTS_INFO">
<field name="cDistPoint">DWORD</field>
<field name="rgDistPoint">PCRL_DIST_POINT</field>
</struct>
<typedefprev id="CRL_DIST_POINTS_INFO"/>
<typedefptrprev id="PCRL_DIST_POINTS_INFO"/>

<struct name="_CROSS_CERT_DIST_POINTS_INFO">
    
    DWORD                   dwSyncDeltaTime;

    DWORD                   cDistPoint;
    PCERT_ALT_NAME_INFO     rgDistPoint;
} CROSS_CERT_DIST_POINTS_INFO, *PCROSS_CERT_DIST_POINTS_INFO;

<struct name="_CERT_PAIR">
<field name="Forward">CERT_BLOB</field>
<field name="Reverse">CERT_BLOB</field>
</struct>
<typedefprev id="CERT_PAIR"/>
<typedefptrprev id="PCERT_PAIR"/>
<struct name="_CRL_ISSUING_DIST_POINT">
<field name="DistPointName">CRL_DIST_POINT_NAME</field>
<field name="fOnlyContainsUserCerts">BOOL</field>
<field name="fOnlyContainsCACerts">BOOL</field>
<field name="OnlySomeReasonFlags">CRYPT_BIT_BLOB</field>
<field name="fIndirectCRL">BOOL</field>
</struct>
<typedefprev id="CRL_ISSUING_DIST_POINT"/>
<typedefptrprev id="PCRL_ISSUING_DIST_POINT"/>
<struct name="_CERT_GENERAL_SUBTREE">
<field name="Base">CERT_ALT_NAME_ENTRY</field>
<field name="dwMinimum">DWORD</field>
<field name="fMaximum">BOOL</field>
<field name="dwMaximum">DWORD</field>
</struct>
<typedefprev id="CERT_GENERAL_SUBTREE"/>
<typedefptrprev id="PCERT_GENERAL_SUBTREE"/>

<struct name="_CERT_NAME_CONSTRAINTS_INFO">
<field name="cPermittedSubtree">DWORD</field>
<field name="rgPermittedSubtree">PCERT_GENERAL_SUBTREE</field>
<field name="cExcludedSubtree">DWORD</field>
<field name="rgExcludedSubtree">PCERT_GENERAL_SUBTREE</field>
</struct>
<typedefprev id="CERT_NAME_CONSTRAINTS_INFO"/>
<typedefptrprev id="PCERT_NAME_CONSTRAINTS_INFO"/>
<struct name="_CERT_DSS_PARAMETERS">
<field name="p">CRYPT_UINT_BLOB</field>
<field name="q">CRYPT_UINT_BLOB</field>
<field name="g">CRYPT_UINT_BLOB</field>
</struct>
<typedefprev id="CERT_DSS_PARAMETERS"/>
<typedefptrprev id="PCERT_DSS_PARAMETERS"/>
<struct name="_CERT_DH_PARAMETERS">
<field name="p">CRYPT_UINT_BLOB</field>
<field name="g">CRYPT_UINT_BLOB</field>
</struct>
<typedefprev id="CERT_DH_PARAMETERS"/>
<typedefptrprev id="PCERT_DH_PARAMETERS"/>
<struct name="_CERT_ECC_SIGNATURE">
<field name="r">CRYPT_UINT_BLOB</field>
<field name="s">CRYPT_UINT_BLOB</field>
</struct>
<typedefprev id="CERT_ECC_SIGNATURE"/>
<typedefptrprev id="PCERT_ECC_SIGNATURE"/>

<struct name="_CERT_X942_DH_VALIDATION_PARAMS">
<field name="seed">CRYPT_BIT_BLOB</field>
<field name="pgenCounter">DWORD</field>
</struct>
<typedefprev id="CERT_X942_DH_VALIDATION_PARAMS"/>
<typedefptrprev id="PCERT_X942_DH_VALIDATION_PARAMS"/>

<struct name="_CERT_X942_DH_PARAMETERS">
<field name="p">CRYPT_UINT_BLOB</field>
<field name="g">CRYPT_UINT_BLOB</field>
<field name="q">CRYPT_UINT_BLOB</field>
<field name="j">CRYPT_UINT_BLOB</field>
<field name="pValidationParams">PCERT_X942_DH_VALIDATION_PARAMS</field>
</struct>
<typedefprev id="CERT_X942_DH_PARAMETERS"/>
<typedefptrprev id="PCERT_X942_DH_PARAMETERS"/>

<struct name="_CRYPT_X942_OTHER_INFO">
<field name="pszContentEncryptionObjId">LPSTR</field>
<field name="rgbCounter[4]">BYTE</field>
<field name="rgbKeyLength[4]">BYTE</field>
<field name="PubInfo">CRYPT_DATA_BLOB</field>
</struct>
<typedefprev id="CRYPT_X942_OTHER_INFO"/>
<typedefptrprev id="PCRYPT_X942_OTHER_INFO"/>
<struct name="_CRYPT_ECC_CMS_SHARED_INFO">
<field name="Algorithm">CRYPT_ALGORITHM_IDENTIFIER</field>
<field name="EntityUInfo">CRYPT_DATA_BLOB</field>
<field name="rgbSuppPubInfo[4]">BYTE</field>
</struct>
<typedefprev id="CRYPT_ECC_CMS_SHARED_INFO"/>
<typedefptrprev id="PCRYPT_ECC_CMS_SHARED_INFO"/>

<struct name="_CRYPT_RC2_CBC_PARAMETERS">
<field name="dwVersion">DWORD</field>
<field name="fIV">BOOL</field>
<field name="rgbIV[8]">BYTE</field>
</struct>
<typedefprev id="CRYPT_RC2_CBC_PARAMETERS"/>
<typedefptrprev id="PCRYPT_RC2_CBC_PARAMETERS"/>
<struct name="_CRYPT_SMIME_CAPABILITY">
<field name="pszObjId">LPSTR</field>
<field name="Parameters">CRYPT_OBJID_BLOB</field>
</struct>
<typedefprev id="CRYPT_SMIME_CAPABILITY"/>
<typedefptrprev id="PCRYPT_SMIME_CAPABILITY"/>

<struct name="_CRYPT_SMIME_CAPABILITIES">
<field name="cCapability">DWORD</field>
<field name="rgCapability">PCRYPT_SMIME_CAPABILITY</field>
</struct>
<typedefprev id="CRYPT_SMIME_CAPABILITIES"/>
<typedefptrprev id="PCRYPT_SMIME_CAPABILITIES"/>
<struct name="_CERT_QC_STATEMENT">
<field name="pszStatementId">LPSTR</field>
<field name="StatementInfo">CRYPT_OBJID_BLOB</field>
</struct>
<typedefprev id="CERT_QC_STATEMENT"/>
<typedefptrprev id="PCERT_QC_STATEMENT"/>

<struct name="_CERT_QC_STATEMENTS_EXT_INFO">
<field name="cStatement">DWORD</field>
<field name="rgStatement">PCERT_QC_STATEMENT</field>
</struct>
<typedefprev id="CERT_QC_STATEMENTS_EXT_INFO"/>
<typedefptrprev id="PCERT_QC_STATEMENTS_EXT_INFO"/>
<struct name="_CRYPT_MASK_GEN_ALGORITHM">
<field name="pszObjId">LPSTR</field>
<field name="HashAlgorithm">CRYPT_ALGORITHM_IDENTIFIER</field>
</struct>
<typedefprev id="CRYPT_MASK_GEN_ALGORITHM"/>
<typedefptrprev id="PCRYPT_MASK_GEN_ALGORITHM"/>

<struct name="_CRYPT_RSA_SSA_PSS_PARAMETERS">
<field name="HashAlgorithm">CRYPT_ALGORITHM_IDENTIFIER</field>
<field name="MaskGenAlgorithm">CRYPT_MASK_GEN_ALGORITHM</field>
<field name="dwSaltLength">DWORD</field>
<field name="dwTrailerField">DWORD</field>
</struct>
<typedefprev id="CRYPT_RSA_SSA_PSS_PARAMETERS"/>
<typedefptrprev id="PCRYPT_RSA_SSA_PSS_PARAMETERS"/>
<struct name="_CRYPT_PSOURCE_ALGORITHM">
<field name="pszObjId">LPSTR</field>
<field name="EncodingParameters">CRYPT_DATA_BLOB</field>
</struct>
<typedefprev id="CRYPT_PSOURCE_ALGORITHM"/>
<typedefptrprev id="PCRYPT_PSOURCE_ALGORITHM"/>

<struct name="_CRYPT_RSAES_OAEP_PARAMETERS">
<field name="HashAlgorithm">CRYPT_ALGORITHM_IDENTIFIER</field>
<field name="MaskGenAlgorithm">CRYPT_MASK_GEN_ALGORITHM</field>
<field name="PSourceAlgorithm">CRYPT_PSOURCE_ALGORITHM</field>
</struct>
<typedefprev id="CRYPT_RSAES_OAEP_PARAMETERS"/>
<typedefptrprev id="PCRYPT_RSAES_OAEP_PARAMETERS"/>
<struct name="_CMC_TAGGED_ATTRIBUTE">
<field name="dwBodyPartID">DWORD</field>
<field name="Attribute">CRYPT_ATTRIBUTE</field>
</struct>
<typedefprev id="CMC_TAGGED_ATTRIBUTE"/>
<typedefptrprev id="PCMC_TAGGED_ATTRIBUTE"/>

<struct name="_CMC_TAGGED_CERT_REQUEST">
<field name="dwBodyPartID">DWORD</field>
<field name="SignedCertRequest">CRYPT_DER_BLOB</field>
</struct>
<typedefprev id="CMC_TAGGED_CERT_REQUEST"/>
<typedefptrprev id="PCMC_TAGGED_CERT_REQUEST"/>

<struct name="_CMC_TAGGED_REQUEST">
<field name="dwTaggedRequestChoice">DWORD</field>
    union {
        
        PCMC_TAGGED_CERT_REQUEST   pTaggedCertRequest;
    };
} CMC_TAGGED_REQUEST, *PCMC_TAGGED_REQUEST;
<struct name="_CMC_TAGGED_CONTENT_INFO">
<field name="dwBodyPartID">DWORD</field>
<field name="EncodedContentInfo">CRYPT_DER_BLOB</field>
</struct>
<typedefprev id="CMC_TAGGED_CONTENT_INFO"/>
<typedefptrprev id="PCMC_TAGGED_CONTENT_INFO"/>

<struct name="_CMC_TAGGED_OTHER_MSG">
<field name="dwBodyPartID">DWORD</field>
<field name="pszObjId">LPSTR</field>
<field name="Value">CRYPT_OBJID_BLOB</field>
</struct>
<typedefprev id="CMC_TAGGED_OTHER_MSG"/>
<typedefptrprev id="PCMC_TAGGED_OTHER_MSG"/>
<struct name="_CMC_DATA_INFO">
<field name="cTaggedAttribute">DWORD</field>
<field name="rgTaggedAttribute">PCMC_TAGGED_ATTRIBUTE</field>
<field name="cTaggedRequest">DWORD</field>
<field name="rgTaggedRequest">PCMC_TAGGED_REQUEST</field>
<field name="cTaggedContentInfo">DWORD</field>
<field name="rgTaggedContentInfo">PCMC_TAGGED_CONTENT_INFO</field>
<field name="cTaggedOtherMsg">DWORD</field>
<field name="rgTaggedOtherMsg">PCMC_TAGGED_OTHER_MSG</field>
</struct>
<typedefprev id="CMC_DATA_INFO"/>
<typedefptrprev id="PCMC_DATA_INFO"/>
<struct name="_CMC_RESPONSE_INFO">
<field name="cTaggedAttribute">DWORD</field>
<field name="rgTaggedAttribute">PCMC_TAGGED_ATTRIBUTE</field>
<field name="cTaggedContentInfo">DWORD</field>
<field name="rgTaggedContentInfo">PCMC_TAGGED_CONTENT_INFO</field>
<field name="cTaggedOtherMsg">DWORD</field>
<field name="rgTaggedOtherMsg">PCMC_TAGGED_OTHER_MSG</field>
</struct>
<typedefprev id="CMC_RESPONSE_INFO"/>
<typedefptrprev id="PCMC_RESPONSE_INFO"/>
<struct name="_CMC_PEND_INFO">
<field name="PendToken">CRYPT_DATA_BLOB</field>
<field name="PendTime">FILETIME</field>
</struct>
<typedefprev id="CMC_PEND_INFO"/>
<typedefptrprev id="PCMC_PEND_INFO"/>

<struct name="_CMC_STATUS_INFO">
<field name="dwStatus">DWORD</field>
<field name="cBodyList">DWORD</field>
    DWORD                       *rgdwBodyList;
    LPWSTR                      pwszStatusString;   
    DWORD                       dwOtherInfoChoice;
    union  {
        
        
        
        DWORD                       dwFailInfo;
        
        PCMC_PEND_INFO              pPendInfo;
    };
} CMC_STATUS_INFO, *PCMC_STATUS_INFO;

<struct name="_CMC_ADD_EXTENSIONS_INFO">
<field name="dwCmcDataReference">DWORD</field>
<field name="cCertReference">DWORD</field>
    DWORD                       *rgdwCertReference;
    DWORD                       cExtension;
    PCERT_EXTENSION             rgExtension;
} CMC_ADD_EXTENSIONS_INFO, *PCMC_ADD_EXTENSIONS_INFO;
<struct name="_CMC_ADD_ATTRIBUTES_INFO">
<field name="dwCmcDataReference">DWORD</field>
<field name="cCertReference">DWORD</field>
    DWORD                       *rgdwCertReference;
    DWORD                       cAttribute;
    PCRYPT_ATTRIBUTE            rgAttribute;
} CMC_ADD_ATTRIBUTES_INFO, *PCMC_ADD_ATTRIBUTES_INFO;
<struct name="_CERT_TEMPLATE_EXT">
<field name="pszObjId">LPSTR</field>
<field name="dwMajorVersion">DWORD</field>
<field name="fMinorVersion">BOOL</field>
<field name="dwMinorVersion">DWORD</field>
</struct>
<typedefprev id="CERT_TEMPLATE_EXT"/>
<typedefptrprev id="PCERT_TEMPLATE_EXT"/>
<struct name="_CERT_HASHED_URL">
<field name="HashAlgorithm">CRYPT_ALGORITHM_IDENTIFIER</field>
<field name="Hash">CRYPT_HASH_BLOB</field>
<field name="pwszUrl">LPWSTR</field>
                                            
} CERT_HASHED_URL, *PCERT_HASHED_URL;

<struct name="_CERT_LOGOTYPE_DETAILS">
<field name="pwszMimeType">LPWSTR</field>
<field name="cHashedUrl">DWORD</field>
<field name="rgHashedUrl">PCERT_HASHED_URL</field>
</struct>
<typedefprev id="CERT_LOGOTYPE_DETAILS"/>
<typedefptrprev id="PCERT_LOGOTYPE_DETAILS"/>

<struct name="_CERT_LOGOTYPE_REFERENCE">
<field name="cHashedUrl">DWORD</field>
<field name="rgHashedUrl">PCERT_HASHED_URL</field>
</struct>
<typedefprev id="CERT_LOGOTYPE_REFERENCE"/>
<typedefptrprev id="PCERT_LOGOTYPE_REFERENCE"/>

<struct name="_CERT_LOGOTYPE_IMAGE_INFO">
    
    
    DWORD                       dwLogotypeImageInfoChoice;

    DWORD                       dwFileSize;     
    DWORD                       dwXSize;        
    DWORD                       dwYSize;        

    DWORD                       dwLogotypeImageResolutionChoice;
    union {
        
        

        
        DWORD                       dwNumBits;      

        
        DWORD                       dwTableSize;    
    };
    LPWSTR                      pwszLanguage;   
                                                
} CERT_LOGOTYPE_IMAGE_INFO, *PCERT_LOGOTYPE_IMAGE_INFO;

<struct name="_CERT_LOGOTYPE_IMAGE">
<field name="LogotypeDetails">CERT_LOGOTYPE_DETAILS</field>
<field name="pLogotypeImageInfo">PCERT_LOGOTYPE_IMAGE_INFO</field> 
} CERT_LOGOTYPE_IMAGE, *PCERT_LOGOTYPE_IMAGE;
<struct name="_CERT_LOGOTYPE_AUDIO_INFO">
<field name="dwFileSize">DWORD</field>
<field name="dwPlayTime">DWORD</field>
<field name="dwChannels">DWORD</field>
<field name="dwSampleRate">DWORD</field>
                                                
    LPWSTR                      pwszLanguage;   
                                                
} CERT_LOGOTYPE_AUDIO_INFO, *PCERT_LOGOTYPE_AUDIO_INFO;

<struct name="_CERT_LOGOTYPE_AUDIO">
<field name="LogotypeDetails">CERT_LOGOTYPE_DETAILS</field>
<field name="pLogotypeAudioInfo">PCERT_LOGOTYPE_AUDIO_INFO</field> 
} CERT_LOGOTYPE_AUDIO, *PCERT_LOGOTYPE_AUDIO;
<struct name="_CERT_LOGOTYPE_DATA">
<field name="cLogotypeImage">DWORD</field>
<field name="rgLogotypeImage">PCERT_LOGOTYPE_IMAGE</field>
<field name="cLogotypeAudio">DWORD</field>
<field name="rgLogotypeAudio">PCERT_LOGOTYPE_AUDIO</field>
} CERT_LOGOTYPE_DATA, *PCERT_LOGOTYPE_DATA;
<struct name="_CERT_LOGOTYPE_INFO">
<field name="dwLogotypeInfoChoice">DWORD</field>
    union {
        
        PCERT_LOGOTYPE_DATA         pLogotypeDirectInfo;

        
        PCERT_LOGOTYPE_REFERENCE    pLogotypeIndirectInfo;
    };
} CERT_LOGOTYPE_INFO, *PCERT_LOGOTYPE_INFO;

<struct name="_CERT_OTHER_LOGOTYPE_INFO">
<field name="pszObjId">LPSTR</field>
<field name="LogotypeInfo">CERT_LOGOTYPE_INFO</field>
</struct>
<typedefprev id="CERT_OTHER_LOGOTYPE_INFO"/>
<typedefptrprev id="PCERT_OTHER_LOGOTYPE_INFO"/>

<struct name="_CERT_LOGOTYPE_EXT_INFO">
<field name="cCommunityLogo">DWORD</field>
<field name="rgCommunityLogo">PCERT_LOGOTYPE_INFO</field>
<field name="pIssuerLogo">PCERT_LOGOTYPE_INFO</field>
<field name="pSubjectLogo">PCERT_LOGOTYPE_INFO</field>
<field name="cOtherLogo">DWORD</field>
<field name="rgOtherLogo">PCERT_OTHER_LOGOTYPE_INFO</field>
</struct>
<typedefprev id="CERT_LOGOTYPE_EXT_INFO"/>
<typedefptrprev id="PCERT_LOGOTYPE_EXT_INFO"/>

<struct name="_CERT_BIOMETRIC_DATA">
<field name="dwTypeOfBiometricDataChoice">DWORD</field>
    union {
        
        DWORD                       dwPredefined;

        
        LPSTR                       pszObjId;
    };

    CERT_HASHED_URL             HashedUrl;      
} CERT_BIOMETRIC_DATA, *PCERT_BIOMETRIC_DATA;

<struct name="_CERT_BIOMETRIC_EXT_INFO">
<field name="cBiometricData">DWORD</field>
<field name="rgBiometricData">PCERT_BIOMETRIC_DATA</field>
</struct>
<typedefprev id="CERT_BIOMETRIC_EXT_INFO"/>
<typedefptrprev id="PCERT_BIOMETRIC_EXT_INFO"/>
<struct name="_OCSP_SIGNATURE_INFO">
<field name="SignatureAlgorithm">CRYPT_ALGORITHM_IDENTIFIER</field>
<field name="Signature">CRYPT_BIT_BLOB</field>
<field name="cCertEncoded">DWORD</field>
<field name="rgCertEncoded">PCERT_BLOB</field>
</struct>
<typedefprev id="OCSP_SIGNATURE_INFO"/>
<typedefptrprev id="POCSP_SIGNATURE_INFO"/>

<struct name="_OCSP_SIGNED_REQUEST_INFO">
<field name="ToBeSigned">CRYPT_DER_BLOB</field>
<field name="pOptionalSignatureInfo">POCSP_SIGNATURE_INFO</field>
</struct>
<typedefprev id="OCSP_SIGNED_REQUEST_INFO"/>
<typedefptrprev id="POCSP_SIGNED_REQUEST_INFO"/>
<struct name="_OCSP_CERT_ID">
<field name="HashAlgorithm">CRYPT_ALGORITHM_IDENTIFIER</field>
<field name="IssuerNameHash">CRYPT_HASH_BLOB</field>
<field name="IssuerKeyHash">CRYPT_HASH_BLOB</field>
<field name="SerialNumber">CRYPT_INTEGER_BLOB</field>
</struct>
<typedefprev id="OCSP_CERT_ID"/>
<typedefptrprev id="POCSP_CERT_ID"/>

<struct name="_OCSP_REQUEST_ENTRY">
<field name="CertId">OCSP_CERT_ID</field>
<field name="cExtension">DWORD</field>
<field name="rgExtension">PCERT_EXTENSION</field>
</struct>
<typedefprev id="OCSP_REQUEST_ENTRY"/>
<typedefptrprev id="POCSP_REQUEST_ENTRY"/>

<struct name="_OCSP_REQUEST_INFO">
<field name="dwVersion">DWORD</field>
<field name="pRequestorName">PCERT_ALT_NAME_ENTRY</field>
<field name="cRequestEntry">DWORD</field>
<field name="rgRequestEntry">POCSP_REQUEST_ENTRY</field>
<field name="cExtension">DWORD</field>
<field name="rgExtension">PCERT_EXTENSION</field>
</struct>
<typedefprev id="OCSP_REQUEST_INFO"/>
<typedefptrprev id="POCSP_REQUEST_INFO"/>

<struct name="_OCSP_RESPONSE_INFO">
<field name="dwStatus">DWORD</field>
<field name="pszObjId">LPSTR</field>
<field name="Value">CRYPT_OBJID_BLOB</field>
</struct>
<typedefprev id="OCSP_RESPONSE_INFO"/>
<typedefptrprev id="POCSP_RESPONSE_INFO"/>

<struct name="_OCSP_BASIC_SIGNED_RESPONSE_INFO">
<field name="ToBeSigned">CRYPT_DER_BLOB</field>
<field name="SignatureInfo">OCSP_SIGNATURE_INFO</field>
</struct>
<typedefprev id="OCSP_BASIC_SIGNED_RESPONSE_INFO"/>
<typedefptrprev id="POCSP_BASIC_SIGNED_RESPONSE_INFO"/>
<struct name="_OCSP_BASIC_REVOKED_INFO">
<field name="RevocationDate">FILETIME</field>
    
    DWORD                       dwCrlReasonCode;
} OCSP_BASIC_REVOKED_INFO, *POCSP_BASIC_REVOKED_INFO;

<struct name="_OCSP_BASIC_RESPONSE_ENTRY">
<field name="CertId">OCSP_CERT_ID</field>
<field name="dwCertStatus">DWORD</field>
    union {
        
        
        

        
        POCSP_BASIC_REVOKED_INFO    pRevokedInfo;

    };
    FILETIME                    ThisUpdate;
    FILETIME                    NextUpdate; 
                                            
    DWORD                       cExtension;
    PCERT_EXTENSION             rgExtension;
} OCSP_BASIC_RESPONSE_ENTRY, *POCSP_BASIC_RESPONSE_ENTRY;

<struct name="_OCSP_BASIC_RESPONSE_INFO">
<field name="dwVersion">DWORD</field>
<field name="dwResponderIdChoice">DWORD</field>
    union {
        
        CERT_NAME_BLOB              ByNameResponderId;
        
        CRYPT_HASH_BLOB              ByKeyResponderId;
    };
    FILETIME                    ProducedAt;
    DWORD                       cResponseEntry;
    POCSP_BASIC_RESPONSE_ENTRY  rgResponseEntry;
    DWORD                       cExtension;
    PCERT_EXTENSION             rgExtension;
} OCSP_BASIC_RESPONSE_INFO, *POCSP_BASIC_RESPONSE_INFO;

typedef void *HCRYPTOIDFUNCSET;
typedef void *HCRYPTOIDFUNCADDR;

<struct name="_CRYPT_OID_FUNC_ENTRY">
<field name="pszOID">LPCSTR</field>
    void    *pvFuncAddr;
} CRYPT_OID_FUNC_ENTRY, *PCRYPT_OID_FUNC_ENTRY;

<function name="CryptInstallOIDFunctionAddress" ret="BOOL" convention="__stdcall">
<arg name="hModule">HMODULE</arg>
         
     DWORD dwEncodingType,
     LPCSTR pszFuncName,
     DWORD cFuncEntry,
     const CRYPT_OID_FUNC_ENTRY rgFuncEntry[],
<arg name="dwFlags">DWORD</arg>
</function>
<function name="CryptInitOIDFunctionSet" ret="HCRYPTOIDFUNCSET" convention="__stdcall">
<arg name="pszFuncName">LPCSTR</arg>
<arg name="dwFlags">DWORD</arg>
</function>

<function name="CryptGetOIDFunctionAddress" ret="BOOL" convention="__stdcall">
<arg name="hFuncSet">HCRYPTOIDFUNCSET</arg>
<arg name="dwEncodingType">DWORD</arg>
<arg name="pszOID">LPCSTR</arg>
<arg name="dwFlags">DWORD</arg>

     void **ppvFuncAddr,
<arg name="phFuncAddr">HCRYPTOIDFUNCADDR *</arg>
</function>
<function name="CryptGetDefaultOIDDllList" ret="BOOL" convention="__stdcall">
<arg name="hFuncSet">HCRYPTOIDFUNCSET</arg>
<arg name="dwEncodingType">DWORD</arg>

      WCHAR *pwszDllList,
<arg name="pcchDllList">DWORD *</arg>
</function>

<function name="CryptGetDefaultOIDFunctionAddress" ret="BOOL" convention="__stdcall">
<arg name="hFuncSet">HCRYPTOIDFUNCSET</arg>
<arg name="dwEncodingType">DWORD</arg>
<arg name="pwszDll">LPCWSTR</arg>
<arg name="dwFlags">DWORD</arg>

     void **ppvFuncAddr,
<arg name="phFuncAddr">HCRYPTOIDFUNCADDR *</arg>
</function>

<function name="CryptFreeOIDFunctionAddress" ret="BOOL" convention="__stdcall">
<arg name="hFuncAddr">HCRYPTOIDFUNCADDR</arg>
<arg name="dwFlags">DWORD</arg>
</function>

<function name="CryptRegisterOIDFunction" ret="BOOL" convention="__stdcall">
<arg name="dwEncodingType">DWORD</arg>
<arg name="pszFuncName">LPCSTR</arg>
<arg name="pszOID">LPCSTR</arg>
<arg name="pwszDll">LPCWSTR</arg>
<arg name="pszOverrideFuncName">LPCSTR</arg>
</function>
<function name="CryptUnregisterOIDFunction" ret="BOOL" convention="__stdcall">
<arg name="dwEncodingType">DWORD</arg>
<arg name="pszFuncName">LPCSTR</arg>
<arg name="pszOID">LPCSTR</arg>
</function>
<function name="CryptRegisterDefaultOIDFunction" ret="BOOL" convention="__stdcall">
<arg name="dwEncodingType">DWORD</arg>
<arg name="pszFuncName">LPCSTR</arg>
<arg name="dwIndex">DWORD</arg>
<arg name="pwszDll">LPCWSTR</arg>
</function>

<function name="CryptUnregisterDefaultOIDFunction" ret="BOOL" convention="__stdcall">
<arg name="dwEncodingType">DWORD</arg>
<arg name="pszFuncName">LPCSTR</arg>
<arg name="pwszDll">LPCWSTR</arg>
</function>
<function name="CryptSetOIDFunctionValue" ret="BOOL" convention="__stdcall">
<arg name="dwEncodingType">DWORD</arg>
<arg name="pszFuncName">LPCSTR</arg>
<arg name="pszOID">LPCSTR</arg>
<arg name="pwszValueName">LPCWSTR</arg>
<arg name="dwValueType">DWORD</arg>

     const BYTE *pbValueData,
<arg name="cbValueData">DWORD</arg>
</function>
<function name="CryptGetOIDFunctionValue" ret="BOOL" convention="__stdcall">
<arg name="dwEncodingType">DWORD</arg>
<arg name="pszFuncName">LPCSTR</arg>
<arg name="pszOID">LPCSTR</arg>
<arg name="pwszValueName">LPCWSTR</arg>

     DWORD *pdwValueType,
     BYTE *pbValueData,
<arg name="pcbValueData">DWORD *</arg>
</function>

typedef<fnptr name="PFN_CRYPT_ENUM_OID_FUNC" ret="BOOL" convention="__stdcall">
<arg name="dwEncodingType">DWORD</arg>
<arg name="pszFuncName">LPCSTR</arg>
<arg name="pszOID">LPCSTR</arg>
<arg name="cValue">DWORD</arg>

     const DWORD rgdwValueType[],
     LPCWSTR const rgpwszValueName[],
     const BYTE * const rgpbValueData[],
     const DWORD rgcbValueData[],
<arg name="pvArg">void *</arg>
</function>

<function name="CryptEnumOIDFunction" ret="BOOL" convention="__stdcall">
<arg name="dwEncodingType">DWORD</arg>
<arg name="pszFuncName">LPCSTR</arg>
<arg name="pszOID">LPCSTR</arg>
<arg name="dwFlags">DWORD</arg>

     void *pvArg,
<arg name="pfnEnumOIDFunc">PFN_CRYPT_ENUM_OID_FUNC</arg>
</function>

<struct name="_CRYPT_OID_INFO">
<field name="cbSize">DWORD</field>
<field name="pszOID">LPCSTR</field>
<field name="pwszName">LPCWSTR</field>
<field name="dwGroupId">DWORD</field>
    union {
        DWORD       dwValue;
        ALG_ID      Algid;
        DWORD       dwLength;
    };
    CRYPT_DATA_BLOB ExtraInfo;

} CRYPT_OID_INFO, *PCRYPT_OID_INFO;
typedef const CRYPT_OID_INFO CCRYPT_OID_INFO, *PCCRYPT_OID_INFO;

<function name="CryptFindOIDInfo" ret="PCCRYPT_OID_INFO" convention="__stdcall">
<arg name="dwKeyType">DWORD</arg>

     void *pvKey,
<arg name="dwGroupId">DWORD</arg>
</function>
<function name="CryptRegisterOIDInfo" ret="BOOL" convention="__stdcall">
<arg name="pInfo">PCCRYPT_OID_INFO</arg>
<arg name="dwFlags">DWORD</arg>
</function>
<function name="CryptUnregisterOIDInfo" ret="BOOL" convention="__stdcall">
<arg name="pInfo">PCCRYPT_OID_INFO</arg>
</function>
typedef<fnptr name="PFN_CRYPT_ENUM_OID_INFO" ret="BOOL" convention="__stdcall">
<arg name="pInfo">PCCRYPT_OID_INFO</arg>
<arg name="pvArg">void *</arg>
</function>

<function name="CryptEnumOIDInfo" ret="BOOL" convention="__stdcall">
<arg name="dwGroupId">DWORD</arg>
<arg name="dwFlags">DWORD</arg>

     void *pvArg,
<arg name="pfnEnumOIDInfo">PFN_CRYPT_ENUM_OID_INFO</arg>
</function>
<function name="CryptFindLocalizedName" ret="LPCWSTR" convention="__stdcall">
<arg name="pwszCryptName">LPCWSTR</arg>
</function>

typedef void *HCRYPTMSG;
<struct name="_CERT_ISSUER_SERIAL_NUMBER">
<field name="Issuer">CERT_NAME_BLOB</field>
<field name="SerialNumber">CRYPT_INTEGER_BLOB</field>
</struct>
<typedefprev id="CERT_ISSUER_SERIAL_NUMBER"/>
<typedefptrprev id="PCERT_ISSUER_SERIAL_NUMBER"/>

<struct name="_CERT_ID">
<field name="dwIdChoice">DWORD</field>
    union {
        
        CERT_ISSUER_SERIAL_NUMBER   IssuerSerialNumber;
        
        CRYPT_HASH_BLOB             KeyId;
        
        CRYPT_HASH_BLOB             HashId;
    };
} CERT_ID, *PCERT_ID;

<struct name="_CMSG_SIGNER_ENCODE_INFO">
<field name="cbSize">DWORD</field>
<field name="pCertInfo">PCERT_INFO</field>
    
    union {
        HCRYPTPROV                  hCryptProv;
        NCRYPT_KEY_HANDLE           hNCryptKey;
    };

    
    DWORD                       dwKeySpec;

    CRYPT_ALGORITHM_IDENTIFIER  HashAlgorithm;
    void                        *pvHashAuxInfo;
    DWORD                       cAuthAttr;
    PCRYPT_ATTRIBUTE            rgAuthAttr;
    DWORD                       cUnauthAttr;
    PCRYPT_ATTRIBUTE            rgUnauthAttr;

} CMSG_SIGNER_ENCODE_INFO, *PCMSG_SIGNER_ENCODE_INFO;

<struct name="_CMSG_SIGNED_ENCODE_INFO">
<field name="cbSize">DWORD</field>
<field name="cSigners">DWORD</field>
<field name="rgSigners">PCMSG_SIGNER_ENCODE_INFO</field>
<field name="cCertEncoded">DWORD</field>
<field name="rgCertEncoded">PCERT_BLOB</field>
<field name="cCrlEncoded">DWORD</field>
<field name="rgCrlEncoded">PCRL_BLOB</field>
</struct>
<typedefprev id="CMSG_SIGNED_ENCODE_INFO"/>
<typedefptrprev id="PCMSG_SIGNED_ENCODE_INFO"/>

typedef struct _CMSG_RECIPIENT_ENCODE_INFO CMSG_RECIPIENT_ENCODE_INFO,
    *PCMSG_RECIPIENT_ENCODE_INFO;

<struct name="_CMSG_ENVELOPED_ENCODE_INFO">
<field name="cbSize">DWORD</field>
<field name="hCryptProv">HCRYPTPROV_LEGACY</field>
<field name="ContentEncryptionAlgorithm">CRYPT_ALGORITHM_IDENTIFIER</field>
    void                        *pvEncryptionAuxInfo;
    DWORD                       cRecipients;

    
    
    
    PCERT_INFO                  *rgpRecipients;

} CMSG_ENVELOPED_ENCODE_INFO, *PCMSG_ENVELOPED_ENCODE_INFO;
<struct name="_CMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO">
<field name="cbSize">DWORD</field>
<field name="KeyEncryptionAlgorithm">CRYPT_ALGORITHM_IDENTIFIER</field>
    void                        *pvKeyEncryptionAuxInfo;
    HCRYPTPROV_LEGACY           hCryptProv;
    CRYPT_BIT_BLOB              RecipientPublicKey;
    CERT_ID                     RecipientId;
} CMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO, *PCMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO;

<struct name="_CMSG_RECIPIENT_ENCRYPTED_KEY_ENCODE_INFO">
<field name="cbSize">DWORD</field>
<field name="RecipientPublicKey">CRYPT_BIT_BLOB</field>
<field name="RecipientId">CERT_ID</field>
    
    
    FILETIME                    Date;
    PCRYPT_ATTRIBUTE_TYPE_VALUE pOtherAttr;
} CMSG_RECIPIENT_ENCRYPTED_KEY_ENCODE_INFO,
    *PCMSG_RECIPIENT_ENCRYPTED_KEY_ENCODE_INFO;

<struct name="_CMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO">
<field name="cbSize">DWORD</field>
<field name="KeyEncryptionAlgorithm">CRYPT_ALGORITHM_IDENTIFIER</field>
    void                        *pvKeyEncryptionAuxInfo;
    CRYPT_ALGORITHM_IDENTIFIER  KeyWrapAlgorithm;
    void                        *pvKeyWrapAuxInfo;

    
    
    
    
    

    HCRYPTPROV_LEGACY           hCryptProv;
    DWORD                       dwKeySpec;

    DWORD                       dwKeyChoice;
    union {
        
        
        
        PCRYPT_ALGORITHM_IDENTIFIER pEphemeralAlgorithm;

        
        
        
        PCERT_ID                    pSenderId;
    };
    CRYPT_DATA_BLOB             UserKeyingMaterial;     

    DWORD                                       cRecipientEncryptedKeys;
    PCMSG_RECIPIENT_ENCRYPTED_KEY_ENCODE_INFO   *rgpRecipientEncryptedKeys;
} CMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO, *PCMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO;
<struct name="_CMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO">
<field name="cbSize">DWORD</field>
<field name="KeyEncryptionAlgorithm">CRYPT_ALGORITHM_IDENTIFIER</field>
    void                        *pvKeyEncryptionAuxInfo;
    HCRYPTPROV                  hCryptProv;
    DWORD                       dwKeyChoice;
    union {
        
        HCRYPTKEY                   hKeyEncryptionKey;
        
        void                        *pvKeyEncryptionKey;
    };
    CRYPT_DATA_BLOB             KeyId;

    
    FILETIME                    Date;
    PCRYPT_ATTRIBUTE_TYPE_VALUE pOtherAttr;
} CMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO, *PCMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO;

<struct name="_CMSG_RECIPIENT_ENCODE_INFO">

    DWORD   dwRecipientChoice;
    union {
        
        PCMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO   pKeyTrans;
        
        PCMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO   pKeyAgree;
        
        PCMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO   pMailList;
    };
};

<struct name="_CMSG_RC2_AUX_INFO">
<field name="cbSize">DWORD</field>
<field name="dwBitLen">DWORD</field>
</struct>
<typedefprev id="CMSG_RC2_AUX_INFO"/>
<typedefptrprev id="PCMSG_RC2_AUX_INFO"/>

<struct name="_CMSG_SP3_COMPATIBLE_AUX_INFO">
<field name="cbSize">DWORD</field>
<field name="dwFlags">DWORD</field>
</struct>
<typedefprev id="CMSG_SP3_COMPATIBLE_AUX_INFO"/>
<typedefptrprev id="PCMSG_SP3_COMPATIBLE_AUX_INFO"/>

<struct name="_CMSG_RC4_AUX_INFO">
<field name="cbSize">DWORD</field>
<field name="dwBitLen">DWORD</field>
</struct>
<typedefprev id="CMSG_RC4_AUX_INFO"/>
<typedefptrprev id="PCMSG_RC4_AUX_INFO"/>
<struct name="_CMSG_SIGNED_AND_ENVELOPED_ENCODE_INFO">
<field name="cbSize">DWORD</field>
<field name="SignedInfo">CMSG_SIGNED_ENCODE_INFO</field>
<field name="EnvelopedInfo">CMSG_ENVELOPED_ENCODE_INFO</field>
</struct>
<typedefprev id="CMSG_SIGNED_AND_ENVELOPED_ENCODE_INFO"/>
<typedefptrprev id="PCMSG_SIGNED_AND_ENVELOPED_ENCODE_INFO"/>
<struct name="_CMSG_HASHED_ENCODE_INFO">
<field name="cbSize">DWORD</field>
<field name="hCryptProv">HCRYPTPROV_LEGACY</field>
<field name="HashAlgorithm">CRYPT_ALGORITHM_IDENTIFIER</field>
    void                        *pvHashAuxInfo;
} CMSG_HASHED_ENCODE_INFO, *PCMSG_HASHED_ENCODE_INFO;

<struct name="_CMSG_ENCRYPTED_ENCODE_INFO">
<field name="cbSize">DWORD</field>
<field name="ContentEncryptionAlgorithm">CRYPT_ALGORITHM_IDENTIFIER</field>
    void                        *pvEncryptionAuxInfo;
} CMSG_ENCRYPTED_ENCODE_INFO, *PCMSG_ENCRYPTED_ENCODE_INFO;
typedef<fnptr name="PFN_CMSG_STREAM_OUTPUT" ret="BOOL" convention="__stdcall">

     const void *pvArg,
     BYTE *pbData,
     DWORD cbData,
<arg name="fFinal">BOOL</arg>
</function>
<struct name="_CMSG_STREAM_INFO">
<field name="cbContent">DWORD</field>
<field name="pfnStreamOutput">PFN_CMSG_STREAM_OUTPUT</field>
    void                    *pvArg;
} CMSG_STREAM_INFO, *PCMSG_STREAM_INFO;

<function name="CryptMsgOpenToEncode" ret="HCRYPTMSG" convention="__stdcall">
<arg name="dwMsgEncodingType">DWORD</arg>
<arg name="dwFlags">DWORD</arg>
<arg name="dwMsgType">DWORD</arg>

     void const *pvMsgEncodeInfo,
     LPSTR pszInnerContentObjID,
<arg name="pStreamInfo">PCMSG_STREAM_INFO</arg>
</function>
<function name="CryptMsgCalculateEncodedLength" ret="DWORD" convention="__stdcall">
<arg name="dwMsgEncodingType">DWORD</arg>
<arg name="dwFlags">DWORD</arg>
<arg name="dwMsgType">DWORD</arg>

     void const *pvMsgEncodeInfo,
     LPSTR pszInnerContentObjID,
<arg name="cbData">DWORD</arg>
</function>

<function name="CryptMsgOpenToDecode" ret="HCRYPTMSG" convention="__stdcall">
<arg name="dwMsgEncodingType">DWORD</arg>
<arg name="dwFlags">DWORD</arg>
<arg name="dwMsgType">DWORD</arg>
<arg name="hCryptProv">HCRYPTPROV_LEGACY</arg>
<arg name="pRecipientInfo">PCERT_INFO</arg>
<arg name="pStreamInfo">PCMSG_STREAM_INFO</arg>
</function>

<function name="CryptMsgDuplicate" ret="HCRYPTMSG" convention="__stdcall">
<arg name="hCryptMsg">HCRYPTMSG</arg>
</function>

<function name="CryptMsgClose" ret="BOOL" convention="__stdcall">
<arg name="hCryptMsg">HCRYPTMSG</arg>
</function>
<function name="CryptMsgUpdate" ret="BOOL" convention="__stdcall">
<arg name="hCryptMsg">HCRYPTMSG</arg>

     const BYTE *pbData,
     DWORD cbData,
<arg name="fFinal">BOOL</arg>
</function>

<function name="CryptMsgGetParam" ret="BOOL" convention="__stdcall">
<arg name="hCryptMsg">HCRYPTMSG</arg>
<arg name="dwParamType">DWORD</arg>
<arg name="dwIndex">DWORD</arg>

     void *pvData,
<arg name="pcbData">DWORD *</arg>
</function>

<struct name="_CMSG_SIGNER_INFO">
<field name="dwVersion">DWORD</field>
<field name="Issuer">CERT_NAME_BLOB</field>
<field name="SerialNumber">CRYPT_INTEGER_BLOB</field>
<field name="HashAlgorithm">CRYPT_ALGORITHM_IDENTIFIER</field>
    
    CRYPT_ALGORITHM_IDENTIFIER  HashEncryptionAlgorithm;

    CRYPT_DATA_BLOB             EncryptedHash;
    CRYPT_ATTRIBUTES            AuthAttrs;
    CRYPT_ATTRIBUTES            UnauthAttrs;
} CMSG_SIGNER_INFO, *PCMSG_SIGNER_INFO;
<struct name="_CMSG_CMS_SIGNER_INFO">
<field name="dwVersion">DWORD</field>
<field name="SignerId">CERT_ID</field>
<field name="HashAlgorithm">CRYPT_ALGORITHM_IDENTIFIER</field>
    
    CRYPT_ALGORITHM_IDENTIFIER  HashEncryptionAlgorithm;

    CRYPT_DATA_BLOB             EncryptedHash;
    CRYPT_ATTRIBUTES            AuthAttrs;
    CRYPT_ATTRIBUTES            UnauthAttrs;
} CMSG_CMS_SIGNER_INFO, *PCMSG_CMS_SIGNER_INFO;

typedef CRYPT_ATTRIBUTES CMSG_ATTR;
typedef CRYPT_ATTRIBUTES *PCMSG_ATTR;
<struct name="_CMSG_KEY_TRANS_RECIPIENT_INFO">
<field name="dwVersion">DWORD</field>
    
    CERT_ID                     RecipientId;

    CRYPT_ALGORITHM_IDENTIFIER  KeyEncryptionAlgorithm;
    CRYPT_DATA_BLOB             EncryptedKey;
} CMSG_KEY_TRANS_RECIPIENT_INFO, *PCMSG_KEY_TRANS_RECIPIENT_INFO;

<struct name="_CMSG_RECIPIENT_ENCRYPTED_KEY_INFO">
    
    CERT_ID                     RecipientId;

    CRYPT_DATA_BLOB             EncryptedKey;

    
    FILETIME                    Date;
    PCRYPT_ATTRIBUTE_TYPE_VALUE pOtherAttr;
} CMSG_RECIPIENT_ENCRYPTED_KEY_INFO, *PCMSG_RECIPIENT_ENCRYPTED_KEY_INFO;

<struct name="_CMSG_KEY_AGREE_RECIPIENT_INFO">
<field name="dwVersion">DWORD</field>
<field name="dwOriginatorChoice">DWORD</field>
    union {
        
        CERT_ID                     OriginatorCertId;
        
        CERT_PUBLIC_KEY_INFO        OriginatorPublicKeyInfo;
    };
    CRYPT_DATA_BLOB             UserKeyingMaterial;
    CRYPT_ALGORITHM_IDENTIFIER  KeyEncryptionAlgorithm;

    DWORD                                cRecipientEncryptedKeys;
    PCMSG_RECIPIENT_ENCRYPTED_KEY_INFO   *rgpRecipientEncryptedKeys;
} CMSG_KEY_AGREE_RECIPIENT_INFO, *PCMSG_KEY_AGREE_RECIPIENT_INFO;
<struct name="_CMSG_MAIL_LIST_RECIPIENT_INFO">
<field name="dwVersion">DWORD</field>
<field name="KeyId">CRYPT_DATA_BLOB</field>
<field name="KeyEncryptionAlgorithm">CRYPT_ALGORITHM_IDENTIFIER</field>
<field name="EncryptedKey">CRYPT_DATA_BLOB</field>
    
    FILETIME                    Date;
    PCRYPT_ATTRIBUTE_TYPE_VALUE pOtherAttr;
} CMSG_MAIL_LIST_RECIPIENT_INFO, *PCMSG_MAIL_LIST_RECIPIENT_INFO;

<struct name="_CMSG_CMS_RECIPIENT_INFO">
<field name="dwRecipientChoice">DWORD</field>
    union {
        
        PCMSG_KEY_TRANS_RECIPIENT_INFO   pKeyTrans;
        
        PCMSG_KEY_AGREE_RECIPIENT_INFO   pKeyAgree;
        
        PCMSG_MAIL_LIST_RECIPIENT_INFO   pMailList;
    };
} CMSG_CMS_RECIPIENT_INFO, *PCMSG_CMS_RECIPIENT_INFO;

<function name="CryptMsgControl" ret="BOOL" convention="__stdcall">
<arg name="hCryptMsg">HCRYPTMSG</arg>
<arg name="dwFlags">DWORD</arg>
<arg name="dwCtrlType">DWORD</arg>
<arg name="pvCtrlPara">void const *</arg>
</function>
<struct name="_CMSG_CTRL_VERIFY_SIGNATURE_EX_PARA">
<field name="cbSize">DWORD</field>
<field name="hCryptProv">HCRYPTPROV_LEGACY</field>
<field name="dwSignerIndex">DWORD</field>
<field name="dwSignerType">DWORD</field>
    void                *pvSigner;
} CMSG_CTRL_VERIFY_SIGNATURE_EX_PARA, *PCMSG_CTRL_VERIFY_SIGNATURE_EX_PARA;
    

    

    

    

<struct name="_CMSG_CTRL_DECRYPT_PARA">
<field name="cbSize">DWORD</field>
    
    union {
        HCRYPTPROV                  hCryptProv;
        NCRYPT_KEY_HANDLE           hNCryptKey;
    };

    
    DWORD       dwKeySpec;

    DWORD       dwRecipientIndex;
} CMSG_CTRL_DECRYPT_PARA, *PCMSG_CTRL_DECRYPT_PARA;
<struct name="_CMSG_CTRL_KEY_TRANS_DECRYPT_PARA">
<field name="cbSize">DWORD</field>
    
    union {
        HCRYPTPROV                  hCryptProv;
        NCRYPT_KEY_HANDLE           hNCryptKey;
    };

    
    DWORD                           dwKeySpec;

    PCMSG_KEY_TRANS_RECIPIENT_INFO  pKeyTrans;
    DWORD                           dwRecipientIndex;
} CMSG_CTRL_KEY_TRANS_DECRYPT_PARA, *PCMSG_CTRL_KEY_TRANS_DECRYPT_PARA;

<struct name="_CMSG_CTRL_KEY_AGREE_DECRYPT_PARA">
<field name="cbSize">DWORD</field>
    
    union {
        HCRYPTPROV                  hCryptProv;
        NCRYPT_KEY_HANDLE           hNCryptKey;
    };

    
    DWORD                           dwKeySpec;

    PCMSG_KEY_AGREE_RECIPIENT_INFO  pKeyAgree;
    DWORD                           dwRecipientIndex;
    DWORD                           dwRecipientEncryptedKeyIndex;
    CRYPT_BIT_BLOB                  OriginatorPublicKey;
} CMSG_CTRL_KEY_AGREE_DECRYPT_PARA, *PCMSG_CTRL_KEY_AGREE_DECRYPT_PARA;

<struct name="_CMSG_CTRL_MAIL_LIST_DECRYPT_PARA">
<field name="cbSize">DWORD</field>
<field name="hCryptProv">HCRYPTPROV</field>
<field name="pMailList">PCMSG_MAIL_LIST_RECIPIENT_INFO</field>
<field name="dwRecipientIndex">DWORD</field>
<field name="dwKeyChoice">DWORD</field>
    union {
        
        HCRYPTKEY                       hKeyEncryptionKey;
        
        void                            *pvKeyEncryptionKey;
    };
} CMSG_CTRL_MAIL_LIST_DECRYPT_PARA, *PCMSG_CTRL_MAIL_LIST_DECRYPT_PARA;

<struct name="_CMSG_CTRL_ADD_SIGNER_UNAUTH_ATTR_PARA">
<field name="cbSize">DWORD</field>
<field name="dwSignerIndex">DWORD</field>
<field name="blob">CRYPT_DATA_BLOB</field>
</struct>
<typedefprev id="CMSG_CTRL_ADD_SIGNER_UNAUTH_ATTR_PARA"/>
<typedefptrprev id="PCMSG_CTRL_ADD_SIGNER_UNAUTH_ATTR_PARA"/>

<struct name="_CMSG_CTRL_DEL_SIGNER_UNAUTH_ATTR_PARA">
<field name="cbSize">DWORD</field>
<field name="dwSignerIndex">DWORD</field>
<field name="dwUnauthAttrIndex">DWORD</field>
</struct>
<typedefprev id="CMSG_CTRL_DEL_SIGNER_UNAUTH_ATTR_PARA"/>
<typedefptrprev id="PCMSG_CTRL_DEL_SIGNER_UNAUTH_ATTR_PARA"/>
<function name="CryptMsgVerifyCountersignatureEncoded" ret="BOOL" convention="__stdcall">
<arg name="hCryptProv">HCRYPTPROV_LEGACY</arg>
<arg name="dwEncodingType">DWORD</arg>
<arg name="pbSignerInfo">PBYTE</arg>
<arg name="cbSignerInfo">DWORD</arg>
<arg name="pbSignerInfoCountersignature">PBYTE</arg>
<arg name="cbSignerInfoCountersignature">DWORD</arg>
<arg name="pciCountersigner">PCERT_INFO</arg>
</function>
<function name="CryptMsgVerifyCountersignatureEncodedEx" ret="BOOL" convention="__stdcall">
<arg name="hCryptProv">HCRYPTPROV_LEGACY</arg>
<arg name="dwEncodingType">DWORD</arg>
<arg name="pbSignerInfo">PBYTE</arg>
<arg name="cbSignerInfo">DWORD</arg>
<arg name="pbSignerInfoCountersignature">PBYTE</arg>
<arg name="cbSignerInfoCountersignature">DWORD</arg>
<arg name="dwSignerType">DWORD</arg>

     void *pvSigner,
     DWORD dwFlags,
<arg name="pvReserved">void *</arg>
</function>
<function name="CryptMsgCountersign" ret="BOOL" convention="__stdcall">
<arg name="hCryptMsg">HCRYPTMSG</arg>
<arg name="dwIndex">DWORD</arg>
<arg name="cCountersigners">DWORD</arg>
<arg name="rgCountersigners">PCMSG_SIGNER_ENCODE_INFO</arg>
</function>
<function name="CryptMsgCountersignEncoded" ret="BOOL" convention="__stdcall">
<arg name="dwEncodingType">DWORD</arg>
<arg name="pbSignerInfo">PBYTE</arg>
<arg name="cbSignerInfo">DWORD</arg>
<arg name="cCountersigners">DWORD</arg>
<arg name="rgCountersigners">PCMSG_SIGNER_ENCODE_INFO</arg>
<arg name="pbCountersignature">PBYTE</arg>
<arg name="pcbCountersignature">PDWORD</arg>
</function>

typedef void * (__stdcall *PFN_CMSG_ALLOC) (
<arg name="cb">size_t</arg>
</function>

typedef<fnptr name="PFN_CMSG_FREE" ret="void" convention="__stdcall">

<arg name="pv">void *</arg>
</function>

typedef  BOOL (__stdcall *PFN_CMSG_GEN_ENCRYPT_KEY) (
     HCRYPTPROV *phCryptProv,
     PCRYPT_ALGORITHM_IDENTIFIER paiEncrypt,
     PVOID pvEncryptAuxInfo,
     PCERT_PUBLIC_KEY_INFO pPublicKeyInfo,
     PFN_CMSG_ALLOC pfnAlloc,
     HCRYPTKEY *phEncryptKey,
     PBYTE *ppbEncryptParameters,
<arg name="pcbEncryptParameters">PDWORD</arg>
</function>
typedef BOOL (__stdcall *PFN_CMSG_EXPORT_ENCRYPT_KEY) (
     HCRYPTPROV hCryptProv,
     HCRYPTKEY hEncryptKey,
     PCERT_PUBLIC_KEY_INFO pPublicKeyInfo,
     PBYTE pbData,
<arg name="pcbData">PDWORD</arg>
</function>
typedef BOOL (__stdcall *PFN_CMSG_IMPORT_ENCRYPT_KEY) (
     HCRYPTPROV hCryptProv,
     DWORD dwKeySpec,
     PCRYPT_ALGORITHM_IDENTIFIER paiEncrypt,
     PCRYPT_ALGORITHM_IDENTIFIER paiPubKey,
     PBYTE pbEncodedKey,
     DWORD cbEncodedKey,
<arg name="phEncryptKey">HCRYPTKEY *</arg>
</function>
<struct name="_CMSG_CONTENT_ENCRYPT_INFO">
<field name="cbSize">DWORD</field>
<field name="hCryptProv">HCRYPTPROV_LEGACY</field>
<field name="ContentEncryptionAlgorithm">CRYPT_ALGORITHM_IDENTIFIER</field>
    void                        *pvEncryptionAuxInfo;
    DWORD                       cRecipients;
    PCMSG_RECIPIENT_ENCODE_INFO rgCmsRecipients;
    PFN_CMSG_ALLOC              pfnAlloc;
    PFN_CMSG_FREE               pfnFree;
    DWORD                       dwEncryptFlags;
    union {
        
        HCRYPTKEY                   hContentEncryptKey;
        
        BCRYPT_KEY_HANDLE           hCNGContentEncryptKey;
    };
    DWORD                       dwFlags;

    BOOL                        fCNG;
    
    BYTE                        *pbCNGContentEncryptKeyObject;
    BYTE                        *pbContentEncryptKey;
    DWORD                       cbContentEncryptKey;
} CMSG_CONTENT_ENCRYPT_INFO, *PCMSG_CONTENT_ENCRYPT_INFO;
typedef BOOL (__stdcall *PFN_CMSG_GEN_CONTENT_ENCRYPT_KEY) (
     PCMSG_CONTENT_ENCRYPT_INFO pContentEncryptInfo,
     DWORD dwFlags,
<arg name="pvReserved">void *</arg>
</function>
<struct name="_CMSG_KEY_TRANS_ENCRYPT_INFO">
<field name="cbSize">DWORD</field>
<field name="dwRecipientIndex">DWORD</field>
<field name="KeyEncryptionAlgorithm">CRYPT_ALGORITHM_IDENTIFIER</field>
<field name="EncryptedKey">CRYPT_DATA_BLOB</field>
<field name="dwFlags">DWORD</field>
</struct>
<typedefprev id="CMSG_KEY_TRANS_ENCRYPT_INFO"/>
<typedefptrprev id="PCMSG_KEY_TRANS_ENCRYPT_INFO"/>

typedef BOOL (__stdcall *PFN_CMSG_EXPORT_KEY_TRANS) (
     PCMSG_CONTENT_ENCRYPT_INFO pContentEncryptInfo,
     PCMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO pKeyTransEncodeInfo,
     PCMSG_KEY_TRANS_ENCRYPT_INFO pKeyTransEncryptInfo,
     DWORD dwFlags,
<arg name="pvReserved">void *</arg>
</function>

<struct name="_CMSG_KEY_AGREE_KEY_ENCRYPT_INFO">
<field name="cbSize">DWORD</field>
<field name="EncryptedKey">CRYPT_DATA_BLOB</field>
</struct>
<typedefprev id="CMSG_KEY_AGREE_KEY_ENCRYPT_INFO"/>
<typedefptrprev id="PCMSG_KEY_AGREE_KEY_ENCRYPT_INFO"/>
<struct name="_CMSG_KEY_AGREE_ENCRYPT_INFO">
<field name="cbSize">DWORD</field>
<field name="dwRecipientIndex">DWORD</field>
<field name="KeyEncryptionAlgorithm">CRYPT_ALGORITHM_IDENTIFIER</field>
<field name="UserKeyingMaterial">CRYPT_DATA_BLOB</field>
<field name="dwOriginatorChoice">DWORD</field>
    union {
        
        CERT_ID                     OriginatorCertId;
        
        CERT_PUBLIC_KEY_INFO        OriginatorPublicKeyInfo;
    };
    DWORD                       cKeyAgreeKeyEncryptInfo;
    PCMSG_KEY_AGREE_KEY_ENCRYPT_INFO *rgpKeyAgreeKeyEncryptInfo;
    DWORD                       dwFlags;
} CMSG_KEY_AGREE_ENCRYPT_INFO, *PCMSG_KEY_AGREE_ENCRYPT_INFO;
typedef BOOL (__stdcall *PFN_CMSG_EXPORT_KEY_AGREE) (
     PCMSG_CONTENT_ENCRYPT_INFO pContentEncryptInfo,
     PCMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO pKeyAgreeEncodeInfo,
     PCMSG_KEY_AGREE_ENCRYPT_INFO pKeyAgreeEncryptInfo,
     DWORD dwFlags,
<arg name="pvReserved">void *</arg>
</function>
<struct name="_CMSG_MAIL_LIST_ENCRYPT_INFO">
<field name="cbSize">DWORD</field>
<field name="dwRecipientIndex">DWORD</field>
<field name="KeyEncryptionAlgorithm">CRYPT_ALGORITHM_IDENTIFIER</field>
<field name="EncryptedKey">CRYPT_DATA_BLOB</field>
<field name="dwFlags">DWORD</field>
</struct>
<typedefprev id="CMSG_MAIL_LIST_ENCRYPT_INFO"/>
<typedefptrprev id="PCMSG_MAIL_LIST_ENCRYPT_INFO"/>

typedef BOOL (__stdcall *PFN_CMSG_EXPORT_MAIL_LIST) (
     PCMSG_CONTENT_ENCRYPT_INFO pContentEncryptInfo,
     PCMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO pMailListEncodeInfo,
     PCMSG_MAIL_LIST_ENCRYPT_INFO pMailListEncryptInfo,
     DWORD dwFlags,
<arg name="pvReserved">void *</arg>
</function>
typedef BOOL (__stdcall *PFN_CMSG_IMPORT_KEY_TRANS) (
     PCRYPT_ALGORITHM_IDENTIFIER pContentEncryptionAlgorithm,
     PCMSG_CTRL_KEY_TRANS_DECRYPT_PARA pKeyTransDecryptPara,
     DWORD dwFlags,
     void *pvReserved,
<arg name="phContentEncryptKey">HCRYPTKEY *</arg>
</function>
typedef BOOL (__stdcall *PFN_CMSG_IMPORT_KEY_AGREE) (
     PCRYPT_ALGORITHM_IDENTIFIER pContentEncryptionAlgorithm,
     PCMSG_CTRL_KEY_AGREE_DECRYPT_PARA pKeyAgreeDecryptPara,
     DWORD dwFlags,
     void *pvReserved,
<arg name="phContentEncryptKey">HCRYPTKEY *</arg>
</function>
typedef BOOL (__stdcall *PFN_CMSG_IMPORT_MAIL_LIST) (
     PCRYPT_ALGORITHM_IDENTIFIER pContentEncryptionAlgorithm,
     PCMSG_CTRL_MAIL_LIST_DECRYPT_PARA pMailListDecryptPara,
     DWORD dwFlags,
     void *pvReserved,
<arg name="phContentEncryptKey">HCRYPTKEY *</arg>
</function>

<struct name="_CMSG_CNG_CONTENT_DECRYPT_INFO">
<field name="cbSize">DWORD</field>
<field name="ContentEncryptionAlgorithm">CRYPT_ALGORITHM_IDENTIFIER</field>
<field name="pfnAlloc">PFN_CMSG_ALLOC</field>
<field name="pfnFree">PFN_CMSG_FREE</field>
    
    
    
    NCRYPT_KEY_HANDLE           hNCryptKey;

    BYTE                        *pbContentEncryptKey;
    DWORD                       cbContentEncryptKey;

    BCRYPT_KEY_HANDLE           hCNGContentEncryptKey;
    BYTE                        *pbCNGContentEncryptKeyObject;
} CMSG_CNG_CONTENT_DECRYPT_INFO, *PCMSG_CNG_CONTENT_DECRYPT_INFO;
typedef BOOL (__stdcall *PFN_CMSG_CNG_IMPORT_KEY_TRANS) (
     PCMSG_CNG_CONTENT_DECRYPT_INFO pCNGContentDecryptInfo,
     PCMSG_CTRL_KEY_TRANS_DECRYPT_PARA pKeyTransDecryptPara,
     DWORD dwFlags,
<arg name="pvReserved">void *</arg>
</function>
typedef BOOL (__stdcall *PFN_CMSG_CNG_IMPORT_KEY_AGREE) (
     PCMSG_CNG_CONTENT_DECRYPT_INFO pCNGContentDecryptInfo,
     PCMSG_CTRL_KEY_AGREE_DECRYPT_PARA pKeyAgreeDecryptPara,
     DWORD dwFlags,
<arg name="pvReserved">void *</arg>
</function>
typedef BOOL (__stdcall *PFN_CMSG_CNG_IMPORT_CONTENT_ENCRYPT_KEY) (
     PCMSG_CNG_CONTENT_DECRYPT_INFO pCNGContentDecryptInfo,
     DWORD dwFlags,
<arg name="pvReserved">void *</arg>
</function>
typedef void *HCERTSTORE;

<struct name="_CERT_CONTEXT">
<field name="dwCertEncodingType">DWORD</field>
    BYTE                    *pbCertEncoded;
    DWORD                   cbCertEncoded;
    PCERT_INFO              pCertInfo;
    HCERTSTORE              hCertStore;
} CERT_CONTEXT, *PCERT_CONTEXT;
typedef const CERT_CONTEXT *PCCERT_CONTEXT;

<struct name="_CRL_CONTEXT">
<field name="dwCertEncodingType">DWORD</field>
    BYTE                    *pbCrlEncoded;
    DWORD                   cbCrlEncoded;
    PCRL_INFO               pCrlInfo;
    HCERTSTORE              hCertStore;
} CRL_CONTEXT, *PCRL_CONTEXT;
typedef const CRL_CONTEXT *PCCRL_CONTEXT;

<struct name="_CTL_CONTEXT">
<field name="dwMsgAndCertEncodingType">DWORD</field>
    BYTE                    *pbCtlEncoded;
    DWORD                   cbCtlEncoded;
    PCTL_INFO               pCtlInfo;
    HCERTSTORE              hCertStore;
    HCRYPTMSG               hCryptMsg;
    BYTE                    *pbCtlContent;
    DWORD                   cbCtlContent;
} CTL_CONTEXT, *PCTL_CONTEXT;
typedef const CTL_CONTEXT *PCCTL_CONTEXT;

<struct name="_CRYPT_KEY_PROV_PARAM">
<field name="dwParam">DWORD</field>
    BYTE            *pbData;
    DWORD           cbData;
    DWORD           dwFlags;
} CRYPT_KEY_PROV_PARAM, *PCRYPT_KEY_PROV_PARAM;

<struct name="_CRYPT_KEY_PROV_INFO">
<field name="pwszContainerName">LPWSTR</field>
<field name="pwszProvName">LPWSTR</field>
<field name="dwProvType">DWORD</field>
<field name="dwFlags">DWORD</field>
<field name="cProvParam">DWORD</field>
<field name="rgProvParam">PCRYPT_KEY_PROV_PARAM</field>
<field name="dwKeySpec">DWORD</field>
</struct>
<typedefprev id="CRYPT_KEY_PROV_INFO"/>
<typedefptrprev id="PCRYPT_KEY_PROV_INFO"/>
<struct name="_CERT_KEY_CONTEXT">
<field name="cbSize">DWORD</field>
    union {
        HCRYPTPROV          hCryptProv;

        
        NCRYPT_KEY_HANDLE   hNCryptKey;
    };
    DWORD           dwKeySpec;
} CERT_KEY_CONTEXT, *PCERT_KEY_CONTEXT;
<struct name="_ROOT_INFO_LUID">
<field name="LowPart">DWORD</field>
<field name="HighPart">LONG</field>
</struct>
<typedefprev id="ROOT_INFO_LUID"/>
<typedefptrprev id="PROOT_INFO_LUID"/>

<struct name="_CRYPT_SMART_CARD_ROOT_INFO">
    BYTE                rgbCardID [16];
    ROOT_INFO_LUID      luid;
} CRYPT_SMART_CARD_ROOT_INFO, *PCRYPT_SMART_CARD_ROOT_INFO;
<struct name="_CERT_SYSTEM_STORE_RELOCATE_PARA">
    union {
        HKEY                hKeyBase;
        void                *pvBase;
    };
    union {
        void                *pvSystemStore;
        LPCSTR              pszSystemStore;
        LPCWSTR             pwszSystemStore;
    };
} CERT_SYSTEM_STORE_RELOCATE_PARA, *PCERT_SYSTEM_STORE_RELOCATE_PARA;

<struct name="_CERT_REGISTRY_STORE_CLIENT_GPT_PARA">
<field name="hKeyBase">HKEY</field>
<field name="pwszRegPath">LPWSTR</field>
</struct>
<typedefprev id="CERT_REGISTRY_STORE_CLIENT_GPT_PARA"/>
<typedefptrprev id="PCERT_REGISTRY_STORE_CLIENT_GPT_PARA"/>
<struct name="_CERT_REGISTRY_STORE_ROAMING_PARA">
<field name="hKey">HKEY</field>
<field name="pwszStoreDirectory">LPWSTR</field>
</struct>
<typedefprev id="CERT_REGISTRY_STORE_ROAMING_PARA"/>
<typedefptrprev id="PCERT_REGISTRY_STORE_ROAMING_PARA"/>

<struct name="_CERT_LDAP_STORE_OPENED_PARA">
    void        *pvLdapSessionHandle;   
                                        
    LPCWSTR     pwszLdapUrl;
} CERT_LDAP_STORE_OPENED_PARA, *PCERT_LDAP_STORE_OPENED_PARA;


<function name="CertOpenStore" ret="HCERTSTORE" convention="__stdcall">
<arg name="lpszStoreProvider">LPCSTR</arg>
<arg name="dwEncodingType">DWORD</arg>
<arg name="hCryptProv">HCRYPTPROV_LEGACY</arg>
<arg name="dwFlags">DWORD</arg>
<arg name="pvPara">const void *</arg>
</function>
typedef void *HCERTSTOREPROV;
<struct name="_CERT_STORE_PROV_INFO">
<field name="cbSize">DWORD</field>
<field name="cStoreProvFunc">DWORD</field>
    void                **rgpvStoreProvFunc;
    HCERTSTOREPROV      hStoreProv;
    DWORD               dwStoreProvFlags;
    HCRYPTOIDFUNCADDR   hStoreProvFuncAddr2;
} CERT_STORE_PROV_INFO, *PCERT_STORE_PROV_INFO;

typedef<fnptr name="PFN_CERT_DLL_OPEN_STORE_PROV_FUNC" ret="BOOL" convention="__stdcall">
<arg name="lpszStoreProvider">LPCSTR</arg>
<arg name="dwEncodingType">DWORD</arg>
<arg name="hCryptProv">HCRYPTPROV_LEGACY</arg>
<arg name="dwFlags">DWORD</arg>

     const void *pvPara,
     HCERTSTORE hCertStore,
<arg name="pStoreProvInfo">PCERT_STORE_PROV_INFO</arg>
</function>
typedef<fnptr name="PFN_CERT_STORE_PROV_CLOSE" ret="void" convention="__stdcall">
<arg name="hStoreProv">HCERTSTOREPROV</arg>
<arg name="dwFlags">DWORD</arg>
</function>

typedef<fnptr name="PFN_CERT_STORE_PROV_READ_CERT" ret="BOOL" convention="__stdcall">
<arg name="hStoreProv">HCERTSTOREPROV</arg>
<arg name="pStoreCertContext">PCCERT_CONTEXT</arg>
<arg name="dwFlags">DWORD</arg>
<arg name="ppProvCertContext">PCCERT_CONTEXT *</arg>
</function>
typedef<fnptr name="PFN_CERT_STORE_PROV_WRITE_CERT" ret="BOOL" convention="__stdcall">
<arg name="hStoreProv">HCERTSTOREPROV</arg>
<arg name="pCertContext">PCCERT_CONTEXT</arg>
<arg name="dwFlags">DWORD</arg>
</function>
typedef<fnptr name="PFN_CERT_STORE_PROV_DELETE_CERT" ret="BOOL" convention="__stdcall">
<arg name="hStoreProv">HCERTSTOREPROV</arg>
<arg name="pCertContext">PCCERT_CONTEXT</arg>
<arg name="dwFlags">DWORD</arg>
</function>
typedef<fnptr name="PFN_CERT_STORE_PROV_SET_CERT_PROPERTY" ret="BOOL" convention="__stdcall">
<arg name="hStoreProv">HCERTSTOREPROV</arg>
<arg name="pCertContext">PCCERT_CONTEXT</arg>
<arg name="dwPropId">DWORD</arg>
<arg name="dwFlags">DWORD</arg>
<arg name="pvData">const void *</arg>
</function>

typedef<fnptr name="PFN_CERT_STORE_PROV_READ_CRL" ret="BOOL" convention="__stdcall">
<arg name="hStoreProv">HCERTSTOREPROV</arg>
<arg name="pStoreCrlContext">PCCRL_CONTEXT</arg>
<arg name="dwFlags">DWORD</arg>
<arg name="ppProvCrlContext">PCCRL_CONTEXT *</arg>
</function>

typedef<fnptr name="PFN_CERT_STORE_PROV_WRITE_CRL" ret="BOOL" convention="__stdcall">
<arg name="hStoreProv">HCERTSTOREPROV</arg>
<arg name="pCrlContext">PCCRL_CONTEXT</arg>
<arg name="dwFlags">DWORD</arg>
</function>

typedef<fnptr name="PFN_CERT_STORE_PROV_DELETE_CRL" ret="BOOL" convention="__stdcall">
<arg name="hStoreProv">HCERTSTOREPROV</arg>
<arg name="pCrlContext">PCCRL_CONTEXT</arg>
<arg name="dwFlags">DWORD</arg>
</function>
typedef<fnptr name="PFN_CERT_STORE_PROV_SET_CRL_PROPERTY" ret="BOOL" convention="__stdcall">
<arg name="hStoreProv">HCERTSTOREPROV</arg>
<arg name="pCrlContext">PCCRL_CONTEXT</arg>
<arg name="dwPropId">DWORD</arg>
<arg name="dwFlags">DWORD</arg>
<arg name="pvData">const void *</arg>
</function>

typedef<fnptr name="PFN_CERT_STORE_PROV_READ_CTL" ret="BOOL" convention="__stdcall">
<arg name="hStoreProv">HCERTSTOREPROV</arg>
<arg name="pStoreCtlContext">PCCTL_CONTEXT</arg>
<arg name="dwFlags">DWORD</arg>
<arg name="ppProvCtlContext">PCCTL_CONTEXT *</arg>
</function>

typedef<fnptr name="PFN_CERT_STORE_PROV_WRITE_CTL" ret="BOOL" convention="__stdcall">
<arg name="hStoreProv">HCERTSTOREPROV</arg>
<arg name="pCtlContext">PCCTL_CONTEXT</arg>
<arg name="dwFlags">DWORD</arg>
</function>

typedef<fnptr name="PFN_CERT_STORE_PROV_DELETE_CTL" ret="BOOL" convention="__stdcall">
<arg name="hStoreProv">HCERTSTOREPROV</arg>
<arg name="pCtlContext">PCCTL_CONTEXT</arg>
<arg name="dwFlags">DWORD</arg>
</function>
typedef<fnptr name="PFN_CERT_STORE_PROV_SET_CTL_PROPERTY" ret="BOOL" convention="__stdcall">
<arg name="hStoreProv">HCERTSTOREPROV</arg>
<arg name="pCtlContext">PCCTL_CONTEXT</arg>
<arg name="dwPropId">DWORD</arg>
<arg name="dwFlags">DWORD</arg>
<arg name="pvData">const void *</arg>
</function>

typedef<fnptr name="PFN_CERT_STORE_PROV_CONTROL" ret="BOOL" convention="__stdcall">
<arg name="hStoreProv">HCERTSTOREPROV</arg>
<arg name="dwFlags">DWORD</arg>
<arg name="dwCtrlType">DWORD</arg>
<arg name="pvCtrlPara">void const *</arg>
</function>

<struct name="_CERT_STORE_PROV_FIND_INFO">
<field name="cbSize">DWORD</field>
<field name="dwMsgAndCertEncodingType">DWORD</field>
<field name="dwFindFlags">DWORD</field>
<field name="dwFindType">DWORD</field>
    const void          *pvFindPara;
} CERT_STORE_PROV_FIND_INFO, *PCERT_STORE_PROV_FIND_INFO;
typedef const CERT_STORE_PROV_FIND_INFO CCERT_STORE_PROV_FIND_INFO,
*PCCERT_STORE_PROV_FIND_INFO;

typedef<fnptr name="PFN_CERT_STORE_PROV_FIND_CERT" ret="BOOL" convention="__stdcall">
<arg name="hStoreProv">HCERTSTOREPROV</arg>
<arg name="pFindInfo">PCCERT_STORE_PROV_FIND_INFO</arg>
<arg name="pPrevCertContext">PCCERT_CONTEXT</arg>
<arg name="dwFlags">DWORD</arg>

     void **ppvStoreProvFindInfo,
<arg name="ppProvCertContext">PCCERT_CONTEXT *</arg>
</function>

typedef<fnptr name="PFN_CERT_STORE_PROV_FREE_FIND_CERT" ret="BOOL" convention="__stdcall">
<arg name="hStoreProv">HCERTSTOREPROV</arg>
<arg name="pCertContext">PCCERT_CONTEXT</arg>

     void *pvStoreProvFindInfo,
<arg name="dwFlags">DWORD</arg>
</function>

typedef<fnptr name="PFN_CERT_STORE_PROV_GET_CERT_PROPERTY" ret="BOOL" convention="__stdcall">
<arg name="hStoreProv">HCERTSTOREPROV</arg>
<arg name="pCertContext">PCCERT_CONTEXT</arg>
<arg name="dwPropId">DWORD</arg>
<arg name="dwFlags">DWORD</arg>

     void *pvData,
<arg name="pcbData">DWORD *</arg>
</function>
typedef<fnptr name="PFN_CERT_STORE_PROV_FIND_CRL" ret="BOOL" convention="__stdcall">
<arg name="hStoreProv">HCERTSTOREPROV</arg>
<arg name="pFindInfo">PCCERT_STORE_PROV_FIND_INFO</arg>
<arg name="pPrevCrlContext">PCCRL_CONTEXT</arg>
<arg name="dwFlags">DWORD</arg>

     void **ppvStoreProvFindInfo,
<arg name="ppProvCrlContext">PCCRL_CONTEXT *</arg>
</function>

typedef<fnptr name="PFN_CERT_STORE_PROV_FREE_FIND_CRL" ret="BOOL" convention="__stdcall">
<arg name="hStoreProv">HCERTSTOREPROV</arg>
<arg name="pCrlContext">PCCRL_CONTEXT</arg>

     void *pvStoreProvFindInfo,
<arg name="dwFlags">DWORD</arg>
</function>

typedef<fnptr name="PFN_CERT_STORE_PROV_GET_CRL_PROPERTY" ret="BOOL" convention="__stdcall">
<arg name="hStoreProv">HCERTSTOREPROV</arg>
<arg name="pCrlContext">PCCRL_CONTEXT</arg>
<arg name="dwPropId">DWORD</arg>
<arg name="dwFlags">DWORD</arg>

     void *pvData,
<arg name="pcbData">DWORD *</arg>
</function>

typedef<fnptr name="PFN_CERT_STORE_PROV_FIND_CTL" ret="BOOL" convention="__stdcall">
<arg name="hStoreProv">HCERTSTOREPROV</arg>
<arg name="pFindInfo">PCCERT_STORE_PROV_FIND_INFO</arg>
<arg name="pPrevCtlContext">PCCTL_CONTEXT</arg>
<arg name="dwFlags">DWORD</arg>

     void **ppvStoreProvFindInfo,
<arg name="ppProvCtlContext">PCCTL_CONTEXT *</arg>
</function>

typedef<fnptr name="PFN_CERT_STORE_PROV_FREE_FIND_CTL" ret="BOOL" convention="__stdcall">
<arg name="hStoreProv">HCERTSTOREPROV</arg>
<arg name="pCtlContext">PCCTL_CONTEXT</arg>

     void *pvStoreProvFindInfo,
<arg name="dwFlags">DWORD</arg>
</function>

typedef<fnptr name="PFN_CERT_STORE_PROV_GET_CTL_PROPERTY" ret="BOOL" convention="__stdcall">
<arg name="hStoreProv">HCERTSTOREPROV</arg>
<arg name="pCtlContext">PCCTL_CONTEXT</arg>
<arg name="dwPropId">DWORD</arg>
<arg name="dwFlags">DWORD</arg>

     void *pvData,
<arg name="pcbData">DWORD *</arg>
</function>
<function name="CertDuplicateStore" ret="HCERTSTORE" convention="__stdcall">
<arg name="hCertStore">HCERTSTORE</arg>
</function>

<function name="CertSaveStore" ret="BOOL" convention="__stdcall">
<arg name="hCertStore">HCERTSTORE</arg>
<arg name="dwEncodingType">DWORD</arg>
<arg name="dwSaveAs">DWORD</arg>
<arg name="dwSaveTo">DWORD</arg>

     void *pvSaveToPara,
<arg name="dwFlags">DWORD</arg>
</function>
<function name="CertCloseStore" ret="BOOL" convention="__stdcall">
<arg name="hCertStore">HCERTSTORE</arg>
<arg name="dwFlags">DWORD</arg>
</function>

<function name="CertGetSubjectCertificateFromStore" ret="PCCERT_CONTEXT" convention="__stdcall">
<arg name="hCertStore">HCERTSTORE</arg>
<arg name="dwCertEncodingType">DWORD</arg>

     PCERT_INFO pCertId           
                                      
    );
<function name="CertEnumCertificatesInStore" ret="PCCERT_CONTEXT" convention="__stdcall">
<arg name="hCertStore">HCERTSTORE</arg>
<arg name="pPrevCertContext">PCCERT_CONTEXT</arg>
</function>

<function name="CertFindCertificateInStore" ret="PCCERT_CONTEXT" convention="__stdcall">
<arg name="hCertStore">HCERTSTORE</arg>
<arg name="dwCertEncodingType">DWORD</arg>
<arg name="dwFindFlags">DWORD</arg>
<arg name="dwFindType">DWORD</arg>

     const void *pvFindPara,
<arg name="pPrevCertContext">PCCERT_CONTEXT</arg>
</function>

<function name="CertGetIssuerCertificateFromStore" ret="PCCERT_CONTEXT" convention="__stdcall">
<arg name="hCertStore">HCERTSTORE</arg>
<arg name="pSubjectContext">PCCERT_CONTEXT</arg>
<arg name="pPrevIssuerContext">PCCERT_CONTEXT</arg>
<arg name="pdwFlags">DWORD *</arg>
</function>

<function name="CertVerifySubjectCertificateContext" ret="BOOL" convention="__stdcall">
<arg name="pSubject">PCCERT_CONTEXT</arg>
<arg name="pIssuer">PCCERT_CONTEXT</arg>
<arg name="pdwFlags">DWORD *</arg>
</function>

<function name="CertDuplicateCertificateContext" ret="PCCERT_CONTEXT" convention="__stdcall">
<arg name="pCertContext">PCCERT_CONTEXT</arg>
</function>

<function name="CertCreateCertificateContext" ret="PCCERT_CONTEXT" convention="__stdcall">
<arg name="dwCertEncodingType">DWORD</arg>

     const BYTE *pbCertEncoded,
<arg name="cbCertEncoded">DWORD</arg>
</function>
<function name="CertFreeCertificateContext" ret="BOOL" convention="__stdcall">
<arg name="pCertContext">PCCERT_CONTEXT</arg>
</function>
<function name="CertSetCertificateContextProperty" ret="BOOL" convention="__stdcall">
<arg name="pCertContext">PCCERT_CONTEXT</arg>
<arg name="dwPropId">DWORD</arg>
<arg name="dwFlags">DWORD</arg>
<arg name="pvData">const void *</arg>
</function>

<function name="CertGetCertificateContextProperty" ret="BOOL" convention="__stdcall">
<arg name="pCertContext">PCCERT_CONTEXT</arg>
<arg name="dwPropId">DWORD</arg>

     void *pvData,
<arg name="pcbData">DWORD *</arg>
</function>

<function name="CertEnumCertificateContextProperties" ret="DWORD" convention="__stdcall">
<arg name="pCertContext">PCCERT_CONTEXT</arg>
<arg name="dwPropId">DWORD</arg>
</function>

<function name="CertCreateCTLEntryFromCertificateContextProperties" ret="BOOL" convention="__stdcall">
<arg name="pCertContext">PCCERT_CONTEXT</arg>
<arg name="cOptAttr">DWORD</arg>
<arg name="rgOptAttr">PCRYPT_ATTRIBUTE</arg>
<arg name="dwFlags">DWORD</arg>

     void *pvReserved,
     PCTL_ENTRY pCtlEntry,
<arg name="pcbCtlEntry">DWORD *</arg>
</function>
<function name="CertSetCertificateContextPropertiesFromCTLEntry" ret="BOOL" convention="__stdcall">
<arg name="pCertContext">PCCERT_CONTEXT</arg>
<arg name="pCtlEntry">PCTL_ENTRY</arg>
<arg name="dwFlags">DWORD</arg>
</function>
<function name="CertGetCRLFromStore" ret="PCCRL_CONTEXT" convention="__stdcall">
<arg name="hCertStore">HCERTSTORE</arg>
<arg name="pIssuerContext">PCCERT_CONTEXT</arg>
<arg name="pPrevCrlContext">PCCRL_CONTEXT</arg>
<arg name="pdwFlags">DWORD *</arg>
</function>
<function name="CertEnumCRLsInStore" ret="PCCRL_CONTEXT" convention="__stdcall">
<arg name="hCertStore">HCERTSTORE</arg>
<arg name="pPrevCrlContext">PCCRL_CONTEXT</arg>
</function>
<function name="CertFindCRLInStore" ret="PCCRL_CONTEXT" convention="__stdcall">
<arg name="hCertStore">HCERTSTORE</arg>
<arg name="dwCertEncodingType">DWORD</arg>
<arg name="dwFindFlags">DWORD</arg>
<arg name="dwFindType">DWORD</arg>

     const void *pvFindPara,
<arg name="pPrevCrlContext">PCCRL_CONTEXT</arg>
</function>
<struct name="_CRL_FIND_ISSUED_FOR_PARA">
<field name="pSubjectCert">PCCERT_CONTEXT</field>
<field name="pIssuerCert">PCCERT_CONTEXT</field>
</struct>
<typedefprev id="CRL_FIND_ISSUED_FOR_PARA"/>
<typedefptrprev id="PCRL_FIND_ISSUED_FOR_PARA"/>
<function name="CertDuplicateCRLContext" ret="PCCRL_CONTEXT" convention="__stdcall">
<arg name="pCrlContext">PCCRL_CONTEXT</arg>
</function>

<function name="CertCreateCRLContext" ret="PCCRL_CONTEXT" convention="__stdcall">
<arg name="dwCertEncodingType">DWORD</arg>

     const BYTE *pbCrlEncoded,
<arg name="cbCrlEncoded">DWORD</arg>
</function>
<function name="CertFreeCRLContext" ret="BOOL" convention="__stdcall">
<arg name="pCrlContext">PCCRL_CONTEXT</arg>
</function>

<function name="CertSetCRLContextProperty" ret="BOOL" convention="__stdcall">
<arg name="pCrlContext">PCCRL_CONTEXT</arg>
<arg name="dwPropId">DWORD</arg>
<arg name="dwFlags">DWORD</arg>
<arg name="pvData">const void *</arg>
</function>
<function name="CertGetCRLContextProperty" ret="BOOL" convention="__stdcall">
<arg name="pCrlContext">PCCRL_CONTEXT</arg>
<arg name="dwPropId">DWORD</arg>

     void *pvData,
<arg name="pcbData">DWORD *</arg>
</function>

<function name="CertEnumCRLContextProperties" ret="DWORD" convention="__stdcall">
<arg name="pCrlContext">PCCRL_CONTEXT</arg>
<arg name="dwPropId">DWORD</arg>
</function>

<function name="CertFindCertificateInCRL" ret="BOOL" convention="__stdcall">
<arg name="pCert">PCCERT_CONTEXT</arg>
<arg name="pCrlContext">PCCRL_CONTEXT</arg>
<arg name="dwFlags">DWORD</arg>

     void *pvReserved,
<arg name="ppCrlEntry">PCRL_ENTRY *</arg>
</function>

<function name="CertIsValidCRLForCertificate" ret="BOOL" convention="__stdcall">
<arg name="pCert">PCCERT_CONTEXT</arg>
<arg name="pCrl">PCCRL_CONTEXT</arg>
<arg name="dwFlags">DWORD</arg>
<arg name="pvReserved">void *</arg>
</function>

<function name="CertAddEncodedCertificateToStore" ret="BOOL" convention="__stdcall">
<arg name="hCertStore">HCERTSTORE</arg>
<arg name="dwCertEncodingType">DWORD</arg>

     const BYTE *pbCertEncoded,
     DWORD cbCertEncoded,
     DWORD dwAddDisposition,
<arg name="ppCertContext">PCCERT_CONTEXT *</arg>
</function>


<function name="CertAddCertificateContextToStore" ret="BOOL" convention="__stdcall">
<arg name="hCertStore">HCERTSTORE</arg>
<arg name="pCertContext">PCCERT_CONTEXT</arg>
<arg name="dwAddDisposition">DWORD</arg>
<arg name="ppStoreContext">PCCERT_CONTEXT *</arg>
</function>

<function name="CertAddSerializedElementToStore" ret="BOOL" convention="__stdcall">
<arg name="hCertStore">HCERTSTORE</arg>

     const BYTE *pbElement,
     DWORD cbElement,
     DWORD dwAddDisposition,
     DWORD dwFlags,
     DWORD dwContextTypeFlags,
     DWORD *pdwContextType,
<arg name="ppvContext">const void **</arg>
</function>
<function name="CertDeleteCertificateFromStore" ret="BOOL" convention="__stdcall">
<arg name="pCertContext">PCCERT_CONTEXT</arg>
</function>


<function name="CertAddEncodedCRLToStore" ret="BOOL" convention="__stdcall">
<arg name="hCertStore">HCERTSTORE</arg>
<arg name="dwCertEncodingType">DWORD</arg>

     const BYTE *pbCrlEncoded,
     DWORD cbCrlEncoded,
     DWORD dwAddDisposition,
<arg name="ppCrlContext">PCCRL_CONTEXT *</arg>
</function>



<function name="CertAddCRLContextToStore" ret="BOOL" convention="__stdcall">
<arg name="hCertStore">HCERTSTORE</arg>
<arg name="pCrlContext">PCCRL_CONTEXT</arg>
<arg name="dwAddDisposition">DWORD</arg>
<arg name="ppStoreContext">PCCRL_CONTEXT *</arg>
</function>

<function name="CertDeleteCRLFromStore" ret="BOOL" convention="__stdcall">
<arg name="pCrlContext">PCCRL_CONTEXT</arg>
</function>
<function name="CertSerializeCertificateStoreElement" ret="BOOL" convention="__stdcall">
<arg name="pCertContext">PCCERT_CONTEXT</arg>
<arg name="dwFlags">DWORD</arg>

     BYTE *pbElement,
<arg name="pcbElement">DWORD *</arg>
</function>
<function name="CertSerializeCRLStoreElement" ret="BOOL" convention="__stdcall">
<arg name="pCrlContext">PCCRL_CONTEXT</arg>
<arg name="dwFlags">DWORD</arg>

     BYTE *pbElement,
<arg name="pcbElement">DWORD *</arg>
</function>
<function name="CertDuplicateCTLContext" ret="PCCTL_CONTEXT" convention="__stdcall">
<arg name="pCtlContext">PCCTL_CONTEXT</arg>
</function>

<function name="CertCreateCTLContext" ret="PCCTL_CONTEXT" convention="__stdcall">
<arg name="dwMsgAndCertEncodingType">DWORD</arg>

     const BYTE *pbCtlEncoded,
<arg name="cbCtlEncoded">DWORD</arg>
</function>
<function name="CertFreeCTLContext" ret="BOOL" convention="__stdcall">
<arg name="pCtlContext">PCCTL_CONTEXT</arg>
</function>

<function name="CertSetCTLContextProperty" ret="BOOL" convention="__stdcall">
<arg name="pCtlContext">PCCTL_CONTEXT</arg>
<arg name="dwPropId">DWORD</arg>
<arg name="dwFlags">DWORD</arg>
<arg name="pvData">const void *</arg>
</function>
<function name="CertGetCTLContextProperty" ret="BOOL" convention="__stdcall">
<arg name="pCtlContext">PCCTL_CONTEXT</arg>
<arg name="dwPropId">DWORD</arg>

     void *pvData,
<arg name="pcbData">DWORD *</arg>
</function>

<function name="CertEnumCTLContextProperties" ret="DWORD" convention="__stdcall">
<arg name="pCtlContext">PCCTL_CONTEXT</arg>
<arg name="dwPropId">DWORD</arg>
</function>
<function name="CertEnumCTLsInStore" ret="PCCTL_CONTEXT" convention="__stdcall">
<arg name="hCertStore">HCERTSTORE</arg>
<arg name="pPrevCtlContext">PCCTL_CONTEXT</arg>
</function>
<function name="CertFindSubjectInCTL" ret="PCTL_ENTRY" convention="__stdcall">
<arg name="dwEncodingType">DWORD</arg>
<arg name="dwSubjectType">DWORD</arg>

     void *pvSubject,
     PCCTL_CONTEXT pCtlContext,
<arg name="dwFlags">DWORD</arg>
</function>
<struct name="_CTL_ANY_SUBJECT_INFO">
<field name="SubjectAlgorithm">CRYPT_ALGORITHM_IDENTIFIER</field>
<field name="SubjectIdentifier">CRYPT_DATA_BLOB</field>
</struct>
<typedefprev id="CTL_ANY_SUBJECT_INFO"/>
<typedefptrprev id="PCTL_ANY_SUBJECT_INFO"/>
<function name="CertFindCTLInStore" ret="PCCTL_CONTEXT" convention="__stdcall">
<arg name="hCertStore">HCERTSTORE</arg>
<arg name="dwMsgAndCertEncodingType">DWORD</arg>
<arg name="dwFindFlags">DWORD</arg>
<arg name="dwFindType">DWORD</arg>

     const void *pvFindPara,
<arg name="pPrevCtlContext">PCCTL_CONTEXT</arg>
</function>

<struct name="_CTL_FIND_USAGE_PARA">
<field name="cbSize">DWORD</field>
<field name="SubjectUsage">CTL_USAGE</field>
<field name="ListIdentifier">CRYPT_DATA_BLOB</field>
<field name="pSigner">PCERT_INFO</field>
</struct>
<typedefprev id="CTL_FIND_USAGE_PARA"/>
<typedefptrprev id="PCTL_FIND_USAGE_PARA"/>
<struct name="_CTL_FIND_SUBJECT_PARA">
<field name="cbSize">DWORD</field>
<field name="pUsagePara">PCTL_FIND_USAGE_PARA</field>
<field name="dwSubjectType">DWORD</field>
    void                    *pvSubject;
} CTL_FIND_SUBJECT_PARA, *PCTL_FIND_SUBJECT_PARA;



<function name="CertAddEncodedCTLToStore" ret="BOOL" convention="__stdcall">
<arg name="hCertStore">HCERTSTORE</arg>
<arg name="dwMsgAndCertEncodingType">DWORD</arg>

     const BYTE *pbCtlEncoded,
     DWORD cbCtlEncoded,
     DWORD dwAddDisposition,
<arg name="ppCtlContext">PCCTL_CONTEXT *</arg>
</function>



<function name="CertAddCTLContextToStore" ret="BOOL" convention="__stdcall">
<arg name="hCertStore">HCERTSTORE</arg>
<arg name="pCtlContext">PCCTL_CONTEXT</arg>
<arg name="dwAddDisposition">DWORD</arg>
<arg name="ppStoreContext">PCCTL_CONTEXT *</arg>
</function>

<function name="CertSerializeCTLStoreElement" ret="BOOL" convention="__stdcall">
<arg name="pCtlContext">PCCTL_CONTEXT</arg>
<arg name="dwFlags">DWORD</arg>

     BYTE *pbElement,
<arg name="pcbElement">DWORD *</arg>
</function>

<function name="CertDeleteCTLFromStore" ret="BOOL" convention="__stdcall">
<arg name="pCtlContext">PCCTL_CONTEXT</arg>
</function>


<function name="CertAddCertificateLinkToStore" ret="BOOL" convention="__stdcall">
<arg name="hCertStore">HCERTSTORE</arg>
<arg name="pCertContext">PCCERT_CONTEXT</arg>
<arg name="dwAddDisposition">DWORD</arg>
<arg name="ppStoreContext">PCCERT_CONTEXT *</arg>
</function>



<function name="CertAddCRLLinkToStore" ret="BOOL" convention="__stdcall">
<arg name="hCertStore">HCERTSTORE</arg>
<arg name="pCrlContext">PCCRL_CONTEXT</arg>
<arg name="dwAddDisposition">DWORD</arg>
<arg name="ppStoreContext">PCCRL_CONTEXT *</arg>
</function>


<function name="CertAddCTLLinkToStore" ret="BOOL" convention="__stdcall">
<arg name="hCertStore">HCERTSTORE</arg>
<arg name="pCtlContext">PCCTL_CONTEXT</arg>
<arg name="dwAddDisposition">DWORD</arg>
<arg name="ppStoreContext">PCCTL_CONTEXT *</arg>
</function>

<function name="CertAddStoreToCollection" ret="BOOL" convention="__stdcall">
<arg name="hCollectionStore">HCERTSTORE</arg>
<arg name="hSiblingStore">HCERTSTORE</arg>
<arg name="dwUpdateFlags">DWORD</arg>
<arg name="dwPriority">DWORD</arg>
</function>

<function name="CertRemoveStoreFromCollection" ret="void" convention="__stdcall">
<arg name="hCollectionStore">HCERTSTORE</arg>
<arg name="hSiblingStore">HCERTSTORE</arg>
</function>
<function name="CertControlStore" ret="BOOL" convention="__stdcall">
<arg name="hCertStore">HCERTSTORE</arg>
<arg name="dwFlags">DWORD</arg>
<arg name="dwCtrlType">DWORD</arg>
<arg name="pvCtrlPara">void const *</arg>
</function>

<function name="CertSetStoreProperty" ret="BOOL" convention="__stdcall">
<arg name="hCertStore">HCERTSTORE</arg>
<arg name="dwPropId">DWORD</arg>
<arg name="dwFlags">DWORD</arg>
<arg name="pvData">const void *</arg>
</function>

<function name="CertGetStoreProperty" ret="BOOL" convention="__stdcall">
<arg name="hCertStore">HCERTSTORE</arg>
<arg name="dwPropId">DWORD</arg>

     void *pvData,
<arg name="pcbData">DWORD *</arg>
</function>

typedef<fnptr name="PFN_CERT_CREATE_CONTEXT_SORT_FUNC" ret="BOOL" convention="__stdcall">
<arg name="cbTotalEncoded">DWORD</arg>
<arg name="cbRemainEncoded">DWORD</arg>
<arg name="cEntry">DWORD</arg>
<arg name="pvSort">void *</arg>
</function>

<struct name="_CERT_CREATE_CONTEXT_PARA">
<field name="cbSize">DWORD</field>
<field name="pfnFree">PFN_CRYPT_FREE</field>
    void                                *pvFree;    

    
    
    PFN_CERT_CREATE_CONTEXT_SORT_FUNC   pfnSort;    
    void                                *pvSort;    
} CERT_CREATE_CONTEXT_PARA, *PCERT_CREATE_CONTEXT_PARA;

<function name="CertCreateContext" ret="const void *" convention="__stdcall">
<arg name="dwContextType">DWORD</arg>
<arg name="dwEncodingType">DWORD</arg>

     const BYTE *pbEncoded,
     DWORD cbEncoded,
     DWORD dwFlags,
<arg name="pCreatePara">PCERT_CREATE_CONTEXT_PARA</arg>
</function>

<struct name="_CERT_SYSTEM_STORE_INFO">
<field name="cbSize">DWORD</field>
</struct>
<typedefprev id="CERT_SYSTEM_STORE_INFO"/>
<typedefptrprev id="PCERT_SYSTEM_STORE_INFO"/>
<struct name="_CERT_PHYSICAL_STORE_INFO">
<field name="cbSize">DWORD</field>
<field name="pszOpenStoreProvider">LPSTR</field>
<field name="dwOpenEncodingType">DWORD</field>
<field name="dwOpenFlags">DWORD</field>
<field name="OpenParameters">CRYPT_DATA_BLOB</field>
<field name="dwFlags">DWORD</field>
<field name="dwPriority">DWORD</field>
</struct>
<typedefprev id="CERT_PHYSICAL_STORE_INFO"/>
<typedefptrprev id="PCERT_PHYSICAL_STORE_INFO"/>

<function name="CertRegisterSystemStore" ret="BOOL" convention="__stdcall">
<arg name="pvSystemStore">const void *</arg>

     DWORD dwFlags,
     PCERT_SYSTEM_STORE_INFO pStoreInfo,
<arg name="pvReserved">void *</arg>
</function>
<function name="CertRegisterPhysicalStore" ret="BOOL" convention="__stdcall">
<arg name="pvSystemStore">const void *</arg>

     DWORD dwFlags,
     LPCWSTR pwszStoreName,
     PCERT_PHYSICAL_STORE_INFO pStoreInfo,
<arg name="pvReserved">void *</arg>
</function>
<function name="CertUnregisterSystemStore" ret="BOOL" convention="__stdcall">
<arg name="pvSystemStore">const void *</arg>
<arg name="dwFlags">DWORD</arg>
</function>
<function name="CertUnregisterPhysicalStore" ret="BOOL" convention="__stdcall">
<arg name="pvSystemStore">const void *</arg>

     DWORD dwFlags,
<arg name="pwszStoreName">LPCWSTR</arg>
</function>

typedef<fnptr name="PFN_CERT_ENUM_SYSTEM_STORE_LOCATION" ret="BOOL" convention="__stdcall">
<arg name="pwszStoreLocation">LPCWSTR</arg>
<arg name="dwFlags">DWORD</arg>

     void *pvReserved,
<arg name="pvArg">void *</arg>
</function>

typedef<fnptr name="PFN_CERT_ENUM_SYSTEM_STORE" ret="BOOL" convention="__stdcall">

     const void *pvSystemStore,
     DWORD dwFlags,
     PCERT_SYSTEM_STORE_INFO pStoreInfo,
     void *pvReserved,
<arg name="pvArg">void *</arg>
</function>

typedef<fnptr name="PFN_CERT_ENUM_PHYSICAL_STORE" ret="BOOL" convention="__stdcall">

     const void *pvSystemStore,
     DWORD dwFlags,
     LPCWSTR pwszStoreName,
     PCERT_PHYSICAL_STORE_INFO pStoreInfo,
     void *pvReserved,
<arg name="pvArg">void *</arg>
</function>

<function name="CertEnumSystemStoreLocation" ret="BOOL" convention="__stdcall">
<arg name="dwFlags">DWORD</arg>

     void *pvArg,
<arg name="pfnEnum">PFN_CERT_ENUM_SYSTEM_STORE_LOCATION</arg>
</function>

<function name="CertEnumSystemStore" ret="BOOL" convention="__stdcall">
<arg name="dwFlags">DWORD</arg>

     void *pvSystemStoreLocationPara,
     void *pvArg,
<arg name="pfnEnum">PFN_CERT_ENUM_SYSTEM_STORE</arg>
</function>
<function name="CertEnumPhysicalStore" ret="BOOL" convention="__stdcall">
<arg name="pvSystemStore">const void *</arg>

     DWORD dwFlags,
     void *pvArg,
<arg name="pfnEnum">PFN_CERT_ENUM_PHYSICAL_STORE</arg>
</function>

<function name="CertGetEnhancedKeyUsage" ret="BOOL" convention="__stdcall">
<arg name="pCertContext">PCCERT_CONTEXT</arg>
<arg name="dwFlags">DWORD</arg>
<arg name="pUsage">PCERT_ENHKEY_USAGE</arg>
<arg name="pcbUsage">DWORD *</arg>
</function>

<function name="CertSetEnhancedKeyUsage" ret="BOOL" convention="__stdcall">
<arg name="pCertContext">PCCERT_CONTEXT</arg>
<arg name="pUsage">PCERT_ENHKEY_USAGE</arg>
</function>

<function name="CertAddEnhancedKeyUsageIdentifier" ret="BOOL" convention="__stdcall">
<arg name="pCertContext">PCCERT_CONTEXT</arg>
<arg name="pszUsageIdentifier">LPCSTR</arg>
</function>

<function name="CertRemoveEnhancedKeyUsageIdentifier" ret="BOOL" convention="__stdcall">
<arg name="pCertContext">PCCERT_CONTEXT</arg>
<arg name="pszUsageIdentifier">LPCSTR</arg>
</function>
<function name="CertGetValidUsages" ret="BOOL" convention="__stdcall">
<arg name="cCerts">DWORD</arg>

     PCCERT_CONTEXT *rghCerts,
     int *cNumOIDs,
     LPSTR *rghOIDs,
     DWORD *pcbOIDs);


<function name="CryptMsgGetAndVerifySigner" ret="BOOL" convention="__stdcall">
<arg name="hCryptMsg">HCRYPTMSG</arg>
<arg name="cSignerStore">DWORD</arg>

     HCERTSTORE *rghSignerStore,
     DWORD dwFlags,
     PCCERT_CONTEXT *ppSigner,
<arg name="pdwSignerIndex">DWORD *</arg>
</function>

<function name="CryptMsgSignCTL" ret="BOOL" convention="__stdcall">
<arg name="dwMsgEncodingType">DWORD</arg>

     BYTE *pbCtlContent,
     DWORD cbCtlContent,
     PCMSG_SIGNED_ENCODE_INFO pSignInfo,
     DWORD dwFlags,
     BYTE *pbEncoded,
<arg name="pcbEncoded">DWORD *</arg>
</function>
<function name="CryptMsgEncodeAndSignCTL" ret="BOOL" convention="__stdcall">
<arg name="dwMsgEncodingType">DWORD</arg>
<arg name="pCtlInfo">PCTL_INFO</arg>
<arg name="pSignInfo">PCMSG_SIGNED_ENCODE_INFO</arg>
<arg name="dwFlags">DWORD</arg>

     BYTE *pbEncoded,
<arg name="pcbEncoded">DWORD *</arg>
</function>
<function name="CertFindSubjectInSortedCTL" ret="BOOL" convention="__stdcall">
<arg name="pSubjectIdentifier">PCRYPT_DATA_BLOB</arg>
<arg name="pCtlContext">PCCTL_CONTEXT</arg>
<arg name="dwFlags">DWORD</arg>

     void *pvReserved,
<arg name="pEncodedAttributes">PCRYPT_DER_BLOB</arg>
</function>

<function name="CertEnumSubjectInSortedCTL" ret="BOOL" convention="__stdcall">
<arg name="pCtlContext">PCCTL_CONTEXT</arg>

     void **ppvNextSubject,
     PCRYPT_DER_BLOB pSubjectIdentifier,
<arg name="pEncodedAttributes">PCRYPT_DER_BLOB</arg>
</function>

<struct name="_CTL_VERIFY_USAGE_PARA">
<field name="cbSize">DWORD</field>
<field name="ListIdentifier">CRYPT_DATA_BLOB</field>
<field name="cCtlStore">DWORD</field>
    HCERTSTORE              *rghCtlStore;       
    DWORD                   cSignerStore;
    HCERTSTORE              *rghSignerStore;    
} CTL_VERIFY_USAGE_PARA, *PCTL_VERIFY_USAGE_PARA;

<struct name="_CTL_VERIFY_USAGE_STATUS">
<field name="cbSize">DWORD</field>
<field name="dwError">DWORD</field>
<field name="dwFlags">DWORD</field>
    PCCTL_CONTEXT           *ppCtl;             
    DWORD                   dwCtlEntryIndex;
    PCCERT_CONTEXT          *ppSigner;          
    DWORD                   dwSignerIndex;
} CTL_VERIFY_USAGE_STATUS, *PCTL_VERIFY_USAGE_STATUS;
<function name="CertVerifyCTLUsage" ret="BOOL" convention="__stdcall">
<arg name="dwEncodingType">DWORD</arg>
<arg name="dwSubjectType">DWORD</arg>

     void *pvSubject,
     PCTL_USAGE pSubjectUsage,
     DWORD dwFlags,
     PCTL_VERIFY_USAGE_PARA pVerifyUsagePara,
<arg name="pVerifyUsageStatus">PCTL_VERIFY_USAGE_STATUS</arg>
</function>
<struct name="_CERT_REVOCATION_CRL_INFO">
<field name="cbSize">DWORD</field>
<field name="pBaseCrlContext">PCCRL_CONTEXT</field>
<field name="pDeltaCrlContext">PCCRL_CONTEXT</field>
    
    
    PCRL_ENTRY              pCrlEntry;
    BOOL                    fDeltaCrlEntry; 
} CERT_REVOCATION_CRL_INFO, *PCERT_REVOCATION_CRL_INFO;

<struct name="_CERT_REVOCATION_PARA">
<field name="cbSize">DWORD</field>
<field name="pIssuerCert">PCCERT_CONTEXT</field>
<field name="cCertStore">DWORD</field>
    HCERTSTORE                  *rgCertStore;
    HCERTSTORE                  hCrlStore;
    LPFILETIME                  pftTimeToUse;

} CERT_REVOCATION_PARA, *PCERT_REVOCATION_PARA;
<struct name="_CERT_REVOCATION_STATUS">
<field name="cbSize">DWORD</field>
<field name="dwIndex">DWORD</field>
<field name="dwError">DWORD</field>
<field name="dwReason">DWORD</field>
    

    
    
    
    
    
    
    BOOL                    fHasFreshnessTime;
    DWORD                   dwFreshnessTime;    
} CERT_REVOCATION_STATUS, *PCERT_REVOCATION_STATUS;

<function name="CertVerifyRevocation" ret="BOOL" convention="__stdcall">
<arg name="dwEncodingType">DWORD</arg>
<arg name="dwRevType">DWORD</arg>
<arg name="cContext">DWORD</arg>

     PVOID rgpvContext[],
     DWORD dwFlags,
     PCERT_REVOCATION_PARA pRevPara,
<arg name="pRevStatus">PCERT_REVOCATION_STATUS</arg>
</function>
<function name="CertCompareIntegerBlob" ret="BOOL" convention="__stdcall">
<arg name="pInt1">PCRYPT_INTEGER_BLOB</arg>
<arg name="pInt2">PCRYPT_INTEGER_BLOB</arg>
</function>
<function name="CertCompareCertificate" ret="BOOL" convention="__stdcall">
<arg name="dwCertEncodingType">DWORD</arg>
<arg name="pCertId1">PCERT_INFO</arg>
<arg name="pCertId2">PCERT_INFO</arg>
</function>

<function name="CertCompareCertificateName" ret="BOOL" convention="__stdcall">
<arg name="dwCertEncodingType">DWORD</arg>
<arg name="pCertName1">PCERT_NAME_BLOB</arg>
<arg name="pCertName2">PCERT_NAME_BLOB</arg>
</function>
<function name="CertIsRDNAttrsInCertificateName" ret="BOOL" convention="__stdcall">
<arg name="dwCertEncodingType">DWORD</arg>
<arg name="dwFlags">DWORD</arg>
<arg name="pCertName">PCERT_NAME_BLOB</arg>
<arg name="pRDN">PCERT_RDN</arg>
</function>
<function name="CertComparePublicKeyInfo" ret="BOOL" convention="__stdcall">
<arg name="dwCertEncodingType">DWORD</arg>
<arg name="pPublicKey1">PCERT_PUBLIC_KEY_INFO</arg>
<arg name="pPublicKey2">PCERT_PUBLIC_KEY_INFO</arg>
</function>

<function name="CertGetPublicKeyLength" ret="DWORD" convention="__stdcall">
<arg name="dwCertEncodingType">DWORD</arg>
<arg name="pPublicKey">PCERT_PUBLIC_KEY_INFO</arg>
</function>


<function name="CryptVerifyCertificateSignature" ret="BOOL" convention="__stdcall">
<arg name="hCryptProv">HCRYPTPROV_LEGACY</arg>
<arg name="dwCertEncodingType">DWORD</arg>

     const BYTE *pbEncoded,
     DWORD cbEncoded,
<arg name="pPublicKey">PCERT_PUBLIC_KEY_INFO</arg>
</function>


<function name="CryptVerifyCertificateSignatureEx" ret="BOOL" convention="__stdcall">
<arg name="hCryptProv">HCRYPTPROV_LEGACY</arg>
<arg name="dwCertEncodingType">DWORD</arg>
<arg name="dwSubjectType">DWORD</arg>

     void *pvSubject,
     DWORD dwIssuerType,
     void *pvIssuer,
     DWORD dwFlags,
<arg name="pvReserved">void *</arg>
</function>

    

    

    

    
    

    

    

    

<function name="CryptHashToBeSigned" ret="BOOL" convention="__stdcall">
<arg name="hCryptProv">HCRYPTPROV_LEGACY</arg>
<arg name="dwCertEncodingType">DWORD</arg>

     const BYTE *pbEncoded,
     DWORD cbEncoded,
     BYTE *pbComputedHash,
<arg name="pcbComputedHash">DWORD *</arg>
</function>
<function name="CryptHashCertificate" ret="BOOL" convention="__stdcall">
<arg name="hCryptProv">HCRYPTPROV_LEGACY</arg>
<arg name="Algid">ALG_ID</arg>
<arg name="dwFlags">DWORD</arg>

     const BYTE *pbEncoded,
     DWORD cbEncoded,
     BYTE *pbComputedHash,
<arg name="pcbComputedHash">DWORD *</arg>
</function>

<function name="CryptHashCertificate2" ret="BOOL" convention="__stdcall">
<arg name="pwszCNGHashAlgid">LPCWSTR</arg>
<arg name="dwFlags">DWORD</arg>

     void *pvReserved,
     const BYTE *pbEncoded,
     DWORD cbEncoded,
     BYTE *pbComputedHash,
<arg name="pcbComputedHash">DWORD *</arg>
</function>
<function name="CryptSignCertificate" ret="BOOL" convention="__stdcall">
<arg name="hCryptProvOrNCryptKey">HCRYPTPROV_OR_NCRYPT_KEY_HANDLE</arg>
<arg name="dwKeySpec">DWORD</arg>
       
     DWORD dwCertEncodingType,
     const BYTE *pbEncodedToBeSigned,
     DWORD cbEncodedToBeSigned,
     PCRYPT_ALGORITHM_IDENTIFIER pSignatureAlgorithm,
     const void *pvHashAuxInfo,
     BYTE *pbSignature,
<arg name="pcbSignature">DWORD *</arg>
</function>

<function name="CryptSignAndEncodeCertificate" ret="BOOL" convention="__stdcall">
<arg name="hCryptProvOrNCryptKey">HCRYPTPROV_OR_NCRYPT_KEY_HANDLE</arg>
<arg name="dwKeySpec">DWORD</arg>
       
     DWORD dwCertEncodingType,
     LPCSTR lpszStructType,       
     const void *pvStructInfo,
     PCRYPT_ALGORITHM_IDENTIFIER pSignatureAlgorithm,
     const void *pvHashAuxInfo,
     BYTE *pbEncoded,
<arg name="pcbEncoded">DWORD *</arg>
</function>
typedef<fnptr name="PFN_CRYPT_EXTRACT_ENCODED_SIGNATURE_PARAMETERS_FUNC" ret="BOOL" convention="__stdcall">
<arg name="dwCertEncodingType">DWORD</arg>
<arg name="pSignatureAlgorithm">PCRYPT_ALGORITHM_IDENTIFIER</arg>

     void **ppvDecodedSignPara, 
     LPWSTR *ppwszCNGHashAlgid      
    );

typedef<fnptr name="PFN_CRYPT_SIGN_AND_ENCODE_HASH_FUNC" ret="BOOL" convention="__stdcall">
<arg name="hKey">NCRYPT_KEY_HANDLE</arg>
<arg name="dwCertEncodingType">DWORD</arg>
<arg name="pSignatureAlgorithm">PCRYPT_ALGORITHM_IDENTIFIER</arg>

     void *pvDecodedSignPara,
     LPCWSTR pwszCNGPubKeyAlgid,    
     LPCWSTR pwszCNGHashAlgid,
     BYTE *pbComputedHash,
     DWORD cbComputedHash,
     BYTE *pbSignature,
<arg name="pcbSignature">DWORD *</arg>
</function>
typedef<fnptr name="PFN_CRYPT_VERIFY_ENCODED_SIGNATURE_FUNC" ret="BOOL" convention="__stdcall">
<arg name="dwCertEncodingType">DWORD</arg>
<arg name="pPubKeyInfo">PCERT_PUBLIC_KEY_INFO</arg>
<arg name="pSignatureAlgorithm">PCRYPT_ALGORITHM_IDENTIFIER</arg>

     void *pvDecodedSignPara,
     LPCWSTR pwszCNGPubKeyAlgid,    
     LPCWSTR pwszCNGHashAlgid,
     BYTE *pbComputedHash,
     DWORD cbComputedHash,
     BYTE *pbSignature,
<arg name="cbSignature">DWORD</arg>
</function>
<function name="CertVerifyTimeValidity" ret="LONG" convention="__stdcall">
<arg name="pTimeToVerify">LPFILETIME</arg>
<arg name="pCertInfo">PCERT_INFO</arg>
</function>
<function name="CertVerifyCRLTimeValidity" ret="LONG" convention="__stdcall">
<arg name="pTimeToVerify">LPFILETIME</arg>
<arg name="pCrlInfo">PCRL_INFO</arg>
</function>
<function name="CertVerifyValidityNesting" ret="BOOL" convention="__stdcall">
<arg name="pSubjectInfo">PCERT_INFO</arg>
<arg name="pIssuerInfo">PCERT_INFO</arg>
</function>

<function name="CertVerifyCRLRevocation" ret="BOOL" convention="__stdcall">
<arg name="dwCertEncodingType">DWORD</arg>
<arg name="pCertId">PCERT_INFO</arg>
          
                                      
     DWORD cCrlInfo,
     PCRL_INFO rgpCrlInfo[]
    );

<function name="CertAlgIdToOID" ret="LPCSTR" convention="__stdcall">
<arg name="dwAlgId">DWORD</arg>
</function>

<function name="CertOIDToAlgId" ret="DWORD" convention="__stdcall">
<arg name="pszObjId">LPCSTR</arg>
</function>

<function name="CertFindExtension" ret="PCERT_EXTENSION" convention="__stdcall">
<arg name="pszObjId">LPCSTR</arg>
<arg name="cExtensions">DWORD</arg>

     CERT_EXTENSION rgExtensions[]
    );

<function name="CertFindAttribute" ret="PCRYPT_ATTRIBUTE" convention="__stdcall">
<arg name="pszObjId">LPCSTR</arg>
<arg name="cAttr">DWORD</arg>

     CRYPT_ATTRIBUTE rgAttr[]
    );
<function name="CertFindRDNAttr" ret="PCERT_RDN_ATTR" convention="__stdcall">
<arg name="pszObjId">LPCSTR</arg>
<arg name="pName">PCERT_NAME_INFO</arg>
</function>
<function name="CertGetIntendedKeyUsage" ret="BOOL" convention="__stdcall">
<arg name="dwCertEncodingType">DWORD</arg>
<arg name="pCertInfo">PCERT_INFO</arg>

     BYTE *pbKeyUsage,
<arg name="cbKeyUsage">DWORD</arg>
</function>

typedef void *HCRYPTDEFAULTCONTEXT;

<function name="CryptInstallDefaultContext" ret="BOOL" convention="__stdcall">
<arg name="hCryptProv">HCRYPTPROV</arg>
<arg name="dwDefaultType">DWORD</arg>

     const void *pvDefaultPara,
     DWORD dwFlags,
     void *pvReserved,
<arg name="phDefaultContext">HCRYPTDEFAULTCONTEXT *</arg>
</function>

<struct name="_CRYPT_DEFAULT_CONTEXT_MULTI_OID_PARA">
<field name="cOID">DWORD</field>
    LPSTR               *rgpszOID;
} CRYPT_DEFAULT_CONTEXT_MULTI_OID_PARA, *PCRYPT_DEFAULT_CONTEXT_MULTI_OID_PARA;
<function name="CryptUninstallDefaultContext" ret="BOOL" convention="__stdcall">
<arg name="hDefaultContext">HCRYPTDEFAULTCONTEXT</arg>
<arg name="dwFlags">DWORD</arg>
<arg name="pvReserved">void *</arg>
</function>

<function name="CryptExportPublicKeyInfo" ret="BOOL" convention="__stdcall">
<arg name="hCryptProvOrNCryptKey">HCRYPTPROV_OR_NCRYPT_KEY_HANDLE</arg>
<arg name="dwKeySpec">DWORD</arg>
       
     DWORD dwCertEncodingType,
     PCERT_PUBLIC_KEY_INFO pInfo,
<arg name="pcbInfo">DWORD *</arg>
</function>

<function name="CryptExportPublicKeyInfoEx" ret="BOOL" convention="__stdcall">
<arg name="hCryptProvOrNCryptKey">HCRYPTPROV_OR_NCRYPT_KEY_HANDLE</arg>
<arg name="dwKeySpec">DWORD</arg>
       
     DWORD dwCertEncodingType,
     LPSTR pszPublicKeyObjId,
     DWORD dwFlags,
     void *pvAuxInfo,
     PCERT_PUBLIC_KEY_INFO pInfo,
<arg name="pcbInfo">DWORD *</arg>
</function>
typedef BOOL (__stdcall *PFN_CRYPT_EXPORT_PUBLIC_KEY_INFO_EX2_FUNC) (
     NCRYPT_KEY_HANDLE hNCryptKey,
     DWORD dwCertEncodingType,
     LPSTR pszPublicKeyObjId,
     DWORD dwFlags,
     void *pvAuxInfo,
     PCERT_PUBLIC_KEY_INFO pInfo,
<arg name="pcbInfo">DWORD *</arg>
</function>
<function name="CryptImportPublicKeyInfo" ret="BOOL" convention="__stdcall">
<arg name="hCryptProv">HCRYPTPROV</arg>
<arg name="dwCertEncodingType">DWORD</arg>
<arg name="pInfo">PCERT_PUBLIC_KEY_INFO</arg>
<arg name="phKey">HCRYPTKEY *</arg>
</function>
<function name="CryptImportPublicKeyInfoEx" ret="BOOL" convention="__stdcall">
<arg name="hCryptProv">HCRYPTPROV</arg>
<arg name="dwCertEncodingType">DWORD</arg>
<arg name="pInfo">PCERT_PUBLIC_KEY_INFO</arg>
<arg name="aiKeyAlg">ALG_ID</arg>
<arg name="dwFlags">DWORD</arg>

     void *pvAuxInfo,
<arg name="phKey">HCRYPTKEY *</arg>
</function>

<function name="CryptImportPublicKeyInfoEx2" ret="BOOL" convention="__stdcall">
<arg name="dwCertEncodingType">DWORD</arg>
<arg name="pInfo">PCERT_PUBLIC_KEY_INFO</arg>
<arg name="dwFlags">DWORD</arg>

     void *pvAuxInfo,
<arg name="phKey">BCRYPT_KEY_HANDLE *</arg>
</function>
typedef BOOL (__stdcall *PFN_IMPORT_PUBLIC_KEY_INFO_EX2_FUNC) (
     DWORD dwCertEncodingType,
     PCERT_PUBLIC_KEY_INFO pInfo,
     DWORD dwFlags,
     void *pvAuxInfo,
<arg name="phKey">BCRYPT_KEY_HANDLE *</arg>
</function>

<function name="CryptAcquireCertificatePrivateKey" ret="BOOL" convention="__stdcall">
<arg name="pCert">PCCERT_CONTEXT</arg>
<arg name="dwFlags">DWORD</arg>

     void *pvReserved,
     HCRYPTPROV_OR_NCRYPT_KEY_HANDLE *phCryptProvOrNCryptKey,
     DWORD *pdwKeySpec,
<arg name="pfCallerFreeProvOrNCryptKey">BOOL *</arg>
</function>
<function name="CryptFindCertificateKeyProvInfo" ret="BOOL" convention="__stdcall">
<arg name="pCert">PCCERT_CONTEXT</arg>
<arg name="dwFlags">DWORD</arg>
<arg name="pvReserved">void *</arg>
</function>

typedef BOOL (__stdcall *PFN_IMPORT_PRIV_KEY_FUNC) (
     HCRYPTPROV hCryptProv,                     
     CRYPT_PRIVATE_KEY_INFO* pPrivateKeyInfo,   
     DWORD dwFlags,                             
     void* pvAuxInfo                        
    );

<function name="CryptImportPKCS8" ret="BOOL" convention="__stdcall">
<arg name="sPrivateKeyAndParams">CRYPT_PKCS8_IMPORT_PARAMS</arg>
    
     DWORD dwFlags,                                     
     HCRYPTPROV *phCryptProv,                      
     void* pvAuxInfo                                
    );

typedef BOOL (__stdcall *PFN_EXPORT_PRIV_KEY_FUNC) (
     HCRYPTPROV hCryptProv,         
     DWORD dwKeySpec,               
     LPSTR pszPrivateKeyObjId,      
     DWORD dwFlags,                 
     void* pvAuxInfo,           
     CRYPT_PRIVATE_KEY_INFO* pPrivateKeyInfo,  
     DWORD* pcbPrivateKeyInfo    
    );
<function name="CryptExportPKCS8" ret="BOOL" convention="__stdcall">
<arg name="hCryptProv">HCRYPTPROV</arg>
                                     
     DWORD dwKeySpec,                                           
     LPSTR pszPrivateKeyObjId,                                  
     DWORD dwFlags,                                             
     void* pvAuxInfo,                                       
     BYTE* pbPrivateKeyBlob,   
     DWORD *pcbPrivateKeyBlob                                
    );
<function name="CryptExportPKCS8Ex" ret="BOOL" convention="__stdcall">
<arg name="psExportParams">CRYPT_PKCS8_EXPORT_PARAMS*</arg>
                 
     DWORD dwFlags,                                             
     void* pvAuxInfo,                                       
     BYTE* pbPrivateKeyBlob,   
     DWORD* pcbPrivateKeyBlob                                
    );

<function name="CryptHashPublicKeyInfo" ret="BOOL" convention="__stdcall">
<arg name="hCryptProv">HCRYPTPROV_LEGACY</arg>
<arg name="Algid">ALG_ID</arg>
<arg name="dwFlags">DWORD</arg>
<arg name="dwCertEncodingType">DWORD</arg>
<arg name="pInfo">PCERT_PUBLIC_KEY_INFO</arg>

     BYTE *pbComputedHash,
<arg name="pcbComputedHash">DWORD *</arg>
</function>
<function name="CertRDNValueToStrA" ret="DWORD" convention="__stdcall">
<arg name="dwValueType">DWORD</arg>
<arg name="pValue">PCERT_RDN_VALUE_BLOB</arg>
<arg name="psz">LPSTR</arg>
<arg name="csz">DWORD</arg>
</function>

<function name="CertRDNValueToStrW" ret="DWORD" convention="__stdcall">
<arg name="dwValueType">DWORD</arg>
<arg name="pValue">PCERT_RDN_VALUE_BLOB</arg>
<arg name="psz">LPWSTR</arg>
<arg name="csz">DWORD</arg>
</function>
<function name="CertNameToStrA" ret="DWORD" convention="__stdcall">
<arg name="dwCertEncodingType">DWORD</arg>
<arg name="pName">PCERT_NAME_BLOB</arg>
<arg name="dwStrType">DWORD</arg>
<arg name="psz">LPSTR</arg>
<arg name="csz">DWORD</arg>
</function>
<function name="CertNameToStrW" ret="DWORD" convention="__stdcall">
<arg name="dwCertEncodingType">DWORD</arg>
<arg name="pName">PCERT_NAME_BLOB</arg>
<arg name="dwStrType">DWORD</arg>
<arg name="psz">LPWSTR</arg>
<arg name="csz">DWORD</arg>
</function>
<function name="CertStrToNameA" ret="BOOL" convention="__stdcall">
<arg name="dwCertEncodingType">DWORD</arg>
<arg name="pszX500">LPCSTR</arg>
<arg name="dwStrType">DWORD</arg>

     void *pvReserved,
     BYTE *pbEncoded,
     DWORD *pcbEncoded,
<arg name="ppszError">LPCSTR *</arg>
</function>
<function name="CertStrToNameW" ret="BOOL" convention="__stdcall">
<arg name="dwCertEncodingType">DWORD</arg>
<arg name="pszX500">LPCWSTR</arg>
<arg name="dwStrType">DWORD</arg>

     void *pvReserved,
     BYTE *pbEncoded,
     DWORD *pcbEncoded,
<arg name="ppszError">LPCWSTR *</arg>
</function>
<function name="CertGetNameStringA" ret="DWORD" convention="__stdcall">
<arg name="pCertContext">PCCERT_CONTEXT</arg>
<arg name="dwType">DWORD</arg>
<arg name="dwFlags">DWORD</arg>

     void *pvTypePara,
     LPSTR pszNameString,
<arg name="cchNameString">DWORD</arg>
</function>
<function name="CertGetNameStringW" ret="DWORD" convention="__stdcall">
<arg name="pCertContext">PCCERT_CONTEXT</arg>
<arg name="dwType">DWORD</arg>
<arg name="dwFlags">DWORD</arg>

     void *pvTypePara,
     LPWSTR pszNameString,
<arg name="cchNameString">DWORD</arg>
</function>
typedef<fnptr name="PFN_CRYPT_GET_SIGNER_CERTIFICATE" ret="PCCERT_CONTEXT" convention="__stdcall">

     void *pvGetArg,
     DWORD dwCertEncodingType,
     PCERT_INFO pSignerId,    
                                
<arg name="hMsgCertStore">HCERTSTORE</arg>
</function>
<struct name="_CRYPT_SIGN_MESSAGE_PARA">
<field name="cbSize">DWORD</field>
<field name="dwMsgEncodingType">DWORD</field>
<field name="pSigningCert">PCCERT_CONTEXT</field>
<field name="HashAlgorithm">CRYPT_ALGORITHM_IDENTIFIER</field>
    void                        *pvHashAuxInfo;
    DWORD                       cMsgCert;
    PCCERT_CONTEXT              *rgpMsgCert;
    DWORD                       cMsgCrl;
    PCCRL_CONTEXT               *rgpMsgCrl;
    DWORD                       cAuthAttr;
    PCRYPT_ATTRIBUTE            rgAuthAttr;
    DWORD                       cUnauthAttr;
    PCRYPT_ATTRIBUTE            rgUnauthAttr;
    DWORD                       dwFlags;
    DWORD                       dwInnerContentType;

} CRYPT_SIGN_MESSAGE_PARA, *PCRYPT_SIGN_MESSAGE_PARA;
<struct name="_CRYPT_VERIFY_MESSAGE_PARA">
<field name="cbSize">DWORD</field>
<field name="dwMsgAndCertEncodingType">DWORD</field>
<field name="hCryptProv">HCRYPTPROV_LEGACY</field>
<field name="pfnGetSignerCertificate">PFN_CRYPT_GET_SIGNER_CERTIFICATE</field>
    void                                *pvGetArg;
} CRYPT_VERIFY_MESSAGE_PARA, *PCRYPT_VERIFY_MESSAGE_PARA;
<struct name="_CRYPT_ENCRYPT_MESSAGE_PARA">
<field name="cbSize">DWORD</field>
<field name="dwMsgEncodingType">DWORD</field>
<field name="hCryptProv">HCRYPTPROV_LEGACY</field>
<field name="ContentEncryptionAlgorithm">CRYPT_ALGORITHM_IDENTIFIER</field>
    void                        *pvEncryptionAuxInfo;
    DWORD                       dwFlags;
    DWORD                       dwInnerContentType;
} CRYPT_ENCRYPT_MESSAGE_PARA, *PCRYPT_ENCRYPT_MESSAGE_PARA;

<struct name="_CRYPT_DECRYPT_MESSAGE_PARA">
<field name="cbSize">DWORD</field>
<field name="dwMsgAndCertEncodingType">DWORD</field>
<field name="cCertStore">DWORD</field>
    HCERTSTORE              *rghCertStore;
} CRYPT_DECRYPT_MESSAGE_PARA, *PCRYPT_DECRYPT_MESSAGE_PARA;
<struct name="_CRYPT_HASH_MESSAGE_PARA">
<field name="cbSize">DWORD</field>
<field name="dwMsgEncodingType">DWORD</field>
<field name="hCryptProv">HCRYPTPROV_LEGACY</field>
<field name="HashAlgorithm">CRYPT_ALGORITHM_IDENTIFIER</field>
    void                        *pvHashAuxInfo;
} CRYPT_HASH_MESSAGE_PARA, *PCRYPT_HASH_MESSAGE_PARA;

<struct name="_CRYPT_KEY_SIGN_MESSAGE_PARA">
<field name="cbSize">DWORD</field>
<field name="dwMsgAndCertEncodingType">DWORD</field>
    
    union {
        HCRYPTPROV                  hCryptProv;
        NCRYPT_KEY_HANDLE           hNCryptKey;
    };

    
    DWORD                       dwKeySpec;

    CRYPT_ALGORITHM_IDENTIFIER  HashAlgorithm;
    void                        *pvHashAuxInfo;
    
    CRYPT_ALGORITHM_IDENTIFIER  PubKeyAlgorithm;
} CRYPT_KEY_SIGN_MESSAGE_PARA, *PCRYPT_KEY_SIGN_MESSAGE_PARA;
<struct name="_CRYPT_KEY_VERIFY_MESSAGE_PARA">
<field name="cbSize">DWORD</field>
<field name="dwMsgEncodingType">DWORD</field>
<field name="hCryptProv">HCRYPTPROV_LEGACY</field>
</struct>
<typedefprev id="CRYPT_KEY_VERIFY_MESSAGE_PARA"/>
<typedefptrprev id="PCRYPT_KEY_VERIFY_MESSAGE_PARA"/>

<function name="CryptSignMessage" ret="BOOL" convention="__stdcall">
<arg name="pSignPara">PCRYPT_SIGN_MESSAGE_PARA</arg>
<arg name="fDetachedSignature">BOOL</arg>
<arg name="cToBeSigned">DWORD</arg>

     const BYTE *rgpbToBeSigned[],
     DWORD rgcbToBeSigned[],
     BYTE *pbSignedBlob,
<arg name="pcbSignedBlob">DWORD *</arg>
</function>

<function name="CryptVerifyMessageSignature" ret="BOOL" convention="__stdcall">
<arg name="pVerifyPara">PCRYPT_VERIFY_MESSAGE_PARA</arg>
<arg name="dwSignerIndex">DWORD</arg>

     const BYTE *pbSignedBlob,
     DWORD cbSignedBlob,
     BYTE *pbDecoded,
     DWORD *pcbDecoded,
<arg name="ppSignerCert">PCCERT_CONTEXT *</arg>
</function>
<function name="CryptGetMessageSignerCount" ret="LONG" convention="__stdcall">
<arg name="dwMsgEncodingType">DWORD</arg>

     const BYTE *pbSignedBlob,
<arg name="cbSignedBlob">DWORD</arg>
</function>
<function name="CryptGetMessageCertificates" ret="HCERTSTORE" convention="__stdcall">
<arg name="dwMsgAndCertEncodingType">DWORD</arg>
<arg name="hCryptProv">HCRYPTPROV_LEGACY</arg>
           
     DWORD dwFlags,                   
     const BYTE *pbSignedBlob,
<arg name="cbSignedBlob">DWORD</arg>
</function>

<function name="CryptVerifyDetachedMessageSignature" ret="BOOL" convention="__stdcall">
<arg name="pVerifyPara">PCRYPT_VERIFY_MESSAGE_PARA</arg>
<arg name="dwSignerIndex">DWORD</arg>

     const BYTE *pbDetachedSignBlob,
     DWORD cbDetachedSignBlob,
     DWORD cToBeSigned,
     const BYTE *rgpbToBeSigned[],
     DWORD rgcbToBeSigned[],
<arg name="ppSignerCert">PCCERT_CONTEXT *</arg>
</function>

<function name="CryptEncryptMessage" ret="BOOL" convention="__stdcall">
<arg name="pEncryptPara">PCRYPT_ENCRYPT_MESSAGE_PARA</arg>
<arg name="cRecipientCert">DWORD</arg>

     PCCERT_CONTEXT rgpRecipientCert[],
     const BYTE *pbToBeEncrypted,
     DWORD cbToBeEncrypted,
     BYTE *pbEncryptedBlob,
<arg name="pcbEncryptedBlob">DWORD *</arg>
</function>

<function name="CryptDecryptMessage" ret="BOOL" convention="__stdcall">
<arg name="pDecryptPara">PCRYPT_DECRYPT_MESSAGE_PARA</arg>

     const BYTE *pbEncryptedBlob,
     DWORD cbEncryptedBlob,
     BYTE *pbDecrypted,
     DWORD *pcbDecrypted,
<arg name="ppXchgCert">PCCERT_CONTEXT *</arg>
</function>

<function name="CryptSignAndEncryptMessage" ret="BOOL" convention="__stdcall">
<arg name="pSignPara">PCRYPT_SIGN_MESSAGE_PARA</arg>
<arg name="pEncryptPara">PCRYPT_ENCRYPT_MESSAGE_PARA</arg>
<arg name="cRecipientCert">DWORD</arg>

     PCCERT_CONTEXT rgpRecipientCert[],
     const BYTE *pbToBeSignedAndEncrypted,
     DWORD cbToBeSignedAndEncrypted,
     BYTE *pbSignedAndEncryptedBlob,
<arg name="pcbSignedAndEncryptedBlob">DWORD *</arg>
</function>

<function name="CryptDecryptAndVerifyMessageSignature" ret="BOOL" convention="__stdcall">
<arg name="pDecryptPara">PCRYPT_DECRYPT_MESSAGE_PARA</arg>
<arg name="pVerifyPara">PCRYPT_VERIFY_MESSAGE_PARA</arg>
<arg name="dwSignerIndex">DWORD</arg>

     const BYTE *pbEncryptedBlob,
     DWORD cbEncryptedBlob,
     BYTE *pbDecrypted,
     DWORD *pcbDecrypted,
     PCCERT_CONTEXT *ppXchgCert,
<arg name="ppSignerCert">PCCERT_CONTEXT *</arg>
</function>
<function name="CryptDecodeMessage" ret="BOOL" convention="__stdcall">
<arg name="dwMsgTypeFlags">DWORD</arg>
<arg name="pDecryptPara">PCRYPT_DECRYPT_MESSAGE_PARA</arg>
<arg name="pVerifyPara">PCRYPT_VERIFY_MESSAGE_PARA</arg>
<arg name="dwSignerIndex">DWORD</arg>

     const BYTE *pbEncodedBlob,
     DWORD cbEncodedBlob,
     DWORD dwPrevInnerContentType,
     DWORD *pdwMsgType,
     DWORD *pdwInnerContentType,
     BYTE *pbDecoded,
     DWORD *pcbDecoded,
     PCCERT_CONTEXT *ppXchgCert,
<arg name="ppSignerCert">PCCERT_CONTEXT *</arg>
</function>

<function name="CryptHashMessage" ret="BOOL" convention="__stdcall">
<arg name="pHashPara">PCRYPT_HASH_MESSAGE_PARA</arg>
<arg name="fDetachedHash">BOOL</arg>
<arg name="cToBeHashed">DWORD</arg>

     const BYTE *rgpbToBeHashed[],
     DWORD rgcbToBeHashed[],
     BYTE *pbHashedBlob,
     DWORD *pcbHashedBlob,
     BYTE *pbComputedHash,
<arg name="pcbComputedHash">DWORD *</arg>
</function>
<function name="CryptVerifyMessageHash" ret="BOOL" convention="__stdcall">
<arg name="pHashPara">PCRYPT_HASH_MESSAGE_PARA</arg>

     BYTE *pbHashedBlob,
     DWORD cbHashedBlob,
     BYTE *pbToBeHashed,
     DWORD *pcbToBeHashed,
     BYTE *pbComputedHash,
<arg name="pcbComputedHash">DWORD *</arg>
</function>
<function name="CryptVerifyDetachedMessageHash" ret="BOOL" convention="__stdcall">
<arg name="pHashPara">PCRYPT_HASH_MESSAGE_PARA</arg>

     BYTE *pbDetachedHashBlob,
     DWORD cbDetachedHashBlob,
     DWORD cToBeHashed,
     const BYTE *rgpbToBeHashed[],
     DWORD rgcbToBeHashed[],
     BYTE *pbComputedHash,
<arg name="pcbComputedHash">DWORD *</arg>
</function>
<function name="CryptSignMessageWithKey" ret="BOOL" convention="__stdcall">
<arg name="pSignPara">PCRYPT_KEY_SIGN_MESSAGE_PARA</arg>

     const BYTE *pbToBeSigned,
     DWORD cbToBeSigned,
     BYTE *pbSignedBlob,
<arg name="pcbSignedBlob">DWORD *</arg>
</function>

<function name="CryptVerifyMessageSignatureWithKey" ret="BOOL" convention="__stdcall">
<arg name="pVerifyPara">PCRYPT_KEY_VERIFY_MESSAGE_PARA</arg>
<arg name="pPublicKeyInfo">PCERT_PUBLIC_KEY_INFO</arg>

     const BYTE *pbSignedBlob,
     DWORD cbSignedBlob,
     BYTE *pbDecoded,
<arg name="pcbDecoded">DWORD *</arg>
</function>

<function name="CertOpenSystemStoreA" ret="HCERTSTORE" convention="__stdcall">
<arg name="hProv">HCRYPTPROV_LEGACY     </arg>
<arg name="szSubsystemProtocol">LPCSTR           </arg>
</function>
<function name="CertOpenSystemStoreW" ret="HCERTSTORE" convention="__stdcall">
<arg name="hProv">HCRYPTPROV_LEGACY     </arg>
<arg name="szSubsystemProtocol">LPCWSTR           </arg>
</function>
<function name="CertAddEncodedCertificateToSystemStoreA" ret="BOOL" convention="__stdcall">
<arg name="szCertStoreName">LPCSTR           </arg>
<arg name="pbCertEncoded">const BYTE *   </arg>
<arg name="cbCertEncoded">DWORD          </arg>
</function>
<function name="CertAddEncodedCertificateToSystemStoreW" ret="BOOL" convention="__stdcall">
<arg name="szCertStoreName">LPCWSTR           </arg>
<arg name="pbCertEncoded">const BYTE *   </arg>
<arg name="cbCertEncoded">DWORD          </arg>
</function>
<struct name="_CERT_CHAIN">
<field name="cCerts">DWORD</field>
<field name="certs">PCERT_BLOB</field>
                                        
    CRYPT_KEY_PROV_INFO     keyLocatorInfo; 
} CERT_CHAIN, *PCERT_CHAIN;
<function name="FindCertsByIssuer" ret="HRESULT" convention="__stdcall">
<arg name="pCertChains">PCERT_CHAIN</arg>

     DWORD *pcbCertChains,
     DWORD *pcCertChains,        
     BYTE* pbEncodedIssuerName,   
     DWORD cbEncodedIssuerName,   
     LPCWSTR pwszPurpose,     
     DWORD dwKeySpec              
                                      
    );
<function name="CryptQueryObject" ret="BOOL" convention="__stdcall">
<arg name="dwObjectType">DWORD                   </arg>

     const void               *pvObject,
     DWORD                    dwExpectedContentTypeFlags,
     DWORD                    dwExpectedFormatTypeFlags,
     DWORD                    dwFlags,
     DWORD               *pdwMsgAndCertEncodingType,
     DWORD               *pdwContentType,
     DWORD               *pdwFormatType,
     HCERTSTORE          *phCertStore,
     HCRYPTMSG           *phMsg,
<arg name="ppvContext">const void **</arg>
</function>
<function name="CryptMemAlloc" ret="LPVOID" convention="__stdcalll">

<arg name="cbSize">ULONG</arg>
</function>

<function name="CryptMemRealloc" ret="LPVOID" convention="__stdcalll">
<arg name="pv">LPVOID</arg>
<arg name="cbSize">ULONG</arg>
</function>

<function name="CryptMemFree" ret="void" convention="__stdcalll">

<arg name="pv">LPVOID</arg>
</function>

typedef HANDLE HCRYPTASYNC, *PHCRYPTASYNC;

typedef void (__stdcall *PFN_CRYPT_ASYNC_PARAM_FREE_FUNC) (
     LPSTR pszParamOid,
<arg name="pvParam">LPVOID</arg>
</function>

<function name="CryptCreateAsyncHandle" ret="BOOL" convention="__stdcalll">
<arg name="dwFlags">DWORD</arg>
<arg name="phAsync">PHCRYPTASYNC</arg>
</function>

<function name="CryptSetAsyncParam" ret="BOOL" convention="__stdcalll">
<arg name="hAsync">HCRYPTASYNC</arg>
<arg name="pszParamOid">LPSTR</arg>
<arg name="pvParam">LPVOID</arg>
<arg name="pfnFree">PFN_CRYPT_ASYNC_PARAM_FREE_FUNC</arg>
</function>

<function name="CryptGetAsyncParam" ret="BOOL" convention="__stdcalll">
<arg name="hAsync">HCRYPTASYNC</arg>
<arg name="pszParamOid">LPSTR</arg>
<arg name="ppvParam">LPVOID*</arg>
<arg name="ppfnFree">PFN_CRYPT_ASYNC_PARAM_FREE_FUNC*</arg>
</function>

<function name="CryptCloseAsyncHandle" ret="BOOL" convention="__stdcalll">

<arg name="hAsync">HCRYPTASYNC</arg>
</function>

<struct name="_CRYPT_BLOB_ARRAY">
<field name="cBlob">DWORD</field>
<field name="rgBlob">PCRYPT_DATA_BLOB</field>
</struct>
<typedefprev id="CRYPT_BLOB_ARRAY"/>
<typedefptrprev id="PCRYPT_BLOB_ARRAY"/>

<struct name="_CRYPT_CREDENTIALS">
<field name="cbSize">DWORD</field>
<field name="pszCredentialsOid">LPCSTR</field>
<field name="pvCredentials">LPVOID</field>
</struct>
<typedefprev id="CRYPT_CREDENTIALS"/>
<typedefptrprev id="PCRYPT_CREDENTIALS"/>
<struct name="_CRYPT_PASSWORD_CREDENTIALSA">
<field name="cbSize">DWORD</field>
<field name="pszUsername">LPSTR</field>
<field name="pszPassword">LPSTR</field>
</struct>
<typedefprev id="CRYPT_PASSWORD_CREDENTIALSA"/>
<typedefptrprev id="PCRYPT_PASSWORD_CREDENTIALSA"/>
<struct name="_CRYPT_PASSWORD_CREDENTIALSW">
<field name="cbSize">DWORD</field>
<field name="pszUsername">LPWSTR</field>
<field name="pszPassword">LPWSTR</field>
</struct>
<typedefprev id="CRYPT_PASSWORD_CREDENTIALSW"/>
<typedefptrprev id="PCRYPT_PASSWORD_CREDENTIALSW"/>

typedef CRYPT_PASSWORD_CREDENTIALSA CRYPT_PASSWORD_CREDENTIALS;
typedef PCRYPT_PASSWORD_CREDENTIALSA PCRYPT_PASSWORD_CREDENTIALS;
typedef void (__stdcall *PFN_FREE_ENCODED_OBJECT_FUNC) (
     LPCSTR pszObjectOid,
     PCRYPT_BLOB_ARRAY pObject,
<arg name="pvFreeContext">LPVOID</arg>
</function>
<struct name="_CRYPTNET_URL_CACHE_PRE_FETCH_INFO">
<field name="cbSize">DWORD</field>
<field name="dwObjectType">DWORD</field>
    
    
    
    
    
    
    DWORD           dwError;
    DWORD           dwReserved;

    FILETIME        ThisUpdateTime;
    FILETIME        NextUpdateTime;
    FILETIME        PublishTime;    
} CRYPTNET_URL_CACHE_PRE_FETCH_INFO, *PCRYPTNET_URL_CACHE_PRE_FETCH_INFO;

<struct name="_CRYPTNET_URL_CACHE_FLUSH_INFO">
<field name="cbSize">DWORD</field>
    
    
    
    
    DWORD           dwExemptSeconds;

    
    
    
    FILETIME        ExpireTime;
} CRYPTNET_URL_CACHE_FLUSH_INFO, *PCRYPTNET_URL_CACHE_FLUSH_INFO;

<struct name="_CRYPTNET_URL_CACHE_RESPONSE_INFO">
<field name="cbSize">DWORD</field>
<field name="wResponseType">WORD</field>
<field name="wResponseFlags">WORD</field>
    
    FILETIME        LastModifiedTime;
    DWORD           dwMaxAge;
    LPCWSTR         pwszETag;
    DWORD           dwProxyId;
} CRYPTNET_URL_CACHE_RESPONSE_INFO, *PCRYPTNET_URL_CACHE_RESPONSE_INFO;
<struct name="_CRYPT_RETRIEVE_AUX_INFO">
<field name="cbSize">DWORD</field>
    FILETIME                            *pLastSyncTime;

    
    DWORD                               dwMaxUrlRetrievalByteCount;

    
    
    
    
    PCRYPTNET_URL_CACHE_PRE_FETCH_INFO  pPreFetchInfo;

    
    
    
    
    PCRYPTNET_URL_CACHE_FLUSH_INFO      pFlushInfo;

    
    
    
    
    PCRYPTNET_URL_CACHE_RESPONSE_INFO   *ppResponseInfo;

    
    
    LPWSTR                              pwszCacheFileNamePrefix;

    
    
    
    
    LPFILETIME                          pftCacheResync;

    
    
    
    
    BOOL                                fProxyCacheRetrieval;

    
    
    
    
    
    
    
    
    DWORD                               dwHttpStatusCode;
} CRYPT_RETRIEVE_AUX_INFO, *PCRYPT_RETRIEVE_AUX_INFO;
<function name="CryptRetrieveObjectByUrlA" ret="BOOL" convention="__stdcall">
<arg name="pszUrl">LPCSTR</arg>
<arg name="pszObjectOid">LPCSTR</arg>
<arg name="dwRetrievalFlags">DWORD</arg>
<arg name="dwTimeout">DWORD</arg>
                     
     LPVOID* ppvObject,
     HCRYPTASYNC hAsyncRetrieve,
     PCRYPT_CREDENTIALS pCredentials,
     LPVOID pvVerify,
<arg name="pAuxInfo">PCRYPT_RETRIEVE_AUX_INFO</arg>
</function>
<function name="CryptRetrieveObjectByUrlW" ret="BOOL" convention="__stdcall">
<arg name="pszUrl">LPCWSTR</arg>
<arg name="pszObjectOid">LPCSTR</arg>
<arg name="dwRetrievalFlags">DWORD</arg>
<arg name="dwTimeout">DWORD</arg>
                     
     LPVOID* ppvObject,
     HCRYPTASYNC hAsyncRetrieve,
     PCRYPT_CREDENTIALS pCredentials,
     LPVOID pvVerify,
<arg name="pAuxInfo">PCRYPT_RETRIEVE_AUX_INFO</arg>
</function>
typedef<fnptr name="PFN_CRYPT_CANCEL_RETRIEVAL" ret="BOOL" convention="__stdcall">
<arg name="dwFlags">DWORD</arg>
<arg name="pvArg">void  *</arg>
</function>
<function name="CryptInstallCancelRetrieval" ret="BOOL" convention="__stdcall">
<arg name="pfnCancel">PFN_CRYPT_CANCEL_RETRIEVAL</arg>

     const void *pvArg,
     DWORD dwFlags,
     void *pvReserved
);
<function name="CryptUninstallCancelRetrieval" ret="BOOL" convention="__stdcall">
<arg name="dwFlags">DWORD</arg>
<arg name="pvReserved">void *</arg>
</function>
<function name="CryptCancelAsyncRetrieval" ret="BOOL" convention="__stdcalll">

<arg name="hAsyncRetrieval">HCRYPTASYNC</arg>
</function>
typedef void (__stdcall *PFN_CRYPT_ASYNC_RETRIEVAL_COMPLETION_FUNC) (
     LPVOID pvCompletion,
     DWORD dwCompletionCode,
     LPCSTR pszUrl,
     LPSTR pszObjectOid,
<arg name="pvObject">LPVOID</arg>
</function>

<struct name="_CRYPT_ASYNC_RETRIEVAL_COMPLETION">
<field name="pfnCompletion">PFN_CRYPT_ASYNC_RETRIEVAL_COMPLETION_FUNC</field>
<field name="pvCompletion">LPVOID</field>
</struct>
<typedefprev id="CRYPT_ASYNC_RETRIEVAL_COMPLETION"/>
<typedefptrprev id="PCRYPT_ASYNC_RETRIEVAL_COMPLETION"/>

typedef BOOL (__stdcall *PFN_CANCEL_ASYNC_RETRIEVAL_FUNC) (
<arg name="hAsyncRetrieve">HCRYPTASYNC</arg>
</function>
<struct name="_CRYPT_URL_ARRAY">
<field name="cUrl">DWORD</field>
<field name="rgwszUrl">LPWSTR*</field>
</struct>
<typedefprev id="CRYPT_URL_ARRAY"/>
<typedefptrprev id="PCRYPT_URL_ARRAY"/>

<struct name="_CRYPT_URL_INFO">
<field name="cbSize">DWORD</field>
    
    DWORD   dwSyncDeltaTime;

    
    
    
    DWORD   cGroup;
    DWORD   *rgcGroupEntry;
} CRYPT_URL_INFO, *PCRYPT_URL_INFO;

<function name="CryptGetObjectUrl" ret="BOOL" convention="__stdcalll">
<arg name="pszUrlOid">LPCSTR</arg>
<arg name="pvPara">LPVOID</arg>
<arg name="dwFlags">DWORD</arg>
<arg name="pUrlArray">PCRYPT_URL_ARRAY</arg>
<arg name="pcbUrlArray">DWORD*</arg>
<arg name="pUrlInfo">PCRYPT_URL_INFO</arg>
<arg name="pcbUrlInfo">DWORD*</arg>
<arg name="pvReserved">LPVOID</arg>
</function>
<struct name="_CERT_CRL_CONTEXT_PAIR">
<field name="pCertContext">PCCERT_CONTEXT</field>
<field name="pCrlContext">PCCRL_CONTEXT</field>
</struct>
<typedefprev id="CERT_CRL_CONTEXT_PAIR"/>
<typedefptrprev id="PCERT_CRL_CONTEXT_PAIR"/>
typedef const CERT_CRL_CONTEXT_PAIR *PCCERT_CRL_CONTEXT_PAIR;
<struct name="_CRYPT_GET_TIME_VALID_OBJECT_EXTRA_INFO">
<field name="cbSize">DWORD</field>
    
    int                         iDeltaCrlIndicator;

    
    
    LPFILETIME                  pftCacheResync;

    
    LPFILETIME                  pLastSyncTime;

    
    
    
    LPFILETIME                  pMaxAgeTime;
} CRYPT_GET_TIME_VALID_OBJECT_EXTRA_INFO,
    *PCRYPT_GET_TIME_VALID_OBJECT_EXTRA_INFO;

<function name="CryptGetTimeValidObject" ret="BOOL" convention="__stdcall">
<arg name="pszTimeValidOid">LPCSTR</arg>
<arg name="pvPara">LPVOID</arg>
<arg name="pIssuer">PCCERT_CONTEXT</arg>
<arg name="pftValidFor">LPFILETIME</arg>
<arg name="dwFlags">DWORD</arg>
<arg name="dwTimeout">DWORD</arg>
                         
     LPVOID* ppvObject,
     PCRYPT_CREDENTIALS pCredentials,
<arg name="pExtraInfo">PCRYPT_GET_TIME_VALID_OBJECT_EXTRA_INFO</arg>
</function>
<function name="CryptFlushTimeValidObject" ret="BOOL" convention="__stdcalll">
<arg name="pszFlushTimeValidOid">LPCSTR</arg>
<arg name="pvPara">LPVOID</arg>
<arg name="pIssuer">PCCERT_CONTEXT</arg>
<arg name="dwFlags">DWORD</arg>
<arg name="pvReserved">LPVOID</arg>
</function>

<struct name="_CRYPTPROTECT_PROMPTSTRUCT">
<field name="cbSize">DWORD</field>
<field name="dwPromptFlags">DWORD</field>
<field name="hwndApp">HWND</field>
<field name="szPrompt">LPCWSTR</field>
</struct>
<typedefprev id="CRYPTPROTECT_PROMPTSTRUCT"/>
<typedefptrprev id="PCRYPTPROTECT_PROMPTSTRUCT"/>
<function name="CryptProtectData" ret="BOOL" convention="__stdcall">
<arg name="pDataIn">DATA_BLOB*     </arg>
<arg name="szDataDescr">LPCWSTR        </arg>
<arg name="pOptionalEntropy">DATA_BLOB*     </arg>
<arg name="pvReserved">PVOID          </arg>
<arg name="pPromptStruct">CRYPTPROTECT_PROMPTSTRUCT* </arg>
<arg name="dwFlags">DWORD          </arg>

                 DATA_BLOB*      pDataOut            
    );

<function name="CryptUnprotectData" ret="BOOL" convention="__stdcall">
<arg name="pDataIn">DATA_BLOB*     </arg>
             
     LPWSTR*     ppszDataDescr,       
          DATA_BLOB*      pOptionalEntropy,
          PVOID           pvReserved,
          CRYPTPROTECT_PROMPTSTRUCT*  pPromptStruct,
                  DWORD           dwFlags,
<arg name="pDataOut">DATA_BLOB*     </arg>
</function>

<function name="CryptUpdateProtectedState" ret="BOOL" convention="__stdcall">
<arg name="pOldSid">PSID           </arg>
<arg name="pwszOldPassword">LPCWSTR        </arg>
<arg name="dwFlags">DWORD          </arg>

           DWORD           *pdwSuccessCount,
           DWORD           *pdwFailureCount);

<function name="CryptProtectMemory" ret="BOOL" convention="__stdcall">
<arg name="pDataIn">LPVOID         </arg>
             
                  DWORD           cbDataIn,            
<arg name="dwFlags">DWORD          </arg>
</function>

<function name="CryptUnprotectMemory" ret="BOOL" convention="__stdcall">
<arg name="pDataIn">LPVOID         </arg>
             
                  DWORD           cbDataIn,            
<arg name="dwFlags">DWORD          </arg>
</function>

<function name="CertCreateSelfSignCertificate" ret="PCCERT_CONTEXT" convention="__stdcall">
<arg name="hCryptProvOrNCryptKey">HCRYPTPROV_OR_NCRYPT_KEY_HANDLE</arg>
<arg name="pSubjectIssuerBlob">PCERT_NAME_BLOB            </arg>
<arg name="dwFlags">DWORD                      </arg>
<arg name="pKeyProvInfo">PCRYPT_KEY_PROV_INFO       </arg>
<arg name="pSignatureAlgorithm">PCRYPT_ALGORITHM_IDENTIFIER</arg>
<arg name="pStartTime">PSYSTEMTIME                </arg>
<arg name="pEndTime">PSYSTEMTIME                </arg>
<arg name="pExtensions">PCERT_EXTENSIONS           </arg>
</function>
<function name="CryptGetKeyIdentifierProperty" ret="BOOL" convention="__stdcall">
<arg name="pKeyIdentifier">const CRYPT_HASH_BLOB *</arg>

     DWORD dwPropId,
     DWORD dwFlags,
     LPCWSTR pwszComputerName,
     void *pvReserved,
     void *pvData,
<arg name="pcbData">DWORD *</arg>
</function>
<function name="CryptSetKeyIdentifierProperty" ret="BOOL" convention="__stdcall">
<arg name="pKeyIdentifier">const CRYPT_HASH_BLOB *</arg>

     DWORD dwPropId,
     DWORD dwFlags,
     LPCWSTR pwszComputerName,
     void *pvReserved,
<arg name="pvData">const void *</arg>
</function>
typedef<fnptr name="PFN_CRYPT_ENUM_KEYID_PROP" ret="BOOL" convention="__stdcall">

     const CRYPT_HASH_BLOB *pKeyIdentifier,
     DWORD dwFlags,
     void *pvReserved,
     void *pvArg,
     DWORD cProp,
     DWORD *rgdwPropId,
     void **rgpvData,
<arg name="rgcbData">DWORD *</arg>
</function>

<function name="CryptEnumKeyIdentifierProperties" ret="BOOL" convention="__stdcall">
<arg name="pKeyIdentifier">const CRYPT_HASH_BLOB *</arg>

     DWORD dwPropId,
     DWORD dwFlags,
     LPCWSTR pwszComputerName,
     void *pvReserved,
     void *pvArg,
<arg name="pfnEnum">PFN_CRYPT_ENUM_KEYID_PROP</arg>
</function>
<function name="CryptCreateKeyIdentifierFromCSP" ret="BOOL" convention="__stdcall">
<arg name="dwCertEncodingType">DWORD</arg>
<arg name="pszPubKeyOID">LPCSTR</arg>

     const PUBLICKEYSTRUC *pPubKeyStruc,
     DWORD cbPubKeyStruc,
     DWORD dwFlags,
     void *pvReserved,
     BYTE *pbHash,
<arg name="pcbHash">DWORD *</arg>
</function>
typedef HANDLE HCERTCHAINENGINE;

<struct name="_CERT_CHAIN_ENGINE_CONFIG">

    DWORD       cbSize;
    HCERTSTORE  hRestrictedRoot;
    HCERTSTORE  hRestrictedTrust;
    HCERTSTORE  hRestrictedOther;
    DWORD       cAdditionalStore;
    HCERTSTORE* rghAdditionalStore;
    DWORD       dwFlags;
    DWORD       dwUrlRetrievalTimeout;      
    DWORD       MaximumCachedCertificates;
    DWORD       CycleDetectionModulus;

} CERT_CHAIN_ENGINE_CONFIG, *PCERT_CHAIN_ENGINE_CONFIG;

<function name="CertCreateCertificateChainEngine" ret="BOOL" convention="__stdcall">
<arg name="pConfig">PCERT_CHAIN_ENGINE_CONFIG</arg>
<arg name="phChainEngine">HCERTCHAINENGINE*</arg>
</function>
<function name="CertFreeCertificateChainEngine" ret="void" convention="__stdcalll">

<arg name="hChainEngine">HCERTCHAINENGINE</arg>
</function>

<function name="CertResyncCertificateChainEngine" ret="BOOL" convention="__stdcall">

<arg name="hChainEngine">HCERTCHAINENGINE</arg>
</function>

<struct name="_CERT_TRUST_STATUS">

    DWORD dwErrorStatus;
    DWORD dwInfoStatus;

} CERT_TRUST_STATUS, *PCERT_TRUST_STATUS;
<struct name="_CERT_REVOCATION_INFO">

    DWORD                       cbSize;
    DWORD                       dwRevocationResult;
    LPCSTR                      pszRevocationOid;
    LPVOID                      pvOidSpecificInfo;

    
    
    BOOL                        fHasFreshnessTime;
    DWORD                       dwFreshnessTime;    

    
    PCERT_REVOCATION_CRL_INFO   pCrlInfo;

} CERT_REVOCATION_INFO, *PCERT_REVOCATION_INFO;
<struct name="_CERT_TRUST_LIST_INFO">

    DWORD         cbSize;
    PCTL_ENTRY    pCtlEntry;
    PCCTL_CONTEXT pCtlContext;

} CERT_TRUST_LIST_INFO, *PCERT_TRUST_LIST_INFO;
<struct name="_CERT_CHAIN_ELEMENT">

    DWORD                 cbSize;
    PCCERT_CONTEXT        pCertContext;
    CERT_TRUST_STATUS     TrustStatus;
    PCERT_REVOCATION_INFO pRevocationInfo;

    PCERT_ENHKEY_USAGE    pIssuanceUsage;       
    PCERT_ENHKEY_USAGE    pApplicationUsage;    

    LPCWSTR               pwszExtendedErrorInfo;    
} CERT_CHAIN_ELEMENT, *PCERT_CHAIN_ELEMENT;
<struct name="_CERT_SIMPLE_CHAIN">

    DWORD                 cbSize;
    CERT_TRUST_STATUS     TrustStatus;
    DWORD                 cElement;
    PCERT_CHAIN_ELEMENT*  rgpElement;
    PCERT_TRUST_LIST_INFO pTrustListInfo;

    
    
    
    
    
    
    BOOL                   fHasRevocationFreshnessTime;
    DWORD                  dwRevocationFreshnessTime;    

} CERT_SIMPLE_CHAIN, *PCERT_SIMPLE_CHAIN;

<typedef name="PCERT_CHAIN_CONTEXT">_CERT_CHAIN_CONTEXT CERT_CHAIN_CONTEXT, *</typedef>
typedef const CERT_CHAIN_CONTEXT *PCCERT_CHAIN_CONTEXT;

<struct name="_CERT_CHAIN_CONTEXT">

    DWORD                   cbSize;
    CERT_TRUST_STATUS       TrustStatus;
    DWORD                   cChain;
    PCERT_SIMPLE_CHAIN*     rgpChain;

    
    
    DWORD                   cLowerQualityChainContext;
    PCCERT_CHAIN_CONTEXT*   rgpLowerQualityChainContext;

    
    
    
    
    
    
    BOOL                    fHasRevocationFreshnessTime;
    DWORD                   dwRevocationFreshnessTime;    

    
    DWORD                   dwCreateFlags;

    
    GUID                    ChainId;
};
<struct name="_CERT_USAGE_MATCH">

    DWORD             dwType;
    CERT_ENHKEY_USAGE Usage;

} CERT_USAGE_MATCH, *PCERT_USAGE_MATCH;

<struct name="_CTL_USAGE_MATCH">

    DWORD     dwType;
    CTL_USAGE Usage;

} CTL_USAGE_MATCH, *PCTL_USAGE_MATCH;

<struct name="_CERT_CHAIN_PARA">

    DWORD            cbSize;
    CERT_USAGE_MATCH RequestedUsage;
} CERT_CHAIN_PARA, *PCERT_CHAIN_PARA;
<function name="CertGetCertificateChain" ret="BOOL" convention="__stdcall">
<arg name="hChainEngine">HCERTCHAINENGINE</arg>
<arg name="pCertContext">PCCERT_CONTEXT</arg>
<arg name="pTime">LPFILETIME</arg>
<arg name="hAdditionalStore">HCERTSTORE</arg>
<arg name="pChainPara">PCERT_CHAIN_PARA</arg>
<arg name="dwFlags">DWORD</arg>
<arg name="pvReserved">LPVOID</arg>
<arg name="ppChainContext">PCCERT_CHAIN_CONTEXT*</arg>
</function>
<function name="CertFreeCertificateChain" ret="void" convention="__stdcall">

<arg name="pChainContext">PCCERT_CHAIN_CONTEXT</arg>
</function>
<function name="CertDuplicateCertificateChain" ret="PCCERT_CHAIN_CONTEXT" convention="__stdcall">

<arg name="pChainContext">PCCERT_CHAIN_CONTEXT</arg>
</function>
<struct name="_CRL_REVOCATION_INFO">

    PCRL_ENTRY           pCrlEntry;
    PCCRL_CONTEXT        pCrlContext;
    PCCERT_CHAIN_CONTEXT pCrlIssuerChain;

} CRL_REVOCATION_INFO, *PCRL_REVOCATION_INFO;
<function name="CertFindChainInStore" ret="PCCERT_CHAIN_CONTEXT" convention="__stdcall">
<arg name="hCertStore">HCERTSTORE</arg>
<arg name="dwCertEncodingType">DWORD</arg>
<arg name="dwFindFlags">DWORD</arg>
<arg name="dwFindType">DWORD</arg>

     const void *pvFindPara,
<arg name="pPrevChainContext">PCCERT_CHAIN_CONTEXT</arg>
</function>

typedef<fnptr name="PFN_CERT_CHAIN_FIND_BY_ISSUER_CALLBACK" ret="BOOL" convention="__stdcall">
<arg name="pCert">PCCERT_CONTEXT</arg>
<arg name="pvFindArg">void *</arg>
</function>

<struct name="_CERT_CHAIN_FIND_BY_ISSUER_PARA">
<field name="cbSize">DWORD</field>
    
    LPCSTR                                  pszUsageIdentifier;

    
    DWORD                                   dwKeySpec;

    
    
    
    
    
    DWORD                                   dwAcquirePrivateKeyFlags;

    
    
    DWORD                                   cIssuer;
    CERT_NAME_BLOB                          *rgIssuer;

    
    
    
    PFN_CERT_CHAIN_FIND_BY_ISSUER_CALLBACK pfnFindCallback;
    void                                    *pvFindArg;

} CERT_CHAIN_FIND_ISSUER_PARA, *PCERT_CHAIN_FIND_ISSUER_PARA,
    CERT_CHAIN_FIND_BY_ISSUER_PARA, *PCERT_CHAIN_FIND_BY_ISSUER_PARA;
<struct name="_CERT_CHAIN_POLICY_PARA">
<field name="cbSize">DWORD</field>
<field name="dwFlags">DWORD</field>
    void                    *pvExtraPolicyPara;     
} CERT_CHAIN_POLICY_PARA, *PCERT_CHAIN_POLICY_PARA;

<struct name="_CERT_CHAIN_POLICY_STATUS">
<field name="cbSize">DWORD</field>
<field name="dwError">DWORD</field>
<field name="lChainIndex">LONG</field>
<field name="lElementIndex">LONG</field>
    void                    *pvExtraPolicyStatus;   
} CERT_CHAIN_POLICY_STATUS, *PCERT_CHAIN_POLICY_STATUS;
<function name="CertVerifyCertificateChainPolicy" ret="BOOL" convention="__stdcall">
<arg name="pszPolicyOID">LPCSTR</arg>
<arg name="pChainContext">PCCERT_CHAIN_CONTEXT</arg>
<arg name="pPolicyPara">PCERT_CHAIN_POLICY_PARA</arg>
<arg name="pPolicyStatus">PCERT_CHAIN_POLICY_STATUS</arg>
</function>

<struct name="_AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_PARA">
<field name="cbSize">DWORD</field>
<field name="dwRegPolicySettings">DWORD</field>
<field name="pSignerInfo">PCMSG_SIGNER_INFO</field>
} AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_PARA,
    *PAUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_PARA;

<struct name="_AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_STATUS">
<field name="cbSize">DWORD</field>
<field name="fCommercial">BOOL</field>
} AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_STATUS,
    *PAUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_STATUS;

<struct name="_AUTHENTICODE_TS_EXTRA_CERT_CHAIN_POLICY_PARA">
<field name="cbSize">DWORD</field>
<field name="dwRegPolicySettings">DWORD</field>
<field name="fCommercial">BOOL</field>
} AUTHENTICODE_TS_EXTRA_CERT_CHAIN_POLICY_PARA,
    *PAUTHENTICODE_TS_EXTRA_CERT_CHAIN_POLICY_PARA;
<struct name="_HTTPSPolicyCallbackData">
    union {
        DWORD           cbStruct;       
        DWORD           cbSize;         
    };

    DWORD           dwAuthType;
    DWORD           fdwChecks;

    WCHAR           *pwszServerName; 

} HTTPSPolicyCallbackData, *PHTTPSPolicyCallbackData,
    SSL_EXTRA_CERT_CHAIN_POLICY_PARA, *PSSL_EXTRA_CERT_CHAIN_POLICY_PARA;
<function name="CryptStringToBinaryA" ret="BOOL" convention="__stdcall">
<arg name="pszString">LPCSTR</arg>
<arg name="cchString">DWORD</arg>
<arg name="dwFlags">DWORD</arg>

     BYTE *pbBinary,
     DWORD  *pcbBinary,
     DWORD *pdwSkip,
<arg name="pdwFlags">DWORD *</arg>
</function>
<function name="CryptStringToBinaryW" ret="BOOL" convention="__stdcall">
<arg name="pszString">LPCWSTR</arg>
<arg name="cchString">DWORD</arg>
<arg name="dwFlags">DWORD</arg>

     BYTE *pbBinary,
     DWORD  *pcbBinary,
     DWORD *pdwSkip,
<arg name="pdwFlags">DWORD *</arg>
</function>

<function name="CryptBinaryToStringA" ret="BOOL" convention="__stdcall">
<arg name="pbBinary">const BYTE *</arg>

     DWORD cbBinary,
     DWORD dwFlags,
     LPSTR pszString,
<arg name="pcchString">DWORD *</arg>
</function>

<function name="CryptBinaryToStringW" ret="BOOL" convention="__stdcall">
<arg name="pbBinary">const BYTE *</arg>

     DWORD cbBinary,
     DWORD dwFlags,
     LPWSTR pszString,
<arg name="pcchString">DWORD *</arg>
</function>
<struct name="_CRYPT_PKCS12_PBE_PARAMS">
<field name="iIterations">int</field>
<field name="cbSalt">ULONG</field>
}
CRYPT_PKCS12_PBE_PARAMS;
<function name="PFXImportCertStore" ret="HCERTSTORE" convention="__stdcall">
<arg name="pPFX">CRYPT_DATA_BLOB*</arg>
<arg name="szPassword">LPCWSTR</arg>
<arg name="dwFlags">DWORD  </arg>
</function>

<function name="PFXIsPFXBlob" ret="BOOL" convention="__stdcall">
<arg name="pPFX">CRYPT_DATA_BLOB*</arg>
</function>

<function name="PFXVerifyPassword" ret="BOOL" convention="__stdcall">
<arg name="pPFX">CRYPT_DATA_BLOB*</arg>
<arg name="szPassword">LPCWSTR</arg>
<arg name="dwFlags">DWORD</arg>
</function>

<function name="PFXExportCertStoreEx" ret="BOOL" convention="__stdcall">
<arg name="hStore">HCERTSTORE</arg>
<arg name="pPFX">CRYPT_DATA_BLOB*</arg>
<arg name="szPassword">LPCWSTR</arg>
<arg name="pvReserved">void*</arg>
<arg name="dwFlags">DWORD</arg>
</function>

<function name="PFXExportCertStore" ret="BOOL" convention="__stdcall">
<arg name="hStore">HCERTSTORE</arg>
<arg name="pPFX">CRYPT_DATA_BLOB*</arg>
<arg name="szPassword">LPCWSTR</arg>
<arg name="dwFlags">DWORD</arg>
</function>

typedef void *HCERT_SERVER_OCSP_RESPONSE;

<function name="CertOpenServerOcspResponse" ret="HCERT_SERVER_OCSP_RESPONSE" convention="__stdcall">
<arg name="pChainContext">PCCERT_CHAIN_CONTEXT</arg>
<arg name="dwFlags">DWORD</arg>
<arg name="pvReserved">LPVOID</arg>
</function>

<function name="CertAddRefServerOcspResponse" ret="void" convention="__stdcall">
<arg name="hServerOcspResponse">HCERT_SERVER_OCSP_RESPONSE</arg>
</function>
<function name="CertCloseServerOcspResponse" ret="void" convention="__stdcall">
<arg name="hServerOcspResponse">HCERT_SERVER_OCSP_RESPONSE</arg>
<arg name="dwFlags">DWORD</arg>
</function>
typedef struct _CERT_SERVER_OCSP_RESPONSE_CONTEXT
    CERT_SERVER_OCSP_RESPONSE_CONTEXT,
    *PCERT_SERVER_OCSP_RESPONSE_CONTEXT;
typedef const CERT_SERVER_OCSP_RESPONSE_CONTEXT
    *PCCERT_SERVER_OCSP_RESPONSE_CONTEXT;

<struct name="_CERT_SERVER_OCSP_RESPONSE_CONTEXT">

    DWORD       cbSize;
    BYTE        *pbEncodedOcspResponse;
    DWORD       cbEncodedOcspResponse;
};

<function name="CertGetServerOcspResponseContext" ret="PCCERT_SERVER_OCSP_RESPONSE_CONTEXT" convention="__stdcall">
<arg name="hServerOcspResponse">HCERT_SERVER_OCSP_RESPONSE</arg>
<arg name="dwFlags">DWORD</arg>
<arg name="pvReserved">LPVOID</arg>
</function>

<function name="CertAddRefServerOcspResponseContext" ret="void" convention="__stdcall">
<arg name="pServerOcspResponseContext">PCCERT_SERVER_OCSP_RESPONSE_CONTEXT</arg>
</function>
<function name="CertFreeServerOcspResponseContext" ret="void" convention="__stdcall">
<arg name="pServerOcspResponseContext">PCCERT_SERVER_OCSP_RESPONSE_CONTEXT</arg>
</function>



<function name="CertRetrieveLogoOrBiometricInfo" ret="BOOL" convention="__stdcall">
<arg name="pCertContext">PCCERT_CONTEXT</arg>
<arg name="lpszLogoOrBiometricType">LPCSTR</arg>
<arg name="dwRetrievalFlags">DWORD</arg>
<arg name="dwTimeout">DWORD</arg>
                             
     DWORD dwFlags,
     void *pvReserved,
     BYTE **ppbData,  
     DWORD *pcbData,
     LPWSTR *ppwszMimeType         
    );
#pragma warning(pop)
#line 1 "\\program files\\Microsoft SDKs\\Windows\\v6.0A\\Include\\winefs.h"
#pragma once
<struct name="_CERTIFICATE_BLOB">

    DWORD   dwCertEncodingType;
    DWORD   cbData;

    PBYTE    pbData;

} EFS_CERTIFICATE_BLOB, *PEFS_CERTIFICATE_BLOB;
<struct name="_EFS_HASH_BLOB">

    DWORD   cbData;

    PBYTE    pbData;

} EFS_HASH_BLOB, *PEFS_HASH_BLOB;
<struct name="_EFS_RPC_BLOB">

    DWORD   cbData;

    PBYTE    pbData;

} EFS_RPC_BLOB, *PEFS_RPC_BLOB;
<struct name="_EFS_PIN_BLOB">
    
    DWORD   cbPadding; 

    DWORD   cbData;

    PBYTE    pbData;

} EFS_PIN_BLOB, *PEFS_PIN_BLOB;

<struct name="_EFS_KEY_INFO">

    DWORD   dwVersion;
    ULONG   Entropy;
    ALG_ID  Algorithm;
    ULONG   KeyLength;
    
} EFS_KEY_INFO, *PEFS_KEY_INFO;
<struct name="_EFS_DECRYPTION_STATUS_INFO">

    DWORD   dwDecryptionError;
    DWORD   dwHashOffset;
    DWORD   cbHash;

} EFS_DECRYPTION_STATUS_INFO, *PEFS_DECRYPTION_STATUS_INFO;

<struct name="_EFS_ENCRYPTION_STATUS_INFO">

    BOOL    bHasCurrentKey;
    DWORD   dwEncryptionError;

} EFS_ENCRYPTION_STATUS_INFO, *PEFS_ENCRYPTION_STATUS_INFO;

<struct name="_ENCRYPTION_CERTIFICATE">
<field name="cbTotalLength">DWORD</field>
    SID * pUserSid;
    PEFS_CERTIFICATE_BLOB pCertBlob;
} ENCRYPTION_CERTIFICATE, *PENCRYPTION_CERTIFICATE;

<struct name="_ENCRYPTION_CERTIFICATE_HASH">
<field name="cbTotalLength">DWORD</field>
    SID * pUserSid;
    PEFS_HASH_BLOB  pHash;

    LPWSTR lpDisplayInformation;

} ENCRYPTION_CERTIFICATE_HASH, *PENCRYPTION_CERTIFICATE_HASH;

<struct name="_ENCRYPTION_CERTIFICATE_HASH_LIST">
<field name="nCert_Hash">DWORD</field>
     PENCRYPTION_CERTIFICATE_HASH * pUsers;
} ENCRYPTION_CERTIFICATE_HASH_LIST, *PENCRYPTION_CERTIFICATE_HASH_LIST;
<struct name="_ENCRYPTION_CERTIFICATE_LIST">
<field name="nUsers">DWORD</field>
     PENCRYPTION_CERTIFICATE * pUsers;
} ENCRYPTION_CERTIFICATE_LIST, *PENCRYPTION_CERTIFICATE_LIST;
<struct name="_ENCRYPTED_FILE_METADATA_SIGNATURE">

	DWORD								dwEfsAccessType;	
	PENCRYPTION_CERTIFICATE_HASH_LIST	pCertificatesAdded;
    PENCRYPTION_CERTIFICATE				pEncryptionCertificate;
    PEFS_RPC_BLOB						pEfsStreamSignature;

} ENCRYPTED_FILE_METADATA_SIGNATURE, *PENCRYPTED_FILE_METADATA_SIGNATURE;
<function name="QueryUsersOnEncryptedFile" ret="DWORD" convention="__stdcall">
<arg name="lpFileName">LPCWSTR                                </arg>
<arg name="pUsers">PENCRYPTION_CERTIFICATE_HASH_LIST      *</arg>
</function>
<function name="QueryRecoveryAgentsOnEncryptedFile" ret="DWORD" convention="__stdcall">
<arg name="lpFileName">LPCWSTR                                </arg>
<arg name="pRecoveryAgents">PENCRYPTION_CERTIFICATE_HASH_LIST      *</arg>
</function>
<function name="RemoveUsersFromEncryptedFile" ret="DWORD" convention="__stdcall">
<arg name="lpFileName">LPCWSTR                            </arg>
<arg name="pHashes">PENCRYPTION_CERTIFICATE_HASH_LIST  </arg>
</function>

<function name="AddUsersToEncryptedFile" ret="DWORD" convention="__stdcall">
<arg name="lpFileName">LPCWSTR                        </arg>
<arg name="pEncryptionCertificates">PENCRYPTION_CERTIFICATE_LIST   </arg>
</function>

<function name="SetUserFileEncryptionKey" ret="DWORD" convention="__stdcall">
<arg name="pEncryptionCertificate">PENCRYPTION_CERTIFICATE    </arg>
</function>

<function name="SetUserFileEncryptionKeyEx" ret="DWORD" convention="__stdcall">
<arg name="pEncryptionCertificate">PENCRYPTION_CERTIFICATE    </arg>
<arg name="dwCapabilities">DWORD                      </arg>
 
                    DWORD                       dwFlags,
<arg name="pvReserved">LPVOID                     </arg>
</function>
<function name="FreeEncryptionCertificateHashList" ret="void" convention="__stdcall">
<arg name="pUsers">PENCRYPTION_CERTIFICATE_HASH_LIST      </arg>
</function>

<function name="EncryptionDisable" ret="BOOL" convention="__stdcall">
<arg name="DirPath">LPCWSTR</arg>
<arg name="Disable">BOOL       </arg>
</function>
<function name="DuplicateEncryptionInfoFile" ret="DWORD" convention="__stdcall">
<arg name="SrcFileName">LPCWSTR</arg>
<arg name="DstFileName">LPCWSTR</arg>
 
                DWORD                           dwCreationDistribution, 
                DWORD                           dwAttributes, 
<arg name="lpSecurityAttributes">const LPSECURITY_ATTRIBUTES    </arg>
</function>
<function name="GetEncryptedFileMetadata" ret="DWORD" convention="__stdcall">
<arg name="lpFileName">LPCWSTR    </arg>
<arg name="pcbMetadata">PDWORD     </arg>
 
<arg name="ppbMetadata">PBYTE      *</arg>
</function>

<function name="SetEncryptedFileMetadata" ret="DWORD" convention="__stdcall">
<arg name="lpFileName">LPCWSTR                            </arg>
<arg name="pbOldMetadata">PBYTE                              </arg>
<arg name="pbNewMetadata">PBYTE                              </arg>
<arg name="pOwnerHash">PENCRYPTION_CERTIFICATE_HASH       </arg>
<arg name="dwOperation">DWORD                              </arg>
<arg name="pCertificatesAdded">PENCRYPTION_CERTIFICATE_HASH_LIST  </arg>
</function> 
    
<function name="FreeEncryptedFileMetadata" ret="void" convention="__stdcall">
<arg name="pbMetadata">PBYTE  </arg>
</function> 

#line 1 "\\program files\\Microsoft SDKs\\Windows\\v6.0A\\Include\\winscard.h"
#pragma once
#line 1 "\\program files\\Microsoft SDKs\\Windows\\v6.0A\\Include\\wtypes.h"
 
#pragma warning( disable: 4049 )  
#line 1 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\rpcndr.h"
#pragma once

    
#line 1 "\\program files\\Microsoft SDKs\\Windows\\v6.0A\\Include\\pshpack8.h"
#pragma warning(disable:4103)

#pragma pack(push,8)
#line 1 "\\program files\\Microsoft SDKs\\Windows\\v6.0A\\Include\\rpcnsip.h"
#pragma once

typedef struct
{
   RPC_NS_HANDLE        LookupContext;
   RPC_BINDING_HANDLE   ProposedHandle;
   RPC_BINDING_VECTOR * Bindings;

} RPC_IMPORT_CONTEXT_P, * PRPC_IMPORT_CONTEXT_P;

<function name="I_RpcNsGetBuffer" ret="RPC_STATUS" convention="__stdcall">
<arg name="Message">PRPC_MESSAGE</arg>
</function>

<function name="I_RpcNsSendReceive" ret="RPC_STATUS" convention="__stdcall">
<arg name="Message">PRPC_MESSAGE</arg>
<arg name="Handle">RPC_BINDING_HANDLE  *</arg>
</function>

<function name="I_RpcNsRaiseException" ret="void" convention="__stdcall">
<arg name="Message">PRPC_MESSAGE</arg>
<arg name="Status">RPC_STATUS</arg>
</function>

<function name="I_RpcReBindBuffer" ret="RPC_STATUS" convention="__stdcall">
<arg name="Message">PRPC_MESSAGE</arg>
</function>

<function name="I_NsServerBindSearch" ret="RPC_STATUS" convention="__stdcall">
<arg name="void"></arg>
</function>

<function name="I_NsClientBindSearch" ret="RPC_STATUS" convention="__stdcall">
<arg name="void"></arg>
</function>

<function name="I_NsClientBindDone" ret="void" convention="__stdcall">
<arg name="void"></arg>
</function>
#line 1 "\\program files\\Microsoft SDKs\\Windows\\v6.0A\\Include\\rpcsal.h"
#pragma once
    
typedef unsigned char byte;
typedef byte cs_byte;
typedef unsigned char boolean;
 
   
<function name="MIDL_user_allocate" ret="void  *" convention="__stdcall">
size_t size);
<function name="MIDL_user_free" ret="void" convention="__stdcall">
  void  * );

 
   
<function name="I_RpcDefaultAllocate" ret="void *" convention="__stdcall">
<arg name="bh">handle_t</arg>
<arg name="size">size_t</arg>
 void * (* RealAlloc)(size_t) );

<function name="I_RpcDefaultFree" ret="void" convention="__stdcall">
<arg name="bh">handle_t</arg>
 void *, void (*RealFree)(void *) );
typedef void  * NDR_CCONTEXT;

typedef struct
    {
    void  * pad[2];
    void  * userContext;
    }  * NDR_SCONTEXT;
typedef<fnptr name="NDR_RUNDOWN" ret="void" convention="__stdcall">
void  * context);

typedef<fnptr name="NDR_NOTIFY_ROUTINE" ret="void" convention="__stdcall">
void);
typedef<fnptr name="NDR_NOTIFY2_ROUTINE" ret="void" convention="__stdcall">
boolean flag);

<struct name="_SCONTEXT_QUEUE">
    unsigned long   NumberOfObjects;
    NDR_SCONTEXT  * ArrayOfObjects;
    } SCONTEXT_QUEUE,  * PSCONTEXT_QUEUE;

<function name="NDRCContextBinding" ret="RPC_BINDING_HANDLE" convention="__stdcall">

<arg name="CContext">NDR_CCONTEXT    </arg>
</function>

<function name="NDRCContextMarshall" ret="void" convention="__stdcall">
<arg name="CContext">NDR_CCONTEXT   </arg>
<arg name="pBuff">void  *</arg>
</function>

<function name="NDRCContextUnmarshall" ret="void" convention="__stdcall">
<arg name="pCContext">NDR_CCONTEXT        *  </arg>
<arg name="hBinding">RPC_BINDING_HANDLE     </arg>
<arg name="pBuff">void                *  </arg>
<arg name="DataRepresentation">unsigned long          </arg>
</function>

<function name="NDRCContextUnmarshall2" ret="void" convention="__stdcall">
<arg name="pCContext">NDR_CCONTEXT        *  </arg>
<arg name="hBinding">RPC_BINDING_HANDLE     </arg>
<arg name="pBuff">void                *  </arg>
<arg name="DataRepresentation">unsigned long          </arg>
</function>

<function name="NDRSContextMarshall" ret="void" convention="__stdcall">
<arg name="CContext">NDR_SCONTEXT   </arg>
<arg name="pBuff">void          *</arg>
<arg name="userRunDownIn">NDR_RUNDOWN    </arg>
</function>

<function name="NDRSContextUnmarshall" ret="NDR_SCONTEXT" convention="__stdcall">
<arg name="pBuff">void          *</arg>
<arg name="DataRepresentation">unsigned long  </arg>
</function>

<function name="NDRSContextMarshallEx" ret="void" convention="__stdcall">
<arg name="BindingHandle">RPC_BINDING_HANDLE </arg>
<arg name="CContext">NDR_SCONTEXT       </arg>
<arg name="pBuff">void              *</arg>
<arg name="userRunDownIn">NDR_RUNDOWN        </arg>
</function>

<function name="NDRSContextMarshall2" ret="void" convention="__stdcall">
<arg name="BindingHandle">RPC_BINDING_HANDLE </arg>
<arg name="CContext">NDR_SCONTEXT       </arg>
<arg name="pBuff">void              *</arg>
<arg name="userRunDownIn">NDR_RUNDOWN        </arg>
<arg name="CtxGuard">void              *</arg>
<arg name="Flags">unsigned long       </arg>
</function>

<function name="NDRSContextUnmarshallEx" ret="NDR_SCONTEXT" convention="__stdcall">
<arg name="BindingHandle">RPC_BINDING_HANDLE </arg>
<arg name="pBuff">void              *</arg>
<arg name="DataRepresentation">unsigned long      </arg>
</function>

<function name="NDRSContextUnmarshall2" ret="NDR_SCONTEXT" convention="__stdcall">
<arg name="BindingHandle">RPC_BINDING_HANDLE </arg>
<arg name="pBuff">void              *</arg>
<arg name="DataRepresentation">unsigned long      </arg>
<arg name="CtxGuard">void              *</arg>
<arg name="Flags">unsigned long       </arg>
</function>

<function name="RpcSsDestroyClientContext" ret="void" convention="__stdcall">

<arg name="ContextHandle">void  *  *</arg>
</function>

typedef unsigned long error_status_t;

struct _MIDL_STUB_MESSAGE;
struct _MIDL_STUB_DESC;
struct _FULL_PTR_XLAT_TABLES;

typedef unsigned char  *    RPC_BUFPTR;
typedef unsigned long       RPC_LENGTH;
typedef<fnptr name="EXPR_EVAL" ret="void" convention="__stdcall">
 struct _MIDL_STUB_MESSAGE  * );

typedef const unsigned char  * PFORMAT_STRING;

typedef struct
    {
    long              Dimension;

    
    unsigned long  *  BufferConformanceMark;
    unsigned long  *  BufferVarianceMark;

    
    unsigned long  *  MaxCountArray;
    unsigned long  *  OffsetArray;
    unsigned long  *  ActualCountArray;
    } ARRAY_INFO,  *PARRAY_INFO;
<typedef name="PNDR_ASYNC_MESSAGE">_NDR_ASYNC_MESSAGE *</typedef>
<typedef name="PNDR_CORRELATION_INFO">_NDR_CORRELATION_INFO *</typedef>
typedef const unsigned char  * PFORMAT_STRING;
<typedef name="PMIDL_SYNTAX_INFO">_MIDL_SYNTAX_INFO MIDL_SYNTAX_INFO, *</typedef>

struct NDR_ALLOC_ALL_NODES_CONTEXT;
struct NDR_POINTER_QUEUE_STATE;
struct _NDR_PROC_CONTEXT;

<struct name="_MIDL_STUB_MESSAGE">
    
    PRPC_MESSAGE            RpcMsg;

    
    unsigned char       *   Buffer;

    
    unsigned char       *   BufferStart;
    unsigned char       *   BufferEnd;

    

    unsigned char       *   BufferMark;

    
    unsigned long           BufferLength;

    
    unsigned long           MemorySize;

    
    unsigned char       *   Memory;

    
    unsigned char           IsClient;
    unsigned char           Pad;
    unsigned short          uFlags2;

    
    int                     ReuseBuffer;

    
    struct NDR_ALLOC_ALL_NODES_CONTEXT *pAllocAllNodesContext;
    struct NDR_POINTER_QUEUE_STATE     *pPointerQueueState;

    
    
    int                     IgnoreEmbeddedPointers;

    
    unsigned char       *   PointerBufferMark;

    
    unsigned char           CorrDespIncrement;

    unsigned char           uFlags;
    unsigned short          UniquePtrCount;

    
    ULONG_PTR               MaxCount;

    
    unsigned long           Offset;

    
    unsigned long           ActualCount;

    
    void  *             ( __stdcall * pfnAllocate)( size_t );
<fnptr name="pfnFree" ret="void" convention="__stdcall">
void  *);

    
    unsigned char       *   StackTop;

    
    unsigned char       *   pPresentedType;
    unsigned char       *   pTransmitType;

    
    handle_t                SavedHandle;

    
    const struct _MIDL_STUB_DESC  * StubDesc;

    
    struct _FULL_PTR_XLAT_TABLES  * FullPtrXlatTables;
    unsigned long                   FullPtrRefId;

    unsigned long                   PointerLength;

    int                             fInDontFree       :1;
    int                             fDontCallFreeInst :1;
    int                             fInOnlyParam      :1;
    int                             fHasReturn        :1;
    int                             fHasExtensions    :1;
    int                             fHasNewCorrDesc   :1;
    int                             fIsIn             :1;
    int                             fIsOut            :1;
    int                             fIsOicf           :1;
    int                             fBufferValid      :1;
    int                             fHasMemoryValidateCallback: 1;
    int                             fInFree             :1;
    int                             fNeedMCCP         :1;
    int                             fUnused           :3;
    int                             fUnused2          :16;
    unsigned long                   dwDestContext;
    void  *                         pvDestContext;

    NDR_SCONTEXT *                  SavedContextHandles;

    long                            ParamNumber;

    struct IRpcChannelBuffer    *   pRpcChannelBuffer;

    PARRAY_INFO                     pArrayInfo;
    unsigned long           *       SizePtrCountArray;
    unsigned long           *       SizePtrOffsetArray;
    unsigned long           *       SizePtrLengthArray;

    
    void                    *       pArgQueue;

    unsigned long                   dwStubPhase;

    void                    *       LowStackMark;

    
    PNDR_ASYNC_MESSAGE              pAsyncMsg;
    PNDR_CORRELATION_INFO           pCorrInfo;
    unsigned char *                 pCorrMemory;

    void *                          pMemoryList;

    
    

    INT_PTR                         pCSInfo;

    unsigned char *                 ConformanceMark;
    unsigned char *                 VarianceMark;

    INT_PTR                         Unused;
    struct _NDR_PROC_CONTEXT *      pContext;

    
    void *                             ContextHandleHash;
    void *                             pUserMarshalList;
    INT_PTR                         Reserved51_3;
    INT_PTR                         Reserved51_4;
    INT_PTR                         Reserved51_5;
    

    } MIDL_STUB_MESSAGE,  *PMIDL_STUB_MESSAGE;
<typedef name="PMIDL_STUB_MESSAGE">_MIDL_STUB_MESSAGE MIDL_STUB_MESSAGE,   *</typedef>

typedef void  *
        ( __stdcall * GENERIC_BINDING_ROUTINE)
        (void  *);
typedef void
        ( __stdcall * GENERIC_UNBIND_ROUTINE)
        (void  *, unsigned char  *);

<struct name="_GENERIC_BINDING_ROUTINE_PAIR">
<field name="pfnBind">GENERIC_BINDING_ROUTINE</field>
<field name="pfnUnbind">GENERIC_UNBIND_ROUTINE</field>
</struct>
<typedefprev id="GENERIC_BINDING_ROUTINE_PAIR"/>
<typedefptrprev id="PGENERIC_BINDING_ROUTINE_PAIR"/>

<struct name="__GENERIC_BINDING_INFO">
    void  *            pObj;
    unsigned int                Size;
    GENERIC_BINDING_ROUTINE     pfnBind;
    GENERIC_UNBIND_ROUTINE      pfnUnbind;
    } GENERIC_BINDING_INFO,  *PGENERIC_BINDING_INFO;

typedef void ( __stdcall * XMIT_HELPER_ROUTINE)
    ( PMIDL_STUB_MESSAGE );

<struct name="_XMIT_ROUTINE_QUINTUPLE">
<field name="pfnTranslateToXmit">XMIT_HELPER_ROUTINE</field>
<field name="pfnTranslateFromXmit">XMIT_HELPER_ROUTINE</field>
<field name="pfnFreeXmit">XMIT_HELPER_ROUTINE</field>
<field name="pfnFreeInst">XMIT_HELPER_ROUTINE</field>
</struct>
<typedefprev id="XMIT_ROUTINE_QUINTUPLE"/>
<typedefptrprev id="PXMIT_ROUTINE_QUINTUPLE"/>

typedef unsigned long
( __stdcall * USER_MARSHAL_SIZING_ROUTINE)
    (unsigned long  *,
     unsigned long,
     void  * );

typedef unsigned char  *
( __stdcall * USER_MARSHAL_MARSHALLING_ROUTINE)
    (unsigned long  *,
     unsigned char  * ,
     void  * );

typedef unsigned char  *
( __stdcall * USER_MARSHAL_UNMARSHALLING_ROUTINE)
    (unsigned long  *,
     unsigned char  *,
     void  * );

typedef void ( __stdcall * USER_MARSHAL_FREEING_ROUTINE)
    (unsigned long  *,
     void  * );

<struct name="_USER_MARSHAL_ROUTINE_QUADRUPLE">
<field name="pfnBufferSize">USER_MARSHAL_SIZING_ROUTINE</field>
<field name="pfnMarshall">USER_MARSHAL_MARSHALLING_ROUTINE</field>
<field name="pfnUnmarshall">USER_MARSHAL_UNMARSHALLING_ROUTINE</field>
<field name="pfnFree">USER_MARSHAL_FREEING_ROUTINE</field>
<field name="USER_MARSHAL_ROUTINE_QUADRUPLE">}</field>
typedef enum _USER_MARSHAL_CB_TYPE
{
    USER_MARSHAL_CB_BUFFER_SIZE,
    USER_MARSHAL_CB_MARSHALL,
    USER_MARSHAL_CB_UNMARSHALL,
    USER_MARSHAL_CB_FREE
} USER_MARSHAL_CB_TYPE;

<struct name="_USER_MARSHAL_CB">
    unsigned long           Flags;
    PMIDL_STUB_MESSAGE      pStubMsg;
    PFORMAT_STRING          pReserve;
    unsigned long           Signature;
    USER_MARSHAL_CB_TYPE    CBType;
    PFORMAT_STRING          pFormat;
    PFORMAT_STRING          pTypeFormat;
} USER_MARSHAL_CB;
<struct name="_MALLOC_FREE_STRUCT">
    void  *     ( __stdcall * pfnAllocate)(size_t);
<fnptr name="pfnFree" ret="void" convention="__stdcall">
void  *);
    } MALLOC_FREE_STRUCT;

<struct name="_COMM_FAULT_OFFSETS">
<field name="CommOffset">short</field>
<field name="FaultOffset">short</field>
<field name="COMM_FAULT_OFFSETS">}</field>
typedef enum _IDL_CS_CONVERT
    {
    IDL_CS_NO_CONVERT,
    IDL_CS_IN_PLACE_CONVERT,
    IDL_CS_NEW_BUFFER_CONVERT
    } IDL_CS_CONVERT;

typedef void
( __stdcall * CS_TYPE_NET_SIZE_ROUTINE)
    (RPC_BINDING_HANDLE     hBinding,
     unsigned long          ulNetworkCodeSet,
     unsigned long          ulLocalBufferSize,
     IDL_CS_CONVERT     *   conversionType,
     unsigned long      *   pulNetworkBufferSize,
     error_status_t     *   pStatus);

typedef void
( __stdcall * CS_TYPE_LOCAL_SIZE_ROUTINE)
    (RPC_BINDING_HANDLE     hBinding,
     unsigned long          ulNetworkCodeSet,
     unsigned long          ulNetworkBufferSize,
     IDL_CS_CONVERT     *   conversionType,
     unsigned long      *   pulLocalBufferSize,
     error_status_t     *   pStatus);

typedef void
( __stdcall * CS_TYPE_TO_NETCS_ROUTINE)
    (RPC_BINDING_HANDLE     hBinding,
     unsigned long          ulNetworkCodeSet,
     void               *   pLocalData,
     unsigned long          ulLocalDataLength,
     byte               *   pNetworkData,
     unsigned long      *   pulNetworkDataLength,
     error_status_t     *   pStatus);

typedef void
( __stdcall * CS_TYPE_FROM_NETCS_ROUTINE)
    (RPC_BINDING_HANDLE     hBinding,
     unsigned long          ulNetworkCodeSet,
     byte               *   pNetworkData,
     unsigned long          ulNetworkDataLength,
     unsigned long          ulLocalBufferSize,
     void               *   pLocalData,
     unsigned long      *   pulLocalDataLength,
     error_status_t     *   pStatus);

typedef void
( __stdcall * CS_TAG_GETTING_ROUTINE)
    (RPC_BINDING_HANDLE     hBinding,
     int                    fServerSide,
     unsigned long      *   pulSendingTag,
     unsigned long      *   pulDesiredReceivingTag,
     unsigned long      *   pulReceivingTag,
     error_status_t     *   pStatus);

<function name="RpcCsGetTags" ret="void" convention="__stdcall">
<arg name="hBinding">RPC_BINDING_HANDLE    </arg>
<arg name="fServerSide">int                   </arg>
<arg name="pulSendingTag">unsigned long      *  </arg>
<arg name="pulDesiredReceivingTag">unsigned long      *  </arg>
<arg name="pulReceivingTag">unsigned long      *  </arg>
<arg name="pStatus">error_status_t     *  </arg>
</function>

<struct name="_NDR_CS_SIZE_CONVERT_ROUTINES">
<field name="pfnNetSize">CS_TYPE_NET_SIZE_ROUTINE</field>
<field name="pfnToNetCs">CS_TYPE_TO_NETCS_ROUTINE</field>
<field name="pfnLocalSize">CS_TYPE_LOCAL_SIZE_ROUTINE</field>
<field name="pfnFromNetCs">CS_TYPE_FROM_NETCS_ROUTINE</field>
<field name="NDR_CS_SIZE_CONVERT_ROUTINES">}</field>
<struct name="_NDR_CS_ROUTINES">
    NDR_CS_SIZE_CONVERT_ROUTINES   *pSizeConvertRoutines;
    CS_TAG_GETTING_ROUTINE         *pTagGettingRoutines;
    } NDR_CS_ROUTINES;

<struct name="_NDR_EXPR_DESC">
    const unsigned short * pOffset;
    PFORMAT_STRING  pFormatExpr;
} NDR_EXPR_DESC;

<struct name="_MIDL_STUB_DESC">
    void  *    RpcInterfaceInformation;

    void  *    ( __stdcall * pfnAllocate)(size_t);
<fnptr name="pfnFree" ret="void" convention="__stdcall">
void  *);

    union
        {
        handle_t  *             pAutoHandle;
        handle_t  *             pPrimitiveHandle;
        PGENERIC_BINDING_INFO   pGenericBindingInfo;
        } IMPLICIT_HANDLE_INFO;

    const NDR_RUNDOWN  *                    apfnNdrRundownRoutines;
    const GENERIC_BINDING_ROUTINE_PAIR  *   aGenericBindingRoutinePairs;
    const EXPR_EVAL  *                      apfnExprEval;
    const XMIT_ROUTINE_QUINTUPLE  *         aXmitQuintuple;

    const unsigned char  *                  pFormatTypes;

    int                                     fCheckBounds;

    
    unsigned long                           Version;

    MALLOC_FREE_STRUCT  *                   pMallocFreeStruct;

    long                                    MIDLVersion;

    const COMM_FAULT_OFFSETS  *    CommFaultOffsets;

    
    const USER_MARSHAL_ROUTINE_QUADRUPLE  * aUserMarshalQuadruple;

    
    const NDR_NOTIFY_ROUTINE  *             NotifyRoutineTable;

    
    ULONG_PTR                               mFlags;

    
    const NDR_CS_ROUTINES *                 CsRoutineTables;

    void *                                  ProxyServerInfo;
    const NDR_EXPR_DESC *               pExprInfo;

    

    } MIDL_STUB_DESC;
typedef const MIDL_STUB_DESC  * PMIDL_STUB_DESC;

typedef void  * PMIDL_XMIT_TYPE;

#pragma warning(push)
#pragma warning( disable:4200 )
<struct name="_MIDL_FORMAT_STRING">
<field name="Pad">short</field>
    unsigned char       Format[];
    } MIDL_FORMAT_STRING;
#pragma warning(pop)

typedef<fnptr name="STUB_THUNK" ret="void" convention="__stdcall">
 PMIDL_STUB_MESSAGE );
typedef<fnptr name="SERVER_ROUTINE" ret="long" convention="__stdcall">
);

<struct name="_MIDL_SERVER_INFO_">
<field name="pStubDesc">PMIDL_STUB_DESC</field>
    const SERVER_ROUTINE     *          DispatchTable;
    PFORMAT_STRING                      ProcString;
    const unsigned short *              FmtStringOffset;
    const STUB_THUNK *                  ThunkTable;
    PRPC_SYNTAX_IDENTIFIER              pTransferSyntax;
    ULONG_PTR                           nCount;
    PMIDL_SYNTAX_INFO                   pSyntaxInfo;
    } MIDL_SERVER_INFO, *PMIDL_SERVER_INFO;

<struct name="_MIDL_STUBLESS_PROXY_INFO">
<field name="pStubDesc">PMIDL_STUB_DESC</field>
<field name="ProcFormatString">PFORMAT_STRING</field>
    const unsigned short            *   FormatStringOffset;
    PRPC_SYNTAX_IDENTIFIER              pTransferSyntax;
    ULONG_PTR                           nCount;
    PMIDL_SYNTAX_INFO                   pSyntaxInfo;
    } MIDL_STUBLESS_PROXY_INFO;

typedef MIDL_STUBLESS_PROXY_INFO  * PMIDL_STUBLESS_PROXY_INFO;

<struct name="_MIDL_SYNTAX_INFO">
RPC_SYNTAX_IDENTIFIER               TransferSyntax;
RPC_DISPATCH_TABLE *                DispatchTable;
PFORMAT_STRING                      ProcString;
const unsigned short *              FmtStringOffset;
PFORMAT_STRING                      TypeString;
const void           *              aUserMarshalQuadruple;
ULONG_PTR                           pReserved1;
ULONG_PTR                           pReserved2;
} MIDL_SYNTAX_INFO, *PMIDL_SYNTAX_INFO;

typedef unsigned short * PARAM_OFFSETTABLE, *PPARAM_OFFSETTABLE;

typedef union _CLIENT_CALL_RETURN
    {
    void  *         Pointer;
    LONG_PTR        Simple;
    } CLIENT_CALL_RETURN;
typedef enum
        {
        XLAT_SERVER = 1,
        XLAT_CLIENT
        } XLAT_SIDE;

<struct name="_FULL_PTR_XLAT_TABLES">
    void * RefIdToPointer;
    void * PointerToRefId;
    unsigned long           NextRefId;   
    XLAT_SIDE               XlatSide;
} FULL_PTR_XLAT_TABLES, *PFULL_PTR_XLAT_TABLES;
<function name="NdrClientGetSupportedSyntaxes" ret="RPC_STATUS" convention="__stdcall">
<arg name="pInf">RPC_CLIENT_INTERFACE *</arg>
<arg name="pCount">unsigned long       *</arg>

     MIDL_SYNTAX_INFO   ** pArr );
<function name="NdrServerGetSupportedSyntaxes" ret="RPC_STATUS" convention="__stdcall">
<arg name="pInf">RPC_SERVER_INTERFACE *</arg>
<arg name="pCount">unsigned long       *</arg>
<arg name="pArr">MIDL_SYNTAX_INFO   **</arg>
<arg name="pPreferSyntaxIndex">unsigned long       *</arg>
</function>
<function name="NdrSimpleTypeMarshall" ret="void" convention="__stdcall">
<arg name="pStubMsg">PMIDL_STUB_MESSAGE     </arg>
<arg name="pMemory">unsigned char  *       </arg>
<arg name="FormatChar">unsigned char          </arg>
</function>

<function name="NdrPointerMarshall" ret="unsigned char  *" convention="__stdcall">
<arg name="pStubMsg">PMIDL_STUB_MESSAGE     </arg>
<arg name="pMemory">unsigned char  *       </arg>
<arg name="pFormat">PFORMAT_STRING         </arg>
</function>

<function name="NdrCsArrayMarshall" ret="unsigned char  *" convention="__stdcall">
<arg name="pStubMsg">PMIDL_STUB_MESSAGE     </arg>
<arg name="pMemory">unsigned char  *       </arg>
<arg name="pFormat">PFORMAT_STRING         </arg>
</function>

<function name="NdrCsTagMarshall" ret="unsigned char  *" convention="__stdcall">
<arg name="pStubMsg">PMIDL_STUB_MESSAGE     </arg>
<arg name="pMemory">unsigned char  *       </arg>
<arg name="pFormat">PFORMAT_STRING         </arg>
</function>
<function name="NdrSimpleStructMarshall" ret="unsigned char  *" convention="__stdcall">
<arg name="pStubMsg">PMIDL_STUB_MESSAGE     </arg>
<arg name="pMemory">unsigned char  *       </arg>
<arg name="pFormat">PFORMAT_STRING         </arg>
</function>

<function name="NdrConformantStructMarshall" ret="unsigned char  *" convention="__stdcall">
<arg name="pStubMsg">PMIDL_STUB_MESSAGE     </arg>
<arg name="pMemory">unsigned char  *       </arg>
<arg name="pFormat">PFORMAT_STRING         </arg>
</function>

<function name="NdrConformantVaryingStructMarshall" ret="unsigned char  *" convention="__stdcall">
<arg name="pStubMsg">PMIDL_STUB_MESSAGE     </arg>
<arg name="pMemory">unsigned char  *       </arg>
<arg name="pFormat">PFORMAT_STRING         </arg>
</function>

<function name="NdrComplexStructMarshall" ret="unsigned char  *" convention="__stdcall">
<arg name="pStubMsg">PMIDL_STUB_MESSAGE     </arg>
<arg name="pMemory">unsigned char  *       </arg>
<arg name="pFormat">PFORMAT_STRING         </arg>
</function>
<function name="NdrFixedArrayMarshall" ret="unsigned char  *" convention="__stdcall">
<arg name="pStubMsg">PMIDL_STUB_MESSAGE     </arg>
<arg name="pMemory">unsigned char  *       </arg>
<arg name="pFormat">PFORMAT_STRING         </arg>
</function>

<function name="NdrConformantArrayMarshall" ret="unsigned char  *" convention="__stdcall">
<arg name="pStubMsg">PMIDL_STUB_MESSAGE     </arg>
<arg name="pMemory">unsigned char  *       </arg>
<arg name="pFormat">PFORMAT_STRING         </arg>
</function>

<function name="NdrConformantVaryingArrayMarshall" ret="unsigned char  *" convention="__stdcall">
<arg name="pStubMsg">PMIDL_STUB_MESSAGE     </arg>
<arg name="pMemory">unsigned char  *       </arg>
<arg name="pFormat">PFORMAT_STRING         </arg>
</function>

<function name="NdrVaryingArrayMarshall" ret="unsigned char  *" convention="__stdcall">
<arg name="pStubMsg">PMIDL_STUB_MESSAGE     </arg>
<arg name="pMemory">unsigned char  *       </arg>
<arg name="pFormat">PFORMAT_STRING         </arg>
</function>

<function name="NdrComplexArrayMarshall" ret="unsigned char  *" convention="__stdcall">
<arg name="pStubMsg">PMIDL_STUB_MESSAGE     </arg>
<arg name="pMemory">unsigned char  *       </arg>
<arg name="pFormat">PFORMAT_STRING         </arg>
</function>
<function name="NdrNonConformantStringMarshall" ret="unsigned char  *" convention="__stdcall">
<arg name="pStubMsg">PMIDL_STUB_MESSAGE     </arg>
<arg name="pMemory">unsigned char  *       </arg>
<arg name="pFormat">PFORMAT_STRING         </arg>
</function>

<function name="NdrConformantStringMarshall" ret="unsigned char  *" convention="__stdcall">
<arg name="pStubMsg">PMIDL_STUB_MESSAGE     </arg>
<arg name="pMemory">unsigned char  *       </arg>
<arg name="pFormat">PFORMAT_STRING         </arg>
</function>
<function name="NdrEncapsulatedUnionMarshall" ret="unsigned char  *" convention="__stdcall">
<arg name="pStubMsg">PMIDL_STUB_MESSAGE     </arg>
<arg name="pMemory">unsigned char  *       </arg>
<arg name="pFormat">PFORMAT_STRING         </arg>
</function>

<function name="NdrNonEncapsulatedUnionMarshall" ret="unsigned char  *" convention="__stdcall">
<arg name="pStubMsg">PMIDL_STUB_MESSAGE     </arg>
<arg name="pMemory">unsigned char  *       </arg>
<arg name="pFormat">PFORMAT_STRING         </arg>
</function>
<function name="NdrByteCountPointerMarshall" ret="unsigned char  *" convention="__stdcall">
<arg name="pStubMsg">PMIDL_STUB_MESSAGE     </arg>
<arg name="pMemory">unsigned char  *       </arg>
<arg name="pFormat">PFORMAT_STRING         </arg>
</function>
<function name="NdrXmitOrRepAsMarshall" ret="unsigned char  *" convention="__stdcall">
<arg name="pStubMsg">PMIDL_STUB_MESSAGE     </arg>
<arg name="pMemory">unsigned char  *       </arg>
<arg name="pFormat">PFORMAT_STRING         </arg>
</function>
<function name="NdrUserMarshalMarshall" ret="unsigned char  *" convention="__stdcall">
<arg name="pStubMsg">PMIDL_STUB_MESSAGE     </arg>
<arg name="pMemory">unsigned char  *       </arg>
<arg name="pFormat">PFORMAT_STRING         </arg>
</function>
<function name="NdrInterfacePointerMarshall" ret="unsigned char  *" convention="__stdcall">
<arg name="pStubMsg">PMIDL_STUB_MESSAGE     </arg>
<arg name="pMemory">unsigned char  *       </arg>
<arg name="pFormat">PFORMAT_STRING         </arg>
</function>
<function name="NdrClientContextMarshall" ret="void" convention="__stdcall">
<arg name="pStubMsg">PMIDL_STUB_MESSAGE     </arg>
<arg name="ContextHandle">NDR_CCONTEXT           </arg>
<arg name="fCheck">int                    </arg>
</function>

<function name="NdrServerContextMarshall" ret="void" convention="__stdcall">
<arg name="pStubMsg">PMIDL_STUB_MESSAGE     </arg>
<arg name="ContextHandle">NDR_SCONTEXT           </arg>
<arg name="RundownRoutine">NDR_RUNDOWN            </arg>
</function>

<function name="NdrServerContextNewMarshall" ret="void" convention="__stdcall">
<arg name="pStubMsg">PMIDL_STUB_MESSAGE     </arg>
<arg name="ContextHandle">NDR_SCONTEXT           </arg>
<arg name="RundownRoutine">NDR_RUNDOWN            </arg>
<arg name="pFormat">PFORMAT_STRING         </arg>
</function>
<function name="NdrSimpleTypeUnmarshall" ret="void" convention="__stdcall">
<arg name="pStubMsg">PMIDL_STUB_MESSAGE     </arg>
<arg name="pMemory">unsigned char  *       </arg>
<arg name="FormatChar">unsigned char          </arg>
</function>

<function name="NdrCsArrayUnmarshall" ret="unsigned char * __stdcall" convention="__stdcall">
<arg name="pStubMsg">PMIDL_STUB_MESSAGE     </arg>
<arg name="ppMemory">unsigned char **       </arg>
<arg name="pFormat">PFORMAT_STRING         </arg>
<arg name="fMustAlloc">unsigned char          </arg>
</function>

<function name="NdrCsTagUnmarshall" ret="unsigned char * __stdcall" convention="__stdcall">
<arg name="pStubMsg">PMIDL_STUB_MESSAGE     </arg>
<arg name="ppMemory">unsigned char **       </arg>
<arg name="pFormat">PFORMAT_STRING         </arg>
<arg name="fMustAlloc">unsigned char          </arg>
</function>

<function name="NdrRangeUnmarshall" ret="unsigned char *" convention="__stdcall">
<arg name="pStubMsg">PMIDL_STUB_MESSAGE     </arg>
<arg name="ppMemory">unsigned char **       </arg>
<arg name="pFormat">PFORMAT_STRING         </arg>
<arg name="fMustAlloc">unsigned char          </arg>
</function>

<function name="NdrCorrelationInitialize" ret="void" convention="__stdcall">
<arg name="pStubMsg">PMIDL_STUB_MESSAGE     </arg>
<arg name="pMemory">void  *                </arg>
<arg name="CacheSize">unsigned long          </arg>
<arg name="flags">unsigned long          </arg>
</function>

<function name="NdrCorrelationPass" ret="void" convention="__stdcall">
<arg name="pStubMsg">PMIDL_STUB_MESSAGE     </arg>
</function>

<function name="NdrCorrelationFree" ret="void" convention="__stdcall">
<arg name="pStubMsg">PMIDL_STUB_MESSAGE     </arg>
</function>

<function name="NdrPointerUnmarshall" ret="unsigned char  *" convention="__stdcall">
<arg name="pStubMsg">PMIDL_STUB_MESSAGE     </arg>
<arg name="ppMemory">unsigned char  *  *    </arg>
<arg name="pFormat">PFORMAT_STRING         </arg>
<arg name="fMustAlloc">unsigned char          </arg>
</function>
<function name="NdrSimpleStructUnmarshall" ret="unsigned char  *" convention="__stdcall">
<arg name="pStubMsg">PMIDL_STUB_MESSAGE     </arg>
<arg name="ppMemory">unsigned char  *  *    </arg>
<arg name="pFormat">PFORMAT_STRING         </arg>
<arg name="fMustAlloc">unsigned char          </arg>
</function>

<function name="NdrConformantStructUnmarshall" ret="unsigned char  *" convention="__stdcall">
<arg name="pStubMsg">PMIDL_STUB_MESSAGE     </arg>
<arg name="ppMemory">unsigned char  *  *    </arg>
<arg name="pFormat">PFORMAT_STRING         </arg>
<arg name="fMustAlloc">unsigned char          </arg>
</function>

<function name="NdrConformantVaryingStructUnmarshall" ret="unsigned char  *" convention="__stdcall">
<arg name="pStubMsg">PMIDL_STUB_MESSAGE     </arg>
<arg name="ppMemory">unsigned char  *  *    </arg>
<arg name="pFormat">PFORMAT_STRING         </arg>
<arg name="fMustAlloc">unsigned char          </arg>
</function>

<function name="NdrComplexStructUnmarshall" ret="unsigned char  *" convention="__stdcall">
<arg name="pStubMsg">PMIDL_STUB_MESSAGE     </arg>
<arg name="ppMemory">unsigned char  *  *    </arg>
<arg name="pFormat">PFORMAT_STRING         </arg>
<arg name="fMustAlloc">unsigned char          </arg>
</function>
<function name="NdrFixedArrayUnmarshall" ret="unsigned char  *" convention="__stdcall">
<arg name="pStubMsg">PMIDL_STUB_MESSAGE     </arg>
<arg name="ppMemory">unsigned char  *  *    </arg>
<arg name="pFormat">PFORMAT_STRING         </arg>
<arg name="fMustAlloc">unsigned char          </arg>
</function>

<function name="NdrConformantArrayUnmarshall" ret="unsigned char  *" convention="__stdcall">
<arg name="pStubMsg">PMIDL_STUB_MESSAGE     </arg>
<arg name="ppMemory">unsigned char  *  *    </arg>
<arg name="pFormat">PFORMAT_STRING         </arg>
<arg name="fMustAlloc">unsigned char          </arg>
</function>

<function name="NdrConformantVaryingArrayUnmarshall" ret="unsigned char  *" convention="__stdcall">
<arg name="pStubMsg">PMIDL_STUB_MESSAGE     </arg>
<arg name="ppMemory">unsigned char  *  *    </arg>
<arg name="pFormat">PFORMAT_STRING         </arg>
<arg name="fMustAlloc">unsigned char          </arg>
</function>

<function name="NdrVaryingArrayUnmarshall" ret="unsigned char  *" convention="__stdcall">
<arg name="pStubMsg">PMIDL_STUB_MESSAGE     </arg>
<arg name="ppMemory">unsigned char  *  *    </arg>
<arg name="pFormat">PFORMAT_STRING         </arg>
<arg name="fMustAlloc">unsigned char          </arg>
</function>

<function name="NdrComplexArrayUnmarshall" ret="unsigned char  *" convention="__stdcall">
<arg name="pStubMsg">PMIDL_STUB_MESSAGE     </arg>
<arg name="ppMemory">unsigned char  *  *    </arg>
<arg name="pFormat">PFORMAT_STRING         </arg>
<arg name="fMustAlloc">unsigned char          </arg>
</function>
<function name="NdrNonConformantStringUnmarshall" ret="unsigned char  *" convention="__stdcall">
<arg name="pStubMsg">PMIDL_STUB_MESSAGE     </arg>
<arg name="ppMemory">unsigned char  *  *    </arg>
<arg name="pFormat">PFORMAT_STRING         </arg>
<arg name="fMustAlloc">unsigned char          </arg>
</function>

<function name="NdrConformantStringUnmarshall" ret="unsigned char  *" convention="__stdcall">
<arg name="pStubMsg">PMIDL_STUB_MESSAGE     </arg>
<arg name="ppMemory">unsigned char  *  *    </arg>
<arg name="pFormat">PFORMAT_STRING         </arg>
<arg name="fMustAlloc">unsigned char          </arg>
</function>
<function name="NdrEncapsulatedUnionUnmarshall" ret="unsigned char  *" convention="__stdcall">
<arg name="pStubMsg">PMIDL_STUB_MESSAGE     </arg>
<arg name="ppMemory">unsigned char  *  *    </arg>
<arg name="pFormat">PFORMAT_STRING         </arg>
<arg name="fMustAlloc">unsigned char          </arg>
</function>

<function name="NdrNonEncapsulatedUnionUnmarshall" ret="unsigned char  *" convention="__stdcall">
<arg name="pStubMsg">PMIDL_STUB_MESSAGE     </arg>
<arg name="ppMemory">unsigned char  *  *    </arg>
<arg name="pFormat">PFORMAT_STRING         </arg>
<arg name="fMustAlloc">unsigned char          </arg>
</function>
<function name="NdrByteCountPointerUnmarshall" ret="unsigned char  *" convention="__stdcall">
<arg name="pStubMsg">PMIDL_STUB_MESSAGE     </arg>
<arg name="ppMemory">unsigned char  *  *    </arg>
<arg name="pFormat">PFORMAT_STRING         </arg>
<arg name="fMustAlloc">unsigned char          </arg>
</function>
<function name="NdrXmitOrRepAsUnmarshall" ret="unsigned char  *" convention="__stdcall">
<arg name="pStubMsg">PMIDL_STUB_MESSAGE     </arg>
<arg name="ppMemory">unsigned char  *  *    </arg>
<arg name="pFormat">PFORMAT_STRING         </arg>
<arg name="fMustAlloc">unsigned char          </arg>
</function>
<function name="NdrUserMarshalUnmarshall" ret="unsigned char  *" convention="__stdcall">
<arg name="pStubMsg">PMIDL_STUB_MESSAGE     </arg>
<arg name="ppMemory">unsigned char  *  *    </arg>
<arg name="pFormat">PFORMAT_STRING         </arg>
<arg name="fMustAlloc">unsigned char          </arg>
</function>
<function name="NdrInterfacePointerUnmarshall" ret="unsigned char  *" convention="__stdcall">
<arg name="pStubMsg">PMIDL_STUB_MESSAGE     </arg>
<arg name="ppMemory">unsigned char  *  *    </arg>
<arg name="pFormat">PFORMAT_STRING         </arg>
<arg name="fMustAlloc">unsigned char          </arg>
</function>
<function name="NdrClientContextUnmarshall" ret="void" convention="__stdcall">
<arg name="pStubMsg">PMIDL_STUB_MESSAGE     </arg>
<arg name="pContextHandle">NDR_CCONTEXT        *  </arg>
<arg name="BindHandle">RPC_BINDING_HANDLE     </arg>
</function>

<function name="NdrServerContextUnmarshall" ret="NDR_SCONTEXT" convention="__stdcall">
<arg name="pStubMsg">PMIDL_STUB_MESSAGE     </arg>
</function>
<function name="NdrContextHandleInitialize" ret="NDR_SCONTEXT" convention="__stdcall">
<arg name="pStubMsg">PMIDL_STUB_MESSAGE </arg>
<arg name="pFormat">PFORMAT_STRING     </arg>
</function>

<function name="NdrServerContextNewUnmarshall" ret="NDR_SCONTEXT" convention="__stdcall">
<arg name="pStubMsg">PMIDL_STUB_MESSAGE </arg>
<arg name="pFormat">PFORMAT_STRING     </arg>
</function>
<function name="NdrPointerBufferSize" ret="void" convention="__stdcall">
<arg name="pStubMsg">PMIDL_STUB_MESSAGE     </arg>
<arg name="pMemory">unsigned char  *       </arg>
<arg name="pFormat">PFORMAT_STRING         </arg>
</function>

<function name="NdrCsArrayBufferSize" ret="void" convention="__stdcall">
<arg name="pStubMsg">PMIDL_STUB_MESSAGE     </arg>
<arg name="pMemory">unsigned char  *       </arg>
<arg name="pFormat">PFORMAT_STRING         </arg>
</function>

<function name="NdrCsTagBufferSize" ret="void" convention="__stdcall">
<arg name="pStubMsg">PMIDL_STUB_MESSAGE     </arg>
<arg name="pMemory">unsigned char  *       </arg>
<arg name="pFormat">PFORMAT_STRING         </arg>
</function>
<function name="NdrSimpleStructBufferSize" ret="void" convention="__stdcall">
<arg name="pStubMsg">PMIDL_STUB_MESSAGE     </arg>
<arg name="pMemory">unsigned char  *       </arg>
<arg name="pFormat">PFORMAT_STRING         </arg>
</function>

<function name="NdrConformantStructBufferSize" ret="void" convention="__stdcall">
<arg name="pStubMsg">PMIDL_STUB_MESSAGE     </arg>
<arg name="pMemory">unsigned char  *       </arg>
<arg name="pFormat">PFORMAT_STRING         </arg>
</function>

<function name="NdrConformantVaryingStructBufferSize" ret="void" convention="__stdcall">
<arg name="pStubMsg">PMIDL_STUB_MESSAGE     </arg>
<arg name="pMemory">unsigned char  *       </arg>
<arg name="pFormat">PFORMAT_STRING         </arg>
</function>

<function name="NdrComplexStructBufferSize" ret="void" convention="__stdcall">
<arg name="pStubMsg">PMIDL_STUB_MESSAGE     </arg>
<arg name="pMemory">unsigned char  *       </arg>
<arg name="pFormat">PFORMAT_STRING         </arg>
</function>
<function name="NdrFixedArrayBufferSize" ret="void" convention="__stdcall">
<arg name="pStubMsg">PMIDL_STUB_MESSAGE     </arg>
<arg name="pMemory">unsigned char  *       </arg>
<arg name="pFormat">PFORMAT_STRING         </arg>
</function>

<function name="NdrConformantArrayBufferSize" ret="void" convention="__stdcall">
<arg name="pStubMsg">PMIDL_STUB_MESSAGE     </arg>
<arg name="pMemory">unsigned char  *       </arg>
<arg name="pFormat">PFORMAT_STRING         </arg>
</function>

<function name="NdrConformantVaryingArrayBufferSize" ret="void" convention="__stdcall">
<arg name="pStubMsg">PMIDL_STUB_MESSAGE     </arg>
<arg name="pMemory">unsigned char  *       </arg>
<arg name="pFormat">PFORMAT_STRING         </arg>
</function>

<function name="NdrVaryingArrayBufferSize" ret="void" convention="__stdcall">
<arg name="pStubMsg">PMIDL_STUB_MESSAGE     </arg>
<arg name="pMemory">unsigned char  *       </arg>
<arg name="pFormat">PFORMAT_STRING         </arg>
</function>

<function name="NdrComplexArrayBufferSize" ret="void" convention="__stdcall">
<arg name="pStubMsg">PMIDL_STUB_MESSAGE     </arg>
<arg name="pMemory">unsigned char  *       </arg>
<arg name="pFormat">PFORMAT_STRING         </arg>
</function>
<function name="NdrConformantStringBufferSize" ret="void" convention="__stdcall">
<arg name="pStubMsg">PMIDL_STUB_MESSAGE     </arg>
<arg name="pMemory">unsigned char  *       </arg>
<arg name="pFormat">PFORMAT_STRING         </arg>
</function>

<function name="NdrNonConformantStringBufferSize" ret="void" convention="__stdcall">
<arg name="pStubMsg">PMIDL_STUB_MESSAGE     </arg>
<arg name="pMemory">unsigned char  *       </arg>
<arg name="pFormat">PFORMAT_STRING         </arg>
</function>
<function name="NdrEncapsulatedUnionBufferSize" ret="void" convention="__stdcall">
<arg name="pStubMsg">PMIDL_STUB_MESSAGE     </arg>
<arg name="pMemory">unsigned char  *       </arg>
<arg name="pFormat">PFORMAT_STRING         </arg>
</function>

<function name="NdrNonEncapsulatedUnionBufferSize" ret="void" convention="__stdcall">
<arg name="pStubMsg">PMIDL_STUB_MESSAGE     </arg>
<arg name="pMemory">unsigned char  *       </arg>
<arg name="pFormat">PFORMAT_STRING         </arg>
</function>
<function name="NdrByteCountPointerBufferSize" ret="void" convention="__stdcall">
<arg name="pStubMsg">PMIDL_STUB_MESSAGE     </arg>
<arg name="pMemory">unsigned char  *       </arg>
<arg name="pFormat">PFORMAT_STRING         </arg>
</function>
<function name="NdrXmitOrRepAsBufferSize" ret="void" convention="__stdcall">
<arg name="pStubMsg">PMIDL_STUB_MESSAGE     </arg>
<arg name="pMemory">unsigned char  *       </arg>
<arg name="pFormat">PFORMAT_STRING         </arg>
</function>
<function name="NdrUserMarshalBufferSize" ret="void" convention="__stdcall">
<arg name="pStubMsg">PMIDL_STUB_MESSAGE     </arg>
<arg name="pMemory">unsigned char  *       </arg>
<arg name="pFormat">PFORMAT_STRING         </arg>
</function>
<function name="NdrInterfacePointerBufferSize" ret="void" convention="__stdcall">
<arg name="pStubMsg">PMIDL_STUB_MESSAGE     </arg>
<arg name="pMemory">unsigned char  *       </arg>
<arg name="pFormat">PFORMAT_STRING         </arg>
</function>
<function name="NdrContextHandleSize" ret="void" convention="__stdcall">
<arg name="pStubMsg">PMIDL_STUB_MESSAGE     </arg>
<arg name="pMemory">unsigned char  *       </arg>
<arg name="pFormat">PFORMAT_STRING         </arg>
</function>
<function name="NdrPointerMemorySize" ret="unsigned long" convention="__stdcall">
<arg name="pStubMsg">PMIDL_STUB_MESSAGE     </arg>
<arg name="pFormat">PFORMAT_STRING         </arg>
</function>

<function name="NdrContextHandleMemorySize" ret="unsigned long" convention="__stdcall">
<arg name="pStubMsg">PMIDL_STUB_MESSAGE     </arg>
<arg name="pFormat">PFORMAT_STRING         </arg>
</function>

<function name="NdrCsArrayMemorySize" ret="unsigned long" convention="__stdcall">
<arg name="pStubMsg">PMIDL_STUB_MESSAGE     </arg>
<arg name="pFormat">PFORMAT_STRING         </arg>
</function>

<function name="NdrCsTagMemorySize" ret="unsigned long" convention="__stdcall">
<arg name="pStubMsg">PMIDL_STUB_MESSAGE     </arg>
<arg name="pFormat">PFORMAT_STRING         </arg>
</function>
<function name="NdrSimpleStructMemorySize" ret="unsigned long" convention="__stdcall">
<arg name="pStubMsg">PMIDL_STUB_MESSAGE     </arg>
<arg name="pFormat">PFORMAT_STRING         </arg>
</function>

<function name="NdrConformantStructMemorySize" ret="unsigned long" convention="__stdcall">
<arg name="pStubMsg">PMIDL_STUB_MESSAGE     </arg>
<arg name="pFormat">PFORMAT_STRING         </arg>
</function>

<function name="NdrConformantVaryingStructMemorySize" ret="unsigned long" convention="__stdcall">
<arg name="pStubMsg">PMIDL_STUB_MESSAGE     </arg>
<arg name="pFormat">PFORMAT_STRING         </arg>
</function>

<function name="NdrComplexStructMemorySize" ret="unsigned long" convention="__stdcall">
<arg name="pStubMsg">PMIDL_STUB_MESSAGE     </arg>
<arg name="pFormat">PFORMAT_STRING         </arg>
</function>
<function name="NdrFixedArrayMemorySize" ret="unsigned long" convention="__stdcall">
<arg name="pStubMsg">PMIDL_STUB_MESSAGE     </arg>
<arg name="pFormat">PFORMAT_STRING         </arg>
</function>

<function name="NdrConformantArrayMemorySize" ret="unsigned long" convention="__stdcall">
<arg name="pStubMsg">PMIDL_STUB_MESSAGE     </arg>
<arg name="pFormat">PFORMAT_STRING         </arg>
</function>

<function name="NdrConformantVaryingArrayMemorySize" ret="unsigned long" convention="__stdcall">
<arg name="pStubMsg">PMIDL_STUB_MESSAGE     </arg>
<arg name="pFormat">PFORMAT_STRING         </arg>
</function>

<function name="NdrVaryingArrayMemorySize" ret="unsigned long" convention="__stdcall">
<arg name="pStubMsg">PMIDL_STUB_MESSAGE     </arg>
<arg name="pFormat">PFORMAT_STRING         </arg>
</function>

<function name="NdrComplexArrayMemorySize" ret="unsigned long" convention="__stdcall">
<arg name="pStubMsg">PMIDL_STUB_MESSAGE     </arg>
<arg name="pFormat">PFORMAT_STRING         </arg>
</function>
<function name="NdrConformantStringMemorySize" ret="unsigned long" convention="__stdcall">
<arg name="pStubMsg">PMIDL_STUB_MESSAGE     </arg>
<arg name="pFormat">PFORMAT_STRING         </arg>
</function>

<function name="NdrNonConformantStringMemorySize" ret="unsigned long" convention="__stdcall">
<arg name="pStubMsg">PMIDL_STUB_MESSAGE     </arg>
<arg name="pFormat">PFORMAT_STRING         </arg>
</function>
<function name="NdrEncapsulatedUnionMemorySize" ret="unsigned long" convention="__stdcall">
<arg name="pStubMsg">PMIDL_STUB_MESSAGE     </arg>
<arg name="pFormat">PFORMAT_STRING         </arg>
</function>

<function name="NdrNonEncapsulatedUnionMemorySize" ret="unsigned long" convention="__stdcall">
<arg name="pStubMsg">PMIDL_STUB_MESSAGE     </arg>
<arg name="pFormat">PFORMAT_STRING         </arg>
</function>
<function name="NdrXmitOrRepAsMemorySize" ret="unsigned long" convention="__stdcall">
<arg name="pStubMsg">PMIDL_STUB_MESSAGE     </arg>
<arg name="pFormat">PFORMAT_STRING         </arg>
</function>
<function name="NdrUserMarshalMemorySize" ret="unsigned long" convention="__stdcall">
<arg name="pStubMsg">PMIDL_STUB_MESSAGE     </arg>
<arg name="pFormat">PFORMAT_STRING         </arg>
</function>
<function name="NdrInterfacePointerMemorySize" ret="unsigned long" convention="__stdcall">
<arg name="pStubMsg">PMIDL_STUB_MESSAGE     </arg>
<arg name="pFormat">PFORMAT_STRING         </arg>
</function>
<function name="NdrPointerFree" ret="void" convention="__stdcall">
<arg name="pStubMsg">PMIDL_STUB_MESSAGE     </arg>
<arg name="pMemory">unsigned char  *       </arg>
<arg name="pFormat">PFORMAT_STRING         </arg>
</function>

<function name="NdrCsArrayFree" ret="void" convention="__stdcall">
<arg name="pStubMsg">PMIDL_STUB_MESSAGE     </arg>
<arg name="pMemory">unsigned char  *       </arg>
<arg name="pFormat">PFORMAT_STRING         </arg>
</function>
<function name="NdrSimpleStructFree" ret="void" convention="__stdcall">
<arg name="pStubMsg">PMIDL_STUB_MESSAGE     </arg>
<arg name="pMemory">unsigned char  *       </arg>
<arg name="pFormat">PFORMAT_STRING         </arg>
</function>

<function name="NdrConformantStructFree" ret="void" convention="__stdcall">
<arg name="pStubMsg">PMIDL_STUB_MESSAGE     </arg>
<arg name="pMemory">unsigned char  *       </arg>
<arg name="pFormat">PFORMAT_STRING         </arg>
</function>

<function name="NdrConformantVaryingStructFree" ret="void" convention="__stdcall">
<arg name="pStubMsg">PMIDL_STUB_MESSAGE     </arg>
<arg name="pMemory">unsigned char  *       </arg>
<arg name="pFormat">PFORMAT_STRING         </arg>
</function>

<function name="NdrComplexStructFree" ret="void" convention="__stdcall">
<arg name="pStubMsg">PMIDL_STUB_MESSAGE     </arg>
<arg name="pMemory">unsigned char  *       </arg>
<arg name="pFormat">PFORMAT_STRING         </arg>
</function>
<function name="NdrFixedArrayFree" ret="void" convention="__stdcall">
<arg name="pStubMsg">PMIDL_STUB_MESSAGE     </arg>
<arg name="pMemory">unsigned char  *       </arg>
<arg name="pFormat">PFORMAT_STRING         </arg>
</function>

<function name="NdrConformantArrayFree" ret="void" convention="__stdcall">
<arg name="pStubMsg">PMIDL_STUB_MESSAGE     </arg>
<arg name="pMemory">unsigned char  *       </arg>
<arg name="pFormat">PFORMAT_STRING         </arg>
</function>

<function name="NdrConformantVaryingArrayFree" ret="void" convention="__stdcall">
<arg name="pStubMsg">PMIDL_STUB_MESSAGE     </arg>
<arg name="pMemory">unsigned char  *       </arg>
<arg name="pFormat">PFORMAT_STRING         </arg>
</function>

<function name="NdrVaryingArrayFree" ret="void" convention="__stdcall">
<arg name="pStubMsg">PMIDL_STUB_MESSAGE     </arg>
<arg name="pMemory">unsigned char  *       </arg>
<arg name="pFormat">PFORMAT_STRING         </arg>
</function>

<function name="NdrComplexArrayFree" ret="void" convention="__stdcall">
<arg name="pStubMsg">PMIDL_STUB_MESSAGE     </arg>
<arg name="pMemory">unsigned char  *       </arg>
<arg name="pFormat">PFORMAT_STRING         </arg>
</function>
<function name="NdrEncapsulatedUnionFree" ret="void" convention="__stdcall">
<arg name="pStubMsg">PMIDL_STUB_MESSAGE     </arg>
<arg name="pMemory">unsigned char  *       </arg>
<arg name="pFormat">PFORMAT_STRING         </arg>
</function>

<function name="NdrNonEncapsulatedUnionFree" ret="void" convention="__stdcall">
<arg name="pStubMsg">PMIDL_STUB_MESSAGE     </arg>
<arg name="pMemory">unsigned char  *       </arg>
<arg name="pFormat">PFORMAT_STRING         </arg>
</function>
<function name="NdrByteCountPointerFree" ret="void" convention="__stdcall">
<arg name="pStubMsg">PMIDL_STUB_MESSAGE     </arg>
<arg name="pMemory">unsigned char  *       </arg>
<arg name="pFormat">PFORMAT_STRING         </arg>
</function>
<function name="NdrXmitOrRepAsFree" ret="void" convention="__stdcall">
<arg name="pStubMsg">PMIDL_STUB_MESSAGE     </arg>
<arg name="pMemory">unsigned char  *       </arg>
<arg name="pFormat">PFORMAT_STRING         </arg>
</function>
<function name="NdrUserMarshalFree" ret="void" convention="__stdcall">
<arg name="pStubMsg">PMIDL_STUB_MESSAGE     </arg>
<arg name="pMemory">unsigned char  *       </arg>
<arg name="pFormat">PFORMAT_STRING         </arg>
</function>
<function name="NdrInterfacePointerFree" ret="void" convention="__stdcall">
<arg name="pStubMsg">PMIDL_STUB_MESSAGE     </arg>
<arg name="pMemory">unsigned char  *       </arg>
<arg name="pFormat">PFORMAT_STRING         </arg>
</function>
<function name="NdrConvert2" ret="void" convention="__stdcall">
<arg name="pStubMsg">PMIDL_STUB_MESSAGE     </arg>
<arg name="pFormat">PFORMAT_STRING         </arg>
<arg name="NumberParams">long                   </arg>
</function>

<function name="NdrConvert" ret="void" convention="__stdcall">
<arg name="pStubMsg">PMIDL_STUB_MESSAGE     </arg>
<arg name="pFormat">PFORMAT_STRING         </arg>
</function>

<function name="NdrUserMarshalSimpleTypeConvert" ret="unsigned char  *" convention="__stdcall">
<arg name="pFlags">unsigned long *        </arg>
<arg name="pBuffer">unsigned char *        </arg>
<arg name="FormatChar">unsigned char          </arg>
</function>
<function name="NdrClientInitializeNew" ret="void" convention="__stdcall">
<arg name="pRpcMsg">PRPC_MESSAGE           </arg>
<arg name="pStubMsg">PMIDL_STUB_MESSAGE     </arg>
<arg name="pStubDescriptor">PMIDL_STUB_DESC        </arg>
<arg name="ProcNum">unsigned int           </arg>
</function>

<function name="NdrServerInitializeNew" ret="unsigned char  *" convention="__stdcall">
<arg name="pRpcMsg">PRPC_MESSAGE           </arg>
<arg name="pStubMsg">PMIDL_STUB_MESSAGE     </arg>
<arg name="pStubDescriptor">PMIDL_STUB_DESC        </arg>
</function>

<function name="NdrServerInitializePartial" ret="void" convention="__stdcall">
<arg name="pRpcMsg">PRPC_MESSAGE           </arg>
<arg name="pStubMsg">PMIDL_STUB_MESSAGE     </arg>
<arg name="pStubDescriptor">PMIDL_STUB_DESC        </arg>
<arg name="RequestedBufferSize">unsigned long          </arg>
</function>

<function name="NdrClientInitialize" ret="void" convention="__stdcall">
<arg name="pRpcMsg">PRPC_MESSAGE           </arg>
<arg name="pStubMsg">PMIDL_STUB_MESSAGE     </arg>
<arg name="pStubDescriptor">PMIDL_STUB_DESC        </arg>
<arg name="ProcNum">unsigned int           </arg>
</function>

<function name="NdrServerInitialize" ret="unsigned char  *" convention="__stdcall">
<arg name="pRpcMsg">PRPC_MESSAGE           </arg>
<arg name="pStubMsg">PMIDL_STUB_MESSAGE     </arg>
<arg name="pStubDescriptor">PMIDL_STUB_DESC        </arg>
</function>

<function name="NdrServerInitializeUnmarshall" ret="unsigned char  *" convention="__stdcall">
<arg name="pStubMsg">PMIDL_STUB_MESSAGE     </arg>
<arg name="pStubDescriptor">PMIDL_STUB_DESC        </arg>
<arg name="pRpcMsg">PRPC_MESSAGE           </arg>
</function>

<function name="NdrServerInitializeMarshall" ret="void" convention="__stdcall">
<arg name="pRpcMsg">PRPC_MESSAGE           </arg>
<arg name="pStubMsg">PMIDL_STUB_MESSAGE     </arg>
</function>

<function name="NdrGetBuffer" ret="unsigned char  *" convention="__stdcall">
<arg name="pStubMsg">PMIDL_STUB_MESSAGE     </arg>
<arg name="BufferLength">unsigned long          </arg>
<arg name="Handle">RPC_BINDING_HANDLE     </arg>
</function>

<function name="NdrNsGetBuffer" ret="unsigned char  *" convention="__stdcall">
<arg name="pStubMsg">PMIDL_STUB_MESSAGE     </arg>
<arg name="BufferLength">unsigned long          </arg>
<arg name="Handle">RPC_BINDING_HANDLE     </arg>
</function>

<function name="NdrSendReceive" ret="unsigned char  *" convention="__stdcall">
<arg name="pStubMsg">PMIDL_STUB_MESSAGE     </arg>
<arg name="pBufferEnd">unsigned char *        </arg>
</function>

<function name="NdrNsSendReceive" ret="unsigned char  *" convention="__stdcall">
<arg name="pStubMsg">PMIDL_STUB_MESSAGE     </arg>
<arg name="pBufferEnd">unsigned char  *       </arg>
<arg name="pAutoHandle">RPC_BINDING_HANDLE  *  </arg>
</function>

<function name="NdrFreeBuffer" ret="void" convention="__stdcall">
<arg name="pStubMsg">PMIDL_STUB_MESSAGE     </arg>
</function>

<function name="NdrGetDcomProtocolVersion" ret="RPC_STATUS" convention="__stdcall">
<arg name="pStubMsg">PMIDL_STUB_MESSAGE     </arg>

    RPC_VERSION *           pVersion );

CLIENT_CALL_RETURN __cdecl
NdrClientCall2(
    PMIDL_STUB_DESC         pStubDescriptor,
    PFORMAT_STRING          pFormat,
    ...
    );
CLIENT_CALL_RETURN __cdecl
NdrClientCall(
    PMIDL_STUB_DESC         pStubDescriptor,
    PFORMAT_STRING          pFormat,
    ...
    );

CLIENT_CALL_RETURN __cdecl
NdrAsyncClientCall(
    PMIDL_STUB_DESC         pStubDescriptor,
    PFORMAT_STRING          pFormat,
    ...
    );

CLIENT_CALL_RETURN __cdecl
NdrDcomAsyncClientCall(
    PMIDL_STUB_DESC         pStubDescriptor,
    PFORMAT_STRING          pFormat,
    ...
    );
typedef enum {
    STUB_UNMARSHAL,
    STUB_CALL_SERVER,
    STUB_MARSHAL,
    STUB_CALL_SERVER_NO_HRESULT
}STUB_PHASE;

typedef enum {
    PROXY_CALCSIZE,
    PROXY_GETBUFFER,
    PROXY_MARSHAL,
    PROXY_SENDRECEIVE,
    PROXY_UNMARSHAL
}PROXY_PHASE;

struct IRpcStubBuffer;      
<function name="NdrAsyncServerCall" ret="void" convention="__stdcall">
<arg name="pRpcMsg">PRPC_MESSAGE               </arg>
</function>
<function name="NdrAsyncStubCall" ret="long" convention="__stdcall">
<arg name="pThis">IRpcStubBuffer *    </arg>
<arg name="pChannel">IRpcChannelBuffer * </arg>
<arg name="pRpcMsg">PRPC_MESSAGE               </arg>
<arg name="pdwStubPhase">unsigned long *            </arg>
</function>
<function name="NdrDcomAsyncStubCall" ret="long" convention="__stdcall">
<arg name="pThis">IRpcStubBuffer    * </arg>
<arg name="pChannel">IRpcChannelBuffer * </arg>
<arg name="pRpcMsg">PRPC_MESSAGE               </arg>
<arg name="pdwStubPhase">unsigned long            * </arg>
</function>

<function name="NdrStubCall2" ret="long" convention="__stdcall">
<arg name="pThis">IRpcStubBuffer  *   </arg>
<arg name="pChannel">IRpcChannelBuffer  *</arg>
<arg name="pRpcMsg">PRPC_MESSAGE               </arg>
<arg name="pdwStubPhase">unsigned long  *           </arg>
</function>

<function name="NdrServerCall2" ret="void" convention="__stdcall">
<arg name="pRpcMsg">PRPC_MESSAGE               </arg>
</function>

<function name="NdrStubCall" ret="long" convention="__stdcall">
<arg name="pThis">IRpcStubBuffer  *   </arg>
<arg name="pChannel">IRpcChannelBuffer  *</arg>
<arg name="pRpcMsg">PRPC_MESSAGE               </arg>
<arg name="pdwStubPhase">unsigned long  *           </arg>
</function>

<function name="NdrServerCall" ret="void" convention="__stdcall">
<arg name="pRpcMsg">PRPC_MESSAGE               </arg>
</function>

<function name="NdrServerUnmarshall" ret="int" convention="__stdcall">
<arg name="pChannel">IRpcChannelBuffer  *</arg>
<arg name="pRpcMsg">PRPC_MESSAGE               </arg>
<arg name="pStubMsg">PMIDL_STUB_MESSAGE         </arg>
<arg name="pStubDescriptor">PMIDL_STUB_DESC            </arg>
<arg name="pFormat">PFORMAT_STRING             </arg>
<arg name="pParamList">void  *                    </arg>
</function>

<function name="NdrServerMarshall" ret="void" convention="__stdcall">
<arg name="pThis">IRpcStubBuffer  *   </arg>
<arg name="pChannel">IRpcChannelBuffer  *</arg>
<arg name="pStubMsg">PMIDL_STUB_MESSAGE         </arg>
<arg name="pFormat">PFORMAT_STRING             </arg>
</function>
<function name="NdrMapCommAndFaultStatus" ret="RPC_STATUS" convention="__stdcall">
<arg name="pStubMsg">PMIDL_STUB_MESSAGE         </arg>
<arg name="pCommStatus">unsigned long  *           </arg>
<arg name="pFaultStatus">unsigned long  *           </arg>
<arg name="Status">RPC_STATUS                 </arg>
</function>
typedef void  * RPC_SS_THREAD_HANDLE;

typedef void  * __stdcall
RPC_CLIENT_ALLOC (
<arg name="Size">size_t</arg>
</function>

typedef void __stdcall
RPC_CLIENT_FREE (
<arg name="Ptr">void  *</arg>
</function>
<function name="RpcSsAllocate" ret="void  *" convention="__stdcall">

<arg name="Size">size_t</arg>
</function>

<function name="RpcSsDisableAllocate" ret="void" convention="__stdcall">

<arg name="void"></arg>
</function>

<function name="RpcSsEnableAllocate" ret="void" convention="__stdcall">

<arg name="void"></arg>
</function>

<function name="RpcSsFree" ret="void" convention="__stdcall">

<arg name="NodeToFree">void  *</arg>
</function>

<function name="RpcSsGetThreadHandle" ret="RPC_SS_THREAD_HANDLE" convention="__stdcall">

<arg name="void"></arg>
</function>

<function name="RpcSsSetClientAllocFree" ret="void" convention="__stdcall">
<arg name="ClientAlloc">RPC_CLIENT_ALLOC  *</arg>
<arg name="ClientFree">RPC_CLIENT_FREE   *</arg>
</function>

<function name="RpcSsSetThreadHandle" ret="void" convention="__stdcall">

<arg name="Id">RPC_SS_THREAD_HANDLE</arg>
</function>

<function name="RpcSsSwapClientAllocFree" ret="void" convention="__stdcall">
<arg name="ClientAlloc">RPC_CLIENT_ALLOC     *</arg>
<arg name="ClientFree">RPC_CLIENT_FREE      *</arg>
<arg name="OldClientAlloc">RPC_CLIENT_ALLOC *  *</arg>
<arg name="OldClientFree">RPC_CLIENT_FREE  *  *</arg>
</function>
<function name="RpcSmAllocate" ret="void  *" convention="__stdcall">
<arg name="Size">size_t         </arg>
<arg name="pStatus">RPC_STATUS  *  </arg>
</function>

<function name="RpcSmClientFree" ret="RPC_STATUS" convention="__stdcall">

<arg name="pNodeToFree">void        *  </arg>
</function>

<function name="RpcSmDestroyClientContext" ret="RPC_STATUS" convention="__stdcall">

<arg name="ContextHandle">void         * *</arg>
</function>

<function name="RpcSmDisableAllocate" ret="RPC_STATUS" convention="__stdcall">

<arg name="void"></arg>
</function>

<function name="RpcSmEnableAllocate" ret="RPC_STATUS" convention="__stdcall">

<arg name="void"></arg>
</function>

<function name="RpcSmFree" ret="RPC_STATUS" convention="__stdcall">

<arg name="NodeToFree">void         *  </arg>
</function>

<function name="RpcSmGetThreadHandle" ret="RPC_SS_THREAD_HANDLE" convention="__stdcall">

<arg name="pStatus">RPC_STATUS  *  </arg>
</function>

<function name="RpcSmSetClientAllocFree" ret="RPC_STATUS" convention="__stdcall">
<arg name="ClientAlloc">RPC_CLIENT_ALLOC *</arg>
<arg name="ClientFree">RPC_CLIENT_FREE  *</arg>
</function>

<function name="RpcSmSetThreadHandle" ret="RPC_STATUS" convention="__stdcall">

<arg name="Id">RPC_SS_THREAD_HANDLE</arg>
</function>

<function name="RpcSmSwapClientAllocFree" ret="RPC_STATUS" convention="__stdcall">
<arg name="ClientAlloc">RPC_CLIENT_ALLOC     *  </arg>
<arg name="ClientFree">RPC_CLIENT_FREE      *  </arg>
<arg name="OldClientAlloc">RPC_CLIENT_ALLOC    * *</arg>
<arg name="OldClientFree">RPC_CLIENT_FREE     * *</arg>
</function>
<function name="NdrRpcSsEnableAllocate" ret="void" convention="__stdcall">
    PMIDL_STUB_MESSAGE      pMessage );

<function name="NdrRpcSsDisableAllocate" ret="void" convention="__stdcall">
    PMIDL_STUB_MESSAGE      pMessage );

<function name="NdrRpcSmSetClientToOsf" ret="void" convention="__stdcall">
    PMIDL_STUB_MESSAGE      pMessage );

<function name="NdrRpcSmClientAllocate" ret="void  *" convention="__stdcall">

<arg name="Size">size_t</arg>
</function>

<function name="NdrRpcSmClientFree" ret="void" convention="__stdcall">

<arg name="NodeToFree">void  *</arg>
</function>

<function name="NdrRpcSsDefaultAllocate" ret="void  *" convention="__stdcall">

<arg name="Size">size_t</arg>
</function>

<function name="NdrRpcSsDefaultFree" ret="void" convention="__stdcall">

<arg name="NodeToFree">void  *</arg>
</function>
<function name="NdrFullPointerXlatInit" ret="PFULL_PTR_XLAT_TABLES" convention="__stdcall">
<arg name="NumberOfPointers">unsigned long          </arg>
<arg name="XlatSide">XLAT_SIDE              </arg>
</function>

<function name="NdrFullPointerXlatFree" ret="void" convention="__stdcall">
<arg name="pXlatTables">PFULL_PTR_XLAT_TABLES  </arg>
</function>
<function name="NdrAllocate" ret="void  *" convention="__stdcall">
<arg name="pStubMsg">PMIDL_STUB_MESSAGE     </arg>
<arg name="Len">size_t                 </arg>
</function>

<function name="NdrClearOutParameters" ret="void" convention="__stdcall">
<arg name="pStubMsg">PMIDL_STUB_MESSAGE     </arg>
<arg name="pFormat">PFORMAT_STRING         </arg>
<arg name="ArgAddr">void  *                </arg>
</function>

<function name="NdrOleAllocate" ret="void  *" convention="__stdcall">

<arg name="Size">size_t</arg>
</function>

<function name="NdrOleFree" ret="void" convention="__stdcall">

<arg name="NodeToFree">void  *</arg>
</function>
<struct name="_NDR_USER_MARSHAL_INFO_LEVEL1">
    void *                      Buffer;
    unsigned long               BufferSize;
    void *(__stdcall * pfnAllocate)(size_t);
<fnptr name="pfnFree" ret="void" convention="__stdcall">
void *);
    struct IRpcChannelBuffer *  pRpcChannelBuffer;
    ULONG_PTR                   Reserved[5];
} NDR_USER_MARSHAL_INFO_LEVEL1;
#pragma warning(push)

#pragma warning(disable:4201)
<struct name="_NDR_USER_MARSHAL_INFO">
    unsigned long InformationLevel;
    union {
        NDR_USER_MARSHAL_INFO_LEVEL1 Level1;
    };
} NDR_USER_MARSHAL_INFO;
#pragma warning(pop)
RPC_STATUS
__stdcall
NdrGetUserMarshalInfo (
     unsigned long        *   pFlags,
     unsigned long            InformationLevel,
<arg name="pMarshalInfo">NDR_USER_MARSHAL_INFO *</arg>
</function>

<function name="NdrCreateServerInterfaceFromStub" ret="RPC_STATUS" convention="__stdcall">
<arg name="pStub">IRpcStubBuffer*</arg>

              RPC_SERVER_INTERFACE *pServerIf );

CLIENT_CALL_RETURN __cdecl
NdrClientCall3(
    MIDL_STUBLESS_PROXY_INFO   *pProxyInfo,
    unsigned long               nProcNum,
    void *                      pReturnValue,
    ...
    );

CLIENT_CALL_RETURN __cdecl
Ndr64AsyncClientCall(
    MIDL_STUBLESS_PROXY_INFO   *pProxyInfo,
    unsigned long               nProcNum,
    void *                      pReturnValue,
    ...
    );

CLIENT_CALL_RETURN __cdecl
Ndr64DcomAsyncClientCall(
    MIDL_STUBLESS_PROXY_INFO   *pProxyInfo,
    unsigned long               nProcNum,
    void *                      pReturnValue,
    ...
    );

struct IRpcStubBuffer;      

<function name="Ndr64AsyncServerCall" ret="void" convention="__stdcall">
<arg name="pRpcMsg">PRPC_MESSAGE               </arg>
</function>

<function name="Ndr64AsyncServerCall64" ret="void" convention="__stdcall">
<arg name="pRpcMsg">PRPC_MESSAGE               </arg>
</function>

<function name="Ndr64AsyncServerCallAll" ret="void" convention="__stdcall">
<arg name="pRpcMsg">PRPC_MESSAGE               </arg>
</function>

<function name="Ndr64AsyncStubCall" ret="long" convention="__stdcall">
<arg name="pThis">IRpcStubBuffer *    </arg>
<arg name="pChannel">IRpcChannelBuffer * </arg>
<arg name="pRpcMsg">PRPC_MESSAGE               </arg>
<arg name="pdwStubPhase">unsigned long *            </arg>
</function>
<function name="Ndr64DcomAsyncStubCall" ret="long" convention="__stdcall">
<arg name="pThis">IRpcStubBuffer    * </arg>
<arg name="pChannel">IRpcChannelBuffer * </arg>
<arg name="pRpcMsg">PRPC_MESSAGE               </arg>
<arg name="pdwStubPhase">unsigned long            * </arg>
</function>

<function name="NdrStubCall3" ret="long" convention="__stdcall">
<arg name="pThis">IRpcStubBuffer  *   </arg>
<arg name="pChannel">IRpcChannelBuffer  *</arg>
<arg name="pRpcMsg">PRPC_MESSAGE               </arg>
<arg name="pdwStubPhase">unsigned long  *           </arg>
</function>

<function name="NdrServerCallAll" ret="void" convention="__stdcall">
<arg name="pRpcMsg">PRPC_MESSAGE               </arg>
</function>

<function name="NdrServerCallNdr64" ret="void" convention="__stdcall">
<arg name="pRpcMsg">PRPC_MESSAGE               </arg>
</function>
<function name="NdrServerCall3" ret="void" convention="__stdcall">
<arg name="pRpcMsg">PRPC_MESSAGE               </arg>
</function>
<function name="NdrPartialIgnoreClientMarshall" ret="void" convention="__stdcall">
<arg name="pStubMsg">PMIDL_STUB_MESSAGE         </arg>
<arg name="pMemory">void *                     </arg>
</function>

<function name="NdrPartialIgnoreServerUnmarshall" ret="void" convention="__stdcall">
<arg name="pStubMsg">PMIDL_STUB_MESSAGE         </arg>
<arg name="ppMemory">void **                    </arg>
</function>

<function name="NdrPartialIgnoreClientBufferSize" ret="void" convention="__stdcall">
<arg name="pStubMsg">PMIDL_STUB_MESSAGE         </arg>
<arg name="pMemory">void *                     </arg>
</function>

<function name="NdrPartialIgnoreServerInitialize" ret="void" convention="__stdcall">
<arg name="pStubMsg">PMIDL_STUB_MESSAGE         </arg>
<arg name="ppMemory">void **                    </arg>
<arg name="pFormat">PFORMAT_STRING             </arg>
</function>
<function name="RpcUserFree" ret="void" convention="__stdcall"> handle_t AsyncHandle, void * pBuffer );
#line 1 "\\program files\\Microsoft SDKs\\Windows\\v6.0A\\Include\\poppack.h"
#pragma warning(disable:4103)

#pragma pack(pop)

#pragma once
 
#line 1 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\guiddef.h"
 

#pragma once

extern RPC_IF_HANDLE __MIDL_itf_wtypes_0000_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_wtypes_0000_0000_v0_0_s_ifspec;
 

<struct name="tagRemHGLOBAL">
<field name="fNullHGlobal">long</field>
    unsigned long cbData;
    byte data[ 1 ];
    } 	RemHGLOBAL;

<struct name="tagRemHMETAFILEPICT">
<field name="mm">long</field>
<field name="xExt">long</field>
<field name="yExt">long</field>
    unsigned long cbData;
    byte data[ 1 ];
    } 	RemHMETAFILEPICT;

<struct name="tagRemHENHMETAFILE">
    unsigned long cbData;
    byte data[ 1 ];
    } 	RemHENHMETAFILE;

<struct name="tagRemHBITMAP">
    unsigned long cbData;
    byte data[ 1 ];
    } 	RemHBITMAP;

<struct name="tagRemHPALETTE">
    unsigned long cbData;
    byte data[ 1 ];
    } 	RemHPALETTE;

<struct name="tagRemBRUSH">
    unsigned long cbData;
    byte data[ 1 ];
    } 	RemHBRUSH;

typedef WCHAR OLECHAR;

typedef    OLECHAR *LPOLESTR;

typedef    const OLECHAR *LPCOLESTR;

typedef unsigned char UCHAR;

typedef short SHORT;

typedef unsigned short USHORT;

typedef DWORD ULONG;

typedef double DOUBLE;

<struct name="_COAUTHIDENTITY">
    USHORT *User;
    ULONG UserLength;
    USHORT *Domain;
    ULONG DomainLength;
    USHORT *Password;
    ULONG PasswordLength;
    ULONG Flags;
    } 	COAUTHIDENTITY;

<struct name="_COAUTHINFO">
<field name="dwAuthnSvc">DWORD</field>
<field name="dwAuthzSvc">DWORD</field>
<field name="pwszServerPrincName">LPWSTR</field>
<field name="dwAuthnLevel">DWORD</field>
<field name="dwImpersonationLevel">DWORD</field>
    COAUTHIDENTITY *pAuthIdentityData;
    DWORD dwCapabilities;
    } 	COAUTHINFO;

typedef LONG SCODE;

typedef SCODE *PSCODE;
typedef 
enum tagMEMCTX
    {	MEMCTX_TASK	= 1,
	MEMCTX_SHARED	= 2,
	MEMCTX_MACSYSTEM	= 3,
	MEMCTX_UNKNOWN	= -1,
	MEMCTX_SAME	= -2
    } 	MEMCTX;
typedef 
enum tagCLSCTX
    {	CLSCTX_INPROC_SERVER	= 0x1,
	CLSCTX_INPROC_HANDLER	= 0x2,
	CLSCTX_LOCAL_SERVER	= 0x4,
	CLSCTX_INPROC_SERVER16	= 0x8,
	CLSCTX_REMOTE_SERVER	= 0x10,
	CLSCTX_INPROC_HANDLER16	= 0x20,
	CLSCTX_RESERVED1	= 0x40,
	CLSCTX_RESERVED2	= 0x80,
	CLSCTX_RESERVED3	= 0x100,
	CLSCTX_RESERVED4	= 0x200,
	CLSCTX_NO_CODE_DOWNLOAD	= 0x400,
	CLSCTX_RESERVED5	= 0x800,
	CLSCTX_NO_CUSTOM_MARSHAL	= 0x1000,
	CLSCTX_ENABLE_CODE_DOWNLOAD	= 0x2000,
	CLSCTX_NO_FAILURE_LOG	= 0x4000,
	CLSCTX_DISABLE_AAA	= 0x8000,
	CLSCTX_ENABLE_AAA	= 0x10000,
	CLSCTX_FROM_DEFAULT_CONTEXT	= 0x20000,
	CLSCTX_ACTIVATE_32_BIT_SERVER	= 0x40000,
	CLSCTX_ACTIVATE_64_BIT_SERVER	= 0x80000,
	CLSCTX_ENABLE_CLOAKING	= 0x100000,
	CLSCTX_PS_DLL	= 0x80000000
    } 	CLSCTX;

typedef 
enum tagMSHLFLAGS
    {	MSHLFLAGS_NORMAL	= 0,
	MSHLFLAGS_TABLESTRONG	= 1,
	MSHLFLAGS_TABLEWEAK	= 2,
	MSHLFLAGS_NOPING	= 4,
	MSHLFLAGS_RESERVED1	= 8,
	MSHLFLAGS_RESERVED2	= 16,
	MSHLFLAGS_RESERVED3	= 32,
	MSHLFLAGS_RESERVED4	= 64
    } 	MSHLFLAGS;

typedef 
enum tagMSHCTX
    {	MSHCTX_LOCAL	= 0,
	MSHCTX_NOSHAREDMEM	= 1,
	MSHCTX_DIFFERENTMACHINE	= 2,
	MSHCTX_INPROC	= 3,
	MSHCTX_CROSSCTX	= 4
    } 	MSHCTX;

typedef 
enum tagDVASPECT
    {	DVASPECT_CONTENT	= 1,
	DVASPECT_THUMBNAIL	= 2,
	DVASPECT_ICON	= 4,
	DVASPECT_DOCPRINT	= 8
    } 	DVASPECT;

typedef 
enum tagSTGC
    {	STGC_DEFAULT	= 0,
	STGC_OVERWRITE	= 1,
	STGC_ONLYIFCURRENT	= 2,
	STGC_DANGEROUSLYCOMMITMERELYTODISKCACHE	= 4,
	STGC_CONSOLIDATE	= 8
    } 	STGC;

typedef 
enum tagSTGMOVE
    {	STGMOVE_MOVE	= 0,
	STGMOVE_COPY	= 1,
	STGMOVE_SHALLOWCOPY	= 2
    } 	STGMOVE;

typedef 
enum tagSTATFLAG
    {	STATFLAG_DEFAULT	= 0,
	STATFLAG_NONAME	= 1,
	STATFLAG_NOOPEN	= 2
    } 	STATFLAG;

typedef  void *HCONTEXT;
typedef DWORD LCID;
typedef USHORT LANGID;
<struct name="_BYTE_BLOB">
    unsigned long clSize;
    byte abData[ 1 ];
    } 	BYTE_BLOB;

typedef    BYTE_BLOB *UP_BYTE_BLOB;

<struct name="_WORD_BLOB">
    unsigned long clSize;
    unsigned short asData[ 1 ];
    } 	WORD_BLOB;

typedef    WORD_BLOB *UP_WORD_BLOB;

<struct name="_DWORD_BLOB">
    unsigned long clSize;
    unsigned long alData[ 1 ];
    } 	DWORD_BLOB;

typedef    DWORD_BLOB *UP_DWORD_BLOB;

<struct name="_FLAGGED_BYTE_BLOB">
    unsigned long fFlags;
    unsigned long clSize;
    byte abData[ 1 ];
    } 	FLAGGED_BYTE_BLOB;

typedef    FLAGGED_BYTE_BLOB *UP_FLAGGED_BYTE_BLOB;

<struct name="_FLAGGED_WORD_BLOB">
    unsigned long fFlags;
    unsigned long clSize;
    unsigned short asData[ 1 ];
    } 	FLAGGED_WORD_BLOB;

typedef    FLAGGED_WORD_BLOB *UP_FLAGGED_WORD_BLOB;

<struct name="_BYTE_SIZEDARR">
    unsigned long clSize;
    byte *pData;
    } 	BYTE_SIZEDARR;

<struct name="_SHORT_SIZEDARR">
    unsigned long clSize;
    unsigned short *pData;
    } 	WORD_SIZEDARR;

<struct name="_LONG_SIZEDARR">
    unsigned long clSize;
    unsigned long *pData;
    } 	DWORD_SIZEDARR;

<struct name="_HYPER_SIZEDARR">
    unsigned long clSize;
    __int64 *pData;
    } 	HYPER_SIZEDARR;
<struct name="_userCLIPFORMAT">
<field name="fContext">long</field>
     union __MIDL_IWinTypes_0001
        {
        DWORD dwValue;
        wchar_t *pwszName;
        } 	u;
    } 	userCLIPFORMAT;

typedef    userCLIPFORMAT *wireCLIPFORMAT;

typedef  WORD CLIPFORMAT;

<struct name="_GDI_NONREMOTE">
<field name="fContext">long</field>
     union __MIDL_IWinTypes_0002
        {
        long hInproc;
        DWORD_BLOB *hRemote;
        } 	u;
    } 	GDI_NONREMOTE;

<struct name="_userHGLOBAL">
<field name="fContext">long</field>
     union __MIDL_IWinTypes_0003
        {
        long hInproc;
        FLAGGED_BYTE_BLOB *hRemote;
        __int64 hInproc64;
        } 	u;
    } 	userHGLOBAL;

typedef    userHGLOBAL *wireHGLOBAL;

<struct name="_userHMETAFILE">
<field name="fContext">long</field>
     union __MIDL_IWinTypes_0004
        {
        long hInproc;
        BYTE_BLOB *hRemote;
        __int64 hInproc64;
        } 	u;
    } 	userHMETAFILE;

<struct name="_remoteMETAFILEPICT">
<field name="mm">long</field>
<field name="xExt">long</field>
<field name="yExt">long</field>
    userHMETAFILE *hMF;
    } 	remoteMETAFILEPICT;

<struct name="_userHMETAFILEPICT">
<field name="fContext">long</field>
     union __MIDL_IWinTypes_0005
        {
        long hInproc;
        remoteMETAFILEPICT *hRemote;
        __int64 hInproc64;
        } 	u;
    } 	userHMETAFILEPICT;

<struct name="_userHENHMETAFILE">
<field name="fContext">long</field>
     union __MIDL_IWinTypes_0006
        {
        long hInproc;
        BYTE_BLOB *hRemote;
        __int64 hInproc64;
        } 	u;
    } 	userHENHMETAFILE;

<struct name="_userBITMAP">
<field name="bmType">LONG</field>
<field name="bmWidth">LONG</field>
<field name="bmHeight">LONG</field>
<field name="bmWidthBytes">LONG</field>
<field name="bmPlanes">WORD</field>
<field name="bmBitsPixel">WORD</field>
<field name="cbSize">ULONG</field>
<field name="pBuffer[ 1 ]">byte</field>
    } 	userBITMAP;

<struct name="_userHBITMAP">
<field name="fContext">long</field>
     union __MIDL_IWinTypes_0007
        {
        long hInproc;
        userBITMAP *hRemote;
        __int64 hInproc64;
        } 	u;
    } 	userHBITMAP;

<struct name="_userHPALETTE">
<field name="fContext">long</field>
     union __MIDL_IWinTypes_0008
        {
        long hInproc;
        LOGPALETTE *hRemote;
        __int64 hInproc64;
        } 	u;
    } 	userHPALETTE;

<struct name="_RemotableHandle">
<field name="fContext">long</field>
     union __MIDL_IWinTypes_0009
        {
        long hInproc;
        long hRemote;
        } 	u;
    } 	RemotableHandle;

typedef    RemotableHandle *wireHWND;

typedef    RemotableHandle *wireHMENU;

typedef    RemotableHandle *wireHACCEL;

typedef    RemotableHandle *wireHBRUSH;

typedef    RemotableHandle *wireHFONT;

typedef    RemotableHandle *wireHDC;

typedef    RemotableHandle *wireHICON;

typedef    RemotableHandle *wireHRGN;
typedef    userHBITMAP *wireHBITMAP;

typedef    userHPALETTE *wireHPALETTE;

typedef    userHENHMETAFILE *wireHENHMETAFILE;

typedef    userHMETAFILE *wireHMETAFILE;

typedef    userHMETAFILEPICT *wireHMETAFILEPICT;

typedef  void *HMETAFILEPICT;
extern RPC_IF_HANDLE IWinTypes_v0_1_c_ifspec;
extern RPC_IF_HANDLE IWinTypes_v0_1_s_ifspec;
 
#pragma warning(push)
#pragma warning(disable:4201)
typedef double DATE;

typedef union tagCY {
<struct>

        unsigned long Lo;
        long      Hi;
    };
    LONGLONG int64;
} CY;
typedef CY *LPCY;
<struct name="tagDEC">
<field name="wReserved">USHORT</field>
    union {
<struct>
<field name="scale">BYTE</field>
<field name="sign">BYTE</field>
        };
        USHORT signscale;
    };
    ULONG Hi32;
    union {
<struct>

            ULONG Lo32;
            ULONG Mid32;
        };
        ULONGLONG Lo64;
    };
} DECIMAL;
typedef DECIMAL *LPDECIMAL;
#pragma warning(pop)
typedef    FLAGGED_WORD_BLOB *wireBSTR;

typedef  OLECHAR *BSTR;

typedef BSTR *LPBSTR;
typedef short VARIANT_BOOL;
typedef boolean BOOLEAN;

<struct name="tagBSTRBLOB">
<field name="cbSize">ULONG</field>
    BYTE *pData;
    } 	BSTRBLOB;

<typedef name="LPBSTRBLOB">tagBSTRBLOB *</typedef>
<struct name="tagBLOB">
<field name="cbSize">ULONG</field>
    BYTE *pBlobData;
    } 	BLOB;

<typedef name="LPBLOB">tagBLOB *</typedef>

<struct name="tagCLIPDATA">
<field name="cbSize">ULONG</field>
<field name="ulClipFmt">long</field>
    BYTE *pClipData;
    } 	CLIPDATA;
typedef unsigned short VARTYPE;
enum VARENUM
    {	VT_EMPTY	= 0,
	VT_NULL	= 1,
	VT_I2	= 2,
	VT_I4	= 3,
	VT_R4	= 4,
	VT_R8	= 5,
	VT_CY	= 6,
	VT_DATE	= 7,
	VT_BSTR	= 8,
	VT_DISPATCH	= 9,
	VT_ERROR	= 10,
	VT_BOOL	= 11,
	VT_VARIANT	= 12,
	VT_UNKNOWN	= 13,
	VT_DECIMAL	= 14,
	VT_I1	= 16,
	VT_UI1	= 17,
	VT_UI2	= 18,
	VT_UI4	= 19,
	VT_I8	= 20,
	VT_UI8	= 21,
	VT_INT	= 22,
	VT_UINT	= 23,
	VT_VOID	= 24,
	VT_HRESULT	= 25,
	VT_PTR	= 26,
	VT_SAFEARRAY	= 27,
	VT_CARRAY	= 28,
	VT_USERDEFINED	= 29,
	VT_LPSTR	= 30,
	VT_LPWSTR	= 31,
	VT_RECORD	= 36,
	VT_INT_PTR	= 37,
	VT_UINT_PTR	= 38,
	VT_FILETIME	= 64,
	VT_BLOB	= 65,
	VT_STREAM	= 66,
	VT_STORAGE	= 67,
	VT_STREAMED_OBJECT	= 68,
	VT_STORED_OBJECT	= 69,
	VT_BLOB_OBJECT	= 70,
	VT_CF	= 71,
	VT_CLSID	= 72,
	VT_VERSIONED_STREAM	= 73,
	VT_BSTR_BLOB	= 0xfff,
	VT_VECTOR	= 0x1000,
	VT_ARRAY	= 0x2000,
	VT_BYREF	= 0x4000,
	VT_RESERVED	= 0x8000,
	VT_ILLEGAL	= 0xffff,
	VT_ILLEGALMASKED	= 0xfff,
	VT_TYPEMASK	= 0xfff
    } ;
typedef ULONG PROPID;
<struct name="_tagpropertykey">
<field name="fmtid">GUID</field>
<field name="pid">DWORD</field>
    } 	PROPERTYKEY;

<struct name="tagCSPLATFORM">
<field name="dwPlatformId">DWORD</field>
<field name="dwVersionHi">DWORD</field>
<field name="dwVersionLo">DWORD</field>
<field name="dwProcessorArch">DWORD</field>
    } 	CSPLATFORM;

<struct name="tagQUERYCONTEXT">
<field name="dwContext">DWORD</field>
<field name="Platform">CSPLATFORM</field>
<field name="Locale">LCID</field>
<field name="dwVersionHi">DWORD</field>
<field name="dwVersionLo">DWORD</field>
    } 	QUERYCONTEXT;

typedef  
enum tagTYSPEC
    {	TYSPEC_CLSID	= 0,
	TYSPEC_FILEEXT	= ( TYSPEC_CLSID + 1 ) ,
	TYSPEC_MIMETYPE	= ( TYSPEC_FILEEXT + 1 ) ,
	TYSPEC_FILENAME	= ( TYSPEC_MIMETYPE + 1 ) ,
	TYSPEC_PROGID	= ( TYSPEC_FILENAME + 1 ) ,
	TYSPEC_PACKAGENAME	= ( TYSPEC_PROGID + 1 ) ,
	TYSPEC_OBJECTID	= ( TYSPEC_PACKAGENAME + 1 ) 
    } 	TYSPEC;

<struct name="__MIDL___MIDL_itf_wtypes_0000_0001_0001">
<field name="tyspec">DWORD</field>
     union __MIDL___MIDL_itf_wtypes_0000_0001_0005
        {
        CLSID clsid;
        LPOLESTR pFileExt;
        LPOLESTR pMimeType;
        LPOLESTR pProgId;
        LPOLESTR pFileName;
<struct>
<field name="pPackageName">LPOLESTR</field>
<field name="PolicyId">GUID</field>
            } 	ByName;
<struct>
<field name="ObjectId">GUID</field>
<field name="PolicyId">GUID</field>
            } 	ByObjectId;
        } 	tagged_union;
    } 	uCLSSPEC;
extern RPC_IF_HANDLE __MIDL_itf_wtypes_0000_0001_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_wtypes_0000_0001_v0_0_s_ifspec;
#line 1 "\\program files\\Microsoft SDKs\\Windows\\v6.0A\\Include\\winioctl.h"

extern const GUID  GUID_DEVINTERFACE_DISK;
extern const GUID  GUID_DEVINTERFACE_CDROM;
extern const GUID  GUID_DEVINTERFACE_PARTITION;
extern const GUID  GUID_DEVINTERFACE_TAPE;
extern const GUID  GUID_DEVINTERFACE_WRITEONCEDISK;
extern const GUID  GUID_DEVINTERFACE_VOLUME;
extern const GUID  GUID_DEVINTERFACE_MEDIUMCHANGER;
extern const GUID  GUID_DEVINTERFACE_FLOPPY;
extern const GUID  GUID_DEVINTERFACE_CDCHANGER;
extern const GUID  GUID_DEVINTERFACE_STORAGEPORT;
extern const GUID  GUID_DEVINTERFACE_COMPORT;
extern const GUID  GUID_DEVINTERFACE_SERENUM_BUS_ENUMERATOR;

<struct name="_STORAGE_HOTPLUG_INFO">
<field name="Size">DWORD</field>
<field name="MediaRemovable">BOOLEAN</field>
<field name="MediaHotplug">BOOLEAN</field>
<field name="DeviceHotplug">BOOLEAN</field>
<field name="WriteCacheEnableOverride">BOOLEAN</field>
</struct>
<typedefprev id="STORAGE_HOTPLUG_INFO"/>
<typedefptrprev id="PSTORAGE_HOTPLUG_INFO"/>
<struct name="_STORAGE_DEVICE_NUMBER">

    
    
    

    DWORD DeviceType;

    
    
    

    DWORD       DeviceNumber;

    
    
    
    

    DWORD       PartitionNumber;
} STORAGE_DEVICE_NUMBER, *PSTORAGE_DEVICE_NUMBER;
<struct name="_STORAGE_BUS_RESET_REQUEST">
<field name="PathId">BYTE</field>
</struct>
<typedefprev id="STORAGE_BUS_RESET_REQUEST"/>
<typedefptrprev id="PSTORAGE_BUS_RESET_REQUEST"/>
<struct name="STORAGE_BREAK_RESERVATION_REQUEST">
<field name="Length">DWORD</field>
<field name="_unused">BYTE</field>
<field name="PathId">BYTE</field>
<field name="TargetId">BYTE</field>
<field name="Lun">BYTE</field>
</struct>
<typedefprev id="STORAGE_BREAK_RESERVATION_REQUEST"/>
<typedefptrprev id="PSTORAGE_BREAK_RESERVATION_REQUEST"/>
<struct name="_PREVENT_MEDIA_REMOVAL">
<field name="PreventMediaRemoval">BOOLEAN</field>
</struct>
<typedefprev id="PREVENT_MEDIA_REMOVAL"/>
<typedefptrprev id="PPREVENT_MEDIA_REMOVAL"/>
<struct name="_CLASS_MEDIA_CHANGE_CONTEXT">
<field name="MediaChangeCount">DWORD</field>
<field name="NewState">DWORD</field>
</struct>
<typedefprev id="CLASS_MEDIA_CHANGE_CONTEXT"/>
<typedefptrprev id="PCLASS_MEDIA_CHANGE_CONTEXT"/>
<struct name="_TAPE_STATISTICS">
<field name="Version">DWORD</field>
<field name="Flags">DWORD</field>
<field name="RecoveredWrites">LARGE_INTEGER</field>
<field name="UnrecoveredWrites">LARGE_INTEGER</field>
<field name="RecoveredReads">LARGE_INTEGER</field>
<field name="UnrecoveredReads">LARGE_INTEGER</field>
<field name="CompressionRatioReads">BYTE</field>
<field name="CompressionRatioWrites">BYTE</field>
</struct>
<typedefprev id="TAPE_STATISTICS"/>
<typedefptrprev id="PTAPE_STATISTICS"/>

<struct name="_TAPE_GET_STATISTICS">
<field name="Operation">DWORD</field>
</struct>
<typedefprev id="TAPE_GET_STATISTICS"/>
<typedefptrprev id="PTAPE_GET_STATISTICS"/>
typedef enum _STORAGE_MEDIA_TYPE {
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    

    DDS_4mm = 0x20,            
    MiniQic,                   
    Travan,                    
    QIC,                       
    MP_8mm,                    
    AME_8mm,                   
    AIT1_8mm,                  
    DLT,                       
    NCTP,                      
    IBM_3480,                  
    IBM_3490E,                 
    IBM_Magstar_3590,          
    IBM_Magstar_MP,            
    STK_DATA_D3,               
    SONY_DTF,                  
    DV_6mm,                    
    DMI,                       
    SONY_D2,                   
    CLEANER_CARTRIDGE,         
    CD_ROM,                    
    CD_R,                      
    CD_RW,                     
    DVD_ROM,                   
    DVD_R,                     
    DVD_RW,                    
    MO_3_RW,                   
    MO_5_WO,                   
    MO_5_RW,                   
    MO_5_LIMDOW,               
    PC_5_WO,                   
    PC_5_RW,                   
    PD_5_RW,                   
    ABL_5_WO,                  
    PINNACLE_APEX_5_RW,        
    SONY_12_WO,                
    PHILIPS_12_WO,             
    HITACHI_12_WO,             
    CYGNET_12_WO,              
    KODAK_14_WO,               
    MO_NFR_525,                
    NIKON_12_RW,               
    IOMEGA_ZIP,                
    IOMEGA_JAZ,                
    SYQUEST_EZ135,             
    SYQUEST_EZFLYER,           
    SYQUEST_SYJET,             
    AVATAR_F2,                 
    MP2_8mm,                   
    DST_S,                     
    DST_M,                     
    DST_L,                     
    VXATape_1,                 
    VXATape_2,                 

    STK_9840,                  

    LTO_Ultrium,               
    LTO_Accelis,               
    DVD_RAM,                   
    AIT_8mm,                   
    ADR_1,                     
    ADR_2,
    STK_9940,                  
    SAIT                       
}STORAGE_MEDIA_TYPE, *PSTORAGE_MEDIA_TYPE;

typedef enum _STORAGE_BUS_TYPE {
    BusTypeUnknown = 0x00,
    BusTypeScsi,
    BusTypeAtapi,
    BusTypeAta,
    BusType1394,
    BusTypeSsa,
    BusTypeFibre,
    BusTypeUsb,
    BusTypeRAID,
    BusTypeiScsi,
    BusTypeSas,
    BusTypeSata,
    BusTypeSd,
    BusTypeMmc,
    BusTypeMax,
    BusTypeMaxReserved = 0x7F
} STORAGE_BUS_TYPE, *PSTORAGE_BUS_TYPE;

<struct name="_DEVICE_MEDIA_INFO">
    union {
<struct>
<field name="Cylinders">LARGE_INTEGER</field>
<field name="MediaType">STORAGE_MEDIA_TYPE</field>
<field name="TracksPerCylinder">DWORD</field>
<field name="SectorsPerTrack">DWORD</field>
<field name="BytesPerSector">DWORD</field>
<field name="NumberMediaSides">DWORD</field>
<field name="MediaCharacteristics">DWORD</field> 
        } DiskInfo;

<struct>
<field name="Cylinders">LARGE_INTEGER</field>
<field name="MediaType">STORAGE_MEDIA_TYPE</field>
<field name="TracksPerCylinder">DWORD</field>
<field name="SectorsPerTrack">DWORD</field>
<field name="BytesPerSector">DWORD</field>
<field name="NumberMediaSides">DWORD</field>
<field name="MediaCharacteristics">DWORD</field> 
        } RemovableDiskInfo;

<struct>
<field name="MediaType">STORAGE_MEDIA_TYPE</field>
<field name="MediaCharacteristics">DWORD</field> 
            DWORD   CurrentBlockSize;
            STORAGE_BUS_TYPE BusType;

            
            
            

            union {
<struct>
<field name="MediumType">BYTE</field>
<field name="DensityCode">BYTE</field>
<field name="ScsiInformation">}</field>
<field name="BusSpecificData">}</field>

        } TapeInfo;
    } DeviceSpecific;
} DEVICE_MEDIA_INFO, *PDEVICE_MEDIA_INFO;

<struct name="_GET_MEDIA_TYPES">
<field name="DeviceType">DWORD</field>
<field name="MediaInfoCount">DWORD</field>
<field name="MediaInfo[1]">DEVICE_MEDIA_INFO</field>
</struct>
<typedefprev id="GET_MEDIA_TYPES"/>
<typedefptrprev id="PGET_MEDIA_TYPES"/>

<struct name="_STORAGE_PREDICT_FAILURE">
<field name="PredictFailure">DWORD</field>
<field name="VendorSpecific[512]">BYTE</field>
</struct>
<typedefprev id="STORAGE_PREDICT_FAILURE"/>
<typedefptrprev id="PSTORAGE_PREDICT_FAILURE"/>

typedef enum _STORAGE_QUERY_TYPE {
    PropertyStandardQuery = 0,          
    PropertyExistsQuery,                
    PropertyMaskQuery,                  
    PropertyQueryMaxDefined     
} STORAGE_QUERY_TYPE, *PSTORAGE_QUERY_TYPE;
typedef enum _STORAGE_PROPERTY_ID {
    StorageDeviceProperty = 0,
    StorageAdapterProperty,
    StorageDeviceIdProperty,
    StorageDeviceUniqueIdProperty,              
    StorageDeviceWriteCacheProperty,
    StorageMiniportProperty,
    StorageAccessAlignmentProperty
} STORAGE_PROPERTY_ID, *PSTORAGE_PROPERTY_ID;

<struct name="_STORAGE_PROPERTY_QUERY">

    
    
    

    STORAGE_PROPERTY_ID PropertyId;

    
    
    

    STORAGE_QUERY_TYPE QueryType;

    
    
    

    BYTE  AdditionalParameters[1];

} STORAGE_PROPERTY_QUERY, *PSTORAGE_PROPERTY_QUERY;

<struct name="_STORAGE_DESCRIPTOR_HEADER">

    DWORD Version;

    DWORD Size;

} STORAGE_DESCRIPTOR_HEADER, *PSTORAGE_DESCRIPTOR_HEADER;
<struct name="_STORAGE_DEVICE_DESCRIPTOR">

    
    
    

    DWORD Version;

    
    
    
    

    DWORD Size;

    
    
    

    BYTE  DeviceType;

    
    
    

    BYTE  DeviceTypeModifier;

    
    
    
    

    BOOLEAN RemovableMedia;

    
    
    
    
    

    BOOLEAN CommandQueueing;

    
    
    
    

    DWORD VendorIdOffset;

    
    
    
    

    DWORD ProductIdOffset;

    
    
    
    
    

    DWORD ProductRevisionOffset;

    
    
    
    

    DWORD SerialNumberOffset;

    
    
    
    
    

    STORAGE_BUS_TYPE BusType;

    
    
    
    

    DWORD RawPropertiesLength;

    
    
    

    BYTE  RawDeviceProperties[1];

} STORAGE_DEVICE_DESCRIPTOR, *PSTORAGE_DEVICE_DESCRIPTOR;
<struct name="_STORAGE_ADAPTER_DESCRIPTOR">

    DWORD Version;

    DWORD Size;

    DWORD MaximumTransferLength;

    DWORD MaximumPhysicalPages;

    DWORD AlignmentMask;

    BOOLEAN AdapterUsesPio;

    BOOLEAN AdapterScansDown;

    BOOLEAN CommandQueueing;

    BOOLEAN AcceleratedTransfer;

    BYTE  BusType;
    WORD   BusMajorVersion;

    WORD   BusMinorVersion;

} STORAGE_ADAPTER_DESCRIPTOR, *PSTORAGE_ADAPTER_DESCRIPTOR;

<struct name="_STORAGE_ACCESS_ALIGNMENT_DESCRIPTOR">

    
    
    

    DWORD Version;

    
    
    
    

    DWORD Size;

    
    
    

    DWORD BytesPerCacheLine;

    
    
    

    DWORD BytesOffsetForCacheAlignment;

    
    
    

    DWORD BytesPerLogicalSector;

    
    
    

    DWORD BytesPerPhysicalSector;

    
    
    

    DWORD BytesOffsetForSectorAlignment;

} STORAGE_ACCESS_ALIGNMENT_DESCRIPTOR, *PSTORAGE_ACCESS_ALIGNMENT_DESCRIPTOR;
typedef enum _STORAGE_PORT_CODE_SET {
    StoragePortCodeSetReserved = 0,
    StoragePortCodeSetStorport = 1,
    StoragePortCodeSetSCSIport = 2
} STORAGE_PORT_CODE_SET, *PSTORAGE_PORT_CODE_SET;

<struct name="_STORAGE_MINIPORT_DESCRIPTOR">

    DWORD Version;

    DWORD Size;

    STORAGE_PORT_CODE_SET Portdriver;

    BOOLEAN LUNResetSupported;

    BOOLEAN TargetResetSupported;
} STORAGE_MINIPORT_DESCRIPTOR, *PSTORAGE_MINIPORT_DESCRIPTOR;
typedef enum _STORAGE_IDENTIFIER_CODE_SET {
    StorageIdCodeSetReserved = 0,
    StorageIdCodeSetBinary = 1,
    StorageIdCodeSetAscii = 2,
    StorageIdCodeSetUtf8 = 3
} STORAGE_IDENTIFIER_CODE_SET, *PSTORAGE_IDENTIFIER_CODE_SET;

typedef enum _STORAGE_IDENTIFIER_TYPE {
    StorageIdTypeVendorSpecific = 0,
    StorageIdTypeVendorId = 1,
    StorageIdTypeEUI64 = 2,
    StorageIdTypeFCPHName = 3,
    StorageIdTypePortRelative = 4,
    StorageIdTypeTargetPortGroup = 5,
    StorageIdTypeLogicalUnitGroup = 6,
    StorageIdTypeMD5LogicalUnitIdentifier = 7,
    StorageIdTypeScsiNameString = 8
} STORAGE_IDENTIFIER_TYPE, *PSTORAGE_IDENTIFIER_TYPE;
typedef enum _STORAGE_ID_NAA_FORMAT {
        StorageIdNAAFormatIEEEExtended = 2,
        StorageIdNAAFormatIEEERegistered = 3,
        StorageIdNAAFormatIEEEERegisteredExtended = 5
} STORAGE_ID_NAA_FORMAT, *PSTORAGE_ID_NAA_FORMAT;

typedef enum _STORAGE_ASSOCIATION_TYPE {
    StorageIdAssocDevice = 0,
    StorageIdAssocPort = 1,
    StorageIdAssocTarget = 2
} STORAGE_ASSOCIATION_TYPE, *PSTORAGE_ASSOCIATION_TYPE;

<struct name="_STORAGE_IDENTIFIER">
<field name="CodeSet">STORAGE_IDENTIFIER_CODE_SET</field>
<field name="Type">STORAGE_IDENTIFIER_TYPE</field>
<field name="IdentifierSize">WORD</field>
<field name="NextOffset">WORD</field>
    
    
    
    

    STORAGE_ASSOCIATION_TYPE Association;

    
    
    

    BYTE  Identifier[1];
} STORAGE_IDENTIFIER, *PSTORAGE_IDENTIFIER;

<struct name="_STORAGE_DEVICE_ID_DESCRIPTOR">

    DWORD Version;

    DWORD Size;

    
    
    

    DWORD NumberOfIdentifiers;

    
    
    
    
    

    BYTE  Identifiers[1];
} STORAGE_DEVICE_ID_DESCRIPTOR, *PSTORAGE_DEVICE_ID_DESCRIPTOR;
<struct name="_STORAGE_GET_BC_PROPERTIES_OUTPUT">

    
    
    
    
    DWORD MaximumRequestsPerPeriod;

    
    
    
    
    DWORD MinimumPeriod;

    
    
    
    
    
    
    DWORDLONG MaximumRequestSize;

    
    
    
    
    
    DWORD EstimatedTimePerRequest;

    
    
    
    
    
    
    
    DWORD NumOutStandingRequests;
    
    
    
    
    
    
    DWORDLONG RequestSize;
    
} STORAGE_GET_BC_PROPERTIES_OUTPUT, *PSTORAGE_GET_BC_PROPERTIES_OUTPUT;

<struct name="_STORAGE_ALLOCATE_BC_STREAM_INPUT">

    
    
    
    DWORD Version;

    
    
    
    
    DWORD RequestsPerPeriod;

    
    
    
    
    DWORD Period;

    
    
    
    
    BOOLEAN RetryFailures;

    
    
    
    
    BOOLEAN Discardable;

    
    
    
    BOOLEAN Reserved1[2];

    
    
    
    
    DWORD AccessType;

    
    
    
    
    DWORD AccessMode;

} STORAGE_ALLOCATE_BC_STREAM_INPUT, *PSTORAGE_ALLOCATE_BC_STREAM_INPUT;

<struct name="_STORAGE_ALLOCATE_BC_STREAM_OUTPUT">

    
    
    
    
    DWORDLONG RequestSize;

    
    
    
    
    
    DWORD NumOutStandingRequests;

} STORAGE_ALLOCATE_BC_STREAM_OUTPUT, *PSTORAGE_ALLOCATE_BC_STREAM_OUTPUT;
<struct name="_STORAGE_PRIORITY_HINT_SUPPORT">
<field name="SupportFlags">DWORD</field>
</struct>
<typedefprev id="STORAGE_PRIORITY_HINT_SUPPORT"/>
<typedefptrprev id="PSTORAGE_PRIORITY_HINT_SUPPORT"/>

#pragma warning(push)
#pragma warning(disable:4200)
<struct name="_STORAGE_MEDIA_SERIAL_NUMBER_DATA">

    WORD   Reserved;

    
    
    
    
    

    WORD   SerialNumberLength;

    
    
    
    
    
    BYTE  SerialNumber[0];

} STORAGE_MEDIA_SERIAL_NUMBER_DATA, *PSTORAGE_MEDIA_SERIAL_NUMBER_DATA;

<struct name="_STORAGE_READ_CAPACITY">

    
    
    
    DWORD Version;

    
    
    
    DWORD Size;

    
    
    

    DWORD BlockLength;

    
    
    
    

    LARGE_INTEGER NumberOfBlocks;

    
    
    

    LARGE_INTEGER DiskLength;

} STORAGE_READ_CAPACITY, *PSTORAGE_READ_CAPACITY;

#pragma warning(pop)

typedef enum _WRITE_CACHE_TYPE {
    WriteCacheTypeUnknown,
    WriteCacheTypeNone,
    WriteCacheTypeWriteBack,
    WriteCacheTypeWriteThrough
} WRITE_CACHE_TYPE;

typedef enum _WRITE_CACHE_ENABLE {
    WriteCacheEnableUnknown,
    WriteCacheDisabled,
    WriteCacheEnabled
} WRITE_CACHE_ENABLE;

typedef enum _WRITE_CACHE_CHANGE {
    WriteCacheChangeUnknown,
    WriteCacheNotChangeable,
    WriteCacheChangeable
} WRITE_CACHE_CHANGE;

typedef enum _WRITE_THROUGH {
    WriteThroughUnknown,
    WriteThroughNotSupported,
    WriteThroughSupported
} WRITE_THROUGH;

<struct name="_STORAGE_WRITE_CACHE_PROPERTY">

    
    
    
    
    DWORD Version;

    
    
    
    
    DWORD Size;

    
    
    
    WRITE_CACHE_TYPE WriteCacheType;

    
    
    
    WRITE_CACHE_ENABLE WriteCacheEnabled;

    
    
    
    WRITE_CACHE_CHANGE WriteCacheChangeable;

    
    
    
    WRITE_THROUGH WriteThroughSupported;

    
    
    
    BOOLEAN FlushCacheSupported;

    
    
    
    BOOLEAN UserDefinedPowerProtection;

    
    
    
    BOOLEAN NVCacheEnabled;

} STORAGE_WRITE_CACHE_PROPERTY, *PSTORAGE_WRITE_CACHE_PROPERTY;
#pragma warning(push)
#pragma warning(disable:4200) 
#pragma warning(disable:4201) 
#pragma warning(disable:4214) 

<struct name="_PERSISTENT_RESERVE_COMMAND">

    DWORD Version;
    DWORD Size;

    union {

<struct>

            
            
            

            BYTE  ServiceAction : 5;
            BYTE  Reserved1 : 3;

            
            
            

            WORD   AllocationLength;

        } PR_IN;

<struct>

            
            
            

            BYTE  ServiceAction : 5;
            BYTE  Reserved1 : 3;

            
            
            

            BYTE  Type : 4;
            BYTE  Scope : 4;

            
            
            
            BYTE  ParameterList[0];

        } PR_OUT;
    };

} PERSISTENT_RESERVE_COMMAND, *PPERSISTENT_RESERVE_COMMAND;

#pragma warning(pop)
typedef enum _MEDIA_TYPE {
    Unknown,                
    F5_1Pt2_512,            
    F3_1Pt44_512,           
    F3_2Pt88_512,           
    F3_20Pt8_512,           
    F3_720_512,             
    F5_360_512,             
    F5_320_512,             
    F5_320_1024,            
    F5_180_512,             
    F5_160_512,             
    RemovableMedia,         
    FixedMedia,             
    F3_120M_512,            
    F3_640_512,             
    F5_640_512,             
    F5_720_512,             
    F3_1Pt2_512,            
    F3_1Pt23_1024,          
    F5_1Pt23_1024,          
    F3_128Mb_512,           
    F3_230Mb_512,           
    F8_256_128,             
    F3_200Mb_512,           
    F3_240M_512,            
    F3_32M_512              
} MEDIA_TYPE, *PMEDIA_TYPE;

<struct name="_FORMAT_PARAMETERS">
<field name="MediaType">MEDIA_TYPE</field>
<field name="StartCylinderNumber">DWORD</field>
<field name="EndCylinderNumber">DWORD</field>
<field name="StartHeadNumber">DWORD</field>
<field name="EndHeadNumber">DWORD</field>
</struct>
<typedefprev id="FORMAT_PARAMETERS"/>
<typedefptrprev id="PFORMAT_PARAMETERS"/>

typedef WORD   BAD_TRACK_NUMBER;
typedef WORD   *PBAD_TRACK_NUMBER;

<struct name="_FORMAT_EX_PARAMETERS">
<field name="MediaType">MEDIA_TYPE</field>
<field name="StartCylinderNumber">DWORD</field>
<field name="EndCylinderNumber">DWORD</field>
<field name="StartHeadNumber">DWORD</field>
<field name="EndHeadNumber">DWORD</field>
<field name="FormatGapLength">WORD</field>
<field name="SectorsPerTrack">WORD</field>
<field name="SectorNumber[1]">WORD</field>
</struct>
<typedefprev id="FORMAT_EX_PARAMETERS"/>
<typedefptrprev id="PFORMAT_EX_PARAMETERS"/>
<struct name="_DISK_GEOMETRY">
<field name="Cylinders">LARGE_INTEGER</field>
<field name="MediaType">MEDIA_TYPE</field>
<field name="TracksPerCylinder">DWORD</field>
<field name="SectorsPerTrack">DWORD</field>
<field name="BytesPerSector">DWORD</field>
</struct>
<typedefprev id="DISK_GEOMETRY"/>
<typedefptrprev id="PDISK_GEOMETRY"/>
<struct name="_PARTITION_INFORMATION">
<field name="StartingOffset">LARGE_INTEGER</field>
<field name="PartitionLength">LARGE_INTEGER</field>
<field name="HiddenSectors">DWORD</field>
<field name="PartitionNumber">DWORD</field>
<field name="PartitionType">BYTE</field>
<field name="BootIndicator">BOOLEAN</field>
<field name="RecognizedPartition">BOOLEAN</field>
<field name="RewritePartition">BOOLEAN</field>
</struct>
<typedefprev id="PARTITION_INFORMATION"/>
<typedefptrprev id="PPARTITION_INFORMATION"/>
<struct name="_SET_PARTITION_INFORMATION">
<field name="PartitionType">BYTE</field>
</struct>
<typedefprev id="SET_PARTITION_INFORMATION"/>
<typedefptrprev id="PSET_PARTITION_INFORMATION"/>

<struct name="_DRIVE_LAYOUT_INFORMATION">
<field name="PartitionCount">DWORD</field>
<field name="Signature">DWORD</field>
<field name="PartitionEntry[1]">PARTITION_INFORMATION</field>
</struct>
<typedefprev id="DRIVE_LAYOUT_INFORMATION"/>
<typedefptrprev id="PDRIVE_LAYOUT_INFORMATION"/>

<struct name="_VERIFY_INFORMATION">
<field name="StartingOffset">LARGE_INTEGER</field>
<field name="Length">DWORD</field>
</struct>
<typedefprev id="VERIFY_INFORMATION"/>
<typedefptrprev id="PVERIFY_INFORMATION"/>

<struct name="_REASSIGN_BLOCKS">
<field name="Reserved">WORD</field>
<field name="Count">WORD</field>
<field name="BlockNumber[1]">DWORD</field>
</struct>
<typedefprev id="REASSIGN_BLOCKS"/>
<typedefptrprev id="PREASSIGN_BLOCKS"/>

#line 1 "\\program files\\Microsoft SDKs\\Windows\\v6.0A\\Include\\pshpack1.h"
#pragma warning(disable:4103)

#pragma pack(push,1)

<struct name="_REASSIGN_BLOCKS_EX">
<field name="Reserved">WORD</field>
<field name="Count">WORD</field>
<field name="BlockNumber[1]">LARGE_INTEGER</field>
</struct>
<typedefprev id="REASSIGN_BLOCKS_EX"/>
<typedefptrprev id="PREASSIGN_BLOCKS_EX"/>
#line 1 "\\program files\\Microsoft SDKs\\Windows\\v6.0A\\Include\\poppack.h"
#pragma warning(disable:4103)

#pragma pack(pop)

typedef enum _PARTITION_STYLE {
    PARTITION_STYLE_MBR,
    PARTITION_STYLE_GPT,
    PARTITION_STYLE_RAW
} PARTITION_STYLE;
<struct name="_PARTITION_INFORMATION_GPT">
<field name="PartitionType">GUID</field>
<field name="PartitionId">GUID</field>
<field name="Attributes">DWORD64</field>
    WCHAR Name [36];                    
} PARTITION_INFORMATION_GPT, *PPARTITION_INFORMATION_GPT;
<struct name="_PARTITION_INFORMATION_MBR">
<field name="PartitionType">BYTE</field>
<field name="BootIndicator">BOOLEAN</field>
<field name="RecognizedPartition">BOOLEAN</field>
<field name="HiddenSectors">DWORD</field>
</struct>
<typedefprev id="PARTITION_INFORMATION_MBR"/>
<typedefptrprev id="PPARTITION_INFORMATION_MBR"/>
typedef SET_PARTITION_INFORMATION SET_PARTITION_INFORMATION_MBR;
typedef PARTITION_INFORMATION_GPT SET_PARTITION_INFORMATION_GPT;
<struct name="_SET_PARTITION_INFORMATION_EX">
<field name="PartitionStyle">PARTITION_STYLE</field>
    union {
        SET_PARTITION_INFORMATION_MBR Mbr;
        SET_PARTITION_INFORMATION_GPT Gpt;
    };
} SET_PARTITION_INFORMATION_EX, *PSET_PARTITION_INFORMATION_EX;
<struct name="_CREATE_DISK_GPT">
<field name="DiskId">GUID</field>
<field name="MaxPartitionCount">DWORD</field>
</struct>
<typedefprev id="CREATE_DISK_GPT"/>
<typedefptrprev id="PCREATE_DISK_GPT"/>

<struct name="_CREATE_DISK_MBR">
<field name="Signature">DWORD</field>
</struct>
<typedefprev id="CREATE_DISK_MBR"/>
<typedefptrprev id="PCREATE_DISK_MBR"/>
<struct name="_CREATE_DISK">
<field name="PartitionStyle">PARTITION_STYLE</field>
    union {
        CREATE_DISK_MBR Mbr;
        CREATE_DISK_GPT Gpt;
    };
} CREATE_DISK, *PCREATE_DISK;

<struct name="_GET_LENGTH_INFORMATION">
<field name="Length">LARGE_INTEGER</field>
</struct>
<typedefprev id="GET_LENGTH_INFORMATION"/>
<typedefptrprev id="PGET_LENGTH_INFORMATION"/>
<struct name="_PARTITION_INFORMATION_EX">
<field name="PartitionStyle">PARTITION_STYLE</field>
<field name="StartingOffset">LARGE_INTEGER</field>
<field name="PartitionLength">LARGE_INTEGER</field>
<field name="PartitionNumber">DWORD</field>
<field name="RewritePartition">BOOLEAN</field>
    union {
        PARTITION_INFORMATION_MBR Mbr;
        PARTITION_INFORMATION_GPT Gpt;
    };
} PARTITION_INFORMATION_EX, *PPARTITION_INFORMATION_EX;

<struct name="_DRIVE_LAYOUT_INFORMATION_GPT">
<field name="DiskId">GUID</field>
<field name="StartingUsableOffset">LARGE_INTEGER</field>
<field name="UsableLength">LARGE_INTEGER</field>
<field name="MaxPartitionCount">DWORD</field>
</struct>
<typedefprev id="DRIVE_LAYOUT_INFORMATION_GPT"/>
<typedefptrprev id="PDRIVE_LAYOUT_INFORMATION_GPT"/>

<struct name="_DRIVE_LAYOUT_INFORMATION_MBR">
<field name="Signature">DWORD</field>
</struct>
<typedefprev id="DRIVE_LAYOUT_INFORMATION_MBR"/>
<typedefptrprev id="PDRIVE_LAYOUT_INFORMATION_MBR"/>

<struct name="_DRIVE_LAYOUT_INFORMATION_EX">
<field name="PartitionStyle">DWORD</field>
<field name="PartitionCount">DWORD</field>
    union {
        DRIVE_LAYOUT_INFORMATION_MBR Mbr;
        DRIVE_LAYOUT_INFORMATION_GPT Gpt;
    };
    PARTITION_INFORMATION_EX PartitionEntry[1];
} DRIVE_LAYOUT_INFORMATION_EX, *PDRIVE_LAYOUT_INFORMATION_EX;
typedef enum _DETECTION_TYPE {
        DetectNone,
        DetectInt13,
        DetectExInt13
} DETECTION_TYPE;

<struct name="_DISK_INT13_INFO">
<field name="DriveSelect">WORD</field>
<field name="MaxCylinders">DWORD</field>
<field name="SectorsPerTrack">WORD</field>
<field name="MaxHeads">WORD</field>
<field name="NumberDrives">WORD</field>
</struct>
<typedefprev id="DISK_INT13_INFO"/>
<typedefptrprev id="PDISK_INT13_INFO"/>

<struct name="_DISK_EX_INT13_INFO">
<field name="ExBufferSize">WORD</field>
<field name="ExFlags">WORD</field>
<field name="ExCylinders">DWORD</field>
<field name="ExHeads">DWORD</field>
<field name="ExSectorsPerTrack">DWORD</field>
<field name="ExSectorsPerDrive">DWORD64</field>
<field name="ExSectorSize">WORD</field>
<field name="ExReserved">WORD</field>
</struct>
<typedefprev id="DISK_EX_INT13_INFO"/>
<typedefptrprev id="PDISK_EX_INT13_INFO"/>

<struct name="_DISK_DETECTION_INFO">
<field name="SizeOfDetectInfo">DWORD</field>
<field name="DetectionType">DETECTION_TYPE</field>
        union {
<struct>

                        
                        
                        
                        

                        DISK_INT13_INFO Int13;

                        
                        
                        
                        

                        DISK_EX_INT13_INFO ExInt13;     
                };
        };
} DISK_DETECTION_INFO, *PDISK_DETECTION_INFO;
<struct name="_DISK_PARTITION_INFO">
<field name="SizeOfPartitionInfo">DWORD</field>
<field name="PartitionStyle">PARTITION_STYLE</field>
        union {
<struct>                                                        
                        DWORD Signature;                                
                        DWORD CheckSum;                                 
                } Mbr;
<struct>                                                        
                        GUID DiskId;
                } Gpt;
        };
} DISK_PARTITION_INFO, *PDISK_PARTITION_INFO;

<struct name="_DISK_GEOMETRY_EX">
<field name="Geometry">DISK_GEOMETRY</field>
<field name="DiskSize">LARGE_INTEGER</field>
<field name="Data[1]">BYTE</field>
</struct>
<typedefprev id="DISK_GEOMETRY_EX"/>
<typedefptrprev id="PDISK_GEOMETRY_EX"/>
<struct name="_DISK_CONTROLLER_NUMBER">
<field name="ControllerNumber">DWORD</field>
<field name="DiskNumber">DWORD</field>
</struct>
<typedefprev id="DISK_CONTROLLER_NUMBER"/>
<typedefptrprev id="PDISK_CONTROLLER_NUMBER"/>
typedef enum {
    EqualPriority,
    KeepPrefetchedData,
    KeepReadData
} DISK_CACHE_RETENTION_PRIORITY;
<struct name="_DISK_CACHE_INFORMATION">

    
    
    
    
    

    BOOLEAN ParametersSavable;

    
    
    

    BOOLEAN ReadCacheEnabled;
    BOOLEAN WriteCacheEnabled;

    
    
    
    
    
    

    DISK_CACHE_RETENTION_PRIORITY ReadRetentionPriority;
    DISK_CACHE_RETENTION_PRIORITY WriteRetentionPriority;

    
    
    
    

    WORD   DisablePrefetchTransferLength;

    
    
    
    
    

    BOOLEAN PrefetchScalar;

    
    
    
    
    
    
    

    union {
<struct>
<field name="Minimum">WORD</field>
<field name="Maximum">WORD</field>

            
            
            
            

            WORD   MaximumBlocks;
        } ScalarPrefetch;

<struct>
<field name="Minimum">WORD</field>
<field name="Maximum">WORD</field>
<field name="BlockPrefetch">}</field>
    };

} DISK_CACHE_INFORMATION, *PDISK_CACHE_INFORMATION;
<struct name="_DISK_GROW_PARTITION">
<field name="PartitionNumber">DWORD</field>
<field name="BytesToGrow">LARGE_INTEGER</field>
</struct>
<typedefprev id="DISK_GROW_PARTITION"/>
<typedefptrprev id="PDISK_GROW_PARTITION"/>

<struct name="_HISTOGRAM_BUCKET">
<field name="Reads">DWORD</field>
<field name="Writes">DWORD</field>
</struct>
<typedefprev id="HISTOGRAM_BUCKET"/>
<typedefptrprev id="PHISTOGRAM_BUCKET"/>
<struct name="_DISK_HISTOGRAM">
<field name="DiskSize">LARGE_INTEGER</field>
<field name="Start">LARGE_INTEGER</field>
<field name="End">LARGE_INTEGER</field>
<field name="Average">LARGE_INTEGER</field>
<field name="AverageRead">LARGE_INTEGER</field>
<field name="AverageWrite">LARGE_INTEGER</field>
<field name="Granularity">DWORD</field>
<field name="Size">DWORD</field>
<field name="ReadCount">DWORD</field>
<field name="WriteCount">DWORD</field>
<field name="Histogram">PHISTOGRAM_BUCKET</field>
</struct>
<typedefprev id="DISK_HISTOGRAM"/>
<typedefptrprev id="PDISK_HISTOGRAM"/>
<struct name="_DISK_PERFORMANCE">
<field name="BytesRead">LARGE_INTEGER</field>
<field name="BytesWritten">LARGE_INTEGER</field>
<field name="ReadTime">LARGE_INTEGER</field>
<field name="WriteTime">LARGE_INTEGER</field>
<field name="IdleTime">LARGE_INTEGER</field>
<field name="ReadCount">DWORD</field>
<field name="WriteCount">DWORD</field>
<field name="QueueDepth">DWORD</field>
<field name="SplitCount">DWORD</field>
<field name="QueryTime">LARGE_INTEGER</field>
<field name="StorageDeviceNumber">DWORD</field>
<field name="StorageManagerName[8]">WCHAR</field>
</struct>
<typedefprev id="DISK_PERFORMANCE"/>
<typedefptrprev id="PDISK_PERFORMANCE"/>
<struct name="_DISK_RECORD">
<field name="ByteOffset">LARGE_INTEGER</field>
<field name="StartTime">LARGE_INTEGER</field>
<field name="EndTime">LARGE_INTEGER</field>
<field name="VirtualAddress">PVOID</field>
<field name="NumberOfBytes">DWORD</field>
<field name="DeviceNumber">BYTE</field>
<field name="ReadRequest">BOOLEAN</field>
</struct>
<typedefprev id="DISK_RECORD"/>
<typedefptrprev id="PDISK_RECORD"/>

<struct name="_DISK_LOGGING">
<field name="Function">BYTE</field>
<field name="BufferAddress">PVOID</field>
<field name="BufferSize">DWORD</field>
</struct>
<typedefprev id="DISK_LOGGING"/>
<typedefptrprev id="PDISK_LOGGING"/>

typedef enum _BIN_TYPES {
    RequestSize,
    RequestLocation
} BIN_TYPES;
<struct name="_BIN_RANGE">
<field name="StartValue">LARGE_INTEGER</field>
<field name="Length">LARGE_INTEGER</field>
</struct>
<typedefprev id="BIN_RANGE"/>
<typedefptrprev id="PBIN_RANGE"/>
<struct name="_PERF_BIN">
<field name="NumberOfBins">DWORD</field>
<field name="TypeOfBin">DWORD</field>
<field name="BinsRanges[1]">BIN_RANGE</field>
} PERF_BIN, *PPERF_BIN ;
<struct name="_BIN_COUNT">
<field name="BinRange">BIN_RANGE</field>
<field name="BinCount">DWORD</field>
</struct>
<typedefprev id="BIN_COUNT"/>
<typedefptrprev id="PBIN_COUNT"/>
<struct name="_BIN_RESULTS">
<field name="NumberOfBins">DWORD</field>
<field name="BinCounts[1]">BIN_COUNT</field>
</struct>
<typedefprev id="BIN_RESULTS"/>
<typedefptrprev id="PBIN_RESULTS"/>
#line 1 "\\program files\\Microsoft SDKs\\Windows\\v6.0A\\Include\\pshpack1.h"
#pragma warning(disable:4103)

#pragma pack(push,1)
<struct name="_GETVERSIONINPARAMS">
<field name="bVersion">BYTE</field>
<field name="bRevision">BYTE</field>
<field name="bReserved">BYTE</field>
<field name="bIDEDeviceMap">BYTE</field>
<field name="fCapabilities">DWORD</field>
<field name="dwReserved[4]">DWORD</field>
} GETVERSIONINPARAMS, *PGETVERSIONINPARAMS, *LPGETVERSIONINPARAMS;
#line 1 "\\program files\\Microsoft SDKs\\Windows\\v6.0A\\Include\\poppack.h"
#pragma warning(disable:4103)

#pragma pack(pop)

#line 1 "\\program files\\Microsoft SDKs\\Windows\\v6.0A\\Include\\pshpack1.h"
#pragma warning(disable:4103)

#pragma pack(push,1)
<struct name="_IDEREGS">
<field name="bFeaturesReg">BYTE</field>
<field name="bSectorCountReg">BYTE</field>
<field name="bSectorNumberReg">BYTE</field>
<field name="bCylLowReg">BYTE</field>
<field name="bCylHighReg">BYTE</field>
<field name="bDriveHeadReg">BYTE</field>
<field name="bCommandReg">BYTE</field>
<field name="bReserved">BYTE</field>
} IDEREGS, *PIDEREGS, *LPIDEREGS;
#line 1 "\\program files\\Microsoft SDKs\\Windows\\v6.0A\\Include\\poppack.h"
#pragma warning(disable:4103)

#pragma pack(pop)

                                        
                                        

#line 1 "\\program files\\Microsoft SDKs\\Windows\\v6.0A\\Include\\pshpack1.h"
#pragma warning(disable:4103)

#pragma pack(push,1)
<struct name="_SENDCMDINPARAMS">
<field name="cBufferSize">DWORD</field>
<field name="irDriveRegs">IDEREGS</field>
<field name="bDriveNumber">BYTE</field>
                                                                
        BYTE     bReserved[3];           
        DWORD   dwReserved[4];          
        BYTE     bBuffer[1];                     
} SENDCMDINPARAMS, *PSENDCMDINPARAMS, *LPSENDCMDINPARAMS;
#line 1 "\\program files\\Microsoft SDKs\\Windows\\v6.0A\\Include\\poppack.h"
#pragma warning(disable:4103)

#pragma pack(pop)
#line 1 "\\program files\\Microsoft SDKs\\Windows\\v6.0A\\Include\\pshpack1.h"
#pragma warning(disable:4103)

#pragma pack(push,1)
<struct name="_DRIVERSTATUS">
<field name="bDriverError">BYTE</field>
                                                                
        BYTE     bIDEError;                      
                                                                
                                                                
        BYTE     bReserved[2];           
        DWORD   dwReserved[2];          
} DRIVERSTATUS, *PDRIVERSTATUS, *LPDRIVERSTATUS;
#line 1 "\\program files\\Microsoft SDKs\\Windows\\v6.0A\\Include\\poppack.h"
#pragma warning(disable:4103)

#pragma pack(pop)
                                        

#line 1 "\\program files\\Microsoft SDKs\\Windows\\v6.0A\\Include\\pshpack1.h"
#pragma warning(disable:4103)

#pragma pack(push,1)
<struct name="_SENDCMDOUTPARAMS">
<field name="cBufferSize">DWORD</field>
<field name="DriverStatus">DRIVERSTATUS</field>
<field name="bBuffer[1]">BYTE</field>
} SENDCMDOUTPARAMS, *PSENDCMDOUTPARAMS, *LPSENDCMDOUTPARAMS;
#line 1 "\\program files\\Microsoft SDKs\\Windows\\v6.0A\\Include\\poppack.h"
#pragma warning(disable:4103)

#pragma pack(pop)

typedef  enum _ELEMENT_TYPE {
    AllElements,        
    ChangerTransport,   
    ChangerSlot,        
    ChangerIEPort,      
    ChangerDrive,       
    ChangerDoor,        
    ChangerKeypad,      
    ChangerMaxElement   
} ELEMENT_TYPE, *PELEMENT_TYPE;

<struct name="_CHANGER_ELEMENT">
<field name="ElementType">ELEMENT_TYPE</field>
<field name="ElementAddress">DWORD</field>
</struct>
<typedefprev id="CHANGER_ELEMENT"/>
<typedefptrprev id="PCHANGER_ELEMENT"/>

<struct name="_CHANGER_ELEMENT_LIST">
<field name="Element">CHANGER_ELEMENT</field>
<field name="NumberOfElements">DWORD</field>
} CHANGER_ELEMENT_LIST , *PCHANGER_ELEMENT_LIST;

                                                       
                                                       

                                                       
                                                       

                                                       

<struct name="_GET_CHANGER_PARAMETERS">

    
    
    

    DWORD Size;

    
    
    

    WORD   NumberTransportElements;
    WORD   NumberStorageElements;                
    WORD   NumberCleanerSlots;                   
    WORD   NumberIEElements;
    WORD   NumberDataTransferElements;

    
    
    

    WORD   NumberOfDoors;

    
    
    
    

    WORD   FirstSlotNumber;
    WORD   FirstDriveNumber;
    WORD   FirstTransportNumber;
    WORD   FirstIEPortNumber;
    WORD   FirstCleanerSlotAddress;

    
    
    

    WORD   MagazineSize;

    
    
    
    

    DWORD DriveCleanTimeout;

    
    
    

    DWORD Features0;
    DWORD Features1;

    
    
    
    

    BYTE  MoveFromTransport;
    BYTE  MoveFromSlot;
    BYTE  MoveFromIePort;
    BYTE  MoveFromDrive;

    
    
    
    

    BYTE  ExchangeFromTransport;
    BYTE  ExchangeFromSlot;
    BYTE  ExchangeFromIePort;
    BYTE  ExchangeFromDrive;

    
    
    
    

    BYTE  LockUnlockCapabilities;

    
    
    
    

    BYTE  PositionCapabilities;

    
    
    

    BYTE  Reserved1[2];
    DWORD Reserved2[2];

} GET_CHANGER_PARAMETERS, * PGET_CHANGER_PARAMETERS;



<struct name="_CHANGER_PRODUCT_DATA">

    
    
    

    BYTE  VendorId[8];

    
    
    

    BYTE  ProductId[16];

    
    
    

    BYTE  Revision[4];

    
    
    
    

    BYTE  SerialNumber[32];

    
    
    

    BYTE  DeviceType;

} CHANGER_PRODUCT_DATA, *PCHANGER_PRODUCT_DATA;


<struct name="_CHANGER_SET_ACCESS">

    
    
    

    CHANGER_ELEMENT Element;

    
    
    

    DWORD           Control;
} CHANGER_SET_ACCESS, *PCHANGER_SET_ACCESS;



<struct name="_CHANGER_READ_ELEMENT_STATUS">

    
    
    

    CHANGER_ELEMENT_LIST ElementList;

    
    
    

    BOOLEAN VolumeTagInfo;
} CHANGER_READ_ELEMENT_STATUS, *PCHANGER_READ_ELEMENT_STATUS;
<struct name="_CHANGER_ELEMENT_STATUS">

    
    
    

    CHANGER_ELEMENT Element;

    
    
    
    
    

    CHANGER_ELEMENT SrcElementAddress;

    
    
    

    DWORD Flags;

    
    
    

    DWORD ExceptionCode;

    
    
    
    

    BYTE  TargetId;

    
    
    
    

    BYTE  Lun;
    WORD   Reserved;

    
    
    
    

    BYTE  PrimaryVolumeID[36];

    
    
    
    
    

    BYTE  AlternateVolumeID[36];

} CHANGER_ELEMENT_STATUS, *PCHANGER_ELEMENT_STATUS;
<struct name="_CHANGER_ELEMENT_STATUS_EX">

    
    
    

    CHANGER_ELEMENT Element;

    
    
    
    
    

    CHANGER_ELEMENT SrcElementAddress;

    
    
    

    DWORD Flags;

    
    
    

    DWORD ExceptionCode;

    
    
    
    

    BYTE  TargetId;

    
    
    
    

    BYTE  Lun;
    WORD   Reserved;

    
    
    
    

    BYTE  PrimaryVolumeID[36];

    
    
    
    
    

    BYTE  AlternateVolumeID[36];

    
    
    
    BYTE  VendorIdentification[8];

    
    
    
    BYTE  ProductIdentification[16];

    
    
    
    BYTE  SerialNumber[32];

} CHANGER_ELEMENT_STATUS_EX, *PCHANGER_ELEMENT_STATUS_EX;



<struct name="_CHANGER_INITIALIZE_ELEMENT_STATUS">

    
    
    

    CHANGER_ELEMENT_LIST ElementList;

    
    
    
    

    BOOLEAN BarCodeScan;
} CHANGER_INITIALIZE_ELEMENT_STATUS, *PCHANGER_INITIALIZE_ELEMENT_STATUS;



<struct name="_CHANGER_SET_POSITION">
    
    
    

    CHANGER_ELEMENT Transport;

    
    
    

    CHANGER_ELEMENT Destination;

    
    
    

    BOOLEAN         Flip;
} CHANGER_SET_POSITION, *PCHANGER_SET_POSITION;



<struct name="_CHANGER_EXCHANGE_MEDIUM">

    
    
    

    CHANGER_ELEMENT Transport;

    
    
    

    CHANGER_ELEMENT Source;

    
    
    

    CHANGER_ELEMENT Destination1;

    
    
    

    CHANGER_ELEMENT Destination2;

    
    
    

    BOOLEAN         Flip1;
    BOOLEAN         Flip2;
} CHANGER_EXCHANGE_MEDIUM, *PCHANGER_EXCHANGE_MEDIUM;



<struct name="_CHANGER_MOVE_MEDIUM">

    
    
    

    CHANGER_ELEMENT Transport;

    
    
    

    CHANGER_ELEMENT Source;

    
    
    

    CHANGER_ELEMENT Destination;

    
    
    

    BOOLEAN         Flip;
} CHANGER_MOVE_MEDIUM, *PCHANGER_MOVE_MEDIUM;


<struct name="_CHANGER_SEND_VOLUME_TAG_INFORMATION">

    
    
    

    CHANGER_ELEMENT StartingElement;

    
    
    

    DWORD ActionCode;

    
    
    

    BYTE  VolumeIDTemplate[40];
} CHANGER_SEND_VOLUME_TAG_INFORMATION, *PCHANGER_SEND_VOLUME_TAG_INFORMATION;

<struct name="_READ_ELEMENT_ADDRESS_INFO">

    
    
    

    DWORD NumberOfElements;

    
    
    
    

    CHANGER_ELEMENT_STATUS ElementStatus[1];
} READ_ELEMENT_ADDRESS_INFO, *PREAD_ELEMENT_ADDRESS_INFO;
typedef enum _CHANGER_DEVICE_PROBLEM_TYPE {
   DeviceProblemNone,
   DeviceProblemHardware,
   DeviceProblemCHMError,
   DeviceProblemDoorOpen,
   DeviceProblemCalibrationError,
   DeviceProblemTargetFailure,
   DeviceProblemCHMMoveError,
   DeviceProblemCHMZeroError,
   DeviceProblemCartridgeInsertError,
   DeviceProblemPositionError,
   DeviceProblemSensorError,
   DeviceProblemCartridgeEjectError,
   DeviceProblemGripperError,
   DeviceProblemDriveError
} CHANGER_DEVICE_PROBLEM_TYPE, *PCHANGER_DEVICE_PROBLEM_TYPE;
<struct name="_PATHNAME_BUFFER">

    DWORD PathNameLength;
    WCHAR Name[1];

} PATHNAME_BUFFER, *PPATHNAME_BUFFER;
<struct name="_FSCTL_QUERY_FAT_BPB_BUFFER">

    BYTE  First0x24BytesOfBootSector[0x24];

} FSCTL_QUERY_FAT_BPB_BUFFER, *PFSCTL_QUERY_FAT_BPB_BUFFER;
<struct>

    LARGE_INTEGER VolumeSerialNumber;
    LARGE_INTEGER NumberSectors;
    LARGE_INTEGER TotalClusters;
    LARGE_INTEGER FreeClusters;
    LARGE_INTEGER TotalReserved;
    DWORD BytesPerSector;
    DWORD BytesPerCluster;
    DWORD BytesPerFileRecordSegment;
    DWORD ClustersPerFileRecordSegment;
    LARGE_INTEGER MftValidDataLength;
    LARGE_INTEGER MftStartLcn;
    LARGE_INTEGER Mft2StartLcn;
    LARGE_INTEGER MftZoneStart;
    LARGE_INTEGER MftZoneEnd;

} NTFS_VOLUME_DATA_BUFFER, *PNTFS_VOLUME_DATA_BUFFER;

<struct>

    DWORD ByteCount;

    WORD   MajorVersion;
    WORD   MinorVersion;

} NTFS_EXTENDED_VOLUME_DATA, *PNTFS_EXTENDED_VOLUME_DATA;
<struct>

    LARGE_INTEGER StartingLcn;

} STARTING_LCN_INPUT_BUFFER, *PSTARTING_LCN_INPUT_BUFFER;

<struct>

    LARGE_INTEGER StartingLcn;
    LARGE_INTEGER BitmapSize;
    BYTE  Buffer[1];

} VOLUME_BITMAP_BUFFER, *PVOLUME_BITMAP_BUFFER;
<struct>

    LARGE_INTEGER StartingVcn;

} STARTING_VCN_INPUT_BUFFER, *PSTARTING_VCN_INPUT_BUFFER;

<struct name="RETRIEVAL_POINTERS_BUFFER">

    DWORD ExtentCount;
    LARGE_INTEGER StartingVcn;
<struct>
<field name="NextVcn">LARGE_INTEGER</field>
<field name="Lcn">LARGE_INTEGER</field>
<field name="Extents[1]">}</field>

} RETRIEVAL_POINTERS_BUFFER, *PRETRIEVAL_POINTERS_BUFFER;
<struct>

    LARGE_INTEGER FileReferenceNumber;

} NTFS_FILE_RECORD_INPUT_BUFFER, *PNTFS_FILE_RECORD_INPUT_BUFFER;

<struct>

    LARGE_INTEGER FileReferenceNumber;
    DWORD FileRecordLength;
    BYTE  FileRecordBuffer[1];

} NTFS_FILE_RECORD_OUTPUT_BUFFER, *PNTFS_FILE_RECORD_OUTPUT_BUFFER;
<struct>

    HANDLE FileHandle;
    LARGE_INTEGER StartingVcn;
    LARGE_INTEGER StartingLcn;
    DWORD ClusterCount;

} MOVE_FILE_DATA, *PMOVE_FILE_DATA;

<struct>

    HANDLE FileHandle;
    LARGE_INTEGER SourceFileRecord;
    LARGE_INTEGER TargetFileRecord;

} MOVE_FILE_RECORD_DATA, *PMOVE_FILE_RECORD_DATA;

<struct>
<field name="Restart">DWORD</field>
<field name="Sid">SID</field>
} FIND_BY_SID_DATA, *PFIND_BY_SID_DATA;

<struct>
<field name="NextEntryOffset">DWORD</field>
<field name="FileIndex">DWORD</field>
<field name="FileNameLength">DWORD</field>
<field name="FileName[1]">WCHAR</field>
} FIND_BY_SID_OUTPUT, *PFIND_BY_SID_OUTPUT;
<struct>

    DWORDLONG StartFileReferenceNumber;
    USN LowUsn;
    USN HighUsn;

} MFT_ENUM_DATA, *PMFT_ENUM_DATA;
<struct>

    DWORDLONG MaximumSize;
    DWORDLONG AllocationDelta;

} CREATE_USN_JOURNAL_DATA, *PCREATE_USN_JOURNAL_DATA;
<struct>

    USN StartUsn;
    DWORD ReasonMask;
    DWORD ReturnOnlyOnClose;
    DWORDLONG Timeout;
    DWORDLONG BytesToWaitFor;
    DWORDLONG UsnJournalID;

} READ_USN_JOURNAL_DATA, *PREAD_USN_JOURNAL_DATA;

<struct>

    DWORD RecordLength;
    WORD   MajorVersion;
    WORD   MinorVersion;
    DWORDLONG FileReferenceNumber;
    DWORDLONG ParentFileReferenceNumber;
    USN Usn;
    LARGE_INTEGER TimeStamp;
    DWORD Reason;
    DWORD SourceInfo;
    DWORD SecurityId;
    DWORD FileAttributes;
    WORD   FileNameLength;
    WORD   FileNameOffset;
    WCHAR FileName[1];

} USN_RECORD, *PUSN_RECORD;

<struct>

    DWORDLONG UsnJournalID;
    USN FirstUsn;
    USN NextUsn;
    USN LowestValidUsn;
    USN MaxUsn;
    DWORDLONG MaximumSize;
    DWORDLONG AllocationDelta;

} USN_JOURNAL_DATA, *PUSN_JOURNAL_DATA;
<struct>

    DWORDLONG UsnJournalID;
    DWORD DeleteFlags;

} DELETE_USN_JOURNAL_DATA, *PDELETE_USN_JOURNAL_DATA;
<struct>

    DWORD UsnSourceInfo;
    HANDLE VolumeHandle;
    DWORD HandleInfo;

} MARK_HANDLE_INFO, *PMARK_HANDLE_INFO;
<struct>

    ACCESS_MASK DesiredAccess;
    DWORD SecurityIds[1];

} BULK_SECURITY_TEST_DATA, *PBULK_SECURITY_TEST_DATA;
<struct name="_FILE_PREFETCH">
<field name="Type">DWORD</field>
<field name="Count">DWORD</field>
<field name="Prefetch[1]">DWORDLONG</field>
</struct>
<typedefprev id="FILE_PREFETCH"/>
<typedefptrprev id="PFILE_PREFETCH"/>

<struct name="_FILE_PREFETCH_EX">
<field name="Type">DWORD</field>
<field name="Count">DWORD</field>
<field name="Context">PVOID</field>
<field name="Prefetch[1]">DWORDLONG</field>
</struct>
<typedefprev id="FILE_PREFETCH_EX"/>
<typedefptrprev id="PFILE_PREFETCH_EX"/>
<struct name="_VOLUME_COMPRESSION_STATE">
<field name="CompressNewFiles">BOOLEAN</field>
</struct>
<typedefprev id="VOLUME_COMPRESSION_STATE"/>
<typedefptrprev id="PVOLUME_COMPRESSION_STATE"/>
<struct name="_FILESYSTEM_STATISTICS">

    WORD   FileSystemType;
    WORD   Version;                     

    DWORD SizeOfCompleteStructure;      

    DWORD UserFileReads;
    DWORD UserFileReadBytes;
    DWORD UserDiskReads;
    DWORD UserFileWrites;
    DWORD UserFileWriteBytes;
    DWORD UserDiskWrites;

    DWORD MetaDataReads;
    DWORD MetaDataReadBytes;
    DWORD MetaDataDiskReads;
    DWORD MetaDataWrites;
    DWORD MetaDataWriteBytes;
    DWORD MetaDataDiskWrites;

    
    
    

} FILESYSTEM_STATISTICS, *PFILESYSTEM_STATISTICS;
<struct name="_FAT_STATISTICS">
<field name="CreateHits">DWORD</field>
<field name="SuccessfulCreates">DWORD</field>
<field name="FailedCreates">DWORD</field>
<field name="NonCachedReads">DWORD</field>
<field name="NonCachedReadBytes">DWORD</field>
<field name="NonCachedWrites">DWORD</field>
<field name="NonCachedWriteBytes">DWORD</field>

    DWORD NonCachedDiskReads;
    DWORD NonCachedDiskWrites;
} FAT_STATISTICS, *PFAT_STATISTICS;

<struct name="_NTFS_STATISTICS">

    DWORD LogFileFullExceptions;
    DWORD OtherExceptions;

    
    
    

    DWORD MftReads;
    DWORD MftReadBytes;
    DWORD MftWrites;
    DWORD MftWriteBytes;
<struct>
<field name="Write">WORD</field>
<field name="Create">WORD</field>
<field name="SetInfo">WORD</field>
<field name="Flush">WORD</field>
<field name="MftWritesUserLevel">}</field>

    WORD   MftWritesFlushForLogFileFull;
    WORD   MftWritesLazyWriter;
    WORD   MftWritesUserRequest;

    DWORD Mft2Writes;
    DWORD Mft2WriteBytes;
<struct>
<field name="Write">WORD</field>
<field name="Create">WORD</field>
<field name="SetInfo">WORD</field>
<field name="Flush">WORD</field>
<field name="Mft2WritesUserLevel">}</field>

    WORD   Mft2WritesFlushForLogFileFull;
    WORD   Mft2WritesLazyWriter;
    WORD   Mft2WritesUserRequest;

    DWORD RootIndexReads;
    DWORD RootIndexReadBytes;
    DWORD RootIndexWrites;
    DWORD RootIndexWriteBytes;

    DWORD BitmapReads;
    DWORD BitmapReadBytes;
    DWORD BitmapWrites;
    DWORD BitmapWriteBytes;

    WORD   BitmapWritesFlushForLogFileFull;
    WORD   BitmapWritesLazyWriter;
    WORD   BitmapWritesUserRequest;

<struct>
<field name="Write">WORD</field>
<field name="Create">WORD</field>
<field name="SetInfo">WORD</field>
<field name="BitmapWritesUserLevel">}</field>

    DWORD MftBitmapReads;
    DWORD MftBitmapReadBytes;
    DWORD MftBitmapWrites;
    DWORD MftBitmapWriteBytes;

    WORD   MftBitmapWritesFlushForLogFileFull;
    WORD   MftBitmapWritesLazyWriter;
    WORD   MftBitmapWritesUserRequest;

<struct>
<field name="Write">WORD</field>
<field name="Create">WORD</field>
<field name="SetInfo">WORD</field>
<field name="Flush">WORD</field>
<field name="MftBitmapWritesUserLevel">}</field>

    DWORD UserIndexReads;
    DWORD UserIndexReadBytes;
    DWORD UserIndexWrites;
    DWORD UserIndexWriteBytes;

    
    
    

    DWORD LogFileReads;
    DWORD LogFileReadBytes;
    DWORD LogFileWrites;
    DWORD LogFileWriteBytes;

<struct>
<field name="Calls">DWORD</field>                
        DWORD Clusters;             
        DWORD Hints;                

        DWORD RunsReturned;         

        DWORD HintsHonored;         
        DWORD HintsClusters;        
        DWORD Cache;                
        DWORD CacheClusters;        
        DWORD CacheMiss;            
        DWORD CacheMissClusters;    
    } Allocate;

} NTFS_STATISTICS, *PNTFS_STATISTICS;
#pragma warning(push)

#pragma warning(disable:4201)       

<struct name="_FILE_OBJECTID_BUFFER">

    
    
    

    BYTE  ObjectId[16];

    
    
    
    

    union {
<struct>
            BYTE  BirthVolumeId[16];
            BYTE  BirthObjectId[16];
            BYTE  DomainId[16];
        } ;
        BYTE  ExtendedInfo[48];
    };

} FILE_OBJECTID_BUFFER, *PFILE_OBJECTID_BUFFER;
#pragma warning(pop)
<struct name="_FILE_SET_SPARSE_BUFFER">
<field name="SetSparse">BOOLEAN</field>
</struct>
<typedefprev id="FILE_SET_SPARSE_BUFFER"/>
<typedefptrprev id="PFILE_SET_SPARSE_BUFFER"/>

<struct name="_FILE_ZERO_DATA_INFORMATION">

    LARGE_INTEGER FileOffset;
    LARGE_INTEGER BeyondFinalZero;

} FILE_ZERO_DATA_INFORMATION, *PFILE_ZERO_DATA_INFORMATION;
<struct name="_FILE_ALLOCATED_RANGE_BUFFER">

    LARGE_INTEGER FileOffset;
    LARGE_INTEGER Length;

} FILE_ALLOCATED_RANGE_BUFFER, *PFILE_ALLOCATED_RANGE_BUFFER;
<struct name="_ENCRYPTION_BUFFER">

    DWORD EncryptionOperation;
    BYTE  Private[1];

} ENCRYPTION_BUFFER, *PENCRYPTION_BUFFER;

<struct name="_DECRYPTION_STATUS_BUFFER">

    BOOLEAN NoEncryptedStreams;

} DECRYPTION_STATUS_BUFFER, *PDECRYPTION_STATUS_BUFFER;

<struct name="_REQUEST_RAW_ENCRYPTED_DATA">

    
    
    
    
    
    

    LONGLONG FileOffset;
    DWORD Length;

} REQUEST_RAW_ENCRYPTED_DATA, *PREQUEST_RAW_ENCRYPTED_DATA;

<struct name="_ENCRYPTED_DATA_INFO">

    
    
    
    
    
    

    DWORDLONG StartingFileOffset;

    
    
    
    
    
    
    

    DWORD OutputBufferOffset;

    
    
    
    
    
    
    
    

    DWORD BytesWithinFileSize;

    
    
    
    
    
    
    
    

    DWORD BytesWithinValidDataLength;

    
    
    
    
    
    

    WORD   CompressionFormat;

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    

    BYTE  DataUnitShift;
    BYTE  ChunkShift;
    BYTE  ClusterShift;

    
    
    

    BYTE  EncryptionFormat;

    
    
    
    

    WORD   NumberOfDataBlocks;

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    

    DWORD DataBlockSize[1];

} ENCRYPTED_DATA_INFO;
typedef ENCRYPTED_DATA_INFO *PENCRYPTED_DATA_INFO;

<struct name="_PLEX_READ_DATA_REQUEST">

    
    
    
    
    
    
    
    
    

    LARGE_INTEGER ByteOffset;
    DWORD ByteLength;
    DWORD PlexNumber;

} PLEX_READ_DATA_REQUEST, *PPLEX_READ_DATA_REQUEST;

<struct name="_SI_COPYFILE">
<field name="SourceFileNameLength">DWORD</field>
<field name="DestinationFileNameLength">DWORD</field>
<field name="Flags">DWORD</field>
<field name="FileNameBuffer[1]">WCHAR</field>
</struct>
<typedefprev id="SI_COPYFILE"/>
<typedefptrprev id="PSI_COPYFILE"/>
<struct name="_FILE_MAKE_COMPATIBLE_BUFFER">
<field name="CloseDisc">BOOLEAN</field>
</struct>
<typedefprev id="FILE_MAKE_COMPATIBLE_BUFFER"/>
<typedefptrprev id="PFILE_MAKE_COMPATIBLE_BUFFER"/>
<struct name="_FILE_SET_DEFECT_MGMT_BUFFER">
<field name="Disable">BOOLEAN</field>
</struct>
<typedefprev id="FILE_SET_DEFECT_MGMT_BUFFER"/>
<typedefptrprev id="PFILE_SET_DEFECT_MGMT_BUFFER"/>
<struct name="_FILE_QUERY_SPARING_BUFFER">
<field name="SparingUnitBytes">DWORD</field>
<field name="SoftwareSparing">BOOLEAN</field>
<field name="TotalSpareBlocks">DWORD</field>
<field name="FreeSpareBlocks">DWORD</field>
</struct>
<typedefprev id="FILE_QUERY_SPARING_BUFFER"/>
<typedefptrprev id="PFILE_QUERY_SPARING_BUFFER"/>
<struct name="_FILE_QUERY_ON_DISK_VOL_INFO_BUFFER">
<field name="DirectoryCount">LARGE_INTEGER</field>
<field name="FileCount">LARGE_INTEGER</field>
<field name="FsFormatMajVersion">WORD</field>
<field name="FsFormatMinVersion">WORD</field>
<field name="FsFormatName[ 12]">WCHAR</field>
<field name="FormatTime">LARGE_INTEGER</field>
<field name="LastUpdateTime">LARGE_INTEGER</field>
<field name="CopyrightInfo[ 34]">WCHAR</field>
<field name="AbstractInfo[ 34]">WCHAR</field>
<field name="FormattingImplementationInfo[ 34]">WCHAR</field>
<field name="LastModifyingImplementationInfo[ 34]">WCHAR</field>
</struct>
<typedefprev id="FILE_QUERY_ON_DISK_VOL_INFO_BUFFER"/>
<typedefptrprev id="PFILE_QUERY_ON_DISK_VOL_INFO_BUFFER"/>

typedef enum _SHRINK_VOLUME_REQUEST_TYPES
{
    ShrinkPrepare = 1,
    ShrinkCommit,
    ShrinkAbort

} SHRINK_VOLUME_REQUEST_TYPES, *PSHRINK_VOLUME_REQUEST_TYPES;
<struct name="_SHRINK_VOLUME_INFORMATION">
<field name="ShrinkRequestType">SHRINK_VOLUME_REQUEST_TYPES</field>
<field name="Flags">DWORDLONG</field>
<field name="NewNumberOfSectors">LONGLONG</field>
</struct>
<typedefprev id="SHRINK_VOLUME_INFORMATION"/>
<typedefptrprev id="PSHRINK_VOLUME_INFORMATION"/>

<struct name="_TXFS_MODIFY_RM">

    
    
    

    DWORD Flags;

    
    
    

    DWORD LogContainerCountMax;

    
    
    

    DWORD LogContainerCountMin;

    
    
    

    DWORD LogContainerCount;

    
    
    
    
    

    DWORD LogGrowthIncrement;

    
    
    
    

    DWORD LogAutoShrinkPercentage;

    
    
    

    DWORDLONG Reserved;

    
    
    
    

    WORD   LoggingMode;

} TXFS_MODIFY_RM,
 *PTXFS_MODIFY_RM;

<struct name="_TXFS_QUERY_RM_INFORMATION">

    
    
    
    

    DWORD BytesRequired;

    
    
    

    DWORDLONG TailLsn;

    
    
    

    DWORDLONG CurrentLsn;

    
    
    

    DWORDLONG ArchiveTailLsn;

    
    
    

    DWORDLONG LogContainerSize;

    
    
    

    LARGE_INTEGER HighestVirtualClock;

    
    
    

    DWORD LogContainerCount;

    
    
    

    DWORD LogContainerCountMax;

    
    
    

    DWORD LogContainerCountMin;

    
    
    
    
    

    DWORD LogGrowthIncrement;

    
    
    
    
    

    DWORD LogAutoShrinkPercentage;

    
    
    
    

    DWORD Flags;

    
    
    

    WORD   LoggingMode;

    
    
    

    WORD   Reserved;

    
    
    

    DWORD RmState;

    
    
    

    DWORDLONG LogCapacity;

    
    
    

    DWORDLONG LogFree;

    
    
    

    DWORDLONG TopsSize;

    
    
    

    DWORDLONG TopsUsed;

    
    
    

    DWORDLONG TransactionCount;

    
    
    

    DWORDLONG OnePCCount;

    
    
    

    DWORDLONG TwoPCCount;

    
    
    

    DWORDLONG NumberLogFileFull;

    
    
    

    DWORDLONG OldestTransactionAge;

    
    
    

    GUID RMName;

    
    
    
    

    DWORD TmLogPathOffset;

} TXFS_QUERY_RM_INFORMATION,
 *PTXFS_QUERY_RM_INFORMATION;
<struct name="_TXFS_ROLLFORWARD_REDO_INFORMATION">
<field name="LastVirtualClock">LARGE_INTEGER</field>
<field name="LastRedoLsn">DWORDLONG</field>
<field name="HighestRecoveryLsn">DWORDLONG</field>
<field name="Flags">DWORD</field>
} TXFS_ROLLFORWARD_REDO_INFORMATION,
 *PTXFS_ROLLFORWARD_REDO_INFORMATION;

<struct name="_TXFS_START_RM_INFORMATION">

    
    
    

    DWORD Flags;

    
    
    

    DWORDLONG LogContainerSize;

    
    
    

    DWORD LogContainerCountMin;

    
    
    

    DWORD LogContainerCountMax;

    
    
    
    
    

    DWORD LogGrowthIncrement;

    
    
    

    DWORD LogAutoShrinkPercentage;

    
    
    
    
    

    DWORD TmLogPathOffset;

    
    
    
    

    WORD   TmLogPathLength;

    
    
    
    
    

    WORD   LoggingMode;

    
    
    
    

    WORD   LogPathLength;

    
    
    

    WORD   Reserved;

    
    
    
    

    WCHAR LogPath[1];

} TXFS_START_RM_INFORMATION,
 *PTXFS_START_RM_INFORMATION;
<struct name="_TXFS_GET_METADATA_INFO_OUT">

    
    
    

<struct>
<field name="LowPart">LONGLONG</field>
<field name="HighPart">LONGLONG</field>
<field name="TxfFileId">}</field>

    
    
    

    GUID LockingTransaction;

    
    
    

    DWORDLONG LastLsn;

    
    
    

    DWORD TransactionState;

} TXFS_GET_METADATA_INFO_OUT, *PTXFS_GET_METADATA_INFO_OUT;
<struct name="_TXFS_LIST_TRANSACTION_LOCKED_FILES_ENTRY">

    
    
    
    

    DWORDLONG Offset;

    
    
    

    DWORD UsnReason;

    
    
    

    LONGLONG FileId;

    
    
    

    DWORD Reserved1;
    DWORD Reserved2;
    LONGLONG Reserved3;

    
    
    

    WCHAR FileName[1];
} TXFS_LIST_TRANSACTION_LOCKED_FILES_ENTRY, *PTXFS_LIST_TRANSACTION_LOCKED_FILES_ENTRY;
<struct name="_TXFS_LIST_TRANSACTION_LOCKED_FILES">

    
    
    

    GUID KtmTransaction;

    
    
    

    DWORDLONG NumberOfFiles;

    
    
    
    

    DWORDLONG BufferSizeRequired;

    
    
    
    

    DWORDLONG Offset;
} TXFS_LIST_TRANSACTION_LOCKED_FILES, *PTXFS_LIST_TRANSACTION_LOCKED_FILES;
<struct name="_TXFS_LIST_TRANSACTIONS_ENTRY">

    
    
    

    GUID TransactionId;

    
    
    

    DWORD TransactionState;

    
    
    

    DWORD Reserved1;
    DWORD Reserved2;
    LONGLONG Reserved3;
} TXFS_LIST_TRANSACTIONS_ENTRY, *PTXFS_LIST_TRANSACTIONS_ENTRY;

<struct name="_TXFS_LIST_TRANSACTIONS">

    
    
    

    DWORDLONG NumberOfTransactions;

    
    
    
    
    

    DWORDLONG BufferSizeRequired;
} TXFS_LIST_TRANSACTIONS, *PTXFS_LIST_TRANSACTIONS;

<struct name="_TXFS_READ_BACKUP_INFORMATION_OUT">
    union {

        
        
        

        DWORD BufferLength;

        
        
        

        BYTE  Buffer[1];
    };
} TXFS_READ_BACKUP_INFORMATION_OUT, *PTXFS_READ_BACKUP_INFORMATION_OUT;
<struct name="_TXFS_WRITE_BACKUP_INFORMATION">

    
    
    
    

    BYTE  Buffer[1];
} TXFS_WRITE_BACKUP_INFORMATION, *PTXFS_WRITE_BACKUP_INFORMATION;

<struct name="_TXFS_GET_TRANSACTED_VERSION">

    
    
    
    
    

    DWORD ThisBaseVersion;

    
    
    

    DWORD LatestVersion;

    
    
    
    

    WORD   ThisMiniVersion;

    
    
    
    

    WORD   FirstMiniVersion;

    
    
    
    

    WORD   LatestMiniVersion;

} TXFS_GET_TRANSACTED_VERSION, *PTXFS_GET_TRANSACTED_VERSION;
<struct name="_TXFS_CREATE_MINIVERSION_INFO">

    WORD   StructureVersion;

    WORD   StructureLength;

    
    
    

    DWORD BaseVersion;

    
    
    

    WORD   MiniVersion;

} TXFS_CREATE_MINIVERSION_INFO, *PTXFS_CREATE_MINIVERSION_INFO;
<struct name="_TXFS_TRANSACTION_ACTIVE_INFO">

    
    
    

    BOOLEAN TransactionsActiveAtSnapshot;

} TXFS_TRANSACTION_ACTIVE_INFO, *PTXFS_TRANSACTION_ACTIVE_INFO;

<struct name="_DISK_EXTENT">
<field name="DiskNumber">DWORD</field>
<field name="StartingOffset">LARGE_INTEGER</field>
<field name="ExtentLength">LARGE_INTEGER</field>
</struct>
<typedefprev id="DISK_EXTENT"/>
<typedefptrprev id="PDISK_EXTENT"/>
<struct name="_VOLUME_DISK_EXTENTS">
<field name="NumberOfDiskExtents">DWORD</field>
<field name="Extents[1]">DISK_EXTENT</field>
</struct>
<typedefprev id="VOLUME_DISK_EXTENTS"/>
<typedefptrprev id="PVOLUME_DISK_EXTENTS"/>
#line 1 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\winsmcrd.h"
#pragma once
typedef DWORD ULONG;
typedef WORD UWORD;
typedef BYTE UCHAR;
                              

                              

                              
                              

                              
                              

                              
                              
                              

                              

                              
                              

<struct name="_SCARD_IO_REQUEST">
<field name="dwProtocol">DWORD</field>
<field name="cbPciLength">DWORD</field>
} SCARD_IO_REQUEST, *PSCARD_IO_REQUEST, *LPSCARD_IO_REQUEST;
typedef const SCARD_IO_REQUEST *LPCSCARD_IO_REQUEST;

<struct>
    BYTE
        bCla,   
        bIns,   
        bP1,
        bP2,    
        bP3;    
} SCARD_T0_COMMAND, *LPSCARD_T0_COMMAND;

<struct>
<field name="ioRequest">SCARD_IO_REQUEST</field>
    BYTE
        bSw1,
        bSw2;           
    union
    {
        SCARD_T0_COMMAND CmdBytes;
        BYTE rgbHeader[5];
    };
} SCARD_T0_REQUEST;

typedef SCARD_T0_REQUEST *PSCARD_T0_REQUEST, *LPSCARD_T0_REQUEST;

<struct>
<field name="ioRequest">SCARD_IO_REQUEST</field>
} SCARD_T1_REQUEST;
typedef SCARD_T1_REQUEST *PSCARD_T1_REQUEST, *LPSCARD_T1_REQUEST;
                                                

                                                

                                                
typedef const BYTE *LPCBYTE;

typedef const void *LPCVOID;

__declspec(dllimport) extern const SCARD_IO_REQUEST
    g_rgSCardT0Pci,
    g_rgSCardT1Pci,
    g_rgSCardRawPci;

typedef ULONG_PTR SCARDCONTEXT;
typedef SCARDCONTEXT *PSCARDCONTEXT, *LPSCARDCONTEXT;

typedef ULONG_PTR SCARDHANDLE;
typedef SCARDHANDLE *PSCARDHANDLE, *LPSCARDHANDLE;

                                
                                

                                
                                
                                
                                

                                
                                
                                
                                

<function name="SCardEstablishContext" ret="extern  LONG" convention="__stdcall">
<arg name="dwScope">DWORD</arg>
<arg name="pvReserved1">LPCVOID</arg>
<arg name="pvReserved2">LPCVOID</arg>
<arg name="phContext">LPSCARDCONTEXT</arg>
</function>

<function name="SCardReleaseContext" ret="extern  LONG" convention="__stdcall">
<arg name="hContext">SCARDCONTEXT</arg>
</function>

<function name="SCardIsValidContext" ret="extern  LONG" convention="__stdcall">
<arg name="hContext">SCARDCONTEXT</arg>
</function>
<function name="SCardListReaderGroupsA" ret="extern  LONG" convention="__stdcall">
<arg name="hContext">SCARDCONTEXT</arg>
<arg name="mszGroups">LPSTR</arg>
<arg name="pcchGroups">LPDWORD</arg>
</function>
<function name="SCardListReaderGroupsW" ret="extern  LONG" convention="__stdcall">
<arg name="hContext">SCARDCONTEXT</arg>
<arg name="mszGroups">LPWSTR</arg>
<arg name="pcchGroups">LPDWORD</arg>
</function>
<function name="SCardListReadersA" ret="extern  LONG" convention="__stdcall">
<arg name="hContext">SCARDCONTEXT</arg>
<arg name="mszGroups">LPCSTR</arg>
<arg name="mszReaders">LPSTR</arg>
<arg name="pcchReaders">LPDWORD</arg>
</function>
<function name="SCardListReadersW" ret="extern  LONG" convention="__stdcall">
<arg name="hContext">SCARDCONTEXT</arg>
<arg name="mszGroups">LPCWSTR</arg>
<arg name="mszReaders">LPWSTR</arg>
<arg name="pcchReaders">LPDWORD</arg>
</function>
<function name="SCardListCardsA" ret="extern  LONG" convention="__stdcall">
<arg name="hContext">SCARDCONTEXT</arg>
<arg name="pbAtr">LPCBYTE</arg>
<arg name="rgquidInterfaces">LPCGUID</arg>
<arg name="cguidInterfaceCount">DWORD</arg>
<arg name="mszCards">LPSTR</arg>
<arg name="pcchCards">LPDWORD</arg>
</function>
<function name="SCardListCardsW" ret="extern  LONG" convention="__stdcall">
<arg name="hContext">SCARDCONTEXT</arg>
<arg name="pbAtr">LPCBYTE</arg>
<arg name="rgquidInterfaces">LPCGUID</arg>
<arg name="cguidInterfaceCount">DWORD</arg>
<arg name="mszCards">LPWSTR</arg>
<arg name="pcchCards">LPDWORD</arg>
</function>

<function name="SCardListInterfacesA" ret="extern  LONG" convention="__stdcall">
<arg name="hContext">SCARDCONTEXT</arg>
<arg name="szCard">LPCSTR</arg>
<arg name="pguidInterfaces">LPGUID</arg>
<arg name="pcguidInterfaces">LPDWORD</arg>
</function>
<function name="SCardListInterfacesW" ret="extern  LONG" convention="__stdcall">
<arg name="hContext">SCARDCONTEXT</arg>
<arg name="szCard">LPCWSTR</arg>
<arg name="pguidInterfaces">LPGUID</arg>
<arg name="pcguidInterfaces">LPDWORD</arg>
</function>
<function name="SCardGetProviderIdA" ret="extern  LONG" convention="__stdcall">
<arg name="hContext">SCARDCONTEXT</arg>
<arg name="szCard">LPCSTR</arg>
<arg name="pguidProviderId">LPGUID</arg>
</function>
<function name="SCardGetProviderIdW" ret="extern  LONG" convention="__stdcall">
<arg name="hContext">SCARDCONTEXT</arg>
<arg name="szCard">LPCWSTR</arg>
<arg name="pguidProviderId">LPGUID</arg>
</function>
<function name="SCardGetCardTypeProviderNameA" ret="extern  LONG" convention="__stdcall">
<arg name="hContext">SCARDCONTEXT</arg>
<arg name="szCardName">LPCSTR</arg>
<arg name="dwProviderId">DWORD</arg>
<arg name="szProvider">LPSTR</arg>
<arg name="pcchProvider">LPDWORD</arg>
</function>
<function name="SCardGetCardTypeProviderNameW" ret="extern  LONG" convention="__stdcall">
<arg name="hContext">SCARDCONTEXT</arg>
<arg name="szCardName">LPCWSTR</arg>
<arg name="dwProviderId">DWORD</arg>
<arg name="szProvider">LPWSTR</arg>
<arg name="pcchProvider">LPDWORD</arg>
</function>
<function name="SCardIntroduceReaderGroupA" ret="extern  LONG" convention="__stdcall">
<arg name="hContext">SCARDCONTEXT</arg>
<arg name="szGroupName">LPCSTR</arg>
</function>
<function name="SCardIntroduceReaderGroupW" ret="extern  LONG" convention="__stdcall">
<arg name="hContext">SCARDCONTEXT</arg>
<arg name="szGroupName">LPCWSTR</arg>
</function>
<function name="SCardForgetReaderGroupA" ret="extern  LONG" convention="__stdcall">
<arg name="hContext">SCARDCONTEXT</arg>
<arg name="szGroupName">LPCSTR</arg>
</function>
<function name="SCardForgetReaderGroupW" ret="extern  LONG" convention="__stdcall">
<arg name="hContext">SCARDCONTEXT</arg>
<arg name="szGroupName">LPCWSTR</arg>
</function>
<function name="SCardIntroduceReaderA" ret="extern  LONG" convention="__stdcall">
<arg name="hContext">SCARDCONTEXT</arg>
<arg name="szReaderName">LPCSTR</arg>
<arg name="szDeviceName">LPCSTR</arg>
</function>
<function name="SCardIntroduceReaderW" ret="extern  LONG" convention="__stdcall">
<arg name="hContext">SCARDCONTEXT</arg>
<arg name="szReaderName">LPCWSTR</arg>
<arg name="szDeviceName">LPCWSTR</arg>
</function>
<function name="SCardForgetReaderA" ret="extern  LONG" convention="__stdcall">
<arg name="hContext">SCARDCONTEXT</arg>
<arg name="szReaderName">LPCSTR</arg>
</function>
<function name="SCardForgetReaderW" ret="extern  LONG" convention="__stdcall">
<arg name="hContext">SCARDCONTEXT</arg>
<arg name="szReaderName">LPCWSTR</arg>
</function>
<function name="SCardAddReaderToGroupA" ret="extern  LONG" convention="__stdcall">
<arg name="hContext">SCARDCONTEXT</arg>
<arg name="szReaderName">LPCSTR</arg>
<arg name="szGroupName">LPCSTR</arg>
</function>
<function name="SCardAddReaderToGroupW" ret="extern  LONG" convention="__stdcall">
<arg name="hContext">SCARDCONTEXT</arg>
<arg name="szReaderName">LPCWSTR</arg>
<arg name="szGroupName">LPCWSTR</arg>
</function>
<function name="SCardRemoveReaderFromGroupA" ret="extern  LONG" convention="__stdcall">
<arg name="hContext">SCARDCONTEXT</arg>
<arg name="szReaderName">LPCSTR</arg>
<arg name="szGroupName">LPCSTR</arg>
</function>
<function name="SCardRemoveReaderFromGroupW" ret="extern  LONG" convention="__stdcall">
<arg name="hContext">SCARDCONTEXT</arg>
<arg name="szReaderName">LPCWSTR</arg>
<arg name="szGroupName">LPCWSTR</arg>
</function>
<function name="SCardIntroduceCardTypeA" ret="extern  LONG" convention="__stdcall">
<arg name="hContext">SCARDCONTEXT</arg>
<arg name="szCardName">LPCSTR</arg>
<arg name="pguidPrimaryProvider">LPCGUID</arg>
<arg name="rgguidInterfaces">LPCGUID</arg>
<arg name="dwInterfaceCount">DWORD</arg>
<arg name="pbAtr">LPCBYTE</arg>
<arg name="pbAtrMask">LPCBYTE</arg>
<arg name="cbAtrLen">DWORD</arg>
</function>
<function name="SCardIntroduceCardTypeW" ret="extern  LONG" convention="__stdcall">
<arg name="hContext">SCARDCONTEXT</arg>
<arg name="szCardName">LPCWSTR</arg>
<arg name="pguidPrimaryProvider">LPCGUID</arg>
<arg name="rgguidInterfaces">LPCGUID</arg>
<arg name="dwInterfaceCount">DWORD</arg>
<arg name="pbAtr">LPCBYTE</arg>
<arg name="pbAtrMask">LPCBYTE</arg>
<arg name="cbAtrLen">DWORD</arg>
</function>
<function name="SCardSetCardTypeProviderNameA" ret="extern  LONG" convention="__stdcall">
<arg name="hContext">SCARDCONTEXT</arg>
<arg name="szCardName">LPCSTR</arg>
<arg name="dwProviderId">DWORD</arg>
<arg name="szProvider">LPCSTR</arg>
</function>
<function name="SCardSetCardTypeProviderNameW" ret="extern  LONG" convention="__stdcall">
<arg name="hContext">SCARDCONTEXT</arg>
<arg name="szCardName">LPCWSTR</arg>
<arg name="dwProviderId">DWORD</arg>
<arg name="szProvider">LPCWSTR</arg>
</function>
<function name="SCardForgetCardTypeA" ret="extern  LONG" convention="__stdcall">
<arg name="hContext">SCARDCONTEXT</arg>
<arg name="szCardName">LPCSTR</arg>
</function>
<function name="SCardForgetCardTypeW" ret="extern  LONG" convention="__stdcall">
<arg name="hContext">SCARDCONTEXT</arg>
<arg name="szCardName">LPCWSTR</arg>
</function>
<function name="SCardFreeMemory" ret="extern  LONG" convention="__stdcall">
<arg name="hContext">SCARDCONTEXT</arg>
<arg name="pvMem">LPCVOID</arg>
</function>
<function name="SCardAccessStartedEvent" ret="extern  HANDLE" convention="__stdcall">void);

<function name="SCardReleaseStartedEvent" ret="extern  void" convention="__stdcall">void);

<struct>
<field name="szReader">LPCSTR</field>       
    LPVOID      pvUserData;     
    DWORD       dwCurrentState; 
    DWORD       dwEventState;   
    DWORD       cbAtr;          
    BYTE        rgbAtr[36];     
} SCARD_READERSTATEA, *PSCARD_READERSTATEA, *LPSCARD_READERSTATEA;
<struct>
<field name="szReader">LPCWSTR</field>       
    LPVOID      pvUserData;     
    DWORD       dwCurrentState; 
    DWORD       dwEventState;   
    DWORD       cbAtr;          
    BYTE        rgbAtr[36];     
} SCARD_READERSTATEW, *PSCARD_READERSTATEW, *LPSCARD_READERSTATEW;
typedef SCARD_READERSTATEA SCARD_READERSTATE;
typedef PSCARD_READERSTATEA PSCARD_READERSTATE;
typedef LPSCARD_READERSTATEA LPSCARD_READERSTATE;

                                            
                                            
                                            
                                            
                                            
                                            

                                            
                                            

                                            
                                            
                                            
                                            
                                            
                                            
                                            

                                            
                                            
                                            
                                            
                                            

                                            
                                            
                                            
                                            

                                            
                                            
                                            

                                            

                                            
                                            
                                            
                                            
                                            
                                            

                                            
                                            
                                            
                                            
                                            

                                            
                                            
                                            
                                            
                                            
                                            

                                            
                                            
                                            

                                            

<function name="SCardLocateCardsA" ret="extern  LONG" convention="__stdcall">
<arg name="hContext">SCARDCONTEXT</arg>
<arg name="mszCards">LPCSTR</arg>
<arg name="rgReaderStates">LPSCARD_READERSTATEA</arg>
<arg name="cReaders">DWORD</arg>
</function>
<function name="SCardLocateCardsW" ret="extern  LONG" convention="__stdcall">
<arg name="hContext">SCARDCONTEXT</arg>
<arg name="mszCards">LPCWSTR</arg>
<arg name="rgReaderStates">LPSCARD_READERSTATEW</arg>
<arg name="cReaders">DWORD</arg>
</function>
<struct name="_SCARD_ATRMASK">
<field name="cbAtr">DWORD</field>
<field name="rgbAtr[36]">BYTE</field>
<field name="rgbMask[36]">BYTE</field>
} SCARD_ATRMASK, *PSCARD_ATRMASK, *LPSCARD_ATRMASK;
<function name="SCardLocateCardsByATRA" ret="extern  LONG" convention="__stdcall">
<arg name="hContext">SCARDCONTEXT</arg>
<arg name="rgAtrMasks">LPSCARD_ATRMASK</arg>
<arg name="cAtrs">DWORD</arg>
<arg name="rgReaderStates">LPSCARD_READERSTATEA</arg>
<arg name="cReaders">DWORD</arg>
</function>
<function name="SCardLocateCardsByATRW" ret="extern  LONG" convention="__stdcall">
<arg name="hContext">SCARDCONTEXT</arg>
<arg name="rgAtrMasks">LPSCARD_ATRMASK</arg>
<arg name="cAtrs">DWORD</arg>
<arg name="rgReaderStates">LPSCARD_READERSTATEW</arg>
<arg name="cReaders">DWORD</arg>
</function>

<function name="SCardGetStatusChangeA" ret="extern  LONG" convention="__stdcall">
<arg name="hContext">SCARDCONTEXT</arg>
<arg name="dwTimeout">DWORD</arg>
<arg name="rgReaderStates">LPSCARD_READERSTATEA</arg>
<arg name="cReaders">DWORD</arg>
</function>
<function name="SCardGetStatusChangeW" ret="extern  LONG" convention="__stdcall">
<arg name="hContext">SCARDCONTEXT</arg>
<arg name="dwTimeout">DWORD</arg>
<arg name="rgReaderStates">LPSCARD_READERSTATEW</arg>
<arg name="cReaders">DWORD</arg>
</function>
<function name="SCardCancel" ret="extern  LONG" convention="__stdcall">
<arg name="hContext">SCARDCONTEXT</arg>
</function>

                                

                                

                                
                                

<function name="SCardConnectA" ret="extern  LONG" convention="__stdcall">
<arg name="hContext">SCARDCONTEXT</arg>
<arg name="szReader">LPCSTR</arg>
<arg name="dwShareMode">DWORD</arg>
<arg name="dwPreferredProtocols">DWORD</arg>
<arg name="phCard">LPSCARDHANDLE</arg>
<arg name="pdwActiveProtocol">LPDWORD</arg>
</function>
<function name="SCardConnectW" ret="extern  LONG" convention="__stdcall">
<arg name="hContext">SCARDCONTEXT</arg>
<arg name="szReader">LPCWSTR</arg>
<arg name="dwShareMode">DWORD</arg>
<arg name="dwPreferredProtocols">DWORD</arg>
<arg name="phCard">LPSCARDHANDLE</arg>
<arg name="pdwActiveProtocol">LPDWORD</arg>
</function>
<function name="SCardReconnect" ret="extern  LONG" convention="__stdcall">
<arg name="hCard">SCARDHANDLE</arg>
<arg name="dwShareMode">DWORD</arg>
<arg name="dwPreferredProtocols">DWORD</arg>
<arg name="dwInitialization">DWORD</arg>
<arg name="pdwActiveProtocol">LPDWORD</arg>
</function>

<function name="SCardDisconnect" ret="extern  LONG" convention="__stdcall">
<arg name="hCard">SCARDHANDLE</arg>
<arg name="dwDisposition">DWORD</arg>
</function>

<function name="SCardBeginTransaction" ret="extern  LONG" convention="__stdcall">
<arg name="hCard">SCARDHANDLE</arg>
</function>

<function name="SCardEndTransaction" ret="extern  LONG" convention="__stdcall">
<arg name="hCard">SCARDHANDLE</arg>
<arg name="dwDisposition">DWORD</arg>
</function>

<function name="SCardCancelTransaction" ret="extern  LONG" convention="__stdcall">
<arg name="hCard">SCARDHANDLE</arg>
</function>

<function name="SCardState" ret="extern  LONG" convention="__stdcall">
<arg name="hCard">SCARDHANDLE</arg>
<arg name="pdwState">LPDWORD</arg>
<arg name="pdwProtocol">LPDWORD</arg>
<arg name="pbAtr">LPBYTE</arg>
<arg name="pcbAtrLen">LPDWORD</arg>
</function>
<function name="SCardStatusA" ret="extern  LONG" convention="__stdcall">
<arg name="hCard">SCARDHANDLE</arg>
<arg name="szReaderName">LPSTR</arg>
<arg name="pcchReaderLen">LPDWORD</arg>
<arg name="pdwState">LPDWORD</arg>
<arg name="pdwProtocol">LPDWORD</arg>
<arg name="pbAtr">LPBYTE</arg>
<arg name="pcbAtrLen">LPDWORD</arg>
</function>
<function name="SCardStatusW" ret="extern  LONG" convention="__stdcall">
<arg name="hCard">SCARDHANDLE</arg>
<arg name="szReaderName">LPWSTR</arg>
<arg name="pcchReaderLen">LPDWORD</arg>
<arg name="pdwState">LPDWORD</arg>
<arg name="pdwProtocol">LPDWORD</arg>
<arg name="pbAtr">LPBYTE</arg>
<arg name="pcbAtrLen">LPDWORD</arg>
</function>
<function name="SCardTransmit" ret="extern  LONG" convention="__stdcall">
<arg name="hCard">SCARDHANDLE</arg>
<arg name="pioSendPci">LPCSCARD_IO_REQUEST</arg>
<arg name="pbSendBuffer">LPCBYTE</arg>
<arg name="cbSendLength">DWORD</arg>
<arg name="pioRecvPci">LPSCARD_IO_REQUEST</arg>
<arg name="pbRecvBuffer">LPBYTE</arg>
<arg name="pcbRecvLength">LPDWORD</arg>
</function>
<function name="SCardGetTransmitCount" ret="extern  LONG" convention="__stdcall">
<arg name="hCard">SCARDHANDLE</arg>
<arg name="pcTransmitCount">LPDWORD</arg>
</function>
<function name="SCardControl" ret="extern  LONG" convention="__stdcall">
<arg name="hCard">SCARDHANDLE</arg>
<arg name="dwControlCode">DWORD</arg>
<arg name="lpInBuffer">LPCVOID</arg>
<arg name="nInBufferSize">DWORD</arg>
<arg name="lpOutBuffer">LPVOID</arg>
<arg name="nOutBufferSize">DWORD</arg>
<arg name="lpBytesReturned">LPDWORD</arg>
</function>

<function name="SCardGetAttrib" ret="extern  LONG" convention="__stdcall">
<arg name="hCard">SCARDHANDLE</arg>
<arg name="dwAttrId">DWORD</arg>
<arg name="pbAttr">LPBYTE</arg>
<arg name="pcbAttrLen">LPDWORD</arg>
</function>

<function name="SCardSetAttrib" ret="extern  LONG" convention="__stdcall">
<arg name="hCard">SCARDHANDLE</arg>
<arg name="dwAttrId">DWORD</arg>
<arg name="pbAttr">LPCBYTE</arg>
<arg name="cbAttrLen">DWORD</arg>
</function>
typedef SCARDHANDLE (__stdcall *LPOCNCONNPROCA) ( SCARDCONTEXT,  LPSTR,  LPSTR,  PVOID);
typedef SCARDHANDLE (__stdcall *LPOCNCONNPROCW) ( SCARDCONTEXT,  LPWSTR,  LPWSTR,  PVOID);
typedef BOOL (__stdcall *LPOCNCHKPROC) ( SCARDCONTEXT,  SCARDHANDLE,  PVOID);
typedef void (__stdcall *LPOCNDSCPROC) ( SCARDCONTEXT,  SCARDHANDLE,  PVOID);

<struct>
<field name="dwStructSize">DWORD</field>
<field name="lpstrGroupNames">LPSTR</field>        
    DWORD           nMaxGroupNames;         
                                            
    LPCGUID         rgguidInterfaces;       
    DWORD           cguidInterfaces;        
    LPSTR           lpstrCardNames;         
    DWORD           nMaxCardNames;          
    LPOCNCHKPROC    lpfnCheck;              
    LPOCNCONNPROCA  lpfnConnect;            
    LPOCNDSCPROC    lpfnDisconnect;         
    LPVOID          pvUserData;             
    DWORD           dwShareMode;            
    DWORD           dwPreferredProtocols;   
} OPENCARD_SEARCH_CRITERIAA, *POPENCARD_SEARCH_CRITERIAA, *LPOPENCARD_SEARCH_CRITERIAA;
<struct>
<field name="dwStructSize">DWORD</field>
<field name="lpstrGroupNames">LPWSTR</field>        
    DWORD           nMaxGroupNames;         
                                            
    LPCGUID         rgguidInterfaces;       
    DWORD           cguidInterfaces;        
    LPWSTR          lpstrCardNames;         
    DWORD           nMaxCardNames;          
    LPOCNCHKPROC    lpfnCheck;              
    LPOCNCONNPROCW  lpfnConnect;            
    LPOCNDSCPROC    lpfnDisconnect;         
    LPVOID          pvUserData;             
    DWORD           dwShareMode;            
    DWORD           dwPreferredProtocols;   
} OPENCARD_SEARCH_CRITERIAW, *POPENCARD_SEARCH_CRITERIAW, *LPOPENCARD_SEARCH_CRITERIAW;
typedef OPENCARD_SEARCH_CRITERIAA OPENCARD_SEARCH_CRITERIA;
typedef POPENCARD_SEARCH_CRITERIAA POPENCARD_SEARCH_CRITERIA;
typedef LPOPENCARD_SEARCH_CRITERIAA LPOPENCARD_SEARCH_CRITERIA;
<struct>
<field name="dwStructSize">DWORD</field>           
    SCARDCONTEXT    hSCardContext;          
    HWND            hwndOwner;              
    DWORD           dwFlags;                
    LPCSTR          lpstrTitle;             
    LPCSTR          lpstrSearchDesc;        
    HICON           hIcon;                  
    POPENCARD_SEARCH_CRITERIAA pOpenCardSearchCriteria; 
    LPOCNCONNPROCA  lpfnConnect;            
    LPVOID          pvUserData;             
    DWORD           dwShareMode;            
    DWORD           dwPreferredProtocols;   
                                            
    LPSTR           lpstrRdr;               
    DWORD           nMaxRdr;                
    LPSTR           lpstrCard;              
    DWORD           nMaxCard;               
    DWORD           dwActiveProtocol;       
    SCARDHANDLE     hCardHandle;            
} OPENCARDNAME_EXA, *POPENCARDNAME_EXA, *LPOPENCARDNAME_EXA;
<struct>
<field name="dwStructSize">DWORD</field>           
    SCARDCONTEXT    hSCardContext;          
    HWND            hwndOwner;              
    DWORD           dwFlags;                
    LPCWSTR         lpstrTitle;             
    LPCWSTR         lpstrSearchDesc;        
    HICON           hIcon;                  
    POPENCARD_SEARCH_CRITERIAW pOpenCardSearchCriteria; 
    LPOCNCONNPROCW  lpfnConnect;            
    LPVOID          pvUserData;             
    DWORD           dwShareMode;            
    DWORD           dwPreferredProtocols;   
                                            
    LPWSTR          lpstrRdr;               
    DWORD           nMaxRdr;                
    LPWSTR          lpstrCard;              
    DWORD           nMaxCard;               
    DWORD           dwActiveProtocol;       
    SCARDHANDLE     hCardHandle;            
} OPENCARDNAME_EXW, *POPENCARDNAME_EXW, *LPOPENCARDNAME_EXW;
typedef OPENCARDNAME_EXA OPENCARDNAME_EX;
typedef POPENCARDNAME_EXA POPENCARDNAME_EX;
typedef LPOPENCARDNAME_EXA LPOPENCARDNAME_EX;
<function name="SCardUIDlgSelectCardA" ret="extern  LONG" convention="__stdcall">
<arg name="LPOPENCARDNAME_EXA"> </arg>
</function>
<function name="SCardUIDlgSelectCardW" ret="extern  LONG" convention="__stdcall">
<arg name="LPOPENCARDNAME_EXW"> </arg>
</function>
<struct>
<field name="dwStructSize">DWORD</field>
<field name="hwndOwner">HWND</field>
<field name="hSCardContext">SCARDCONTEXT</field>
<field name="lpstrGroupNames">LPSTR</field>
<field name="nMaxGroupNames">DWORD</field>
<field name="lpstrCardNames">LPSTR</field>
<field name="nMaxCardNames">DWORD</field>
<field name="rgguidInterfaces">LPCGUID</field>
<field name="cguidInterfaces">DWORD</field>
<field name="lpstrRdr">LPSTR</field>
<field name="nMaxRdr">DWORD</field>
<field name="lpstrCard">LPSTR</field>
<field name="nMaxCard">DWORD</field>
<field name="lpstrTitle">LPCSTR</field>
<field name="dwFlags">DWORD</field>
<field name="pvUserData">LPVOID</field>
<field name="dwShareMode">DWORD</field>
<field name="dwPreferredProtocols">DWORD</field>
<field name="dwActiveProtocol">DWORD</field>
<field name="lpfnConnect">LPOCNCONNPROCA</field>
<field name="lpfnCheck">LPOCNCHKPROC</field>
<field name="lpfnDisconnect">LPOCNDSCPROC</field>
<field name="hCardHandle">SCARDHANDLE</field>
} OPENCARDNAMEA, *POPENCARDNAMEA, *LPOPENCARDNAMEA;
<struct>
<field name="dwStructSize">DWORD</field>
<field name="hwndOwner">HWND</field>
<field name="hSCardContext">SCARDCONTEXT</field>
<field name="lpstrGroupNames">LPWSTR</field>
<field name="nMaxGroupNames">DWORD</field>
<field name="lpstrCardNames">LPWSTR</field>
<field name="nMaxCardNames">DWORD</field>
<field name="rgguidInterfaces">LPCGUID</field>
<field name="cguidInterfaces">DWORD</field>
<field name="lpstrRdr">LPWSTR</field>
<field name="nMaxRdr">DWORD</field>
<field name="lpstrCard">LPWSTR</field>
<field name="nMaxCard">DWORD</field>
<field name="lpstrTitle">LPCWSTR</field>
<field name="dwFlags">DWORD</field>
<field name="pvUserData">LPVOID</field>
<field name="dwShareMode">DWORD</field>
<field name="dwPreferredProtocols">DWORD</field>
<field name="dwActiveProtocol">DWORD</field>
<field name="lpfnConnect">LPOCNCONNPROCW</field>
<field name="lpfnCheck">LPOCNCHKPROC</field>
<field name="lpfnDisconnect">LPOCNDSCPROC</field>
<field name="hCardHandle">SCARDHANDLE</field>
} OPENCARDNAMEW, *POPENCARDNAMEW, *LPOPENCARDNAMEW;
typedef OPENCARDNAMEA OPENCARDNAME;
typedef POPENCARDNAMEA POPENCARDNAME;
typedef LPOPENCARDNAMEA LPOPENCARDNAME;
<function name="GetOpenCardNameA" ret="extern  LONG" convention="__stdcall">
<arg name="LPOPENCARDNAMEA"> </arg>
</function>
<function name="GetOpenCardNameW" ret="extern  LONG" convention="__stdcall">
<arg name="LPOPENCARDNAMEW"> </arg>
</function>
extern  LONG __stdcall
SCardDlgExtendedError (void);
<function name="SCardReadCacheA" ret="extern  LONG" convention="__stdcall">
<arg name="hContext">SCARDCONTEXT</arg>

     UUID *CardIdentifier,
     DWORD FreshnessCounter,
     LPSTR LookupName,
     PBYTE Data,
     DWORD *DataLen);
<function name="SCardReadCacheW" ret="extern  LONG" convention="__stdcall">
<arg name="hContext">SCARDCONTEXT</arg>

     UUID *CardIdentifier,
     DWORD FreshnessCounter,
     LPWSTR LookupName,
     PBYTE Data,
     DWORD *DataLen);
<function name="SCardWriteCacheA" ret="extern  LONG" convention="__stdcall">
<arg name="hContext">SCARDCONTEXT</arg>

     UUID *CardIdentifier,
     DWORD FreshnessCounter,
     LPSTR LookupName,
     PBYTE Data,
     DWORD DataLen);
<function name="SCardWriteCacheW" ret="extern  LONG" convention="__stdcall">
<arg name="hContext">SCARDCONTEXT</arg>

     UUID *CardIdentifier,
     DWORD FreshnessCounter,
     LPWSTR LookupName,
     PBYTE Data,
     DWORD DataLen);
#line 1 "\\program files\\Microsoft SDKs\\Windows\\v6.0A\\Include\\winspool.h"

#line 1 "\\program files\\Microsoft SDKs\\Windows\\v6.0A\\Include\\prsht.h"
#pragma warning(push)
#pragma warning(disable:4201) 

#line 1 "\\program files\\Microsoft SDKs\\Windows\\v6.0A\\Include\\pshpack4.h"
#pragma warning(disable:4103)

#pragma pack(push,4)

struct _PSP;
<typedef name="HPROPSHEETPAGE">_PSP *</typedef>
struct _PROPSHEETPAGEA;
struct _PROPSHEETPAGEW;
typedef<fnptr name="LPFNPSPCALLBACKA" ret="UINT" convention="__stdcall">
<arg name="hwnd">HWND</arg>
<arg name="uMsg">UINT</arg>
 struct _PROPSHEETPAGEA *ppsp);
typedef<fnptr name="LPFNPSPCALLBACKW" ret="UINT" convention="__stdcall">
<arg name="hwnd">HWND</arg>
<arg name="uMsg">UINT</arg>
 struct _PROPSHEETPAGEW *ppsp);
typedef LPCDLGTEMPLATE PROPSHEETPAGE_RESOURCE;

<struct name="_PROPSHEETPAGEA_V1">
<field name="dwSize">DWORD</field>DWORD dwFlags; HINSTANCE hInstance; union { LPCSTR pszTemplate; PROPSHEETPAGE_RESOURCE pResource; } ; union { HICON hIcon; LPCSTR pszIcon; } ; LPCSTR pszTitle; DLGPROC pfnDlgProc; LPARAM lParam; LPFNPSPCALLBACKA pfnCallback; UINT *pcRefParent;
} PROPSHEETPAGEA_V1, *LPPROPSHEETPAGEA_V1;
typedef const PROPSHEETPAGEA_V1 *LPCPROPSHEETPAGEA_V1;

<struct name="_PROPSHEETPAGEA_V2">
<field name="dwSize">DWORD</field>DWORD dwFlags; HINSTANCE hInstance; union { LPCSTR pszTemplate; PROPSHEETPAGE_RESOURCE pResource; } ; union { HICON hIcon; LPCSTR pszIcon; } ; LPCSTR pszTitle; DLGPROC pfnDlgProc; LPARAM lParam; LPFNPSPCALLBACKA pfnCallback; UINT *pcRefParent;

    LPCSTR           pszHeaderTitle;    
    LPCSTR           pszHeaderSubTitle; 
} PROPSHEETPAGEA_V2, *LPPROPSHEETPAGEA_V2;
typedef const PROPSHEETPAGEA_V2 *LPCPROPSHEETPAGEA_V2;

<struct name="_PROPSHEETPAGEA_V3">
<field name="dwSize">DWORD</field>DWORD dwFlags; HINSTANCE hInstance; union { LPCSTR pszTemplate; PROPSHEETPAGE_RESOURCE pResource; } ; union { HICON hIcon; LPCSTR pszIcon; } ; LPCSTR pszTitle; DLGPROC pfnDlgProc; LPARAM lParam; LPFNPSPCALLBACKA pfnCallback; UINT *pcRefParent;

    LPCSTR           pszHeaderTitle;    
    LPCSTR           pszHeaderSubTitle; 

    HANDLE           hActCtx;
} PROPSHEETPAGEA_V3, *LPPROPSHEETPAGEA_V3;
typedef const PROPSHEETPAGEA_V3 *LPCPROPSHEETPAGEA_V3;
<struct name="_PROPSHEETPAGEA">
<field name="dwSize">DWORD</field>DWORD dwFlags; HINSTANCE hInstance; union { LPCSTR pszTemplate; PROPSHEETPAGE_RESOURCE pResource; } ; union { HICON hIcon; LPCSTR pszIcon; } ; LPCSTR pszTitle; DLGPROC pfnDlgProc; LPARAM lParam; LPFNPSPCALLBACKA pfnCallback; UINT *pcRefParent;

    LPCSTR           pszHeaderTitle;    
    LPCSTR           pszHeaderSubTitle; 

    HANDLE           hActCtx;

    union 
    {
        HBITMAP     hbmHeader;
        LPCSTR      pszbmHeader;
    } ;

} PROPSHEETPAGEA_V4, *LPPROPSHEETPAGEA_V4;
typedef const PROPSHEETPAGEA_V4 *LPCPROPSHEETPAGEA_V4;
<struct name="_PROPSHEETPAGEW_V1">
<field name="dwSize">DWORD</field>DWORD dwFlags; HINSTANCE hInstance; union { LPCWSTR pszTemplate; PROPSHEETPAGE_RESOURCE pResource; } ; union { HICON hIcon; LPCWSTR pszIcon; } ; LPCWSTR pszTitle; DLGPROC pfnDlgProc; LPARAM lParam; LPFNPSPCALLBACKW pfnCallback; UINT *pcRefParent;
} PROPSHEETPAGEW_V1, *LPPROPSHEETPAGEW_V1;
typedef const PROPSHEETPAGEW_V1 *LPCPROPSHEETPAGEW_V1;

<struct name="_PROPSHEETPAGEW_V2">
<field name="dwSize">DWORD</field>DWORD dwFlags; HINSTANCE hInstance; union { LPCWSTR pszTemplate; PROPSHEETPAGE_RESOURCE pResource; } ; union { HICON hIcon; LPCWSTR pszIcon; } ; LPCWSTR pszTitle; DLGPROC pfnDlgProc; LPARAM lParam; LPFNPSPCALLBACKW pfnCallback; UINT *pcRefParent;

    LPCWSTR           pszHeaderTitle;    
    LPCWSTR           pszHeaderSubTitle; 
} PROPSHEETPAGEW_V2, *LPPROPSHEETPAGEW_V2;
typedef const PROPSHEETPAGEW_V2 *LPCPROPSHEETPAGEW_V2;

<struct name="_PROPSHEETPAGEW_V3">
<field name="dwSize">DWORD</field>DWORD dwFlags; HINSTANCE hInstance; union { LPCWSTR pszTemplate; PROPSHEETPAGE_RESOURCE pResource; } ; union { HICON hIcon; LPCWSTR pszIcon; } ; LPCWSTR pszTitle; DLGPROC pfnDlgProc; LPARAM lParam; LPFNPSPCALLBACKW pfnCallback; UINT *pcRefParent;

    LPCWSTR           pszHeaderTitle;    
    LPCWSTR           pszHeaderSubTitle; 

    HANDLE           hActCtx;
} PROPSHEETPAGEW_V3, *LPPROPSHEETPAGEW_V3;
typedef const PROPSHEETPAGEW_V3 *LPCPROPSHEETPAGEW_V3;
<struct name="_PROPSHEETPAGEW">
<field name="dwSize">DWORD</field>DWORD dwFlags; HINSTANCE hInstance; union { LPCWSTR pszTemplate; PROPSHEETPAGE_RESOURCE pResource; } ; union { HICON hIcon; LPCWSTR pszIcon; } ; LPCWSTR pszTitle; DLGPROC pfnDlgProc; LPARAM lParam; LPFNPSPCALLBACKW pfnCallback; UINT *pcRefParent;

    LPCWSTR           pszHeaderTitle;    
    LPCWSTR           pszHeaderSubTitle; 

    HANDLE            hActCtx;

    union 
    {
        HBITMAP     hbmHeader;
        LPCWSTR     pszbmHeader;
    } ;

} PROPSHEETPAGEW_V4, *LPPROPSHEETPAGEW_V4;
typedef const PROPSHEETPAGEW_V4 *LPCPROPSHEETPAGEW_V4;
typedef    PROPSHEETPAGEA_V4    PROPSHEETPAGEA_LATEST;
typedef    PROPSHEETPAGEW_V4    PROPSHEETPAGEW_LATEST;
typedef  LPPROPSHEETPAGEA_V4  LPPROPSHEETPAGEA_LATEST;
typedef  LPPROPSHEETPAGEW_V4  LPPROPSHEETPAGEW_LATEST;
typedef LPCPROPSHEETPAGEA_V4 LPCPROPSHEETPAGEA_LATEST;
typedef LPCPROPSHEETPAGEW_V4 LPCPROPSHEETPAGEW_LATEST;

typedef    PROPSHEETPAGEA_V4    PROPSHEETPAGEA;
typedef    PROPSHEETPAGEW_V4    PROPSHEETPAGEW;
typedef  LPPROPSHEETPAGEA_V4  LPPROPSHEETPAGEA;
typedef  LPPROPSHEETPAGEW_V4  LPPROPSHEETPAGEW;
typedef LPCPROPSHEETPAGEA_V4 LPCPROPSHEETPAGEA;
typedef LPCPROPSHEETPAGEW_V4 LPCPROPSHEETPAGEW;

typedef<fnptr name="PFNPROPSHEETCALLBACK" ret="int" convention="__stdcall">
HWND, UINT, LPARAM);

<struct name="_PROPSHEETHEADERA_V1">
<field name="dwSize">DWORD</field>DWORD dwFlags; HWND hwndParent; HINSTANCE hInstance; union { HICON hIcon; LPCSTR pszIcon; } ; LPCSTR pszCaption; UINT nPages; union { UINT nStartPage; LPCSTR pStartPage; } ; union { LPCPROPSHEETPAGEA ppsp; HPROPSHEETPAGE *phpage; } ; PFNPROPSHEETCALLBACK pfnCallback;
} PROPSHEETHEADERA_V1, *LPPROPSHEETHEADERA_V1;
typedef const PROPSHEETHEADERA_V1 *LPCPROPSHEETHEADERA_V1;
<struct name="_PROPSHEETHEADERA_V2">
<field name="dwSize">DWORD</field>DWORD dwFlags; HWND hwndParent; HINSTANCE hInstance; union { HICON hIcon; LPCSTR pszIcon; } ; LPCSTR pszCaption; UINT nPages; union { UINT nStartPage; LPCSTR pStartPage; } ; union { LPCPROPSHEETPAGEA ppsp; HPROPSHEETPAGE *phpage; } ; PFNPROPSHEETCALLBACK pfnCallback;
    union 
    {
        HBITMAP hbmWatermark;
        LPCSTR pszbmWatermark;
    } ;
    HPALETTE hplWatermark;
    union 
    {
        HBITMAP hbmHeader;     
        LPCSTR pszbmHeader;
    } ;
} PROPSHEETHEADERA_V2, *LPPROPSHEETHEADERA_V2;
typedef const PROPSHEETHEADERA_V2 *LPCPROPSHEETHEADERA_V2;
<struct name="_PROPSHEETHEADERW_V1">
<field name="dwSize">DWORD</field>DWORD dwFlags; HWND hwndParent; HINSTANCE hInstance; union { HICON hIcon; LPCWSTR pszIcon; } ; LPCWSTR pszCaption; UINT nPages; union { UINT nStartPage; LPCWSTR pStartPage; } ; union { LPCPROPSHEETPAGEW ppsp; HPROPSHEETPAGE *phpage; } ; PFNPROPSHEETCALLBACK pfnCallback;
} PROPSHEETHEADERW_V1, *LPPROPSHEETHEADERW_V1;
typedef const PROPSHEETHEADERW_V1 *LPCPROPSHEETHEADERW_V1;
<struct name="_PROPSHEETHEADERW_V2">
<field name="dwSize">DWORD</field>DWORD dwFlags; HWND hwndParent; HINSTANCE hInstance; union { HICON hIcon; LPCWSTR pszIcon; } ; LPCWSTR pszCaption; UINT nPages; union { UINT nStartPage; LPCWSTR pStartPage; } ; union { LPCPROPSHEETPAGEW ppsp; HPROPSHEETPAGE *phpage; } ; PFNPROPSHEETCALLBACK pfnCallback;
    union 
    {
        HBITMAP hbmWatermark;
        LPCWSTR pszbmWatermark;
    } ;
    HPALETTE hplWatermark;
    union 
    {
        HBITMAP hbmHeader;     
        LPCWSTR pszbmHeader;
    } ;
} PROPSHEETHEADERW_V2, *LPPROPSHEETHEADERW_V2;
typedef const PROPSHEETHEADERW_V2 *LPCPROPSHEETHEADERW_V2;

typedef    PROPSHEETHEADERA_V2      PROPSHEETHEADERA;
typedef    PROPSHEETHEADERW_V2      PROPSHEETHEADERW;
typedef  LPPROPSHEETHEADERA_V2      LPPROPSHEETHEADERA;
typedef  LPPROPSHEETHEADERW_V2      LPPROPSHEETHEADERW;
typedef LPCPROPSHEETHEADERA_V2      LPCPROPSHEETHEADERA;
typedef LPCPROPSHEETHEADERW_V2      LPCPROPSHEETHEADERW;
<function name="CreatePropertySheetPageA" ret="HPROPSHEETPAGE" convention="__stdcall">
LPCPROPSHEETPAGEA constPropSheetPagePointer);
<function name="CreatePropertySheetPageW" ret="HPROPSHEETPAGE" convention="__stdcall">
LPCPROPSHEETPAGEW constPropSheetPagePointer);
<function name="DestroyPropertySheetPage" ret="BOOL          " convention="__stdcall">
HPROPSHEETPAGE);

<function name="PropertySheetA" ret="INT_PTR       " convention="__stdcall">
LPCPROPSHEETHEADERA);

<function name="PropertySheetW" ret="INT_PTR       " convention="__stdcall">
LPCPROPSHEETHEADERW);

typedef<fnptr name="LPFNADDPROPSHEETPAGE" ret="BOOL" convention="__stdcall">
HPROPSHEETPAGE, LPARAM);
typedef<fnptr name="LPFNADDPROPSHEETPAGES" ret="BOOL" convention="__stdcall">
LPVOID, LPFNADDPROPSHEETPAGE, LPARAM);
<struct name="_PSHNOTIFY">
<field name="hdr">NMHDR</field>
<field name="lParam">LPARAM</field>
</struct>
<typedefprev id="PSHNOTIFY"/>
<typedefptrprev id="LPPSHNOTIFY"/>

#pragma warning(pop)
#line 1 "\\program files\\Microsoft SDKs\\Windows\\v6.0A\\Include\\poppack.h"
#pragma warning(disable:4103)

#pragma pack(pop)

<struct name="_PRINTER_INFO_1A">
<field name="Flags">DWORD</field>
<field name="pDescription">LPSTR</field>
<field name="pName">LPSTR</field>
<field name="pComment">LPSTR</field>
} PRINTER_INFO_1A, *PPRINTER_INFO_1A, *LPPRINTER_INFO_1A;
<struct name="_PRINTER_INFO_1W">
<field name="Flags">DWORD</field>
<field name="pDescription">LPWSTR</field>
<field name="pName">LPWSTR</field>
<field name="pComment">LPWSTR</field>
} PRINTER_INFO_1W, *PPRINTER_INFO_1W, *LPPRINTER_INFO_1W;
typedef PRINTER_INFO_1A PRINTER_INFO_1;
typedef PPRINTER_INFO_1A PPRINTER_INFO_1;
typedef LPPRINTER_INFO_1A LPPRINTER_INFO_1;
<struct name="_PRINTER_INFO_2A">
<field name="pServerName">LPSTR</field>
<field name="pPrinterName">LPSTR</field>
<field name="pShareName">LPSTR</field>
<field name="pPortName">LPSTR</field>
<field name="pDriverName">LPSTR</field>
<field name="pComment">LPSTR</field>
<field name="pLocation">LPSTR</field>
<field name="pDevMode">LPDEVMODEA</field>
<field name="pSepFile">LPSTR</field>
<field name="pPrintProcessor">LPSTR</field>
<field name="pDatatype">LPSTR</field>
<field name="pParameters">LPSTR</field>
<field name="pSecurityDescriptor">PSECURITY_DESCRIPTOR</field>
<field name="Attributes">DWORD</field>
<field name="Priority">DWORD</field>
<field name="DefaultPriority">DWORD</field>
<field name="StartTime">DWORD</field>
<field name="UntilTime">DWORD</field>
<field name="Status">DWORD</field>
<field name="cJobs">DWORD</field>
<field name="AveragePPM">DWORD</field>
} PRINTER_INFO_2A, *PPRINTER_INFO_2A, *LPPRINTER_INFO_2A;
<struct name="_PRINTER_INFO_2W">
<field name="pServerName">LPWSTR</field>
<field name="pPrinterName">LPWSTR</field>
<field name="pShareName">LPWSTR</field>
<field name="pPortName">LPWSTR</field>
<field name="pDriverName">LPWSTR</field>
<field name="pComment">LPWSTR</field>
<field name="pLocation">LPWSTR</field>
<field name="pDevMode">LPDEVMODEW</field>
<field name="pSepFile">LPWSTR</field>
<field name="pPrintProcessor">LPWSTR</field>
<field name="pDatatype">LPWSTR</field>
<field name="pParameters">LPWSTR</field>
<field name="pSecurityDescriptor">PSECURITY_DESCRIPTOR</field>
<field name="Attributes">DWORD</field>
<field name="Priority">DWORD</field>
<field name="DefaultPriority">DWORD</field>
<field name="StartTime">DWORD</field>
<field name="UntilTime">DWORD</field>
<field name="Status">DWORD</field>
<field name="cJobs">DWORD</field>
<field name="AveragePPM">DWORD</field>
} PRINTER_INFO_2W, *PPRINTER_INFO_2W, *LPPRINTER_INFO_2W;
typedef PRINTER_INFO_2A PRINTER_INFO_2;
typedef PPRINTER_INFO_2A PPRINTER_INFO_2;
typedef LPPRINTER_INFO_2A LPPRINTER_INFO_2;

<struct name="_PRINTER_INFO_3">
<field name="pSecurityDescriptor">PSECURITY_DESCRIPTOR</field>
} PRINTER_INFO_3, *PPRINTER_INFO_3, *LPPRINTER_INFO_3;

<struct name="_PRINTER_INFO_4A">
<field name="pPrinterName">LPSTR</field>
<field name="pServerName">LPSTR</field>
<field name="Attributes">DWORD</field>
} PRINTER_INFO_4A, *PPRINTER_INFO_4A, *LPPRINTER_INFO_4A;
<struct name="_PRINTER_INFO_4W">
<field name="pPrinterName">LPWSTR</field>
<field name="pServerName">LPWSTR</field>
<field name="Attributes">DWORD</field>
} PRINTER_INFO_4W, *PPRINTER_INFO_4W, *LPPRINTER_INFO_4W;
typedef PRINTER_INFO_4A PRINTER_INFO_4;
typedef PPRINTER_INFO_4A PPRINTER_INFO_4;
typedef LPPRINTER_INFO_4A LPPRINTER_INFO_4;

<struct name="_PRINTER_INFO_5A">
<field name="pPrinterName">LPSTR</field>
<field name="pPortName">LPSTR</field>
<field name="Attributes">DWORD</field>
<field name="DeviceNotSelectedTimeout">DWORD</field>
<field name="TransmissionRetryTimeout">DWORD</field>
} PRINTER_INFO_5A, *PPRINTER_INFO_5A, *LPPRINTER_INFO_5A;
<struct name="_PRINTER_INFO_5W">
<field name="pPrinterName">LPWSTR</field>
<field name="pPortName">LPWSTR</field>
<field name="Attributes">DWORD</field>
<field name="DeviceNotSelectedTimeout">DWORD</field>
<field name="TransmissionRetryTimeout">DWORD</field>
} PRINTER_INFO_5W, *PPRINTER_INFO_5W, *LPPRINTER_INFO_5W;
typedef PRINTER_INFO_5A PRINTER_INFO_5;
typedef PPRINTER_INFO_5A PPRINTER_INFO_5;
typedef LPPRINTER_INFO_5A LPPRINTER_INFO_5;

<struct name="_PRINTER_INFO_6">
<field name="dwStatus">DWORD</field>
} PRINTER_INFO_6, *PPRINTER_INFO_6, *LPPRINTER_INFO_6;
<struct name="_PRINTER_INFO_7A">
<field name="pszObjectGUID">LPSTR</field>
<field name="dwAction">DWORD</field>
} PRINTER_INFO_7A, *PPRINTER_INFO_7A, *LPPRINTER_INFO_7A;
<struct name="_PRINTER_INFO_7W">
<field name="pszObjectGUID">LPWSTR</field>
<field name="dwAction">DWORD</field>
} PRINTER_INFO_7W, *PPRINTER_INFO_7W, *LPPRINTER_INFO_7W;
typedef PRINTER_INFO_7A PRINTER_INFO_7;
typedef PPRINTER_INFO_7A PPRINTER_INFO_7;
typedef LPPRINTER_INFO_7A LPPRINTER_INFO_7;
<struct name="_PRINTER_INFO_8A">
<field name="pDevMode">LPDEVMODEA</field>
} PRINTER_INFO_8A, *PPRINTER_INFO_8A, *LPPRINTER_INFO_8A;
<struct name="_PRINTER_INFO_8W">
<field name="pDevMode">LPDEVMODEW</field>
} PRINTER_INFO_8W, *PPRINTER_INFO_8W, *LPPRINTER_INFO_8W;
typedef PRINTER_INFO_8A PRINTER_INFO_8;
typedef PPRINTER_INFO_8A PPRINTER_INFO_8;
typedef LPPRINTER_INFO_8A LPPRINTER_INFO_8;
<struct name="_PRINTER_INFO_9A">
<field name="pDevMode">LPDEVMODEA</field>
} PRINTER_INFO_9A, *PPRINTER_INFO_9A, *LPPRINTER_INFO_9A;
<struct name="_PRINTER_INFO_9W">
<field name="pDevMode">LPDEVMODEW</field>
} PRINTER_INFO_9W, *PPRINTER_INFO_9W, *LPPRINTER_INFO_9W;
typedef PRINTER_INFO_9A PRINTER_INFO_9;
typedef PPRINTER_INFO_9A PPRINTER_INFO_9;
typedef LPPRINTER_INFO_9A LPPRINTER_INFO_9;

    

    

    
    
    
    
    
    
    
    
    
    
    

    

<struct name="_JOB_INFO_1A">
<field name="JobId">DWORD</field>
<field name="pPrinterName">LPSTR</field>
<field name="pMachineName">LPSTR</field>
<field name="pUserName">LPSTR</field>
<field name="pDocument">LPSTR</field>
<field name="pDatatype">LPSTR</field>
<field name="pStatus">LPSTR</field>
<field name="Status">DWORD</field>
<field name="Priority">DWORD</field>
<field name="Position">DWORD</field>
<field name="TotalPages">DWORD</field>
<field name="PagesPrinted">DWORD</field>
<field name="Submitted">SYSTEMTIME</field>
} JOB_INFO_1A, *PJOB_INFO_1A, *LPJOB_INFO_1A;
<struct name="_JOB_INFO_1W">
<field name="JobId">DWORD</field>
<field name="pPrinterName">LPWSTR</field>
<field name="pMachineName">LPWSTR</field>
<field name="pUserName">LPWSTR</field>
<field name="pDocument">LPWSTR</field>
<field name="pDatatype">LPWSTR</field>
<field name="pStatus">LPWSTR</field>
<field name="Status">DWORD</field>
<field name="Priority">DWORD</field>
<field name="Position">DWORD</field>
<field name="TotalPages">DWORD</field>
<field name="PagesPrinted">DWORD</field>
<field name="Submitted">SYSTEMTIME</field>
} JOB_INFO_1W, *PJOB_INFO_1W, *LPJOB_INFO_1W;
typedef JOB_INFO_1A JOB_INFO_1;
typedef PJOB_INFO_1A PJOB_INFO_1;
typedef LPJOB_INFO_1A LPJOB_INFO_1;
<struct name="_JOB_INFO_2A">
<field name="JobId">DWORD</field>
<field name="pPrinterName">LPSTR</field>
<field name="pMachineName">LPSTR</field>
<field name="pUserName">LPSTR</field>
<field name="pDocument">LPSTR</field>
<field name="pNotifyName">LPSTR</field>
<field name="pDatatype">LPSTR</field>
<field name="pPrintProcessor">LPSTR</field>
<field name="pParameters">LPSTR</field>
<field name="pDriverName">LPSTR</field>
<field name="pDevMode">LPDEVMODEA</field>
<field name="pStatus">LPSTR</field>
<field name="pSecurityDescriptor">PSECURITY_DESCRIPTOR</field>
<field name="Status">DWORD</field>
<field name="Priority">DWORD</field>
<field name="Position">DWORD</field>
<field name="StartTime">DWORD</field>
<field name="UntilTime">DWORD</field>
<field name="TotalPages">DWORD</field>
<field name="Size">DWORD</field>
<field name="Submitted">SYSTEMTIME</field>
<field name="Time">DWORD</field>
<field name="PagesPrinted">DWORD</field>
} JOB_INFO_2A, *PJOB_INFO_2A, *LPJOB_INFO_2A;
<struct name="_JOB_INFO_2W">
<field name="JobId">DWORD</field>
<field name="pPrinterName">LPWSTR</field>
<field name="pMachineName">LPWSTR</field>
<field name="pUserName">LPWSTR</field>
<field name="pDocument">LPWSTR</field>
<field name="pNotifyName">LPWSTR</field>
<field name="pDatatype">LPWSTR</field>
<field name="pPrintProcessor">LPWSTR</field>
<field name="pParameters">LPWSTR</field>
<field name="pDriverName">LPWSTR</field>
<field name="pDevMode">LPDEVMODEW</field>
<field name="pStatus">LPWSTR</field>
<field name="pSecurityDescriptor">PSECURITY_DESCRIPTOR</field>
<field name="Status">DWORD</field>
<field name="Priority">DWORD</field>
<field name="Position">DWORD</field>
<field name="StartTime">DWORD</field>
<field name="UntilTime">DWORD</field>
<field name="TotalPages">DWORD</field>
<field name="Size">DWORD</field>
<field name="Submitted">SYSTEMTIME</field>
<field name="Time">DWORD</field>
<field name="PagesPrinted">DWORD</field>
} JOB_INFO_2W, *PJOB_INFO_2W, *LPJOB_INFO_2W;
typedef JOB_INFO_2A JOB_INFO_2;
typedef PJOB_INFO_2A PJOB_INFO_2;
typedef LPJOB_INFO_2A LPJOB_INFO_2;
<struct name="_JOB_INFO_3">
<field name="JobId">DWORD</field>
<field name="NextJobId">DWORD</field>
<field name="Reserved">DWORD</field>
} JOB_INFO_3, *PJOB_INFO_3, *LPJOB_INFO_3;

<struct name="_JOB_INFO_4A">
<field name="JobId">DWORD</field>
<field name="pPrinterName">LPSTR</field>
<field name="pMachineName">LPSTR</field>
<field name="pUserName">LPSTR</field>
<field name="pDocument">LPSTR</field>
<field name="pNotifyName">LPSTR</field>
<field name="pDatatype">LPSTR</field>
<field name="pPrintProcessor">LPSTR</field>
<field name="pParameters">LPSTR</field>
<field name="pDriverName">LPSTR</field>
<field name="pDevMode">LPDEVMODEA</field>
<field name="pStatus">LPSTR</field>
<field name="pSecurityDescriptor">PSECURITY_DESCRIPTOR</field>
<field name="Status">DWORD</field>
<field name="Priority">DWORD</field>
<field name="Position">DWORD</field>
<field name="StartTime">DWORD</field>
<field name="UntilTime">DWORD</field>
<field name="TotalPages">DWORD</field>
<field name="Size">DWORD</field>
<field name="Submitted">SYSTEMTIME</field>
<field name="Time">DWORD</field>
<field name="PagesPrinted">DWORD</field>
<field name="SizeHigh">LONG</field>
} JOB_INFO_4A, *PJOB_INFO_4A, *LPJOB_INFO_4A;
<struct name="_JOB_INFO_4W">
<field name="JobId">DWORD</field>
<field name="pPrinterName">LPWSTR</field>
<field name="pMachineName">LPWSTR</field>
<field name="pUserName">LPWSTR</field>
<field name="pDocument">LPWSTR</field>
<field name="pNotifyName">LPWSTR</field>
<field name="pDatatype">LPWSTR</field>
<field name="pPrintProcessor">LPWSTR</field>
<field name="pParameters">LPWSTR</field>
<field name="pDriverName">LPWSTR</field>
<field name="pDevMode">LPDEVMODEW</field>
<field name="pStatus">LPWSTR</field>
<field name="pSecurityDescriptor">PSECURITY_DESCRIPTOR</field>
<field name="Status">DWORD</field>
<field name="Priority">DWORD</field>
<field name="Position">DWORD</field>
<field name="StartTime">DWORD</field>
<field name="UntilTime">DWORD</field>
<field name="TotalPages">DWORD</field>
<field name="Size">DWORD</field>
<field name="Submitted">SYSTEMTIME</field>
<field name="Time">DWORD</field>
<field name="PagesPrinted">DWORD</field>
<field name="SizeHigh">LONG</field>
} JOB_INFO_4W, *PJOB_INFO_4W, *LPJOB_INFO_4W;
typedef JOB_INFO_4A JOB_INFO_4;
typedef PJOB_INFO_4A PJOB_INFO_4;
typedef LPJOB_INFO_4A LPJOB_INFO_4;

    
    
    

    
    

<struct name="_ADDJOB_INFO_1A">
<field name="Path">LPSTR</field>
<field name="JobId">DWORD</field>
} ADDJOB_INFO_1A, *PADDJOB_INFO_1A, *LPADDJOB_INFO_1A;
<struct name="_ADDJOB_INFO_1W">
<field name="Path">LPWSTR</field>
<field name="JobId">DWORD</field>
} ADDJOB_INFO_1W, *PADDJOB_INFO_1W, *LPADDJOB_INFO_1W;
typedef ADDJOB_INFO_1A ADDJOB_INFO_1;
typedef PADDJOB_INFO_1A PADDJOB_INFO_1;
typedef LPADDJOB_INFO_1A LPADDJOB_INFO_1;

<struct name="_DRIVER_INFO_1A">
<field name="pName">LPSTR</field>
} DRIVER_INFO_1A, *PDRIVER_INFO_1A, *LPDRIVER_INFO_1A;
<struct name="_DRIVER_INFO_1W">
<field name="pName">LPWSTR</field>
} DRIVER_INFO_1W, *PDRIVER_INFO_1W, *LPDRIVER_INFO_1W;
typedef DRIVER_INFO_1A DRIVER_INFO_1;
typedef PDRIVER_INFO_1A PDRIVER_INFO_1;
typedef LPDRIVER_INFO_1A LPDRIVER_INFO_1;
<struct name="_DRIVER_INFO_2A">
<field name="cVersion">DWORD</field>
<field name="pName">LPSTR</field>
<field name="pEnvironment">LPSTR</field>
<field name="pDriverPath">LPSTR</field>
<field name="pDataFile">LPSTR</field>
<field name="pConfigFile">LPSTR</field>
} DRIVER_INFO_2A, *PDRIVER_INFO_2A, *LPDRIVER_INFO_2A;
<struct name="_DRIVER_INFO_2W">
<field name="cVersion">DWORD</field>
<field name="pName">LPWSTR</field>
<field name="pEnvironment">LPWSTR</field>
<field name="pDriverPath">LPWSTR</field>
<field name="pDataFile">LPWSTR</field>
<field name="pConfigFile">LPWSTR</field>
} DRIVER_INFO_2W, *PDRIVER_INFO_2W, *LPDRIVER_INFO_2W;
typedef DRIVER_INFO_2A DRIVER_INFO_2;
typedef PDRIVER_INFO_2A PDRIVER_INFO_2;
typedef LPDRIVER_INFO_2A LPDRIVER_INFO_2;
<struct name="_DRIVER_INFO_3A">
<field name="cVersion">DWORD</field>
<field name="pName">LPSTR</field>
<field name="pEnvironment">LPSTR</field>
<field name="pDriverPath">LPSTR</field>
<field name="pDataFile">LPSTR</field>
<field name="pConfigFile">LPSTR</field>
<field name="pHelpFile">LPSTR</field>
<field name="pDependentFiles">LPSTR</field>
<field name="pMonitorName">LPSTR</field>
<field name="pDefaultDataType">LPSTR</field>
} DRIVER_INFO_3A, *PDRIVER_INFO_3A, *LPDRIVER_INFO_3A;
<struct name="_DRIVER_INFO_3W">
<field name="cVersion">DWORD</field>
<field name="pName">LPWSTR</field>
<field name="pEnvironment">LPWSTR</field>
<field name="pDriverPath">LPWSTR</field>
<field name="pDataFile">LPWSTR</field>
<field name="pConfigFile">LPWSTR</field>
<field name="pHelpFile">LPWSTR</field>
<field name="pDependentFiles">LPWSTR</field>
<field name="pMonitorName">LPWSTR</field>
<field name="pDefaultDataType">LPWSTR</field>
} DRIVER_INFO_3W, *PDRIVER_INFO_3W, *LPDRIVER_INFO_3W;
typedef DRIVER_INFO_3A DRIVER_INFO_3;
typedef PDRIVER_INFO_3A PDRIVER_INFO_3;
typedef LPDRIVER_INFO_3A LPDRIVER_INFO_3;
<struct name="_DRIVER_INFO_4A">
<field name="cVersion">DWORD</field>
<field name="pName">LPSTR</field>
<field name="pEnvironment">LPSTR</field>
<field name="pDriverPath">LPSTR</field>
<field name="pDataFile">LPSTR</field>
<field name="pConfigFile">LPSTR</field>
<field name="pHelpFile">LPSTR</field>
<field name="pDependentFiles">LPSTR</field>
<field name="pMonitorName">LPSTR</field>
<field name="pDefaultDataType">LPSTR</field>
<field name="pszzPreviousNames">LPSTR</field>
} DRIVER_INFO_4A, *PDRIVER_INFO_4A, *LPDRIVER_INFO_4A;
<struct name="_DRIVER_INFO_4W">
<field name="cVersion">DWORD</field>
<field name="pName">LPWSTR</field>
<field name="pEnvironment">LPWSTR</field>
<field name="pDriverPath">LPWSTR</field>
<field name="pDataFile">LPWSTR</field>
<field name="pConfigFile">LPWSTR</field>
<field name="pHelpFile">LPWSTR</field>
<field name="pDependentFiles">LPWSTR</field>
<field name="pMonitorName">LPWSTR</field>
<field name="pDefaultDataType">LPWSTR</field>
<field name="pszzPreviousNames">LPWSTR</field>
} DRIVER_INFO_4W, *PDRIVER_INFO_4W, *LPDRIVER_INFO_4W;
typedef DRIVER_INFO_4A DRIVER_INFO_4;
typedef PDRIVER_INFO_4A PDRIVER_INFO_4;
typedef LPDRIVER_INFO_4A LPDRIVER_INFO_4;
<struct name="_DRIVER_INFO_5A">
<field name="cVersion">DWORD</field>
<field name="pName">LPSTR</field>
<field name="pEnvironment">LPSTR</field>
<field name="pDriverPath">LPSTR</field>
<field name="pDataFile">LPSTR</field>
<field name="pConfigFile">LPSTR</field>
<field name="dwDriverAttributes">DWORD</field>
<field name="dwConfigVersion">DWORD</field>
<field name="dwDriverVersion">DWORD</field>
} DRIVER_INFO_5A, *PDRIVER_INFO_5A, *LPDRIVER_INFO_5A;
<struct name="_DRIVER_INFO_5W">
<field name="cVersion">DWORD</field>
<field name="pName">LPWSTR</field>
<field name="pEnvironment">LPWSTR</field>
<field name="pDriverPath">LPWSTR</field>
<field name="pDataFile">LPWSTR</field>
<field name="pConfigFile">LPWSTR</field>
<field name="dwDriverAttributes">DWORD</field>
<field name="dwConfigVersion">DWORD</field>
<field name="dwDriverVersion">DWORD</field>
} DRIVER_INFO_5W, *PDRIVER_INFO_5W, *LPDRIVER_INFO_5W;
typedef DRIVER_INFO_5A DRIVER_INFO_5;
typedef PDRIVER_INFO_5A PDRIVER_INFO_5;
typedef LPDRIVER_INFO_5A LPDRIVER_INFO_5;
<struct name="_DRIVER_INFO_6A">
<field name="cVersion">DWORD</field>
<field name="pName">LPSTR</field>
<field name="pEnvironment">LPSTR</field>
<field name="pDriverPath">LPSTR</field>
<field name="pDataFile">LPSTR</field>
<field name="pConfigFile">LPSTR</field>
<field name="pHelpFile">LPSTR</field>
<field name="pDependentFiles">LPSTR</field>
<field name="pMonitorName">LPSTR</field>
<field name="pDefaultDataType">LPSTR</field>
<field name="pszzPreviousNames">LPSTR</field>
<field name="ftDriverDate">FILETIME</field>
<field name="dwlDriverVersion">DWORDLONG</field>
<field name="pszMfgName">LPSTR</field>
<field name="pszOEMUrl">LPSTR</field>
<field name="pszHardwareID">LPSTR</field>
<field name="pszProvider">LPSTR</field>
} DRIVER_INFO_6A, *PDRIVER_INFO_6A, *LPDRIVER_INFO_6A;
<struct name="_DRIVER_INFO_6W">
<field name="cVersion">DWORD</field>
<field name="pName">LPWSTR</field>
<field name="pEnvironment">LPWSTR</field>
<field name="pDriverPath">LPWSTR</field>
<field name="pDataFile">LPWSTR</field>
<field name="pConfigFile">LPWSTR</field>
<field name="pHelpFile">LPWSTR</field>
<field name="pDependentFiles">LPWSTR</field>
<field name="pMonitorName">LPWSTR</field>
<field name="pDefaultDataType">LPWSTR</field>
<field name="pszzPreviousNames">LPWSTR</field>
<field name="ftDriverDate">FILETIME</field>
<field name="dwlDriverVersion">DWORDLONG</field>
<field name="pszMfgName">LPWSTR</field>
<field name="pszOEMUrl">LPWSTR</field>
<field name="pszHardwareID">LPWSTR</field>
<field name="pszProvider">LPWSTR</field>
} DRIVER_INFO_6W, *PDRIVER_INFO_6W, *LPDRIVER_INFO_6W;
typedef DRIVER_INFO_6A DRIVER_INFO_6;
typedef PDRIVER_INFO_6A PDRIVER_INFO_6;
typedef LPDRIVER_INFO_6A LPDRIVER_INFO_6;

<struct name="_DRIVER_INFO_8A">
<field name="cVersion">DWORD</field>
<field name="pName">LPSTR</field>
<field name="pEnvironment">LPSTR</field>
<field name="pDriverPath">LPSTR</field>
<field name="pDataFile">LPSTR</field>
<field name="pConfigFile">LPSTR</field>
<field name="pHelpFile">LPSTR</field>
<field name="pDependentFiles">LPSTR</field>
<field name="pMonitorName">LPSTR</field>
<field name="pDefaultDataType">LPSTR</field>
<field name="pszzPreviousNames">LPSTR</field>
<field name="ftDriverDate">FILETIME</field>
<field name="dwlDriverVersion">DWORDLONG</field>
<field name="pszMfgName">LPSTR</field>
<field name="pszOEMUrl">LPSTR</field>
<field name="pszHardwareID">LPSTR</field>
<field name="pszProvider">LPSTR</field>
<field name="pszPrintProcessor">LPSTR</field>
<field name="pszVendorSetup">LPSTR</field>
<field name="pszzColorProfiles">LPSTR</field>
<field name="pszInfPath">LPSTR</field>
<field name="dwPrinterDriverAttributes">DWORD</field>
<field name="pszzCoreDriverDependencies">LPSTR</field>
<field name="ftMinInboxDriverVerDate">FILETIME</field>
<field name="dwlMinInboxDriverVerVersion">DWORDLONG</field>
} DRIVER_INFO_8A, *PDRIVER_INFO_8A, *LPDRIVER_INFO_8A;
<struct name="_DRIVER_INFO_8W">
<field name="cVersion">DWORD</field>
<field name="pName">LPWSTR</field>
<field name="pEnvironment">LPWSTR</field>
<field name="pDriverPath">LPWSTR</field>
<field name="pDataFile">LPWSTR</field>
<field name="pConfigFile">LPWSTR</field>
<field name="pHelpFile">LPWSTR</field>
<field name="pDependentFiles">LPWSTR</field>
<field name="pMonitorName">LPWSTR</field>
<field name="pDefaultDataType">LPWSTR</field>
<field name="pszzPreviousNames">LPWSTR</field>
<field name="ftDriverDate">FILETIME</field>
<field name="dwlDriverVersion">DWORDLONG</field>
<field name="pszMfgName">LPWSTR</field>
<field name="pszOEMUrl">LPWSTR</field>
<field name="pszHardwareID">LPWSTR</field>
<field name="pszProvider">LPWSTR</field>
<field name="pszPrintProcessor">LPWSTR</field>
<field name="pszVendorSetup">LPWSTR</field>
<field name="pszzColorProfiles">LPWSTR</field>
<field name="pszInfPath">LPWSTR</field>
<field name="dwPrinterDriverAttributes">DWORD</field>
<field name="pszzCoreDriverDependencies">LPWSTR</field>
<field name="ftMinInboxDriverVerDate">FILETIME</field>
<field name="dwlMinInboxDriverVerVersion">DWORDLONG</field>
} DRIVER_INFO_8W, *PDRIVER_INFO_8W, *LPDRIVER_INFO_8W;
typedef DRIVER_INFO_8A DRIVER_INFO_8;
typedef PDRIVER_INFO_8A PDRIVER_INFO_8;
typedef LPDRIVER_INFO_8A LPDRIVER_INFO_8;
    
<struct name="_DOC_INFO_1A">
<field name="pDocName">LPSTR</field>
<field name="pOutputFile">LPSTR</field>
<field name="pDatatype">LPSTR</field>
} DOC_INFO_1A, *PDOC_INFO_1A, *LPDOC_INFO_1A;
<struct name="_DOC_INFO_1W">
<field name="pDocName">LPWSTR</field>
<field name="pOutputFile">LPWSTR</field>
<field name="pDatatype">LPWSTR</field>
} DOC_INFO_1W, *PDOC_INFO_1W, *LPDOC_INFO_1W;
typedef DOC_INFO_1A DOC_INFO_1;
typedef PDOC_INFO_1A PDOC_INFO_1;
typedef LPDOC_INFO_1A LPDOC_INFO_1;
<struct name="_FORM_INFO_1A">
<field name="Flags">DWORD</field>
<field name="pName">LPSTR</field>
<field name="Size">SIZEL</field>
<field name="ImageableArea">RECTL</field>
} FORM_INFO_1A, *PFORM_INFO_1A, *LPFORM_INFO_1A;
<struct name="_FORM_INFO_1W">
<field name="Flags">DWORD</field>
<field name="pName">LPWSTR</field>
<field name="Size">SIZEL</field>
<field name="ImageableArea">RECTL</field>
} FORM_INFO_1W, *PFORM_INFO_1W, *LPFORM_INFO_1W;
typedef FORM_INFO_1A FORM_INFO_1;
typedef PFORM_INFO_1A PFORM_INFO_1;
typedef LPFORM_INFO_1A LPFORM_INFO_1;

    
    
    

    

<struct name="_FORM_INFO_2A">
<field name="Flags">DWORD</field>
<field name="pName">LPCSTR</field>
<field name="Size">SIZEL</field>
<field name="ImageableArea">RECTL</field>
<field name="pKeyword">LPCSTR</field>
<field name="StringType">DWORD</field>
<field name="pMuiDll">LPCSTR</field>
<field name="dwResourceId">DWORD</field>
<field name="pDisplayName">LPCSTR</field>
<field name="wLangId">LANGID</field>
    } FORM_INFO_2A, *PFORM_INFO_2A, *LPFORM_INFO_2A;
<struct name="_FORM_INFO_2W">
<field name="Flags">DWORD</field>
<field name="pName">LPCWSTR</field>
<field name="Size">SIZEL</field>
<field name="ImageableArea">RECTL</field>
<field name="pKeyword">LPCSTR</field>
<field name="StringType">DWORD</field>
<field name="pMuiDll">LPCWSTR</field>
<field name="dwResourceId">DWORD</field>
<field name="pDisplayName">LPCWSTR</field>
<field name="wLangId">LANGID</field>
    } FORM_INFO_2W, *PFORM_INFO_2W, *LPFORM_INFO_2W;
typedef FORM_INFO_2A FORM_INFO_2;
typedef PFORM_INFO_2A PFORM_INFO_2;
typedef LPFORM_INFO_2A LPFORM_INFO_2;
<struct name="_DOC_INFO_2A">
<field name="pDocName">LPSTR</field>
<field name="pOutputFile">LPSTR</field>
<field name="pDatatype">LPSTR</field>
<field name="dwMode">DWORD</field>
<field name="JobId">DWORD</field>
} DOC_INFO_2A, *PDOC_INFO_2A, *LPDOC_INFO_2A;
<struct name="_DOC_INFO_2W">
<field name="pDocName">LPWSTR</field>
<field name="pOutputFile">LPWSTR</field>
<field name="pDatatype">LPWSTR</field>
<field name="dwMode">DWORD</field>
<field name="JobId">DWORD</field>
} DOC_INFO_2W, *PDOC_INFO_2W, *LPDOC_INFO_2W;
typedef DOC_INFO_2A DOC_INFO_2;
typedef PDOC_INFO_2A PDOC_INFO_2;
typedef LPDOC_INFO_2A LPDOC_INFO_2;
<struct name="_DOC_INFO_3A">
<field name="pDocName">LPSTR</field>
<field name="pOutputFile">LPSTR</field>
<field name="pDatatype">LPSTR</field>
<field name="dwFlags">DWORD</field>
} DOC_INFO_3A, *PDOC_INFO_3A, *LPDOC_INFO_3A;
<struct name="_DOC_INFO_3W">
<field name="pDocName">LPWSTR</field>
<field name="pOutputFile">LPWSTR</field>
<field name="pDatatype">LPWSTR</field>
<field name="dwFlags">DWORD</field>
} DOC_INFO_3W, *PDOC_INFO_3W, *LPDOC_INFO_3W;
typedef DOC_INFO_3A DOC_INFO_3;
typedef PDOC_INFO_3A PDOC_INFO_3;
typedef LPDOC_INFO_3A LPDOC_INFO_3;

<struct name="_PRINTPROCESSOR_INFO_1A">
<field name="pName">LPSTR</field>
} PRINTPROCESSOR_INFO_1A, *PPRINTPROCESSOR_INFO_1A, *LPPRINTPROCESSOR_INFO_1A;
<struct name="_PRINTPROCESSOR_INFO_1W">
<field name="pName">LPWSTR</field>
} PRINTPROCESSOR_INFO_1W, *PPRINTPROCESSOR_INFO_1W, *LPPRINTPROCESSOR_INFO_1W;
typedef PRINTPROCESSOR_INFO_1A PRINTPROCESSOR_INFO_1;
typedef PPRINTPROCESSOR_INFO_1A PPRINTPROCESSOR_INFO_1;
typedef LPPRINTPROCESSOR_INFO_1A LPPRINTPROCESSOR_INFO_1;

<struct name="_PRINTPROCESSOR_CAPS_1">
<field name="dwLevel">DWORD</field>
<field name="dwNupOptions">DWORD</field>
<field name="dwPageOrderFlags">DWORD</field>
<field name="dwNumberOfCopies">DWORD</field>
</struct>
<typedefprev id="PRINTPROCESSOR_CAPS_1"/>
<typedefptrprev id="PPRINTPROCESSOR_CAPS_1"/>

    
    

<struct name="_PRINTPROCESSOR_CAPS_2">
<field name="dwLevel">DWORD</field>
<field name="dwNupOptions">DWORD</field>
<field name="dwPageOrderFlags">DWORD</field>
<field name="dwNumberOfCopies">DWORD</field>
        
        DWORD     dwDuplexHandlingCaps;
        DWORD     dwNupDirectionCaps;
        DWORD     dwNupBorderCaps;
        DWORD     dwBookletHandlingCaps;
        DWORD     dwScalingCaps;

    } PRINTPROCESSOR_CAPS_2, *PPRINTPROCESSOR_CAPS_2;

    
    
    
    
    

    
    

    
    

    
    
    
    
    
    

    
    

<struct name="_PORT_INFO_1A">
<field name="pName">LPSTR</field>
} PORT_INFO_1A, *PPORT_INFO_1A, *LPPORT_INFO_1A;
<struct name="_PORT_INFO_1W">
<field name="pName">LPWSTR</field>
} PORT_INFO_1W, *PPORT_INFO_1W, *LPPORT_INFO_1W;
typedef PORT_INFO_1A PORT_INFO_1;
typedef PPORT_INFO_1A PPORT_INFO_1;
typedef LPPORT_INFO_1A LPPORT_INFO_1;

<struct name="_PORT_INFO_2A">
<field name="pPortName">LPSTR</field>
<field name="pMonitorName">LPSTR</field>
<field name="pDescription">LPSTR</field>
<field name="fPortType">DWORD</field>
<field name="Reserved">DWORD</field>
} PORT_INFO_2A, *PPORT_INFO_2A, *LPPORT_INFO_2A;
<struct name="_PORT_INFO_2W">
<field name="pPortName">LPWSTR</field>
<field name="pMonitorName">LPWSTR</field>
<field name="pDescription">LPWSTR</field>
<field name="fPortType">DWORD</field>
<field name="Reserved">DWORD</field>
} PORT_INFO_2W, *PPORT_INFO_2W, *LPPORT_INFO_2W;
typedef PORT_INFO_2A PORT_INFO_2;
typedef PPORT_INFO_2A PPORT_INFO_2;
typedef LPPORT_INFO_2A LPPORT_INFO_2;

<struct name="_PORT_INFO_3A">
<field name="dwStatus">DWORD</field>
<field name="pszStatus">LPSTR</field>
<field name="dwSeverity">DWORD</field>
} PORT_INFO_3A, *PPORT_INFO_3A, *LPPORT_INFO_3A;
<struct name="_PORT_INFO_3W">
<field name="dwStatus">DWORD</field>
<field name="pszStatus">LPWSTR</field>
<field name="dwSeverity">DWORD</field>
} PORT_INFO_3W, *PPORT_INFO_3W, *LPPORT_INFO_3W;
typedef PORT_INFO_3A PORT_INFO_3;
typedef PPORT_INFO_3A PPORT_INFO_3;
typedef LPPORT_INFO_3A LPPORT_INFO_3;

<struct name="_MONITOR_INFO_1A">
<field name="pName">LPSTR</field>
} MONITOR_INFO_1A, *PMONITOR_INFO_1A, *LPMONITOR_INFO_1A;
<struct name="_MONITOR_INFO_1W">
<field name="pName">LPWSTR</field>
} MONITOR_INFO_1W, *PMONITOR_INFO_1W, *LPMONITOR_INFO_1W;
typedef MONITOR_INFO_1A MONITOR_INFO_1;
typedef PMONITOR_INFO_1A PMONITOR_INFO_1;
typedef LPMONITOR_INFO_1A LPMONITOR_INFO_1;

<struct name="_MONITOR_INFO_2A">
<field name="pName">LPSTR</field>
<field name="pEnvironment">LPSTR</field>
<field name="pDLLName">LPSTR</field>
} MONITOR_INFO_2A, *PMONITOR_INFO_2A, *LPMONITOR_INFO_2A;
<struct name="_MONITOR_INFO_2W">
<field name="pName">LPWSTR</field>
<field name="pEnvironment">LPWSTR</field>
<field name="pDLLName">LPWSTR</field>
} MONITOR_INFO_2W, *PMONITOR_INFO_2W, *LPMONITOR_INFO_2W;
typedef MONITOR_INFO_2A MONITOR_INFO_2;
typedef PMONITOR_INFO_2A PMONITOR_INFO_2;
typedef LPMONITOR_INFO_2A LPMONITOR_INFO_2;

<struct name="_DATATYPES_INFO_1A">
<field name="pName">LPSTR</field>
} DATATYPES_INFO_1A, *PDATATYPES_INFO_1A, *LPDATATYPES_INFO_1A;
<struct name="_DATATYPES_INFO_1W">
<field name="pName">LPWSTR</field>
} DATATYPES_INFO_1W, *PDATATYPES_INFO_1W, *LPDATATYPES_INFO_1W;
typedef DATATYPES_INFO_1A DATATYPES_INFO_1;
typedef PDATATYPES_INFO_1A PDATATYPES_INFO_1;
typedef LPDATATYPES_INFO_1A LPDATATYPES_INFO_1;

<struct name="_PRINTER_DEFAULTSA">
<field name="pDatatype">LPSTR</field>
<field name="pDevMode">LPDEVMODEA</field>
<field name="DesiredAccess">ACCESS_MASK</field>
} PRINTER_DEFAULTSA, *PPRINTER_DEFAULTSA, *LPPRINTER_DEFAULTSA;
<struct name="_PRINTER_DEFAULTSW">
<field name="pDatatype">LPWSTR</field>
<field name="pDevMode">LPDEVMODEW</field>
<field name="DesiredAccess">ACCESS_MASK</field>
} PRINTER_DEFAULTSW, *PPRINTER_DEFAULTSW, *LPPRINTER_DEFAULTSW;
typedef PRINTER_DEFAULTSA PRINTER_DEFAULTS;
typedef PPRINTER_DEFAULTSA PPRINTER_DEFAULTS;
typedef LPPRINTER_DEFAULTSA LPPRINTER_DEFAULTS;

<struct name="_PRINTER_ENUM_VALUESA">
<field name="pValueName">LPSTR</field>
<field name="cbValueName">DWORD</field>
<field name="dwType">DWORD</field>
<field name="pData">LPBYTE</field>
<field name="cbData">DWORD</field>
} PRINTER_ENUM_VALUESA, *PPRINTER_ENUM_VALUESA, *LPPRINTER_ENUM_VALUESA;
<struct name="_PRINTER_ENUM_VALUESW">
<field name="pValueName">LPWSTR</field>
<field name="cbValueName">DWORD</field>
<field name="dwType">DWORD</field>
<field name="pData">LPBYTE</field>
<field name="cbData">DWORD</field>
} PRINTER_ENUM_VALUESW, *PPRINTER_ENUM_VALUESW, *LPPRINTER_ENUM_VALUESW;
typedef PRINTER_ENUM_VALUESA PRINTER_ENUM_VALUES;
typedef PPRINTER_ENUM_VALUESA PPRINTER_ENUM_VALUES;
typedef LPPRINTER_ENUM_VALUESA LPPRINTER_ENUM_VALUES;

<function name="EnumPrintersA" ret="BOOL" convention="__stdcall">
<arg name="Flags">DWORD  </arg>
<arg name="Name">LPSTR</arg>
<arg name="Level">DWORD  </arg>


              LPBYTE  pPrinterEnum,
              DWORD   cbBuf,
         LPDWORD pcbNeeded,
         LPDWORD pcReturned
);
<function name="EnumPrintersW" ret="BOOL" convention="__stdcall">
<arg name="Flags">DWORD  </arg>
<arg name="Name">LPWSTR</arg>
<arg name="Level">DWORD  </arg>


              LPBYTE  pPrinterEnum,
              DWORD   cbBuf,
         LPDWORD pcbNeeded,
         LPDWORD pcReturned
);

<function name="OpenPrinterA" ret="BOOL" convention="__stdcall">
<arg name="pPrinterName">LPSTR            </arg>
<arg name="phPrinter">LPHANDLE           </arg>

    LPPRINTER_DEFAULTSA pDefault
);
<function name="OpenPrinterW" ret="BOOL" convention="__stdcall">
<arg name="pPrinterName">LPWSTR            </arg>
<arg name="phPrinter">LPHANDLE           </arg>

    LPPRINTER_DEFAULTSW pDefault
);
<function name="ResetPrinterA" ret="BOOL" convention="__stdcall">
<arg name="hPrinter">HANDLE               </arg>

    LPPRINTER_DEFAULTSA   pDefault
);
<function name="ResetPrinterW" ret="BOOL" convention="__stdcall">
<arg name="hPrinter">HANDLE               </arg>

    LPPRINTER_DEFAULTSW   pDefault
);
<function name="SetJobA" ret="BOOL" convention="__stdcall">
<arg name="hPrinter">HANDLE </arg>
<arg name="JobId">DWORD  </arg>
<arg name="Level">DWORD  </arg>
<arg name="pJob">LPBYTE </arg>

            DWORD   Command
);
<function name="SetJobW" ret="BOOL" convention="__stdcall">
<arg name="hPrinter">HANDLE </arg>
<arg name="JobId">DWORD  </arg>
<arg name="Level">DWORD  </arg>
<arg name="pJob">LPBYTE </arg>

            DWORD   Command
);
<function name="GetJobA" ret="BOOL" convention="__stdcall">
<arg name="hPrinter">HANDLE  </arg>
<arg name="JobId">DWORD   </arg>
<arg name="Level">DWORD   </arg>


      LPBYTE   pJob,
      DWORD    cbBuf,
 LPDWORD  pcbNeeded
);
<function name="GetJobW" ret="BOOL" convention="__stdcall">
<arg name="hPrinter">HANDLE  </arg>
<arg name="JobId">DWORD   </arg>
<arg name="Level">DWORD   </arg>


      LPBYTE   pJob,
      DWORD    cbBuf,
 LPDWORD  pcbNeeded
);
<function name="EnumJobsA" ret="BOOL" convention="__stdcall">
<arg name="hPrinter">HANDLE </arg>
<arg name="FirstJob">DWORD  </arg>
<arg name="NoJobs">DWORD  </arg>
<arg name="Level">DWORD  </arg>


      LPBYTE  pJob,
      DWORD   cbBuf,
 LPDWORD pcbNeeded,
 LPDWORD pcReturned
);
<function name="EnumJobsW" ret="BOOL" convention="__stdcall">
<arg name="hPrinter">HANDLE </arg>
<arg name="FirstJob">DWORD  </arg>
<arg name="NoJobs">DWORD  </arg>
<arg name="Level">DWORD  </arg>


      LPBYTE  pJob,
      DWORD   cbBuf,
 LPDWORD pcbNeeded,
 LPDWORD pcReturned
);
<function name="AddPrinterA" ret="HANDLE" convention="__stdcall">
<arg name="pName">LPSTR   </arg>
<arg name="Level">DWORD     </arg>

        LPBYTE     pPrinter
);
<function name="AddPrinterW" ret="HANDLE" convention="__stdcall">
<arg name="pName">LPWSTR   </arg>
<arg name="Level">DWORD     </arg>

        LPBYTE     pPrinter
);
<function name="DeletePrinter" ret="BOOL" convention="__stdcall">
 HANDLE   hPrinter
);

<function name="SetPrinterA" ret="BOOL" convention="__stdcall">
<arg name="hPrinter">HANDLE </arg>
<arg name="Level">DWORD  </arg>
<arg name="pPrinter">LPBYTE </arg>

         DWORD   Command
);
<function name="SetPrinterW" ret="BOOL" convention="__stdcall">
<arg name="hPrinter">HANDLE </arg>
<arg name="Level">DWORD  </arg>
<arg name="pPrinter">LPBYTE </arg>

         DWORD   Command
);
<function name="GetPrinterA" ret="BOOL" convention="__stdcall">
<arg name="hPrinter">HANDLE </arg>
<arg name="Level">DWORD  </arg>


      LPBYTE  pPrinter,
      DWORD   cbBuf,
 LPDWORD pcbNeeded
);
<function name="GetPrinterW" ret="BOOL" convention="__stdcall">
<arg name="hPrinter">HANDLE </arg>
<arg name="Level">DWORD  </arg>


      LPBYTE  pPrinter,
      DWORD   cbBuf,
 LPDWORD pcbNeeded
);
<function name="AddPrinterDriverA" ret="BOOL" convention="__stdcall">
<arg name="pName">LPSTR  </arg>
<arg name="Level">DWORD    </arg>

        LPBYTE    pDriverInfo
);
<function name="AddPrinterDriverW" ret="BOOL" convention="__stdcall">
<arg name="pName">LPWSTR  </arg>
<arg name="Level">DWORD    </arg>

        LPBYTE    pDriverInfo
);
<function name="AddPrinterDriverExA" ret="BOOL" convention="__stdcall">
<arg name="pName">LPSTR  </arg>
<arg name="Level">DWORD    </arg>
<arg name="pDriverInfo">LPBYTE     </arg>

            DWORD     dwFileCopyFlags
);
<function name="AddPrinterDriverExW" ret="BOOL" convention="__stdcall">
<arg name="pName">LPWSTR  </arg>
<arg name="Level">DWORD    </arg>
<arg name="pDriverInfo">LPBYTE     </arg>

            DWORD     dwFileCopyFlags
);
<function name="EnumPrinterDriversA" ret="BOOL" convention="__stdcall">
<arg name="pName">LPSTR       </arg>
<arg name="pEnvironment">LPSTR       </arg>
<arg name="Level">DWORD         </arg>


            LPBYTE        pDriverInfo,
            DWORD          cbBuf,
       LPDWORD        pcbNeeded,
       LPDWORD        pcReturned
);
<function name="EnumPrinterDriversW" ret="BOOL" convention="__stdcall">
<arg name="pName">LPWSTR       </arg>
<arg name="pEnvironment">LPWSTR       </arg>
<arg name="Level">DWORD         </arg>


            LPBYTE        pDriverInfo,
            DWORD          cbBuf,
       LPDWORD        pcbNeeded,
       LPDWORD        pcReturned
);
<function name="GetPrinterDriverA" ret="BOOL" convention="__stdcall">
<arg name="hPrinter">HANDLE </arg>
<arg name="pEnvironment">LPSTR</arg>
<arg name="Level">DWORD  </arg>


            LPBYTE  pDriverInfo,
            DWORD   cbBuf,
       LPDWORD pcbNeeded
);
<function name="GetPrinterDriverW" ret="BOOL" convention="__stdcall">
<arg name="hPrinter">HANDLE </arg>
<arg name="pEnvironment">LPWSTR</arg>
<arg name="Level">DWORD  </arg>


            LPBYTE  pDriverInfo,
            DWORD   cbBuf,
       LPDWORD pcbNeeded
);
<function name="GetPrinterDriverDirectoryA" ret="BOOL" convention="__stdcall">
<arg name="pName">LPSTR  </arg>
<arg name="pEnvironment">LPSTR  </arg>
<arg name="Level">DWORD    </arg>


            LPBYTE    pDriverDirectory,
            DWORD     cbBuf,
       LPDWORD   pcbNeeded
);
<function name="GetPrinterDriverDirectoryW" ret="BOOL" convention="__stdcall">
<arg name="pName">LPWSTR  </arg>
<arg name="pEnvironment">LPWSTR  </arg>
<arg name="Level">DWORD    </arg>


            LPBYTE    pDriverDirectory,
            DWORD     cbBuf,
       LPDWORD   pcbNeeded
);
<function name="DeletePrinterDriverA" ret="BOOL" convention="__stdcall">
<arg name="pName">LPSTR   </arg>
<arg name="pEnvironment">LPSTR   </arg>

        LPSTR    pDriverName
);
<function name="DeletePrinterDriverW" ret="BOOL" convention="__stdcall">
<arg name="pName">LPWSTR   </arg>
<arg name="pEnvironment">LPWSTR   </arg>

        LPWSTR    pDriverName
);
<function name="DeletePrinterDriverExA" ret="BOOL" convention="__stdcall">
<arg name="pName">LPSTR   </arg>
<arg name="pEnvironment">LPSTR   </arg>
<arg name="pDriverName">LPSTR   </arg>
<arg name="dwDeleteFlag">DWORD     </arg>

            DWORD      dwVersionFlag
);
<function name="DeletePrinterDriverExW" ret="BOOL" convention="__stdcall">
<arg name="pName">LPWSTR   </arg>
<arg name="pEnvironment">LPWSTR   </arg>
<arg name="pDriverName">LPWSTR   </arg>
<arg name="dwDeleteFlag">DWORD     </arg>

            DWORD      dwVersionFlag
);

<function name="AddPrintProcessorA" ret="BOOL" convention="__stdcall">
<arg name="pName">LPSTR  </arg>
<arg name="pEnvironment">LPSTR  </arg>
<arg name="pPathName">LPSTR  </arg>

       LPSTR   pPrintProcessorName
);
<function name="AddPrintProcessorW" ret="BOOL" convention="__stdcall">
<arg name="pName">LPWSTR  </arg>
<arg name="pEnvironment">LPWSTR  </arg>
<arg name="pPathName">LPWSTR  </arg>

       LPWSTR   pPrintProcessorName
);
<function name="EnumPrintProcessorsA" ret="BOOL" convention="__stdcall">
<arg name="pName">LPSTR  </arg>
<arg name="pEnvironment">LPSTR  </arg>
<arg name="Level">DWORD    </arg>


           LPBYTE    pPrintProcessorInfo,
           DWORD     cbBuf,
      LPDWORD   pcbNeeded,
      LPDWORD   pcReturned
);
<function name="EnumPrintProcessorsW" ret="BOOL" convention="__stdcall">
<arg name="pName">LPWSTR  </arg>
<arg name="pEnvironment">LPWSTR  </arg>
<arg name="Level">DWORD    </arg>


           LPBYTE    pPrintProcessorInfo,
           DWORD     cbBuf,
      LPDWORD   pcbNeeded,
      LPDWORD   pcReturned
);

<function name="GetPrintProcessorDirectoryA" ret="BOOL" convention="__stdcall">
<arg name="pName">LPSTR   </arg>
<arg name="pEnvironment">LPSTR   </arg>
<arg name="Level">DWORD     </arg>


           LPBYTE     pPrintProcessorInfo,
           DWORD      cbBuf,
      LPDWORD    pcbNeeded
);
<function name="GetPrintProcessorDirectoryW" ret="BOOL" convention="__stdcall">
<arg name="pName">LPWSTR   </arg>
<arg name="pEnvironment">LPWSTR   </arg>
<arg name="Level">DWORD     </arg>


           LPBYTE     pPrintProcessorInfo,
           DWORD      cbBuf,
      LPDWORD    pcbNeeded
);
<function name="EnumPrintProcessorDatatypesA" ret="BOOL" convention="__stdcall">
<arg name="pName">LPSTR  </arg>
<arg name="pPrintProcessorName">LPSTR  </arg>
<arg name="Level">DWORD    </arg>


            LPBYTE    pDatatypes,
            DWORD     cbBuf,
       LPDWORD   pcbNeeded,
       LPDWORD   pcReturned
);
<function name="EnumPrintProcessorDatatypesW" ret="BOOL" convention="__stdcall">
<arg name="pName">LPWSTR  </arg>
<arg name="pPrintProcessorName">LPWSTR  </arg>
<arg name="Level">DWORD    </arg>


            LPBYTE    pDatatypes,
            DWORD     cbBuf,
       LPDWORD   pcbNeeded,
       LPDWORD   pcReturned
);
<function name="DeletePrintProcessorA" ret="BOOL" convention="__stdcall">
<arg name="pName">LPSTR  </arg>
<arg name="pEnvironment">LPSTR  </arg>

        LPSTR   pPrintProcessorName
);
<function name="DeletePrintProcessorW" ret="BOOL" convention="__stdcall">
<arg name="pName">LPWSTR  </arg>
<arg name="pEnvironment">LPWSTR  </arg>

        LPWSTR   pPrintProcessorName
);
<function name="StartDocPrinterA" ret="DWORD" convention="__stdcall">
<arg name="hPrinter">HANDLE </arg>
<arg name="Level">DWORD  </arg>

    LPBYTE  pDocInfo
);
<function name="StartDocPrinterW" ret="DWORD" convention="__stdcall">
<arg name="hPrinter">HANDLE </arg>
<arg name="Level">DWORD  </arg>

    LPBYTE  pDocInfo
);
<function name="StartPagePrinter" ret="BOOL" convention="__stdcall">
    HANDLE  hPrinter
);

<function name="WritePrinter" ret="BOOL" convention="__stdcall">
<arg name="hPrinter">HANDLE </arg>


        LPVOID  pBuf,
        DWORD   cbBuf,
   LPDWORD pcWritten
);
<function name="FlushPrinter" ret="BOOL" convention="__stdcall">
<arg name="hPrinter">HANDLE </arg>


        LPVOID  pBuf,
        DWORD   cbBuf,
   LPDWORD pcWritten,
        DWORD   cSleep
);

<function name="EndPagePrinter" ret="BOOL" convention="__stdcall">
    HANDLE   hPrinter
);

<function name="AbortPrinter" ret="BOOL" convention="__stdcall">
    HANDLE   hPrinter
);

<function name="ReadPrinter" ret="BOOL" convention="__stdcall">
<arg name="hPrinter">HANDLE </arg>


        LPVOID  pBuf,
        DWORD   cbBuf,
   LPDWORD pNoBytesRead
);

<function name="EndDocPrinter" ret="BOOL" convention="__stdcall">
    HANDLE   hPrinter
);

<function name="AddJobA" ret="BOOL" convention="__stdcall">
<arg name="hPrinter">HANDLE </arg>
<arg name="Level">DWORD  </arg>


        LPBYTE  pData,
        DWORD   cbBuf,
   LPDWORD pcbNeeded
);
<function name="AddJobW" ret="BOOL" convention="__stdcall">
<arg name="hPrinter">HANDLE </arg>
<arg name="Level">DWORD  </arg>


        LPBYTE  pData,
        DWORD   cbBuf,
   LPDWORD pcbNeeded
);
<function name="ScheduleJob" ret="BOOL" convention="__stdcall">
<arg name="hPrinter">HANDLE </arg>

        DWORD   JobId
);

<function name="PrinterProperties" ret="BOOL" convention="__stdcall">
<arg name="hWnd">HWND   </arg>

    HANDLE  hPrinter
);

<function name="DocumentPropertiesA" ret="LONG" convention="__stdcall">
<arg name="hWnd">HWND     </arg>
<arg name="hPrinter">HANDLE   </arg>
<arg name="pDeviceName">LPSTR  </arg>
<arg name="pDevModeOutput">PDEVMODEA</arg>
<arg name="pDevModeInput">PDEVMODEA</arg>

                DWORD     fMode
);
<function name="DocumentPropertiesW" ret="LONG" convention="__stdcall">
<arg name="hWnd">HWND     </arg>
<arg name="hPrinter">HANDLE   </arg>
<arg name="pDeviceName">LPWSTR  </arg>
<arg name="pDevModeOutput">PDEVMODEW</arg>
<arg name="pDevModeInput">PDEVMODEW</arg>

                DWORD     fMode
);
<function name="AdvancedDocumentPropertiesA" ret="LONG" convention="__stdcall">
<arg name="hWnd">HWND       </arg>
<arg name="hPrinter">HANDLE     </arg>
<arg name="pDeviceName">LPSTR    </arg>
<arg name="pDevModeOutput">PDEVMODEA  </arg>

        PDEVMODEA   pDevModeInput
);
<function name="AdvancedDocumentPropertiesW" ret="LONG" convention="__stdcall">
<arg name="hWnd">HWND       </arg>
<arg name="hPrinter">HANDLE     </arg>
<arg name="pDeviceName">LPWSTR    </arg>
<arg name="pDevModeOutput">PDEVMODEW  </arg>

        PDEVMODEW   pDevModeInput
);

    LONG
    ExtDeviceMode(
                HWND        hWnd,
                HANDLE      hInst,
         LPDEVMODEA  pDevModeOutput,
            LPSTR       pDeviceName,
            LPSTR       pPort,
            LPDEVMODEA  pDevModeInput,
            LPSTR       pProfile,
<arg name="fMode">DWORD      </arg>
</function>
<function name="GetPrinterDataA" ret="DWORD" convention="__stdcall">
<arg name="hPrinter">HANDLE  </arg>
<arg name="pValueName">LPSTR </arg>
<arg name="pType">LPDWORD </arg>


             LPBYTE   pData,
             DWORD    nSize,
        LPDWORD  pcbNeeded
);
<function name="GetPrinterDataW" ret="DWORD" convention="__stdcall">
<arg name="hPrinter">HANDLE  </arg>
<arg name="pValueName">LPWSTR </arg>
<arg name="pType">LPDWORD </arg>


             LPBYTE   pData,
             DWORD    nSize,
        LPDWORD  pcbNeeded
);
<function name="GetPrinterDataExA" ret="DWORD" convention="__stdcall">
<arg name="hPrinter">HANDLE  </arg>
<arg name="pKeyName">LPCSTR</arg>
<arg name="pValueName">LPCSTR</arg>
<arg name="pType">LPDWORD </arg>


             LPBYTE   pData,
             DWORD    nSize,
        LPDWORD  pcbNeeded
);
<function name="GetPrinterDataExW" ret="DWORD" convention="__stdcall">
<arg name="hPrinter">HANDLE  </arg>
<arg name="pKeyName">LPCWSTR</arg>
<arg name="pValueName">LPCWSTR</arg>
<arg name="pType">LPDWORD </arg>


             LPBYTE   pData,
             DWORD    nSize,
        LPDWORD  pcbNeeded
);
<function name="EnumPrinterDataA" ret="DWORD" convention="__stdcall">
<arg name="hPrinter">HANDLE  </arg>
<arg name="dwIndex">DWORD   </arg>


            LPSTR  pValueName,
            DWORD    cbValueName,
       LPDWORD  pcbValueName,
   LPDWORD  pType,
            LPBYTE   pData,
            DWORD    cbData,
   LPDWORD  pcbData
);
<function name="EnumPrinterDataW" ret="DWORD" convention="__stdcall">
<arg name="hPrinter">HANDLE  </arg>
<arg name="dwIndex">DWORD   </arg>


            LPWSTR  pValueName,
            DWORD    cbValueName,
       LPDWORD  pcbValueName,
   LPDWORD  pType,
            LPBYTE   pData,
            DWORD    cbData,
   LPDWORD  pcbData
);
<function name="EnumPrinterDataExA" ret="DWORD" convention="__stdcall">
<arg name="hPrinter">HANDLE   </arg>
<arg name="pKeyName">LPCSTR </arg>


        LPBYTE    pEnumValues,
        DWORD     cbEnumValues,
   LPDWORD   pcbEnumValues,
   LPDWORD   pnEnumValues
);
<function name="EnumPrinterDataExW" ret="DWORD" convention="__stdcall">
<arg name="hPrinter">HANDLE   </arg>
<arg name="pKeyName">LPCWSTR </arg>


        LPBYTE    pEnumValues,
        DWORD     cbEnumValues,
   LPDWORD   pcbEnumValues,
   LPDWORD   pnEnumValues
);
<function name="EnumPrinterKeyA" ret="DWORD" convention="__stdcall">
<arg name="hPrinter">HANDLE  </arg>
<arg name="pKeyName">LPCSTR</arg>


        LPSTR  pSubkey,
        DWORD    cbSubkey,
   LPDWORD  pcbSubkey
);
<function name="EnumPrinterKeyW" ret="DWORD" convention="__stdcall">
<arg name="hPrinter">HANDLE  </arg>
<arg name="pKeyName">LPCWSTR</arg>


        LPWSTR  pSubkey,
        DWORD    cbSubkey,
   LPDWORD  pcbSubkey
);
<function name="SetPrinterDataA" ret="DWORD" convention="__stdcall">
<arg name="hPrinter">HANDLE </arg>
<arg name="pValueName">LPSTR</arg>
<arg name="Type">DWORD  </arg>


        LPBYTE  pData,
        DWORD   cbData
);
<function name="SetPrinterDataW" ret="DWORD" convention="__stdcall">
<arg name="hPrinter">HANDLE </arg>
<arg name="pValueName">LPWSTR</arg>
<arg name="Type">DWORD  </arg>


        LPBYTE  pData,
        DWORD   cbData
);
<function name="SetPrinterDataExA" ret="DWORD" convention="__stdcall">
<arg name="hPrinter">HANDLE  </arg>
<arg name="pKeyName">LPCSTR</arg>
<arg name="pValueName">LPCSTR</arg>
<arg name="Type">DWORD   </arg>


        LPBYTE   pData,
        DWORD    cbData
);
<function name="SetPrinterDataExW" ret="DWORD" convention="__stdcall">
<arg name="hPrinter">HANDLE  </arg>
<arg name="pKeyName">LPCWSTR</arg>
<arg name="pValueName">LPCWSTR</arg>
<arg name="Type">DWORD   </arg>


        LPBYTE   pData,
        DWORD    cbData
);
<function name="DeletePrinterDataA" ret="DWORD" convention="__stdcall">
<arg name="hPrinter">HANDLE </arg>

    LPSTR pValueName
);
<function name="DeletePrinterDataW" ret="DWORD" convention="__stdcall">
<arg name="hPrinter">HANDLE </arg>

    LPWSTR pValueName
);
<function name="DeletePrinterDataExA" ret="DWORD" convention="__stdcall">
<arg name="hPrinter">HANDLE  </arg>
<arg name="pKeyName">LPCSTR</arg>

    LPCSTR pValueName
);
<function name="DeletePrinterDataExW" ret="DWORD" convention="__stdcall">
<arg name="hPrinter">HANDLE  </arg>
<arg name="pKeyName">LPCWSTR</arg>

    LPCWSTR pValueName
);
<function name="DeletePrinterKeyA" ret="DWORD" convention="__stdcall">
<arg name="hPrinter">HANDLE  </arg>

    LPCSTR pKeyName
);
<function name="DeletePrinterKeyW" ret="DWORD" convention="__stdcall">
<arg name="hPrinter">HANDLE  </arg>

    LPCWSTR pKeyName
);
    
<struct name="_PRINTER_NOTIFY_OPTIONS_TYPE">
<field name="Type">WORD</field>
<field name="Reserved0">WORD</field>
<field name="Reserved1">DWORD</field>
<field name="Reserved2">DWORD</field>
<field name="Count">DWORD</field>
<field name="pFields">PWORD</field>
} PRINTER_NOTIFY_OPTIONS_TYPE, *PPRINTER_NOTIFY_OPTIONS_TYPE, *LPPRINTER_NOTIFY_OPTIONS_TYPE;

<struct name="_PRINTER_NOTIFY_OPTIONS">
<field name="Version">DWORD</field>
<field name="Flags">DWORD</field>
<field name="Count">DWORD</field>
<field name="pTypes">PPRINTER_NOTIFY_OPTIONS_TYPE</field>
} PRINTER_NOTIFY_OPTIONS, *PPRINTER_NOTIFY_OPTIONS, *LPPRINTER_NOTIFY_OPTIONS;
<struct name="_PRINTER_NOTIFY_INFO_DATA">
<field name="Type">WORD</field>
<field name="Field">WORD</field>
<field name="Reserved">DWORD</field>
<field name="Id">DWORD</field>
    union {
        DWORD adwData[2];
<struct>
<field name="cbBuf">DWORD</field>
<field name="pBuf">LPVOID</field>
<field name="Data">}</field>
<field name="NotifyData">}</field>
} PRINTER_NOTIFY_INFO_DATA, *PPRINTER_NOTIFY_INFO_DATA, *LPPRINTER_NOTIFY_INFO_DATA;

<struct name="_PRINTER_NOTIFY_INFO">
<field name="Version">DWORD</field>
<field name="Flags">DWORD</field>
<field name="Count">DWORD</field>
<field name="aData[1]">PRINTER_NOTIFY_INFO_DATA</field>
} PRINTER_NOTIFY_INFO, *PPRINTER_NOTIFY_INFO, *LPPRINTER_NOTIFY_INFO;
<struct name="_BINARY_CONTAINER">
<field name="cbBuf">DWORD</field>
<field name="pData">LPBYTE</field>
</struct>
<typedefprev id="BINARY_CONTAINER"/>
<typedefptrprev id="PBINARY_CONTAINER"/>
<struct name="_BIDI_DATA">
<field name="dwBidiType">DWORD</field>
        union {
            BOOL   bData;
            LONG   iData;
            LPWSTR sData;
            FLOAT  fData;
            BINARY_CONTAINER biData;
            }u;
    } BIDI_DATA, *PBIDI_DATA, *LPBIDI_DATA;
<struct name="_BIDI_REQUEST_DATA">
<field name="dwReqNumber">DWORD</field>
<field name="pSchema">LPWSTR</field>
<field name="data">BIDI_DATA</field>
    } BIDI_REQUEST_DATA , *PBIDI_REQUEST_DATA , *LPBIDI_REQUEST_DATA;
<struct name="_BIDI_REQUEST_CONTAINER">
<field name="Version">DWORD</field>
<field name="Flags">DWORD</field>
<field name="Count">DWORD</field>
<field name="aData[ 1 ]">BIDI_REQUEST_DATA</field>
    }BIDI_REQUEST_CONTAINER, *PBIDI_REQUEST_CONTAINER, *LPBIDI_REQUEST_CONTAINER;

<struct name="_BIDI_RESPONSE_DATA">
<field name="dwResult">DWORD</field>
<field name="dwReqNumber">DWORD</field>
<field name="pSchema">LPWSTR</field>
<field name="data">BIDI_DATA</field>
    } BIDI_RESPONSE_DATA, *PBIDI_RESPONSE_DATA, *LPBIDI_RESPONSE_DATA;

<struct name="_BIDI_RESPONSE_CONTAINER">
<field name="Version">DWORD</field>
<field name="Flags">DWORD</field>
<field name="Count">DWORD</field>
<field name="aData[ 1 ]">BIDI_RESPONSE_DATA</field>
    } BIDI_RESPONSE_CONTAINER, *PBIDI_RESPONSE_CONTAINER, *LPBIDI_RESPONSE_CONTAINER;

    
    
    
    

    typedef enum {
        BIDI_NULL   = 0,
        BIDI_INT    = 1,
        BIDI_FLOAT  = 2,
        BIDI_BOOL   = 3,
        BIDI_STRING = 4,
        BIDI_TEXT   = 5,
        BIDI_ENUM   = 6,
        BIDI_BLOB   = 7
    } BIDI_TYPE;

    
    
    
    
    

    
    
    
    
    
    
<function name="WaitForPrinterChange" ret="DWORD" convention="__stdcall">
<arg name="hPrinter">HANDLE </arg>

     DWORD   Flags
);

<function name="FindFirstPrinterChangeNotification" ret="HANDLE" convention="__stdcall">
<arg name="hPrinter">HANDLE</arg>
<arg name="fdwFilter">DWORD </arg>
<arg name="fdwOptions">DWORD </arg>
<arg name="pPrinterNotifyOptions">PVOID </arg>
</function>
<function name="FindNextPrinterChangeNotification" ret="BOOL" convention="__stdcall">
<arg name="hChange">HANDLE</arg>
<arg name="pdwChange">PDWORD</arg>
<arg name="pvReserved">LPVOID</arg>
<arg name="ppPrinterNotifyInfo">LPVOID *</arg>
</function>

<function name="FreePrinterNotifyInfo" ret="BOOL" convention="__stdcall">
<arg name="pPrinterNotifyInfo">PPRINTER_NOTIFY_INFO</arg>
</function>

<function name="FindClosePrinterChangeNotification" ret="BOOL" convention="__stdcall">
<arg name="hChange">HANDLE</arg>
</function>
<function name="PrinterMessageBoxA" ret="DWORD" convention="__stdcall">
<arg name="hPrinter">HANDLE   </arg>
<arg name="Error">DWORD    </arg>
<arg name="hWnd">HWND     </arg>
<arg name="pText">LPSTR  </arg>
<arg name="pCaption">LPSTR  </arg>

       DWORD     dwType
);
<function name="PrinterMessageBoxW" ret="DWORD" convention="__stdcall">
<arg name="hPrinter">HANDLE   </arg>
<arg name="Error">DWORD    </arg>
<arg name="hWnd">HWND     </arg>
<arg name="pText">LPWSTR  </arg>
<arg name="pCaption">LPWSTR  </arg>

       DWORD     dwType
);
<function name="ClosePrinter" ret="BOOL" convention="__stdcall">
 HANDLE hPrinter
);

<function name="AddFormA" ret="BOOL" convention="__stdcall">
<arg name="hPrinter">HANDLE </arg>
<arg name="Level">DWORD  </arg>

    LPBYTE  pForm
);
<function name="AddFormW" ret="BOOL" convention="__stdcall">
<arg name="hPrinter">HANDLE </arg>
<arg name="Level">DWORD  </arg>

    LPBYTE  pForm
);
<function name="DeleteFormA" ret="BOOL" convention="__stdcall">
<arg name="hPrinter">HANDLE   </arg>

    LPSTR   pFormName
);
<function name="DeleteFormW" ret="BOOL" convention="__stdcall">
<arg name="hPrinter">HANDLE   </arg>

    LPWSTR   pFormName
);
<function name="GetFormA" ret="BOOL" convention="__stdcall">
<arg name="hPrinter">HANDLE       </arg>
<arg name="pFormName">LPSTR      </arg>
<arg name="Level">DWORD        </arg>


        LPBYTE        pForm,
        DWORD         cbBuf,
   LPDWORD       pcbNeeded
);
<function name="GetFormW" ret="BOOL" convention="__stdcall">
<arg name="hPrinter">HANDLE       </arg>
<arg name="pFormName">LPWSTR      </arg>
<arg name="Level">DWORD        </arg>


        LPBYTE        pForm,
        DWORD         cbBuf,
   LPDWORD       pcbNeeded
);
<function name="SetFormA" ret="BOOL" convention="__stdcall">
<arg name="hPrinter">HANDLE </arg>
<arg name="pFormName">LPSTR</arg>
<arg name="Level">DWORD  </arg>

    LPBYTE  pForm
);
<function name="SetFormW" ret="BOOL" convention="__stdcall">
<arg name="hPrinter">HANDLE </arg>
<arg name="pFormName">LPWSTR</arg>
<arg name="Level">DWORD  </arg>

    LPBYTE  pForm
);
<function name="EnumFormsA" ret="BOOL" convention="__stdcall">
<arg name="hPrinter">HANDLE </arg>
<arg name="Level">DWORD  </arg>


        LPBYTE  pForm,
        DWORD   cbBuf,
   LPDWORD pcbNeeded,
   LPDWORD pcReturned
);
<function name="EnumFormsW" ret="BOOL" convention="__stdcall">
<arg name="hPrinter">HANDLE </arg>
<arg name="Level">DWORD  </arg>


        LPBYTE  pForm,
        DWORD   cbBuf,
   LPDWORD pcbNeeded,
   LPDWORD pcReturned
);
<function name="EnumMonitorsA" ret="BOOL" convention="__stdcall">
<arg name="pName">LPSTR  </arg>
<arg name="Level">DWORD      </arg>


            LPBYTE      pMonitor,
            DWORD       cbBuf,
       LPDWORD    pcbNeeded,
       LPDWORD    pcReturned
);
<function name="EnumMonitorsW" ret="BOOL" convention="__stdcall">
<arg name="pName">LPWSTR  </arg>
<arg name="Level">DWORD      </arg>


            LPBYTE      pMonitor,
            DWORD       cbBuf,
       LPDWORD    pcbNeeded,
       LPDWORD    pcReturned
);
<function name="AddMonitorA" ret="BOOL" convention="__stdcall">
<arg name="pName">LPSTR</arg>
<arg name="Level">DWORD  </arg>

        LPBYTE  pMonitors
);
<function name="AddMonitorW" ret="BOOL" convention="__stdcall">
<arg name="pName">LPWSTR</arg>
<arg name="Level">DWORD  </arg>

        LPBYTE  pMonitors
);
<function name="DeleteMonitorA" ret="BOOL" convention="__stdcall">
<arg name="pName">LPSTR    </arg>
<arg name="pEnvironment">LPSTR    </arg>

        LPSTR     pMonitorName
);
<function name="DeleteMonitorW" ret="BOOL" convention="__stdcall">
<arg name="pName">LPWSTR    </arg>
<arg name="pEnvironment">LPWSTR    </arg>

        LPWSTR     pMonitorName
);
<function name="EnumPortsA" ret="BOOL" convention="__stdcall">
<arg name="pName">LPSTR</arg>
<arg name="Level">DWORD  </arg>


            LPBYTE  pPort,
            DWORD   cbBuf,
       LPDWORD pcbNeeded,
       LPDWORD pcReturned
);
<function name="EnumPortsW" ret="BOOL" convention="__stdcall">
<arg name="pName">LPWSTR</arg>
<arg name="Level">DWORD  </arg>


            LPBYTE  pPort,
            DWORD   cbBuf,
       LPDWORD pcbNeeded,
       LPDWORD pcReturned
);
<function name="AddPortA" ret="BOOL" convention="__stdcall">
<arg name="pName">LPSTR  </arg>
<arg name="hWnd">HWND     </arg>

        LPSTR   pMonitorName
);
<function name="AddPortW" ret="BOOL" convention="__stdcall">
<arg name="pName">LPWSTR  </arg>
<arg name="hWnd">HWND     </arg>

        LPWSTR   pMonitorName
);
<function name="ConfigurePortA" ret="BOOL" convention="__stdcall">
<arg name="pName">LPSTR  </arg>
<arg name="hWnd">HWND     </arg>

        LPSTR   pPortName
);
<function name="ConfigurePortW" ret="BOOL" convention="__stdcall">
<arg name="pName">LPWSTR  </arg>
<arg name="hWnd">HWND     </arg>

        LPWSTR   pPortName
);
<function name="DeletePortA" ret="BOOL" convention="__stdcall">
<arg name="pName">LPSTR</arg>
<arg name="hWnd">HWND   </arg>

        LPSTR pPortName
);
<function name="DeletePortW" ret="BOOL" convention="__stdcall">
<arg name="pName">LPWSTR</arg>
<arg name="hWnd">HWND   </arg>

        LPWSTR pPortName
);
<function name="XcvDataW" ret="BOOL" convention="__stdcall">
<arg name="hXcv">HANDLE </arg>
<arg name="pszDataName">PCWSTR </arg>


            PBYTE   pInputData,
            DWORD   cbInputData,

            PBYTE   pOutputData,
            DWORD   cbOutputData,
       PDWORD  pcbOutputNeeded,
   PDWORD  pdwStatus
);
<function name="GetDefaultPrinterA" ret="BOOL" convention="__stdcall">
<arg name="pszBuffer">LPSTR  </arg>
<arg name="pcchBuffer">LPDWORD  </arg>
</function>
<function name="GetDefaultPrinterW" ret="BOOL" convention="__stdcall">
<arg name="pszBuffer">LPWSTR  </arg>
<arg name="pcchBuffer">LPDWORD  </arg>
</function>
<function name="SetDefaultPrinterA" ret="BOOL" convention="__stdcall">
<arg name="pszPrinter">LPCSTR</arg>
</function>
<function name="SetDefaultPrinterW" ret="BOOL" convention="__stdcall">
<arg name="pszPrinter">LPCWSTR</arg>
</function>
<function name="SetPortA" ret="BOOL" convention="__stdcall">
<arg name="pName">LPSTR    </arg>
<arg name="pPortName">LPSTR    </arg>
<arg name="dwLevel">DWORD      </arg>

        LPBYTE      pPortInfo
);
<function name="SetPortW" ret="BOOL" convention="__stdcall">
<arg name="pName">LPWSTR    </arg>
<arg name="pPortName">LPWSTR    </arg>
<arg name="dwLevel">DWORD      </arg>

        LPBYTE      pPortInfo
);
<function name="AddPrinterConnectionA" ret="BOOL" convention="__stdcall">
 LPSTR   pName
);
<function name="AddPrinterConnectionW" ret="BOOL" convention="__stdcall">
 LPWSTR   pName
);
<function name="DeletePrinterConnectionA" ret="BOOL" convention="__stdcall">
 LPSTR   pName
);
<function name="DeletePrinterConnectionW" ret="BOOL" convention="__stdcall">
 LPWSTR   pName
);
<function name="ConnectToPrinterDlg" ret="HANDLE" convention="__stdcall">
<arg name="hwnd">HWND   </arg>

       DWORD    Flags
);

<struct name="_PROVIDOR_INFO_1A">
<field name="pName">LPSTR</field>
<field name="pEnvironment">LPSTR</field>
<field name="pDLLName">LPSTR</field>
} PROVIDOR_INFO_1A, *PPROVIDOR_INFO_1A, *LPPROVIDOR_INFO_1A;
<struct name="_PROVIDOR_INFO_1W">
<field name="pName">LPWSTR</field>
<field name="pEnvironment">LPWSTR</field>
<field name="pDLLName">LPWSTR</field>
} PROVIDOR_INFO_1W, *PPROVIDOR_INFO_1W, *LPPROVIDOR_INFO_1W;
typedef PROVIDOR_INFO_1A PROVIDOR_INFO_1;
typedef PPROVIDOR_INFO_1A PPROVIDOR_INFO_1;
typedef LPPROVIDOR_INFO_1A LPPROVIDOR_INFO_1;
<struct name="_PROVIDOR_INFO_2A">
<field name="pOrder">LPSTR</field>
} PROVIDOR_INFO_2A, *PPROVIDOR_INFO_2A, *LPPROVIDOR_INFO_2A;
<struct name="_PROVIDOR_INFO_2W">
<field name="pOrder">LPWSTR</field>
} PROVIDOR_INFO_2W, *PPROVIDOR_INFO_2W, *LPPROVIDOR_INFO_2W;
typedef PROVIDOR_INFO_2A PROVIDOR_INFO_2;
typedef PPROVIDOR_INFO_2A PPROVIDOR_INFO_2;
typedef LPPROVIDOR_INFO_2A LPPROVIDOR_INFO_2;
<function name="AddPrintProvidorA" ret="BOOL" convention="__stdcall">
<arg name="pName">LPSTR </arg>
<arg name="level">DWORD   </arg>

        LPBYTE   pProvidorInfo
);
<function name="AddPrintProvidorW" ret="BOOL" convention="__stdcall">
<arg name="pName">LPWSTR </arg>
<arg name="level">DWORD   </arg>

        LPBYTE   pProvidorInfo
);
<function name="DeletePrintProvidorA" ret="BOOL" convention="__stdcall">
<arg name="pName">LPSTR  </arg>
<arg name="pEnvironment">LPSTR  </arg>

        LPSTR   pPrintProvidorName
);
<function name="DeletePrintProvidorW" ret="BOOL" convention="__stdcall">
<arg name="pName">LPWSTR  </arg>
<arg name="pEnvironment">LPWSTR  </arg>

        LPWSTR   pPrintProvidorName
);
    BOOL
<function name="IsValidDevmodeA" ret="" convention="__stdcall">
<arg name="pDevmode">PDEVMODEA  </arg>
<arg name="DevmodeSize">size_t     </arg>
</function>
    BOOL
<function name="IsValidDevmodeW" ret="" convention="__stdcall">
<arg name="pDevmode">PDEVMODEW  </arg>
<arg name="DevmodeSize">size_t     </arg>
</function>

    

    

    
    
    

    
    
    
    
    
    typedef enum _PRINTER_OPTION_FLAGS
    {
        PRINTER_OPTION_NO_CACHE       = 1,
        PRINTER_OPTION_CACHE          = 2,
        PRINTER_OPTION_CLIENT_CHANGE  = 4,
        PRINTER_OPTION_NO_CLIENT_DATA = 8,
    } PRINTER_OPTION_FLAGS;
<struct name="_PRINTER_OPTIONSA">
<field name="cbSize">UINT</field>
<field name="dwFlags">DWORD</field>
    } PRINTER_OPTIONSA, *PPRINTER_OPTIONSA, *LPPRINTER_OPTIONSA;
<struct name="_PRINTER_OPTIONSW">
<field name="cbSize">UINT</field>
<field name="dwFlags">DWORD</field>
    } PRINTER_OPTIONSW, *PPRINTER_OPTIONSW, *LPPRINTER_OPTIONSW;
typedef PRINTER_OPTIONSA PRINTER_OPTIONS;
typedef PPRINTER_OPTIONSA PPRINTER_OPTIONS;
typedef LPPRINTER_OPTIONSA LPPRINTER_OPTIONS;
    BOOL
<function name="OpenPrinter2A" ret="" convention="__stdcall">
<arg name="pPrinterName">LPCSTR               </arg>
<arg name="phPrinter">LPHANDLE               </arg>
<arg name="pDefault">PPRINTER_DEFAULTSA     </arg>
<arg name="pOptions">PPRINTER_OPTIONSA      </arg>
</function>
    BOOL
<function name="OpenPrinter2W" ret="" convention="__stdcall">
<arg name="pPrinterName">LPCWSTR               </arg>
<arg name="phPrinter">LPHANDLE               </arg>
<arg name="pDefault">PPRINTER_DEFAULTSW     </arg>
<arg name="pOptions">PPRINTER_OPTIONSW      </arg>
</function>
    
    

<struct name="_PRINTER_CONNECTION_INFO_1A">
<field name="dwFlags">DWORD</field>
<field name="pszDriverName">LPSTR</field>
</struct>
<typedefprev id="PRINTER_CONNECTION_INFO_1A"/>
<typedefptrprev id="PPRINTER_CONNECTION_INFO_1A"/>
<struct name="_PRINTER_CONNECTION_INFO_1W">
<field name="dwFlags">DWORD</field>
<field name="pszDriverName">LPWSTR</field>
</struct>
<typedefprev id="PRINTER_CONNECTION_INFO_1W"/>
<typedefptrprev id="PPRINTER_CONNECTION_INFO_1W"/>

typedef PRINTER_CONNECTION_INFO_1A PRINTER_CONNECTION_INFO_1;
typedef PPRINTER_CONNECTION_INFO_1A PPRINTER_CONNECTION_INFO_1;
    BOOL
<function name="AddPrinterConnection2A" ret="" convention="__stdcall">
<arg name="hWnd">HWND           </arg>
<arg name="pszName">LPCSTR       </arg>
<arg name="dwLevel">DWORD          </arg>
<arg name="pConnectionInfo">PVOID          </arg>
</function>
    BOOL
<function name="AddPrinterConnection2W" ret="" convention="__stdcall">
<arg name="hWnd">HWND           </arg>
<arg name="pszName">LPCWSTR       </arg>
<arg name="dwLevel">DWORD          </arg>
<arg name="pConnectionInfo">PVOID          </arg>
</function>
    HRESULT
    InstallPrinterDriverFromPackageA(
       LPCSTR    pszServer,
       LPCSTR    pszInfPath,
           LPCSTR    pszDriverName,
       LPCSTR    pszEnvironment,
<arg name="dwFlags">DWORD      </arg>
</function>
    HRESULT
    InstallPrinterDriverFromPackageW(
       LPCWSTR    pszServer,
       LPCWSTR    pszInfPath,
           LPCWSTR    pszDriverName,
       LPCWSTR    pszEnvironment,
<arg name="dwFlags">DWORD      </arg>
</function>
                                            
    HRESULT
    UploadPrinterDriverPackageA(
       LPCSTR    pszServer,
           LPCSTR    pszInfPath,
       LPCSTR    pszEnvironment,
           DWORD       dwFlags,
           HWND        hwnd,
    
               LPSTR     pszDestInfPath,
<arg name="pcchDestInfPath">PULONG     </arg>
</function>
    HRESULT
    UploadPrinterDriverPackageW(
       LPCWSTR    pszServer,
           LPCWSTR    pszInfPath,
       LPCWSTR    pszEnvironment,
           DWORD       dwFlags,
           HWND        hwnd,
    
               LPWSTR     pszDestInfPath,
<arg name="pcchDestInfPath">PULONG     </arg>
</function>
<struct name="_CORE_PRINTER_DRIVERA">
<field name="CoreDriverGUID">GUID</field>
<field name="ftDriverDate">FILETIME</field>
<field name="dwlDriverVersion">DWORDLONG</field>
<field name="szPackageID[260]">CHAR</field>
</struct>
<typedefprev id="CORE_PRINTER_DRIVERA"/>
<typedefptrprev id="PCORE_PRINTER_DRIVERA"/>
<struct name="_CORE_PRINTER_DRIVERW">
<field name="CoreDriverGUID">GUID</field>
<field name="ftDriverDate">FILETIME</field>
<field name="dwlDriverVersion">DWORDLONG</field>
<field name="szPackageID[260]">WCHAR</field>
</struct>
<typedefprev id="CORE_PRINTER_DRIVERW"/>
<typedefptrprev id="PCORE_PRINTER_DRIVERW"/>

typedef CORE_PRINTER_DRIVERA CORE_PRINTER_DRIVER;
typedef PCORE_PRINTER_DRIVERA PCORE_PRINTER_DRIVER;
    HRESULT
    GetCorePrinterDriversA(
                              LPCSTR               pszServer,
                              LPCSTR               pszEnvironment,
                                  LPCSTR               pszzCoreDriverDependencies,
                                  DWORD                  cCorePrinterDrivers,
<arg name="pCorePrinterDrivers">PCORE_PRINTER_DRIVERA </arg>
</function>
    HRESULT
    GetCorePrinterDriversW(
                              LPCWSTR               pszServer,
                              LPCWSTR               pszEnvironment,
                                  LPCWSTR               pszzCoreDriverDependencies,
                                  DWORD                  cCorePrinterDrivers,
<arg name="pCorePrinterDrivers">PCORE_PRINTER_DRIVERW </arg>
</function>
    HRESULT
    CorePrinterDriverInstalledA(
                LPCSTR     pszServer,
                LPCSTR     pszEnvironment,
                    GUID         CoreDriverGUID,
                    FILETIME     ftDriverDate,
                    DWORDLONG    dwlDriverVersion,
<arg name="pbDriverInstalled">BOOL         *</arg>
</function>
    HRESULT
    CorePrinterDriverInstalledW(
                LPCWSTR     pszServer,
                LPCWSTR     pszEnvironment,
                    GUID         CoreDriverGUID,
                    FILETIME     ftDriverDate,
                    DWORDLONG    dwlDriverVersion,
<arg name="pbDriverInstalled">BOOL         *</arg>
</function>
    HRESULT
    GetPrinterDriverPackagePathA(
                                       LPCSTR      pszServer,
                                       LPCSTR      pszEnvironment,
                                       LPCSTR      pszLanguage,
                                           LPCSTR      pszPackageID,
        LPSTR       pszDriverPackageCab,
                                       DWORD         cchDriverPackageCab,
<arg name="pcchRequiredSize">LPDWORD      </arg>
</function>
    HRESULT
    GetPrinterDriverPackagePathW(
                                       LPCWSTR      pszServer,
                                       LPCWSTR      pszEnvironment,
                                       LPCWSTR      pszLanguage,
                                           LPCWSTR      pszPackageID,
        LPWSTR       pszDriverPackageCab,
                                       DWORD         cchDriverPackageCab,
<arg name="pcchRequiredSize">LPDWORD      </arg>
</function>
    HRESULT
    DeletePrinterDriverPackageA(
       LPCSTR    pszServer,
           LPCSTR    pszInfPath,
<arg name="pszEnvironment">LPCSTR   </arg>
</function>
    HRESULT
    DeletePrinterDriverPackageW(
       LPCWSTR    pszServer,
           LPCWSTR    pszInfPath,
<arg name="pszEnvironment">LPCWSTR   </arg>
</function>
    typedef enum
    {
        kPropertyTypeString = 1,
        kPropertyTypeInt32,
        kPropertyTypeInt64,
        kPropertyTypeByte,
        kPropertyTypeTime,
        kPropertyTypeDevMode,
        kPropertyTypeSD,
        kPropertyTypeNotificationReply,
        kPropertyTypeNotificationOptions,
        kPropertyTypeBuffer

    } EPrintPropertyType;

    typedef enum
    {
        kAddingDocumentSequence = 0,
        kDocumentSequenceAdded  = 1,
        kAddingFixedDocument    = 2,
        kFixedDocumentAdded     = 3,
        kAddingFixedPage        = 4,
        kFixedPageAdded         = 5,
        kResourceAdded          = 6,
        kFontAdded              = 7,
        kImageAdded             = 8,
        kXpsDocumentCommitted   = 9

    } EPrintXPSJobProgress;

    typedef enum
    {
        kJobProduction = 1,
        kJobConsumption

    } EPrintXPSJobOperation;

    typedef struct
    {
        EPrintPropertyType       ePropertyType;
        union
        {
            BYTE                 propertyByte;
            PWSTR                propertyString;
            LONG                 propertyInt32;
            LONGLONG             propertyInt64;
<struct>
<field name="cbBuf">DWORD</field>
<field name="pBuf">LPVOID</field>
<field name="propertyBlob">}</field>
<field name="value">}</field>

    }PrintPropertyValue;

    typedef struct
    {
        WCHAR*                  propertyName;
        PrintPropertyValue      propertyValue;

    }PrintNamedProperty;

    typedef struct
    {
        ULONG                   numberOfProperties;
        PrintNamedProperty*     propertiesCollection;

    }PrintPropertiesCollection;

    HRESULT
    ReportJobProcessingProgress(
            HANDLE                         printerHandle,
                ULONG                          jobId,
                EPrintXPSJobOperation          jobOperation,
<arg name="jobProgress">EPrintXPSJobProgress          </arg>
</function>

    BOOL
<function name="GetPrinterDriver2A" ret="" convention="__stdcall">
<arg name="hWnd">HWND   </arg>
<arg name="hPrinter">HANDLE </arg>
<arg name="pEnvironment">LPSTR</arg>
<arg name="Level">DWORD  </arg>

        
                    LPBYTE  pDriverInfo,
                    DWORD   cbBuf,
<arg name="pcbNeeded">LPDWORD</arg>
</function>
    BOOL
<function name="GetPrinterDriver2W" ret="" convention="__stdcall">
<arg name="hWnd">HWND   </arg>
<arg name="hPrinter">HANDLE </arg>
<arg name="pEnvironment">LPWSTR</arg>
<arg name="Level">DWORD  </arg>

        
                    LPBYTE  pDriverInfo,
                    DWORD   cbBuf,
<arg name="pcbNeeded">LPDWORD</arg>
</function>
#line 1 "\\program files\\Microsoft SDKs\\Windows\\v6.0A\\Include\\ole2.h"

#pragma once
#line 1 "\\program files\\Microsoft SDKs\\Windows\\v6.0A\\Include\\pshpack8.h"
#pragma warning(disable:4103)

#pragma pack(push,8)

#line 1 "\\program files\\Microsoft SDKs\\Windows\\v6.0A\\Include\\objbase.h"

#pragma once
#line 1 "\\program files\\Microsoft SDKs\\Windows\\v6.0A\\Include\\pshpack8.h"
#pragma warning(disable:4103)

#pragma pack(push,8)
    
    

typedef enum tagREGCLS
{
    REGCLS_SINGLEUSE = 0,       
    REGCLS_MULTIPLEUSE = 1,     
                                
    REGCLS_MULTI_SEPARATE = 2,  
                                
    REGCLS_SUSPENDED      = 4,  
                                
    REGCLS_SURROGATE      = 8   
                                
                                
} REGCLS;
typedef DWORD STGFMT;

typedef struct    IRpcStubBuffer     IRpcStubBuffer;
typedef struct    IRpcChannelBuffer  IRpcChannelBuffer;
#line 1 "\\program files\\Microsoft SDKs\\Windows\\v6.0A\\Include\\unknwn.h"
 
#pragma warning( disable: 4049 )  

#pragma once
 
 

#pragma once

extern RPC_IF_HANDLE __MIDL_itf_unknwn_0000_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_unknwn_0000_0000_v0_0_s_ifspec;
 

typedef  IUnknown *LPUNKNOWN;
extern const IID IID_IUnknown;
<struct name="IUnknownVtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            IUnknown * This,
             const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            IUnknown * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            IUnknown * This);
        
        
    } IUnknownVtbl;

<struct name="IUnknown">
<vptr>IUnknownVtbl *</vptr>
</struct>

    

<function name="IUnknown_QueryInterface_Proxy" ret="HRESULT" convention="__stdcall">
 
    IUnknown * This,
     const IID * const riid,
     
      void **ppvObject);
<function name="IUnknown_QueryInterface_Stub" ret="void" convention="__stdcall">

    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
<function name="IUnknown_AddRef_Proxy" ret="ULONG" convention="__stdcall">
 
    IUnknown * This);
<function name="IUnknown_AddRef_Stub" ret="void" convention="__stdcall">

    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
<function name="IUnknown_Release_Proxy" ret="ULONG" convention="__stdcall">
 
    IUnknown * This);
<function name="IUnknown_Release_Stub" ret="void" convention="__stdcall">

    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 
extern RPC_IF_HANDLE __MIDL_itf_unknwn_0000_0001_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_unknwn_0000_0001_v0_0_s_ifspec;
 
extern const IID IID_AsyncIUnknown;
<struct name="AsyncIUnknownVtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            AsyncIUnknown * This,
             const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            AsyncIUnknown * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            AsyncIUnknown * This);
        
<fnptr name="Begin_QueryInterface" ret="HRESULT" convention="__stdcall">
 
            AsyncIUnknown * This,
             const IID * const riid);
        
<fnptr name="Finish_QueryInterface" ret="HRESULT" convention="__stdcall">
 
            AsyncIUnknown * This,
             
              void **ppvObject);
        
<fnptr name="Begin_AddRef" ret="HRESULT" convention="__stdcall">
 
            AsyncIUnknown * This);
        
<fnptr name="Finish_AddRef" ret="ULONG" convention="__stdcall">
 
            AsyncIUnknown * This);
        
<fnptr name="Begin_Release" ret="HRESULT" convention="__stdcall">
 
            AsyncIUnknown * This);
        
<fnptr name="Finish_Release" ret="ULONG" convention="__stdcall">
 
            AsyncIUnknown * This);
        
        
    } AsyncIUnknownVtbl;

<struct name="AsyncIUnknown">
<vptr>AsyncIUnknownVtbl *</vptr>
</struct>

    
 

typedef    IClassFactory *LPCLASSFACTORY;
extern const IID IID_IClassFactory;
<struct name="IClassFactoryVtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            IClassFactory * This,
              const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            IClassFactory * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            IClassFactory * This);
        
<fnptr name="CreateInstance" ret="HRESULT" convention="__stdcall">
 
            IClassFactory * This,
             IUnknown *pUnkOuter,
             const IID * const riid,
             void **ppvObject);
        
<fnptr name="LockServer" ret="HRESULT" convention="__stdcall">
 
            IClassFactory * This,
             BOOL fLock);
        
        
    } IClassFactoryVtbl;

<struct name="IClassFactory">
<vptr>IClassFactoryVtbl *</vptr>
</struct>

    

<function name="IClassFactory_RemoteCreateInstance_Proxy" ret="HRESULT" convention="__stdcall"> 
    IClassFactory * This,
      const IID * const riid,
      IUnknown **ppvObject);
<function name="IClassFactory_RemoteCreateInstance_Stub" ret="void" convention="__stdcall">

    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
<function name="IClassFactory_RemoteLockServer_Proxy" ret="HRESULT" convention="__stdcall"> 
    IClassFactory * This,
     BOOL fLock);
<function name="IClassFactory_RemoteLockServer_Stub" ret="void" convention="__stdcall">

    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
<function name="IClassFactory_CreateInstance_Proxy" ret="HRESULT" convention="__stdcall"> 
    IClassFactory * This,
     IUnknown *pUnkOuter,
     const IID * const riid,
     void **ppvObject);
<function name="IClassFactory_CreateInstance_Stub" ret="HRESULT" convention="__stdcall"> 
    IClassFactory * This,
      const IID * const riid,
      IUnknown **ppvObject);

<function name="IClassFactory_LockServer_Proxy" ret="HRESULT" convention="__stdcall"> 
    IClassFactory * This,
     BOOL fLock);
<function name="IClassFactory_LockServer_Stub" ret="HRESULT" convention="__stdcall"> 
    IClassFactory * This,
     BOOL fLock);
#line 1 "\\program files\\Microsoft SDKs\\Windows\\v6.0A\\Include\\objidl.h"
 
#pragma warning( disable: 4049 )  

#pragma once
 

















 

#pragma warning(push)

#pragma warning(disable:4201)
#pragma once
<struct name="_COSERVERINFO">
<field name="dwReserved1">DWORD</field>
<field name="pwszName">LPWSTR</field>
    COAUTHINFO *pAuthInfo;
    DWORD dwReserved2;
    } 	COSERVERINFO;

extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0000_v0_0_s_ifspec;
 

typedef  IMarshal *LPMARSHAL;
extern const IID IID_IMarshal;
<struct name="IMarshalVtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            IMarshal * This,
             const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            IMarshal * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            IMarshal * This);
        
<fnptr name="GetUnmarshalClass" ret="HRESULT" convention="__stdcall">
 
            IMarshal * This,
             const IID * const riid,
             void *pv,
             DWORD dwDestContext,
             void *pvDestContext,
             DWORD mshlflags,
             CLSID *pCid);
        
<fnptr name="GetMarshalSizeMax" ret="HRESULT" convention="__stdcall">
 
            IMarshal * This,
             const IID * const riid,
             void *pv,
             DWORD dwDestContext,
             void *pvDestContext,
             DWORD mshlflags,
             DWORD *pSize);
        
<fnptr name="MarshalInterface" ret="HRESULT" convention="__stdcall">
 
            IMarshal * This,
             IStream *pStm,
             const IID * const riid,
             void *pv,
             DWORD dwDestContext,
             void *pvDestContext,
             DWORD mshlflags);
        
<fnptr name="UnmarshalInterface" ret="HRESULT" convention="__stdcall">
 
            IMarshal * This,
             IStream *pStm,
             const IID * const riid,
             void **ppv);
        
<fnptr name="ReleaseMarshalData" ret="HRESULT" convention="__stdcall">
 
            IMarshal * This,
             IStream *pStm);
        
<fnptr name="DisconnectObject" ret="HRESULT" convention="__stdcall">
 
            IMarshal * This,
             DWORD dwReserved);
        
        
    } IMarshalVtbl;

<struct name="IMarshal">
<vptr>IMarshalVtbl *</vptr>
</struct>

    
 

typedef  IMarshal2 *LPMARSHAL2;
extern const IID IID_IMarshal2;
<struct name="IMarshal2Vtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            IMarshal2 * This,
             const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            IMarshal2 * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            IMarshal2 * This);
        
<fnptr name="GetUnmarshalClass" ret="HRESULT" convention="__stdcall">
 
            IMarshal2 * This,
             const IID * const riid,
             void *pv,
             DWORD dwDestContext,
             void *pvDestContext,
             DWORD mshlflags,
             CLSID *pCid);
        
<fnptr name="GetMarshalSizeMax" ret="HRESULT" convention="__stdcall">
 
            IMarshal2 * This,
             const IID * const riid,
             void *pv,
             DWORD dwDestContext,
             void *pvDestContext,
             DWORD mshlflags,
             DWORD *pSize);
        
<fnptr name="MarshalInterface" ret="HRESULT" convention="__stdcall">
 
            IMarshal2 * This,
             IStream *pStm,
             const IID * const riid,
             void *pv,
             DWORD dwDestContext,
             void *pvDestContext,
             DWORD mshlflags);
        
<fnptr name="UnmarshalInterface" ret="HRESULT" convention="__stdcall">
 
            IMarshal2 * This,
             IStream *pStm,
             const IID * const riid,
             void **ppv);
        
<fnptr name="ReleaseMarshalData" ret="HRESULT" convention="__stdcall">
 
            IMarshal2 * This,
             IStream *pStm);
        
<fnptr name="DisconnectObject" ret="HRESULT" convention="__stdcall">
 
            IMarshal2 * This,
             DWORD dwReserved);
        
        
    } IMarshal2Vtbl;

<struct name="IMarshal2">
<vptr>IMarshal2Vtbl *</vptr>
</struct>

    

 

typedef  IMalloc *LPMALLOC;
extern const IID IID_IMalloc;
<struct name="IMallocVtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            IMalloc * This,
             const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            IMalloc * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            IMalloc * This);
        
        void *( __stdcall *Alloc )( 
            IMalloc * This,
             SIZE_T cb);
        
        void *( __stdcall *Realloc )( 
            IMalloc * This,
             void *pv,
             SIZE_T cb);
        
<fnptr name="Free" ret="void" convention="__stdcall">
 
            IMalloc * This,
             void *pv);
        
<fnptr name="GetSize" ret="SIZE_T" convention="__stdcall">
 
            IMalloc * This,
             void *pv);
        
<fnptr name="DidAlloc" ret="int" convention="__stdcall">
 
            IMalloc * This,
            void *pv);
        
<fnptr name="HeapMinimize" ret="void" convention="__stdcall">
 
            IMalloc * This);
        
        
    } IMallocVtbl;

<struct name="IMalloc">
<vptr>IMallocVtbl *</vptr>
</struct>

    
 

typedef  IMallocSpy *LPMALLOCSPY;
extern const IID IID_IMallocSpy;

<struct name="IMallocSpyVtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            IMallocSpy * This,
             const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            IMallocSpy * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            IMallocSpy * This);
        
<fnptr name="PreAlloc" ret="SIZE_T" convention="__stdcall">
 
            IMallocSpy * This,
             SIZE_T cbRequest);
        
        void *( __stdcall *PostAlloc )( 
            IMallocSpy * This,
             void *pActual);
        
        void *( __stdcall *PreFree )( 
            IMallocSpy * This,
             void *pRequest,
             BOOL fSpyed);
        
<fnptr name="PostFree" ret="void" convention="__stdcall">
 
            IMallocSpy * This,
             BOOL fSpyed);
        
<fnptr name="PreRealloc" ret="SIZE_T" convention="__stdcall">
 
            IMallocSpy * This,
             void *pRequest,
             SIZE_T cbRequest,
             void **ppNewRequest,
             BOOL fSpyed);
        
        void *( __stdcall *PostRealloc )( 
            IMallocSpy * This,
             void *pActual,
             BOOL fSpyed);
        
        void *( __stdcall *PreGetSize )( 
            IMallocSpy * This,
             void *pRequest,
             BOOL fSpyed);
        
<fnptr name="PostGetSize" ret="SIZE_T" convention="__stdcall">
 
            IMallocSpy * This,
             SIZE_T cbActual,
             BOOL fSpyed);
        
        void *( __stdcall *PreDidAlloc )( 
            IMallocSpy * This,
             void *pRequest,
             BOOL fSpyed);
        
<fnptr name="PostDidAlloc" ret="int" convention="__stdcall">
 
            IMallocSpy * This,
             void *pRequest,
             BOOL fSpyed,
             int fActual);
        
<fnptr name="PreHeapMinimize" ret="void" convention="__stdcall">
 
            IMallocSpy * This);
        
<fnptr name="PostHeapMinimize" ret="void" convention="__stdcall">
 
            IMallocSpy * This);
        
        
    } IMallocSpyVtbl;

<struct name="IMallocSpy">
<vptr>IMallocSpyVtbl *</vptr>
</struct>

    
 

typedef  IStdMarshalInfo *LPSTDMARSHALINFO;
extern const IID IID_IStdMarshalInfo;
<struct name="IStdMarshalInfoVtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            IStdMarshalInfo * This,
             const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            IStdMarshalInfo * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            IStdMarshalInfo * This);
        
<fnptr name="GetClassForHandler" ret="HRESULT" convention="__stdcall">
 
            IStdMarshalInfo * This,
             DWORD dwDestContext,
             void *pvDestContext,
             CLSID *pClsid);
        
        
    } IStdMarshalInfoVtbl;

<struct name="IStdMarshalInfo">
<vptr>IStdMarshalInfoVtbl *</vptr>
</struct>

    
 

typedef  IExternalConnection *LPEXTERNALCONNECTION;

typedef 
enum tagEXTCONN
    {	EXTCONN_STRONG	= 0x1,
	EXTCONN_WEAK	= 0x2,
	EXTCONN_CALLABLE	= 0x4
    } 	EXTCONN;
extern const IID IID_IExternalConnection;
<struct name="IExternalConnectionVtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            IExternalConnection * This,
             const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            IExternalConnection * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            IExternalConnection * This);
        
<fnptr name="AddConnection" ret="DWORD" convention="__stdcall">
 
            IExternalConnection * This,
             DWORD extconn,
             DWORD reserved);
        
<fnptr name="ReleaseConnection" ret="DWORD" convention="__stdcall">
 
            IExternalConnection * This,
             DWORD extconn,
             DWORD reserved,
             BOOL fLastReleaseCloses);
        
        
    } IExternalConnectionVtbl;

<struct name="IExternalConnection">
<vptr>IExternalConnectionVtbl *</vptr>
</struct>

    

 

typedef    IMultiQI *LPMULTIQI;

<struct name="tagMULTI_QI">
    const IID *pIID;
    IUnknown *pItf;
    HRESULT hr;
    } 	MULTI_QI;
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0006_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0006_v0_0_s_ifspec;
 
extern const IID IID_IMultiQI;
<struct name="IMultiQIVtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            IMultiQI * This,
             const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            IMultiQI * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            IMultiQI * This);
        
<fnptr name="QueryMultipleInterfaces" ret="HRESULT" convention="__stdcall">
 
            IMultiQI * This,
             ULONG cMQIs,
             MULTI_QI *pMQIs);
        
        
    } IMultiQIVtbl;

<struct name="IMultiQI">
<vptr>IMultiQIVtbl *</vptr>
</struct>

    
 
extern const IID IID_AsyncIMultiQI;

<struct name="AsyncIMultiQIVtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            AsyncIMultiQI * This,
             const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            AsyncIMultiQI * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            AsyncIMultiQI * This);
        
<fnptr name="Begin_QueryMultipleInterfaces" ret="HRESULT" convention="__stdcall">
 
            AsyncIMultiQI * This,
             ULONG cMQIs,
             MULTI_QI *pMQIs);
        
<fnptr name="Finish_QueryMultipleInterfaces" ret="HRESULT" convention="__stdcall">
 
            AsyncIMultiQI * This,
             MULTI_QI *pMQIs);
        
        
    } AsyncIMultiQIVtbl;

<struct name="AsyncIMultiQI">
<vptr>AsyncIMultiQIVtbl *</vptr>
</struct>

    
 
extern const IID IID_IInternalUnknown;
<struct name="IInternalUnknownVtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            IInternalUnknown * This,
             const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            IInternalUnknown * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            IInternalUnknown * This);
        
<fnptr name="QueryInternalInterface" ret="HRESULT" convention="__stdcall">
 
            IInternalUnknown * This,
             const IID * const riid,
             void **ppv);
        
        
    } IInternalUnknownVtbl;

<struct name="IInternalUnknown">
<vptr>IInternalUnknownVtbl *</vptr>
</struct>

    
 

typedef    IEnumUnknown *LPENUMUNKNOWN;
extern const IID IID_IEnumUnknown;

<struct name="IEnumUnknownVtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            IEnumUnknown * This,
              const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            IEnumUnknown * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            IEnumUnknown * This);
        
<fnptr name="Next" ret="HRESULT" convention="__stdcall">
 
            IEnumUnknown * This,
             ULONG celt,
             IUnknown **rgelt,
             ULONG *pceltFetched);
        
<fnptr name="Skip" ret="HRESULT" convention="__stdcall">
 
            IEnumUnknown * This,
             ULONG celt);
        
<fnptr name="Reset" ret="HRESULT" convention="__stdcall">
 
            IEnumUnknown * This);
        
<fnptr name="Clone" ret="HRESULT" convention="__stdcall">
 
            IEnumUnknown * This,
              IEnumUnknown **ppenum);
        
        
    } IEnumUnknownVtbl;

<struct name="IEnumUnknown">
<vptr>IEnumUnknownVtbl *</vptr>
</struct>

    
<function name="IEnumUnknown_RemoteNext_Proxy" ret="HRESULT" convention="__stdcall"> 
    IEnumUnknown * This,
     ULONG celt,
      IUnknown **rgelt,
      ULONG *pceltFetched);
<function name="IEnumUnknown_RemoteNext_Stub" ret="void" convention="__stdcall">

    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 

typedef    IBindCtx *LPBC;

typedef    IBindCtx *LPBINDCTX;

<struct name="tagBIND_OPTS">
<field name="cbStruct">DWORD</field>
<field name="grfFlags">DWORD</field>
<field name="grfMode">DWORD</field>
<field name="dwTickCountDeadline">DWORD</field>
    } 	BIND_OPTS;

<typedef name="LPBIND_OPTS">tagBIND_OPTS *</typedef>
<struct name="tagBIND_OPTS2">
<field name="cbStruct">DWORD</field>
<field name="grfFlags">DWORD</field>
<field name="grfMode">DWORD</field>
<field name="dwTickCountDeadline">DWORD</field>
<field name="dwTrackFlags">DWORD</field>
<field name="dwClassContext">DWORD</field>
<field name="locale">LCID</field>
    COSERVERINFO *pServerInfo;
    } 	BIND_OPTS2;

<typedef name="LPBIND_OPTS2">tagBIND_OPTS2 *</typedef>
<struct name="tagBIND_OPTS3">
<field name="cbStruct">DWORD</field>
<field name="grfFlags">DWORD</field>
<field name="grfMode">DWORD</field>
<field name="dwTickCountDeadline">DWORD</field>
<field name="dwTrackFlags">DWORD</field>
<field name="dwClassContext">DWORD</field>
<field name="locale">LCID</field>
    COSERVERINFO *pServerInfo;
    HWND hwnd;
    } 	BIND_OPTS3;

<typedef name="LPBIND_OPTS3">tagBIND_OPTS3 *</typedef>

typedef 
enum tagBIND_FLAGS
    {	BIND_MAYBOTHERUSER	= 1,
	BIND_JUSTTESTEXISTENCE	= 2
    } 	BIND_FLAGS;
extern const IID IID_IBindCtx;

<struct name="IBindCtxVtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            IBindCtx * This,
              const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            IBindCtx * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            IBindCtx * This);
        
<fnptr name="RegisterObjectBound" ret="HRESULT" convention="__stdcall">
 
            IBindCtx * This,
              IUnknown *punk);
        
<fnptr name="RevokeObjectBound" ret="HRESULT" convention="__stdcall">
 
            IBindCtx * This,
              IUnknown *punk);
        
<fnptr name="ReleaseBoundObjects" ret="HRESULT" convention="__stdcall">
 
            IBindCtx * This);
        
<fnptr name="SetBindOptions" ret="HRESULT" convention="__stdcall">
 
            IBindCtx * This,
             BIND_OPTS *pbindopts);
        
<fnptr name="GetBindOptions" ret="HRESULT" convention="__stdcall">
 
            IBindCtx * This,
             BIND_OPTS *pbindopts);
        
<fnptr name="GetRunningObjectTable" ret="HRESULT" convention="__stdcall">
 
            IBindCtx * This,
              IRunningObjectTable **pprot);
        
<fnptr name="RegisterObjectParam" ret="HRESULT" convention="__stdcall">
 
            IBindCtx * This,
              LPOLESTR pszKey,
              IUnknown *punk);
        
<fnptr name="GetObjectParam" ret="HRESULT" convention="__stdcall">
 
            IBindCtx * This,
              LPOLESTR pszKey,
              IUnknown **ppunk);
        
<fnptr name="EnumObjectParam" ret="HRESULT" convention="__stdcall">
 
            IBindCtx * This,
              IEnumString **ppenum);
        
<fnptr name="RevokeObjectParam" ret="HRESULT" convention="__stdcall">
 
            IBindCtx * This,
              LPOLESTR pszKey);
        
        
    } IBindCtxVtbl;

<struct name="IBindCtx">
<vptr>IBindCtxVtbl *</vptr>
</struct>

    

<function name="IBindCtx_RemoteSetBindOptions_Proxy" ret="HRESULT" convention="__stdcall"> 
    IBindCtx * This,
      BIND_OPTS2 *pbindopts);
<function name="IBindCtx_RemoteSetBindOptions_Stub" ret="void" convention="__stdcall">

    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
<function name="IBindCtx_RemoteGetBindOptions_Proxy" ret="HRESULT" convention="__stdcall"> 
    IBindCtx * This,
      BIND_OPTS2 *pbindopts);
<function name="IBindCtx_RemoteGetBindOptions_Stub" ret="void" convention="__stdcall">

    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
 

typedef    IEnumMoniker *LPENUMMONIKER;
extern const IID IID_IEnumMoniker;
<struct name="IEnumMonikerVtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            IEnumMoniker * This,
              const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            IEnumMoniker * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            IEnumMoniker * This);
        
<fnptr name="Next" ret="HRESULT" convention="__stdcall">
 
            IEnumMoniker * This,
             ULONG celt,
             IMoniker **rgelt,
             ULONG *pceltFetched);
        
<fnptr name="Skip" ret="HRESULT" convention="__stdcall">
 
            IEnumMoniker * This,
             ULONG celt);
        
<fnptr name="Reset" ret="HRESULT" convention="__stdcall">
 
            IEnumMoniker * This);
        
<fnptr name="Clone" ret="HRESULT" convention="__stdcall">
 
            IEnumMoniker * This,
              IEnumMoniker **ppenum);
        
        
    } IEnumMonikerVtbl;

<struct name="IEnumMoniker">
<vptr>IEnumMonikerVtbl *</vptr>
</struct>

    

<function name="IEnumMoniker_RemoteNext_Proxy" ret="HRESULT" convention="__stdcall"> 
    IEnumMoniker * This,
     ULONG celt,
      IMoniker **rgelt,
      ULONG *pceltFetched);
<function name="IEnumMoniker_RemoteNext_Stub" ret="void" convention="__stdcall">

    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
 

typedef    IRunnableObject *LPRUNNABLEOBJECT;
extern const IID IID_IRunnableObject;
<struct name="IRunnableObjectVtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            IRunnableObject * This,
              const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            IRunnableObject * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            IRunnableObject * This);
        
<fnptr name="GetRunningClass" ret="HRESULT" convention="__stdcall">
 
            IRunnableObject * This,
              LPCLSID lpClsid);
        
<fnptr name="Run" ret="HRESULT" convention="__stdcall">
 
            IRunnableObject * This,
              LPBINDCTX pbc);
        
<fnptr name="IsRunning" ret="BOOL" convention="__stdcall">
 
            IRunnableObject * This);
        
<fnptr name="LockRunning" ret="HRESULT" convention="__stdcall">
 
            IRunnableObject * This,
             BOOL fLock,
             BOOL fLastUnlockCloses);
        
<fnptr name="SetContainedObject" ret="HRESULT" convention="__stdcall">
 
            IRunnableObject * This,
             BOOL fContained);
        
        
    } IRunnableObjectVtbl;

<struct name="IRunnableObject">
<vptr>IRunnableObjectVtbl *</vptr>
</struct>

    
<function name="IRunnableObject_RemoteIsRunning_Proxy" ret="HRESULT" convention="__stdcall"> 
    IRunnableObject * This);
<function name="IRunnableObject_RemoteIsRunning_Stub" ret="void" convention="__stdcall">

    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
 

typedef    IRunningObjectTable *LPRUNNINGOBJECTTABLE;
extern const IID IID_IRunningObjectTable;
<struct name="IRunningObjectTableVtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            IRunningObjectTable * This,
              const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            IRunningObjectTable * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            IRunningObjectTable * This);
        
<fnptr name="Register" ret="HRESULT" convention="__stdcall">
 
            IRunningObjectTable * This,
             DWORD grfFlags,
              IUnknown *punkObject,
              IMoniker *pmkObjectName,
              DWORD *pdwRegister);
        
<fnptr name="Revoke" ret="HRESULT" convention="__stdcall">
 
            IRunningObjectTable * This,
             DWORD dwRegister);
        
<fnptr name="IsRunning" ret="HRESULT" convention="__stdcall">
 
            IRunningObjectTable * This,
              IMoniker *pmkObjectName);
        
<fnptr name="GetObjectA" ret="HRESULT" convention="__stdcall">
 
            IRunningObjectTable * This,
              IMoniker *pmkObjectName,
              IUnknown **ppunkObject);
        
<fnptr name="NoteChangeTime" ret="HRESULT" convention="__stdcall">
 
            IRunningObjectTable * This,
             DWORD dwRegister,
              FILETIME *pfiletime);
        
<fnptr name="GetTimeOfLastChange" ret="HRESULT" convention="__stdcall">
 
            IRunningObjectTable * This,
              IMoniker *pmkObjectName,
              FILETIME *pfiletime);
        
<fnptr name="EnumRunning" ret="HRESULT" convention="__stdcall">
 
            IRunningObjectTable * This,
              IEnumMoniker **ppenumMoniker);
        
        
    } IRunningObjectTableVtbl;

<struct name="IRunningObjectTable">
<vptr>IRunningObjectTableVtbl *</vptr>
</struct>

    

 

typedef    IPersist *LPPERSIST;
extern const IID IID_IPersist;
<struct name="IPersistVtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            IPersist * This,
              const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            IPersist * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            IPersist * This);
        
<fnptr name="GetClassID" ret="HRESULT" convention="__stdcall">
 
            IPersist * This,
              CLSID *pClassID);
        
        
    } IPersistVtbl;

<struct name="IPersist">
<vptr>IPersistVtbl *</vptr>
</struct>

    
 

typedef    IPersistStream *LPPERSISTSTREAM;
extern const IID IID_IPersistStream;
<struct name="IPersistStreamVtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            IPersistStream * This,
              const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            IPersistStream * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            IPersistStream * This);
        
<fnptr name="GetClassID" ret="HRESULT" convention="__stdcall">
 
            IPersistStream * This,
              CLSID *pClassID);
        
<fnptr name="IsDirty" ret="HRESULT" convention="__stdcall">
 
            IPersistStream * This);
        
<fnptr name="Load" ret="HRESULT" convention="__stdcall">
 
            IPersistStream * This,
              IStream *pStm);
        
<fnptr name="Save" ret="HRESULT" convention="__stdcall">
 
            IPersistStream * This,
              IStream *pStm,
             BOOL fClearDirty);
        
<fnptr name="GetSizeMax" ret="HRESULT" convention="__stdcall">
 
            IPersistStream * This,
              ULARGE_INTEGER *pcbSize);
        
        
    } IPersistStreamVtbl;

<struct name="IPersistStream">
<vptr>IPersistStreamVtbl *</vptr>
</struct>

    

 

typedef    IMoniker *LPMONIKER;

typedef 
enum tagMKSYS
    {	MKSYS_NONE	= 0,
	MKSYS_GENERICCOMPOSITE	= 1,
	MKSYS_FILEMONIKER	= 2,
	MKSYS_ANTIMONIKER	= 3,
	MKSYS_ITEMMONIKER	= 4,
	MKSYS_POINTERMONIKER	= 5,
	MKSYS_CLASSMONIKER	= 7,
	MKSYS_OBJREFMONIKER	= 8,
	MKSYS_SESSIONMONIKER	= 9,
	MKSYS_LUAMONIKER	= 10
    } 	MKSYS;

typedef  
enum tagMKREDUCE
    {	MKRREDUCE_ONE	= ( 0x30000 ) ,
	MKRREDUCE_TOUSER	= ( 0x20000 ) ,
	MKRREDUCE_THROUGHUSER	= ( 0x10000 ) ,
	MKRREDUCE_ALL	= 0
    } 	MKRREDUCE;
extern const IID IID_IMoniker;
<struct name="IMonikerVtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            IMoniker * This,
              const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            IMoniker * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            IMoniker * This);
        
<fnptr name="GetClassID" ret="HRESULT" convention="__stdcall">
 
            IMoniker * This,
              CLSID *pClassID);
        
<fnptr name="IsDirty" ret="HRESULT" convention="__stdcall">
 
            IMoniker * This);
        
<fnptr name="Load" ret="HRESULT" convention="__stdcall">
 
            IMoniker * This,
              IStream *pStm);
        
<fnptr name="Save" ret="HRESULT" convention="__stdcall">
 
            IMoniker * This,
              IStream *pStm,
             BOOL fClearDirty);
        
<fnptr name="GetSizeMax" ret="HRESULT" convention="__stdcall">
 
            IMoniker * This,
              ULARGE_INTEGER *pcbSize);
        
<fnptr name="BindToObject" ret="HRESULT" convention="__stdcall">
 
            IMoniker * This,
             IBindCtx *pbc,
             IMoniker *pmkToLeft,
             const IID * const riidResult,
             void **ppvResult);
        
<fnptr name="BindToStorage" ret="HRESULT" convention="__stdcall">
 
            IMoniker * This,
             IBindCtx *pbc,
             IMoniker *pmkToLeft,
             const IID * const riid,
             void **ppvObj);
        
<fnptr name="Reduce" ret="HRESULT" convention="__stdcall">
 
            IMoniker * This,
              IBindCtx *pbc,
             DWORD dwReduceHowFar,
              IMoniker **ppmkToLeft,
              IMoniker **ppmkReduced);
        
<fnptr name="ComposeWith" ret="HRESULT" convention="__stdcall">
 
            IMoniker * This,
              IMoniker *pmkRight,
             BOOL fOnlyIfNotGeneric,
              IMoniker **ppmkComposite);
        
<fnptr name="Enum" ret="HRESULT" convention="__stdcall">
 
            IMoniker * This,
             BOOL fForward,
              IEnumMoniker **ppenumMoniker);
        
<fnptr name="IsEqual" ret="HRESULT" convention="__stdcall">
 
            IMoniker * This,
              IMoniker *pmkOtherMoniker);
        
<fnptr name="Hash" ret="HRESULT" convention="__stdcall">
 
            IMoniker * This,
              DWORD *pdwHash);
        
<fnptr name="IsRunning" ret="HRESULT" convention="__stdcall">
 
            IMoniker * This,
              IBindCtx *pbc,
              IMoniker *pmkToLeft,
              IMoniker *pmkNewlyRunning);
        
<fnptr name="GetTimeOfLastChange" ret="HRESULT" convention="__stdcall">
 
            IMoniker * This,
              IBindCtx *pbc,
              IMoniker *pmkToLeft,
              FILETIME *pFileTime);
        
<fnptr name="Inverse" ret="HRESULT" convention="__stdcall">
 
            IMoniker * This,
              IMoniker **ppmk);
        
<fnptr name="CommonPrefixWith" ret="HRESULT" convention="__stdcall">
 
            IMoniker * This,
              IMoniker *pmkOther,
              IMoniker **ppmkPrefix);
        
<fnptr name="RelativePathTo" ret="HRESULT" convention="__stdcall">
 
            IMoniker * This,
              IMoniker *pmkOther,
              IMoniker **ppmkRelPath);
        
<fnptr name="GetDisplayName" ret="HRESULT" convention="__stdcall">
 
            IMoniker * This,
              IBindCtx *pbc,
              IMoniker *pmkToLeft,
              LPOLESTR *ppszDisplayName);
        
<fnptr name="ParseDisplayName" ret="HRESULT" convention="__stdcall">
 
            IMoniker * This,
              IBindCtx *pbc,
              IMoniker *pmkToLeft,
              LPOLESTR pszDisplayName,
              ULONG *pchEaten,
              IMoniker **ppmkOut);
        
<fnptr name="IsSystemMoniker" ret="HRESULT" convention="__stdcall">
 
            IMoniker * This,
              DWORD *pdwMksys);
        
        
    } IMonikerVtbl;

<struct name="IMoniker">
<vptr>IMonikerVtbl *</vptr>
</struct>

    
<function name="IMoniker_RemoteBindToObject_Proxy" ret="HRESULT" convention="__stdcall"> 
    IMoniker * This,
      IBindCtx *pbc,
      IMoniker *pmkToLeft,
      const IID * const riidResult,
      IUnknown **ppvResult);
<function name="IMoniker_RemoteBindToObject_Stub" ret="void" convention="__stdcall">

    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
<function name="IMoniker_RemoteBindToStorage_Proxy" ret="HRESULT" convention="__stdcall"> 
    IMoniker * This,
      IBindCtx *pbc,
      IMoniker *pmkToLeft,
      const IID * const riid,
      IUnknown **ppvObj);
<function name="IMoniker_RemoteBindToStorage_Stub" ret="void" convention="__stdcall">

    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
 
extern const IID IID_IROTData;
<struct name="IROTDataVtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            IROTData * This,
              const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            IROTData * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            IROTData * This);
        
<fnptr name="GetComparisonData" ret="HRESULT" convention="__stdcall">
 
            IROTData * This,
              byte *pbData,
             ULONG cbMax,
              ULONG *pcbData);
        
        
    } IROTDataVtbl;

<struct name="IROTData">
<vptr>IROTDataVtbl *</vptr>
</struct>

    
 

typedef    IEnumString *LPENUMSTRING;
extern const IID IID_IEnumString;
<struct name="IEnumStringVtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            IEnumString * This,
              const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            IEnumString * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            IEnumString * This);
        
<fnptr name="Next" ret="HRESULT" convention="__stdcall">
 
            IEnumString * This,
             ULONG celt,
             
              LPOLESTR *rgelt,
             ULONG *pceltFetched);
        
<fnptr name="Skip" ret="HRESULT" convention="__stdcall">
 
            IEnumString * This,
             ULONG celt);
        
<fnptr name="Reset" ret="HRESULT" convention="__stdcall">
 
            IEnumString * This);
        
<fnptr name="Clone" ret="HRESULT" convention="__stdcall">
 
            IEnumString * This,
              IEnumString **ppenum);
        
        
    } IEnumStringVtbl;

<struct name="IEnumString">
<vptr>IEnumStringVtbl *</vptr>
</struct>

    

<function name="IEnumString_RemoteNext_Proxy" ret="HRESULT" convention="__stdcall"> 
    IEnumString * This,
     ULONG celt,
      LPOLESTR *rgelt,
      ULONG *pceltFetched);
<function name="IEnumString_RemoteNext_Stub" ret="void" convention="__stdcall">

    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
 
extern const IID IID_ISequentialStream;
<struct name="ISequentialStreamVtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            ISequentialStream * This,
              const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            ISequentialStream * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            ISequentialStream * This);
        
<fnptr name="Read" ret="HRESULT" convention="__stdcall">
 
            ISequentialStream * This,
             void *pv,
             ULONG cb,
             ULONG *pcbRead);
        
<fnptr name="Write" ret="HRESULT" convention="__stdcall">
 
            ISequentialStream * This,
             const void *pv,
             ULONG cb,
             ULONG *pcbWritten);
        
        
    } ISequentialStreamVtbl;

<struct name="ISequentialStream">
<vptr>ISequentialStreamVtbl *</vptr>
</struct>

    

<function name="ISequentialStream_RemoteRead_Proxy" ret="HRESULT" convention="__stdcall"> 
    ISequentialStream * This,
      byte *pv,
     ULONG cb,
      ULONG *pcbRead);
<function name="ISequentialStream_RemoteRead_Stub" ret="void" convention="__stdcall">

    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
<function name="ISequentialStream_RemoteWrite_Proxy" ret="HRESULT" convention="__stdcall"> 
    ISequentialStream * This,
      const byte *pv,
     ULONG cb,
      ULONG *pcbWritten);
<function name="ISequentialStream_RemoteWrite_Stub" ret="void" convention="__stdcall">

    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
 

typedef    IStream *LPSTREAM;
<struct name="tagSTATSTG">
<field name="pwcsName">LPOLESTR</field>
<field name="type">DWORD</field>
<field name="cbSize">ULARGE_INTEGER</field>
<field name="mtime">FILETIME</field>
<field name="ctime">FILETIME</field>
<field name="atime">FILETIME</field>
<field name="grfMode">DWORD</field>
<field name="grfLocksSupported">DWORD</field>
<field name="clsid">CLSID</field>
<field name="grfStateBits">DWORD</field>
<field name="reserved">DWORD</field>
    } 	STATSTG;
typedef 
enum tagSTGTY
    {	STGTY_STORAGE	= 1,
	STGTY_STREAM	= 2,
	STGTY_LOCKBYTES	= 3,
	STGTY_PROPERTY	= 4
    } 	STGTY;

typedef 
enum tagSTREAM_SEEK
    {	STREAM_SEEK_SET	= 0,
	STREAM_SEEK_CUR	= 1,
	STREAM_SEEK_END	= 2
    } 	STREAM_SEEK;

typedef 
enum tagLOCKTYPE
    {	LOCK_WRITE	= 1,
	LOCK_EXCLUSIVE	= 2,
	LOCK_ONLYONCE	= 4
    } 	LOCKTYPE;
extern const IID IID_IStream;

<struct name="IStreamVtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            IStream * This,
              const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            IStream * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            IStream * This);
        
<fnptr name="Read" ret="HRESULT" convention="__stdcall">
 
            IStream * This,
             void *pv,
             ULONG cb,
             ULONG *pcbRead);
        
<fnptr name="Write" ret="HRESULT" convention="__stdcall">
 
            IStream * This,
             const void *pv,
             ULONG cb,
             ULONG *pcbWritten);
        
<fnptr name="Seek" ret="HRESULT" convention="__stdcall">
 
            IStream * This,
             LARGE_INTEGER dlibMove,
             DWORD dwOrigin,
             ULARGE_INTEGER *plibNewPosition);
        
<fnptr name="SetSize" ret="HRESULT" convention="__stdcall">
 
            IStream * This,
             ULARGE_INTEGER libNewSize);
        
<fnptr name="CopyTo" ret="HRESULT" convention="__stdcall">
 
            IStream * This,
             IStream *pstm,
             ULARGE_INTEGER cb,
             ULARGE_INTEGER *pcbRead,
             ULARGE_INTEGER *pcbWritten);
        
<fnptr name="Commit" ret="HRESULT" convention="__stdcall">
 
            IStream * This,
             DWORD grfCommitFlags);
        
<fnptr name="Revert" ret="HRESULT" convention="__stdcall">
 
            IStream * This);
        
<fnptr name="LockRegion" ret="HRESULT" convention="__stdcall">
 
            IStream * This,
             ULARGE_INTEGER libOffset,
             ULARGE_INTEGER cb,
             DWORD dwLockType);
        
<fnptr name="UnlockRegion" ret="HRESULT" convention="__stdcall">
 
            IStream * This,
             ULARGE_INTEGER libOffset,
             ULARGE_INTEGER cb,
             DWORD dwLockType);
        
<fnptr name="Stat" ret="HRESULT" convention="__stdcall">
 
            IStream * This,
              STATSTG *pstatstg,
             DWORD grfStatFlag);
        
<fnptr name="Clone" ret="HRESULT" convention="__stdcall">
 
            IStream * This,
              IStream **ppstm);
        
        
    } IStreamVtbl;

<struct name="IStream">
<vptr>IStreamVtbl *</vptr>
</struct>

    
<function name="IStream_RemoteSeek_Proxy" ret="HRESULT" convention="__stdcall"> 
    IStream * This,
     LARGE_INTEGER dlibMove,
     DWORD dwOrigin,
      ULARGE_INTEGER *plibNewPosition);
<function name="IStream_RemoteSeek_Stub" ret="void" convention="__stdcall">

    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
<function name="IStream_RemoteCopyTo_Proxy" ret="HRESULT" convention="__stdcall"> 
    IStream * This,
      IStream *pstm,
     ULARGE_INTEGER cb,
      ULARGE_INTEGER *pcbRead,
      ULARGE_INTEGER *pcbWritten);
<function name="IStream_RemoteCopyTo_Stub" ret="void" convention="__stdcall">

    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
 

typedef    IEnumSTATSTG *LPENUMSTATSTG;
extern const IID IID_IEnumSTATSTG;
<struct name="IEnumSTATSTGVtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            IEnumSTATSTG * This,
              const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            IEnumSTATSTG * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            IEnumSTATSTG * This);
        
<fnptr name="Next" ret="HRESULT" convention="__stdcall">
 
            IEnumSTATSTG * This,
             ULONG celt,
             STATSTG *rgelt,
             ULONG *pceltFetched);
        
<fnptr name="Skip" ret="HRESULT" convention="__stdcall">
 
            IEnumSTATSTG * This,
             ULONG celt);
        
<fnptr name="Reset" ret="HRESULT" convention="__stdcall">
 
            IEnumSTATSTG * This);
        
<fnptr name="Clone" ret="HRESULT" convention="__stdcall">
 
            IEnumSTATSTG * This,
              IEnumSTATSTG **ppenum);
        
        
    } IEnumSTATSTGVtbl;

<struct name="IEnumSTATSTG">
<vptr>IEnumSTATSTGVtbl *</vptr>
</struct>

    

<function name="IEnumSTATSTG_RemoteNext_Proxy" ret="HRESULT" convention="__stdcall"> 
    IEnumSTATSTG * This,
     ULONG celt,
      STATSTG *rgelt,
      ULONG *pceltFetched);
<function name="IEnumSTATSTG_RemoteNext_Stub" ret="void" convention="__stdcall">

    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
 

typedef    IStorage *LPSTORAGE;

<struct name="tagRemSNB">
    unsigned long ulCntStr;
    unsigned long ulCntChar;
    OLECHAR rgString[ 1 ];
    } 	RemSNB;

typedef    RemSNB *wireSNB;

typedef  OLECHAR **SNB;
extern const IID IID_IStorage;
<struct name="IStorageVtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            IStorage * This,
              const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            IStorage * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            IStorage * This);
        
<fnptr name="CreateStream" ret="HRESULT" convention="__stdcall">
 
            IStorage * This,
              const OLECHAR *pwcsName,
             DWORD grfMode,
             DWORD reserved1,
             DWORD reserved2,
              IStream **ppstm);
        
<fnptr name="OpenStream" ret="HRESULT" convention="__stdcall">
 
            IStorage * This,
             const OLECHAR *pwcsName,
             void *reserved1,
             DWORD grfMode,
             DWORD reserved2,
             IStream **ppstm);
        
<fnptr name="CreateStorage" ret="HRESULT" convention="__stdcall">
 
            IStorage * This,
              const OLECHAR *pwcsName,
             DWORD grfMode,
             DWORD reserved1,
             DWORD reserved2,
              IStorage **ppstg);
        
<fnptr name="OpenStorage" ret="HRESULT" convention="__stdcall">
 
            IStorage * This,
              const OLECHAR *pwcsName,
              IStorage *pstgPriority,
             DWORD grfMode,
              SNB snbExclude,
             DWORD reserved,
              IStorage **ppstg);
        
<fnptr name="CopyTo" ret="HRESULT" convention="__stdcall">
 
            IStorage * This,
             DWORD ciidExclude,
             const IID *rgiidExclude,
             SNB snbExclude,
             IStorage *pstgDest);
        
<fnptr name="MoveElementTo" ret="HRESULT" convention="__stdcall">
 
            IStorage * This,
              const OLECHAR *pwcsName,
              IStorage *pstgDest,
              const OLECHAR *pwcsNewName,
             DWORD grfFlags);
        
<fnptr name="Commit" ret="HRESULT" convention="__stdcall">
 
            IStorage * This,
             DWORD grfCommitFlags);
        
<fnptr name="Revert" ret="HRESULT" convention="__stdcall">
 
            IStorage * This);
        
<fnptr name="EnumElements" ret="HRESULT" convention="__stdcall">
 
            IStorage * This,
             DWORD reserved1,
             void *reserved2,
             DWORD reserved3,
             IEnumSTATSTG **ppenum);
        
<fnptr name="DestroyElement" ret="HRESULT" convention="__stdcall">
 
            IStorage * This,
              const OLECHAR *pwcsName);
        
<fnptr name="RenameElement" ret="HRESULT" convention="__stdcall">
 
            IStorage * This,
              const OLECHAR *pwcsOldName,
              const OLECHAR *pwcsNewName);
        
<fnptr name="SetElementTimes" ret="HRESULT" convention="__stdcall">
 
            IStorage * This,
              const OLECHAR *pwcsName,
              const FILETIME *pctime,
              const FILETIME *patime,
              const FILETIME *pmtime);
        
<fnptr name="SetClass" ret="HRESULT" convention="__stdcall">
 
            IStorage * This,
              const IID * const clsid);
        
<fnptr name="SetStateBits" ret="HRESULT" convention="__stdcall">
 
            IStorage * This,
             DWORD grfStateBits,
             DWORD grfMask);
        
<fnptr name="Stat" ret="HRESULT" convention="__stdcall">
 
            IStorage * This,
              STATSTG *pstatstg,
             DWORD grfStatFlag);
        
        
    } IStorageVtbl;

<struct name="IStorage">
<vptr>IStorageVtbl *</vptr>
</struct>

    
<function name="IStorage_RemoteOpenStream_Proxy" ret="HRESULT" convention="__stdcall"> 
    IStorage * This,
      const OLECHAR *pwcsName,
     unsigned long cbReserved1,
      byte *reserved1,
     DWORD grfMode,
     DWORD reserved2,
      IStream **ppstm);
<function name="IStorage_RemoteOpenStream_Stub" ret="void" convention="__stdcall">

    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
<function name="IStorage_RemoteCopyTo_Proxy" ret="HRESULT" convention="__stdcall"> 
    IStorage * This,
     DWORD ciidExclude,
      const IID *rgiidExclude,
      SNB snbExclude,
      IStorage *pstgDest);
<function name="IStorage_RemoteCopyTo_Stub" ret="void" convention="__stdcall">

    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
<function name="IStorage_RemoteEnumElements_Proxy" ret="HRESULT" convention="__stdcall"> 
    IStorage * This,
     DWORD reserved1,
     unsigned long cbReserved2,
      byte *reserved2,
     DWORD reserved3,
      IEnumSTATSTG **ppenum);
<function name="IStorage_RemoteEnumElements_Stub" ret="void" convention="__stdcall">

    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
 

typedef    IPersistFile *LPPERSISTFILE;
extern const IID IID_IPersistFile;
<struct name="IPersistFileVtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            IPersistFile * This,
              const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            IPersistFile * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            IPersistFile * This);
        
<fnptr name="GetClassID" ret="HRESULT" convention="__stdcall">
 
            IPersistFile * This,
              CLSID *pClassID);
        
<fnptr name="IsDirty" ret="HRESULT" convention="__stdcall">
 
            IPersistFile * This);
        
<fnptr name="Load" ret="HRESULT" convention="__stdcall">
 
            IPersistFile * This,
              LPCOLESTR pszFileName,
             DWORD dwMode);
        
<fnptr name="Save" ret="HRESULT" convention="__stdcall">
 
            IPersistFile * This,
              LPCOLESTR pszFileName,
             BOOL fRemember);
        
<fnptr name="SaveCompleted" ret="HRESULT" convention="__stdcall">
 
            IPersistFile * This,
              LPCOLESTR pszFileName);
        
<fnptr name="GetCurFile" ret="HRESULT" convention="__stdcall">
 
            IPersistFile * This,
              LPOLESTR *ppszFileName);
        
        
    } IPersistFileVtbl;

<struct name="IPersistFile">
<vptr>IPersistFileVtbl *</vptr>
</struct>

    

 

typedef    IPersistStorage *LPPERSISTSTORAGE;
extern const IID IID_IPersistStorage;
<struct name="IPersistStorageVtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            IPersistStorage * This,
              const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            IPersistStorage * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            IPersistStorage * This);
        
<fnptr name="GetClassID" ret="HRESULT" convention="__stdcall">
 
            IPersistStorage * This,
              CLSID *pClassID);
        
<fnptr name="IsDirty" ret="HRESULT" convention="__stdcall">
 
            IPersistStorage * This);
        
<fnptr name="InitNew" ret="HRESULT" convention="__stdcall">
 
            IPersistStorage * This,
              IStorage *pStg);
        
<fnptr name="Load" ret="HRESULT" convention="__stdcall">
 
            IPersistStorage * This,
              IStorage *pStg);
        
<fnptr name="Save" ret="HRESULT" convention="__stdcall">
 
            IPersistStorage * This,
              IStorage *pStgSave,
             BOOL fSameAsLoad);
        
<fnptr name="SaveCompleted" ret="HRESULT" convention="__stdcall">
 
            IPersistStorage * This,
              IStorage *pStgNew);
        
<fnptr name="HandsOffStorage" ret="HRESULT" convention="__stdcall">
 
            IPersistStorage * This);
        
        
    } IPersistStorageVtbl;

<struct name="IPersistStorage">
<vptr>IPersistStorageVtbl *</vptr>
</struct>

    
 

typedef    ILockBytes *LPLOCKBYTES;
extern const IID IID_ILockBytes;
<struct name="ILockBytesVtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            ILockBytes * This,
              const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            ILockBytes * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            ILockBytes * This);
        
<fnptr name="ReadAt" ret="HRESULT" convention="__stdcall">
 
            ILockBytes * This,
             ULARGE_INTEGER ulOffset,
             void *pv,
             ULONG cb,
             ULONG *pcbRead);
        
<fnptr name="WriteAt" ret="HRESULT" convention="__stdcall">
 
            ILockBytes * This,
             ULARGE_INTEGER ulOffset,
             const void *pv,
             ULONG cb,
             ULONG *pcbWritten);
        
<fnptr name="Flush" ret="HRESULT" convention="__stdcall">
 
            ILockBytes * This);
        
<fnptr name="SetSize" ret="HRESULT" convention="__stdcall">
 
            ILockBytes * This,
             ULARGE_INTEGER cb);
        
<fnptr name="LockRegion" ret="HRESULT" convention="__stdcall">
 
            ILockBytes * This,
             ULARGE_INTEGER libOffset,
             ULARGE_INTEGER cb,
             DWORD dwLockType);
        
<fnptr name="UnlockRegion" ret="HRESULT" convention="__stdcall">
 
            ILockBytes * This,
             ULARGE_INTEGER libOffset,
             ULARGE_INTEGER cb,
             DWORD dwLockType);
        
<fnptr name="Stat" ret="HRESULT" convention="__stdcall">
 
            ILockBytes * This,
              STATSTG *pstatstg,
             DWORD grfStatFlag);
        
        
    } ILockBytesVtbl;

<struct name="ILockBytes">
<vptr>ILockBytesVtbl *</vptr>
</struct>

    
<function name="ILockBytes_RemoteReadAt_Proxy" ret="HRESULT" convention="__stdcall"> 
    ILockBytes * This,
     ULARGE_INTEGER ulOffset,
      byte *pv,
     ULONG cb,
      ULONG *pcbRead);
<function name="ILockBytes_RemoteReadAt_Stub" ret="void" convention="__stdcall">

    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
<function name="ILockBytes_RemoteWriteAt_Proxy" ret="HRESULT" convention="__stdcall"> 
    ILockBytes * This,
     ULARGE_INTEGER ulOffset,
      const byte *pv,
     ULONG cb,
      ULONG *pcbWritten);
<function name="ILockBytes_RemoteWriteAt_Stub" ret="void" convention="__stdcall">

    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
 

typedef    IEnumFORMATETC *LPENUMFORMATETC;
<struct name="tagDVTARGETDEVICE">
<field name="tdSize">DWORD</field>
<field name="tdDriverNameOffset">WORD</field>
<field name="tdDeviceNameOffset">WORD</field>
<field name="tdPortNameOffset">WORD</field>
<field name="tdExtDevmodeOffset">WORD</field>
<field name="tdData[ 1 ]">BYTE</field>
    } 	DVTARGETDEVICE;
typedef CLIPFORMAT *LPCLIPFORMAT;

<struct name="tagFORMATETC">
<field name="cfFormat">CLIPFORMAT</field>
    DVTARGETDEVICE *ptd;
    DWORD dwAspect;
    LONG lindex;
    DWORD tymed;
    } 	FORMATETC;

<typedef name="LPFORMATETC">tagFORMATETC *</typedef>
extern const IID IID_IEnumFORMATETC;
<struct name="IEnumFORMATETCVtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            IEnumFORMATETC * This,
              const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            IEnumFORMATETC * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            IEnumFORMATETC * This);
        
<fnptr name="Next" ret="HRESULT" convention="__stdcall">
 
            IEnumFORMATETC * This,
             ULONG celt,
             FORMATETC *rgelt,
             ULONG *pceltFetched);
        
<fnptr name="Skip" ret="HRESULT" convention="__stdcall">
 
            IEnumFORMATETC * This,
             ULONG celt);
        
<fnptr name="Reset" ret="HRESULT" convention="__stdcall">
 
            IEnumFORMATETC * This);
        
<fnptr name="Clone" ret="HRESULT" convention="__stdcall">
 
            IEnumFORMATETC * This,
              IEnumFORMATETC **ppenum);
        
        
    } IEnumFORMATETCVtbl;

<struct name="IEnumFORMATETC">
<vptr>IEnumFORMATETCVtbl *</vptr>
</struct>

    

<function name="IEnumFORMATETC_RemoteNext_Proxy" ret="HRESULT" convention="__stdcall"> 
    IEnumFORMATETC * This,
     ULONG celt,
      FORMATETC *rgelt,
      ULONG *pceltFetched);
<function name="IEnumFORMATETC_RemoteNext_Stub" ret="void" convention="__stdcall">

    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
 

typedef    IEnumSTATDATA *LPENUMSTATDATA;

typedef 
enum tagADVF
    {	ADVF_NODATA	= 1,
	ADVF_PRIMEFIRST	= 2,
	ADVF_ONLYONCE	= 4,
	ADVF_DATAONSTOP	= 64,
	ADVFCACHE_NOHANDLER	= 8,
	ADVFCACHE_FORCEBUILTIN	= 16,
	ADVFCACHE_ONSAVE	= 32
    } 	ADVF;

<struct name="tagSTATDATA">
<field name="formatetc">FORMATETC</field>
<field name="advf">DWORD</field>
    IAdviseSink *pAdvSink;
    DWORD dwConnection;
    } 	STATDATA;

typedef STATDATA *LPSTATDATA;
extern const IID IID_IEnumSTATDATA;
<struct name="IEnumSTATDATAVtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            IEnumSTATDATA * This,
              const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            IEnumSTATDATA * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            IEnumSTATDATA * This);
        
<fnptr name="Next" ret="HRESULT" convention="__stdcall">
 
            IEnumSTATDATA * This,
             ULONG celt,
             STATDATA *rgelt,
             ULONG *pceltFetched);
        
<fnptr name="Skip" ret="HRESULT" convention="__stdcall">
 
            IEnumSTATDATA * This,
             ULONG celt);
        
<fnptr name="Reset" ret="HRESULT" convention="__stdcall">
 
            IEnumSTATDATA * This);
        
<fnptr name="Clone" ret="HRESULT" convention="__stdcall">
 
            IEnumSTATDATA * This,
              IEnumSTATDATA **ppenum);
        
        
    } IEnumSTATDATAVtbl;

<struct name="IEnumSTATDATA">
<vptr>IEnumSTATDATAVtbl *</vptr>
</struct>

    

<function name="IEnumSTATDATA_RemoteNext_Proxy" ret="HRESULT" convention="__stdcall"> 
    IEnumSTATDATA * This,
     ULONG celt,
      STATDATA *rgelt,
      ULONG *pceltFetched);
<function name="IEnumSTATDATA_RemoteNext_Stub" ret="void" convention="__stdcall">

    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
 

typedef    IRootStorage *LPROOTSTORAGE;
extern const IID IID_IRootStorage;
<struct name="IRootStorageVtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            IRootStorage * This,
              const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            IRootStorage * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            IRootStorage * This);
        
<fnptr name="SwitchToFile" ret="HRESULT" convention="__stdcall">
 
            IRootStorage * This,
              LPOLESTR pszFile);
        
        
    } IRootStorageVtbl;

<struct name="IRootStorage">
<vptr>IRootStorageVtbl *</vptr>
</struct>

    
 

typedef IAdviseSink *LPADVISESINK;

typedef  
enum tagTYMED
    {	TYMED_HGLOBAL	= 1,
	TYMED_FILE	= 2,
	TYMED_ISTREAM	= 4,
	TYMED_ISTORAGE	= 8,
	TYMED_GDI	= 16,
	TYMED_MFPICT	= 32,
	TYMED_ENHMF	= 64,
	TYMED_NULL	= 0
    } 	TYMED;
#pragma warning(push)

#pragma warning(disable:4200)

<struct name="tagRemSTGMEDIUM">
<field name="tymed">DWORD</field>
<field name="dwHandleType">DWORD</field>
    unsigned long pData;
    unsigned long pUnkForRelease;
    unsigned long cbData;
    byte data[ 1 ];
    } 	RemSTGMEDIUM;
#pragma warning(pop)
<struct name="tagSTGMEDIUM">
<field name="tymed">DWORD</field>
    union 
        {
        HBITMAP hBitmap;
        HMETAFILEPICT hMetaFilePict;
        HENHMETAFILE hEnhMetaFile;
        HGLOBAL hGlobal;
        LPOLESTR lpszFileName;
        IStream *pstm;
        IStorage *pstg;
          
        } 	;
    IUnknown *pUnkForRelease;
    } 	uSTGMEDIUM;
<struct name="_GDI_OBJECT">
<field name="ObjectType">DWORD</field>
     union __MIDL_IAdviseSink_0002
        {
        wireHBITMAP hBitmap;
        wireHPALETTE hPalette;
        wireHGLOBAL hGeneric;
        } 	u;
    } 	GDI_OBJECT;

<struct name="_userSTGMEDIUM">
<struct name="_STGMEDIUM_UNION">
<field name="tymed">DWORD</field>
         union __MIDL_IAdviseSink_0003
            {
              
            wireHMETAFILEPICT hMetaFilePict;
            wireHENHMETAFILE hHEnhMetaFile;
            GDI_OBJECT *hGdiHandle;
            wireHGLOBAL hGlobal;
            LPOLESTR lpszFileName;
            BYTE_BLOB *pstm;
            BYTE_BLOB *pstg;
            } 	u;
        } 	;
    IUnknown *pUnkForRelease;
    } 	userSTGMEDIUM;

typedef    userSTGMEDIUM *wireSTGMEDIUM;

typedef  uSTGMEDIUM STGMEDIUM;

typedef    userSTGMEDIUM *wireASYNC_STGMEDIUM;

typedef  STGMEDIUM ASYNC_STGMEDIUM;

typedef STGMEDIUM *LPSTGMEDIUM;

<struct name="_userFLAG_STGMEDIUM">
<field name="ContextFlags">long</field>
<field name="fPassOwnership">long</field>
<field name="Stgmed">userSTGMEDIUM</field>
    } 	userFLAG_STGMEDIUM;

typedef    userFLAG_STGMEDIUM *wireFLAG_STGMEDIUM;

<struct name="_FLAG_STGMEDIUM">
<field name="ContextFlags">long</field>
<field name="fPassOwnership">long</field>
<field name="Stgmed">STGMEDIUM</field>
    } 	FLAG_STGMEDIUM;
extern const IID IID_IAdviseSink;
<struct name="IAdviseSinkVtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            IAdviseSink * This,
              const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            IAdviseSink * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            IAdviseSink * This);
        
<fnptr name="OnDataChange" ret="void" convention="__stdcall">
 
            IAdviseSink * This,
             FORMATETC *pFormatetc,
             STGMEDIUM *pStgmed);
        
<fnptr name="OnViewChange" ret="void" convention="__stdcall">
 
            IAdviseSink * This,
             DWORD dwAspect,
             LONG lindex);
        
<fnptr name="OnRename" ret="void" convention="__stdcall">
 
            IAdviseSink * This,
             IMoniker *pmk);
        
<fnptr name="OnSave" ret="void" convention="__stdcall">
 
            IAdviseSink * This);
        
<fnptr name="OnClose" ret="void" convention="__stdcall">
 
            IAdviseSink * This);
        
        
    } IAdviseSinkVtbl;

<struct name="IAdviseSink">
<vptr>IAdviseSinkVtbl *</vptr>
</struct>

    
<function name="IAdviseSink_RemoteOnDataChange_Proxy" ret="HRESULT" convention="__stdcall"> 
    IAdviseSink * This,
      FORMATETC *pFormatetc,
      ASYNC_STGMEDIUM *pStgmed);
<function name="IAdviseSink_RemoteOnDataChange_Stub" ret="void" convention="__stdcall">

    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
<function name="IAdviseSink_RemoteOnViewChange_Proxy" ret="HRESULT" convention="__stdcall"> 
    IAdviseSink * This,
     DWORD dwAspect,
     LONG lindex);
<function name="IAdviseSink_RemoteOnViewChange_Stub" ret="void" convention="__stdcall">

    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
<function name="IAdviseSink_RemoteOnRename_Proxy" ret="HRESULT" convention="__stdcall"> 
    IAdviseSink * This,
      IMoniker *pmk);
<function name="IAdviseSink_RemoteOnRename_Stub" ret="void" convention="__stdcall">

    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
<function name="IAdviseSink_RemoteOnSave_Proxy" ret="HRESULT" convention="__stdcall"> 
    IAdviseSink * This);
<function name="IAdviseSink_RemoteOnSave_Stub" ret="void" convention="__stdcall">

    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
<function name="IAdviseSink_RemoteOnClose_Proxy" ret="HRESULT" convention="__stdcall"> 
    IAdviseSink * This);
<function name="IAdviseSink_RemoteOnClose_Stub" ret="void" convention="__stdcall">

    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
 
extern const IID IID_AsyncIAdviseSink;
<struct name="AsyncIAdviseSinkVtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            AsyncIAdviseSink * This,
              const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            AsyncIAdviseSink * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            AsyncIAdviseSink * This);
        
<fnptr name="Begin_OnDataChange" ret="void" convention="__stdcall">
 
            AsyncIAdviseSink * This,
             FORMATETC *pFormatetc,
             STGMEDIUM *pStgmed);
        
<fnptr name="Finish_OnDataChange" ret="void" convention="__stdcall">
 
            AsyncIAdviseSink * This);
        
<fnptr name="Begin_OnViewChange" ret="void" convention="__stdcall">
 
            AsyncIAdviseSink * This,
             DWORD dwAspect,
             LONG lindex);
        
<fnptr name="Finish_OnViewChange" ret="void" convention="__stdcall">
 
            AsyncIAdviseSink * This);
        
<fnptr name="Begin_OnRename" ret="void" convention="__stdcall">
 
            AsyncIAdviseSink * This,
             IMoniker *pmk);
        
<fnptr name="Finish_OnRename" ret="void" convention="__stdcall">
 
            AsyncIAdviseSink * This);
        
<fnptr name="Begin_OnSave" ret="void" convention="__stdcall">
 
            AsyncIAdviseSink * This);
        
<fnptr name="Finish_OnSave" ret="void" convention="__stdcall">
 
            AsyncIAdviseSink * This);
        
<fnptr name="Begin_OnClose" ret="void" convention="__stdcall">
 
            AsyncIAdviseSink * This);
        
<fnptr name="Finish_OnClose" ret="void" convention="__stdcall">
 
            AsyncIAdviseSink * This);
        
        
    } AsyncIAdviseSinkVtbl;

<struct name="AsyncIAdviseSink">
<vptr>AsyncIAdviseSinkVtbl *</vptr>
</struct>

    

<function name="AsyncIAdviseSink_Begin_RemoteOnDataChange_Proxy" ret="HRESULT" convention="__stdcall"> 
    AsyncIAdviseSink * This,
      FORMATETC *pFormatetc,
      ASYNC_STGMEDIUM *pStgmed);
<function name="AsyncIAdviseSink_Begin_RemoteOnDataChange_Stub" ret="void" convention="__stdcall">

    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
<function name="AsyncIAdviseSink_Finish_RemoteOnDataChange_Proxy" ret="HRESULT" convention="__stdcall"> 
    AsyncIAdviseSink * This);
<function name="AsyncIAdviseSink_Finish_RemoteOnDataChange_Stub" ret="void" convention="__stdcall">

    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
<function name="AsyncIAdviseSink_Begin_RemoteOnViewChange_Proxy" ret="HRESULT" convention="__stdcall"> 
    AsyncIAdviseSink * This,
     DWORD dwAspect,
     LONG lindex);
<function name="AsyncIAdviseSink_Begin_RemoteOnViewChange_Stub" ret="void" convention="__stdcall">

    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
<function name="AsyncIAdviseSink_Finish_RemoteOnViewChange_Proxy" ret="HRESULT" convention="__stdcall"> 
    AsyncIAdviseSink * This);
<function name="AsyncIAdviseSink_Finish_RemoteOnViewChange_Stub" ret="void" convention="__stdcall">

    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
<function name="AsyncIAdviseSink_Begin_RemoteOnRename_Proxy" ret="HRESULT" convention="__stdcall"> 
    AsyncIAdviseSink * This,
      IMoniker *pmk);
<function name="AsyncIAdviseSink_Begin_RemoteOnRename_Stub" ret="void" convention="__stdcall">

    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
<function name="AsyncIAdviseSink_Finish_RemoteOnRename_Proxy" ret="HRESULT" convention="__stdcall"> 
    AsyncIAdviseSink * This);
<function name="AsyncIAdviseSink_Finish_RemoteOnRename_Stub" ret="void" convention="__stdcall">

    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
<function name="AsyncIAdviseSink_Begin_RemoteOnSave_Proxy" ret="HRESULT" convention="__stdcall"> 
    AsyncIAdviseSink * This);
<function name="AsyncIAdviseSink_Begin_RemoteOnSave_Stub" ret="void" convention="__stdcall">

    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
<function name="AsyncIAdviseSink_Finish_RemoteOnSave_Proxy" ret="HRESULT" convention="__stdcall"> 
    AsyncIAdviseSink * This);
<function name="AsyncIAdviseSink_Finish_RemoteOnSave_Stub" ret="void" convention="__stdcall">

    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
<function name="AsyncIAdviseSink_Begin_RemoteOnClose_Proxy" ret="HRESULT" convention="__stdcall"> 
    AsyncIAdviseSink * This);
<function name="AsyncIAdviseSink_Begin_RemoteOnClose_Stub" ret="void" convention="__stdcall">

    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
<function name="AsyncIAdviseSink_Finish_RemoteOnClose_Proxy" ret="HRESULT" convention="__stdcall"> 
    AsyncIAdviseSink * This);
<function name="AsyncIAdviseSink_Finish_RemoteOnClose_Stub" ret="void" convention="__stdcall">

    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
 

typedef    IAdviseSink2 *LPADVISESINK2;
extern const IID IID_IAdviseSink2;
<struct name="IAdviseSink2Vtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            IAdviseSink2 * This,
              const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            IAdviseSink2 * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            IAdviseSink2 * This);
        
<fnptr name="OnDataChange" ret="void" convention="__stdcall">
 
            IAdviseSink2 * This,
             FORMATETC *pFormatetc,
             STGMEDIUM *pStgmed);
        
<fnptr name="OnViewChange" ret="void" convention="__stdcall">
 
            IAdviseSink2 * This,
             DWORD dwAspect,
             LONG lindex);
        
<fnptr name="OnRename" ret="void" convention="__stdcall">
 
            IAdviseSink2 * This,
             IMoniker *pmk);
        
<fnptr name="OnSave" ret="void" convention="__stdcall">
 
            IAdviseSink2 * This);
        
<fnptr name="OnClose" ret="void" convention="__stdcall">
 
            IAdviseSink2 * This);
        
<fnptr name="OnLinkSrcChange" ret="void" convention="__stdcall">
 
            IAdviseSink2 * This,
             IMoniker *pmk);
        
        
    } IAdviseSink2Vtbl;

<struct name="IAdviseSink2">
<vptr>IAdviseSink2Vtbl *</vptr>
</struct>

    

<function name="IAdviseSink2_RemoteOnLinkSrcChange_Proxy" ret="HRESULT" convention="__stdcall"> 
    IAdviseSink2 * This,
      IMoniker *pmk);
<function name="IAdviseSink2_RemoteOnLinkSrcChange_Stub" ret="void" convention="__stdcall">

    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
 
extern const IID IID_AsyncIAdviseSink2;
<struct name="AsyncIAdviseSink2Vtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            AsyncIAdviseSink2 * This,
              const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            AsyncIAdviseSink2 * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            AsyncIAdviseSink2 * This);
        
<fnptr name="Begin_OnDataChange" ret="void" convention="__stdcall">
 
            AsyncIAdviseSink2 * This,
             FORMATETC *pFormatetc,
             STGMEDIUM *pStgmed);
        
<fnptr name="Finish_OnDataChange" ret="void" convention="__stdcall">
 
            AsyncIAdviseSink2 * This);
        
<fnptr name="Begin_OnViewChange" ret="void" convention="__stdcall">
 
            AsyncIAdviseSink2 * This,
             DWORD dwAspect,
             LONG lindex);
        
<fnptr name="Finish_OnViewChange" ret="void" convention="__stdcall">
 
            AsyncIAdviseSink2 * This);
        
<fnptr name="Begin_OnRename" ret="void" convention="__stdcall">
 
            AsyncIAdviseSink2 * This,
             IMoniker *pmk);
        
<fnptr name="Finish_OnRename" ret="void" convention="__stdcall">
 
            AsyncIAdviseSink2 * This);
        
<fnptr name="Begin_OnSave" ret="void" convention="__stdcall">
 
            AsyncIAdviseSink2 * This);
        
<fnptr name="Finish_OnSave" ret="void" convention="__stdcall">
 
            AsyncIAdviseSink2 * This);
        
<fnptr name="Begin_OnClose" ret="void" convention="__stdcall">
 
            AsyncIAdviseSink2 * This);
        
<fnptr name="Finish_OnClose" ret="void" convention="__stdcall">
 
            AsyncIAdviseSink2 * This);
        
<fnptr name="Begin_OnLinkSrcChange" ret="void" convention="__stdcall">
 
            AsyncIAdviseSink2 * This,
             IMoniker *pmk);
        
<fnptr name="Finish_OnLinkSrcChange" ret="void" convention="__stdcall">
 
            AsyncIAdviseSink2 * This);
        
        
    } AsyncIAdviseSink2Vtbl;

<struct name="AsyncIAdviseSink2">
<vptr>AsyncIAdviseSink2Vtbl *</vptr>
</struct>

    
<function name="AsyncIAdviseSink2_Begin_RemoteOnLinkSrcChange_Proxy" ret="HRESULT" convention="__stdcall"> 
    AsyncIAdviseSink2 * This,
      IMoniker *pmk);
<function name="AsyncIAdviseSink2_Begin_RemoteOnLinkSrcChange_Stub" ret="void" convention="__stdcall">

    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
<function name="AsyncIAdviseSink2_Finish_RemoteOnLinkSrcChange_Proxy" ret="HRESULT" convention="__stdcall"> 
    AsyncIAdviseSink2 * This);
<function name="AsyncIAdviseSink2_Finish_RemoteOnLinkSrcChange_Stub" ret="void" convention="__stdcall">

    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
 

typedef    IDataObject *LPDATAOBJECT;

typedef 
enum tagDATADIR
    {	DATADIR_GET	= 1,
	DATADIR_SET	= 2
    } 	DATADIR;
extern const IID IID_IDataObject;

<struct name="IDataObjectVtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            IDataObject * This,
              const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            IDataObject * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            IDataObject * This);
        
<fnptr name="GetData" ret="HRESULT" convention="__stdcall">
 
            IDataObject * This,
             FORMATETC *pformatetcIn,
             STGMEDIUM *pmedium);
        
<fnptr name="GetDataHere" ret="HRESULT" convention="__stdcall">
 
            IDataObject * This,
             FORMATETC *pformatetc,
             STGMEDIUM *pmedium);
        
<fnptr name="QueryGetData" ret="HRESULT" convention="__stdcall">
 
            IDataObject * This,
              FORMATETC *pformatetc);
        
<fnptr name="GetCanonicalFormatEtc" ret="HRESULT" convention="__stdcall">
 
            IDataObject * This,
              FORMATETC *pformatectIn,
              FORMATETC *pformatetcOut);
        
<fnptr name="SetData" ret="HRESULT" convention="__stdcall">
 
            IDataObject * This,
             FORMATETC *pformatetc,
             STGMEDIUM *pmedium,
             BOOL fRelease);
        
<fnptr name="EnumFormatEtc" ret="HRESULT" convention="__stdcall">
 
            IDataObject * This,
             DWORD dwDirection,
              IEnumFORMATETC **ppenumFormatEtc);
        
<fnptr name="DAdvise" ret="HRESULT" convention="__stdcall">
 
            IDataObject * This,
              FORMATETC *pformatetc,
             DWORD advf,
              IAdviseSink *pAdvSink,
              DWORD *pdwConnection);
        
<fnptr name="DUnadvise" ret="HRESULT" convention="__stdcall">
 
            IDataObject * This,
             DWORD dwConnection);
        
<fnptr name="EnumDAdvise" ret="HRESULT" convention="__stdcall">
 
            IDataObject * This,
              IEnumSTATDATA **ppenumAdvise);
        
        
    } IDataObjectVtbl;

<struct name="IDataObject">
<vptr>IDataObjectVtbl *</vptr>
</struct>

    
<function name="IDataObject_RemoteGetData_Proxy" ret="HRESULT" convention="__stdcall"> 
    IDataObject * This,
      FORMATETC *pformatetcIn,
      STGMEDIUM *pRemoteMedium);
<function name="IDataObject_RemoteGetData_Stub" ret="void" convention="__stdcall">

    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
<function name="IDataObject_RemoteGetDataHere_Proxy" ret="HRESULT" convention="__stdcall"> 
    IDataObject * This,
      FORMATETC *pformatetc,
      STGMEDIUM *pRemoteMedium);
<function name="IDataObject_RemoteGetDataHere_Stub" ret="void" convention="__stdcall">

    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
<function name="IDataObject_RemoteSetData_Proxy" ret="HRESULT" convention="__stdcall"> 
    IDataObject * This,
      FORMATETC *pformatetc,
      FLAG_STGMEDIUM *pmedium,
     BOOL fRelease);
<function name="IDataObject_RemoteSetData_Stub" ret="void" convention="__stdcall">

    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
 

typedef  IDataAdviseHolder *LPDATAADVISEHOLDER;
extern const IID IID_IDataAdviseHolder;
<struct name="IDataAdviseHolderVtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            IDataAdviseHolder * This,
             const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            IDataAdviseHolder * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            IDataAdviseHolder * This);
        
<fnptr name="Advise" ret="HRESULT" convention="__stdcall">
 
            IDataAdviseHolder * This,
             IDataObject *pDataObject,
             FORMATETC *pFetc,
             DWORD advf,
             IAdviseSink *pAdvise,
             DWORD *pdwConnection);
        
<fnptr name="Unadvise" ret="HRESULT" convention="__stdcall">
 
            IDataAdviseHolder * This,
             DWORD dwConnection);
        
<fnptr name="EnumAdvise" ret="HRESULT" convention="__stdcall">
 
            IDataAdviseHolder * This,
             IEnumSTATDATA **ppenumAdvise);
        
<fnptr name="SendOnDataChange" ret="HRESULT" convention="__stdcall">
 
            IDataAdviseHolder * This,
             IDataObject *pDataObject,
             DWORD dwReserved,
             DWORD advf);
        
        
    } IDataAdviseHolderVtbl;

<struct name="IDataAdviseHolder">
<vptr>IDataAdviseHolderVtbl *</vptr>
</struct>

    

 

typedef  IMessageFilter *LPMESSAGEFILTER;

typedef 
enum tagCALLTYPE
    {	CALLTYPE_TOPLEVEL	= 1,
	CALLTYPE_NESTED	= 2,
	CALLTYPE_ASYNC	= 3,
	CALLTYPE_TOPLEVEL_CALLPENDING	= 4,
	CALLTYPE_ASYNC_CALLPENDING	= 5
    } 	CALLTYPE;

typedef 
enum tagSERVERCALL
    {	SERVERCALL_ISHANDLED	= 0,
	SERVERCALL_REJECTED	= 1,
	SERVERCALL_RETRYLATER	= 2
    } 	SERVERCALL;

typedef 
enum tagPENDINGTYPE
    {	PENDINGTYPE_TOPLEVEL	= 1,
	PENDINGTYPE_NESTED	= 2
    } 	PENDINGTYPE;

typedef 
enum tagPENDINGMSG
    {	PENDINGMSG_CANCELCALL	= 0,
	PENDINGMSG_WAITNOPROCESS	= 1,
	PENDINGMSG_WAITDEFPROCESS	= 2
    } 	PENDINGMSG;

<struct name="tagINTERFACEINFO">
    IUnknown *pUnk;
    IID iid;
    WORD wMethod;
    } 	INTERFACEINFO;

<typedef name="LPINTERFACEINFO">tagINTERFACEINFO *</typedef>
extern const IID IID_IMessageFilter;
<struct name="IMessageFilterVtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            IMessageFilter * This,
             const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            IMessageFilter * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            IMessageFilter * This);
        
<fnptr name="HandleInComingCall" ret="DWORD" convention="__stdcall">
 
            IMessageFilter * This,
             DWORD dwCallType,
             HTASK htaskCaller,
             DWORD dwTickCount,
             LPINTERFACEINFO lpInterfaceInfo);
        
<fnptr name="RetryRejectedCall" ret="DWORD" convention="__stdcall">
 
            IMessageFilter * This,
             HTASK htaskCallee,
             DWORD dwTickCount,
             DWORD dwRejectType);
        
<fnptr name="MessagePending" ret="DWORD" convention="__stdcall">
 
            IMessageFilter * This,
             HTASK htaskCallee,
             DWORD dwTickCount,
             DWORD dwPendingType);
        
        
    } IMessageFilterVtbl;

<struct name="IMessageFilter">
<vptr>IMessageFilterVtbl *</vptr>
</struct>

    

 

typedef unsigned long RPCOLEDATAREP;

<struct name="tagRPCOLEMESSAGE">
    void *reserved1;
    RPCOLEDATAREP dataRepresentation;
    void *Buffer;
    ULONG cbBuffer;
    ULONG iMethod;
    void *reserved2[ 5 ];
    ULONG rpcFlags;
    } 	RPCOLEMESSAGE;

typedef RPCOLEMESSAGE *PRPCOLEMESSAGE;
extern const IID IID_IRpcChannelBuffer;
<struct name="IRpcChannelBufferVtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            IRpcChannelBuffer * This,
             const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            IRpcChannelBuffer * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            IRpcChannelBuffer * This);
        
<fnptr name="GetBuffer" ret="HRESULT" convention="__stdcall">
 
            IRpcChannelBuffer * This,
             RPCOLEMESSAGE *pMessage,
             const IID * const riid);
        
<fnptr name="SendReceive" ret="HRESULT" convention="__stdcall">
 
            IRpcChannelBuffer * This,
             RPCOLEMESSAGE *pMessage,
             ULONG *pStatus);
        
<fnptr name="FreeBuffer" ret="HRESULT" convention="__stdcall">
 
            IRpcChannelBuffer * This,
             RPCOLEMESSAGE *pMessage);
        
<fnptr name="GetDestCtx" ret="HRESULT" convention="__stdcall">
 
            IRpcChannelBuffer * This,
             DWORD *pdwDestContext,
             void **ppvDestContext);
        
<fnptr name="IsConnected" ret="HRESULT" convention="__stdcall">
 
            IRpcChannelBuffer * This);
        
        
    } IRpcChannelBufferVtbl;

<struct name="IRpcChannelBuffer">
<vptr>IRpcChannelBufferVtbl *</vptr>
</struct>

    
 
extern const IID IID_IRpcChannelBuffer2;
<struct name="IRpcChannelBuffer2Vtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            IRpcChannelBuffer2 * This,
             const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            IRpcChannelBuffer2 * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            IRpcChannelBuffer2 * This);
        
<fnptr name="GetBuffer" ret="HRESULT" convention="__stdcall">
 
            IRpcChannelBuffer2 * This,
             RPCOLEMESSAGE *pMessage,
             const IID * const riid);
        
<fnptr name="SendReceive" ret="HRESULT" convention="__stdcall">
 
            IRpcChannelBuffer2 * This,
             RPCOLEMESSAGE *pMessage,
             ULONG *pStatus);
        
<fnptr name="FreeBuffer" ret="HRESULT" convention="__stdcall">
 
            IRpcChannelBuffer2 * This,
             RPCOLEMESSAGE *pMessage);
        
<fnptr name="GetDestCtx" ret="HRESULT" convention="__stdcall">
 
            IRpcChannelBuffer2 * This,
             DWORD *pdwDestContext,
             void **ppvDestContext);
        
<fnptr name="IsConnected" ret="HRESULT" convention="__stdcall">
 
            IRpcChannelBuffer2 * This);
        
<fnptr name="GetProtocolVersion" ret="HRESULT" convention="__stdcall">
 
            IRpcChannelBuffer2 * This,
             DWORD *pdwVersion);
        
        
    } IRpcChannelBuffer2Vtbl;

<struct name="IRpcChannelBuffer2">
<vptr>IRpcChannelBuffer2Vtbl *</vptr>
</struct>

    

 
extern const IID IID_IAsyncRpcChannelBuffer;
<struct name="IAsyncRpcChannelBufferVtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            IAsyncRpcChannelBuffer * This,
             const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            IAsyncRpcChannelBuffer * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            IAsyncRpcChannelBuffer * This);
        
<fnptr name="GetBuffer" ret="HRESULT" convention="__stdcall">
 
            IAsyncRpcChannelBuffer * This,
             RPCOLEMESSAGE *pMessage,
             const IID * const riid);
        
<fnptr name="SendReceive" ret="HRESULT" convention="__stdcall">
 
            IAsyncRpcChannelBuffer * This,
             RPCOLEMESSAGE *pMessage,
             ULONG *pStatus);
        
<fnptr name="FreeBuffer" ret="HRESULT" convention="__stdcall">
 
            IAsyncRpcChannelBuffer * This,
             RPCOLEMESSAGE *pMessage);
        
<fnptr name="GetDestCtx" ret="HRESULT" convention="__stdcall">
 
            IAsyncRpcChannelBuffer * This,
             DWORD *pdwDestContext,
             void **ppvDestContext);
        
<fnptr name="IsConnected" ret="HRESULT" convention="__stdcall">
 
            IAsyncRpcChannelBuffer * This);
        
<fnptr name="GetProtocolVersion" ret="HRESULT" convention="__stdcall">
 
            IAsyncRpcChannelBuffer * This,
             DWORD *pdwVersion);
        
<fnptr name="Send" ret="HRESULT" convention="__stdcall">
 
            IAsyncRpcChannelBuffer * This,
             RPCOLEMESSAGE *pMsg,
             ISynchronize *pSync,
             ULONG *pulStatus);
        
<fnptr name="Receive" ret="HRESULT" convention="__stdcall">
 
            IAsyncRpcChannelBuffer * This,
             RPCOLEMESSAGE *pMsg,
             ULONG *pulStatus);
        
<fnptr name="GetDestCtxEx" ret="HRESULT" convention="__stdcall">
 
            IAsyncRpcChannelBuffer * This,
             RPCOLEMESSAGE *pMsg,
             DWORD *pdwDestContext,
             void **ppvDestContext);
        
        
    } IAsyncRpcChannelBufferVtbl;

<struct name="IAsyncRpcChannelBuffer">
<vptr>IAsyncRpcChannelBufferVtbl *</vptr>
</struct>

    

 
extern const IID IID_IRpcChannelBuffer3;
<struct name="IRpcChannelBuffer3Vtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            IRpcChannelBuffer3 * This,
             const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            IRpcChannelBuffer3 * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            IRpcChannelBuffer3 * This);
        
<fnptr name="GetBuffer" ret="HRESULT" convention="__stdcall">
 
            IRpcChannelBuffer3 * This,
             RPCOLEMESSAGE *pMessage,
             const IID * const riid);
        
<fnptr name="SendReceive" ret="HRESULT" convention="__stdcall">
 
            IRpcChannelBuffer3 * This,
             RPCOLEMESSAGE *pMessage,
             ULONG *pStatus);
        
<fnptr name="FreeBuffer" ret="HRESULT" convention="__stdcall">
 
            IRpcChannelBuffer3 * This,
             RPCOLEMESSAGE *pMessage);
        
<fnptr name="GetDestCtx" ret="HRESULT" convention="__stdcall">
 
            IRpcChannelBuffer3 * This,
             DWORD *pdwDestContext,
             void **ppvDestContext);
        
<fnptr name="IsConnected" ret="HRESULT" convention="__stdcall">
 
            IRpcChannelBuffer3 * This);
        
<fnptr name="GetProtocolVersion" ret="HRESULT" convention="__stdcall">
 
            IRpcChannelBuffer3 * This,
             DWORD *pdwVersion);
        
<fnptr name="Send" ret="HRESULT" convention="__stdcall">
 
            IRpcChannelBuffer3 * This,
             RPCOLEMESSAGE *pMsg,
             ULONG *pulStatus);
        
<fnptr name="Receive" ret="HRESULT" convention="__stdcall">
 
            IRpcChannelBuffer3 * This,
             RPCOLEMESSAGE *pMsg,
             ULONG ulSize,
             ULONG *pulStatus);
        
<fnptr name="Cancel" ret="HRESULT" convention="__stdcall">
 
            IRpcChannelBuffer3 * This,
             RPCOLEMESSAGE *pMsg);
        
<fnptr name="GetCallContext" ret="HRESULT" convention="__stdcall">
 
            IRpcChannelBuffer3 * This,
             RPCOLEMESSAGE *pMsg,
             const IID * const riid,
             void **pInterface);
        
<fnptr name="GetDestCtxEx" ret="HRESULT" convention="__stdcall">
 
            IRpcChannelBuffer3 * This,
             RPCOLEMESSAGE *pMsg,
             DWORD *pdwDestContext,
             void **ppvDestContext);
        
<fnptr name="GetState" ret="HRESULT" convention="__stdcall">
 
            IRpcChannelBuffer3 * This,
             RPCOLEMESSAGE *pMsg,
             DWORD *pState);
        
<fnptr name="RegisterAsync" ret="HRESULT" convention="__stdcall">
 
            IRpcChannelBuffer3 * This,
             RPCOLEMESSAGE *pMsg,
             IAsyncManager *pAsyncMgr);
        
        
    } IRpcChannelBuffer3Vtbl;

<struct name="IRpcChannelBuffer3">
<vptr>IRpcChannelBuffer3Vtbl *</vptr>
</struct>

    
 
extern const IID IID_IRpcSyntaxNegotiate;
<struct name="IRpcSyntaxNegotiateVtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            IRpcSyntaxNegotiate * This,
             const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            IRpcSyntaxNegotiate * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            IRpcSyntaxNegotiate * This);
        
<fnptr name="NegotiateSyntax" ret="HRESULT" convention="__stdcall">
 
            IRpcSyntaxNegotiate * This,
             RPCOLEMESSAGE *pMsg);
        
        
    } IRpcSyntaxNegotiateVtbl;

<struct name="IRpcSyntaxNegotiate">
<vptr>IRpcSyntaxNegotiateVtbl *</vptr>
</struct>

    
 
extern const IID IID_IRpcProxyBuffer;
<struct name="IRpcProxyBufferVtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            IRpcProxyBuffer * This,
             const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            IRpcProxyBuffer * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            IRpcProxyBuffer * This);
        
<fnptr name="Connect" ret="HRESULT" convention="__stdcall">
 
            IRpcProxyBuffer * This,
             IRpcChannelBuffer *pRpcChannelBuffer);
        
<fnptr name="Disconnect" ret="void" convention="__stdcall">
 
            IRpcProxyBuffer * This);
        
        
    } IRpcProxyBufferVtbl;

<struct name="IRpcProxyBuffer">
<vptr>IRpcProxyBufferVtbl *</vptr>
</struct>

    

 
extern const IID IID_IRpcStubBuffer;
<struct name="IRpcStubBufferVtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            IRpcStubBuffer * This,
             const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            IRpcStubBuffer * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            IRpcStubBuffer * This);
        
<fnptr name="Connect" ret="HRESULT" convention="__stdcall">
 
            IRpcStubBuffer * This,
             IUnknown *pUnkServer);
        
<fnptr name="Disconnect" ret="void" convention="__stdcall">
 
            IRpcStubBuffer * This);
        
<fnptr name="Invoke" ret="HRESULT" convention="__stdcall">
 
            IRpcStubBuffer * This,
             RPCOLEMESSAGE *_prpcmsg,
             IRpcChannelBuffer *_pRpcChannelBuffer);
        
        IRpcStubBuffer *( __stdcall *IsIIDSupported )( 
            IRpcStubBuffer * This,
             const IID * const riid);
        
<fnptr name="CountRefs" ret="ULONG" convention="__stdcall">
 
            IRpcStubBuffer * This);
        
<fnptr name="DebugServerQueryInterface" ret="HRESULT" convention="__stdcall">
 
            IRpcStubBuffer * This,
            void **ppv);
        
<fnptr name="DebugServerRelease" ret="void" convention="__stdcall">
 
            IRpcStubBuffer * This,
            void *pv);
        
        
    } IRpcStubBufferVtbl;

<struct name="IRpcStubBuffer">
<vptr>IRpcStubBufferVtbl *</vptr>
</struct>

    

 
extern const IID IID_IPSFactoryBuffer;
<struct name="IPSFactoryBufferVtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            IPSFactoryBuffer * This,
             const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            IPSFactoryBuffer * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            IPSFactoryBuffer * This);
        
<fnptr name="CreateProxy" ret="HRESULT" convention="__stdcall">
 
            IPSFactoryBuffer * This,
             IUnknown *pUnkOuter,
             const IID * const riid,
             IRpcProxyBuffer **ppProxy,
             void **ppv);
        
<fnptr name="CreateStub" ret="HRESULT" convention="__stdcall">
 
            IPSFactoryBuffer * This,
             const IID * const riid,
             IUnknown *pUnkServer,
             IRpcStubBuffer **ppStub);
        
        
    } IPSFactoryBufferVtbl;

<struct name="IPSFactoryBuffer">
<vptr>IPSFactoryBufferVtbl *</vptr>
</struct>

    
 
<struct name="SChannelHookCallInfo">
<field name="iid">IID</field>
<field name="cbSize">DWORD</field>
<field name="uCausality">GUID</field>
<field name="dwServerPid">DWORD</field>
<field name="iMethod">DWORD</field>
    void *pObject;
    } 	SChannelHookCallInfo;
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0041_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0041_v0_0_s_ifspec;
 
extern const IID IID_IChannelHook;
<struct name="IChannelHookVtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            IChannelHook * This,
             const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            IChannelHook * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            IChannelHook * This);
        
<fnptr name="ClientGetSize" ret="void" convention="__stdcall">
 
            IChannelHook * This,
             const GUID * const uExtent,
             const IID * const riid,
             ULONG *pDataSize);
        
<fnptr name="ClientFillBuffer" ret="void" convention="__stdcall">
 
            IChannelHook * This,
             const GUID * const uExtent,
             const IID * const riid,
             ULONG *pDataSize,
             void *pDataBuffer);
        
<fnptr name="ClientNotify" ret="void" convention="__stdcall">
 
            IChannelHook * This,
             const GUID * const uExtent,
             const IID * const riid,
             ULONG cbDataSize,
             void *pDataBuffer,
             DWORD lDataRep,
             HRESULT hrFault);
        
<fnptr name="ServerNotify" ret="void" convention="__stdcall">
 
            IChannelHook * This,
             const GUID * const uExtent,
             const IID * const riid,
             ULONG cbDataSize,
             void *pDataBuffer,
             DWORD lDataRep);
        
<fnptr name="ServerGetSize" ret="void" convention="__stdcall">
 
            IChannelHook * This,
             const GUID * const uExtent,
             const IID * const riid,
             HRESULT hrFault,
             ULONG *pDataSize);
        
<fnptr name="ServerFillBuffer" ret="void" convention="__stdcall">
 
            IChannelHook * This,
             const GUID * const uExtent,
             const IID * const riid,
             ULONG *pDataSize,
             void *pDataBuffer,
             HRESULT hrFault);
        
        
    } IChannelHookVtbl;

<struct name="IChannelHook">
<vptr>IChannelHookVtbl *</vptr>
</struct>

    

 
extern const FMTID FMTID_SummaryInformation;

extern const FMTID FMTID_DocSummaryInformation;

extern const FMTID FMTID_UserDefinedProperties;

extern const FMTID FMTID_DiscardableInformation;

extern const FMTID FMTID_ImageSummaryInformation;

extern const FMTID FMTID_AudioSummaryInformation;

extern const FMTID FMTID_VideoSummaryInformation;

extern const FMTID FMTID_MediaFileSummaryInformation;
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0042_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0042_v0_0_s_ifspec;
 

<struct name="tagSOLE_AUTHENTICATION_SERVICE">
<field name="dwAuthnSvc">DWORD</field>
<field name="dwAuthzSvc">DWORD</field>
    OLECHAR *pPrincipalName;
    HRESULT hr;
    } 	SOLE_AUTHENTICATION_SERVICE;

typedef SOLE_AUTHENTICATION_SERVICE *PSOLE_AUTHENTICATION_SERVICE;

typedef 
enum tagEOLE_AUTHENTICATION_CAPABILITIES
    {	EOAC_NONE	= 0,
	EOAC_MUTUAL_AUTH	= 0x1,
	EOAC_STATIC_CLOAKING	= 0x20,
	EOAC_DYNAMIC_CLOAKING	= 0x40,
	EOAC_ANY_AUTHORITY	= 0x80,
	EOAC_MAKE_FULLSIC	= 0x100,
	EOAC_DEFAULT	= 0x800,
	EOAC_SECURE_REFS	= 0x2,
	EOAC_ACCESS_CONTROL	= 0x4,
	EOAC_APPID	= 0x8,
	EOAC_DYNAMIC	= 0x10,
	EOAC_REQUIRE_FULLSIC	= 0x200,
	EOAC_AUTO_IMPERSONATE	= 0x400,
	EOAC_NO_CUSTOM_MARSHAL	= 0x2000,
	EOAC_DISABLE_AAA	= 0x1000
    } 	EOLE_AUTHENTICATION_CAPABILITIES;
<struct name="tagSOLE_AUTHENTICATION_INFO">
<field name="dwAuthnSvc">DWORD</field>
<field name="dwAuthzSvc">DWORD</field>
    void *pAuthInfo;
    } 	SOLE_AUTHENTICATION_INFO;

<typedef name="PSOLE_AUTHENTICATION_INFO">tagSOLE_AUTHENTICATION_INFO *</typedef>

<struct name="tagSOLE_AUTHENTICATION_LIST">
<field name="cAuthInfo">DWORD</field>
    SOLE_AUTHENTICATION_INFO *aAuthInfo;
    } 	SOLE_AUTHENTICATION_LIST;

<typedef name="PSOLE_AUTHENTICATION_LIST">tagSOLE_AUTHENTICATION_LIST *</typedef>
extern const IID IID_IClientSecurity;
<struct name="IClientSecurityVtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            IClientSecurity * This,
             const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            IClientSecurity * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            IClientSecurity * This);
        
<fnptr name="QueryBlanket" ret="HRESULT" convention="__stdcall">
 
            IClientSecurity * This,
             IUnknown *pProxy,
             DWORD *pAuthnSvc,
             DWORD *pAuthzSvc,
             
              OLECHAR **pServerPrincName,
             DWORD *pAuthnLevel,
             DWORD *pImpLevel,
             void **pAuthInfo,
             DWORD *pCapabilites);
        
<fnptr name="SetBlanket" ret="HRESULT" convention="__stdcall">
 
            IClientSecurity * This,
             IUnknown *pProxy,
             DWORD dwAuthnSvc,
             DWORD dwAuthzSvc,
             
              OLECHAR *pServerPrincName,
             DWORD dwAuthnLevel,
             DWORD dwImpLevel,
             void *pAuthInfo,
             DWORD dwCapabilities);
        
<fnptr name="CopyProxy" ret="HRESULT" convention="__stdcall">
 
            IClientSecurity * This,
             IUnknown *pProxy,
             IUnknown **ppCopy);
        
        
    } IClientSecurityVtbl;

<struct name="IClientSecurity">
<vptr>IClientSecurityVtbl *</vptr>
</struct>

    

 
extern const IID IID_IServerSecurity;
<struct name="IServerSecurityVtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            IServerSecurity * This,
             const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            IServerSecurity * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            IServerSecurity * This);
        
<fnptr name="QueryBlanket" ret="HRESULT" convention="__stdcall">
 
            IServerSecurity * This,
             DWORD *pAuthnSvc,
             DWORD *pAuthzSvc,
             
              OLECHAR **pServerPrincName,
             DWORD *pAuthnLevel,
             DWORD *pImpLevel,
             void **pPrivs,
             DWORD *pCapabilities);
        
<fnptr name="ImpersonateClient" ret="HRESULT" convention="__stdcall">
 
            IServerSecurity * This);
        
<fnptr name="RevertToSelf" ret="HRESULT" convention="__stdcall">
 
            IServerSecurity * This);
        
<fnptr name="IsImpersonating" ret="BOOL" convention="__stdcall">
 
            IServerSecurity * This);
        
        
    } IServerSecurityVtbl;

<struct name="IServerSecurity">
<vptr>IServerSecurityVtbl *</vptr>
</struct>

    

 
extern const IID IID_IClassActivator;
<struct name="IClassActivatorVtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            IClassActivator * This,
              const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            IClassActivator * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            IClassActivator * This);
        
<fnptr name="GetClassObject" ret="HRESULT" convention="__stdcall">
 
            IClassActivator * This,
              const IID * const rclsid,
             DWORD dwClassContext,
             LCID locale,
              const IID * const riid,
              void **ppv);
        
        
    } IClassActivatorVtbl;

<struct name="IClassActivator">
<vptr>IClassActivatorVtbl *</vptr>
</struct>

    
 
extern const IID IID_IRpcOptions;
<struct name="IRpcOptionsVtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            IRpcOptions * This,
             const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            IRpcOptions * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            IRpcOptions * This);
        
<fnptr name="Set" ret="HRESULT" convention="__stdcall">
 
            IRpcOptions * This,
             IUnknown *pPrx,
             DWORD dwProperty,
             ULONG_PTR dwValue);
        
<fnptr name="Query" ret="HRESULT" convention="__stdcall">
 
            IRpcOptions * This,
             IUnknown *pPrx,
             DWORD dwProperty,
             ULONG_PTR *pdwValue);
        
        
    } IRpcOptionsVtbl;

<struct name="IRpcOptions">
<vptr>IRpcOptionsVtbl *</vptr>
</struct>

    
 
enum __MIDL___MIDL_itf_objidl_0000_0046_0001
    {	COMBND_RPCTIMEOUT	= 0x1,
	COMBND_SERVER_LOCALITY	= 0x2
    } ;

enum __MIDL___MIDL_itf_objidl_0000_0046_0002
    {	SERVER_LOCALITY_PROCESS_LOCAL	= 0,
	SERVER_LOCALITY_MACHINE_LOCAL	= 1,
	SERVER_LOCALITY_REMOTE	= 2
    } ;

extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0046_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0046_v0_0_s_ifspec;
 
extern const IID IID_IFillLockBytes;
<struct name="IFillLockBytesVtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            IFillLockBytes * This,
              const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            IFillLockBytes * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            IFillLockBytes * This);
        
<fnptr name="FillAppend" ret="HRESULT" convention="__stdcall">
 
            IFillLockBytes * This,
             const void *pv,
             ULONG cb,
             ULONG *pcbWritten);
        
<fnptr name="FillAt" ret="HRESULT" convention="__stdcall">
 
            IFillLockBytes * This,
             ULARGE_INTEGER ulOffset,
             const void *pv,
             ULONG cb,
             ULONG *pcbWritten);
        
<fnptr name="SetFillSize" ret="HRESULT" convention="__stdcall">
 
            IFillLockBytes * This,
             ULARGE_INTEGER ulSize);
        
<fnptr name="Terminate" ret="HRESULT" convention="__stdcall">
 
            IFillLockBytes * This,
             BOOL bCanceled);
        
        
    } IFillLockBytesVtbl;

<struct name="IFillLockBytes">
<vptr>IFillLockBytesVtbl *</vptr>
</struct>

    

<function name="IFillLockBytes_RemoteFillAppend_Proxy" ret="HRESULT" convention="__stdcall"> 
    IFillLockBytes * This,
      const byte *pv,
     ULONG cb,
      ULONG *pcbWritten);
<function name="IFillLockBytes_RemoteFillAppend_Stub" ret="void" convention="__stdcall">

    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
<function name="IFillLockBytes_RemoteFillAt_Proxy" ret="HRESULT" convention="__stdcall"> 
    IFillLockBytes * This,
     ULARGE_INTEGER ulOffset,
      const byte *pv,
     ULONG cb,
      ULONG *pcbWritten);
<function name="IFillLockBytes_RemoteFillAt_Stub" ret="void" convention="__stdcall">

    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
 
extern const IID IID_IProgressNotify;
<struct name="IProgressNotifyVtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            IProgressNotify * This,
              const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            IProgressNotify * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            IProgressNotify * This);
        
<fnptr name="OnProgress" ret="HRESULT" convention="__stdcall">
 
            IProgressNotify * This,
             DWORD dwProgressCurrent,
             DWORD dwProgressMaximum,
             BOOL fAccurate,
             BOOL fOwner);
        
        
    } IProgressNotifyVtbl;

<struct name="IProgressNotify">
<vptr>IProgressNotifyVtbl *</vptr>
</struct>

    
 

<struct name="tagStorageLayout">
<field name="LayoutType">DWORD</field>
    OLECHAR *pwcsElementName;
    LARGE_INTEGER cOffset;
    LARGE_INTEGER cBytes;
    } 	StorageLayout;
extern const IID IID_ILayoutStorage;
<struct name="ILayoutStorageVtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            ILayoutStorage * This,
             const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            ILayoutStorage * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            ILayoutStorage * This);
        
<fnptr name="LayoutScript" ret="HRESULT" convention="__stdcall">
 
            ILayoutStorage * This,
             StorageLayout *pStorageLayout,
             DWORD nEntries,
             DWORD glfInterleavedFlag);
        
<fnptr name="BeginMonitor" ret="HRESULT" convention="__stdcall">
 
            ILayoutStorage * This);
        
<fnptr name="EndMonitor" ret="HRESULT" convention="__stdcall">
 
            ILayoutStorage * This);
        
<fnptr name="ReLayoutDocfile" ret="HRESULT" convention="__stdcall">
 
            ILayoutStorage * This,
             
              OLECHAR *pwcsNewDfName);
        
<fnptr name="ReLayoutDocfileOnILockBytes" ret="HRESULT" convention="__stdcall">
 
            ILayoutStorage * This,
             ILockBytes *pILockBytes);
        
        
    } ILayoutStorageVtbl;

<struct name="ILayoutStorage">
<vptr>ILayoutStorageVtbl *</vptr>
</struct>

    
 
extern const IID IID_IBlockingLock;
<struct name="IBlockingLockVtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            IBlockingLock * This,
              const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            IBlockingLock * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            IBlockingLock * This);
        
<fnptr name="Lock" ret="HRESULT" convention="__stdcall">
 
            IBlockingLock * This,
             DWORD dwTimeout);
        
<fnptr name="Unlock" ret="HRESULT" convention="__stdcall">
 
            IBlockingLock * This);
        
        
    } IBlockingLockVtbl;

<struct name="IBlockingLock">
<vptr>IBlockingLockVtbl *</vptr>
</struct>

    

 
extern const IID IID_ITimeAndNoticeControl;
<struct name="ITimeAndNoticeControlVtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            ITimeAndNoticeControl * This,
              const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            ITimeAndNoticeControl * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            ITimeAndNoticeControl * This);
        
<fnptr name="SuppressChanges" ret="HRESULT" convention="__stdcall">
 
            ITimeAndNoticeControl * This,
             DWORD res1,
             DWORD res2);
        
        
    } ITimeAndNoticeControlVtbl;

<struct name="ITimeAndNoticeControl">
<vptr>ITimeAndNoticeControlVtbl *</vptr>
</struct>

    
 
extern const IID IID_IOplockStorage;
<struct name="IOplockStorageVtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            IOplockStorage * This,
              const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            IOplockStorage * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            IOplockStorage * This);
        
<fnptr name="CreateStorageEx" ret="HRESULT" convention="__stdcall">
 
            IOplockStorage * This,
              LPCWSTR pwcsName,
             DWORD grfMode,
             DWORD stgfmt,
             DWORD grfAttrs,
              const IID * const riid,
              void **ppstgOpen);
        
<fnptr name="OpenStorageEx" ret="HRESULT" convention="__stdcall">
 
            IOplockStorage * This,
              LPCWSTR pwcsName,
             DWORD grfMode,
             DWORD stgfmt,
             DWORD grfAttrs,
              const IID * const riid,
              void **ppstgOpen);
        
        
    } IOplockStorageVtbl;

<struct name="IOplockStorage">
<vptr>IOplockStorageVtbl *</vptr>
</struct>

    

 

typedef    ISurrogate *LPSURROGATE;
extern const IID IID_ISurrogate;
<struct name="ISurrogateVtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            ISurrogate * This,
              const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            ISurrogate * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            ISurrogate * This);
        
<fnptr name="LoadDllServer" ret="HRESULT" convention="__stdcall">
 
            ISurrogate * This,
              const IID * const Clsid);
        
<fnptr name="FreeSurrogate" ret="HRESULT" convention="__stdcall">
 
            ISurrogate * This);
        
        
    } ISurrogateVtbl;

<struct name="ISurrogate">
<vptr>ISurrogateVtbl *</vptr>
</struct>

    

 

typedef  IGlobalInterfaceTable *LPGLOBALINTERFACETABLE;
extern const IID IID_IGlobalInterfaceTable;
<struct name="IGlobalInterfaceTableVtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            IGlobalInterfaceTable * This,
             const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            IGlobalInterfaceTable * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            IGlobalInterfaceTable * This);
        
<fnptr name="RegisterInterfaceInGlobal" ret="HRESULT" convention="__stdcall">
 
            IGlobalInterfaceTable * This,
             IUnknown *pUnk,
             const IID * const riid,
             DWORD *pdwCookie);
        
<fnptr name="RevokeInterfaceFromGlobal" ret="HRESULT" convention="__stdcall">
 
            IGlobalInterfaceTable * This,
             DWORD dwCookie);
        
<fnptr name="GetInterfaceFromGlobal" ret="HRESULT" convention="__stdcall">
 
            IGlobalInterfaceTable * This,
             DWORD dwCookie,
             const IID * const riid,
             void **ppv);
        
        
    } IGlobalInterfaceTableVtbl;

<struct name="IGlobalInterfaceTable">
<vptr>IGlobalInterfaceTableVtbl *</vptr>
</struct>

    

 
extern const IID IID_IDirectWriterLock;
<struct name="IDirectWriterLockVtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            IDirectWriterLock * This,
              const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            IDirectWriterLock * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            IDirectWriterLock * This);
        
<fnptr name="WaitForWriteAccess" ret="HRESULT" convention="__stdcall">
 
            IDirectWriterLock * This,
             DWORD dwTimeout);
        
<fnptr name="ReleaseWriteAccess" ret="HRESULT" convention="__stdcall">
 
            IDirectWriterLock * This);
        
<fnptr name="HaveWriteAccess" ret="HRESULT" convention="__stdcall">
 
            IDirectWriterLock * This);
        
        
    } IDirectWriterLockVtbl;

<struct name="IDirectWriterLock">
<vptr>IDirectWriterLockVtbl *</vptr>
</struct>

    

 
extern const IID IID_ISynchronize;
<struct name="ISynchronizeVtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            ISynchronize * This,
              const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            ISynchronize * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            ISynchronize * This);
        
<fnptr name="Wait" ret="HRESULT" convention="__stdcall">
 
            ISynchronize * This,
             DWORD dwFlags,
             DWORD dwMilliseconds);
        
<fnptr name="Signal" ret="HRESULT" convention="__stdcall">
 
            ISynchronize * This);
        
<fnptr name="Reset" ret="HRESULT" convention="__stdcall">
 
            ISynchronize * This);
        
        
    } ISynchronizeVtbl;

<struct name="ISynchronize">
<vptr>ISynchronizeVtbl *</vptr>
</struct>

    

 
extern const IID IID_ISynchronizeHandle;
<struct name="ISynchronizeHandleVtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            ISynchronizeHandle * This,
             const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            ISynchronizeHandle * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            ISynchronizeHandle * This);
        
<fnptr name="GetHandle" ret="HRESULT" convention="__stdcall">
 
            ISynchronizeHandle * This,
             HANDLE *ph);
        
        
    } ISynchronizeHandleVtbl;

<struct name="ISynchronizeHandle">
<vptr>ISynchronizeHandleVtbl *</vptr>
</struct>

    
 
extern const IID IID_ISynchronizeEvent;
<struct name="ISynchronizeEventVtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            ISynchronizeEvent * This,
             const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            ISynchronizeEvent * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            ISynchronizeEvent * This);
        
<fnptr name="GetHandle" ret="HRESULT" convention="__stdcall">
 
            ISynchronizeEvent * This,
             HANDLE *ph);
        
<fnptr name="SetEventHandle" ret="HRESULT" convention="__stdcall">
 
            ISynchronizeEvent * This,
             HANDLE *ph);
        
        
    } ISynchronizeEventVtbl;

<struct name="ISynchronizeEvent">
<vptr>ISynchronizeEventVtbl *</vptr>
</struct>

    

 
extern const IID IID_ISynchronizeContainer;
<struct name="ISynchronizeContainerVtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            ISynchronizeContainer * This,
             const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            ISynchronizeContainer * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            ISynchronizeContainer * This);
        
<fnptr name="AddSynchronize" ret="HRESULT" convention="__stdcall">
 
            ISynchronizeContainer * This,
             ISynchronize *pSync);
        
<fnptr name="WaitMultiple" ret="HRESULT" convention="__stdcall">
 
            ISynchronizeContainer * This,
             DWORD dwFlags,
             DWORD dwTimeOut,
             ISynchronize **ppSync);
        
        
    } ISynchronizeContainerVtbl;

<struct name="ISynchronizeContainer">
<vptr>ISynchronizeContainerVtbl *</vptr>
</struct>

    

 
extern const IID IID_ISynchronizeMutex;
<struct name="ISynchronizeMutexVtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            ISynchronizeMutex * This,
             const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            ISynchronizeMutex * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            ISynchronizeMutex * This);
        
<fnptr name="Wait" ret="HRESULT" convention="__stdcall">
 
            ISynchronizeMutex * This,
             DWORD dwFlags,
             DWORD dwMilliseconds);
        
<fnptr name="Signal" ret="HRESULT" convention="__stdcall">
 
            ISynchronizeMutex * This);
        
<fnptr name="Reset" ret="HRESULT" convention="__stdcall">
 
            ISynchronizeMutex * This);
        
<fnptr name="ReleaseMutex" ret="HRESULT" convention="__stdcall">
 
            ISynchronizeMutex * This);
        
        
    } ISynchronizeMutexVtbl;

<struct name="ISynchronizeMutex">
<vptr>ISynchronizeMutexVtbl *</vptr>
</struct>

    
 

typedef  ICancelMethodCalls *LPCANCELMETHODCALLS;
extern const IID IID_ICancelMethodCalls;
<struct name="ICancelMethodCallsVtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            ICancelMethodCalls * This,
             const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            ICancelMethodCalls * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            ICancelMethodCalls * This);
        
<fnptr name="Cancel" ret="HRESULT" convention="__stdcall">
 
            ICancelMethodCalls * This,
             ULONG ulSeconds);
        
<fnptr name="TestCancel" ret="HRESULT" convention="__stdcall">
 
            ICancelMethodCalls * This);
        
        
    } ICancelMethodCallsVtbl;

<struct name="ICancelMethodCalls">
<vptr>ICancelMethodCallsVtbl *</vptr>
</struct>

    

 

typedef 
enum tagDCOM_CALL_STATE
    {	DCOM_NONE	= 0,
	DCOM_CALL_COMPLETE	= 0x1,
	DCOM_CALL_CANCELED	= 0x2
    } 	DCOM_CALL_STATE;
extern const IID IID_IAsyncManager;
<struct name="IAsyncManagerVtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            IAsyncManager * This,
             const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            IAsyncManager * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            IAsyncManager * This);
        
<fnptr name="CompleteCall" ret="HRESULT" convention="__stdcall">
 
            IAsyncManager * This,
             HRESULT Result);
        
<fnptr name="GetCallContext" ret="HRESULT" convention="__stdcall">
 
            IAsyncManager * This,
             const IID * const riid,
             void **pInterface);
        
<fnptr name="GetState" ret="HRESULT" convention="__stdcall">
 
            IAsyncManager * This,
             ULONG *pulStateFlags);
        
        
    } IAsyncManagerVtbl;

<struct name="IAsyncManager">
<vptr>IAsyncManagerVtbl *</vptr>
</struct>

    

 
extern const IID IID_ICallFactory;
<struct name="ICallFactoryVtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            ICallFactory * This,
             const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            ICallFactory * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            ICallFactory * This);
        
<fnptr name="CreateCall" ret="HRESULT" convention="__stdcall">
 
            ICallFactory * This,
             const IID * const riid,
             IUnknown *pCtrlUnk,
             const IID * const riid2,
             IUnknown **ppv);
        
        
    } ICallFactoryVtbl;

<struct name="ICallFactory">
<vptr>ICallFactoryVtbl *</vptr>
</struct>

    
 
extern const IID IID_IRpcHelper;
<struct name="IRpcHelperVtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            IRpcHelper * This,
             const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            IRpcHelper * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            IRpcHelper * This);
        
<fnptr name="GetDCOMProtocolVersion" ret="HRESULT" convention="__stdcall">
 
            IRpcHelper * This,
             DWORD *pComVersion);
        
<fnptr name="GetIIDFromOBJREF" ret="HRESULT" convention="__stdcall">
 
            IRpcHelper * This,
             void *pObjRef,
             IID **piid);
        
        
    } IRpcHelperVtbl;

<struct name="IRpcHelper">
<vptr>IRpcHelperVtbl *</vptr>
</struct>

    

 
extern const IID IID_IReleaseMarshalBuffers;
<struct name="IReleaseMarshalBuffersVtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            IReleaseMarshalBuffers * This,
             const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            IReleaseMarshalBuffers * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            IReleaseMarshalBuffers * This);
        
<fnptr name="ReleaseMarshalBuffer" ret="HRESULT" convention="__stdcall">
 
            IReleaseMarshalBuffers * This,
             RPCOLEMESSAGE *pMsg,
             DWORD dwFlags,
             IUnknown *pChnl);
        
        
    } IReleaseMarshalBuffersVtbl;

<struct name="IReleaseMarshalBuffers">
<vptr>IReleaseMarshalBuffersVtbl *</vptr>
</struct>

    
 
extern const IID IID_IWaitMultiple;

<struct name="IWaitMultipleVtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            IWaitMultiple * This,
             const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            IWaitMultiple * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            IWaitMultiple * This);
        
<fnptr name="WaitMultiple" ret="HRESULT" convention="__stdcall">
 
            IWaitMultiple * This,
             DWORD timeout,
             ISynchronize **pSync);
        
<fnptr name="AddSynchronize" ret="HRESULT" convention="__stdcall">
 
            IWaitMultiple * This,
             ISynchronize *pSync);
        
        
    } IWaitMultipleVtbl;

<struct name="IWaitMultiple">
<vptr>IWaitMultipleVtbl *</vptr>
</struct>

    
 
extern const IID IID_IUrlMon;
<struct name="IUrlMonVtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            IUrlMon * This,
              const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            IUrlMon * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            IUrlMon * This);
        
<fnptr name="AsyncGetClassBits" ret="HRESULT" convention="__stdcall">
 
            IUrlMon * This,
              const IID * const rclsid,
              LPCWSTR pszTYPE,
              LPCWSTR pszExt,
             DWORD dwFileVersionMS,
             DWORD dwFileVersionLS,
              LPCWSTR pszCodeBase,
              IBindCtx *pbc,
             DWORD dwClassContext,
              const IID * const riid,
             DWORD flags);
        
        
    } IUrlMonVtbl;

<struct name="IUrlMon">
<vptr>IUrlMonVtbl *</vptr>
</struct>

    
 
extern const IID IID_IForegroundTransfer;

<struct name="IForegroundTransferVtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            IForegroundTransfer * This,
             const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            IForegroundTransfer * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            IForegroundTransfer * This);
        
<fnptr name="AllowForegroundTransfer" ret="HRESULT" convention="__stdcall">
 
            IForegroundTransfer * This,
             void *lpvReserved);
        
        
    } IForegroundTransferVtbl;

<struct name="IForegroundTransfer">
<vptr>IForegroundTransferVtbl *</vptr>
</struct>

    
 

typedef  IAddrTrackingControl *LPADDRTRACKINGCONTROL;
extern const IID IID_IAddrTrackingControl;
<struct name="IAddrTrackingControlVtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            IAddrTrackingControl * This,
             const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            IAddrTrackingControl * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            IAddrTrackingControl * This);
        
<fnptr name="EnableCOMDynamicAddrTracking" ret="HRESULT" convention="__stdcall">
 
            IAddrTrackingControl * This);
        
<fnptr name="DisableCOMDynamicAddrTracking" ret="HRESULT" convention="__stdcall">
 
            IAddrTrackingControl * This);
        
        
    } IAddrTrackingControlVtbl;

<struct name="IAddrTrackingControl">
<vptr>IAddrTrackingControlVtbl *</vptr>
</struct>

    
 

typedef  IAddrExclusionControl *LPADDREXCLUSIONCONTROL;
extern const IID IID_IAddrExclusionControl;

<struct name="IAddrExclusionControlVtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            IAddrExclusionControl * This,
             const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            IAddrExclusionControl * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            IAddrExclusionControl * This);
        
<fnptr name="GetCurrentAddrExclusionList" ret="HRESULT" convention="__stdcall">
 
            IAddrExclusionControl * This,
             const IID * const riid,
             void **ppEnumerator);
        
<fnptr name="UpdateAddrExclusionList" ret="HRESULT" convention="__stdcall">
 
            IAddrExclusionControl * This,
             IUnknown *pEnumerator);
        
        
    } IAddrExclusionControlVtbl;

<struct name="IAddrExclusionControl">
<vptr>IAddrExclusionControlVtbl *</vptr>
</struct>

    
 
extern const IID IID_IPipeByte;
<struct name="IPipeByteVtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            IPipeByte * This,
              const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            IPipeByte * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            IPipeByte * This);
        
<fnptr name="Pull" ret="HRESULT" convention="__stdcall">
 
            IPipeByte * This,
              BYTE *buf,
             ULONG cRequest,
              ULONG *pcReturned);
        
<fnptr name="Push" ret="HRESULT" convention="__stdcall">
 
            IPipeByte * This,
              BYTE *buf,
             ULONG cSent);
        
        
    } IPipeByteVtbl;

<struct name="IPipeByte">
<vptr>IPipeByteVtbl *</vptr>
</struct>

    
 
extern const IID IID_AsyncIPipeByte;

<struct name="AsyncIPipeByteVtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            AsyncIPipeByte * This,
              const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            AsyncIPipeByte * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            AsyncIPipeByte * This);
        
<fnptr name="Begin_Pull" ret="HRESULT" convention="__stdcall">
 
            AsyncIPipeByte * This,
             ULONG cRequest);
        
<fnptr name="Finish_Pull" ret="HRESULT" convention="__stdcall">
 
            AsyncIPipeByte * This,
              BYTE *buf,
              ULONG *pcReturned);
        
<fnptr name="Begin_Push" ret="HRESULT" convention="__stdcall">
 
            AsyncIPipeByte * This,
              BYTE *buf,
             ULONG cSent);
        
<fnptr name="Finish_Push" ret="HRESULT" convention="__stdcall">
 
            AsyncIPipeByte * This);
        
        
    } AsyncIPipeByteVtbl;

<struct name="AsyncIPipeByte">
<vptr>AsyncIPipeByteVtbl *</vptr>
</struct>

    
 
extern const IID IID_IPipeLong;
<struct name="IPipeLongVtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            IPipeLong * This,
              const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            IPipeLong * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            IPipeLong * This);
        
<fnptr name="Pull" ret="HRESULT" convention="__stdcall">
 
            IPipeLong * This,
              LONG *buf,
             ULONG cRequest,
              ULONG *pcReturned);
        
<fnptr name="Push" ret="HRESULT" convention="__stdcall">
 
            IPipeLong * This,
              LONG *buf,
             ULONG cSent);
        
        
    } IPipeLongVtbl;

<struct name="IPipeLong">
<vptr>IPipeLongVtbl *</vptr>
</struct>

    
 
extern const IID IID_AsyncIPipeLong;

<struct name="AsyncIPipeLongVtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            AsyncIPipeLong * This,
              const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            AsyncIPipeLong * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            AsyncIPipeLong * This);
        
<fnptr name="Begin_Pull" ret="HRESULT" convention="__stdcall">
 
            AsyncIPipeLong * This,
             ULONG cRequest);
        
<fnptr name="Finish_Pull" ret="HRESULT" convention="__stdcall">
 
            AsyncIPipeLong * This,
              LONG *buf,
              ULONG *pcReturned);
        
<fnptr name="Begin_Push" ret="HRESULT" convention="__stdcall">
 
            AsyncIPipeLong * This,
              LONG *buf,
             ULONG cSent);
        
<fnptr name="Finish_Push" ret="HRESULT" convention="__stdcall">
 
            AsyncIPipeLong * This);
        
        
    } AsyncIPipeLongVtbl;

<struct name="AsyncIPipeLong">
<vptr>AsyncIPipeLongVtbl *</vptr>
</struct>

    
 
extern const IID IID_IPipeDouble;
<struct name="IPipeDoubleVtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            IPipeDouble * This,
              const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            IPipeDouble * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            IPipeDouble * This);
        
<fnptr name="Pull" ret="HRESULT" convention="__stdcall">
 
            IPipeDouble * This,
              DOUBLE *buf,
             ULONG cRequest,
              ULONG *pcReturned);
        
<fnptr name="Push" ret="HRESULT" convention="__stdcall">
 
            IPipeDouble * This,
              DOUBLE *buf,
             ULONG cSent);
        
        
    } IPipeDoubleVtbl;

<struct name="IPipeDouble">
<vptr>IPipeDoubleVtbl *</vptr>
</struct>

    
 
extern const IID IID_AsyncIPipeDouble;

<struct name="AsyncIPipeDoubleVtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            AsyncIPipeDouble * This,
              const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            AsyncIPipeDouble * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            AsyncIPipeDouble * This);
        
<fnptr name="Begin_Pull" ret="HRESULT" convention="__stdcall">
 
            AsyncIPipeDouble * This,
             ULONG cRequest);
        
<fnptr name="Finish_Pull" ret="HRESULT" convention="__stdcall">
 
            AsyncIPipeDouble * This,
              DOUBLE *buf,
              ULONG *pcReturned);
        
<fnptr name="Begin_Push" ret="HRESULT" convention="__stdcall">
 
            AsyncIPipeDouble * This,
              DOUBLE *buf,
             ULONG cSent);
        
<fnptr name="Finish_Push" ret="HRESULT" convention="__stdcall">
 
            AsyncIPipeDouble * This);
        
        
    } AsyncIPipeDoubleVtbl;

<struct name="AsyncIPipeDouble">
<vptr>AsyncIPipeDoubleVtbl *</vptr>
</struct>

    
 
extern const IID IID_IThumbnailExtractor;
<struct name="IThumbnailExtractorVtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            IThumbnailExtractor * This,
              const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            IThumbnailExtractor * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            IThumbnailExtractor * This);
        
<fnptr name="ExtractThumbnail" ret="HRESULT" convention="__stdcall">
 
            IThumbnailExtractor * This,
              IStorage *pStg,
             ULONG ulLength,
             ULONG ulHeight,
              ULONG *pulOutputLength,
              ULONG *pulOutputHeight,
              HBITMAP *phOutputBitmap);
        
<fnptr name="OnFileUpdated" ret="HRESULT" convention="__stdcall">
 
            IThumbnailExtractor * This,
              IStorage *pStg);
        
        
    } IThumbnailExtractorVtbl;

<struct name="IThumbnailExtractor">
<vptr>IThumbnailExtractorVtbl *</vptr>
</struct>

    
 
extern const IID IID_IDummyHICONIncluder;
<struct name="IDummyHICONIncluderVtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            IDummyHICONIncluder * This,
              const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            IDummyHICONIncluder * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            IDummyHICONIncluder * This);
        
<fnptr name="Dummy" ret="HRESULT" convention="__stdcall">
 
            IDummyHICONIncluder * This,
              HICON h1,
              HDC h2);
        
        
    } IDummyHICONIncluderVtbl;

<struct name="IDummyHICONIncluder">
<vptr>IDummyHICONIncluderVtbl *</vptr>
</struct>

    
 

typedef 
enum tagApplicationType
    {	ServerApplication	= 0,
	LibraryApplication	= ( ServerApplication + 1 ) 
    } 	ApplicationType;

typedef 
enum tagShutdownType
    {	IdleShutdown	= 0,
	ForcedShutdown	= ( IdleShutdown + 1 ) 
    } 	ShutdownType;
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0078_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0078_v0_0_s_ifspec;
 
extern const IID IID_IProcessLock;
<struct name="IProcessLockVtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            IProcessLock * This,
             const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            IProcessLock * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            IProcessLock * This);
        
<fnptr name="AddRefOnProcess" ret="ULONG" convention="__stdcall">
 
            IProcessLock * This);
        
<fnptr name="ReleaseRefOnProcess" ret="ULONG" convention="__stdcall">
 
            IProcessLock * This);
        
        
    } IProcessLockVtbl;

<struct name="IProcessLock">
<vptr>IProcessLockVtbl *</vptr>
</struct>

    
 
extern const IID IID_ISurrogateService;
<struct name="ISurrogateServiceVtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            ISurrogateService * This,
             const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            ISurrogateService * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            ISurrogateService * This);
        
<fnptr name="Init" ret="HRESULT" convention="__stdcall">
 
            ISurrogateService * This,
             const GUID * const rguidProcessID,
             IProcessLock *pProcessLock,
             BOOL *pfApplicationAware);
        
<fnptr name="ApplicationLaunch" ret="HRESULT" convention="__stdcall">
 
            ISurrogateService * This,
             const GUID * const rguidApplID,
             ApplicationType appType);
        
<fnptr name="ApplicationFree" ret="HRESULT" convention="__stdcall">
 
            ISurrogateService * This,
             const GUID * const rguidApplID);
        
<fnptr name="CatalogRefresh" ret="HRESULT" convention="__stdcall">
 
            ISurrogateService * This,
             ULONG ulReserved);
        
<fnptr name="ProcessShutdown" ret="HRESULT" convention="__stdcall">
 
            ISurrogateService * This,
             ShutdownType shutdownType);
        
        
    } ISurrogateServiceVtbl;

<struct name="ISurrogateService">
<vptr>ISurrogateServiceVtbl *</vptr>
</struct>

    
 

typedef 
enum _APTTYPE
    {	APTTYPE_CURRENT	= -1,
	APTTYPE_STA	= 0,
	APTTYPE_MTA	= 1,
	APTTYPE_NA	= 2,
	APTTYPE_MAINSTA	= 3
    } 	APTTYPE;

typedef 
enum _THDTYPE
    {	THDTYPE_BLOCKMESSAGES	= 0,
	THDTYPE_PROCESSMESSAGES	= 1
    } 	THDTYPE;

typedef DWORD APARTMENTID;
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0080_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0080_v0_0_s_ifspec;
 
extern const IID IID_IComThreadingInfo;
<struct name="IComThreadingInfoVtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            IComThreadingInfo * This,
             const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            IComThreadingInfo * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            IComThreadingInfo * This);
        
<fnptr name="GetCurrentApartmentType" ret="HRESULT" convention="__stdcall">
 
            IComThreadingInfo * This,
             APTTYPE *pAptType);
        
<fnptr name="GetCurrentThreadType" ret="HRESULT" convention="__stdcall">
 
            IComThreadingInfo * This,
             THDTYPE *pThreadType);
        
<fnptr name="GetCurrentLogicalThreadId" ret="HRESULT" convention="__stdcall">
 
            IComThreadingInfo * This,
             GUID *pguidLogicalThreadId);
        
<fnptr name="SetCurrentLogicalThreadId" ret="HRESULT" convention="__stdcall">
 
            IComThreadingInfo * This,
             const GUID * const rguid);
        
        
    } IComThreadingInfoVtbl;

<struct name="IComThreadingInfo">
<vptr>IComThreadingInfoVtbl *</vptr>
</struct>

    
 
extern const IID IID_IProcessInitControl;

<struct name="IProcessInitControlVtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            IProcessInitControl * This,
              const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            IProcessInitControl * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            IProcessInitControl * This);
        
<fnptr name="ResetInitializerTimeout" ret="HRESULT" convention="__stdcall">
 
            IProcessInitControl * This,
             DWORD dwSecondsRemaining);
        
        
    } IProcessInitControlVtbl;

<struct name="IProcessInitControl">
<vptr>IProcessInitControlVtbl *</vptr>
</struct>

    
 

extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0082_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0082_v0_0_s_ifspec;
 

typedef  IInitializeSpy *LPINITIALIZESPY;
extern const IID IID_IInitializeSpy;

<struct name="IInitializeSpyVtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            IInitializeSpy * This,
             const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            IInitializeSpy * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            IInitializeSpy * This);
        
<fnptr name="PreInitialize" ret="HRESULT" convention="__stdcall">
 
            IInitializeSpy * This,
             DWORD dwCoInit,
             DWORD dwCurThreadAptRefs);
        
<fnptr name="PostInitialize" ret="HRESULT" convention="__stdcall">
 
            IInitializeSpy * This,
             HRESULT hrCoInit,
             DWORD dwCoInit,
             DWORD dwNewThreadAptRefs);
        
<fnptr name="PreUninitialize" ret="HRESULT" convention="__stdcall">
 
            IInitializeSpy * This,
             DWORD dwCurThreadAptRefs);
        
<fnptr name="PostUninitialize" ret="HRESULT" convention="__stdcall">
 
            IInitializeSpy * This,
             DWORD dwNewThreadAptRefs);
        
        
    } IInitializeSpyVtbl;

<struct name="IInitializeSpy">
<vptr>IInitializeSpyVtbl *</vptr>
</struct>

    

 

#pragma warning(pop)
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0083_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0083_v0_0_s_ifspec;
<function name="ASYNC_STGMEDIUM_UserSize" ret="unsigned long" convention="__stdcall">
     unsigned long *, unsigned long            , ASYNC_STGMEDIUM * ); 
<function name="ASYNC_STGMEDIUM_UserMarshal" ret="unsigned char *" convention="__stdcall">
  unsigned long *, unsigned char *, ASYNC_STGMEDIUM * ); 
<function name="ASYNC_STGMEDIUM_UserUnmarshal" ret="unsigned char *" convention="__stdcall">
unsigned long *, unsigned char *, ASYNC_STGMEDIUM * ); 
<function name="ASYNC_STGMEDIUM_UserFree" ret="void" convention="__stdcall">
     unsigned long *, ASYNC_STGMEDIUM * ); 

<function name="CLIPFORMAT_UserSize" ret="unsigned long" convention="__stdcall">
     unsigned long *, unsigned long            , CLIPFORMAT * ); 
<function name="CLIPFORMAT_UserMarshal" ret="unsigned char *" convention="__stdcall">
  unsigned long *, unsigned char *, CLIPFORMAT * ); 
<function name="CLIPFORMAT_UserUnmarshal" ret="unsigned char *" convention="__stdcall">
unsigned long *, unsigned char *, CLIPFORMAT * ); 
<function name="CLIPFORMAT_UserFree" ret="void" convention="__stdcall">
     unsigned long *, CLIPFORMAT * ); 

<function name="FLAG_STGMEDIUM_UserSize" ret="unsigned long" convention="__stdcall">
     unsigned long *, unsigned long            , FLAG_STGMEDIUM * ); 
<function name="FLAG_STGMEDIUM_UserMarshal" ret="unsigned char *" convention="__stdcall">
  unsigned long *, unsigned char *, FLAG_STGMEDIUM * ); 
<function name="FLAG_STGMEDIUM_UserUnmarshal" ret="unsigned char *" convention="__stdcall">
unsigned long *, unsigned char *, FLAG_STGMEDIUM * ); 
<function name="FLAG_STGMEDIUM_UserFree" ret="void" convention="__stdcall">
     unsigned long *, FLAG_STGMEDIUM * ); 

<function name="HBITMAP_UserSize" ret="unsigned long" convention="__stdcall">
     unsigned long *, unsigned long            , HBITMAP * ); 
<function name="HBITMAP_UserMarshal" ret="unsigned char *" convention="__stdcall">
  unsigned long *, unsigned char *, HBITMAP * ); 
<function name="HBITMAP_UserUnmarshal" ret="unsigned char *" convention="__stdcall">
unsigned long *, unsigned char *, HBITMAP * ); 
<function name="HBITMAP_UserFree" ret="void" convention="__stdcall">
     unsigned long *, HBITMAP * ); 

<function name="HDC_UserSize" ret="unsigned long" convention="__stdcall">
     unsigned long *, unsigned long            , HDC * ); 
<function name="HDC_UserMarshal" ret="unsigned char *" convention="__stdcall">
  unsigned long *, unsigned char *, HDC * ); 
<function name="HDC_UserUnmarshal" ret="unsigned char *" convention="__stdcall">
unsigned long *, unsigned char *, HDC * ); 
<function name="HDC_UserFree" ret="void" convention="__stdcall">
     unsigned long *, HDC * ); 

<function name="HICON_UserSize" ret="unsigned long" convention="__stdcall">
     unsigned long *, unsigned long            , HICON * ); 
<function name="HICON_UserMarshal" ret="unsigned char *" convention="__stdcall">
  unsigned long *, unsigned char *, HICON * ); 
<function name="HICON_UserUnmarshal" ret="unsigned char *" convention="__stdcall">
unsigned long *, unsigned char *, HICON * ); 
<function name="HICON_UserFree" ret="void" convention="__stdcall">
     unsigned long *, HICON * ); 

<function name="SNB_UserSize" ret="unsigned long" convention="__stdcall">
     unsigned long *, unsigned long            , SNB * ); 
<function name="SNB_UserMarshal" ret="unsigned char *" convention="__stdcall">
  unsigned long *, unsigned char *, SNB * ); 
<function name="SNB_UserUnmarshal" ret="unsigned char *" convention="__stdcall">
unsigned long *, unsigned char *, SNB * ); 
<function name="SNB_UserFree" ret="void" convention="__stdcall">
     unsigned long *, SNB * ); 

<function name="STGMEDIUM_UserSize" ret="unsigned long" convention="__stdcall">
     unsigned long *, unsigned long            , STGMEDIUM * ); 
<function name="STGMEDIUM_UserMarshal" ret="unsigned char *" convention="__stdcall">
  unsigned long *, unsigned char *, STGMEDIUM * ); 
<function name="STGMEDIUM_UserUnmarshal" ret="unsigned char *" convention="__stdcall">
unsigned long *, unsigned char *, STGMEDIUM * ); 
<function name="STGMEDIUM_UserFree" ret="void" convention="__stdcall">
     unsigned long *, STGMEDIUM * ); 

<function name="ASYNC_STGMEDIUM_UserSize64" ret="unsigned long" convention="__stdcall">
     unsigned long *, unsigned long            , ASYNC_STGMEDIUM * ); 
<function name="ASYNC_STGMEDIUM_UserMarshal64" ret="unsigned char *" convention="__stdcall">
  unsigned long *, unsigned char *, ASYNC_STGMEDIUM * ); 
<function name="ASYNC_STGMEDIUM_UserUnmarshal64" ret="unsigned char *" convention="__stdcall">
unsigned long *, unsigned char *, ASYNC_STGMEDIUM * ); 
<function name="ASYNC_STGMEDIUM_UserFree64" ret="void" convention="__stdcall">
     unsigned long *, ASYNC_STGMEDIUM * ); 

<function name="CLIPFORMAT_UserSize64" ret="unsigned long" convention="__stdcall">
     unsigned long *, unsigned long            , CLIPFORMAT * ); 
<function name="CLIPFORMAT_UserMarshal64" ret="unsigned char *" convention="__stdcall">
  unsigned long *, unsigned char *, CLIPFORMAT * ); 
<function name="CLIPFORMAT_UserUnmarshal64" ret="unsigned char *" convention="__stdcall">
unsigned long *, unsigned char *, CLIPFORMAT * ); 
<function name="CLIPFORMAT_UserFree64" ret="void" convention="__stdcall">
     unsigned long *, CLIPFORMAT * ); 

<function name="FLAG_STGMEDIUM_UserSize64" ret="unsigned long" convention="__stdcall">
     unsigned long *, unsigned long            , FLAG_STGMEDIUM * ); 
<function name="FLAG_STGMEDIUM_UserMarshal64" ret="unsigned char *" convention="__stdcall">
  unsigned long *, unsigned char *, FLAG_STGMEDIUM * ); 
<function name="FLAG_STGMEDIUM_UserUnmarshal64" ret="unsigned char *" convention="__stdcall">
unsigned long *, unsigned char *, FLAG_STGMEDIUM * ); 
<function name="FLAG_STGMEDIUM_UserFree64" ret="void" convention="__stdcall">
     unsigned long *, FLAG_STGMEDIUM * ); 

<function name="HBITMAP_UserSize64" ret="unsigned long" convention="__stdcall">
     unsigned long *, unsigned long            , HBITMAP * ); 
<function name="HBITMAP_UserMarshal64" ret="unsigned char *" convention="__stdcall">
  unsigned long *, unsigned char *, HBITMAP * ); 
<function name="HBITMAP_UserUnmarshal64" ret="unsigned char *" convention="__stdcall">
unsigned long *, unsigned char *, HBITMAP * ); 
<function name="HBITMAP_UserFree64" ret="void" convention="__stdcall">
     unsigned long *, HBITMAP * ); 

<function name="HDC_UserSize64" ret="unsigned long" convention="__stdcall">
     unsigned long *, unsigned long            , HDC * ); 
<function name="HDC_UserMarshal64" ret="unsigned char *" convention="__stdcall">
  unsigned long *, unsigned char *, HDC * ); 
<function name="HDC_UserUnmarshal64" ret="unsigned char *" convention="__stdcall">
unsigned long *, unsigned char *, HDC * ); 
<function name="HDC_UserFree64" ret="void" convention="__stdcall">
     unsigned long *, HDC * ); 

<function name="HICON_UserSize64" ret="unsigned long" convention="__stdcall">
     unsigned long *, unsigned long            , HICON * ); 
<function name="HICON_UserMarshal64" ret="unsigned char *" convention="__stdcall">
  unsigned long *, unsigned char *, HICON * ); 
<function name="HICON_UserUnmarshal64" ret="unsigned char *" convention="__stdcall">
unsigned long *, unsigned char *, HICON * ); 
<function name="HICON_UserFree64" ret="void" convention="__stdcall">
     unsigned long *, HICON * ); 

<function name="SNB_UserSize64" ret="unsigned long" convention="__stdcall">
     unsigned long *, unsigned long            , SNB * ); 
<function name="SNB_UserMarshal64" ret="unsigned char *" convention="__stdcall">
  unsigned long *, unsigned char *, SNB * ); 
<function name="SNB_UserUnmarshal64" ret="unsigned char *" convention="__stdcall">
unsigned long *, unsigned char *, SNB * ); 
<function name="SNB_UserFree64" ret="void" convention="__stdcall">
     unsigned long *, SNB * ); 

<function name="STGMEDIUM_UserSize64" ret="unsigned long" convention="__stdcall">
     unsigned long *, unsigned long            , STGMEDIUM * ); 
<function name="STGMEDIUM_UserMarshal64" ret="unsigned char *" convention="__stdcall">
  unsigned long *, unsigned char *, STGMEDIUM * ); 
<function name="STGMEDIUM_UserUnmarshal64" ret="unsigned char *" convention="__stdcall">
unsigned long *, unsigned char *, STGMEDIUM * ); 
<function name="STGMEDIUM_UserFree64" ret="void" convention="__stdcall">
     unsigned long *, STGMEDIUM * ); 

<function name="IEnumUnknown_Next_Proxy" ret="HRESULT" convention="__stdcall"> 
    IEnumUnknown * This,
     ULONG celt,
     IUnknown **rgelt,
     ULONG *pceltFetched);
<function name="IEnumUnknown_Next_Stub" ret="HRESULT" convention="__stdcall"> 
    IEnumUnknown * This,
     ULONG celt,
      IUnknown **rgelt,
      ULONG *pceltFetched);

<function name="IBindCtx_SetBindOptions_Proxy" ret="HRESULT" convention="__stdcall"> 
    IBindCtx * This,
     BIND_OPTS *pbindopts);
<function name="IBindCtx_SetBindOptions_Stub" ret="HRESULT" convention="__stdcall"> 
    IBindCtx * This,
      BIND_OPTS2 *pbindopts);

<function name="IBindCtx_GetBindOptions_Proxy" ret="HRESULT" convention="__stdcall"> 
    IBindCtx * This,
     BIND_OPTS *pbindopts);
<function name="IBindCtx_GetBindOptions_Stub" ret="HRESULT" convention="__stdcall"> 
    IBindCtx * This,
      BIND_OPTS2 *pbindopts);

<function name="IEnumMoniker_Next_Proxy" ret="HRESULT" convention="__stdcall"> 
    IEnumMoniker * This,
     ULONG celt,
     IMoniker **rgelt,
     ULONG *pceltFetched);
<function name="IEnumMoniker_Next_Stub" ret="HRESULT" convention="__stdcall"> 
    IEnumMoniker * This,
     ULONG celt,
      IMoniker **rgelt,
      ULONG *pceltFetched);

<function name="IRunnableObject_IsRunning_Proxy" ret="BOOL" convention="__stdcall">
 
    IRunnableObject * This);
<function name="IRunnableObject_IsRunning_Stub" ret="HRESULT" convention="__stdcall"> 
    IRunnableObject * This);

<function name="IMoniker_BindToObject_Proxy" ret="HRESULT" convention="__stdcall"> 
    IMoniker * This,
     IBindCtx *pbc,
     IMoniker *pmkToLeft,
     const IID * const riidResult,
     void **ppvResult);
<function name="IMoniker_BindToObject_Stub" ret="HRESULT" convention="__stdcall"> 
    IMoniker * This,
      IBindCtx *pbc,
      IMoniker *pmkToLeft,
      const IID * const riidResult,
      IUnknown **ppvResult);

<function name="IMoniker_BindToStorage_Proxy" ret="HRESULT" convention="__stdcall"> 
    IMoniker * This,
     IBindCtx *pbc,
     IMoniker *pmkToLeft,
     const IID * const riid,
     void **ppvObj);
<function name="IMoniker_BindToStorage_Stub" ret="HRESULT" convention="__stdcall"> 
    IMoniker * This,
      IBindCtx *pbc,
      IMoniker *pmkToLeft,
      const IID * const riid,
      IUnknown **ppvObj);

<function name="IEnumString_Next_Proxy" ret="HRESULT" convention="__stdcall"> 
    IEnumString * This,
     ULONG celt,
     
      LPOLESTR *rgelt,
     ULONG *pceltFetched);
<function name="IEnumString_Next_Stub" ret="HRESULT" convention="__stdcall"> 
    IEnumString * This,
     ULONG celt,
      LPOLESTR *rgelt,
      ULONG *pceltFetched);

<function name="ISequentialStream_Read_Proxy" ret="HRESULT" convention="__stdcall"> 
    ISequentialStream * This,
     void *pv,
     ULONG cb,
     ULONG *pcbRead);
<function name="ISequentialStream_Read_Stub" ret="HRESULT" convention="__stdcall"> 
    ISequentialStream * This,
      byte *pv,
     ULONG cb,
      ULONG *pcbRead);

<function name="ISequentialStream_Write_Proxy" ret="HRESULT" convention="__stdcall"> 
    ISequentialStream * This,
     const void *pv,
     ULONG cb,
     ULONG *pcbWritten);
<function name="ISequentialStream_Write_Stub" ret="HRESULT" convention="__stdcall"> 
    ISequentialStream * This,
      const byte *pv,
     ULONG cb,
      ULONG *pcbWritten);

<function name="IStream_Seek_Proxy" ret="HRESULT" convention="__stdcall"> 
    IStream * This,
     LARGE_INTEGER dlibMove,
     DWORD dwOrigin,
     ULARGE_INTEGER *plibNewPosition);
<function name="IStream_Seek_Stub" ret="HRESULT" convention="__stdcall"> 
    IStream * This,
     LARGE_INTEGER dlibMove,
     DWORD dwOrigin,
      ULARGE_INTEGER *plibNewPosition);

<function name="IStream_CopyTo_Proxy" ret="HRESULT" convention="__stdcall"> 
    IStream * This,
     IStream *pstm,
     ULARGE_INTEGER cb,
     ULARGE_INTEGER *pcbRead,
     ULARGE_INTEGER *pcbWritten);
<function name="IStream_CopyTo_Stub" ret="HRESULT" convention="__stdcall"> 
    IStream * This,
      IStream *pstm,
     ULARGE_INTEGER cb,
      ULARGE_INTEGER *pcbRead,
      ULARGE_INTEGER *pcbWritten);

<function name="IEnumSTATSTG_Next_Proxy" ret="HRESULT" convention="__stdcall"> 
    IEnumSTATSTG * This,
     ULONG celt,
     STATSTG *rgelt,
     ULONG *pceltFetched);
<function name="IEnumSTATSTG_Next_Stub" ret="HRESULT" convention="__stdcall"> 
    IEnumSTATSTG * This,
     ULONG celt,
      STATSTG *rgelt,
      ULONG *pceltFetched);

<function name="IStorage_OpenStream_Proxy" ret="HRESULT" convention="__stdcall"> 
    IStorage * This,
     const OLECHAR *pwcsName,
     void *reserved1,
     DWORD grfMode,
     DWORD reserved2,
     IStream **ppstm);
<function name="IStorage_OpenStream_Stub" ret="HRESULT" convention="__stdcall"> 
    IStorage * This,
      const OLECHAR *pwcsName,
     unsigned long cbReserved1,
      byte *reserved1,
     DWORD grfMode,
     DWORD reserved2,
      IStream **ppstm);

<function name="IStorage_CopyTo_Proxy" ret="HRESULT" convention="__stdcall"> 
    IStorage * This,
     DWORD ciidExclude,
     const IID *rgiidExclude,
     SNB snbExclude,
     IStorage *pstgDest);
<function name="IStorage_CopyTo_Stub" ret="HRESULT" convention="__stdcall"> 
    IStorage * This,
     DWORD ciidExclude,
      const IID *rgiidExclude,
      SNB snbExclude,
      IStorage *pstgDest);

<function name="IStorage_EnumElements_Proxy" ret="HRESULT" convention="__stdcall"> 
    IStorage * This,
     DWORD reserved1,
     void *reserved2,
     DWORD reserved3,
     IEnumSTATSTG **ppenum);
<function name="IStorage_EnumElements_Stub" ret="HRESULT" convention="__stdcall"> 
    IStorage * This,
     DWORD reserved1,
     unsigned long cbReserved2,
      byte *reserved2,
     DWORD reserved3,
      IEnumSTATSTG **ppenum);

<function name="ILockBytes_ReadAt_Proxy" ret="HRESULT" convention="__stdcall"> 
    ILockBytes * This,
     ULARGE_INTEGER ulOffset,
     void *pv,
     ULONG cb,
     ULONG *pcbRead);
<function name="ILockBytes_ReadAt_Stub" ret="HRESULT" convention="__stdcall"> 
    ILockBytes * This,
     ULARGE_INTEGER ulOffset,
      byte *pv,
     ULONG cb,
      ULONG *pcbRead);

<function name="ILockBytes_WriteAt_Proxy" ret="HRESULT" convention="__stdcall"> 
    ILockBytes * This,
     ULARGE_INTEGER ulOffset,
     const void *pv,
     ULONG cb,
     ULONG *pcbWritten);
<function name="ILockBytes_WriteAt_Stub" ret="HRESULT" convention="__stdcall"> 
    ILockBytes * This,
     ULARGE_INTEGER ulOffset,
      const byte *pv,
     ULONG cb,
      ULONG *pcbWritten);

<function name="IEnumFORMATETC_Next_Proxy" ret="HRESULT" convention="__stdcall"> 
    IEnumFORMATETC * This,
     ULONG celt,
     FORMATETC *rgelt,
     ULONG *pceltFetched);
<function name="IEnumFORMATETC_Next_Stub" ret="HRESULT" convention="__stdcall"> 
    IEnumFORMATETC * This,
     ULONG celt,
      FORMATETC *rgelt,
      ULONG *pceltFetched);

<function name="IEnumSTATDATA_Next_Proxy" ret="HRESULT" convention="__stdcall"> 
    IEnumSTATDATA * This,
     ULONG celt,
     STATDATA *rgelt,
     ULONG *pceltFetched);
<function name="IEnumSTATDATA_Next_Stub" ret="HRESULT" convention="__stdcall"> 
    IEnumSTATDATA * This,
     ULONG celt,
      STATDATA *rgelt,
      ULONG *pceltFetched);

<function name="IAdviseSink_OnDataChange_Proxy" ret="void" convention="__stdcall">
 
    IAdviseSink * This,
     FORMATETC *pFormatetc,
     STGMEDIUM *pStgmed);
<function name="IAdviseSink_OnDataChange_Stub" ret="HRESULT" convention="__stdcall"> 
    IAdviseSink * This,
      FORMATETC *pFormatetc,
      ASYNC_STGMEDIUM *pStgmed);

<function name="IAdviseSink_OnViewChange_Proxy" ret="void" convention="__stdcall">
 
    IAdviseSink * This,
     DWORD dwAspect,
     LONG lindex);
<function name="IAdviseSink_OnViewChange_Stub" ret="HRESULT" convention="__stdcall"> 
    IAdviseSink * This,
     DWORD dwAspect,
     LONG lindex);

<function name="IAdviseSink_OnRename_Proxy" ret="void" convention="__stdcall">
 
    IAdviseSink * This,
     IMoniker *pmk);
<function name="IAdviseSink_OnRename_Stub" ret="HRESULT" convention="__stdcall"> 
    IAdviseSink * This,
      IMoniker *pmk);

<function name="IAdviseSink_OnSave_Proxy" ret="void" convention="__stdcall">
 
    IAdviseSink * This);
<function name="IAdviseSink_OnSave_Stub" ret="HRESULT" convention="__stdcall"> 
    IAdviseSink * This);

<function name="IAdviseSink_OnClose_Proxy" ret="void" convention="__stdcall">
 
    IAdviseSink * This);
<function name="IAdviseSink_OnClose_Stub" ret="HRESULT" convention="__stdcall"> 
    IAdviseSink * This);

<function name="IAdviseSink2_OnLinkSrcChange_Proxy" ret="void" convention="__stdcall">
 
    IAdviseSink2 * This,
     IMoniker *pmk);
<function name="IAdviseSink2_OnLinkSrcChange_Stub" ret="HRESULT" convention="__stdcall"> 
    IAdviseSink2 * This,
      IMoniker *pmk);

<function name="IDataObject_GetData_Proxy" ret="HRESULT" convention="__stdcall"> 
    IDataObject * This,
     FORMATETC *pformatetcIn,
     STGMEDIUM *pmedium);
<function name="IDataObject_GetData_Stub" ret="HRESULT" convention="__stdcall"> 
    IDataObject * This,
      FORMATETC *pformatetcIn,
      STGMEDIUM *pRemoteMedium);

<function name="IDataObject_GetDataHere_Proxy" ret="HRESULT" convention="__stdcall"> 
    IDataObject * This,
     FORMATETC *pformatetc,
     STGMEDIUM *pmedium);
<function name="IDataObject_GetDataHere_Stub" ret="HRESULT" convention="__stdcall"> 
    IDataObject * This,
      FORMATETC *pformatetc,
      STGMEDIUM *pRemoteMedium);

<function name="IDataObject_SetData_Proxy" ret="HRESULT" convention="__stdcall"> 
    IDataObject * This,
     FORMATETC *pformatetc,
     STGMEDIUM *pmedium,
     BOOL fRelease);
<function name="IDataObject_SetData_Stub" ret="HRESULT" convention="__stdcall"> 
    IDataObject * This,
      FORMATETC *pformatetc,
      FLAG_STGMEDIUM *pmedium,
     BOOL fRelease);

<function name="IFillLockBytes_FillAppend_Proxy" ret="HRESULT" convention="__stdcall"> 
    IFillLockBytes * This,
     const void *pv,
     ULONG cb,
     ULONG *pcbWritten);
<function name="IFillLockBytes_FillAppend_Stub" ret="HRESULT" convention="__stdcall"> 
    IFillLockBytes * This,
      const byte *pv,
     ULONG cb,
      ULONG *pcbWritten);

<function name="IFillLockBytes_FillAt_Proxy" ret="HRESULT" convention="__stdcall"> 
    IFillLockBytes * This,
     ULARGE_INTEGER ulOffset,
     const void *pv,
     ULONG cb,
     ULONG *pcbWritten);
<function name="IFillLockBytes_FillAt_Stub" ret="HRESULT" convention="__stdcall"> 
    IFillLockBytes * This,
     ULARGE_INTEGER ulOffset,
      const byte *pv,
     ULONG cb,
      ULONG *pcbWritten);

<function name="AsyncIAdviseSink_Begin_OnDataChange_Proxy" ret="void" convention="__stdcall">
 
    AsyncIAdviseSink * This,
     FORMATETC *pFormatetc,
     STGMEDIUM *pStgmed);
<function name="AsyncIAdviseSink_Begin_OnDataChange_Stub" ret="HRESULT" convention="__stdcall"> 
    AsyncIAdviseSink * This,
      FORMATETC *pFormatetc,
      ASYNC_STGMEDIUM *pStgmed);

<function name="AsyncIAdviseSink_Finish_OnDataChange_Proxy" ret="void" convention="__stdcall">
 
    AsyncIAdviseSink * This);
<function name="AsyncIAdviseSink_Finish_OnDataChange_Stub" ret="HRESULT" convention="__stdcall"> 
    AsyncIAdviseSink * This);

<function name="AsyncIAdviseSink_Begin_OnViewChange_Proxy" ret="void" convention="__stdcall">
 
    AsyncIAdviseSink * This,
     DWORD dwAspect,
     LONG lindex);
<function name="AsyncIAdviseSink_Begin_OnViewChange_Stub" ret="HRESULT" convention="__stdcall"> 
    AsyncIAdviseSink * This,
     DWORD dwAspect,
     LONG lindex);

<function name="AsyncIAdviseSink_Finish_OnViewChange_Proxy" ret="void" convention="__stdcall">
 
    AsyncIAdviseSink * This);
<function name="AsyncIAdviseSink_Finish_OnViewChange_Stub" ret="HRESULT" convention="__stdcall"> 
    AsyncIAdviseSink * This);

<function name="AsyncIAdviseSink_Begin_OnRename_Proxy" ret="void" convention="__stdcall">
 
    AsyncIAdviseSink * This,
     IMoniker *pmk);
<function name="AsyncIAdviseSink_Begin_OnRename_Stub" ret="HRESULT" convention="__stdcall"> 
    AsyncIAdviseSink * This,
      IMoniker *pmk);

<function name="AsyncIAdviseSink_Finish_OnRename_Proxy" ret="void" convention="__stdcall">
 
    AsyncIAdviseSink * This);
<function name="AsyncIAdviseSink_Finish_OnRename_Stub" ret="HRESULT" convention="__stdcall"> 
    AsyncIAdviseSink * This);

<function name="AsyncIAdviseSink_Begin_OnSave_Proxy" ret="void" convention="__stdcall">
 
    AsyncIAdviseSink * This);
<function name="AsyncIAdviseSink_Begin_OnSave_Stub" ret="HRESULT" convention="__stdcall"> 
    AsyncIAdviseSink * This);

<function name="AsyncIAdviseSink_Finish_OnSave_Proxy" ret="void" convention="__stdcall">
 
    AsyncIAdviseSink * This);
<function name="AsyncIAdviseSink_Finish_OnSave_Stub" ret="HRESULT" convention="__stdcall"> 
    AsyncIAdviseSink * This);

<function name="AsyncIAdviseSink_Begin_OnClose_Proxy" ret="void" convention="__stdcall">
 
    AsyncIAdviseSink * This);
<function name="AsyncIAdviseSink_Begin_OnClose_Stub" ret="HRESULT" convention="__stdcall"> 
    AsyncIAdviseSink * This);

<function name="AsyncIAdviseSink_Finish_OnClose_Proxy" ret="void" convention="__stdcall">
 
    AsyncIAdviseSink * This);
<function name="AsyncIAdviseSink_Finish_OnClose_Stub" ret="HRESULT" convention="__stdcall"> 
    AsyncIAdviseSink * This);

<function name="AsyncIAdviseSink2_Begin_OnLinkSrcChange_Proxy" ret="void" convention="__stdcall">
 
    AsyncIAdviseSink2 * This,
     IMoniker *pmk);
<function name="AsyncIAdviseSink2_Begin_OnLinkSrcChange_Stub" ret="HRESULT" convention="__stdcall"> 
    AsyncIAdviseSink2 * This,
      IMoniker *pmk);

<function name="AsyncIAdviseSink2_Finish_OnLinkSrcChange_Proxy" ret="void" convention="__stdcall">
 
    AsyncIAdviseSink2 * This);
<function name="AsyncIAdviseSink2_Finish_OnLinkSrcChange_Stub" ret="HRESULT" convention="__stdcall"> 
    AsyncIAdviseSink2 * This);
#line 1 "\\program files\\Microsoft SDKs\\Windows\\v6.0A\\Include\\guiddef.h"
#line 1 "\\program files\\Microsoft SDKs\\Windows\\v6.0A\\Include\\cguid.h"

#pragma once
extern const IID GUID_NULL;
extern const IID CATID_MARSHALER;
extern const IID IID_IRpcChannel;
extern const IID IID_IRpcStub;
extern const IID IID_IStubManager;
extern const IID IID_IRpcProxy;
extern const IID IID_IProxyManager;
extern const IID IID_IPSFactory;
extern const IID IID_IInternalMoniker;
extern const IID IID_IDfReserved1;
extern const IID IID_IDfReserved2;
extern const IID IID_IDfReserved3;
extern const CLSID CLSID_StdMarshal;
extern const CLSID CLSID_AggStdMarshal;
extern const CLSID CLSID_StdAsyncActManager;
extern const IID IID_IStub;
extern const IID IID_IProxy;
extern const IID IID_IEnumGeneric;
extern const IID IID_IEnumHolder;
extern const IID IID_IEnumCallback;
extern const IID IID_IOleManager;
extern const IID IID_IOlePresObj;
extern const IID IID_IDebug;
extern const IID IID_IDebugStream;
extern const CLSID CLSID_PSGenObject;
extern const CLSID CLSID_PSClientSite;
extern const CLSID CLSID_PSClassObject;
extern const CLSID CLSID_PSInPlaceActive;
extern const CLSID CLSID_PSInPlaceFrame;
extern const CLSID CLSID_PSDragDrop;
extern const CLSID CLSID_PSBindCtx;
extern const CLSID CLSID_PSEnumerators;
extern const CLSID CLSID_StaticMetafile;
extern const CLSID CLSID_StaticDib;
extern const CLSID CID_CDfsVolume;
extern const CLSID CLSID_DCOMAccessControl;
extern const CLSID CLSID_GlobalOptions;
extern const CLSID CLSID_StdGlobalInterfaceTable;
extern const CLSID CLSID_ComBinding;
extern const CLSID CLSID_StdEvent;
extern const CLSID CLSID_ManualResetEvent;
extern const CLSID CLSID_SynchronizeContainer;
extern const CLSID CLSID_AddrControl;

extern const CLSID CLSID_ContextSwitcher;

extern const CLSID CLSID_CCDFormKrnl;
extern const CLSID CLSID_CCDPropertyPage;
extern const CLSID CLSID_CCDFormDialog;

extern const CLSID CLSID_CCDCommandButton;
extern const CLSID CLSID_CCDComboBox;
extern const CLSID CLSID_CCDTextBox;
extern const CLSID CLSID_CCDCheckBox;
extern const CLSID CLSID_CCDLabel;
extern const CLSID CLSID_CCDOptionButton;
extern const CLSID CLSID_CCDListBox;
extern const CLSID CLSID_CCDScrollBar;
extern const CLSID CLSID_CCDGroupBox;

extern const CLSID CLSID_CCDGeneralPropertyPage;
extern const CLSID CLSID_CCDGenericPropertyPage;
extern const CLSID CLSID_CCDFontPropertyPage;
extern const CLSID CLSID_CCDColorPropertyPage;
extern const CLSID CLSID_CCDLabelPropertyPage;
extern const CLSID CLSID_CCDCheckBoxPropertyPage;
extern const CLSID CLSID_CCDTextBoxPropertyPage;
extern const CLSID CLSID_CCDOptionButtonPropertyPage;
extern const CLSID CLSID_CCDListBoxPropertyPage;
extern const CLSID CLSID_CCDCommandButtonPropertyPage;
extern const CLSID CLSID_CCDComboBoxPropertyPage;
extern const CLSID CLSID_CCDScrollBarPropertyPage;
extern const CLSID CLSID_CCDGroupBoxPropertyPage;
extern const CLSID CLSID_CCDXObjectPropertyPage;

extern const CLSID CLSID_CStdPropertyFrame;

extern const CLSID CLSID_CFormPropertyPage;
extern const CLSID CLSID_CGridPropertyPage;

extern const CLSID CLSID_CWSJArticlePage;
extern const CLSID CLSID_CSystemPage;

extern const CLSID CLSID_IdentityUnmarshal;
extern const CLSID CLSID_InProcFreeMarshaler;

extern const CLSID CLSID_Picture_Metafile;
extern const CLSID CLSID_Picture_EnhMetafile;
extern const CLSID CLSID_Picture_Dib;

extern const GUID GUID_TRISTATE;

typedef enum tagCOINIT
{
  COINIT_APARTMENTTHREADED  = 0x2,      
  
  COINIT_MULTITHREADED      = 0x0,      
  COINIT_DISABLE_OLE1DDE    = 0x4,      
  COINIT_SPEED_OVER_MEMORY  = 0x8,      

} COINIT;
<function name="CoBuildVersion" ret="DWORD" convention="__stdcall">
 void 
</function>
<function name="CoInitialize" ret="HRESULT" convention="__stdcall">
<arg name="pvReserved">LPVOID</arg>
</function>
<function name="CoUninitialize" ret="void" convention="__stdcall">
void);
<function name="CoGetMalloc" ret="HRESULT" convention="__stdcall">
<arg name="dwMemContext">DWORD</arg>
<arg name="ppMalloc">LPMALLOC *</arg>
</function>
<function name="CoGetCurrentProcess" ret="DWORD" convention="__stdcall">
void
</function>
<function name="CoRegisterMallocSpy" ret="HRESULT" convention="__stdcall">
<arg name="pMallocSpy">LPMALLOCSPY</arg>
</function>
<function name="CoRevokeMallocSpy" ret="HRESULT" convention="__stdcall">
void);
<function name="CoCreateStandardMalloc" ret="HRESULT" convention="__stdcall">
<arg name="memctx">DWORD</arg>
<arg name="ppMalloc">IMalloc * *</arg>
</function>
<function name="CoInitializeEx" ret="HRESULT" convention="__stdcall">
<arg name="pvReserved">LPVOID</arg>
<arg name="dwCoInit">DWORD</arg>
</function>
<function name="CoGetCallerTID" ret="HRESULT" convention="__stdcall">
  LPDWORD lpdwTID 
</function>
<function name="CoGetCurrentLogicalThreadId" ret="HRESULT" convention="__stdcall">
 GUID *pguid
</function>

<function name="CoRegisterInitializeSpy" ret="HRESULT" convention="__stdcall">
<arg name="pSpy">LPINITIALIZESPY</arg>
  ULARGE_INTEGER *puliCookie);
<function name="CoRevokeInitializeSpy" ret="HRESULT" convention="__stdcall">
<arg name="uliCookie">ULARGE_INTEGER</arg>
</function>

<function name="CoGetContextToken" ret="HRESULT" convention="__stdcall">
<arg name="pToken">ULONG_PTR*</arg>
</function>
typedef enum tagCOMSD
{
    SD_LAUNCHPERMISSIONS = 0,       
    SD_ACCESSPERMISSIONS = 1,       
    SD_LAUNCHRESTRICTIONS = 2,      
    SD_ACCESSRESTRICTIONS = 3       

} COMSD;
<function name="CoGetSystemSecurityPermissions" ret="HRESULT" convention="__stdcall">
<arg name="comSDType">COMSD</arg>
 PSECURITY_DESCRIPTOR *ppSD);

<struct name="tagSOleTlsDataPublic">
    void *pvReserved0[2];
    DWORD dwReserved0[3];
    void *pvReserved1[1];
    DWORD dwReserved1[3];
    void *pvReserved2[4];
    DWORD dwReserved2[1];
    void *pCurrentCtx;
} SOleTlsDataPublic;
<function name="CoGetObjectContext" ret="HRESULT" convention="__stdcall">
<arg name="riid">const IID * const</arg>
<arg name="ppv">LPVOID *</arg>
</function>
<function name="CoGetClassObject" ret="HRESULT" convention="__stdcall">
<arg name="rclsid">const IID * const</arg>
<arg name="dwClsContext">DWORD</arg>
<arg name="pvReserved">LPVOID</arg>
<arg name="riid">const IID * const</arg>
<arg name="ppv">LPVOID *</arg>
</function>
<function name="CoRegisterClassObject" ret="HRESULT" convention="__stdcall">
<arg name="rclsid">const IID * const</arg>
<arg name="pUnk">LPUNKNOWN</arg>
<arg name="dwClsContext">DWORD</arg>
<arg name="flags">DWORD</arg>
<arg name="lpdwRegister">LPDWORD</arg>
</function>
<function name="CoRevokeClassObject" ret="HRESULT" convention="__stdcall">
<arg name="dwRegister">DWORD</arg>
</function>
<function name="CoResumeClassObjects" ret="HRESULT" convention="__stdcall">
void);
<function name="CoSuspendClassObjects" ret="HRESULT" convention="__stdcall">
void);
<function name="CoAddRefServerProcess" ret="ULONG" convention="__stdcall">
void
</function>
<function name="CoReleaseServerProcess" ret="ULONG" convention="__stdcall">
void
</function>
<function name="CoGetPSClsid" ret="HRESULT" convention="__stdcall">
<arg name="riid">const IID * const</arg>
  CLSID *pClsid);
<function name="CoRegisterPSClsid" ret="HRESULT" convention="__stdcall">
<arg name="riid">const IID * const</arg>
<arg name="rclsid">const IID * const</arg>
</function>
<function name="CoRegisterSurrogate" ret="HRESULT" convention="__stdcall">
<arg name="pSurrogate">LPSURROGATE</arg>
</function>
<function name="CoGetMarshalSizeMax" ret="HRESULT" convention="__stdcall">
<arg name="pulSize">ULONG *</arg>
<arg name="riid">const IID * const </arg>
<arg name="pUnk">LPUNKNOWN </arg>
<arg name="mshlflags">DWORD dwDestContext,  LPVOID pvDestContext,  DWORD</arg>
</function>
<function name="CoMarshalInterface" ret="HRESULT" convention="__stdcall">
<arg name="pStm">LPSTREAM</arg>
<arg name="riid">const IID * const</arg>
<arg name="pUnk">LPUNKNOWN</arg>
<arg name="dwDestContext">DWORD</arg>
<arg name="pvDestContext">LPVOID</arg>
<arg name="mshlflags">DWORD</arg>
</function>
<function name="CoUnmarshalInterface" ret="HRESULT" convention="__stdcall">
<arg name="pStm">LPSTREAM</arg>
<arg name="riid">const IID * const</arg>
  LPVOID * ppv
</function>
<function name="CoMarshalHresult" ret="HRESULT" convention="__stdcall">
<arg name="pstm">LPSTREAM</arg>
  HRESULT hresult
</function>
<function name="CoUnmarshalHresult" ret="HRESULT" convention="__stdcall">
<arg name="pstm">LPSTREAM</arg>
  HRESULT  * phresult
</function>
<function name="CoReleaseMarshalData" ret="HRESULT" convention="__stdcall">
 LPSTREAM pStm
</function>
<function name="CoDisconnectObject" ret="HRESULT" convention="__stdcall">
<arg name="pUnk">LPUNKNOWN</arg>
  DWORD dwReserved
</function>
<function name="CoLockObjectExternal" ret="HRESULT" convention="__stdcall">
<arg name="pUnk">LPUNKNOWN</arg>
<arg name="fLock">BOOL</arg>
  BOOL fLastUnlockReleases
</function>
<function name="CoGetStandardMarshal" ret="HRESULT" convention="__stdcall">
<arg name="riid">const IID * const</arg>
<arg name="pUnk">LPUNKNOWN</arg>
<arg name="dwDestContext">DWORD</arg>
<arg name="pvDestContext">LPVOID</arg>
<arg name="mshlflags">DWORD</arg>
<arg name="ppMarshal">LPMARSHAL *</arg>
</function>
<function name="CoGetStdMarshalEx" ret="HRESULT" convention="__stdcall">
<arg name="pUnkOuter">LPUNKNOWN</arg>
<arg name="smexflags">DWORD</arg>
<arg name="ppUnkInner">LPUNKNOWN *</arg>
</function>
typedef enum tagSTDMSHLFLAGS
{
    SMEXF_SERVER     = 0x01,       
    SMEXF_HANDLER    = 0x02        
} STDMSHLFLAGS;
<function name="CoIsHandlerConnected" ret="BOOL" convention="__stdcall">
 LPUNKNOWN pUnk
</function>
<function name="CoMarshalInterThreadInterfaceInStream" ret="HRESULT" convention="__stdcall">
<arg name="riid">const IID * const</arg>
<arg name="pUnk">LPUNKNOWN</arg>

                     LPSTREAM *ppStm);

<function name="CoGetInterfaceAndReleaseStream" ret="HRESULT" convention="__stdcall">
<arg name="pStm">LPSTREAM</arg>
<arg name="iid">const IID * const</arg>
<arg name="ppv">LPVOID *</arg>
</function>

<function name="CoCreateFreeThreadedMarshaler" ret="HRESULT" convention="__stdcall">
<arg name="punkOuter">LPUNKNOWN </arg>

                     LPUNKNOWN *ppunkMarshal);
<function name="CoLoadLibrary" ret="HINSTANCE" convention="__stdcall">
<arg name="lpszLibName">LPOLESTR</arg>
  BOOL bAutoFree
</function>
<function name="CoFreeLibrary" ret="void" convention="__stdcall">
 HINSTANCE hInst
</function>
<function name="CoFreeAllLibraries" ret="void" convention="__stdcall">
void
</function>
<function name="CoFreeUnusedLibraries" ret="void" convention="__stdcall">
void
</function>
<function name="CoFreeUnusedLibrariesEx" ret="void" convention="__stdcall">
<arg name="dwUnloadDelay">DWORD</arg>
  DWORD dwReserved
</function>

<function name="CoDisconnectContext" ret="HRESULT" convention="__stdcall">
DWORD dwTimeout
</function>
<function name="CoInitializeSecurity" ret="HRESULT" convention="__stdcall">
<arg name="pSecDesc">PSECURITY_DESCRIPTOR   </arg>
<arg name="cAuthSvc">LONG                       </arg>

                     
                         SOLE_AUTHENTICATION_SERVICE *asAuthSvc,
                     void                    *pReserved1,
                     DWORD                        dwAuthnLevel,
                     DWORD                        dwImpLevel,
                     void                    *pAuthList,
                     DWORD                        dwCapabilities,
                     void                    *pReserved3 );
<function name="CoGetCallContext" ret="HRESULT" convention="__stdcall">
<arg name="riid">const IID * const</arg>
  void **ppInterface 
</function>
<function name="CoQueryProxyBlanket" ret="HRESULT" convention="__stdcall">
<arg name="pProxy">IUnknown                       *</arg>

     DWORD                     *pwAuthnSvc,
     DWORD                     *pAuthzSvc,
     OLECHAR            **pServerPrincName,
     DWORD                     *pAuthnLevel,
     DWORD                     *pImpLevel,
     RPC_AUTH_IDENTITY_HANDLE  *pAuthInfo,
     DWORD                     *pCapabilites );
<function name="CoSetProxyBlanket" ret="HRESULT" convention="__stdcall">
<arg name="pProxy">IUnknown                     *</arg>

     DWORD                         dwAuthnSvc,
     DWORD                         dwAuthzSvc,
     OLECHAR                  *pServerPrincName,
     DWORD                         dwAuthnLevel,
     DWORD                         dwImpLevel,
     RPC_AUTH_IDENTITY_HANDLE  pAuthInfo,
     DWORD                         dwCapabilities );
<function name="CoCopyProxy" ret="HRESULT" convention="__stdcall">
<arg name="pProxy">IUnknown           *</arg>

     IUnknown   **ppCopy );
<function name="CoQueryClientBlanket" ret="HRESULT" convention="__stdcall">
<arg name="pAuthnSvc">DWORD             *</arg>

     DWORD             *pAuthzSvc,
     OLECHAR           **pServerPrincName,
     DWORD             *pAuthnLevel,
     DWORD             *pImpLevel,
     RPC_AUTHZ_HANDLE  *pPrivs,
     DWORD           *pCapabilities );
<function name="CoImpersonateClient" ret="HRESULT" convention="__stdcall">
void
</function>
<function name="CoRevertToSelf" ret="HRESULT" convention="__stdcall">
void
</function>
<function name="CoQueryAuthenticationServices" ret="HRESULT" convention="__stdcall">
<arg name="pcAuthSvc">DWORD *</arg>

     SOLE_AUTHENTICATION_SERVICE **asAuthSvc );
<function name="CoSwitchCallContext" ret="HRESULT" convention="__stdcall">
<arg name="pNewObject">IUnknown *</arg>
  IUnknown **ppOldObject 
</function>

<function name="CoCreateInstance" ret="HRESULT" convention="__stdcall">
<arg name="rclsid">const IID * const</arg>
 
                            LPUNKNOWN pUnkOuter,
                                DWORD dwClsContext, 
                                const IID * const riid, 
                            LPVOID * ppv);
<function name="CoGetInstanceFromFile" ret="HRESULT" convention="__stdcall">
<arg name="pServerInfo">COSERVERINFO *           </arg>
<arg name="pClsid">CLSID        *           </arg>
<arg name="punkOuter">IUnknown     *           </arg>
 
     DWORD                         dwClsCtx,
     DWORD                         grfMode,
     OLECHAR          *            pwszName,
     DWORD                         dwCount,
     MULTI_QI * pResults );
<function name="CoGetInstanceFromIStorage" ret="HRESULT" convention="__stdcall">
<arg name="pServerInfo">COSERVERINFO *           </arg>
<arg name="pClsid">CLSID        *           </arg>
<arg name="punkOuter">IUnknown     *           </arg>
 
     DWORD                         dwClsCtx,
     struct IStorage  *            pstg,
     DWORD                         dwCount,
     MULTI_QI * pResults );
<function name="CoCreateInstanceEx" ret="HRESULT" convention="__stdcall">
<arg name="Clsid">const IID * const                     </arg>
<arg name="punkOuter">IUnknown     *           </arg>
 
     DWORD                         dwClsCtx,
     COSERVERINFO *            pServerInfo,
     DWORD                         dwCount,
     MULTI_QI * pResults );
<function name="CoGetCancelObject" ret="HRESULT" convention="__stdcall">
<arg name="dwThreadId">DWORD</arg>
<arg name="iid">const IID * const</arg>
  void **ppUnk
</function>
<function name="CoSetCancelObject" ret="HRESULT" convention="__stdcall">
 IUnknown *pUnk
</function>
<function name="CoCancelCall" ret="HRESULT" convention="__stdcall">
<arg name="dwThreadId">DWORD</arg>
  ULONG ulTimeout
</function>
<function name="CoTestCancel" ret="HRESULT" convention="__stdcall">
void
</function>
<function name="CoEnableCallCancellation" ret="HRESULT" convention="__stdcall">
 LPVOID pReserved
</function>
<function name="CoDisableCallCancellation" ret="HRESULT" convention="__stdcall">
 LPVOID pReserved
</function>
<function name="CoAllowSetForegroundWindow" ret="HRESULT" convention="__stdcall">
<arg name="pUnk">IUnknown *</arg>
  LPVOID lpvReserved
</function>
<function name="DcomChannelSetHResult" ret="HRESULT" convention="__stdcall">
<arg name="pvReserved">LPVOID</arg>
<arg name="pulReserved">ULONG*</arg>
  HRESULT appsHR
</function>
<function name="StringFromCLSID" ret="HRESULT" convention="__stdcall">
<arg name="rclsid">const IID * const</arg>
<arg name="lplpsz">LPOLESTR *</arg>
</function>
<function name="CLSIDFromString" ret="HRESULT" convention="__stdcall">
<arg name="lpsz">LPOLESTR</arg>
  LPCLSID pclsid
</function>
<function name="StringFromIID" ret="HRESULT" convention="__stdcall">
<arg name="rclsid">const IID * const</arg>
<arg name="lplpsz">LPOLESTR *</arg>
</function>
<function name="IIDFromString" ret="HRESULT" convention="__stdcall">
<arg name="lpsz">LPOLESTR</arg>
  LPIID lpiid
</function>
<function name="CoIsOle1Class" ret="BOOL" convention="__stdcall">
 const IID * const rclsid
</function>
<function name="ProgIDFromCLSID" ret="HRESULT" convention="__stdcall">
<arg name="clsid">const IID * const</arg>
<arg name="lplpszProgID">LPOLESTR *</arg>
</function>
<function name="CLSIDFromProgID" ret="HRESULT" convention="__stdcall">
<arg name="lpszProgID">LPCOLESTR</arg>
<arg name="lpclsid">LPCLSID</arg>
</function>
<function name="CLSIDFromProgIDEx" ret="HRESULT" convention="__stdcall">
<arg name="lpszProgID">LPCOLESTR</arg>
<arg name="lpclsid">LPCLSID</arg>
</function>
<function name="StringFromGUID2" ret="int" convention="__stdcall">
<arg name="rguid">const GUID * const</arg>
<arg name="lpsz">LPOLESTR</arg>
<arg name="cchMax">int</arg>
</function>

<function name="CoCreateGuid" ret="HRESULT" convention="__stdcall">
 GUID  *pguid
</function>

<function name="CoFileTimeToDosDateTime" ret="BOOL" convention="__stdcall">
<arg name="lpFileTime">FILETIME *</arg>
<arg name="lpDosDate">LPWORD</arg>
<arg name="lpDosTime">LPWORD</arg>
</function>
<function name="CoDosDateTimeToFileTime" ret="BOOL" convention="__stdcall">
<arg name="nDosDate">WORD</arg>
<arg name="nDosTime">WORD</arg>
<arg name="lpFileTime">FILETIME *</arg>
</function>
<function name="CoFileTimeNow" ret="HRESULT" convention="__stdcall">
  FILETIME * lpFileTime );
<function name="CoRegisterMessageFilter" ret="HRESULT" convention="__stdcall">
<arg name="lpMessageFilter">LPMESSAGEFILTER</arg>

                                 LPMESSAGEFILTER * lplpMessageFilter );
<function name="CoRegisterChannelHook" ret="HRESULT" convention="__stdcall">
<arg name="ExtensionUuid">const GUID * const</arg>
  IChannelHook *pChannelHook 
</function>

<function name="CoWaitForMultipleHandles" ret="HRESULT" convention="__stdcall">
<arg name="dwFlags">DWORD</arg>
<arg name="dwTimeout">DWORD</arg>
<arg name="cHandles">ULONG</arg>
<arg name="pHandles">LPHANDLE</arg>
<arg name="lpdwindex">LPDWORD </arg>
</function>
typedef enum tagCOWAIT_FLAGS
{
  COWAIT_WAITALL = 1,
  COWAIT_ALERTABLE = 2,
  COWAIT_INPUTAVAILABLE = 4
}COWAIT_FLAGS;
<function name="CoInvalidateRemoteMachineBindings" ret="HRESULT" convention="__stdcall">
 LPOLESTR pszMachineName
</function>

<function name="CoGetTreatAsClass" ret="HRESULT" convention="__stdcall">
<arg name="clsidOld">const IID * const</arg>
  LPCLSID pClsidNew
</function>
<function name="CoTreatAsClass" ret="HRESULT" convention="__stdcall">
<arg name="clsidOld">const IID * const</arg>
  const IID * const clsidNew
</function>
typedef<fnptr name="LPFNGETCLASSOBJECT" ret="HRESULT" convention="__stdcall">
<arg name="const">const IID *</arg>
<arg name="const">const IID *</arg>
 LPVOID *);
typedef<fnptr name="LPFNCANUNLOADNOW" ret="HRESULT" convention="__stdcall">
void);
<function name="DllGetClassObject" ret="extern HRESULT" convention="__stdcall">
<arg name="rclsid">const IID * const</arg>
<arg name="riid">const IID * const</arg>
<arg name="ppv">LPVOID *</arg>
</function>

<function name="DllCanUnloadNow" ret="extern HRESULT" convention="__stdcall">
void);
<function name="CoTaskMemAlloc" ret="LPVOID" convention="__stdcall">
 SIZE_T cb
</function>
<function name="CoTaskMemRealloc" ret="LPVOID" convention="__stdcall">
<arg name="pv">LPVOID</arg>
  SIZE_T cb
</function>
<function name="CoTaskMemFree" ret="void" convention="__stdcall">
<arg name="pv">LPVOID</arg>
</function>

<function name="CreateDataAdviseHolder" ret="HRESULT" convention="__stdcall">
 LPDATAADVISEHOLDER * ppDAHolder
</function>

<function name="CreateDataCache" ret="HRESULT" convention="__stdcall">
<arg name="pUnkOuter">LPUNKNOWN</arg>
<arg name="rclsid">const IID * const</arg>
<arg name="iid">const IID * const</arg>
<arg name="ppv">LPVOID *</arg>
</function>
<function name="StgCreateDocfile" ret="HRESULT" convention="__stdcall">
<arg name="pwcsName">const WCHAR*</arg>
<arg name="grfMode">DWORD</arg>
<arg name="reserved">DWORD</arg>
<arg name="ppstgOpen">IStorage**</arg>
</function>

<function name="StgCreateDocfileOnILockBytes" ret="HRESULT" convention="__stdcall">
<arg name="plkbyt">ILockBytes*</arg>
<arg name="grfMode">DWORD</arg>
<arg name="reserved">DWORD</arg>
<arg name="ppstgOpen">IStorage**</arg>
</function>

<function name="StgOpenStorage" ret="HRESULT" convention="__stdcall">
<arg name="pwcsName">const WCHAR*</arg>
<arg name="pstgPriority">IStorage*</arg>
<arg name="grfMode">DWORD</arg>
<arg name="snbExclude">SNB</arg>
<arg name="reserved">DWORD</arg>
<arg name="ppstgOpen">IStorage**</arg>
</function>
<function name="StgOpenStorageOnILockBytes" ret="HRESULT" convention="__stdcall">
<arg name="plkbyt">ILockBytes*</arg>
<arg name="pstgPriority">IStorage*</arg>
<arg name="grfMode">DWORD</arg>
<arg name="snbExclude">SNB</arg>
<arg name="reserved">DWORD</arg>
<arg name="ppstgOpen">IStorage**</arg>
</function>

<function name="StgIsStorageFile" ret="HRESULT" convention="__stdcall">
  const WCHAR* pwcsName
</function>
<function name="StgIsStorageILockBytes" ret="HRESULT" convention="__stdcall">
 ILockBytes* plkbyt
</function>

<function name="StgSetTimes" ret="HRESULT" convention="__stdcall">
<arg name="lpszName">const WCHAR*</arg>
<arg name="pctime">const FILETIME*</arg>
<arg name="patime">const FILETIME*</arg>
<arg name="pmtime">const FILETIME*</arg>
</function>

<function name="StgOpenAsyncDocfileOnIFillLockBytes" ret="HRESULT" convention="__stdcall">
<arg name="pflb">IFillLockBytes *</arg>
<arg name="grfMode">DWORD </arg>

              DWORD asyncFlags,
              IStorage** ppstgOpen);

<function name="StgGetIFillLockBytesOnILockBytes" ret="HRESULT" convention="__stdcall">
<arg name="pilb">ILockBytes *</arg>
<arg name="ppflb">IFillLockBytes**</arg>
</function>

<function name="StgGetIFillLockBytesOnFile" ret="HRESULT" convention="__stdcall">
<arg name="pwcsName">OLECHAR const *</arg>
<arg name="ppflb">IFillLockBytes**</arg>
</function>
<function name="StgOpenLayoutDocfile" ret="HRESULT" convention="__stdcall">
<arg name="pwcsDfName">OLECHAR const *</arg>
<arg name="grfMode">DWORD </arg>

              DWORD reserved,
              IStorage** ppstgOpen);

<struct name="tagSTGOPTIONS">
<field name="usVersion">USHORT</field>
<field name="reserved">USHORT</field>
<field name="ulSectorSize">ULONG</field>
    const WCHAR *pwcsTemplateFile;  

} STGOPTIONS;

<function name="StgCreateStorageEx" ret="HRESULT" convention="__stdcall">
<arg name="pwcsName">const WCHAR*</arg>
<arg name="grfMode">DWORD</arg>
<arg name="stgfmt">DWORD</arg>
              
             DWORD grfAttrs,
             STGOPTIONS* pStgOptions,
             PSECURITY_DESCRIPTOR pSecurityDescriptor,
             const IID * const riid,
             void** ppObjectOpen);

<function name="StgOpenStorageEx" ret="HRESULT" convention="__stdcall">
<arg name="pwcsName">const WCHAR*</arg>
<arg name="grfMode">DWORD</arg>
<arg name="stgfmt">DWORD</arg>
              
             DWORD grfAttrs,
             STGOPTIONS* pStgOptions,
             PSECURITY_DESCRIPTOR pSecurityDescriptor,
             const IID * const riid,
             void** ppObjectOpen);

<function name="BindMoniker" ret="HRESULT" convention="__stdcall">
<arg name="pmk">LPMONIKER</arg>
<arg name="grfOpt">DWORD</arg>
<arg name="iidResult">const IID * const</arg>
<arg name="ppvResult">LPVOID *</arg>
</function>

<function name="CoInstall" ret="HRESULT" convention="__stdcall">
<arg name="pbc">IBindCtx     *</arg>
<arg name="dwFlags">DWORD         </arg>
<arg name="pClassSpec">uCLSSPEC     *</arg>
<arg name="pQuery">QUERYCONTEXT *</arg>
<arg name="pszCodeBase">LPWSTR        </arg>
</function>

<function name="CoGetObject" ret="HRESULT" convention="__stdcall">
<arg name="pszName">LPCWSTR</arg>
<arg name="pBindOptions">BIND_OPTS *</arg>
<arg name="riid">const IID * const </arg>
  void **ppv);
<function name="MkParseDisplayName" ret="HRESULT" convention="__stdcall">
<arg name="pbc">LPBC</arg>
<arg name="szUserName">LPCOLESTR</arg>
<arg name="pchEaten">ULONG  *</arg>
<arg name="ppmk">LPMONIKER  *</arg>
</function>
<function name="MonikerRelativePathTo" ret="HRESULT" convention="__stdcall">
<arg name="pmkSrc">LPMONIKER</arg>
<arg name="pmkDest">LPMONIKER</arg>
  LPMONIKER
                * ppmkRelPath,  BOOL dwReserved);
<function name="MonikerCommonPrefixWith" ret="HRESULT" convention="__stdcall">
<arg name="pmkThis">LPMONIKER</arg>
<arg name="pmkOther">LPMONIKER</arg>
<arg name="ppmkCommon">LPMONIKER *</arg>
</function>
<function name="CreateBindCtx" ret="HRESULT" convention="__stdcall">
<arg name="reserved">DWORD</arg>
<arg name="ppbc">LPBC *</arg>
</function>
<function name="CreateGenericComposite" ret="HRESULT" convention="__stdcall">
<arg name="pmkFirst">LPMONIKER</arg>
<arg name="pmkRest">LPMONIKER</arg>
<arg name="ppmkComposite">LPMONIKER *</arg>
</function>
<function name="GetClassFile" ret="HRESULT" convention="__stdcall">
<arg name="szFilename">LPCOLESTR</arg>
<arg name="pclsid">CLSID *</arg>
</function>

<function name="CreateClassMoniker" ret="HRESULT" convention="__stdcall">
<arg name="rclsid">const IID * const</arg>
<arg name="ppmk">LPMONIKER *</arg>
</function>

<function name="CreateFileMoniker" ret="HRESULT" convention="__stdcall">
<arg name="lpszPathName">LPCOLESTR</arg>
<arg name="ppmk">LPMONIKER *</arg>
</function>

<function name="CreateItemMoniker" ret="HRESULT" convention="__stdcall">
<arg name="lpszDelim">LPCOLESTR</arg>
<arg name="lpszItem">LPCOLESTR</arg>
<arg name="ppmk">LPMONIKER *</arg>
</function>
<function name="CreateAntiMoniker" ret="HRESULT" convention="__stdcall">
<arg name="ppmk">LPMONIKER *</arg>
</function>
<function name="CreatePointerMoniker" ret="HRESULT" convention="__stdcall">
<arg name="punk">LPUNKNOWN</arg>
<arg name="ppmk">LPMONIKER *</arg>
</function>
<function name="CreateObjrefMoniker" ret="HRESULT" convention="__stdcall">
<arg name="punk">LPUNKNOWN</arg>
<arg name="ppmk">LPMONIKER  *</arg>
</function>

<function name="GetRunningObjectTable" ret="HRESULT" convention="__stdcall">
<arg name="reserved">DWORD</arg>
<arg name="pprot">LPRUNNINGOBJECTTABLE *</arg>
</function>

#line 1 "\\program files\\Microsoft SDKs\\Windows\\v6.0A\\Include\\urlmon.h"
 
#pragma warning( disable: 4049 )  

#pragma once
 

















#line 1 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\oleidl.h"
 
#pragma warning( disable: 4049 )  

#pragma once
 















 

#pragma once
extern RPC_IF_HANDLE __MIDL_itf_oleidl_0000_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_oleidl_0000_0000_v0_0_s_ifspec;
 

typedef  IOleAdviseHolder *LPOLEADVISEHOLDER;
extern const IID IID_IOleAdviseHolder;
<struct name="IOleAdviseHolderVtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            IOleAdviseHolder * This,
             const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            IOleAdviseHolder * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            IOleAdviseHolder * This);
        
<fnptr name="Advise" ret="HRESULT" convention="__stdcall">
 
            IOleAdviseHolder * This,
             IAdviseSink *pAdvise,
             DWORD *pdwConnection);
        
<fnptr name="Unadvise" ret="HRESULT" convention="__stdcall">
 
            IOleAdviseHolder * This,
             DWORD dwConnection);
        
<fnptr name="EnumAdvise" ret="HRESULT" convention="__stdcall">
 
            IOleAdviseHolder * This,
             IEnumSTATDATA **ppenumAdvise);
        
<fnptr name="SendOnRename" ret="HRESULT" convention="__stdcall">
 
            IOleAdviseHolder * This,
             IMoniker *pmk);
        
<fnptr name="SendOnSave" ret="HRESULT" convention="__stdcall">
 
            IOleAdviseHolder * This);
        
<fnptr name="SendOnClose" ret="HRESULT" convention="__stdcall">
 
            IOleAdviseHolder * This);
        
        
    } IOleAdviseHolderVtbl;

<struct name="IOleAdviseHolder">
<vptr>IOleAdviseHolderVtbl *</vptr>
</struct>

    
 

typedef    IOleCache *LPOLECACHE;
extern const IID IID_IOleCache;
<struct name="IOleCacheVtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            IOleCache * This,
              const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            IOleCache * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            IOleCache * This);
        
<fnptr name="Cache" ret="HRESULT" convention="__stdcall">
 
            IOleCache * This,
              FORMATETC *pformatetc,
             DWORD advf,
              DWORD *pdwConnection);
        
<fnptr name="Uncache" ret="HRESULT" convention="__stdcall">
 
            IOleCache * This,
             DWORD dwConnection);
        
<fnptr name="EnumCache" ret="HRESULT" convention="__stdcall">
 
            IOleCache * This,
              IEnumSTATDATA **ppenumSTATDATA);
        
<fnptr name="InitCache" ret="HRESULT" convention="__stdcall">
 
            IOleCache * This,
              IDataObject *pDataObject);
        
<fnptr name="SetData" ret="HRESULT" convention="__stdcall">
 
            IOleCache * This,
              FORMATETC *pformatetc,
              STGMEDIUM *pmedium,
             BOOL fRelease);
        
        
    } IOleCacheVtbl;

<struct name="IOleCache">
<vptr>IOleCacheVtbl *</vptr>
</struct>

    
 

typedef    IOleCache2 *LPOLECACHE2;
typedef  
enum tagDISCARDCACHE
    {	DISCARDCACHE_SAVEIFDIRTY	= 0,
	DISCARDCACHE_NOSAVE	= 1
    } 	DISCARDCACHE;
extern const IID IID_IOleCache2;
<struct name="IOleCache2Vtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            IOleCache2 * This,
              const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            IOleCache2 * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            IOleCache2 * This);
        
<fnptr name="Cache" ret="HRESULT" convention="__stdcall">
 
            IOleCache2 * This,
              FORMATETC *pformatetc,
             DWORD advf,
              DWORD *pdwConnection);
        
<fnptr name="Uncache" ret="HRESULT" convention="__stdcall">
 
            IOleCache2 * This,
             DWORD dwConnection);
        
<fnptr name="EnumCache" ret="HRESULT" convention="__stdcall">
 
            IOleCache2 * This,
              IEnumSTATDATA **ppenumSTATDATA);
        
<fnptr name="InitCache" ret="HRESULT" convention="__stdcall">
 
            IOleCache2 * This,
              IDataObject *pDataObject);
        
<fnptr name="SetData" ret="HRESULT" convention="__stdcall">
 
            IOleCache2 * This,
              FORMATETC *pformatetc,
              STGMEDIUM *pmedium,
             BOOL fRelease);
        
<fnptr name="UpdateCache" ret="HRESULT" convention="__stdcall">
 
            IOleCache2 * This,
             LPDATAOBJECT pDataObject,
             DWORD grfUpdf,
             LPVOID pReserved);
        
<fnptr name="DiscardCache" ret="HRESULT" convention="__stdcall">
 
            IOleCache2 * This,
             DWORD dwDiscardOptions);
        
        
    } IOleCache2Vtbl;

<struct name="IOleCache2">
<vptr>IOleCache2Vtbl *</vptr>
</struct>

    
<function name="IOleCache2_RemoteUpdateCache_Proxy" ret="HRESULT" convention="__stdcall"> 
    IOleCache2 * This,
      LPDATAOBJECT pDataObject,
     DWORD grfUpdf,
     LONG_PTR pReserved);
<function name="IOleCache2_RemoteUpdateCache_Stub" ret="void" convention="__stdcall">
<arg name="This">IRpcStubBuffer *</arg>

    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
 

typedef    IOleCacheControl *LPOLECACHECONTROL;
extern const IID IID_IOleCacheControl;
<struct name="IOleCacheControlVtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            IOleCacheControl * This,
              const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            IOleCacheControl * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            IOleCacheControl * This);
        
<fnptr name="OnRun" ret="HRESULT" convention="__stdcall">
 
            IOleCacheControl * This,
             LPDATAOBJECT pDataObject);
        
<fnptr name="OnStop" ret="HRESULT" convention="__stdcall">
 
            IOleCacheControl * This);
        
        
    } IOleCacheControlVtbl;

<struct name="IOleCacheControl">
<vptr>IOleCacheControlVtbl *</vptr>
</struct>

    

 

typedef    IParseDisplayName *LPPARSEDISPLAYNAME;
extern const IID IID_IParseDisplayName;
<struct name="IParseDisplayNameVtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            IParseDisplayName * This,
              const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            IParseDisplayName * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            IParseDisplayName * This);
        
<fnptr name="ParseDisplayName" ret="HRESULT" convention="__stdcall">
 
            IParseDisplayName * This,
              IBindCtx *pbc,
              LPOLESTR pszDisplayName,
              ULONG *pchEaten,
              IMoniker **ppmkOut);
        
        
    } IParseDisplayNameVtbl;

<struct name="IParseDisplayName">
<vptr>IParseDisplayNameVtbl *</vptr>
</struct>

    
 

typedef    IOleContainer *LPOLECONTAINER;
extern const IID IID_IOleContainer;
<struct name="IOleContainerVtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            IOleContainer * This,
              const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            IOleContainer * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            IOleContainer * This);
        
<fnptr name="ParseDisplayName" ret="HRESULT" convention="__stdcall">
 
            IOleContainer * This,
              IBindCtx *pbc,
              LPOLESTR pszDisplayName,
              ULONG *pchEaten,
              IMoniker **ppmkOut);
        
<fnptr name="EnumObjects" ret="HRESULT" convention="__stdcall">
 
            IOleContainer * This,
             DWORD grfFlags,
              IEnumUnknown **ppenum);
        
<fnptr name="LockContainer" ret="HRESULT" convention="__stdcall">
 
            IOleContainer * This,
             BOOL fLock);
        
        
    } IOleContainerVtbl;

<struct name="IOleContainer">
<vptr>IOleContainerVtbl *</vptr>
</struct>

    
 

typedef    IOleClientSite *LPOLECLIENTSITE;
extern const IID IID_IOleClientSite;
<struct name="IOleClientSiteVtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            IOleClientSite * This,
              const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            IOleClientSite * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            IOleClientSite * This);
        
<fnptr name="SaveObject" ret="HRESULT" convention="__stdcall">
 
            IOleClientSite * This);
        
<fnptr name="GetMoniker" ret="HRESULT" convention="__stdcall">
 
            IOleClientSite * This,
             DWORD dwAssign,
             DWORD dwWhichMoniker,
              IMoniker **ppmk);
        
<fnptr name="GetContainer" ret="HRESULT" convention="__stdcall">
 
            IOleClientSite * This,
              IOleContainer **ppContainer);
        
<fnptr name="ShowObject" ret="HRESULT" convention="__stdcall">
 
            IOleClientSite * This);
        
<fnptr name="OnShowWindow" ret="HRESULT" convention="__stdcall">
 
            IOleClientSite * This,
             BOOL fShow);
        
<fnptr name="RequestNewObjectLayout" ret="HRESULT" convention="__stdcall">
 
            IOleClientSite * This);
        
        
    } IOleClientSiteVtbl;

<struct name="IOleClientSite">
<vptr>IOleClientSiteVtbl *</vptr>
</struct>

    
 

typedef    IOleObject *LPOLEOBJECT;

typedef 
enum tagOLEGETMONIKER
    {	OLEGETMONIKER_ONLYIFTHERE	= 1,
	OLEGETMONIKER_FORCEASSIGN	= 2,
	OLEGETMONIKER_UNASSIGN	= 3,
	OLEGETMONIKER_TEMPFORUSER	= 4
    } 	OLEGETMONIKER;

typedef 
enum tagOLEWHICHMK
    {	OLEWHICHMK_CONTAINER	= 1,
	OLEWHICHMK_OBJREL	= 2,
	OLEWHICHMK_OBJFULL	= 3
    } 	OLEWHICHMK;

typedef 
enum tagUSERCLASSTYPE
    {	USERCLASSTYPE_FULL	= 1,
	USERCLASSTYPE_SHORT	= 2,
	USERCLASSTYPE_APPNAME	= 3
    } 	USERCLASSTYPE;

typedef 
enum tagOLEMISC
    {	OLEMISC_RECOMPOSEONRESIZE	= 0x1,
	OLEMISC_ONLYICONIC	= 0x2,
	OLEMISC_INSERTNOTREPLACE	= 0x4,
	OLEMISC_STATIC	= 0x8,
	OLEMISC_CANTLINKINSIDE	= 0x10,
	OLEMISC_CANLINKBYOLE1	= 0x20,
	OLEMISC_ISLINKOBJECT	= 0x40,
	OLEMISC_INSIDEOUT	= 0x80,
	OLEMISC_ACTIVATEWHENVISIBLE	= 0x100,
	OLEMISC_RENDERINGISDEVICEINDEPENDENT	= 0x200,
	OLEMISC_INVISIBLEATRUNTIME	= 0x400,
	OLEMISC_ALWAYSRUN	= 0x800,
	OLEMISC_ACTSLIKEBUTTON	= 0x1000,
	OLEMISC_ACTSLIKELABEL	= 0x2000,
	OLEMISC_NOUIACTIVATE	= 0x4000,
	OLEMISC_ALIGNABLE	= 0x8000,
	OLEMISC_SIMPLEFRAME	= 0x10000,
	OLEMISC_SETCLIENTSITEFIRST	= 0x20000,
	OLEMISC_IMEMODE	= 0x40000,
	OLEMISC_IGNOREACTIVATEWHENVISIBLE	= 0x80000,
	OLEMISC_WANTSTOMENUMERGE	= 0x100000,
	OLEMISC_SUPPORTSMULTILEVELUNDO	= 0x200000
    } 	OLEMISC;

typedef 
enum tagOLECLOSE
    {	OLECLOSE_SAVEIFDIRTY	= 0,
	OLECLOSE_NOSAVE	= 1,
	OLECLOSE_PROMPTSAVE	= 2
    } 	OLECLOSE;
extern const IID IID_IOleObject;
<struct name="IOleObjectVtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            IOleObject * This,
              const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            IOleObject * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            IOleObject * This);
        
<fnptr name="SetClientSite" ret="HRESULT" convention="__stdcall">
 
            IOleObject * This,
              IOleClientSite *pClientSite);
        
<fnptr name="GetClientSite" ret="HRESULT" convention="__stdcall">
 
            IOleObject * This,
              IOleClientSite **ppClientSite);
        
<fnptr name="SetHostNames" ret="HRESULT" convention="__stdcall">
 
            IOleObject * This,
              LPCOLESTR szContainerApp,
              LPCOLESTR szContainerObj);
        
<fnptr name="Close" ret="HRESULT" convention="__stdcall">
 
            IOleObject * This,
             DWORD dwSaveOption);
        
<fnptr name="SetMoniker" ret="HRESULT" convention="__stdcall">
 
            IOleObject * This,
             DWORD dwWhichMoniker,
              IMoniker *pmk);
        
<fnptr name="GetMoniker" ret="HRESULT" convention="__stdcall">
 
            IOleObject * This,
             DWORD dwAssign,
             DWORD dwWhichMoniker,
              IMoniker **ppmk);
        
<fnptr name="InitFromData" ret="HRESULT" convention="__stdcall">
 
            IOleObject * This,
              IDataObject *pDataObject,
             BOOL fCreation,
             DWORD dwReserved);
        
<fnptr name="GetClipboardData" ret="HRESULT" convention="__stdcall">
 
            IOleObject * This,
             DWORD dwReserved,
              IDataObject **ppDataObject);
        
<fnptr name="DoVerb" ret="HRESULT" convention="__stdcall">
 
            IOleObject * This,
             LONG iVerb,
              LPMSG lpmsg,
              IOleClientSite *pActiveSite,
             LONG lindex,
              HWND hwndParent,
              LPCRECT lprcPosRect);
        
<fnptr name="EnumVerbs" ret="HRESULT" convention="__stdcall">
 
            IOleObject * This,
              IEnumOLEVERB **ppEnumOleVerb);
        
<fnptr name="Update" ret="HRESULT" convention="__stdcall">
 
            IOleObject * This);
        
<fnptr name="IsUpToDate" ret="HRESULT" convention="__stdcall">
 
            IOleObject * This);
        
<fnptr name="GetUserClassID" ret="HRESULT" convention="__stdcall">
 
            IOleObject * This,
              CLSID *pClsid);
        
<fnptr name="GetUserType" ret="HRESULT" convention="__stdcall">
 
            IOleObject * This,
             DWORD dwFormOfType,
              LPOLESTR *pszUserType);
        
<fnptr name="SetExtent" ret="HRESULT" convention="__stdcall">
 
            IOleObject * This,
             DWORD dwDrawAspect,
              SIZEL *psizel);
        
<fnptr name="GetExtent" ret="HRESULT" convention="__stdcall">
 
            IOleObject * This,
             DWORD dwDrawAspect,
              SIZEL *psizel);
        
<fnptr name="Advise" ret="HRESULT" convention="__stdcall">
 
            IOleObject * This,
              IAdviseSink *pAdvSink,
              DWORD *pdwConnection);
        
<fnptr name="Unadvise" ret="HRESULT" convention="__stdcall">
 
            IOleObject * This,
             DWORD dwConnection);
        
<fnptr name="EnumAdvise" ret="HRESULT" convention="__stdcall">
 
            IOleObject * This,
              IEnumSTATDATA **ppenumAdvise);
        
<fnptr name="GetMiscStatus" ret="HRESULT" convention="__stdcall">
 
            IOleObject * This,
             DWORD dwAspect,
              DWORD *pdwStatus);
        
<fnptr name="SetColorScheme" ret="HRESULT" convention="__stdcall">
 
            IOleObject * This,
              LOGPALETTE *pLogpal);
        
        
    } IOleObjectVtbl;

<struct name="IOleObject">
<vptr>IOleObjectVtbl *</vptr>
</struct>

    

 

typedef 
enum tagOLERENDER
    {	OLERENDER_NONE	= 0,
	OLERENDER_DRAW	= 1,
	OLERENDER_FORMAT	= 2,
	OLERENDER_ASIS	= 3
    } 	OLERENDER;

typedef OLERENDER *LPOLERENDER;

<struct name="tagOBJECTDESCRIPTOR">
<field name="cbSize">ULONG</field>
<field name="clsid">CLSID</field>
<field name="dwDrawAspect">DWORD</field>
<field name="sizel">SIZEL</field>
<field name="pointl">POINTL</field>
<field name="dwStatus">DWORD</field>
<field name="dwFullUserTypeName">DWORD</field>
<field name="dwSrcOfCopy">DWORD</field>
    } 	OBJECTDESCRIPTOR;

<typedef name="POBJECTDESCRIPTOR">tagOBJECTDESCRIPTOR *</typedef>

<typedef name="LPOBJECTDESCRIPTOR">tagOBJECTDESCRIPTOR *</typedef>

typedef struct tagOBJECTDESCRIPTOR LINKSRCDESCRIPTOR;

<typedef name="PLINKSRCDESCRIPTOR">tagOBJECTDESCRIPTOR *</typedef>

<typedef name="LPLINKSRCDESCRIPTOR">tagOBJECTDESCRIPTOR *</typedef>
extern RPC_IF_HANDLE IOLETypes_v0_0_c_ifspec;
extern RPC_IF_HANDLE IOLETypes_v0_0_s_ifspec;
 

typedef    IOleWindow *LPOLEWINDOW;
extern const IID IID_IOleWindow;
<struct name="IOleWindowVtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            IOleWindow * This,
              const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            IOleWindow * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            IOleWindow * This);
        
<fnptr name="GetWindow" ret="HRESULT" convention="__stdcall">
 
            IOleWindow * This,
              HWND *phwnd);
        
<fnptr name="ContextSensitiveHelp" ret="HRESULT" convention="__stdcall">
 
            IOleWindow * This,
             BOOL fEnterMode);
        
        
    } IOleWindowVtbl;

<struct name="IOleWindow">
<vptr>IOleWindowVtbl *</vptr>
</struct>

    
 

typedef    IOleLink *LPOLELINK;

typedef 
enum tagOLEUPDATE
    {	OLEUPDATE_ALWAYS	= 1,
	OLEUPDATE_ONCALL	= 3
    } 	OLEUPDATE;

typedef OLEUPDATE *LPOLEUPDATE;

typedef OLEUPDATE *POLEUPDATE;

typedef 
enum tagOLELINKBIND
    {	OLELINKBIND_EVENIFCLASSDIFF	= 1
    } 	OLELINKBIND;
extern const IID IID_IOleLink;
<struct name="IOleLinkVtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            IOleLink * This,
              const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            IOleLink * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            IOleLink * This);
        
<fnptr name="SetUpdateOptions" ret="HRESULT" convention="__stdcall">
 
            IOleLink * This,
             DWORD dwUpdateOpt);
        
<fnptr name="GetUpdateOptions" ret="HRESULT" convention="__stdcall">
 
            IOleLink * This,
              DWORD *pdwUpdateOpt);
        
<fnptr name="SetSourceMoniker" ret="HRESULT" convention="__stdcall">
 
            IOleLink * This,
              IMoniker *pmk,
              const IID * const rclsid);
        
<fnptr name="GetSourceMoniker" ret="HRESULT" convention="__stdcall">
 
            IOleLink * This,
              IMoniker **ppmk);
        
<fnptr name="SetSourceDisplayName" ret="HRESULT" convention="__stdcall">
 
            IOleLink * This,
              LPCOLESTR pszStatusText);
        
<fnptr name="GetSourceDisplayName" ret="HRESULT" convention="__stdcall">
 
            IOleLink * This,
              LPOLESTR *ppszDisplayName);
        
<fnptr name="BindToSource" ret="HRESULT" convention="__stdcall">
 
            IOleLink * This,
             DWORD bindflags,
              IBindCtx *pbc);
        
<fnptr name="BindIfRunning" ret="HRESULT" convention="__stdcall">
 
            IOleLink * This);
        
<fnptr name="GetBoundSource" ret="HRESULT" convention="__stdcall">
 
            IOleLink * This,
              IUnknown **ppunk);
        
<fnptr name="UnbindSource" ret="HRESULT" convention="__stdcall">
 
            IOleLink * This);
        
<fnptr name="Update" ret="HRESULT" convention="__stdcall">
 
            IOleLink * This,
              IBindCtx *pbc);
        
        
    } IOleLinkVtbl;

<struct name="IOleLink">
<vptr>IOleLinkVtbl *</vptr>
</struct>

    
 

typedef    IOleItemContainer *LPOLEITEMCONTAINER;

typedef 
enum tagBINDSPEED
    {	BINDSPEED_INDEFINITE	= 1,
	BINDSPEED_MODERATE	= 2,
	BINDSPEED_IMMEDIATE	= 3
    } 	BINDSPEED;

typedef  
enum tagOLECONTF
    {	OLECONTF_EMBEDDINGS	= 1,
	OLECONTF_LINKS	= 2,
	OLECONTF_OTHERS	= 4,
	OLECONTF_ONLYUSER	= 8,
	OLECONTF_ONLYIFRUNNING	= 16
    } 	OLECONTF;
extern const IID IID_IOleItemContainer;
<struct name="IOleItemContainerVtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            IOleItemContainer * This,
              const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            IOleItemContainer * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            IOleItemContainer * This);
        
<fnptr name="ParseDisplayName" ret="HRESULT" convention="__stdcall">
 
            IOleItemContainer * This,
              IBindCtx *pbc,
              LPOLESTR pszDisplayName,
              ULONG *pchEaten,
              IMoniker **ppmkOut);
        
<fnptr name="EnumObjects" ret="HRESULT" convention="__stdcall">
 
            IOleItemContainer * This,
             DWORD grfFlags,
              IEnumUnknown **ppenum);
        
<fnptr name="LockContainer" ret="HRESULT" convention="__stdcall">
 
            IOleItemContainer * This,
             BOOL fLock);
        
<fnptr name="GetObjectA" ret="HRESULT" convention="__stdcall">
 
            IOleItemContainer * This,
              LPOLESTR pszItem,
             DWORD dwSpeedNeeded,
              IBindCtx *pbc,
              const IID * const riid,
              void **ppvObject);
        
<fnptr name="GetObjectStorage" ret="HRESULT" convention="__stdcall">
 
            IOleItemContainer * This,
              LPOLESTR pszItem,
              IBindCtx *pbc,
              const IID * const riid,
              void **ppvStorage);
        
<fnptr name="IsRunning" ret="HRESULT" convention="__stdcall">
 
            IOleItemContainer * This,
              LPOLESTR pszItem);
        
        
    } IOleItemContainerVtbl;

<struct name="IOleItemContainer">
<vptr>IOleItemContainerVtbl *</vptr>
</struct>

    
 

typedef    IOleInPlaceUIWindow *LPOLEINPLACEUIWINDOW;

typedef RECT BORDERWIDTHS;

typedef LPRECT LPBORDERWIDTHS;

typedef LPCRECT LPCBORDERWIDTHS;
extern const IID IID_IOleInPlaceUIWindow;

<struct name="IOleInPlaceUIWindowVtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            IOleInPlaceUIWindow * This,
              const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            IOleInPlaceUIWindow * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            IOleInPlaceUIWindow * This);
        
<fnptr name="GetWindow" ret="HRESULT" convention="__stdcall">
 
            IOleInPlaceUIWindow * This,
              HWND *phwnd);
        
<fnptr name="ContextSensitiveHelp" ret="HRESULT" convention="__stdcall">
 
            IOleInPlaceUIWindow * This,
             BOOL fEnterMode);
        
<fnptr name="GetBorder" ret="HRESULT" convention="__stdcall">
 
            IOleInPlaceUIWindow * This,
              LPRECT lprectBorder);
        
<fnptr name="RequestBorderSpace" ret="HRESULT" convention="__stdcall">
 
            IOleInPlaceUIWindow * This,
              LPCBORDERWIDTHS pborderwidths);
        
<fnptr name="SetBorderSpace" ret="HRESULT" convention="__stdcall">
 
            IOleInPlaceUIWindow * This,
              LPCBORDERWIDTHS pborderwidths);
        
<fnptr name="SetActiveObject" ret="HRESULT" convention="__stdcall">
 
            IOleInPlaceUIWindow * This,
              IOleInPlaceActiveObject *pActiveObject,
              LPCOLESTR pszObjName);
        
        
    } IOleInPlaceUIWindowVtbl;

<struct name="IOleInPlaceUIWindow">
<vptr>IOleInPlaceUIWindowVtbl *</vptr>
</struct>

    

 

typedef    IOleInPlaceActiveObject *LPOLEINPLACEACTIVEOBJECT;
extern const IID IID_IOleInPlaceActiveObject;
<struct name="IOleInPlaceActiveObjectVtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            IOleInPlaceActiveObject * This,
              const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            IOleInPlaceActiveObject * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            IOleInPlaceActiveObject * This);
        
<fnptr name="GetWindow" ret="HRESULT" convention="__stdcall">
 
            IOleInPlaceActiveObject * This,
              HWND *phwnd);
        
<fnptr name="ContextSensitiveHelp" ret="HRESULT" convention="__stdcall">
 
            IOleInPlaceActiveObject * This,
             BOOL fEnterMode);
        
<fnptr name="TranslateAcceleratorA" ret="HRESULT" convention="__stdcall">
 
            IOleInPlaceActiveObject * This,
             LPMSG lpmsg);
        
<fnptr name="OnFrameWindowActivate" ret="HRESULT" convention="__stdcall">
 
            IOleInPlaceActiveObject * This,
             BOOL fActivate);
        
<fnptr name="OnDocWindowActivate" ret="HRESULT" convention="__stdcall">
 
            IOleInPlaceActiveObject * This,
             BOOL fActivate);
        
<fnptr name="ResizeBorder" ret="HRESULT" convention="__stdcall">
 
            IOleInPlaceActiveObject * This,
             LPCRECT prcBorder,
             IOleInPlaceUIWindow *pUIWindow,
             BOOL fFrameWindow);
        
<fnptr name="EnableModeless" ret="HRESULT" convention="__stdcall">
 
            IOleInPlaceActiveObject * This,
             BOOL fEnable);
        
        
    } IOleInPlaceActiveObjectVtbl;

<struct name="IOleInPlaceActiveObject">
<vptr>IOleInPlaceActiveObjectVtbl *</vptr>
</struct>

    
<function name="IOleInPlaceActiveObject_RemoteTranslateAccelerator_Proxy" ret="HRESULT" convention="__stdcall"> 
    IOleInPlaceActiveObject * This);
<function name="IOleInPlaceActiveObject_RemoteTranslateAccelerator_Stub" ret="void" convention="__stdcall">
<arg name="This">IRpcStubBuffer *</arg>

    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
<function name="IOleInPlaceActiveObject_RemoteResizeBorder_Proxy" ret="HRESULT" convention="__stdcall"> 
    IOleInPlaceActiveObject * This,
      LPCRECT prcBorder,
      const IID * const riid,
      IOleInPlaceUIWindow *pUIWindow,
     BOOL fFrameWindow);
<function name="IOleInPlaceActiveObject_RemoteResizeBorder_Stub" ret="void" convention="__stdcall">
<arg name="This">IRpcStubBuffer *</arg>

    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
 

typedef    IOleInPlaceFrame *LPOLEINPLACEFRAME;

<struct name="tagOIFI">
<field name="cb">UINT</field>
<field name="fMDIApp">BOOL</field>
<field name="hwndFrame">HWND</field>
<field name="haccel">HACCEL</field>
<field name="cAccelEntries">UINT</field>
    } 	OLEINPLACEFRAMEINFO;

<typedef name="LPOLEINPLACEFRAMEINFO">tagOIFI *</typedef>

<struct name="tagOleMenuGroupWidths">
    LONG width[ 6 ];
    } 	OLEMENUGROUPWIDTHS;

<typedef name="LPOLEMENUGROUPWIDTHS">tagOleMenuGroupWidths *</typedef>

typedef HGLOBAL HOLEMENU;
extern const IID IID_IOleInPlaceFrame;
<struct name="IOleInPlaceFrameVtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            IOleInPlaceFrame * This,
              const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            IOleInPlaceFrame * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            IOleInPlaceFrame * This);
        
<fnptr name="GetWindow" ret="HRESULT" convention="__stdcall">
 
            IOleInPlaceFrame * This,
              HWND *phwnd);
        
<fnptr name="ContextSensitiveHelp" ret="HRESULT" convention="__stdcall">
 
            IOleInPlaceFrame * This,
             BOOL fEnterMode);
        
<fnptr name="GetBorder" ret="HRESULT" convention="__stdcall">
 
            IOleInPlaceFrame * This,
              LPRECT lprectBorder);
        
<fnptr name="RequestBorderSpace" ret="HRESULT" convention="__stdcall">
 
            IOleInPlaceFrame * This,
              LPCBORDERWIDTHS pborderwidths);
        
<fnptr name="SetBorderSpace" ret="HRESULT" convention="__stdcall">
 
            IOleInPlaceFrame * This,
              LPCBORDERWIDTHS pborderwidths);
        
<fnptr name="SetActiveObject" ret="HRESULT" convention="__stdcall">
 
            IOleInPlaceFrame * This,
              IOleInPlaceActiveObject *pActiveObject,
              LPCOLESTR pszObjName);
        
<fnptr name="InsertMenus" ret="HRESULT" convention="__stdcall">
 
            IOleInPlaceFrame * This,
              HMENU hmenuShared,
              LPOLEMENUGROUPWIDTHS lpMenuWidths);
        
<fnptr name="SetMenu" ret="HRESULT" convention="__stdcall">
 
            IOleInPlaceFrame * This,
              HMENU hmenuShared,
              HOLEMENU holemenu,
              HWND hwndActiveObject);
        
<fnptr name="RemoveMenus" ret="HRESULT" convention="__stdcall">
 
            IOleInPlaceFrame * This,
              HMENU hmenuShared);
        
<fnptr name="SetStatusText" ret="HRESULT" convention="__stdcall">
 
            IOleInPlaceFrame * This,
              LPCOLESTR pszStatusText);
        
<fnptr name="EnableModeless" ret="HRESULT" convention="__stdcall">
 
            IOleInPlaceFrame * This,
             BOOL fEnable);
        
<fnptr name="TranslateAcceleratorA" ret="HRESULT" convention="__stdcall">
 
            IOleInPlaceFrame * This,
              LPMSG lpmsg,
             WORD wID);
        
        
    } IOleInPlaceFrameVtbl;

<struct name="IOleInPlaceFrame">
<vptr>IOleInPlaceFrameVtbl *</vptr>
</struct>

    
 

typedef    IOleInPlaceObject *LPOLEINPLACEOBJECT;
extern const IID IID_IOleInPlaceObject;
<struct name="IOleInPlaceObjectVtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            IOleInPlaceObject * This,
              const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            IOleInPlaceObject * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            IOleInPlaceObject * This);
        
<fnptr name="GetWindow" ret="HRESULT" convention="__stdcall">
 
            IOleInPlaceObject * This,
              HWND *phwnd);
        
<fnptr name="ContextSensitiveHelp" ret="HRESULT" convention="__stdcall">
 
            IOleInPlaceObject * This,
             BOOL fEnterMode);
        
<fnptr name="InPlaceDeactivate" ret="HRESULT" convention="__stdcall">
 
            IOleInPlaceObject * This);
        
<fnptr name="UIDeactivate" ret="HRESULT" convention="__stdcall">
 
            IOleInPlaceObject * This);
        
<fnptr name="SetObjectRects" ret="HRESULT" convention="__stdcall">
 
            IOleInPlaceObject * This,
              LPCRECT lprcPosRect,
              LPCRECT lprcClipRect);
        
<fnptr name="ReactivateAndUndo" ret="HRESULT" convention="__stdcall">
 
            IOleInPlaceObject * This);
        
        
    } IOleInPlaceObjectVtbl;

<struct name="IOleInPlaceObject">
<vptr>IOleInPlaceObjectVtbl *</vptr>
</struct>

    

 

typedef    IOleInPlaceSite *LPOLEINPLACESITE;
extern const IID IID_IOleInPlaceSite;
<struct name="IOleInPlaceSiteVtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            IOleInPlaceSite * This,
              const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            IOleInPlaceSite * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            IOleInPlaceSite * This);
        
<fnptr name="GetWindow" ret="HRESULT" convention="__stdcall">
 
            IOleInPlaceSite * This,
              HWND *phwnd);
        
<fnptr name="ContextSensitiveHelp" ret="HRESULT" convention="__stdcall">
 
            IOleInPlaceSite * This,
             BOOL fEnterMode);
        
<fnptr name="CanInPlaceActivate" ret="HRESULT" convention="__stdcall">
 
            IOleInPlaceSite * This);
        
<fnptr name="OnInPlaceActivate" ret="HRESULT" convention="__stdcall">
 
            IOleInPlaceSite * This);
        
<fnptr name="OnUIActivate" ret="HRESULT" convention="__stdcall">
 
            IOleInPlaceSite * This);
        
<fnptr name="GetWindowContext" ret="HRESULT" convention="__stdcall">
 
            IOleInPlaceSite * This,
              IOleInPlaceFrame **ppFrame,
              IOleInPlaceUIWindow **ppDoc,
              LPRECT lprcPosRect,
              LPRECT lprcClipRect,
              LPOLEINPLACEFRAMEINFO lpFrameInfo);
        
<fnptr name="Scroll" ret="HRESULT" convention="__stdcall">
 
            IOleInPlaceSite * This,
             SIZE scrollExtant);
        
<fnptr name="OnUIDeactivate" ret="HRESULT" convention="__stdcall">
 
            IOleInPlaceSite * This,
             BOOL fUndoable);
        
<fnptr name="OnInPlaceDeactivate" ret="HRESULT" convention="__stdcall">
 
            IOleInPlaceSite * This);
        
<fnptr name="DiscardUndoState" ret="HRESULT" convention="__stdcall">
 
            IOleInPlaceSite * This);
        
<fnptr name="DeactivateAndUndo" ret="HRESULT" convention="__stdcall">
 
            IOleInPlaceSite * This);
        
<fnptr name="OnPosRectChange" ret="HRESULT" convention="__stdcall">
 
            IOleInPlaceSite * This,
              LPCRECT lprcPosRect);
        
        
    } IOleInPlaceSiteVtbl;

<struct name="IOleInPlaceSite">
<vptr>IOleInPlaceSiteVtbl *</vptr>
</struct>

    
 
extern const IID IID_IContinue;
<struct name="IContinueVtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            IContinue * This,
              const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            IContinue * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            IContinue * This);
        
<fnptr name="FContinue" ret="HRESULT" convention="__stdcall">
 
            IContinue * This);
        
        
    } IContinueVtbl;

<struct name="IContinue">
<vptr>IContinueVtbl *</vptr>
</struct>

    
 

typedef    IViewObject *LPVIEWOBJECT;
extern const IID IID_IViewObject;
<struct name="IViewObjectVtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            IViewObject * This,
              const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            IViewObject * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            IViewObject * This);
        
<fnptr name="Draw" ret="HRESULT" convention="__stdcall">
 
            IViewObject * This,
             DWORD dwDrawAspect,
             LONG lindex,
             void *pvAspect,
             DVTARGETDEVICE *ptd,
             HDC hdcTargetDev,
             HDC hdcDraw,
             LPCRECTL lprcBounds,
             LPCRECTL lprcWBounds,
<fnptr name="pfnContinue" ret="BOOL" convention="__stdcall">
 
                ULONG_PTR dwContinue),
             ULONG_PTR dwContinue);
        
<fnptr name="GetColorSet" ret="HRESULT" convention="__stdcall">
 
            IViewObject * This,
             DWORD dwDrawAspect,
             LONG lindex,
             void *pvAspect,
             DVTARGETDEVICE *ptd,
             HDC hicTargetDev,
             LOGPALETTE **ppColorSet);
        
<fnptr name="Freeze" ret="HRESULT" convention="__stdcall">
 
            IViewObject * This,
             DWORD dwDrawAspect,
             LONG lindex,
             void *pvAspect,
             DWORD *pdwFreeze);
        
<fnptr name="Unfreeze" ret="HRESULT" convention="__stdcall">
 
            IViewObject * This,
             DWORD dwFreeze);
        
<fnptr name="SetAdvise" ret="HRESULT" convention="__stdcall">
 
            IViewObject * This,
             DWORD aspects,
             DWORD advf,
              IAdviseSink *pAdvSink);
        
<fnptr name="GetAdvise" ret="HRESULT" convention="__stdcall">
 
            IViewObject * This,
             DWORD *pAspects,
             DWORD *pAdvf,
             IAdviseSink **ppAdvSink);
        
        
    } IViewObjectVtbl;

<struct name="IViewObject">
<vptr>IViewObjectVtbl *</vptr>
</struct>

    
<function name="IViewObject_RemoteDraw_Proxy" ret="HRESULT" convention="__stdcall"> 
    IViewObject * This,
     DWORD dwDrawAspect,
     LONG lindex,
     ULONG_PTR pvAspect,
      DVTARGETDEVICE *ptd,
      HDC hdcTargetDev,
      HDC hdcDraw,
      LPCRECTL lprcBounds,
      LPCRECTL lprcWBounds,
      IContinue *pContinue);
<function name="IViewObject_RemoteDraw_Stub" ret="void" convention="__stdcall">
<arg name="This">IRpcStubBuffer *</arg>

    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
<function name="IViewObject_RemoteGetColorSet_Proxy" ret="HRESULT" convention="__stdcall"> 
    IViewObject * This,
     DWORD dwDrawAspect,
     LONG lindex,
     ULONG_PTR pvAspect,
      DVTARGETDEVICE *ptd,
     ULONG_PTR hicTargetDev,
      LOGPALETTE **ppColorSet);
<function name="IViewObject_RemoteGetColorSet_Stub" ret="void" convention="__stdcall">
<arg name="This">IRpcStubBuffer *</arg>

    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
<function name="IViewObject_RemoteFreeze_Proxy" ret="HRESULT" convention="__stdcall"> 
    IViewObject * This,
     DWORD dwDrawAspect,
     LONG lindex,
     ULONG_PTR pvAspect,
      DWORD *pdwFreeze);
<function name="IViewObject_RemoteFreeze_Stub" ret="void" convention="__stdcall">
<arg name="This">IRpcStubBuffer *</arg>

    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
<function name="IViewObject_RemoteGetAdvise_Proxy" ret="HRESULT" convention="__stdcall"> 
    IViewObject * This,
      DWORD *pAspects,
      DWORD *pAdvf,
      IAdviseSink **ppAdvSink);
<function name="IViewObject_RemoteGetAdvise_Stub" ret="void" convention="__stdcall">
<arg name="This">IRpcStubBuffer *</arg>

    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
 

typedef    IViewObject2 *LPVIEWOBJECT2;
extern const IID IID_IViewObject2;
<struct name="IViewObject2Vtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            IViewObject2 * This,
              const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            IViewObject2 * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            IViewObject2 * This);
        
<fnptr name="Draw" ret="HRESULT" convention="__stdcall">
 
            IViewObject2 * This,
             DWORD dwDrawAspect,
             LONG lindex,
             void *pvAspect,
             DVTARGETDEVICE *ptd,
             HDC hdcTargetDev,
             HDC hdcDraw,
             LPCRECTL lprcBounds,
             LPCRECTL lprcWBounds,
<fnptr name="pfnContinue" ret="BOOL" convention="__stdcall">
 
                ULONG_PTR dwContinue),
             ULONG_PTR dwContinue);
        
<fnptr name="GetColorSet" ret="HRESULT" convention="__stdcall">
 
            IViewObject2 * This,
             DWORD dwDrawAspect,
             LONG lindex,
             void *pvAspect,
             DVTARGETDEVICE *ptd,
             HDC hicTargetDev,
             LOGPALETTE **ppColorSet);
        
<fnptr name="Freeze" ret="HRESULT" convention="__stdcall">
 
            IViewObject2 * This,
             DWORD dwDrawAspect,
             LONG lindex,
             void *pvAspect,
             DWORD *pdwFreeze);
        
<fnptr name="Unfreeze" ret="HRESULT" convention="__stdcall">
 
            IViewObject2 * This,
             DWORD dwFreeze);
        
<fnptr name="SetAdvise" ret="HRESULT" convention="__stdcall">
 
            IViewObject2 * This,
             DWORD aspects,
             DWORD advf,
              IAdviseSink *pAdvSink);
        
<fnptr name="GetAdvise" ret="HRESULT" convention="__stdcall">
 
            IViewObject2 * This,
             DWORD *pAspects,
             DWORD *pAdvf,
             IAdviseSink **ppAdvSink);
        
<fnptr name="GetExtent" ret="HRESULT" convention="__stdcall">
 
            IViewObject2 * This,
             DWORD dwDrawAspect,
             LONG lindex,
              DVTARGETDEVICE *ptd,
              LPSIZEL lpsizel);
        
        
    } IViewObject2Vtbl;

<struct name="IViewObject2">
<vptr>IViewObject2Vtbl *</vptr>
</struct>

    
 

typedef  IDropSource *LPDROPSOURCE;
extern const IID IID_IDropSource;
<struct name="IDropSourceVtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            IDropSource * This,
             const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            IDropSource * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            IDropSource * This);
        
<fnptr name="QueryContinueDrag" ret="HRESULT" convention="__stdcall">
 
            IDropSource * This,
             BOOL fEscapePressed,
             DWORD grfKeyState);
        
<fnptr name="GiveFeedback" ret="HRESULT" convention="__stdcall">
 
            IDropSource * This,
             DWORD dwEffect);
        
        
    } IDropSourceVtbl;

<struct name="IDropSource">
<vptr>IDropSourceVtbl *</vptr>
</struct>

    

 

typedef    IDropTarget *LPDROPTARGET;

extern const IID IID_IDropTarget;
<struct name="IDropTargetVtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            IDropTarget * This,
              const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            IDropTarget * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            IDropTarget * This);
        
<fnptr name="DragEnter" ret="HRESULT" convention="__stdcall">
 
            IDropTarget * This,
              IDataObject *pDataObj,
             DWORD grfKeyState,
             POINTL pt,
              DWORD *pdwEffect);
        
<fnptr name="DragOver" ret="HRESULT" convention="__stdcall">
 
            IDropTarget * This,
             DWORD grfKeyState,
             POINTL pt,
              DWORD *pdwEffect);
        
<fnptr name="DragLeave" ret="HRESULT" convention="__stdcall">
 
            IDropTarget * This);
        
<fnptr name="Drop" ret="HRESULT" convention="__stdcall">
 
            IDropTarget * This,
              IDataObject *pDataObj,
             DWORD grfKeyState,
             POINTL pt,
              DWORD *pdwEffect);
        
        
    } IDropTargetVtbl;

<struct name="IDropTarget">
<vptr>IDropTargetVtbl *</vptr>
</struct>

    

 
extern const IID IID_IDropSourceNotify;
<struct name="IDropSourceNotifyVtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            IDropSourceNotify * This,
             const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            IDropSourceNotify * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            IDropSourceNotify * This);
        
<fnptr name="DragEnterTarget" ret="HRESULT" convention="__stdcall">
 
            IDropSourceNotify * This,
             HWND hwndTarget);
        
<fnptr name="DragLeaveTarget" ret="HRESULT" convention="__stdcall">
 
            IDropSourceNotify * This);
        
        
    } IDropSourceNotifyVtbl;

<struct name="IDropSourceNotify">
<vptr>IDropSourceNotifyVtbl *</vptr>
</struct>

    

 

typedef    IEnumOLEVERB *LPENUMOLEVERB;

<struct name="tagOLEVERB">
<field name="lVerb">LONG</field>
<field name="lpszVerbName">LPOLESTR</field>
<field name="fuFlags">DWORD</field>
<field name="grfAttribs">DWORD</field>
    } 	OLEVERB;

<typedef name="LPOLEVERB">tagOLEVERB *</typedef>

typedef  
enum tagOLEVERBATTRIB
    {	OLEVERBATTRIB_NEVERDIRTIES	= 1,
	OLEVERBATTRIB_ONCONTAINERMENU	= 2
    } 	OLEVERBATTRIB;
extern const IID IID_IEnumOLEVERB;
<struct name="IEnumOLEVERBVtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            IEnumOLEVERB * This,
              const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            IEnumOLEVERB * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            IEnumOLEVERB * This);
        
<fnptr name="Next" ret="HRESULT" convention="__stdcall">
 
            IEnumOLEVERB * This,
             ULONG celt,
             LPOLEVERB rgelt,
             ULONG *pceltFetched);
        
<fnptr name="Skip" ret="HRESULT" convention="__stdcall">
 
            IEnumOLEVERB * This,
             ULONG celt);
        
<fnptr name="Reset" ret="HRESULT" convention="__stdcall">
 
            IEnumOLEVERB * This);
        
<fnptr name="Clone" ret="HRESULT" convention="__stdcall">
 
            IEnumOLEVERB * This,
              IEnumOLEVERB **ppenum);
        
        
    } IEnumOLEVERBVtbl;

<struct name="IEnumOLEVERB">
<vptr>IEnumOLEVERBVtbl *</vptr>
</struct>

    

<function name="IEnumOLEVERB_RemoteNext_Proxy" ret="HRESULT" convention="__stdcall"> 
    IEnumOLEVERB * This,
     ULONG celt,
      LPOLEVERB rgelt,
      ULONG *pceltFetched);
<function name="IEnumOLEVERB_RemoteNext_Stub" ret="void" convention="__stdcall">
<arg name="This">IRpcStubBuffer *</arg>

    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
<function name="CLIPFORMAT_UserSize" ret="unsigned long" convention="__stdcall">
     unsigned long *, unsigned long            , CLIPFORMAT * ); 
<function name="CLIPFORMAT_UserMarshal" ret="unsigned char *" convention="__stdcall">
  unsigned long *, unsigned char *, CLIPFORMAT * ); 
<function name="CLIPFORMAT_UserUnmarshal" ret="unsigned char *" convention="__stdcall">
unsigned long *, unsigned char *, CLIPFORMAT * ); 
<function name="CLIPFORMAT_UserFree" ret="void" convention="__stdcall">
     unsigned long *, CLIPFORMAT * ); 

<function name="HACCEL_UserSize" ret="unsigned long" convention="__stdcall">
     unsigned long *, unsigned long            , HACCEL * ); 
<function name="HACCEL_UserMarshal" ret="unsigned char *" convention="__stdcall">
  unsigned long *, unsigned char *, HACCEL * ); 
<function name="HACCEL_UserUnmarshal" ret="unsigned char *" convention="__stdcall">
unsigned long *, unsigned char *, HACCEL * ); 
<function name="HACCEL_UserFree" ret="void" convention="__stdcall">
     unsigned long *, HACCEL * ); 

<function name="HDC_UserSize" ret="unsigned long" convention="__stdcall">
     unsigned long *, unsigned long            , HDC * ); 
<function name="HDC_UserMarshal" ret="unsigned char *" convention="__stdcall">
  unsigned long *, unsigned char *, HDC * ); 
<function name="HDC_UserUnmarshal" ret="unsigned char *" convention="__stdcall">
unsigned long *, unsigned char *, HDC * ); 
<function name="HDC_UserFree" ret="void" convention="__stdcall">
     unsigned long *, HDC * ); 

<function name="HGLOBAL_UserSize" ret="unsigned long" convention="__stdcall">
     unsigned long *, unsigned long            , HGLOBAL * ); 
<function name="HGLOBAL_UserMarshal" ret="unsigned char *" convention="__stdcall">
  unsigned long *, unsigned char *, HGLOBAL * ); 
<function name="HGLOBAL_UserUnmarshal" ret="unsigned char *" convention="__stdcall">
unsigned long *, unsigned char *, HGLOBAL * ); 
<function name="HGLOBAL_UserFree" ret="void" convention="__stdcall">
     unsigned long *, HGLOBAL * ); 

<function name="HMENU_UserSize" ret="unsigned long" convention="__stdcall">
     unsigned long *, unsigned long            , HMENU * ); 
<function name="HMENU_UserMarshal" ret="unsigned char *" convention="__stdcall">
  unsigned long *, unsigned char *, HMENU * ); 
<function name="HMENU_UserUnmarshal" ret="unsigned char *" convention="__stdcall">
unsigned long *, unsigned char *, HMENU * ); 
<function name="HMENU_UserFree" ret="void" convention="__stdcall">
     unsigned long *, HMENU * ); 

<function name="HWND_UserSize" ret="unsigned long" convention="__stdcall">
     unsigned long *, unsigned long            , HWND * ); 
<function name="HWND_UserMarshal" ret="unsigned char *" convention="__stdcall">
  unsigned long *, unsigned char *, HWND * ); 
<function name="HWND_UserUnmarshal" ret="unsigned char *" convention="__stdcall">
unsigned long *, unsigned char *, HWND * ); 
<function name="HWND_UserFree" ret="void" convention="__stdcall">
     unsigned long *, HWND * ); 

<function name="STGMEDIUM_UserSize" ret="unsigned long" convention="__stdcall">
     unsigned long *, unsigned long            , STGMEDIUM * ); 
<function name="STGMEDIUM_UserMarshal" ret="unsigned char *" convention="__stdcall">
  unsigned long *, unsigned char *, STGMEDIUM * ); 
<function name="STGMEDIUM_UserUnmarshal" ret="unsigned char *" convention="__stdcall">
unsigned long *, unsigned char *, STGMEDIUM * ); 
<function name="STGMEDIUM_UserFree" ret="void" convention="__stdcall">
     unsigned long *, STGMEDIUM * ); 

<function name="CLIPFORMAT_UserSize64" ret="unsigned long" convention="__stdcall">
     unsigned long *, unsigned long            , CLIPFORMAT * ); 
<function name="CLIPFORMAT_UserMarshal64" ret="unsigned char *" convention="__stdcall">
  unsigned long *, unsigned char *, CLIPFORMAT * ); 
<function name="CLIPFORMAT_UserUnmarshal64" ret="unsigned char *" convention="__stdcall">
unsigned long *, unsigned char *, CLIPFORMAT * ); 
<function name="CLIPFORMAT_UserFree64" ret="void" convention="__stdcall">
     unsigned long *, CLIPFORMAT * ); 

<function name="HACCEL_UserSize64" ret="unsigned long" convention="__stdcall">
     unsigned long *, unsigned long            , HACCEL * ); 
<function name="HACCEL_UserMarshal64" ret="unsigned char *" convention="__stdcall">
  unsigned long *, unsigned char *, HACCEL * ); 
<function name="HACCEL_UserUnmarshal64" ret="unsigned char *" convention="__stdcall">
unsigned long *, unsigned char *, HACCEL * ); 
<function name="HACCEL_UserFree64" ret="void" convention="__stdcall">
     unsigned long *, HACCEL * ); 

<function name="HDC_UserSize64" ret="unsigned long" convention="__stdcall">
     unsigned long *, unsigned long            , HDC * ); 
<function name="HDC_UserMarshal64" ret="unsigned char *" convention="__stdcall">
  unsigned long *, unsigned char *, HDC * ); 
<function name="HDC_UserUnmarshal64" ret="unsigned char *" convention="__stdcall">
unsigned long *, unsigned char *, HDC * ); 
<function name="HDC_UserFree64" ret="void" convention="__stdcall">
     unsigned long *, HDC * ); 

<function name="HGLOBAL_UserSize64" ret="unsigned long" convention="__stdcall">
     unsigned long *, unsigned long            , HGLOBAL * ); 
<function name="HGLOBAL_UserMarshal64" ret="unsigned char *" convention="__stdcall">
  unsigned long *, unsigned char *, HGLOBAL * ); 
<function name="HGLOBAL_UserUnmarshal64" ret="unsigned char *" convention="__stdcall">
unsigned long *, unsigned char *, HGLOBAL * ); 
<function name="HGLOBAL_UserFree64" ret="void" convention="__stdcall">
     unsigned long *, HGLOBAL * ); 

<function name="HMENU_UserSize64" ret="unsigned long" convention="__stdcall">
     unsigned long *, unsigned long            , HMENU * ); 
<function name="HMENU_UserMarshal64" ret="unsigned char *" convention="__stdcall">
  unsigned long *, unsigned char *, HMENU * ); 
<function name="HMENU_UserUnmarshal64" ret="unsigned char *" convention="__stdcall">
unsigned long *, unsigned char *, HMENU * ); 
<function name="HMENU_UserFree64" ret="void" convention="__stdcall">
     unsigned long *, HMENU * ); 

<function name="HWND_UserSize64" ret="unsigned long" convention="__stdcall">
     unsigned long *, unsigned long            , HWND * ); 
<function name="HWND_UserMarshal64" ret="unsigned char *" convention="__stdcall">
  unsigned long *, unsigned char *, HWND * ); 
<function name="HWND_UserUnmarshal64" ret="unsigned char *" convention="__stdcall">
unsigned long *, unsigned char *, HWND * ); 
<function name="HWND_UserFree64" ret="void" convention="__stdcall">
     unsigned long *, HWND * ); 

<function name="STGMEDIUM_UserSize64" ret="unsigned long" convention="__stdcall">
     unsigned long *, unsigned long            , STGMEDIUM * ); 
<function name="STGMEDIUM_UserMarshal64" ret="unsigned char *" convention="__stdcall">
  unsigned long *, unsigned char *, STGMEDIUM * ); 
<function name="STGMEDIUM_UserUnmarshal64" ret="unsigned char *" convention="__stdcall">
unsigned long *, unsigned char *, STGMEDIUM * ); 
<function name="STGMEDIUM_UserFree64" ret="void" convention="__stdcall">
     unsigned long *, STGMEDIUM * ); 

<function name="IOleCache2_UpdateCache_Proxy" ret="HRESULT" convention="__stdcall">
 
    IOleCache2 * This,
     LPDATAOBJECT pDataObject,
     DWORD grfUpdf,
     LPVOID pReserved);
<function name="IOleCache2_UpdateCache_Stub" ret="HRESULT" convention="__stdcall"> 
    IOleCache2 * This,
      LPDATAOBJECT pDataObject,
     DWORD grfUpdf,
     LONG_PTR pReserved);

<function name="IOleInPlaceActiveObject_TranslateAccelerator_Proxy" ret="HRESULT" convention="__stdcall"> 
    IOleInPlaceActiveObject * This,
     LPMSG lpmsg);
<function name="IOleInPlaceActiveObject_TranslateAccelerator_Stub" ret="HRESULT" convention="__stdcall"> 
    IOleInPlaceActiveObject * This);

<function name="IOleInPlaceActiveObject_ResizeBorder_Proxy" ret="HRESULT" convention="__stdcall"> 
    IOleInPlaceActiveObject * This,
     LPCRECT prcBorder,
     IOleInPlaceUIWindow *pUIWindow,
     BOOL fFrameWindow);
<function name="IOleInPlaceActiveObject_ResizeBorder_Stub" ret="HRESULT" convention="__stdcall"> 
    IOleInPlaceActiveObject * This,
      LPCRECT prcBorder,
      const IID * const riid,
      IOleInPlaceUIWindow *pUIWindow,
     BOOL fFrameWindow);

<function name="IViewObject_Draw_Proxy" ret="HRESULT" convention="__stdcall"> 
    IViewObject * This,
     DWORD dwDrawAspect,
     LONG lindex,
     void *pvAspect,
     DVTARGETDEVICE *ptd,
     HDC hdcTargetDev,
     HDC hdcDraw,
     LPCRECTL lprcBounds,
     LPCRECTL lprcWBounds,
<fnptr name="pfnContinue" ret="BOOL" convention="__stdcall">
 
        ULONG_PTR dwContinue),
     ULONG_PTR dwContinue);
<function name="IViewObject_Draw_Stub" ret="HRESULT" convention="__stdcall"> 
    IViewObject * This,
     DWORD dwDrawAspect,
     LONG lindex,
     ULONG_PTR pvAspect,
      DVTARGETDEVICE *ptd,
      HDC hdcTargetDev,
      HDC hdcDraw,
      LPCRECTL lprcBounds,
      LPCRECTL lprcWBounds,
      IContinue *pContinue);

<function name="IViewObject_GetColorSet_Proxy" ret="HRESULT" convention="__stdcall"> 
    IViewObject * This,
     DWORD dwDrawAspect,
     LONG lindex,
     void *pvAspect,
     DVTARGETDEVICE *ptd,
     HDC hicTargetDev,
     LOGPALETTE **ppColorSet);
<function name="IViewObject_GetColorSet_Stub" ret="HRESULT" convention="__stdcall"> 
    IViewObject * This,
     DWORD dwDrawAspect,
     LONG lindex,
     ULONG_PTR pvAspect,
      DVTARGETDEVICE *ptd,
     ULONG_PTR hicTargetDev,
      LOGPALETTE **ppColorSet);

<function name="IViewObject_Freeze_Proxy" ret="HRESULT" convention="__stdcall"> 
    IViewObject * This,
     DWORD dwDrawAspect,
     LONG lindex,
     void *pvAspect,
     DWORD *pdwFreeze);
<function name="IViewObject_Freeze_Stub" ret="HRESULT" convention="__stdcall"> 
    IViewObject * This,
     DWORD dwDrawAspect,
     LONG lindex,
     ULONG_PTR pvAspect,
      DWORD *pdwFreeze);

<function name="IViewObject_GetAdvise_Proxy" ret="HRESULT" convention="__stdcall"> 
    IViewObject * This,
     DWORD *pAspects,
     DWORD *pAdvf,
     IAdviseSink **ppAdvSink);
<function name="IViewObject_GetAdvise_Stub" ret="HRESULT" convention="__stdcall"> 
    IViewObject * This,
      DWORD *pAspects,
      DWORD *pAdvf,
      IAdviseSink **ppAdvSink);

<function name="IEnumOLEVERB_Next_Proxy" ret="HRESULT" convention="__stdcall"> 
    IEnumOLEVERB * This,
     ULONG celt,
     LPOLEVERB rgelt,
     ULONG *pceltFetched);
<function name="IEnumOLEVERB_Next_Stub" ret="HRESULT" convention="__stdcall"> 
    IEnumOLEVERB * This,
     ULONG celt,
      LPOLEVERB rgelt,
      ULONG *pceltFetched);
#line 1 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\servprov.h"
 
#pragma warning( disable: 4049 )  

#pragma once
 
 
#pragma comment(lib,"uuid.lib")
extern RPC_IF_HANDLE __MIDL_itf_servprov_0000_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_servprov_0000_0000_v0_0_s_ifspec;
 

typedef    IServiceProvider *LPSERVICEPROVIDER;
extern const IID IID_IServiceProvider;
<struct name="IServiceProviderVtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            IServiceProvider * This,
              const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            IServiceProvider * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            IServiceProvider * This);
        
<fnptr name="QueryService" ret="HRESULT" convention="__stdcall">
 
            IServiceProvider * This,
             const GUID * const guidService,
             const IID * const riid,
             void **ppvObject);
        
        
    } IServiceProviderVtbl;

<struct name="IServiceProvider">
<vptr>IServiceProviderVtbl *</vptr>
</struct>

    
<function name="IServiceProvider_RemoteQueryService_Proxy" ret="HRESULT" convention="__stdcall"> 
    IServiceProvider * This,
      const GUID * const guidService,
      const IID * const riid,
      IUnknown **ppvObject);
<function name="IServiceProvider_RemoteQueryService_Stub" ret="void" convention="__stdcall">
<arg name="This">IRpcStubBuffer *</arg>

    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 
extern RPC_IF_HANDLE __MIDL_itf_servprov_0000_0001_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_servprov_0000_0001_v0_0_s_ifspec;
<function name="IServiceProvider_QueryService_Proxy" ret="HRESULT" convention="__stdcall"> 
    IServiceProvider * This,
     const GUID * const guidService,
     const IID * const riid,
     void **ppvObject);
<function name="IServiceProvider_QueryService_Stub" ret="HRESULT" convention="__stdcall"> 
    IServiceProvider * This,
      const GUID * const guidService,
      const IID * const riid,
      IUnknown **ppvObject);
#line 1 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\msxml.h"
 
#pragma warning( disable: 4049 )  
#pragma once
 














#line 1 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\oaidl.h"
 
#pragma warning( disable: 4049 )  

#pragma once
 












 
#pragma warning(push)
#pragma warning(disable:4201)    

#pragma once

extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0000_v0_0_s_ifspec;
 

typedef CY CURRENCY;

<struct name="tagSAFEARRAYBOUND">
<field name="cElements">ULONG</field>
<field name="lLbound">LONG</field>
    } 	SAFEARRAYBOUND;

<typedef name="LPSAFEARRAYBOUND">tagSAFEARRAYBOUND *</typedef>
<typedef name="wireVARIANT">_wireVARIANT *</typedef>

<typedef name="wireBRECORD">_wireBRECORD *</typedef>

<struct name="_wireSAFEARR_BSTR">
<field name="Size">ULONG</field>
    wireBSTR *aBstr;
    } 	SAFEARR_BSTR;

<struct name="_wireSAFEARR_UNKNOWN">
<field name="Size">ULONG</field>
    IUnknown **apUnknown;
    } 	SAFEARR_UNKNOWN;

<struct name="_wireSAFEARR_DISPATCH">
<field name="Size">ULONG</field>
    IDispatch **apDispatch;
    } 	SAFEARR_DISPATCH;

<struct name="_wireSAFEARR_VARIANT">
<field name="Size">ULONG</field>
    wireVARIANT *aVariant;
    } 	SAFEARR_VARIANT;

<struct name="_wireSAFEARR_BRECORD">
<field name="Size">ULONG</field>
    wireBRECORD *aRecord;
    } 	SAFEARR_BRECORD;

<struct name="_wireSAFEARR_HAVEIID">
<field name="Size">ULONG</field>
    IUnknown **apUnknown;
    IID iid;
    } 	SAFEARR_HAVEIID;

typedef  
enum tagSF_TYPE
    {	SF_ERROR	= VT_ERROR,
	SF_I1	= VT_I1,
	SF_I2	= VT_I2,
	SF_I4	= VT_I4,
	SF_I8	= VT_I8,
	SF_BSTR	= VT_BSTR,
	SF_UNKNOWN	= VT_UNKNOWN,
	SF_DISPATCH	= VT_DISPATCH,
	SF_VARIANT	= VT_VARIANT,
	SF_RECORD	= VT_RECORD,
	SF_HAVEIID	= ( VT_UNKNOWN | VT_RESERVED ) 
    } 	SF_TYPE;

<struct name="_wireSAFEARRAY_UNION">
<field name="sfType">ULONG</field>
     union __MIDL_IOleAutomationTypes_0001
        {
        SAFEARR_BSTR BstrStr;
        SAFEARR_UNKNOWN UnknownStr;
        SAFEARR_DISPATCH DispatchStr;
        SAFEARR_VARIANT VariantStr;
        SAFEARR_BRECORD RecordStr;
        SAFEARR_HAVEIID HaveIidStr;
        BYTE_SIZEDARR ByteStr;
        WORD_SIZEDARR WordStr;
        DWORD_SIZEDARR LongStr;
        HYPER_SIZEDARR HyperStr;
        } 	u;
    } 	SAFEARRAYUNION;

<struct name="_wireSAFEARRAY">
<field name="cDims">USHORT</field>
<field name="fFeatures">USHORT</field>
<field name="cbElements">ULONG</field>
<field name="cLocks">ULONG</field>
<field name="uArrayStructs">SAFEARRAYUNION</field>
<field name="rgsabound[ 1 ]">SAFEARRAYBOUND</field>
    } 	*wireSAFEARRAY;

typedef    wireSAFEARRAY *wirePSAFEARRAY;

<struct name="tagSAFEARRAY">
<field name="cDims">USHORT</field>
<field name="fFeatures">USHORT</field>
<field name="cbElements">ULONG</field>
<field name="cLocks">ULONG</field>
<field name="pvData">PVOID</field>
<field name="rgsabound[ 1 ]">SAFEARRAYBOUND</field>
    } 	SAFEARRAY;

typedef  SAFEARRAY *LPSAFEARRAY;

typedef  struct tagVARIANT VARIANT;

<struct name="tagVARIANT">
    union 
        {
<struct>
<field name="vt">VARTYPE</field>
<field name="wReserved1">WORD</field>
<field name="wReserved2">WORD</field>
<field name="wReserved3">WORD</field>
            union 
                {
                LONGLONG llVal;
                LONG lVal;
                BYTE bVal;
                SHORT iVal;
                FLOAT fltVal;
                DOUBLE dblVal;
                VARIANT_BOOL boolVal;
                
                SCODE scode;
                CY cyVal;
                DATE date;
                BSTR bstrVal;
                IUnknown *punkVal;
                IDispatch *pdispVal;
                SAFEARRAY *parray;
                BYTE *pbVal;
                SHORT *piVal;
                LONG *plVal;
                LONGLONG *pllVal;
                FLOAT *pfltVal;
                DOUBLE *pdblVal;
                VARIANT_BOOL *pboolVal;
                
                SCODE *pscode;
                CY *pcyVal;
                DATE *pdate;
                BSTR *pbstrVal;
                IUnknown **ppunkVal;
                IDispatch **ppdispVal;
                SAFEARRAY **pparray;
                VARIANT *pvarVal;
                PVOID byref;
                CHAR cVal;
                USHORT uiVal;
                ULONG ulVal;
                ULONGLONG ullVal;
                INT intVal;
                UINT uintVal;
                DECIMAL *pdecVal;
                CHAR *pcVal;
                USHORT *puiVal;
                ULONG *pulVal;
                ULONGLONG *pullVal;
                INT *pintVal;
                UINT *puintVal;
<struct>
<field name="pvRecord">PVOID</field>
                    IRecordInfo *pRecInfo;
                    } 	;
                } 	;
            } 	;
        DECIMAL decVal;
        } 	;
    } ;
typedef VARIANT *LPVARIANT;

typedef VARIANT VARIANTARG;

typedef VARIANT *LPVARIANTARG;

<struct name="_wireBRECORD">
<field name="fFlags">ULONG</field>
<field name="clSize">ULONG</field>
    IRecordInfo *pRecInfo;
    byte *pRecord;
    } ;
<struct name="_wireVARIANT">
<field name="clSize">DWORD</field>
<field name="rpcReserved">DWORD</field>
<field name="vt">USHORT</field>
<field name="wReserved1">USHORT</field>
<field name="wReserved2">USHORT</field>
<field name="wReserved3">USHORT</field>
    union 
        {
        LONGLONG llVal;
        LONG lVal;
        BYTE bVal;
        SHORT iVal;
        FLOAT fltVal;
        DOUBLE dblVal;
        VARIANT_BOOL boolVal;
        SCODE scode;
        CY cyVal;
        DATE date;
        wireBSTR bstrVal;
        IUnknown *punkVal;
        IDispatch *pdispVal;
        wirePSAFEARRAY parray;
        wireBRECORD brecVal;
        BYTE *pbVal;
        SHORT *piVal;
        LONG *plVal;
        LONGLONG *pllVal;
        FLOAT *pfltVal;
        DOUBLE *pdblVal;
        VARIANT_BOOL *pboolVal;
        SCODE *pscode;
        CY *pcyVal;
        DATE *pdate;
        wireBSTR *pbstrVal;
        IUnknown **ppunkVal;
        IDispatch **ppdispVal;
        wirePSAFEARRAY *pparray;
        wireVARIANT *pvarVal;
        CHAR cVal;
        USHORT uiVal;
        ULONG ulVal;
        ULONGLONG ullVal;
        INT intVal;
        UINT uintVal;
        DECIMAL decVal;
        DECIMAL *pdecVal;
        CHAR *pcVal;
        USHORT *puiVal;
        ULONG *pulVal;
        ULONGLONG *pullVal;
        INT *pintVal;
        UINT *puintVal;
          
          
        } 	;
    } ;
typedef LONG DISPID;

typedef DISPID MEMBERID;

typedef DWORD HREFTYPE;

typedef  
enum tagTYPEKIND
    {	TKIND_ENUM	= 0,
	TKIND_RECORD	= ( TKIND_ENUM + 1 ) ,
	TKIND_MODULE	= ( TKIND_RECORD + 1 ) ,
	TKIND_INTERFACE	= ( TKIND_MODULE + 1 ) ,
	TKIND_DISPATCH	= ( TKIND_INTERFACE + 1 ) ,
	TKIND_COCLASS	= ( TKIND_DISPATCH + 1 ) ,
	TKIND_ALIAS	= ( TKIND_COCLASS + 1 ) ,
	TKIND_UNION	= ( TKIND_ALIAS + 1 ) ,
	TKIND_MAX	= ( TKIND_UNION + 1 ) 
    } 	TYPEKIND;

<struct name="tagTYPEDESC">
    union 
        {
        struct tagTYPEDESC *lptdesc;
        struct tagARRAYDESC *lpadesc;
        HREFTYPE hreftype;
          
        } 	;
    VARTYPE vt;
    } 	TYPEDESC;

<struct name="tagARRAYDESC">
<field name="tdescElem">TYPEDESC</field>
<field name="cDims">USHORT</field>
<field name="rgbounds[ 1 ]">SAFEARRAYBOUND</field>
    } 	ARRAYDESC;

<struct name="tagPARAMDESCEX">
<field name="cBytes">ULONG</field>
<field name="varDefaultValue">VARIANTARG</field>
    } 	PARAMDESCEX;

<typedef name="LPPARAMDESCEX">tagPARAMDESCEX *</typedef>

<struct name="tagPARAMDESC">
<field name="pparamdescex">LPPARAMDESCEX</field>
<field name="wParamFlags">USHORT</field>
    } 	PARAMDESC;

<typedef name="LPPARAMDESC">tagPARAMDESC *</typedef>
<struct name="tagIDLDESC">
<field name="dwReserved">ULONG_PTR</field>
<field name="wIDLFlags">USHORT</field>
    } 	IDLDESC;

<typedef name="LPIDLDESC">tagIDLDESC *</typedef>
<struct name="tagELEMDESC">
<field name="tdesc">TYPEDESC</field>
    union {
        IDLDESC idldesc;        
        PARAMDESC paramdesc;    
    };
} ELEMDESC, * LPELEMDESC;
<struct name="tagTYPEATTR">
<field name="guid">GUID</field>
<field name="lcid">LCID</field>
<field name="dwReserved">DWORD</field>
<field name="memidConstructor">MEMBERID</field>
<field name="memidDestructor">MEMBERID</field>
<field name="lpstrSchema">LPOLESTR</field>
<field name="cbSizeInstance">ULONG</field>
<field name="typekind">TYPEKIND</field>
<field name="cFuncs">WORD</field>
<field name="cVars">WORD</field>
<field name="cImplTypes">WORD</field>
<field name="cbSizeVft">WORD</field>
<field name="cbAlignment">WORD</field>
<field name="wTypeFlags">WORD</field>
<field name="wMajorVerNum">WORD</field>
<field name="wMinorVerNum">WORD</field>
<field name="tdescAlias">TYPEDESC</field>
<field name="idldescType">IDLDESC</field>
    } 	TYPEATTR;

<typedef name="LPTYPEATTR">tagTYPEATTR *</typedef>

<struct name="tagDISPPARAMS">
    VARIANTARG *rgvarg;
    DISPID *rgdispidNamedArgs;
    UINT cArgs;
    UINT cNamedArgs;
    } 	DISPPARAMS;
<struct name="tagEXCEPINFO">
<field name="wCode">WORD</field>
<field name="wReserved">WORD</field>
<field name="bstrSource">BSTR</field>
<field name="bstrDescription">BSTR</field>
<field name="bstrHelpFile">BSTR</field>
<field name="dwHelpContext">DWORD</field>
<field name="pvReserved">PVOID</field>
<fnptr name="pfnDeferredFillIn" ret="HRESULT" convention="__stdcall">
struct tagEXCEPINFO *);
    SCODE scode;
} EXCEPINFO, * LPEXCEPINFO;
typedef  
enum tagCALLCONV
    {	CC_FASTCALL	= 0,
	CC_CDECL	= 1,
	CC_MSCPASCAL	= ( CC_CDECL + 1 ) ,
	CC_PASCAL	= CC_MSCPASCAL,
	CC_MACPASCAL	= ( CC_PASCAL + 1 ) ,
	CC_STDCALL	= ( CC_MACPASCAL + 1 ) ,
	CC_FPFASTCALL	= ( CC_STDCALL + 1 ) ,
	CC_SYSCALL	= ( CC_FPFASTCALL + 1 ) ,
	CC_MPWCDECL	= ( CC_SYSCALL + 1 ) ,
	CC_MPWPASCAL	= ( CC_MPWCDECL + 1 ) ,
	CC_MAX	= ( CC_MPWPASCAL + 1 ) 
    } 	CALLCONV;

typedef  
enum tagFUNCKIND
    {	FUNC_VIRTUAL	= 0,
	FUNC_PUREVIRTUAL	= ( FUNC_VIRTUAL + 1 ) ,
	FUNC_NONVIRTUAL	= ( FUNC_PUREVIRTUAL + 1 ) ,
	FUNC_STATIC	= ( FUNC_NONVIRTUAL + 1 ) ,
	FUNC_DISPATCH	= ( FUNC_STATIC + 1 ) 
    } 	FUNCKIND;

typedef  
enum tagINVOKEKIND
    {	INVOKE_FUNC	= 1,
	INVOKE_PROPERTYGET	= 2,
	INVOKE_PROPERTYPUT	= 4,
	INVOKE_PROPERTYPUTREF	= 8
    } 	INVOKEKIND;

<struct name="tagFUNCDESC">
<field name="memid">MEMBERID</field>
    SCODE *lprgscode;
    ELEMDESC *lprgelemdescParam;
    FUNCKIND funckind;
    INVOKEKIND invkind;
    CALLCONV callconv;
    SHORT cParams;
    SHORT cParamsOpt;
    SHORT oVft;
    SHORT cScodes;
    ELEMDESC elemdescFunc;
    WORD wFuncFlags;
    } 	FUNCDESC;

<typedef name="LPFUNCDESC">tagFUNCDESC *</typedef>

typedef  
enum tagVARKIND
    {	VAR_PERINSTANCE	= 0,
	VAR_STATIC	= ( VAR_PERINSTANCE + 1 ) ,
	VAR_CONST	= ( VAR_STATIC + 1 ) ,
	VAR_DISPATCH	= ( VAR_CONST + 1 ) 
    } 	VARKIND;
<struct name="tagVARDESC">
<field name="memid">MEMBERID</field>
<field name="lpstrSchema">LPOLESTR</field>
    union 
        {
        ULONG oInst;
        VARIANT *lpvarValue;
        } 	;
    ELEMDESC elemdescVar;
    WORD wVarFlags;
    VARKIND varkind;
    } 	VARDESC;

<typedef name="LPVARDESC">tagVARDESC *</typedef>

typedef 
enum tagTYPEFLAGS
    {	TYPEFLAG_FAPPOBJECT	= 0x1,
	TYPEFLAG_FCANCREATE	= 0x2,
	TYPEFLAG_FLICENSED	= 0x4,
	TYPEFLAG_FPREDECLID	= 0x8,
	TYPEFLAG_FHIDDEN	= 0x10,
	TYPEFLAG_FCONTROL	= 0x20,
	TYPEFLAG_FDUAL	= 0x40,
	TYPEFLAG_FNONEXTENSIBLE	= 0x80,
	TYPEFLAG_FOLEAUTOMATION	= 0x100,
	TYPEFLAG_FRESTRICTED	= 0x200,
	TYPEFLAG_FAGGREGATABLE	= 0x400,
	TYPEFLAG_FREPLACEABLE	= 0x800,
	TYPEFLAG_FDISPATCHABLE	= 0x1000,
	TYPEFLAG_FREVERSEBIND	= 0x2000,
	TYPEFLAG_FPROXY	= 0x4000
    } 	TYPEFLAGS;

typedef 
enum tagFUNCFLAGS
    {	FUNCFLAG_FRESTRICTED	= 0x1,
	FUNCFLAG_FSOURCE	= 0x2,
	FUNCFLAG_FBINDABLE	= 0x4,
	FUNCFLAG_FREQUESTEDIT	= 0x8,
	FUNCFLAG_FDISPLAYBIND	= 0x10,
	FUNCFLAG_FDEFAULTBIND	= 0x20,
	FUNCFLAG_FHIDDEN	= 0x40,
	FUNCFLAG_FUSESGETLASTERROR	= 0x80,
	FUNCFLAG_FDEFAULTCOLLELEM	= 0x100,
	FUNCFLAG_FUIDEFAULT	= 0x200,
	FUNCFLAG_FNONBROWSABLE	= 0x400,
	FUNCFLAG_FREPLACEABLE	= 0x800,
	FUNCFLAG_FIMMEDIATEBIND	= 0x1000
    } 	FUNCFLAGS;

typedef 
enum tagVARFLAGS
    {	VARFLAG_FREADONLY	= 0x1,
	VARFLAG_FSOURCE	= 0x2,
	VARFLAG_FBINDABLE	= 0x4,
	VARFLAG_FREQUESTEDIT	= 0x8,
	VARFLAG_FDISPLAYBIND	= 0x10,
	VARFLAG_FDEFAULTBIND	= 0x20,
	VARFLAG_FHIDDEN	= 0x40,
	VARFLAG_FRESTRICTED	= 0x80,
	VARFLAG_FDEFAULTCOLLELEM	= 0x100,
	VARFLAG_FUIDEFAULT	= 0x200,
	VARFLAG_FNONBROWSABLE	= 0x400,
	VARFLAG_FREPLACEABLE	= 0x800,
	VARFLAG_FIMMEDIATEBIND	= 0x1000
    } 	VARFLAGS;

<struct name="tagCLEANLOCALSTORAGE">
    IUnknown *pInterface;
    PVOID pStorage;
    DWORD flags;
    } 	CLEANLOCALSTORAGE;

<struct name="tagCUSTDATAITEM">
<field name="guid">GUID</field>
<field name="varValue">VARIANTARG</field>
    } 	CUSTDATAITEM;

<typedef name="LPCUSTDATAITEM">tagCUSTDATAITEM *</typedef>

<struct name="tagCUSTDATA">
<field name="cCustData">DWORD</field>
<field name="prgCustData">LPCUSTDATAITEM</field>
    } 	CUSTDATA;

<typedef name="LPCUSTDATA">tagCUSTDATA *</typedef>
extern RPC_IF_HANDLE IOleAutomationTypes_v1_0_c_ifspec;
extern RPC_IF_HANDLE IOleAutomationTypes_v1_0_s_ifspec;

 

typedef  ICreateTypeInfo *LPCREATETYPEINFO;
extern const IID IID_ICreateTypeInfo;
<struct name="ICreateTypeInfoVtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            ICreateTypeInfo * This,
             const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            ICreateTypeInfo * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            ICreateTypeInfo * This);
        
<fnptr name="SetGuid" ret="HRESULT" convention="__stdcall">
 
            ICreateTypeInfo * This,
             const GUID * const guid);
        
<fnptr name="SetTypeFlags" ret="HRESULT" convention="__stdcall">
 
            ICreateTypeInfo * This,
             UINT uTypeFlags);
        
<fnptr name="SetDocString" ret="HRESULT" convention="__stdcall">
 
            ICreateTypeInfo * This,
             LPOLESTR pStrDoc);
        
<fnptr name="SetHelpContext" ret="HRESULT" convention="__stdcall">
 
            ICreateTypeInfo * This,
             DWORD dwHelpContext);
        
<fnptr name="SetVersion" ret="HRESULT" convention="__stdcall">
 
            ICreateTypeInfo * This,
             WORD wMajorVerNum,
             WORD wMinorVerNum);
        
<fnptr name="AddRefTypeInfo" ret="HRESULT" convention="__stdcall">
 
            ICreateTypeInfo * This,
             ITypeInfo *pTInfo,
             HREFTYPE *phRefType);
        
<fnptr name="AddFuncDesc" ret="HRESULT" convention="__stdcall">
 
            ICreateTypeInfo * This,
             UINT index,
             FUNCDESC *pFuncDesc);
        
<fnptr name="AddImplType" ret="HRESULT" convention="__stdcall">
 
            ICreateTypeInfo * This,
             UINT index,
             HREFTYPE hRefType);
        
<fnptr name="SetImplTypeFlags" ret="HRESULT" convention="__stdcall">
 
            ICreateTypeInfo * This,
             UINT index,
             INT implTypeFlags);
        
<fnptr name="SetAlignment" ret="HRESULT" convention="__stdcall">
 
            ICreateTypeInfo * This,
             WORD cbAlignment);
        
<fnptr name="SetSchema" ret="HRESULT" convention="__stdcall">
 
            ICreateTypeInfo * This,
             LPOLESTR pStrSchema);
        
<fnptr name="AddVarDesc" ret="HRESULT" convention="__stdcall">
 
            ICreateTypeInfo * This,
             UINT index,
             VARDESC *pVarDesc);
        
<fnptr name="SetFuncAndParamNames" ret="HRESULT" convention="__stdcall">
 
            ICreateTypeInfo * This,
             UINT index,
             LPOLESTR *rgszNames,
             UINT cNames);
        
<fnptr name="SetVarName" ret="HRESULT" convention="__stdcall">
 
            ICreateTypeInfo * This,
             UINT index,
             LPOLESTR szName);
        
<fnptr name="SetTypeDescAlias" ret="HRESULT" convention="__stdcall">
 
            ICreateTypeInfo * This,
             TYPEDESC *pTDescAlias);
        
<fnptr name="DefineFuncAsDllEntry" ret="HRESULT" convention="__stdcall">
 
            ICreateTypeInfo * This,
             UINT index,
             LPOLESTR szDllName,
             LPOLESTR szProcName);
        
<fnptr name="SetFuncDocString" ret="HRESULT" convention="__stdcall">
 
            ICreateTypeInfo * This,
             UINT index,
             LPOLESTR szDocString);
        
<fnptr name="SetVarDocString" ret="HRESULT" convention="__stdcall">
 
            ICreateTypeInfo * This,
             UINT index,
             LPOLESTR szDocString);
        
<fnptr name="SetFuncHelpContext" ret="HRESULT" convention="__stdcall">
 
            ICreateTypeInfo * This,
             UINT index,
             DWORD dwHelpContext);
        
<fnptr name="SetVarHelpContext" ret="HRESULT" convention="__stdcall">
 
            ICreateTypeInfo * This,
             UINT index,
             DWORD dwHelpContext);
        
<fnptr name="SetMops" ret="HRESULT" convention="__stdcall">
 
            ICreateTypeInfo * This,
             UINT index,
             BSTR bstrMops);
        
<fnptr name="SetTypeIdldesc" ret="HRESULT" convention="__stdcall">
 
            ICreateTypeInfo * This,
             IDLDESC *pIdlDesc);
        
<fnptr name="LayOut" ret="HRESULT" convention="__stdcall">
 
            ICreateTypeInfo * This);
        
        
    } ICreateTypeInfoVtbl;

<struct name="ICreateTypeInfo">
<vptr>ICreateTypeInfoVtbl *</vptr>
</struct>

    

 

typedef  ICreateTypeInfo2 *LPCREATETYPEINFO2;
extern const IID IID_ICreateTypeInfo2;
<struct name="ICreateTypeInfo2Vtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            ICreateTypeInfo2 * This,
             const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            ICreateTypeInfo2 * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            ICreateTypeInfo2 * This);
        
<fnptr name="SetGuid" ret="HRESULT" convention="__stdcall">
 
            ICreateTypeInfo2 * This,
             const GUID * const guid);
        
<fnptr name="SetTypeFlags" ret="HRESULT" convention="__stdcall">
 
            ICreateTypeInfo2 * This,
             UINT uTypeFlags);
        
<fnptr name="SetDocString" ret="HRESULT" convention="__stdcall">
 
            ICreateTypeInfo2 * This,
             LPOLESTR pStrDoc);
        
<fnptr name="SetHelpContext" ret="HRESULT" convention="__stdcall">
 
            ICreateTypeInfo2 * This,
             DWORD dwHelpContext);
        
<fnptr name="SetVersion" ret="HRESULT" convention="__stdcall">
 
            ICreateTypeInfo2 * This,
             WORD wMajorVerNum,
             WORD wMinorVerNum);
        
<fnptr name="AddRefTypeInfo" ret="HRESULT" convention="__stdcall">
 
            ICreateTypeInfo2 * This,
             ITypeInfo *pTInfo,
             HREFTYPE *phRefType);
        
<fnptr name="AddFuncDesc" ret="HRESULT" convention="__stdcall">
 
            ICreateTypeInfo2 * This,
             UINT index,
             FUNCDESC *pFuncDesc);
        
<fnptr name="AddImplType" ret="HRESULT" convention="__stdcall">
 
            ICreateTypeInfo2 * This,
             UINT index,
             HREFTYPE hRefType);
        
<fnptr name="SetImplTypeFlags" ret="HRESULT" convention="__stdcall">
 
            ICreateTypeInfo2 * This,
             UINT index,
             INT implTypeFlags);
        
<fnptr name="SetAlignment" ret="HRESULT" convention="__stdcall">
 
            ICreateTypeInfo2 * This,
             WORD cbAlignment);
        
<fnptr name="SetSchema" ret="HRESULT" convention="__stdcall">
 
            ICreateTypeInfo2 * This,
             LPOLESTR pStrSchema);
        
<fnptr name="AddVarDesc" ret="HRESULT" convention="__stdcall">
 
            ICreateTypeInfo2 * This,
             UINT index,
             VARDESC *pVarDesc);
        
<fnptr name="SetFuncAndParamNames" ret="HRESULT" convention="__stdcall">
 
            ICreateTypeInfo2 * This,
             UINT index,
             LPOLESTR *rgszNames,
             UINT cNames);
        
<fnptr name="SetVarName" ret="HRESULT" convention="__stdcall">
 
            ICreateTypeInfo2 * This,
             UINT index,
             LPOLESTR szName);
        
<fnptr name="SetTypeDescAlias" ret="HRESULT" convention="__stdcall">
 
            ICreateTypeInfo2 * This,
             TYPEDESC *pTDescAlias);
        
<fnptr name="DefineFuncAsDllEntry" ret="HRESULT" convention="__stdcall">
 
            ICreateTypeInfo2 * This,
             UINT index,
             LPOLESTR szDllName,
             LPOLESTR szProcName);
        
<fnptr name="SetFuncDocString" ret="HRESULT" convention="__stdcall">
 
            ICreateTypeInfo2 * This,
             UINT index,
             LPOLESTR szDocString);
        
<fnptr name="SetVarDocString" ret="HRESULT" convention="__stdcall">
 
            ICreateTypeInfo2 * This,
             UINT index,
             LPOLESTR szDocString);
        
<fnptr name="SetFuncHelpContext" ret="HRESULT" convention="__stdcall">
 
            ICreateTypeInfo2 * This,
             UINT index,
             DWORD dwHelpContext);
        
<fnptr name="SetVarHelpContext" ret="HRESULT" convention="__stdcall">
 
            ICreateTypeInfo2 * This,
             UINT index,
             DWORD dwHelpContext);
        
<fnptr name="SetMops" ret="HRESULT" convention="__stdcall">
 
            ICreateTypeInfo2 * This,
             UINT index,
             BSTR bstrMops);
        
<fnptr name="SetTypeIdldesc" ret="HRESULT" convention="__stdcall">
 
            ICreateTypeInfo2 * This,
             IDLDESC *pIdlDesc);
        
<fnptr name="LayOut" ret="HRESULT" convention="__stdcall">
 
            ICreateTypeInfo2 * This);
        
<fnptr name="DeleteFuncDesc" ret="HRESULT" convention="__stdcall">
 
            ICreateTypeInfo2 * This,
             UINT index);
        
<fnptr name="DeleteFuncDescByMemId" ret="HRESULT" convention="__stdcall">
 
            ICreateTypeInfo2 * This,
             MEMBERID memid,
             INVOKEKIND invKind);
        
<fnptr name="DeleteVarDesc" ret="HRESULT" convention="__stdcall">
 
            ICreateTypeInfo2 * This,
             UINT index);
        
<fnptr name="DeleteVarDescByMemId" ret="HRESULT" convention="__stdcall">
 
            ICreateTypeInfo2 * This,
             MEMBERID memid);
        
<fnptr name="DeleteImplType" ret="HRESULT" convention="__stdcall">
 
            ICreateTypeInfo2 * This,
             UINT index);
        
<fnptr name="SetCustData" ret="HRESULT" convention="__stdcall">
 
            ICreateTypeInfo2 * This,
             const GUID * const guid,
             VARIANT *pVarVal);
        
<fnptr name="SetFuncCustData" ret="HRESULT" convention="__stdcall">
 
            ICreateTypeInfo2 * This,
             UINT index,
             const GUID * const guid,
             VARIANT *pVarVal);
        
<fnptr name="SetParamCustData" ret="HRESULT" convention="__stdcall">
 
            ICreateTypeInfo2 * This,
             UINT indexFunc,
             UINT indexParam,
             const GUID * const guid,
             VARIANT *pVarVal);
        
<fnptr name="SetVarCustData" ret="HRESULT" convention="__stdcall">
 
            ICreateTypeInfo2 * This,
             UINT index,
             const GUID * const guid,
             VARIANT *pVarVal);
        
<fnptr name="SetImplTypeCustData" ret="HRESULT" convention="__stdcall">
 
            ICreateTypeInfo2 * This,
             UINT index,
             const GUID * const guid,
             VARIANT *pVarVal);
        
<fnptr name="SetHelpStringContext" ret="HRESULT" convention="__stdcall">
 
            ICreateTypeInfo2 * This,
             ULONG dwHelpStringContext);
        
<fnptr name="SetFuncHelpStringContext" ret="HRESULT" convention="__stdcall">
 
            ICreateTypeInfo2 * This,
             UINT index,
             ULONG dwHelpStringContext);
        
<fnptr name="SetVarHelpStringContext" ret="HRESULT" convention="__stdcall">
 
            ICreateTypeInfo2 * This,
             UINT index,
             ULONG dwHelpStringContext);
        
<fnptr name="Invalidate" ret="HRESULT" convention="__stdcall">
 
            ICreateTypeInfo2 * This);
        
<fnptr name="SetName" ret="HRESULT" convention="__stdcall">
 
            ICreateTypeInfo2 * This,
             LPOLESTR szName);
        
        
    } ICreateTypeInfo2Vtbl;

<struct name="ICreateTypeInfo2">
<vptr>ICreateTypeInfo2Vtbl *</vptr>
</struct>

    
 

typedef  ICreateTypeLib *LPCREATETYPELIB;
extern const IID IID_ICreateTypeLib;
<struct name="ICreateTypeLibVtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            ICreateTypeLib * This,
             const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            ICreateTypeLib * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            ICreateTypeLib * This);
        
<fnptr name="CreateTypeInfo" ret="HRESULT" convention="__stdcall">
 
            ICreateTypeLib * This,
             LPOLESTR szName,
             TYPEKIND tkind,
             ICreateTypeInfo **ppCTInfo);
        
<fnptr name="SetName" ret="HRESULT" convention="__stdcall">
 
            ICreateTypeLib * This,
             LPOLESTR szName);
        
<fnptr name="SetVersion" ret="HRESULT" convention="__stdcall">
 
            ICreateTypeLib * This,
             WORD wMajorVerNum,
             WORD wMinorVerNum);
        
<fnptr name="SetGuid" ret="HRESULT" convention="__stdcall">
 
            ICreateTypeLib * This,
             const GUID * const guid);
        
<fnptr name="SetDocString" ret="HRESULT" convention="__stdcall">
 
            ICreateTypeLib * This,
             LPOLESTR szDoc);
        
<fnptr name="SetHelpFileName" ret="HRESULT" convention="__stdcall">
 
            ICreateTypeLib * This,
             LPOLESTR szHelpFileName);
        
<fnptr name="SetHelpContext" ret="HRESULT" convention="__stdcall">
 
            ICreateTypeLib * This,
             DWORD dwHelpContext);
        
<fnptr name="SetLcid" ret="HRESULT" convention="__stdcall">
 
            ICreateTypeLib * This,
             LCID lcid);
        
<fnptr name="SetLibFlags" ret="HRESULT" convention="__stdcall">
 
            ICreateTypeLib * This,
             UINT uLibFlags);
        
<fnptr name="SaveAllChanges" ret="HRESULT" convention="__stdcall">
 
            ICreateTypeLib * This);
        
        
    } ICreateTypeLibVtbl;

<struct name="ICreateTypeLib">
<vptr>ICreateTypeLibVtbl *</vptr>
</struct>

    
 

typedef  ICreateTypeLib2 *LPCREATETYPELIB2;
extern const IID IID_ICreateTypeLib2;

<struct name="ICreateTypeLib2Vtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            ICreateTypeLib2 * This,
             const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            ICreateTypeLib2 * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            ICreateTypeLib2 * This);
        
<fnptr name="CreateTypeInfo" ret="HRESULT" convention="__stdcall">
 
            ICreateTypeLib2 * This,
             LPOLESTR szName,
             TYPEKIND tkind,
             ICreateTypeInfo **ppCTInfo);
        
<fnptr name="SetName" ret="HRESULT" convention="__stdcall">
 
            ICreateTypeLib2 * This,
             LPOLESTR szName);
        
<fnptr name="SetVersion" ret="HRESULT" convention="__stdcall">
 
            ICreateTypeLib2 * This,
             WORD wMajorVerNum,
             WORD wMinorVerNum);
        
<fnptr name="SetGuid" ret="HRESULT" convention="__stdcall">
 
            ICreateTypeLib2 * This,
             const GUID * const guid);
        
<fnptr name="SetDocString" ret="HRESULT" convention="__stdcall">
 
            ICreateTypeLib2 * This,
             LPOLESTR szDoc);
        
<fnptr name="SetHelpFileName" ret="HRESULT" convention="__stdcall">
 
            ICreateTypeLib2 * This,
             LPOLESTR szHelpFileName);
        
<fnptr name="SetHelpContext" ret="HRESULT" convention="__stdcall">
 
            ICreateTypeLib2 * This,
             DWORD dwHelpContext);
        
<fnptr name="SetLcid" ret="HRESULT" convention="__stdcall">
 
            ICreateTypeLib2 * This,
             LCID lcid);
        
<fnptr name="SetLibFlags" ret="HRESULT" convention="__stdcall">
 
            ICreateTypeLib2 * This,
             UINT uLibFlags);
        
<fnptr name="SaveAllChanges" ret="HRESULT" convention="__stdcall">
 
            ICreateTypeLib2 * This);
        
<fnptr name="DeleteTypeInfo" ret="HRESULT" convention="__stdcall">
 
            ICreateTypeLib2 * This,
             LPOLESTR szName);
        
<fnptr name="SetCustData" ret="HRESULT" convention="__stdcall">
 
            ICreateTypeLib2 * This,
             const GUID * const guid,
             VARIANT *pVarVal);
        
<fnptr name="SetHelpStringContext" ret="HRESULT" convention="__stdcall">
 
            ICreateTypeLib2 * This,
             ULONG dwHelpStringContext);
        
<fnptr name="SetHelpStringDll" ret="HRESULT" convention="__stdcall">
 
            ICreateTypeLib2 * This,
             LPOLESTR szFileName);
        
        
    } ICreateTypeLib2Vtbl;

<struct name="ICreateTypeLib2">
<vptr>ICreateTypeLib2Vtbl *</vptr>
</struct>

    

 

typedef    IDispatch *LPDISPATCH;
extern const IID IID_IDispatch;
<struct name="IDispatchVtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            IDispatch * This,
              const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            IDispatch * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            IDispatch * This);
        
<fnptr name="GetTypeInfoCount" ret="HRESULT" convention="__stdcall">
 
            IDispatch * This,
              UINT *pctinfo);
        
<fnptr name="GetTypeInfo" ret="HRESULT" convention="__stdcall">
 
            IDispatch * This,
             UINT iTInfo,
             LCID lcid,
              ITypeInfo **ppTInfo);
        
<fnptr name="GetIDsOfNames" ret="HRESULT" convention="__stdcall">
 
            IDispatch * This,
              const IID * const riid,
              LPOLESTR *rgszNames,
             UINT cNames,
             LCID lcid,
              DISPID *rgDispId);
        
<fnptr name="Invoke" ret="HRESULT" convention="__stdcall">
 
            IDispatch * This,
             DISPID dispIdMember,
             const IID * const riid,
             LCID lcid,
             WORD wFlags,
             DISPPARAMS *pDispParams,
             VARIANT *pVarResult,
             EXCEPINFO *pExcepInfo,
             UINT *puArgErr);
        
        
    } IDispatchVtbl;

<struct name="IDispatch">
<vptr>IDispatchVtbl *</vptr>
</struct>

    

<function name="IDispatch_RemoteInvoke_Proxy" ret="HRESULT" convention="__stdcall"> 
    IDispatch * This,
     DISPID dispIdMember,
      const IID * const riid,
     LCID lcid,
     DWORD dwFlags,
      DISPPARAMS *pDispParams,
      VARIANT *pVarResult,
      EXCEPINFO *pExcepInfo,
      UINT *pArgErr,
     UINT cVarRef,
      UINT *rgVarRefIdx,
      VARIANTARG *rgVarRef);
<function name="IDispatch_RemoteInvoke_Stub" ret="void" convention="__stdcall">
<arg name="This">IRpcStubBuffer *</arg>

    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
 

typedef    IEnumVARIANT *LPENUMVARIANT;
extern const IID IID_IEnumVARIANT;
<struct name="IEnumVARIANTVtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            IEnumVARIANT * This,
              const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            IEnumVARIANT * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            IEnumVARIANT * This);
        
<fnptr name="Next" ret="HRESULT" convention="__stdcall">
 
            IEnumVARIANT * This,
             ULONG celt,
             VARIANT *rgVar,
             ULONG *pCeltFetched);
        
<fnptr name="Skip" ret="HRESULT" convention="__stdcall">
 
            IEnumVARIANT * This,
             ULONG celt);
        
<fnptr name="Reset" ret="HRESULT" convention="__stdcall">
 
            IEnumVARIANT * This);
        
<fnptr name="Clone" ret="HRESULT" convention="__stdcall">
 
            IEnumVARIANT * This,
              IEnumVARIANT **ppEnum);
        
        
    } IEnumVARIANTVtbl;

<struct name="IEnumVARIANT">
<vptr>IEnumVARIANTVtbl *</vptr>
</struct>

    

<function name="IEnumVARIANT_RemoteNext_Proxy" ret="HRESULT" convention="__stdcall"> 
    IEnumVARIANT * This,
     ULONG celt,
      VARIANT *rgVar,
      ULONG *pCeltFetched);
<function name="IEnumVARIANT_RemoteNext_Stub" ret="void" convention="__stdcall">
<arg name="This">IRpcStubBuffer *</arg>

    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
 

typedef    ITypeComp *LPTYPECOMP;

typedef  
enum tagDESCKIND
    {	DESCKIND_NONE	= 0,
	DESCKIND_FUNCDESC	= ( DESCKIND_NONE + 1 ) ,
	DESCKIND_VARDESC	= ( DESCKIND_FUNCDESC + 1 ) ,
	DESCKIND_TYPECOMP	= ( DESCKIND_VARDESC + 1 ) ,
	DESCKIND_IMPLICITAPPOBJ	= ( DESCKIND_TYPECOMP + 1 ) ,
	DESCKIND_MAX	= ( DESCKIND_IMPLICITAPPOBJ + 1 ) 
    } 	DESCKIND;

typedef union tagBINDPTR
    {
    FUNCDESC *lpfuncdesc;
    VARDESC *lpvardesc;
    ITypeComp *lptcomp;
    } 	BINDPTR;

typedef union tagBINDPTR *LPBINDPTR;
extern const IID IID_ITypeComp;
<struct name="ITypeCompVtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            ITypeComp * This,
              const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            ITypeComp * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            ITypeComp * This);
        
<fnptr name="Bind" ret="HRESULT" convention="__stdcall">
 
            ITypeComp * This,
             LPOLESTR szName,
             ULONG lHashVal,
             WORD wFlags,
             ITypeInfo **ppTInfo,
             DESCKIND *pDescKind,
             BINDPTR *pBindPtr);
        
<fnptr name="BindType" ret="HRESULT" convention="__stdcall">
 
            ITypeComp * This,
             LPOLESTR szName,
             ULONG lHashVal,
             ITypeInfo **ppTInfo,
             ITypeComp **ppTComp);
        
        
    } ITypeCompVtbl;

<struct name="ITypeComp">
<vptr>ITypeCompVtbl *</vptr>
</struct>

    

<function name="ITypeComp_RemoteBind_Proxy" ret="HRESULT" convention="__stdcall"> 
    ITypeComp * This,
      LPOLESTR szName,
     ULONG lHashVal,
     WORD wFlags,
      ITypeInfo **ppTInfo,
      DESCKIND *pDescKind,
      LPFUNCDESC *ppFuncDesc,
      LPVARDESC *ppVarDesc,
      ITypeComp **ppTypeComp,
      CLEANLOCALSTORAGE *pDummy);
<function name="ITypeComp_RemoteBind_Stub" ret="void" convention="__stdcall">
<arg name="This">IRpcStubBuffer *</arg>

    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
<function name="ITypeComp_RemoteBindType_Proxy" ret="HRESULT" convention="__stdcall"> 
    ITypeComp * This,
      LPOLESTR szName,
     ULONG lHashVal,
      ITypeInfo **ppTInfo);
<function name="ITypeComp_RemoteBindType_Stub" ret="void" convention="__stdcall">
<arg name="This">IRpcStubBuffer *</arg>

    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
 

typedef    ITypeInfo *LPTYPEINFO;
extern const IID IID_ITypeInfo;
<struct name="ITypeInfoVtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            ITypeInfo * This,
              const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            ITypeInfo * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            ITypeInfo * This);
        
<fnptr name="GetTypeAttr" ret="HRESULT" convention="__stdcall">
 
            ITypeInfo * This,
             TYPEATTR **ppTypeAttr);
        
<fnptr name="GetTypeComp" ret="HRESULT" convention="__stdcall">
 
            ITypeInfo * This,
              ITypeComp **ppTComp);
        
<fnptr name="GetFuncDesc" ret="HRESULT" convention="__stdcall">
 
            ITypeInfo * This,
             UINT index,
             FUNCDESC **ppFuncDesc);
        
<fnptr name="GetVarDesc" ret="HRESULT" convention="__stdcall">
 
            ITypeInfo * This,
             UINT index,
             VARDESC **ppVarDesc);
        
<fnptr name="GetNames" ret="HRESULT" convention="__stdcall">
 
            ITypeInfo * This,
             MEMBERID memid,
             BSTR *rgBstrNames,
             UINT cMaxNames,
             UINT *pcNames);
        
<fnptr name="GetRefTypeOfImplType" ret="HRESULT" convention="__stdcall">
 
            ITypeInfo * This,
             UINT index,
              HREFTYPE *pRefType);
        
<fnptr name="GetImplTypeFlags" ret="HRESULT" convention="__stdcall">
 
            ITypeInfo * This,
             UINT index,
              INT *pImplTypeFlags);
        
<fnptr name="GetIDsOfNames" ret="HRESULT" convention="__stdcall">
 
            ITypeInfo * This,
             LPOLESTR *rgszNames,
             UINT cNames,
             MEMBERID *pMemId);
        
<fnptr name="Invoke" ret="HRESULT" convention="__stdcall">
 
            ITypeInfo * This,
             PVOID pvInstance,
             MEMBERID memid,
             WORD wFlags,
             DISPPARAMS *pDispParams,
             VARIANT *pVarResult,
             EXCEPINFO *pExcepInfo,
             UINT *puArgErr);
        
<fnptr name="GetDocumentation" ret="HRESULT" convention="__stdcall">
 
            ITypeInfo * This,
             MEMBERID memid,
             BSTR *pBstrName,
             BSTR *pBstrDocString,
             DWORD *pdwHelpContext,
             BSTR *pBstrHelpFile);
        
<fnptr name="GetDllEntry" ret="HRESULT" convention="__stdcall">
 
            ITypeInfo * This,
             MEMBERID memid,
             INVOKEKIND invKind,
             BSTR *pBstrDllName,
             BSTR *pBstrName,
             WORD *pwOrdinal);
        
<fnptr name="GetRefTypeInfo" ret="HRESULT" convention="__stdcall">
 
            ITypeInfo * This,
             HREFTYPE hRefType,
              ITypeInfo **ppTInfo);
        
<fnptr name="AddressOfMember" ret="HRESULT" convention="__stdcall">
 
            ITypeInfo * This,
             MEMBERID memid,
             INVOKEKIND invKind,
             PVOID *ppv);
        
<fnptr name="CreateInstance" ret="HRESULT" convention="__stdcall">
 
            ITypeInfo * This,
             IUnknown *pUnkOuter,
             const IID * const riid,
             PVOID *ppvObj);
        
<fnptr name="GetMops" ret="HRESULT" convention="__stdcall">
 
            ITypeInfo * This,
             MEMBERID memid,
              BSTR *pBstrMops);
        
<fnptr name="GetContainingTypeLib" ret="HRESULT" convention="__stdcall">
 
            ITypeInfo * This,
             ITypeLib **ppTLib,
             UINT *pIndex);
        
<fnptr name="ReleaseTypeAttr" ret="void" convention="__stdcall">
 
            ITypeInfo * This,
             TYPEATTR *pTypeAttr);
        
<fnptr name="ReleaseFuncDesc" ret="void" convention="__stdcall">
 
            ITypeInfo * This,
             FUNCDESC *pFuncDesc);
        
<fnptr name="ReleaseVarDesc" ret="void" convention="__stdcall">
 
            ITypeInfo * This,
             VARDESC *pVarDesc);
        
        
    } ITypeInfoVtbl;

<struct name="ITypeInfo">
<vptr>ITypeInfoVtbl *</vptr>
</struct>

    

<function name="ITypeInfo_RemoteGetTypeAttr_Proxy" ret="HRESULT" convention="__stdcall"> 
    ITypeInfo * This,
      LPTYPEATTR *ppTypeAttr,
      CLEANLOCALSTORAGE *pDummy);
<function name="ITypeInfo_RemoteGetTypeAttr_Stub" ret="void" convention="__stdcall">
<arg name="This">IRpcStubBuffer *</arg>

    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
<function name="ITypeInfo_RemoteGetFuncDesc_Proxy" ret="HRESULT" convention="__stdcall"> 
    ITypeInfo * This,
     UINT index,
      LPFUNCDESC *ppFuncDesc,
      CLEANLOCALSTORAGE *pDummy);
<function name="ITypeInfo_RemoteGetFuncDesc_Stub" ret="void" convention="__stdcall">
<arg name="This">IRpcStubBuffer *</arg>

    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
<function name="ITypeInfo_RemoteGetVarDesc_Proxy" ret="HRESULT" convention="__stdcall"> 
    ITypeInfo * This,
     UINT index,
      LPVARDESC *ppVarDesc,
      CLEANLOCALSTORAGE *pDummy);
<function name="ITypeInfo_RemoteGetVarDesc_Stub" ret="void" convention="__stdcall">
<arg name="This">IRpcStubBuffer *</arg>

    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
<function name="ITypeInfo_RemoteGetNames_Proxy" ret="HRESULT" convention="__stdcall"> 
    ITypeInfo * This,
     MEMBERID memid,
      BSTR *rgBstrNames,
     UINT cMaxNames,
      UINT *pcNames);
<function name="ITypeInfo_RemoteGetNames_Stub" ret="void" convention="__stdcall">
<arg name="This">IRpcStubBuffer *</arg>

    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
<function name="ITypeInfo_LocalGetIDsOfNames_Proxy" ret="HRESULT" convention="__stdcall"> 
    ITypeInfo * This);
<function name="ITypeInfo_LocalGetIDsOfNames_Stub" ret="void" convention="__stdcall">
<arg name="This">IRpcStubBuffer *</arg>

    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
<function name="ITypeInfo_LocalInvoke_Proxy" ret="HRESULT" convention="__stdcall"> 
    ITypeInfo * This);
<function name="ITypeInfo_LocalInvoke_Stub" ret="void" convention="__stdcall">
<arg name="This">IRpcStubBuffer *</arg>

    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
<function name="ITypeInfo_RemoteGetDocumentation_Proxy" ret="HRESULT" convention="__stdcall"> 
    ITypeInfo * This,
     MEMBERID memid,
     DWORD refPtrFlags,
      BSTR *pBstrName,
      BSTR *pBstrDocString,
      DWORD *pdwHelpContext,
      BSTR *pBstrHelpFile);
<function name="ITypeInfo_RemoteGetDocumentation_Stub" ret="void" convention="__stdcall">
<arg name="This">IRpcStubBuffer *</arg>

    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
<function name="ITypeInfo_RemoteGetDllEntry_Proxy" ret="HRESULT" convention="__stdcall"> 
    ITypeInfo * This,
     MEMBERID memid,
     INVOKEKIND invKind,
     DWORD refPtrFlags,
      BSTR *pBstrDllName,
      BSTR *pBstrName,
      WORD *pwOrdinal);
<function name="ITypeInfo_RemoteGetDllEntry_Stub" ret="void" convention="__stdcall">
<arg name="This">IRpcStubBuffer *</arg>

    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
<function name="ITypeInfo_LocalAddressOfMember_Proxy" ret="HRESULT" convention="__stdcall"> 
    ITypeInfo * This);
<function name="ITypeInfo_LocalAddressOfMember_Stub" ret="void" convention="__stdcall">
<arg name="This">IRpcStubBuffer *</arg>

    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
<function name="ITypeInfo_RemoteCreateInstance_Proxy" ret="HRESULT" convention="__stdcall"> 
    ITypeInfo * This,
      const IID * const riid,
      IUnknown **ppvObj);
<function name="ITypeInfo_RemoteCreateInstance_Stub" ret="void" convention="__stdcall">
<arg name="This">IRpcStubBuffer *</arg>

    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
<function name="ITypeInfo_RemoteGetContainingTypeLib_Proxy" ret="HRESULT" convention="__stdcall"> 
    ITypeInfo * This,
      ITypeLib **ppTLib,
      UINT *pIndex);
<function name="ITypeInfo_RemoteGetContainingTypeLib_Stub" ret="void" convention="__stdcall">

    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
<function name="ITypeInfo_LocalReleaseTypeAttr_Proxy" ret="HRESULT" convention="__stdcall"> 
    ITypeInfo * This);
<function name="ITypeInfo_LocalReleaseTypeAttr_Stub" ret="void" convention="__stdcall">

    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
<function name="ITypeInfo_LocalReleaseFuncDesc_Proxy" ret="HRESULT" convention="__stdcall"> 
    ITypeInfo * This);
<function name="ITypeInfo_LocalReleaseFuncDesc_Stub" ret="void" convention="__stdcall">

    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
<function name="ITypeInfo_LocalReleaseVarDesc_Proxy" ret="HRESULT" convention="__stdcall"> 
    ITypeInfo * This);
<function name="ITypeInfo_LocalReleaseVarDesc_Stub" ret="void" convention="__stdcall">

    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
 

typedef    ITypeInfo2 *LPTYPEINFO2;
extern const IID IID_ITypeInfo2;

<struct name="ITypeInfo2Vtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            ITypeInfo2 * This,
              const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            ITypeInfo2 * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            ITypeInfo2 * This);
        
<fnptr name="GetTypeAttr" ret="HRESULT" convention="__stdcall">
 
            ITypeInfo2 * This,
             TYPEATTR **ppTypeAttr);
        
<fnptr name="GetTypeComp" ret="HRESULT" convention="__stdcall">
 
            ITypeInfo2 * This,
              ITypeComp **ppTComp);
        
<fnptr name="GetFuncDesc" ret="HRESULT" convention="__stdcall">
 
            ITypeInfo2 * This,
             UINT index,
             FUNCDESC **ppFuncDesc);
        
<fnptr name="GetVarDesc" ret="HRESULT" convention="__stdcall">
 
            ITypeInfo2 * This,
             UINT index,
             VARDESC **ppVarDesc);
        
<fnptr name="GetNames" ret="HRESULT" convention="__stdcall">
 
            ITypeInfo2 * This,
             MEMBERID memid,
             BSTR *rgBstrNames,
             UINT cMaxNames,
             UINT *pcNames);
        
<fnptr name="GetRefTypeOfImplType" ret="HRESULT" convention="__stdcall">
 
            ITypeInfo2 * This,
             UINT index,
              HREFTYPE *pRefType);
        
<fnptr name="GetImplTypeFlags" ret="HRESULT" convention="__stdcall">
 
            ITypeInfo2 * This,
             UINT index,
              INT *pImplTypeFlags);
        
<fnptr name="GetIDsOfNames" ret="HRESULT" convention="__stdcall">
 
            ITypeInfo2 * This,
             LPOLESTR *rgszNames,
             UINT cNames,
             MEMBERID *pMemId);
        
<fnptr name="Invoke" ret="HRESULT" convention="__stdcall">
 
            ITypeInfo2 * This,
             PVOID pvInstance,
             MEMBERID memid,
             WORD wFlags,
             DISPPARAMS *pDispParams,
             VARIANT *pVarResult,
             EXCEPINFO *pExcepInfo,
             UINT *puArgErr);
        
<fnptr name="GetDocumentation" ret="HRESULT" convention="__stdcall">
 
            ITypeInfo2 * This,
             MEMBERID memid,
             BSTR *pBstrName,
             BSTR *pBstrDocString,
             DWORD *pdwHelpContext,
             BSTR *pBstrHelpFile);
        
<fnptr name="GetDllEntry" ret="HRESULT" convention="__stdcall">
 
            ITypeInfo2 * This,
             MEMBERID memid,
             INVOKEKIND invKind,
             BSTR *pBstrDllName,
             BSTR *pBstrName,
             WORD *pwOrdinal);
        
<fnptr name="GetRefTypeInfo" ret="HRESULT" convention="__stdcall">
 
            ITypeInfo2 * This,
             HREFTYPE hRefType,
              ITypeInfo **ppTInfo);
        
<fnptr name="AddressOfMember" ret="HRESULT" convention="__stdcall">
 
            ITypeInfo2 * This,
             MEMBERID memid,
             INVOKEKIND invKind,
             PVOID *ppv);
        
<fnptr name="CreateInstance" ret="HRESULT" convention="__stdcall">
 
            ITypeInfo2 * This,
             IUnknown *pUnkOuter,
             const IID * const riid,
             PVOID *ppvObj);
        
<fnptr name="GetMops" ret="HRESULT" convention="__stdcall">
 
            ITypeInfo2 * This,
             MEMBERID memid,
              BSTR *pBstrMops);
        
<fnptr name="GetContainingTypeLib" ret="HRESULT" convention="__stdcall">
 
            ITypeInfo2 * This,
             ITypeLib **ppTLib,
             UINT *pIndex);
        
<fnptr name="ReleaseTypeAttr" ret="void" convention="__stdcall">
 
            ITypeInfo2 * This,
             TYPEATTR *pTypeAttr);
        
<fnptr name="ReleaseFuncDesc" ret="void" convention="__stdcall">
 
            ITypeInfo2 * This,
             FUNCDESC *pFuncDesc);
        
<fnptr name="ReleaseVarDesc" ret="void" convention="__stdcall">
 
            ITypeInfo2 * This,
             VARDESC *pVarDesc);
        
<fnptr name="GetTypeKind" ret="HRESULT" convention="__stdcall">
 
            ITypeInfo2 * This,
              TYPEKIND *pTypeKind);
        
<fnptr name="GetTypeFlags" ret="HRESULT" convention="__stdcall">
 
            ITypeInfo2 * This,
              ULONG *pTypeFlags);
        
<fnptr name="GetFuncIndexOfMemId" ret="HRESULT" convention="__stdcall">
 
            ITypeInfo2 * This,
             MEMBERID memid,
             INVOKEKIND invKind,
              UINT *pFuncIndex);
        
<fnptr name="GetVarIndexOfMemId" ret="HRESULT" convention="__stdcall">
 
            ITypeInfo2 * This,
             MEMBERID memid,
              UINT *pVarIndex);
        
<fnptr name="GetCustData" ret="HRESULT" convention="__stdcall">
 
            ITypeInfo2 * This,
              const GUID * const guid,
              VARIANT *pVarVal);
        
<fnptr name="GetFuncCustData" ret="HRESULT" convention="__stdcall">
 
            ITypeInfo2 * This,
             UINT index,
              const GUID * const guid,
              VARIANT *pVarVal);
        
<fnptr name="GetParamCustData" ret="HRESULT" convention="__stdcall">
 
            ITypeInfo2 * This,
             UINT indexFunc,
             UINT indexParam,
              const GUID * const guid,
              VARIANT *pVarVal);
        
<fnptr name="GetVarCustData" ret="HRESULT" convention="__stdcall">
 
            ITypeInfo2 * This,
             UINT index,
              const GUID * const guid,
              VARIANT *pVarVal);
        
<fnptr name="GetImplTypeCustData" ret="HRESULT" convention="__stdcall">
 
            ITypeInfo2 * This,
             UINT index,
              const GUID * const guid,
              VARIANT *pVarVal);
        
<fnptr name="GetDocumentation2" ret="HRESULT" convention="__stdcall">
 
            ITypeInfo2 * This,
             MEMBERID memid,
             LCID lcid,
             BSTR *pbstrHelpString,
             DWORD *pdwHelpStringContext,
             BSTR *pbstrHelpStringDll);
        
<fnptr name="GetAllCustData" ret="HRESULT" convention="__stdcall">
 
            ITypeInfo2 * This,
              CUSTDATA *pCustData);
        
<fnptr name="GetAllFuncCustData" ret="HRESULT" convention="__stdcall">
 
            ITypeInfo2 * This,
             UINT index,
              CUSTDATA *pCustData);
        
<fnptr name="GetAllParamCustData" ret="HRESULT" convention="__stdcall">
 
            ITypeInfo2 * This,
             UINT indexFunc,
             UINT indexParam,
              CUSTDATA *pCustData);
        
<fnptr name="GetAllVarCustData" ret="HRESULT" convention="__stdcall">
 
            ITypeInfo2 * This,
             UINT index,
              CUSTDATA *pCustData);
        
<fnptr name="GetAllImplTypeCustData" ret="HRESULT" convention="__stdcall">
 
            ITypeInfo2 * This,
             UINT index,
              CUSTDATA *pCustData);
        
        
    } ITypeInfo2Vtbl;

<struct name="ITypeInfo2">
<vptr>ITypeInfo2Vtbl *</vptr>
</struct>

    
<function name="ITypeInfo2_RemoteGetDocumentation2_Proxy" ret="HRESULT" convention="__stdcall"> 
    ITypeInfo2 * This,
     MEMBERID memid,
     LCID lcid,
     DWORD refPtrFlags,
      BSTR *pbstrHelpString,
      DWORD *pdwHelpStringContext,
      BSTR *pbstrHelpStringDll);
<function name="ITypeInfo2_RemoteGetDocumentation2_Stub" ret="void" convention="__stdcall">

    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
 

typedef  
enum tagSYSKIND
    {	SYS_WIN16	= 0,
	SYS_WIN32	= ( SYS_WIN16 + 1 ) ,
	SYS_MAC	= ( SYS_WIN32 + 1 ) ,
	SYS_WIN64	= ( SYS_MAC + 1 ) 
    } 	SYSKIND;

typedef  
enum tagLIBFLAGS
    {	LIBFLAG_FRESTRICTED	= 0x1,
	LIBFLAG_FCONTROL	= 0x2,
	LIBFLAG_FHIDDEN	= 0x4,
	LIBFLAG_FHASDISKIMAGE	= 0x8
    } 	LIBFLAGS;

typedef    ITypeLib *LPTYPELIB;

<struct name="tagTLIBATTR">
<field name="guid">GUID</field>
<field name="lcid">LCID</field>
<field name="syskind">SYSKIND</field>
<field name="wMajorVerNum">WORD</field>
<field name="wMinorVerNum">WORD</field>
<field name="wLibFlags">WORD</field>
    } 	TLIBATTR;

<typedef name="LPTLIBATTR">tagTLIBATTR *</typedef>
extern const IID IID_ITypeLib;
<struct name="ITypeLibVtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            ITypeLib * This,
              const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            ITypeLib * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            ITypeLib * This);
        
<fnptr name="GetTypeInfoCount" ret="UINT" convention="__stdcall">
 
            ITypeLib * This);
        
<fnptr name="GetTypeInfo" ret="HRESULT" convention="__stdcall">
 
            ITypeLib * This,
             UINT index,
              ITypeInfo **ppTInfo);
        
<fnptr name="GetTypeInfoType" ret="HRESULT" convention="__stdcall">
 
            ITypeLib * This,
             UINT index,
              TYPEKIND *pTKind);
        
<fnptr name="GetTypeInfoOfGuid" ret="HRESULT" convention="__stdcall">
 
            ITypeLib * This,
              const GUID * const guid,
              ITypeInfo **ppTinfo);
        
<fnptr name="GetLibAttr" ret="HRESULT" convention="__stdcall">
 
            ITypeLib * This,
             TLIBATTR **ppTLibAttr);
        
<fnptr name="GetTypeComp" ret="HRESULT" convention="__stdcall">
 
            ITypeLib * This,
              ITypeComp **ppTComp);
        
<fnptr name="GetDocumentation" ret="HRESULT" convention="__stdcall">
 
            ITypeLib * This,
             INT index,
             BSTR *pBstrName,
             BSTR *pBstrDocString,
             DWORD *pdwHelpContext,
             BSTR *pBstrHelpFile);
        
<fnptr name="IsName" ret="HRESULT" convention="__stdcall">
 
            ITypeLib * This,
             LPOLESTR szNameBuf,
             ULONG lHashVal,
             BOOL *pfName);
        
<fnptr name="FindName" ret="HRESULT" convention="__stdcall">
 
            ITypeLib * This,
             LPOLESTR szNameBuf,
             ULONG lHashVal,
             ITypeInfo **ppTInfo,
             MEMBERID *rgMemId,
             USHORT *pcFound);
        
<fnptr name="ReleaseTLibAttr" ret="void" convention="__stdcall">
 
            ITypeLib * This,
             TLIBATTR *pTLibAttr);
        
        
    } ITypeLibVtbl;

<struct name="ITypeLib">
<vptr>ITypeLibVtbl *</vptr>
</struct>

    

<function name="ITypeLib_RemoteGetTypeInfoCount_Proxy" ret="HRESULT" convention="__stdcall"> 
    ITypeLib * This,
      UINT *pcTInfo);
<function name="ITypeLib_RemoteGetTypeInfoCount_Stub" ret="void" convention="__stdcall">

    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
<function name="ITypeLib_RemoteGetLibAttr_Proxy" ret="HRESULT" convention="__stdcall"> 
    ITypeLib * This,
      LPTLIBATTR *ppTLibAttr,
      CLEANLOCALSTORAGE *pDummy);
<function name="ITypeLib_RemoteGetLibAttr_Stub" ret="void" convention="__stdcall">

    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
<function name="ITypeLib_RemoteGetDocumentation_Proxy" ret="HRESULT" convention="__stdcall"> 
    ITypeLib * This,
     INT index,
     DWORD refPtrFlags,
      BSTR *pBstrName,
      BSTR *pBstrDocString,
      DWORD *pdwHelpContext,
      BSTR *pBstrHelpFile);
<function name="ITypeLib_RemoteGetDocumentation_Stub" ret="void" convention="__stdcall">

    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
<function name="ITypeLib_RemoteIsName_Proxy" ret="HRESULT" convention="__stdcall"> 
    ITypeLib * This,
      LPOLESTR szNameBuf,
     ULONG lHashVal,
      BOOL *pfName,
      BSTR *pBstrLibName);
<function name="ITypeLib_RemoteIsName_Stub" ret="void" convention="__stdcall">

    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
<function name="ITypeLib_RemoteFindName_Proxy" ret="HRESULT" convention="__stdcall"> 
    ITypeLib * This,
      LPOLESTR szNameBuf,
     ULONG lHashVal,
      ITypeInfo **ppTInfo,
      MEMBERID *rgMemId,
      USHORT *pcFound,
      BSTR *pBstrLibName);
<function name="ITypeLib_RemoteFindName_Stub" ret="void" convention="__stdcall">

    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
<function name="ITypeLib_LocalReleaseTLibAttr_Proxy" ret="HRESULT" convention="__stdcall"> 
    ITypeLib * This);
<function name="ITypeLib_LocalReleaseTLibAttr_Stub" ret="void" convention="__stdcall">

    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
 

typedef    ITypeLib2 *LPTYPELIB2;
extern const IID IID_ITypeLib2;
<struct name="ITypeLib2Vtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            ITypeLib2 * This,
              const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            ITypeLib2 * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            ITypeLib2 * This);
        
<fnptr name="GetTypeInfoCount" ret="UINT" convention="__stdcall">
 
            ITypeLib2 * This);
        
<fnptr name="GetTypeInfo" ret="HRESULT" convention="__stdcall">
 
            ITypeLib2 * This,
             UINT index,
              ITypeInfo **ppTInfo);
        
<fnptr name="GetTypeInfoType" ret="HRESULT" convention="__stdcall">
 
            ITypeLib2 * This,
             UINT index,
              TYPEKIND *pTKind);
        
<fnptr name="GetTypeInfoOfGuid" ret="HRESULT" convention="__stdcall">
 
            ITypeLib2 * This,
              const GUID * const guid,
              ITypeInfo **ppTinfo);
        
<fnptr name="GetLibAttr" ret="HRESULT" convention="__stdcall">
 
            ITypeLib2 * This,
             TLIBATTR **ppTLibAttr);
        
<fnptr name="GetTypeComp" ret="HRESULT" convention="__stdcall">
 
            ITypeLib2 * This,
              ITypeComp **ppTComp);
        
<fnptr name="GetDocumentation" ret="HRESULT" convention="__stdcall">
 
            ITypeLib2 * This,
             INT index,
             BSTR *pBstrName,
             BSTR *pBstrDocString,
             DWORD *pdwHelpContext,
             BSTR *pBstrHelpFile);
        
<fnptr name="IsName" ret="HRESULT" convention="__stdcall">
 
            ITypeLib2 * This,
             LPOLESTR szNameBuf,
             ULONG lHashVal,
             BOOL *pfName);
        
<fnptr name="FindName" ret="HRESULT" convention="__stdcall">
 
            ITypeLib2 * This,
             LPOLESTR szNameBuf,
             ULONG lHashVal,
             ITypeInfo **ppTInfo,
             MEMBERID *rgMemId,
             USHORT *pcFound);
        
<fnptr name="ReleaseTLibAttr" ret="void" convention="__stdcall">
 
            ITypeLib2 * This,
             TLIBATTR *pTLibAttr);
        
<fnptr name="GetCustData" ret="HRESULT" convention="__stdcall">
 
            ITypeLib2 * This,
              const GUID * const guid,
              VARIANT *pVarVal);
        
<fnptr name="GetLibStatistics" ret="HRESULT" convention="__stdcall">
 
            ITypeLib2 * This,
             ULONG *pcUniqueNames,
             ULONG *pcchUniqueNames);
        
<fnptr name="GetDocumentation2" ret="HRESULT" convention="__stdcall">
 
            ITypeLib2 * This,
             INT index,
             LCID lcid,
             BSTR *pbstrHelpString,
             DWORD *pdwHelpStringContext,
             BSTR *pbstrHelpStringDll);
        
<fnptr name="GetAllCustData" ret="HRESULT" convention="__stdcall">
 
            ITypeLib2 * This,
              CUSTDATA *pCustData);
        
        
    } ITypeLib2Vtbl;

<struct name="ITypeLib2">
<vptr>ITypeLib2Vtbl *</vptr>
</struct>

    

<function name="ITypeLib2_RemoteGetLibStatistics_Proxy" ret="HRESULT" convention="__stdcall"> 
    ITypeLib2 * This,
      ULONG *pcUniqueNames,
      ULONG *pcchUniqueNames);
<function name="ITypeLib2_RemoteGetLibStatistics_Stub" ret="void" convention="__stdcall">

    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
<function name="ITypeLib2_RemoteGetDocumentation2_Proxy" ret="HRESULT" convention="__stdcall"> 
    ITypeLib2 * This,
     INT index,
     LCID lcid,
     DWORD refPtrFlags,
      BSTR *pbstrHelpString,
      DWORD *pdwHelpStringContext,
      BSTR *pbstrHelpStringDll);
<function name="ITypeLib2_RemoteGetDocumentation2_Stub" ret="void" convention="__stdcall">

    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
 

typedef  ITypeChangeEvents *LPTYPECHANGEEVENTS;

typedef 
enum tagCHANGEKIND
    {	CHANGEKIND_ADDMEMBER	= 0,
	CHANGEKIND_DELETEMEMBER	= ( CHANGEKIND_ADDMEMBER + 1 ) ,
	CHANGEKIND_SETNAMES	= ( CHANGEKIND_DELETEMEMBER + 1 ) ,
	CHANGEKIND_SETDOCUMENTATION	= ( CHANGEKIND_SETNAMES + 1 ) ,
	CHANGEKIND_GENERAL	= ( CHANGEKIND_SETDOCUMENTATION + 1 ) ,
	CHANGEKIND_INVALIDATE	= ( CHANGEKIND_GENERAL + 1 ) ,
	CHANGEKIND_CHANGEFAILED	= ( CHANGEKIND_INVALIDATE + 1 ) ,
	CHANGEKIND_MAX	= ( CHANGEKIND_CHANGEFAILED + 1 ) 
    } 	CHANGEKIND;
extern const IID IID_ITypeChangeEvents;
<struct name="ITypeChangeEventsVtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            ITypeChangeEvents * This,
             const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            ITypeChangeEvents * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            ITypeChangeEvents * This);
        
<fnptr name="RequestTypeChange" ret="HRESULT" convention="__stdcall">
 
            ITypeChangeEvents * This,
             CHANGEKIND changeKind,
             ITypeInfo *pTInfoBefore,
             LPOLESTR pStrName,
             INT *pfCancel);
        
<fnptr name="AfterTypeChange" ret="HRESULT" convention="__stdcall">
 
            ITypeChangeEvents * This,
             CHANGEKIND changeKind,
             ITypeInfo *pTInfoAfter,
             LPOLESTR pStrName);
        
        
    } ITypeChangeEventsVtbl;

<struct name="ITypeChangeEvents">
<vptr>ITypeChangeEventsVtbl *</vptr>
</struct>

    

 

typedef    IErrorInfo *LPERRORINFO;
extern const IID IID_IErrorInfo;
<struct name="IErrorInfoVtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            IErrorInfo * This,
              const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            IErrorInfo * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            IErrorInfo * This);
        
<fnptr name="GetGUID" ret="HRESULT" convention="__stdcall">
 
            IErrorInfo * This,
              GUID *pGUID);
        
<fnptr name="GetSource" ret="HRESULT" convention="__stdcall">
 
            IErrorInfo * This,
              BSTR *pBstrSource);
        
<fnptr name="GetDescription" ret="HRESULT" convention="__stdcall">
 
            IErrorInfo * This,
              BSTR *pBstrDescription);
        
<fnptr name="GetHelpFile" ret="HRESULT" convention="__stdcall">
 
            IErrorInfo * This,
              BSTR *pBstrHelpFile);
        
<fnptr name="GetHelpContext" ret="HRESULT" convention="__stdcall">
 
            IErrorInfo * This,
              DWORD *pdwHelpContext);
        
        
    } IErrorInfoVtbl;

<struct name="IErrorInfo">
<vptr>IErrorInfoVtbl *</vptr>
</struct>

    
 

typedef    ICreateErrorInfo *LPCREATEERRORINFO;
extern const IID IID_ICreateErrorInfo;
<struct name="ICreateErrorInfoVtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            ICreateErrorInfo * This,
              const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            ICreateErrorInfo * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            ICreateErrorInfo * This);
        
<fnptr name="SetGUID" ret="HRESULT" convention="__stdcall">
 
            ICreateErrorInfo * This,
              const GUID * const rguid);
        
<fnptr name="SetSource" ret="HRESULT" convention="__stdcall">
 
            ICreateErrorInfo * This,
              LPOLESTR szSource);
        
<fnptr name="SetDescription" ret="HRESULT" convention="__stdcall">
 
            ICreateErrorInfo * This,
              LPOLESTR szDescription);
        
<fnptr name="SetHelpFile" ret="HRESULT" convention="__stdcall">
 
            ICreateErrorInfo * This,
              LPOLESTR szHelpFile);
        
<fnptr name="SetHelpContext" ret="HRESULT" convention="__stdcall">
 
            ICreateErrorInfo * This,
             DWORD dwHelpContext);
        
        
    } ICreateErrorInfoVtbl;

<struct name="ICreateErrorInfo">
<vptr>ICreateErrorInfoVtbl *</vptr>
</struct>

    
 

typedef    ISupportErrorInfo *LPSUPPORTERRORINFO;
extern const IID IID_ISupportErrorInfo;
<struct name="ISupportErrorInfoVtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            ISupportErrorInfo * This,
              const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            ISupportErrorInfo * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            ISupportErrorInfo * This);
        
<fnptr name="InterfaceSupportsErrorInfo" ret="HRESULT" convention="__stdcall">
 
            ISupportErrorInfo * This,
              const IID * const riid);
        
        
    } ISupportErrorInfoVtbl;

<struct name="ISupportErrorInfo">
<vptr>ISupportErrorInfoVtbl *</vptr>
</struct>

    
 
extern const IID IID_ITypeFactory;
<struct name="ITypeFactoryVtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            ITypeFactory * This,
              const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            ITypeFactory * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            ITypeFactory * This);
        
<fnptr name="CreateFromTypeInfo" ret="HRESULT" convention="__stdcall">
 
            ITypeFactory * This,
              ITypeInfo *pTypeInfo,
              const IID * const riid,
              IUnknown **ppv);
        
        
    } ITypeFactoryVtbl;

<struct name="ITypeFactory">
<vptr>ITypeFactoryVtbl *</vptr>
</struct>

    
 
extern const IID IID_ITypeMarshal;
<struct name="ITypeMarshalVtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            ITypeMarshal * This,
             const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            ITypeMarshal * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            ITypeMarshal * This);
        
<fnptr name="Size" ret="HRESULT" convention="__stdcall">
 
            ITypeMarshal * This,
             PVOID pvType,
             DWORD dwDestContext,
             PVOID pvDestContext,
             ULONG *pSize);
        
<fnptr name="Marshal" ret="HRESULT" convention="__stdcall">
 
            ITypeMarshal * This,
             PVOID pvType,
             DWORD dwDestContext,
             PVOID pvDestContext,
             ULONG cbBufferLength,
             BYTE *pBuffer,
             ULONG *pcbWritten);
        
<fnptr name="Unmarshal" ret="HRESULT" convention="__stdcall">
 
            ITypeMarshal * This,
             PVOID pvType,
             DWORD dwFlags,
             ULONG cbBufferLength,
             BYTE *pBuffer,
             ULONG *pcbRead);
        
<fnptr name="Free" ret="HRESULT" convention="__stdcall">
 
            ITypeMarshal * This,
             PVOID pvType);
        
        
    } ITypeMarshalVtbl;

<struct name="ITypeMarshal">
<vptr>ITypeMarshalVtbl *</vptr>
</struct>

    

 

typedef  IRecordInfo *LPRECORDINFO;
extern const IID IID_IRecordInfo;
<struct name="IRecordInfoVtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            IRecordInfo * This,
             const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            IRecordInfo * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            IRecordInfo * This);
        
<fnptr name="RecordInit" ret="HRESULT" convention="__stdcall">
 
            IRecordInfo * This,
             PVOID pvNew);
        
<fnptr name="RecordClear" ret="HRESULT" convention="__stdcall">
 
            IRecordInfo * This,
             PVOID pvExisting);
        
<fnptr name="RecordCopy" ret="HRESULT" convention="__stdcall">
 
            IRecordInfo * This,
             PVOID pvExisting,
             PVOID pvNew);
        
<fnptr name="GetGuid" ret="HRESULT" convention="__stdcall">
 
            IRecordInfo * This,
             GUID *pguid);
        
<fnptr name="GetName" ret="HRESULT" convention="__stdcall">
 
            IRecordInfo * This,
             BSTR *pbstrName);
        
<fnptr name="GetSize" ret="HRESULT" convention="__stdcall">
 
            IRecordInfo * This,
             ULONG *pcbSize);
        
<fnptr name="GetTypeInfo" ret="HRESULT" convention="__stdcall">
 
            IRecordInfo * This,
             ITypeInfo **ppTypeInfo);
        
<fnptr name="GetField" ret="HRESULT" convention="__stdcall">
 
            IRecordInfo * This,
             PVOID pvData,
             LPCOLESTR szFieldName,
             VARIANT *pvarField);
        
<fnptr name="GetFieldNoCopy" ret="HRESULT" convention="__stdcall">
 
            IRecordInfo * This,
             PVOID pvData,
             LPCOLESTR szFieldName,
             VARIANT *pvarField,
             PVOID *ppvDataCArray);
        
<fnptr name="PutField" ret="HRESULT" convention="__stdcall">
 
            IRecordInfo * This,
             ULONG wFlags,
             PVOID pvData,
             LPCOLESTR szFieldName,
             VARIANT *pvarField);
        
<fnptr name="PutFieldNoCopy" ret="HRESULT" convention="__stdcall">
 
            IRecordInfo * This,
             ULONG wFlags,
             PVOID pvData,
             LPCOLESTR szFieldName,
             VARIANT *pvarField);
        
<fnptr name="GetFieldNames" ret="HRESULT" convention="__stdcall">
 
            IRecordInfo * This,
             ULONG *pcNames,
             BSTR *rgBstrNames);
        
<fnptr name="IsMatchingType" ret="BOOL" convention="__stdcall">
 
            IRecordInfo * This,
             IRecordInfo *pRecordInfo);
        
<fnptr name="RecordCreate" ret="PVOID" convention="__stdcall">
 
            IRecordInfo * This);
        
<fnptr name="RecordCreateCopy" ret="HRESULT" convention="__stdcall">
 
            IRecordInfo * This,
             PVOID pvSource,
             PVOID *ppvDest);
        
<fnptr name="RecordDestroy" ret="HRESULT" convention="__stdcall">
 
            IRecordInfo * This,
             PVOID pvRecord);
        
        
    } IRecordInfoVtbl;

<struct name="IRecordInfo">
<vptr>IRecordInfoVtbl *</vptr>
</struct>

    
 

typedef IErrorLog *LPERRORLOG;
extern const IID IID_IErrorLog;
<struct name="IErrorLogVtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            IErrorLog * This,
              const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            IErrorLog * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            IErrorLog * This);
        
<fnptr name="AddError" ret="HRESULT" convention="__stdcall">
 
            IErrorLog * This,
              LPCOLESTR pszPropName,
              EXCEPINFO *pExcepInfo);
        
        
    } IErrorLogVtbl;

<struct name="IErrorLog">
<vptr>IErrorLogVtbl *</vptr>
</struct>

    
 

typedef IPropertyBag *LPPROPERTYBAG;
extern const IID IID_IPropertyBag;
<struct name="IPropertyBagVtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            IPropertyBag * This,
              const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            IPropertyBag * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            IPropertyBag * This);
        
<fnptr name="Read" ret="HRESULT" convention="__stdcall">
 
            IPropertyBag * This,
             LPCOLESTR pszPropName,
             VARIANT *pVar,
             IErrorLog *pErrorLog);
        
<fnptr name="Write" ret="HRESULT" convention="__stdcall">
 
            IPropertyBag * This,
              LPCOLESTR pszPropName,
              VARIANT *pVar);
        
        
    } IPropertyBagVtbl;

<struct name="IPropertyBag">
<vptr>IPropertyBagVtbl *</vptr>
</struct>

    

<function name="IPropertyBag_RemoteRead_Proxy" ret="HRESULT" convention="__stdcall"> 
    IPropertyBag * This,
      LPCOLESTR pszPropName,
      VARIANT *pVar,
      IErrorLog *pErrorLog,
     DWORD varType,
      IUnknown *pUnkObj);
<function name="IPropertyBag_RemoteRead_Stub" ret="void" convention="__stdcall">

    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 
#pragma warning(pop)
extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0021_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0021_v0_0_s_ifspec;
<function name="BSTR_UserSize" ret="unsigned long" convention="__stdcall">
     unsigned long *, unsigned long            , BSTR * ); 
<function name="BSTR_UserMarshal" ret="unsigned char *" convention="__stdcall">
  unsigned long *, unsigned char *, BSTR * ); 
<function name="BSTR_UserUnmarshal" ret="unsigned char *" convention="__stdcall">
unsigned long *, unsigned char *, BSTR * ); 
<function name="BSTR_UserFree" ret="void" convention="__stdcall">
     unsigned long *, BSTR * ); 

<function name="CLEANLOCALSTORAGE_UserSize" ret="unsigned long" convention="__stdcall">
     unsigned long *, unsigned long            , CLEANLOCALSTORAGE * ); 
<function name="CLEANLOCALSTORAGE_UserMarshal" ret="unsigned char *" convention="__stdcall">
  unsigned long *, unsigned char *, CLEANLOCALSTORAGE * ); 
<function name="CLEANLOCALSTORAGE_UserUnmarshal" ret="unsigned char *" convention="__stdcall">
unsigned long *, unsigned char *, CLEANLOCALSTORAGE * ); 
<function name="CLEANLOCALSTORAGE_UserFree" ret="void" convention="__stdcall">
     unsigned long *, CLEANLOCALSTORAGE * ); 

<function name="VARIANT_UserSize" ret="unsigned long" convention="__stdcall">
     unsigned long *, unsigned long            , VARIANT * ); 
<function name="VARIANT_UserMarshal" ret="unsigned char *" convention="__stdcall">
  unsigned long *, unsigned char *, VARIANT * ); 
<function name="VARIANT_UserUnmarshal" ret="unsigned char *" convention="__stdcall">
unsigned long *, unsigned char *, VARIANT * ); 
<function name="VARIANT_UserFree" ret="void" convention="__stdcall">
     unsigned long *, VARIANT * ); 

<function name="BSTR_UserSize64" ret="unsigned long" convention="__stdcall">
     unsigned long *, unsigned long            , BSTR * ); 
<function name="BSTR_UserMarshal64" ret="unsigned char *" convention="__stdcall">
  unsigned long *, unsigned char *, BSTR * ); 
<function name="BSTR_UserUnmarshal64" ret="unsigned char *" convention="__stdcall">
unsigned long *, unsigned char *, BSTR * ); 
<function name="BSTR_UserFree64" ret="void" convention="__stdcall">
     unsigned long *, BSTR * ); 

<function name="CLEANLOCALSTORAGE_UserSize64" ret="unsigned long" convention="__stdcall">
     unsigned long *, unsigned long            , CLEANLOCALSTORAGE * ); 
<function name="CLEANLOCALSTORAGE_UserMarshal64" ret="unsigned char *" convention="__stdcall">
  unsigned long *, unsigned char *, CLEANLOCALSTORAGE * ); 
<function name="CLEANLOCALSTORAGE_UserUnmarshal64" ret="unsigned char *" convention="__stdcall">
unsigned long *, unsigned char *, CLEANLOCALSTORAGE * ); 
<function name="CLEANLOCALSTORAGE_UserFree64" ret="void" convention="__stdcall">
     unsigned long *, CLEANLOCALSTORAGE * ); 

<function name="VARIANT_UserSize64" ret="unsigned long" convention="__stdcall">
     unsigned long *, unsigned long            , VARIANT * ); 
<function name="VARIANT_UserMarshal64" ret="unsigned char *" convention="__stdcall">
  unsigned long *, unsigned char *, VARIANT * ); 
<function name="VARIANT_UserUnmarshal64" ret="unsigned char *" convention="__stdcall">
unsigned long *, unsigned char *, VARIANT * ); 
<function name="VARIANT_UserFree64" ret="void" convention="__stdcall">
     unsigned long *, VARIANT * ); 

<function name="IDispatch_Invoke_Proxy" ret="HRESULT" convention="__stdcall"> 
    IDispatch * This,
     DISPID dispIdMember,
     const IID * const riid,
     LCID lcid,
     WORD wFlags,
     DISPPARAMS *pDispParams,
     VARIANT *pVarResult,
     EXCEPINFO *pExcepInfo,
     UINT *puArgErr);
<function name="IDispatch_Invoke_Stub" ret="HRESULT" convention="__stdcall"> 
    IDispatch * This,
     DISPID dispIdMember,
      const IID * const riid,
     LCID lcid,
     DWORD dwFlags,
      DISPPARAMS *pDispParams,
      VARIANT *pVarResult,
      EXCEPINFO *pExcepInfo,
      UINT *pArgErr,
     UINT cVarRef,
      UINT *rgVarRefIdx,
      VARIANTARG *rgVarRef);

<function name="IEnumVARIANT_Next_Proxy" ret="HRESULT" convention="__stdcall"> 
    IEnumVARIANT * This,
     ULONG celt,
     VARIANT *rgVar,
     ULONG *pCeltFetched);
<function name="IEnumVARIANT_Next_Stub" ret="HRESULT" convention="__stdcall"> 
    IEnumVARIANT * This,
     ULONG celt,
      VARIANT *rgVar,
      ULONG *pCeltFetched);

<function name="ITypeComp_Bind_Proxy" ret="HRESULT" convention="__stdcall"> 
    ITypeComp * This,
     LPOLESTR szName,
     ULONG lHashVal,
     WORD wFlags,
     ITypeInfo **ppTInfo,
     DESCKIND *pDescKind,
     BINDPTR *pBindPtr);
<function name="ITypeComp_Bind_Stub" ret="HRESULT" convention="__stdcall"> 
    ITypeComp * This,
      LPOLESTR szName,
     ULONG lHashVal,
     WORD wFlags,
      ITypeInfo **ppTInfo,
      DESCKIND *pDescKind,
      LPFUNCDESC *ppFuncDesc,
      LPVARDESC *ppVarDesc,
      ITypeComp **ppTypeComp,
      CLEANLOCALSTORAGE *pDummy);

<function name="ITypeComp_BindType_Proxy" ret="HRESULT" convention="__stdcall"> 
    ITypeComp * This,
     LPOLESTR szName,
     ULONG lHashVal,
     ITypeInfo **ppTInfo,
     ITypeComp **ppTComp);
<function name="ITypeComp_BindType_Stub" ret="HRESULT" convention="__stdcall"> 
    ITypeComp * This,
      LPOLESTR szName,
     ULONG lHashVal,
      ITypeInfo **ppTInfo);

<function name="ITypeInfo_GetTypeAttr_Proxy" ret="HRESULT" convention="__stdcall"> 
    ITypeInfo * This,
     TYPEATTR **ppTypeAttr);
<function name="ITypeInfo_GetTypeAttr_Stub" ret="HRESULT" convention="__stdcall"> 
    ITypeInfo * This,
      LPTYPEATTR *ppTypeAttr,
      CLEANLOCALSTORAGE *pDummy);

<function name="ITypeInfo_GetFuncDesc_Proxy" ret="HRESULT" convention="__stdcall"> 
    ITypeInfo * This,
     UINT index,
     FUNCDESC **ppFuncDesc);
<function name="ITypeInfo_GetFuncDesc_Stub" ret="HRESULT" convention="__stdcall"> 
    ITypeInfo * This,
     UINT index,
      LPFUNCDESC *ppFuncDesc,
      CLEANLOCALSTORAGE *pDummy);

<function name="ITypeInfo_GetVarDesc_Proxy" ret="HRESULT" convention="__stdcall"> 
    ITypeInfo * This,
     UINT index,
     VARDESC **ppVarDesc);
<function name="ITypeInfo_GetVarDesc_Stub" ret="HRESULT" convention="__stdcall"> 
    ITypeInfo * This,
     UINT index,
      LPVARDESC *ppVarDesc,
      CLEANLOCALSTORAGE *pDummy);

<function name="ITypeInfo_GetNames_Proxy" ret="HRESULT" convention="__stdcall"> 
    ITypeInfo * This,
     MEMBERID memid,
     BSTR *rgBstrNames,
     UINT cMaxNames,
     UINT *pcNames);
<function name="ITypeInfo_GetNames_Stub" ret="HRESULT" convention="__stdcall"> 
    ITypeInfo * This,
     MEMBERID memid,
      BSTR *rgBstrNames,
     UINT cMaxNames,
      UINT *pcNames);

<function name="ITypeInfo_GetIDsOfNames_Proxy" ret="HRESULT" convention="__stdcall"> 
    ITypeInfo * This,
     LPOLESTR *rgszNames,
     UINT cNames,
     MEMBERID *pMemId);
<function name="ITypeInfo_GetIDsOfNames_Stub" ret="HRESULT" convention="__stdcall"> 
    ITypeInfo * This);

<function name="ITypeInfo_Invoke_Proxy" ret="HRESULT" convention="__stdcall"> 
    ITypeInfo * This,
     PVOID pvInstance,
     MEMBERID memid,
     WORD wFlags,
     DISPPARAMS *pDispParams,
     VARIANT *pVarResult,
     EXCEPINFO *pExcepInfo,
     UINT *puArgErr);
<function name="ITypeInfo_Invoke_Stub" ret="HRESULT" convention="__stdcall"> 
    ITypeInfo * This);

<function name="ITypeInfo_GetDocumentation_Proxy" ret="HRESULT" convention="__stdcall"> 
    ITypeInfo * This,
     MEMBERID memid,
     BSTR *pBstrName,
     BSTR *pBstrDocString,
     DWORD *pdwHelpContext,
     BSTR *pBstrHelpFile);
<function name="ITypeInfo_GetDocumentation_Stub" ret="HRESULT" convention="__stdcall"> 
    ITypeInfo * This,
     MEMBERID memid,
     DWORD refPtrFlags,
      BSTR *pBstrName,
      BSTR *pBstrDocString,
      DWORD *pdwHelpContext,
      BSTR *pBstrHelpFile);

<function name="ITypeInfo_GetDllEntry_Proxy" ret="HRESULT" convention="__stdcall"> 
    ITypeInfo * This,
     MEMBERID memid,
     INVOKEKIND invKind,
     BSTR *pBstrDllName,
     BSTR *pBstrName,
     WORD *pwOrdinal);
<function name="ITypeInfo_GetDllEntry_Stub" ret="HRESULT" convention="__stdcall"> 
    ITypeInfo * This,
     MEMBERID memid,
     INVOKEKIND invKind,
     DWORD refPtrFlags,
      BSTR *pBstrDllName,
      BSTR *pBstrName,
      WORD *pwOrdinal);

<function name="ITypeInfo_AddressOfMember_Proxy" ret="HRESULT" convention="__stdcall"> 
    ITypeInfo * This,
     MEMBERID memid,
     INVOKEKIND invKind,
     PVOID *ppv);
<function name="ITypeInfo_AddressOfMember_Stub" ret="HRESULT" convention="__stdcall"> 
    ITypeInfo * This);

<function name="ITypeInfo_CreateInstance_Proxy" ret="HRESULT" convention="__stdcall"> 
    ITypeInfo * This,
     IUnknown *pUnkOuter,
     const IID * const riid,
     PVOID *ppvObj);
<function name="ITypeInfo_CreateInstance_Stub" ret="HRESULT" convention="__stdcall"> 
    ITypeInfo * This,
      const IID * const riid,
      IUnknown **ppvObj);

<function name="ITypeInfo_GetContainingTypeLib_Proxy" ret="HRESULT" convention="__stdcall"> 
    ITypeInfo * This,
     ITypeLib **ppTLib,
     UINT *pIndex);
<function name="ITypeInfo_GetContainingTypeLib_Stub" ret="HRESULT" convention="__stdcall"> 
    ITypeInfo * This,
      ITypeLib **ppTLib,
      UINT *pIndex);

<function name="ITypeInfo_ReleaseTypeAttr_Proxy" ret="void" convention="__stdcall">
 
    ITypeInfo * This,
     TYPEATTR *pTypeAttr);
<function name="ITypeInfo_ReleaseTypeAttr_Stub" ret="HRESULT" convention="__stdcall"> 
    ITypeInfo * This);

<function name="ITypeInfo_ReleaseFuncDesc_Proxy" ret="void" convention="__stdcall">
 
    ITypeInfo * This,
     FUNCDESC *pFuncDesc);
<function name="ITypeInfo_ReleaseFuncDesc_Stub" ret="HRESULT" convention="__stdcall"> 
    ITypeInfo * This);

<function name="ITypeInfo_ReleaseVarDesc_Proxy" ret="void" convention="__stdcall">
 
    ITypeInfo * This,
     VARDESC *pVarDesc);
<function name="ITypeInfo_ReleaseVarDesc_Stub" ret="HRESULT" convention="__stdcall"> 
    ITypeInfo * This);

<function name="ITypeInfo2_GetDocumentation2_Proxy" ret="HRESULT" convention="__stdcall"> 
    ITypeInfo2 * This,
     MEMBERID memid,
     LCID lcid,
     BSTR *pbstrHelpString,
     DWORD *pdwHelpStringContext,
     BSTR *pbstrHelpStringDll);
<function name="ITypeInfo2_GetDocumentation2_Stub" ret="HRESULT" convention="__stdcall"> 
    ITypeInfo2 * This,
     MEMBERID memid,
     LCID lcid,
     DWORD refPtrFlags,
      BSTR *pbstrHelpString,
      DWORD *pdwHelpStringContext,
      BSTR *pbstrHelpStringDll);

<function name="ITypeLib_GetTypeInfoCount_Proxy" ret="UINT" convention="__stdcall">
 
    ITypeLib * This);
<function name="ITypeLib_GetTypeInfoCount_Stub" ret="HRESULT" convention="__stdcall"> 
    ITypeLib * This,
      UINT *pcTInfo);

<function name="ITypeLib_GetLibAttr_Proxy" ret="HRESULT" convention="__stdcall"> 
    ITypeLib * This,
     TLIBATTR **ppTLibAttr);
<function name="ITypeLib_GetLibAttr_Stub" ret="HRESULT" convention="__stdcall"> 
    ITypeLib * This,
      LPTLIBATTR *ppTLibAttr,
      CLEANLOCALSTORAGE *pDummy);

<function name="ITypeLib_GetDocumentation_Proxy" ret="HRESULT" convention="__stdcall"> 
    ITypeLib * This,
     INT index,
     BSTR *pBstrName,
     BSTR *pBstrDocString,
     DWORD *pdwHelpContext,
     BSTR *pBstrHelpFile);
<function name="ITypeLib_GetDocumentation_Stub" ret="HRESULT" convention="__stdcall"> 
    ITypeLib * This,
     INT index,
     DWORD refPtrFlags,
      BSTR *pBstrName,
      BSTR *pBstrDocString,
      DWORD *pdwHelpContext,
      BSTR *pBstrHelpFile);

<function name="ITypeLib_IsName_Proxy" ret="HRESULT" convention="__stdcall"> 
    ITypeLib * This,
     LPOLESTR szNameBuf,
     ULONG lHashVal,
     BOOL *pfName);
<function name="ITypeLib_IsName_Stub" ret="HRESULT" convention="__stdcall"> 
    ITypeLib * This,
      LPOLESTR szNameBuf,
     ULONG lHashVal,
      BOOL *pfName,
      BSTR *pBstrLibName);

<function name="ITypeLib_FindName_Proxy" ret="HRESULT" convention="__stdcall"> 
    ITypeLib * This,
     LPOLESTR szNameBuf,
     ULONG lHashVal,
     ITypeInfo **ppTInfo,
     MEMBERID *rgMemId,
     USHORT *pcFound);
<function name="ITypeLib_FindName_Stub" ret="HRESULT" convention="__stdcall"> 
    ITypeLib * This,
      LPOLESTR szNameBuf,
     ULONG lHashVal,
      ITypeInfo **ppTInfo,
      MEMBERID *rgMemId,
      USHORT *pcFound,
      BSTR *pBstrLibName);

<function name="ITypeLib_ReleaseTLibAttr_Proxy" ret="void" convention="__stdcall">
 
    ITypeLib * This,
     TLIBATTR *pTLibAttr);
<function name="ITypeLib_ReleaseTLibAttr_Stub" ret="HRESULT" convention="__stdcall"> 
    ITypeLib * This);

<function name="ITypeLib2_GetLibStatistics_Proxy" ret="HRESULT" convention="__stdcall"> 
    ITypeLib2 * This,
     ULONG *pcUniqueNames,
     ULONG *pcchUniqueNames);
<function name="ITypeLib2_GetLibStatistics_Stub" ret="HRESULT" convention="__stdcall"> 
    ITypeLib2 * This,
      ULONG *pcUniqueNames,
      ULONG *pcchUniqueNames);

<function name="ITypeLib2_GetDocumentation2_Proxy" ret="HRESULT" convention="__stdcall"> 
    ITypeLib2 * This,
     INT index,
     LCID lcid,
     BSTR *pbstrHelpString,
     DWORD *pdwHelpStringContext,
     BSTR *pbstrHelpStringDll);
<function name="ITypeLib2_GetDocumentation2_Stub" ret="HRESULT" convention="__stdcall"> 
    ITypeLib2 * This,
     INT index,
     LCID lcid,
     DWORD refPtrFlags,
      BSTR *pbstrHelpString,
      DWORD *pdwHelpStringContext,
      BSTR *pbstrHelpStringDll);

<function name="IPropertyBag_Read_Proxy" ret="HRESULT" convention="__stdcall"> 
    IPropertyBag * This,
     LPCOLESTR pszPropName,
     VARIANT *pVar,
     IErrorLog *pErrorLog);
<function name="IPropertyBag_Read_Stub" ret="HRESULT" convention="__stdcall"> 
    IPropertyBag * This,
      LPCOLESTR pszPropName,
      VARIANT *pVar,
      IErrorLog *pErrorLog,
     DWORD varType,
      IUnknown *pUnkObj);
 
<struct name="_xml_error">
    unsigned int _nLine;
    BSTR _pchBuf;
    unsigned int _cchBuf;
    unsigned int _ich;
    BSTR _pszFound;
    BSTR _pszExpected;
    DWORD _reserved1;
    DWORD _reserved2;
    } 	XML_ERROR;
extern RPC_IF_HANDLE __MIDL_itf_msxml_0000_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_msxml_0000_0000_v0_0_s_ifspec;

 

typedef  
enum tagDOMNodeType
    {	NODE_INVALID	= 0,
	NODE_ELEMENT	= ( NODE_INVALID + 1 ) ,
	NODE_ATTRIBUTE	= ( NODE_ELEMENT + 1 ) ,
	NODE_TEXT	= ( NODE_ATTRIBUTE + 1 ) ,
	NODE_CDATA_SECTION	= ( NODE_TEXT + 1 ) ,
	NODE_ENTITY_REFERENCE	= ( NODE_CDATA_SECTION + 1 ) ,
	NODE_ENTITY	= ( NODE_ENTITY_REFERENCE + 1 ) ,
	NODE_PROCESSING_INSTRUCTION	= ( NODE_ENTITY + 1 ) ,
	NODE_COMMENT	= ( NODE_PROCESSING_INSTRUCTION + 1 ) ,
	NODE_DOCUMENT	= ( NODE_COMMENT + 1 ) ,
	NODE_DOCUMENT_TYPE	= ( NODE_DOCUMENT + 1 ) ,
	NODE_DOCUMENT_FRAGMENT	= ( NODE_DOCUMENT_TYPE + 1 ) ,
	NODE_NOTATION	= ( NODE_DOCUMENT_FRAGMENT + 1 ) 
    } 	DOMNodeType;
typedef  
enum tagXMLEMEM_TYPE
    {	XMLELEMTYPE_ELEMENT	= 0,
	XMLELEMTYPE_TEXT	= ( XMLELEMTYPE_ELEMENT + 1 ) ,
	XMLELEMTYPE_COMMENT	= ( XMLELEMTYPE_TEXT + 1 ) ,
	XMLELEMTYPE_DOCUMENT	= ( XMLELEMTYPE_COMMENT + 1 ) ,
	XMLELEMTYPE_DTD	= ( XMLELEMTYPE_DOCUMENT + 1 ) ,
	XMLELEMTYPE_PI	= ( XMLELEMTYPE_DTD + 1 ) ,
	XMLELEMTYPE_OTHER	= ( XMLELEMTYPE_PI + 1 ) 
    } 	XMLELEM_TYPE;
extern const IID LIBID_MSXML;
 
extern const IID IID_IXMLDOMImplementation;
<struct name="IXMLDOMImplementationVtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMImplementation * This,
             const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            IXMLDOMImplementation * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            IXMLDOMImplementation * This);
        
<fnptr name="GetTypeInfoCount" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMImplementation * This,
             UINT *pctinfo);
        
<fnptr name="GetTypeInfo" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMImplementation * This,
             UINT iTInfo,
             LCID lcid,
             ITypeInfo **ppTInfo);
        
<fnptr name="GetIDsOfNames" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMImplementation * This,
             const IID * const riid,
             LPOLESTR *rgszNames,
             UINT cNames,
             LCID lcid,
             DISPID *rgDispId);
        
<fnptr name="Invoke" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMImplementation * This,
             DISPID dispIdMember,
             const IID * const riid,
             LCID lcid,
             WORD wFlags,
             DISPPARAMS *pDispParams,
             VARIANT *pVarResult,
             EXCEPINFO *pExcepInfo,
             UINT *puArgErr);
        
<fnptr name="hasFeature" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMImplementation * This,
             BSTR feature,
             BSTR version,
             VARIANT_BOOL *hasFeature);
        
        
    } IXMLDOMImplementationVtbl;

<struct name="IXMLDOMImplementation">
<vptr>IXMLDOMImplementationVtbl *</vptr>
</struct>

    

 
extern const IID IID_IXMLDOMNode;

<struct name="IXMLDOMNodeVtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMNode * This,
             const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            IXMLDOMNode * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            IXMLDOMNode * This);
        
<fnptr name="GetTypeInfoCount" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMNode * This,
             UINT *pctinfo);
        
<fnptr name="GetTypeInfo" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMNode * This,
             UINT iTInfo,
             LCID lcid,
             ITypeInfo **ppTInfo);
        
<fnptr name="GetIDsOfNames" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMNode * This,
             const IID * const riid,
             LPOLESTR *rgszNames,
             UINT cNames,
             LCID lcid,
             DISPID *rgDispId);
        
<fnptr name="Invoke" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMNode * This,
             DISPID dispIdMember,
             const IID * const riid,
             LCID lcid,
             WORD wFlags,
             DISPPARAMS *pDispParams,
             VARIANT *pVarResult,
             EXCEPINFO *pExcepInfo,
             UINT *puArgErr);
        
<fnptr name="get_nodeName" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMNode * This,
             BSTR *name);
        
<fnptr name="get_nodeValue" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMNode * This,
             VARIANT *value);
        
<fnptr name="put_nodeValue" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMNode * This,
             VARIANT value);
        
<fnptr name="get_nodeType" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMNode * This,
             DOMNodeType *type);
        
<fnptr name="get_parentNode" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMNode * This,
             IXMLDOMNode **parent);
        
<fnptr name="get_childNodes" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMNode * This,
             IXMLDOMNodeList **childList);
        
<fnptr name="get_firstChild" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMNode * This,
             IXMLDOMNode **firstChild);
        
<fnptr name="get_lastChild" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMNode * This,
             IXMLDOMNode **lastChild);
        
<fnptr name="get_previousSibling" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMNode * This,
             IXMLDOMNode **previousSibling);
        
<fnptr name="get_nextSibling" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMNode * This,
             IXMLDOMNode **nextSibling);
        
<fnptr name="get_attributes" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMNode * This,
             IXMLDOMNamedNodeMap **attributeMap);
        
<fnptr name="insertBefore" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMNode * This,
             IXMLDOMNode *newChild,
             VARIANT refChild,
             IXMLDOMNode **outNewChild);
        
<fnptr name="replaceChild" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMNode * This,
             IXMLDOMNode *newChild,
             IXMLDOMNode *oldChild,
             IXMLDOMNode **outOldChild);
        
<fnptr name="removeChild" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMNode * This,
             IXMLDOMNode *childNode,
             IXMLDOMNode **oldChild);
        
<fnptr name="appendChild" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMNode * This,
             IXMLDOMNode *newChild,
             IXMLDOMNode **outNewChild);
        
<fnptr name="hasChildNodes" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMNode * This,
             VARIANT_BOOL *hasChild);
        
<fnptr name="get_ownerDocument" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMNode * This,
             IXMLDOMDocument **DOMDocument);
        
<fnptr name="cloneNode" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMNode * This,
             VARIANT_BOOL deep,
             IXMLDOMNode **cloneRoot);
        
<fnptr name="get_nodeTypeString" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMNode * This,
             BSTR *nodeType);
        
<fnptr name="get_text" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMNode * This,
             BSTR *text);
        
<fnptr name="put_text" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMNode * This,
             BSTR text);
        
<fnptr name="get_specified" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMNode * This,
             VARIANT_BOOL *isSpecified);
        
<fnptr name="get_definition" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMNode * This,
             IXMLDOMNode **definitionNode);
        
<fnptr name="get_nodeTypedValue" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMNode * This,
             VARIANT *typedValue);
        
<fnptr name="put_nodeTypedValue" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMNode * This,
             VARIANT typedValue);
        
<fnptr name="get_dataType" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMNode * This,
             VARIANT *dataTypeName);
        
<fnptr name="put_dataType" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMNode * This,
             BSTR dataTypeName);
        
<fnptr name="get_xml" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMNode * This,
             BSTR *xmlString);
        
<fnptr name="transformNode" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMNode * This,
             IXMLDOMNode *stylesheet,
             BSTR *xmlString);
        
<fnptr name="selectNodes" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMNode * This,
             BSTR queryString,
             IXMLDOMNodeList **resultList);
        
<fnptr name="selectSingleNode" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMNode * This,
             BSTR queryString,
             IXMLDOMNode **resultNode);
        
<fnptr name="get_parsed" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMNode * This,
             VARIANT_BOOL *isParsed);
        
<fnptr name="get_namespaceURI" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMNode * This,
             BSTR *namespaceURI);
        
<fnptr name="get_prefix" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMNode * This,
             BSTR *prefixString);
        
<fnptr name="get_baseName" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMNode * This,
             BSTR *nameString);
        
<fnptr name="transformNodeToObject" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMNode * This,
             IXMLDOMNode *stylesheet,
             VARIANT outputObject);
        
        
    } IXMLDOMNodeVtbl;

<struct name="IXMLDOMNode">
<vptr>IXMLDOMNodeVtbl *</vptr>
</struct>

    

 
extern const IID IID_IXMLDOMDocumentFragment;

<struct name="IXMLDOMDocumentFragmentVtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMDocumentFragment * This,
             const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            IXMLDOMDocumentFragment * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            IXMLDOMDocumentFragment * This);
        
<fnptr name="GetTypeInfoCount" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMDocumentFragment * This,
             UINT *pctinfo);
        
<fnptr name="GetTypeInfo" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMDocumentFragment * This,
             UINT iTInfo,
             LCID lcid,
             ITypeInfo **ppTInfo);
        
<fnptr name="GetIDsOfNames" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMDocumentFragment * This,
             const IID * const riid,
             LPOLESTR *rgszNames,
             UINT cNames,
             LCID lcid,
             DISPID *rgDispId);
        
<fnptr name="Invoke" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMDocumentFragment * This,
             DISPID dispIdMember,
             const IID * const riid,
             LCID lcid,
             WORD wFlags,
             DISPPARAMS *pDispParams,
             VARIANT *pVarResult,
             EXCEPINFO *pExcepInfo,
             UINT *puArgErr);
        
<fnptr name="get_nodeName" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMDocumentFragment * This,
             BSTR *name);
        
<fnptr name="get_nodeValue" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMDocumentFragment * This,
             VARIANT *value);
        
<fnptr name="put_nodeValue" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMDocumentFragment * This,
             VARIANT value);
        
<fnptr name="get_nodeType" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMDocumentFragment * This,
             DOMNodeType *type);
        
<fnptr name="get_parentNode" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMDocumentFragment * This,
             IXMLDOMNode **parent);
        
<fnptr name="get_childNodes" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMDocumentFragment * This,
             IXMLDOMNodeList **childList);
        
<fnptr name="get_firstChild" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMDocumentFragment * This,
             IXMLDOMNode **firstChild);
        
<fnptr name="get_lastChild" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMDocumentFragment * This,
             IXMLDOMNode **lastChild);
        
<fnptr name="get_previousSibling" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMDocumentFragment * This,
             IXMLDOMNode **previousSibling);
        
<fnptr name="get_nextSibling" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMDocumentFragment * This,
             IXMLDOMNode **nextSibling);
        
<fnptr name="get_attributes" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMDocumentFragment * This,
             IXMLDOMNamedNodeMap **attributeMap);
        
<fnptr name="insertBefore" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMDocumentFragment * This,
             IXMLDOMNode *newChild,
             VARIANT refChild,
             IXMLDOMNode **outNewChild);
        
<fnptr name="replaceChild" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMDocumentFragment * This,
             IXMLDOMNode *newChild,
             IXMLDOMNode *oldChild,
             IXMLDOMNode **outOldChild);
        
<fnptr name="removeChild" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMDocumentFragment * This,
             IXMLDOMNode *childNode,
             IXMLDOMNode **oldChild);
        
<fnptr name="appendChild" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMDocumentFragment * This,
             IXMLDOMNode *newChild,
             IXMLDOMNode **outNewChild);
        
<fnptr name="hasChildNodes" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMDocumentFragment * This,
             VARIANT_BOOL *hasChild);
        
<fnptr name="get_ownerDocument" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMDocumentFragment * This,
             IXMLDOMDocument **DOMDocument);
        
<fnptr name="cloneNode" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMDocumentFragment * This,
             VARIANT_BOOL deep,
             IXMLDOMNode **cloneRoot);
        
<fnptr name="get_nodeTypeString" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMDocumentFragment * This,
             BSTR *nodeType);
        
<fnptr name="get_text" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMDocumentFragment * This,
             BSTR *text);
        
<fnptr name="put_text" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMDocumentFragment * This,
             BSTR text);
        
<fnptr name="get_specified" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMDocumentFragment * This,
             VARIANT_BOOL *isSpecified);
        
<fnptr name="get_definition" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMDocumentFragment * This,
             IXMLDOMNode **definitionNode);
        
<fnptr name="get_nodeTypedValue" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMDocumentFragment * This,
             VARIANT *typedValue);
        
<fnptr name="put_nodeTypedValue" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMDocumentFragment * This,
             VARIANT typedValue);
        
<fnptr name="get_dataType" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMDocumentFragment * This,
             VARIANT *dataTypeName);
        
<fnptr name="put_dataType" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMDocumentFragment * This,
             BSTR dataTypeName);
        
<fnptr name="get_xml" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMDocumentFragment * This,
             BSTR *xmlString);
        
<fnptr name="transformNode" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMDocumentFragment * This,
             IXMLDOMNode *stylesheet,
             BSTR *xmlString);
        
<fnptr name="selectNodes" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMDocumentFragment * This,
             BSTR queryString,
             IXMLDOMNodeList **resultList);
        
<fnptr name="selectSingleNode" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMDocumentFragment * This,
             BSTR queryString,
             IXMLDOMNode **resultNode);
        
<fnptr name="get_parsed" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMDocumentFragment * This,
             VARIANT_BOOL *isParsed);
        
<fnptr name="get_namespaceURI" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMDocumentFragment * This,
             BSTR *namespaceURI);
        
<fnptr name="get_prefix" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMDocumentFragment * This,
             BSTR *prefixString);
        
<fnptr name="get_baseName" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMDocumentFragment * This,
             BSTR *nameString);
        
<fnptr name="transformNodeToObject" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMDocumentFragment * This,
             IXMLDOMNode *stylesheet,
             VARIANT outputObject);
        
        
    } IXMLDOMDocumentFragmentVtbl;

<struct name="IXMLDOMDocumentFragment">
<vptr>IXMLDOMDocumentFragmentVtbl *</vptr>
</struct>

    
 
extern const IID IID_IXMLDOMDocument;
<struct name="IXMLDOMDocumentVtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMDocument * This,
             const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            IXMLDOMDocument * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            IXMLDOMDocument * This);
        
<fnptr name="GetTypeInfoCount" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMDocument * This,
             UINT *pctinfo);
        
<fnptr name="GetTypeInfo" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMDocument * This,
             UINT iTInfo,
             LCID lcid,
             ITypeInfo **ppTInfo);
        
<fnptr name="GetIDsOfNames" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMDocument * This,
             const IID * const riid,
             LPOLESTR *rgszNames,
             UINT cNames,
             LCID lcid,
             DISPID *rgDispId);
        
<fnptr name="Invoke" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMDocument * This,
             DISPID dispIdMember,
             const IID * const riid,
             LCID lcid,
             WORD wFlags,
             DISPPARAMS *pDispParams,
             VARIANT *pVarResult,
             EXCEPINFO *pExcepInfo,
             UINT *puArgErr);
        
<fnptr name="get_nodeName" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMDocument * This,
             BSTR *name);
        
<fnptr name="get_nodeValue" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMDocument * This,
             VARIANT *value);
        
<fnptr name="put_nodeValue" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMDocument * This,
             VARIANT value);
        
<fnptr name="get_nodeType" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMDocument * This,
             DOMNodeType *type);
        
<fnptr name="get_parentNode" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMDocument * This,
             IXMLDOMNode **parent);
        
<fnptr name="get_childNodes" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMDocument * This,
             IXMLDOMNodeList **childList);
        
<fnptr name="get_firstChild" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMDocument * This,
             IXMLDOMNode **firstChild);
        
<fnptr name="get_lastChild" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMDocument * This,
             IXMLDOMNode **lastChild);
        
<fnptr name="get_previousSibling" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMDocument * This,
             IXMLDOMNode **previousSibling);
        
<fnptr name="get_nextSibling" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMDocument * This,
             IXMLDOMNode **nextSibling);
        
<fnptr name="get_attributes" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMDocument * This,
             IXMLDOMNamedNodeMap **attributeMap);
        
<fnptr name="insertBefore" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMDocument * This,
             IXMLDOMNode *newChild,
             VARIANT refChild,
             IXMLDOMNode **outNewChild);
        
<fnptr name="replaceChild" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMDocument * This,
             IXMLDOMNode *newChild,
             IXMLDOMNode *oldChild,
             IXMLDOMNode **outOldChild);
        
<fnptr name="removeChild" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMDocument * This,
             IXMLDOMNode *childNode,
             IXMLDOMNode **oldChild);
        
<fnptr name="appendChild" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMDocument * This,
             IXMLDOMNode *newChild,
             IXMLDOMNode **outNewChild);
        
<fnptr name="hasChildNodes" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMDocument * This,
             VARIANT_BOOL *hasChild);
        
<fnptr name="get_ownerDocument" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMDocument * This,
             IXMLDOMDocument **DOMDocument);
        
<fnptr name="cloneNode" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMDocument * This,
             VARIANT_BOOL deep,
             IXMLDOMNode **cloneRoot);
        
<fnptr name="get_nodeTypeString" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMDocument * This,
             BSTR *nodeType);
        
<fnptr name="get_text" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMDocument * This,
             BSTR *text);
        
<fnptr name="put_text" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMDocument * This,
             BSTR text);
        
<fnptr name="get_specified" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMDocument * This,
             VARIANT_BOOL *isSpecified);
        
<fnptr name="get_definition" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMDocument * This,
             IXMLDOMNode **definitionNode);
        
<fnptr name="get_nodeTypedValue" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMDocument * This,
             VARIANT *typedValue);
        
<fnptr name="put_nodeTypedValue" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMDocument * This,
             VARIANT typedValue);
        
<fnptr name="get_dataType" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMDocument * This,
             VARIANT *dataTypeName);
        
<fnptr name="put_dataType" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMDocument * This,
             BSTR dataTypeName);
        
<fnptr name="get_xml" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMDocument * This,
             BSTR *xmlString);
        
<fnptr name="transformNode" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMDocument * This,
             IXMLDOMNode *stylesheet,
             BSTR *xmlString);
        
<fnptr name="selectNodes" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMDocument * This,
             BSTR queryString,
             IXMLDOMNodeList **resultList);
        
<fnptr name="selectSingleNode" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMDocument * This,
             BSTR queryString,
             IXMLDOMNode **resultNode);
        
<fnptr name="get_parsed" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMDocument * This,
             VARIANT_BOOL *isParsed);
        
<fnptr name="get_namespaceURI" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMDocument * This,
             BSTR *namespaceURI);
        
<fnptr name="get_prefix" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMDocument * This,
             BSTR *prefixString);
        
<fnptr name="get_baseName" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMDocument * This,
             BSTR *nameString);
        
<fnptr name="transformNodeToObject" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMDocument * This,
             IXMLDOMNode *stylesheet,
             VARIANT outputObject);
        
<fnptr name="get_doctype" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMDocument * This,
             IXMLDOMDocumentType **documentType);
        
<fnptr name="get_implementation" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMDocument * This,
             IXMLDOMImplementation **impl);
        
<fnptr name="get_documentElement" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMDocument * This,
             IXMLDOMElement **DOMElement);
        
<fnptr name="putref_documentElement" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMDocument * This,
             IXMLDOMElement *DOMElement);
        
<fnptr name="createElement" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMDocument * This,
             BSTR tagName,
             IXMLDOMElement **element);
        
<fnptr name="createDocumentFragment" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMDocument * This,
             IXMLDOMDocumentFragment **docFrag);
        
<fnptr name="createTextNode" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMDocument * This,
             BSTR data,
             IXMLDOMText **text);
        
<fnptr name="createComment" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMDocument * This,
             BSTR data,
             IXMLDOMComment **comment);
        
<fnptr name="createCDATASection" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMDocument * This,
             BSTR data,
             IXMLDOMCDATASection **cdata);
        
<fnptr name="createProcessingInstruction" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMDocument * This,
             BSTR target,
             BSTR data,
             IXMLDOMProcessingInstruction **pi);
        
<fnptr name="createAttribute" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMDocument * This,
             BSTR name,
             IXMLDOMAttribute **attribute);
        
<fnptr name="createEntityReference" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMDocument * This,
             BSTR name,
             IXMLDOMEntityReference **entityRef);
        
<fnptr name="getElementsByTagName" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMDocument * This,
             BSTR tagName,
             IXMLDOMNodeList **resultList);
        
<fnptr name="createNode" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMDocument * This,
             VARIANT Type,
             BSTR name,
             BSTR namespaceURI,
             IXMLDOMNode **node);
        
<fnptr name="nodeFromID" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMDocument * This,
             BSTR idString,
             IXMLDOMNode **node);
        
<fnptr name="load" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMDocument * This,
             VARIANT xmlSource,
             VARIANT_BOOL *isSuccessful);
        
<fnptr name="get_readyState" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMDocument * This,
             long *value);
        
<fnptr name="get_parseError" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMDocument * This,
             IXMLDOMParseError **errorObj);
        
<fnptr name="get_url" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMDocument * This,
             BSTR *urlString);
        
<fnptr name="get_async" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMDocument * This,
             VARIANT_BOOL *isAsync);
        
<fnptr name="put_async" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMDocument * This,
             VARIANT_BOOL isAsync);
        
<fnptr name="abort" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMDocument * This);
        
<fnptr name="loadXML" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMDocument * This,
             BSTR bstrXML,
             VARIANT_BOOL *isSuccessful);
        
<fnptr name="save" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMDocument * This,
             VARIANT destination);
        
<fnptr name="get_validateOnParse" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMDocument * This,
             VARIANT_BOOL *isValidating);
        
<fnptr name="put_validateOnParse" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMDocument * This,
             VARIANT_BOOL isValidating);
        
<fnptr name="get_resolveExternals" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMDocument * This,
             VARIANT_BOOL *isResolving);
        
<fnptr name="put_resolveExternals" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMDocument * This,
             VARIANT_BOOL isResolving);
        
<fnptr name="get_preserveWhiteSpace" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMDocument * This,
             VARIANT_BOOL *isPreserving);
        
<fnptr name="put_preserveWhiteSpace" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMDocument * This,
             VARIANT_BOOL isPreserving);
        
<fnptr name="put_onreadystatechange" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMDocument * This,
             VARIANT readystatechangeSink);
        
<fnptr name="put_ondataavailable" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMDocument * This,
             VARIANT ondataavailableSink);
        
<fnptr name="put_ontransformnode" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMDocument * This,
             VARIANT ontransformnodeSink);
        
        
    } IXMLDOMDocumentVtbl;

<struct name="IXMLDOMDocument">
<vptr>IXMLDOMDocumentVtbl *</vptr>
</struct>

    

 
extern const IID IID_IXMLDOMNodeList;
<struct name="IXMLDOMNodeListVtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMNodeList * This,
             const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            IXMLDOMNodeList * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            IXMLDOMNodeList * This);
        
<fnptr name="GetTypeInfoCount" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMNodeList * This,
             UINT *pctinfo);
        
<fnptr name="GetTypeInfo" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMNodeList * This,
             UINT iTInfo,
             LCID lcid,
             ITypeInfo **ppTInfo);
        
<fnptr name="GetIDsOfNames" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMNodeList * This,
             const IID * const riid,
             LPOLESTR *rgszNames,
             UINT cNames,
             LCID lcid,
             DISPID *rgDispId);
        
<fnptr name="Invoke" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMNodeList * This,
             DISPID dispIdMember,
             const IID * const riid,
             LCID lcid,
             WORD wFlags,
             DISPPARAMS *pDispParams,
             VARIANT *pVarResult,
             EXCEPINFO *pExcepInfo,
             UINT *puArgErr);
        
<fnptr name="get_item" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMNodeList * This,
             long index,
             IXMLDOMNode **listItem);
        
<fnptr name="get_length" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMNodeList * This,
             long *listLength);
        
<fnptr name="nextNode" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMNodeList * This,
             IXMLDOMNode **nextItem);
        
<fnptr name="reset" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMNodeList * This);
        
<fnptr name="get__newEnum" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMNodeList * This,
             IUnknown **ppUnk);
        
        
    } IXMLDOMNodeListVtbl;

<struct name="IXMLDOMNodeList">
<vptr>IXMLDOMNodeListVtbl *</vptr>
</struct>

    

 
extern const IID IID_IXMLDOMNamedNodeMap;
<struct name="IXMLDOMNamedNodeMapVtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMNamedNodeMap * This,
             const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            IXMLDOMNamedNodeMap * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            IXMLDOMNamedNodeMap * This);
        
<fnptr name="GetTypeInfoCount" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMNamedNodeMap * This,
             UINT *pctinfo);
        
<fnptr name="GetTypeInfo" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMNamedNodeMap * This,
             UINT iTInfo,
             LCID lcid,
             ITypeInfo **ppTInfo);
        
<fnptr name="GetIDsOfNames" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMNamedNodeMap * This,
             const IID * const riid,
             LPOLESTR *rgszNames,
             UINT cNames,
             LCID lcid,
             DISPID *rgDispId);
        
<fnptr name="Invoke" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMNamedNodeMap * This,
             DISPID dispIdMember,
             const IID * const riid,
             LCID lcid,
             WORD wFlags,
             DISPPARAMS *pDispParams,
             VARIANT *pVarResult,
             EXCEPINFO *pExcepInfo,
             UINT *puArgErr);
        
<fnptr name="getNamedItem" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMNamedNodeMap * This,
             BSTR name,
             IXMLDOMNode **namedItem);
        
<fnptr name="setNamedItem" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMNamedNodeMap * This,
             IXMLDOMNode *newItem,
             IXMLDOMNode **nameItem);
        
<fnptr name="removeNamedItem" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMNamedNodeMap * This,
             BSTR name,
             IXMLDOMNode **namedItem);
        
<fnptr name="get_item" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMNamedNodeMap * This,
             long index,
             IXMLDOMNode **listItem);
        
<fnptr name="get_length" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMNamedNodeMap * This,
             long *listLength);
        
<fnptr name="getQualifiedItem" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMNamedNodeMap * This,
             BSTR baseName,
             BSTR namespaceURI,
             IXMLDOMNode **qualifiedItem);
        
<fnptr name="removeQualifiedItem" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMNamedNodeMap * This,
             BSTR baseName,
             BSTR namespaceURI,
             IXMLDOMNode **qualifiedItem);
        
<fnptr name="nextNode" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMNamedNodeMap * This,
             IXMLDOMNode **nextItem);
        
<fnptr name="reset" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMNamedNodeMap * This);
        
<fnptr name="get__newEnum" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMNamedNodeMap * This,
             IUnknown **ppUnk);
        
        
    } IXMLDOMNamedNodeMapVtbl;

<struct name="IXMLDOMNamedNodeMap">
<vptr>IXMLDOMNamedNodeMapVtbl *</vptr>
</struct>

    

 
extern const IID IID_IXMLDOMCharacterData;
<struct name="IXMLDOMCharacterDataVtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMCharacterData * This,
             const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            IXMLDOMCharacterData * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            IXMLDOMCharacterData * This);
        
<fnptr name="GetTypeInfoCount" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMCharacterData * This,
             UINT *pctinfo);
        
<fnptr name="GetTypeInfo" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMCharacterData * This,
             UINT iTInfo,
             LCID lcid,
             ITypeInfo **ppTInfo);
        
<fnptr name="GetIDsOfNames" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMCharacterData * This,
             const IID * const riid,
             LPOLESTR *rgszNames,
             UINT cNames,
             LCID lcid,
             DISPID *rgDispId);
        
<fnptr name="Invoke" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMCharacterData * This,
             DISPID dispIdMember,
             const IID * const riid,
             LCID lcid,
             WORD wFlags,
             DISPPARAMS *pDispParams,
             VARIANT *pVarResult,
             EXCEPINFO *pExcepInfo,
             UINT *puArgErr);
        
<fnptr name="get_nodeName" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMCharacterData * This,
             BSTR *name);
        
<fnptr name="get_nodeValue" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMCharacterData * This,
             VARIANT *value);
        
<fnptr name="put_nodeValue" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMCharacterData * This,
             VARIANT value);
        
<fnptr name="get_nodeType" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMCharacterData * This,
             DOMNodeType *type);
        
<fnptr name="get_parentNode" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMCharacterData * This,
             IXMLDOMNode **parent);
        
<fnptr name="get_childNodes" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMCharacterData * This,
             IXMLDOMNodeList **childList);
        
<fnptr name="get_firstChild" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMCharacterData * This,
             IXMLDOMNode **firstChild);
        
<fnptr name="get_lastChild" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMCharacterData * This,
             IXMLDOMNode **lastChild);
        
<fnptr name="get_previousSibling" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMCharacterData * This,
             IXMLDOMNode **previousSibling);
        
<fnptr name="get_nextSibling" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMCharacterData * This,
             IXMLDOMNode **nextSibling);
        
<fnptr name="get_attributes" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMCharacterData * This,
             IXMLDOMNamedNodeMap **attributeMap);
        
<fnptr name="insertBefore" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMCharacterData * This,
             IXMLDOMNode *newChild,
             VARIANT refChild,
             IXMLDOMNode **outNewChild);
        
<fnptr name="replaceChild" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMCharacterData * This,
             IXMLDOMNode *newChild,
             IXMLDOMNode *oldChild,
             IXMLDOMNode **outOldChild);
        
<fnptr name="removeChild" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMCharacterData * This,
             IXMLDOMNode *childNode,
             IXMLDOMNode **oldChild);
        
<fnptr name="appendChild" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMCharacterData * This,
             IXMLDOMNode *newChild,
             IXMLDOMNode **outNewChild);
        
<fnptr name="hasChildNodes" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMCharacterData * This,
             VARIANT_BOOL *hasChild);
        
<fnptr name="get_ownerDocument" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMCharacterData * This,
             IXMLDOMDocument **DOMDocument);
        
<fnptr name="cloneNode" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMCharacterData * This,
             VARIANT_BOOL deep,
             IXMLDOMNode **cloneRoot);
        
<fnptr name="get_nodeTypeString" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMCharacterData * This,
             BSTR *nodeType);
        
<fnptr name="get_text" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMCharacterData * This,
             BSTR *text);
        
<fnptr name="put_text" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMCharacterData * This,
             BSTR text);
        
<fnptr name="get_specified" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMCharacterData * This,
             VARIANT_BOOL *isSpecified);
        
<fnptr name="get_definition" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMCharacterData * This,
             IXMLDOMNode **definitionNode);
        
<fnptr name="get_nodeTypedValue" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMCharacterData * This,
             VARIANT *typedValue);
        
<fnptr name="put_nodeTypedValue" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMCharacterData * This,
             VARIANT typedValue);
        
<fnptr name="get_dataType" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMCharacterData * This,
             VARIANT *dataTypeName);
        
<fnptr name="put_dataType" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMCharacterData * This,
             BSTR dataTypeName);
        
<fnptr name="get_xml" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMCharacterData * This,
             BSTR *xmlString);
        
<fnptr name="transformNode" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMCharacterData * This,
             IXMLDOMNode *stylesheet,
             BSTR *xmlString);
        
<fnptr name="selectNodes" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMCharacterData * This,
             BSTR queryString,
             IXMLDOMNodeList **resultList);
        
<fnptr name="selectSingleNode" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMCharacterData * This,
             BSTR queryString,
             IXMLDOMNode **resultNode);
        
<fnptr name="get_parsed" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMCharacterData * This,
             VARIANT_BOOL *isParsed);
        
<fnptr name="get_namespaceURI" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMCharacterData * This,
             BSTR *namespaceURI);
        
<fnptr name="get_prefix" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMCharacterData * This,
             BSTR *prefixString);
        
<fnptr name="get_baseName" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMCharacterData * This,
             BSTR *nameString);
        
<fnptr name="transformNodeToObject" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMCharacterData * This,
             IXMLDOMNode *stylesheet,
             VARIANT outputObject);
        
<fnptr name="get_data" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMCharacterData * This,
             BSTR *data);
        
<fnptr name="put_data" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMCharacterData * This,
             BSTR data);
        
<fnptr name="get_length" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMCharacterData * This,
             long *dataLength);
        
<fnptr name="substringData" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMCharacterData * This,
             long offset,
             long count,
             BSTR *data);
        
<fnptr name="appendData" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMCharacterData * This,
             BSTR data);
        
<fnptr name="insertData" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMCharacterData * This,
             long offset,
             BSTR data);
        
<fnptr name="deleteData" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMCharacterData * This,
             long offset,
             long count);
        
<fnptr name="replaceData" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMCharacterData * This,
             long offset,
             long count,
             BSTR data);
        
        
    } IXMLDOMCharacterDataVtbl;

<struct name="IXMLDOMCharacterData">
<vptr>IXMLDOMCharacterDataVtbl *</vptr>
</struct>

    
 
extern const IID IID_IXMLDOMAttribute;
<struct name="IXMLDOMAttributeVtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMAttribute * This,
             const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            IXMLDOMAttribute * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            IXMLDOMAttribute * This);
        
<fnptr name="GetTypeInfoCount" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMAttribute * This,
             UINT *pctinfo);
        
<fnptr name="GetTypeInfo" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMAttribute * This,
             UINT iTInfo,
             LCID lcid,
             ITypeInfo **ppTInfo);
        
<fnptr name="GetIDsOfNames" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMAttribute * This,
             const IID * const riid,
             LPOLESTR *rgszNames,
             UINT cNames,
             LCID lcid,
             DISPID *rgDispId);
        
<fnptr name="Invoke" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMAttribute * This,
             DISPID dispIdMember,
             const IID * const riid,
             LCID lcid,
             WORD wFlags,
             DISPPARAMS *pDispParams,
             VARIANT *pVarResult,
             EXCEPINFO *pExcepInfo,
             UINT *puArgErr);
        
<fnptr name="get_nodeName" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMAttribute * This,
             BSTR *name);
        
<fnptr name="get_nodeValue" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMAttribute * This,
             VARIANT *value);
        
<fnptr name="put_nodeValue" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMAttribute * This,
             VARIANT value);
        
<fnptr name="get_nodeType" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMAttribute * This,
             DOMNodeType *type);
        
<fnptr name="get_parentNode" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMAttribute * This,
             IXMLDOMNode **parent);
        
<fnptr name="get_childNodes" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMAttribute * This,
             IXMLDOMNodeList **childList);
        
<fnptr name="get_firstChild" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMAttribute * This,
             IXMLDOMNode **firstChild);
        
<fnptr name="get_lastChild" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMAttribute * This,
             IXMLDOMNode **lastChild);
        
<fnptr name="get_previousSibling" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMAttribute * This,
             IXMLDOMNode **previousSibling);
        
<fnptr name="get_nextSibling" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMAttribute * This,
             IXMLDOMNode **nextSibling);
        
<fnptr name="get_attributes" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMAttribute * This,
             IXMLDOMNamedNodeMap **attributeMap);
        
<fnptr name="insertBefore" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMAttribute * This,
             IXMLDOMNode *newChild,
             VARIANT refChild,
             IXMLDOMNode **outNewChild);
        
<fnptr name="replaceChild" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMAttribute * This,
             IXMLDOMNode *newChild,
             IXMLDOMNode *oldChild,
             IXMLDOMNode **outOldChild);
        
<fnptr name="removeChild" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMAttribute * This,
             IXMLDOMNode *childNode,
             IXMLDOMNode **oldChild);
        
<fnptr name="appendChild" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMAttribute * This,
             IXMLDOMNode *newChild,
             IXMLDOMNode **outNewChild);
        
<fnptr name="hasChildNodes" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMAttribute * This,
             VARIANT_BOOL *hasChild);
        
<fnptr name="get_ownerDocument" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMAttribute * This,
             IXMLDOMDocument **DOMDocument);
        
<fnptr name="cloneNode" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMAttribute * This,
             VARIANT_BOOL deep,
             IXMLDOMNode **cloneRoot);
        
<fnptr name="get_nodeTypeString" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMAttribute * This,
             BSTR *nodeType);
        
<fnptr name="get_text" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMAttribute * This,
             BSTR *text);
        
<fnptr name="put_text" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMAttribute * This,
             BSTR text);
        
<fnptr name="get_specified" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMAttribute * This,
             VARIANT_BOOL *isSpecified);
        
<fnptr name="get_definition" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMAttribute * This,
             IXMLDOMNode **definitionNode);
        
<fnptr name="get_nodeTypedValue" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMAttribute * This,
             VARIANT *typedValue);
        
<fnptr name="put_nodeTypedValue" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMAttribute * This,
             VARIANT typedValue);
        
<fnptr name="get_dataType" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMAttribute * This,
             VARIANT *dataTypeName);
        
<fnptr name="put_dataType" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMAttribute * This,
             BSTR dataTypeName);
        
<fnptr name="get_xml" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMAttribute * This,
             BSTR *xmlString);
        
<fnptr name="transformNode" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMAttribute * This,
             IXMLDOMNode *stylesheet,
             BSTR *xmlString);
        
<fnptr name="selectNodes" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMAttribute * This,
             BSTR queryString,
             IXMLDOMNodeList **resultList);
        
<fnptr name="selectSingleNode" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMAttribute * This,
             BSTR queryString,
             IXMLDOMNode **resultNode);
        
<fnptr name="get_parsed" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMAttribute * This,
             VARIANT_BOOL *isParsed);
        
<fnptr name="get_namespaceURI" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMAttribute * This,
             BSTR *namespaceURI);
        
<fnptr name="get_prefix" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMAttribute * This,
             BSTR *prefixString);
        
<fnptr name="get_baseName" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMAttribute * This,
             BSTR *nameString);
        
<fnptr name="transformNodeToObject" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMAttribute * This,
             IXMLDOMNode *stylesheet,
             VARIANT outputObject);
        
<fnptr name="get_name" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMAttribute * This,
             BSTR *attributeName);
        
<fnptr name="get_value" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMAttribute * This,
             VARIANT *attributeValue);
        
<fnptr name="put_value" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMAttribute * This,
             VARIANT attributeValue);
        
        
    } IXMLDOMAttributeVtbl;

<struct name="IXMLDOMAttribute">
<vptr>IXMLDOMAttributeVtbl *</vptr>
</struct>

    
 
extern const IID IID_IXMLDOMElement;
<struct name="IXMLDOMElementVtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMElement * This,
             const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            IXMLDOMElement * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            IXMLDOMElement * This);
        
<fnptr name="GetTypeInfoCount" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMElement * This,
             UINT *pctinfo);
        
<fnptr name="GetTypeInfo" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMElement * This,
             UINT iTInfo,
             LCID lcid,
             ITypeInfo **ppTInfo);
        
<fnptr name="GetIDsOfNames" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMElement * This,
             const IID * const riid,
             LPOLESTR *rgszNames,
             UINT cNames,
             LCID lcid,
             DISPID *rgDispId);
        
<fnptr name="Invoke" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMElement * This,
             DISPID dispIdMember,
             const IID * const riid,
             LCID lcid,
             WORD wFlags,
             DISPPARAMS *pDispParams,
             VARIANT *pVarResult,
             EXCEPINFO *pExcepInfo,
             UINT *puArgErr);
        
<fnptr name="get_nodeName" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMElement * This,
             BSTR *name);
        
<fnptr name="get_nodeValue" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMElement * This,
             VARIANT *value);
        
<fnptr name="put_nodeValue" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMElement * This,
             VARIANT value);
        
<fnptr name="get_nodeType" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMElement * This,
             DOMNodeType *type);
        
<fnptr name="get_parentNode" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMElement * This,
             IXMLDOMNode **parent);
        
<fnptr name="get_childNodes" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMElement * This,
             IXMLDOMNodeList **childList);
        
<fnptr name="get_firstChild" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMElement * This,
             IXMLDOMNode **firstChild);
        
<fnptr name="get_lastChild" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMElement * This,
             IXMLDOMNode **lastChild);
        
<fnptr name="get_previousSibling" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMElement * This,
             IXMLDOMNode **previousSibling);
        
<fnptr name="get_nextSibling" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMElement * This,
             IXMLDOMNode **nextSibling);
        
<fnptr name="get_attributes" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMElement * This,
             IXMLDOMNamedNodeMap **attributeMap);
        
<fnptr name="insertBefore" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMElement * This,
             IXMLDOMNode *newChild,
             VARIANT refChild,
             IXMLDOMNode **outNewChild);
        
<fnptr name="replaceChild" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMElement * This,
             IXMLDOMNode *newChild,
             IXMLDOMNode *oldChild,
             IXMLDOMNode **outOldChild);
        
<fnptr name="removeChild" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMElement * This,
             IXMLDOMNode *childNode,
             IXMLDOMNode **oldChild);
        
<fnptr name="appendChild" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMElement * This,
             IXMLDOMNode *newChild,
             IXMLDOMNode **outNewChild);
        
<fnptr name="hasChildNodes" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMElement * This,
             VARIANT_BOOL *hasChild);
        
<fnptr name="get_ownerDocument" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMElement * This,
             IXMLDOMDocument **DOMDocument);
        
<fnptr name="cloneNode" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMElement * This,
             VARIANT_BOOL deep,
             IXMLDOMNode **cloneRoot);
        
<fnptr name="get_nodeTypeString" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMElement * This,
             BSTR *nodeType);
        
<fnptr name="get_text" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMElement * This,
             BSTR *text);
        
<fnptr name="put_text" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMElement * This,
             BSTR text);
        
<fnptr name="get_specified" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMElement * This,
             VARIANT_BOOL *isSpecified);
        
<fnptr name="get_definition" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMElement * This,
             IXMLDOMNode **definitionNode);
        
<fnptr name="get_nodeTypedValue" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMElement * This,
             VARIANT *typedValue);
        
<fnptr name="put_nodeTypedValue" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMElement * This,
             VARIANT typedValue);
        
<fnptr name="get_dataType" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMElement * This,
             VARIANT *dataTypeName);
        
<fnptr name="put_dataType" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMElement * This,
             BSTR dataTypeName);
        
<fnptr name="get_xml" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMElement * This,
             BSTR *xmlString);
        
<fnptr name="transformNode" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMElement * This,
             IXMLDOMNode *stylesheet,
             BSTR *xmlString);
        
<fnptr name="selectNodes" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMElement * This,
             BSTR queryString,
             IXMLDOMNodeList **resultList);
        
<fnptr name="selectSingleNode" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMElement * This,
             BSTR queryString,
             IXMLDOMNode **resultNode);
        
<fnptr name="get_parsed" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMElement * This,
             VARIANT_BOOL *isParsed);
        
<fnptr name="get_namespaceURI" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMElement * This,
             BSTR *namespaceURI);
        
<fnptr name="get_prefix" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMElement * This,
             BSTR *prefixString);
        
<fnptr name="get_baseName" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMElement * This,
             BSTR *nameString);
        
<fnptr name="transformNodeToObject" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMElement * This,
             IXMLDOMNode *stylesheet,
             VARIANT outputObject);
        
<fnptr name="get_tagName" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMElement * This,
             BSTR *tagName);
        
<fnptr name="getAttribute" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMElement * This,
             BSTR name,
             VARIANT *value);
        
<fnptr name="setAttribute" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMElement * This,
             BSTR name,
             VARIANT value);
        
<fnptr name="removeAttribute" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMElement * This,
             BSTR name);
        
<fnptr name="getAttributeNode" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMElement * This,
             BSTR name,
             IXMLDOMAttribute **attributeNode);
        
<fnptr name="setAttributeNode" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMElement * This,
             IXMLDOMAttribute *DOMAttribute,
             IXMLDOMAttribute **attributeNode);
        
<fnptr name="removeAttributeNode" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMElement * This,
             IXMLDOMAttribute *DOMAttribute,
             IXMLDOMAttribute **attributeNode);
        
<fnptr name="getElementsByTagName" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMElement * This,
             BSTR tagName,
             IXMLDOMNodeList **resultList);
        
<fnptr name="normalize" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMElement * This);
        
        
    } IXMLDOMElementVtbl;

<struct name="IXMLDOMElement">
<vptr>IXMLDOMElementVtbl *</vptr>
</struct>

    

 
extern const IID IID_IXMLDOMText;
<struct name="IXMLDOMTextVtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMText * This,
             const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            IXMLDOMText * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            IXMLDOMText * This);
        
<fnptr name="GetTypeInfoCount" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMText * This,
             UINT *pctinfo);
        
<fnptr name="GetTypeInfo" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMText * This,
             UINT iTInfo,
             LCID lcid,
             ITypeInfo **ppTInfo);
        
<fnptr name="GetIDsOfNames" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMText * This,
             const IID * const riid,
             LPOLESTR *rgszNames,
             UINT cNames,
             LCID lcid,
             DISPID *rgDispId);
        
<fnptr name="Invoke" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMText * This,
             DISPID dispIdMember,
             const IID * const riid,
             LCID lcid,
             WORD wFlags,
             DISPPARAMS *pDispParams,
             VARIANT *pVarResult,
             EXCEPINFO *pExcepInfo,
             UINT *puArgErr);
        
<fnptr name="get_nodeName" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMText * This,
             BSTR *name);
        
<fnptr name="get_nodeValue" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMText * This,
             VARIANT *value);
        
<fnptr name="put_nodeValue" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMText * This,
             VARIANT value);
        
<fnptr name="get_nodeType" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMText * This,
             DOMNodeType *type);
        
<fnptr name="get_parentNode" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMText * This,
             IXMLDOMNode **parent);
        
<fnptr name="get_childNodes" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMText * This,
             IXMLDOMNodeList **childList);
        
<fnptr name="get_firstChild" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMText * This,
             IXMLDOMNode **firstChild);
        
<fnptr name="get_lastChild" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMText * This,
             IXMLDOMNode **lastChild);
        
<fnptr name="get_previousSibling" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMText * This,
             IXMLDOMNode **previousSibling);
        
<fnptr name="get_nextSibling" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMText * This,
             IXMLDOMNode **nextSibling);
        
<fnptr name="get_attributes" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMText * This,
             IXMLDOMNamedNodeMap **attributeMap);
        
<fnptr name="insertBefore" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMText * This,
             IXMLDOMNode *newChild,
             VARIANT refChild,
             IXMLDOMNode **outNewChild);
        
<fnptr name="replaceChild" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMText * This,
             IXMLDOMNode *newChild,
             IXMLDOMNode *oldChild,
             IXMLDOMNode **outOldChild);
        
<fnptr name="removeChild" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMText * This,
             IXMLDOMNode *childNode,
             IXMLDOMNode **oldChild);
        
<fnptr name="appendChild" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMText * This,
             IXMLDOMNode *newChild,
             IXMLDOMNode **outNewChild);
        
<fnptr name="hasChildNodes" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMText * This,
             VARIANT_BOOL *hasChild);
        
<fnptr name="get_ownerDocument" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMText * This,
             IXMLDOMDocument **DOMDocument);
        
<fnptr name="cloneNode" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMText * This,
             VARIANT_BOOL deep,
             IXMLDOMNode **cloneRoot);
        
<fnptr name="get_nodeTypeString" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMText * This,
             BSTR *nodeType);
        
<fnptr name="get_text" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMText * This,
             BSTR *text);
        
<fnptr name="put_text" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMText * This,
             BSTR text);
        
<fnptr name="get_specified" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMText * This,
             VARIANT_BOOL *isSpecified);
        
<fnptr name="get_definition" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMText * This,
             IXMLDOMNode **definitionNode);
        
<fnptr name="get_nodeTypedValue" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMText * This,
             VARIANT *typedValue);
        
<fnptr name="put_nodeTypedValue" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMText * This,
             VARIANT typedValue);
        
<fnptr name="get_dataType" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMText * This,
             VARIANT *dataTypeName);
        
<fnptr name="put_dataType" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMText * This,
             BSTR dataTypeName);
        
<fnptr name="get_xml" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMText * This,
             BSTR *xmlString);
        
<fnptr name="transformNode" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMText * This,
             IXMLDOMNode *stylesheet,
             BSTR *xmlString);
        
<fnptr name="selectNodes" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMText * This,
             BSTR queryString,
             IXMLDOMNodeList **resultList);
        
<fnptr name="selectSingleNode" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMText * This,
             BSTR queryString,
             IXMLDOMNode **resultNode);
        
<fnptr name="get_parsed" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMText * This,
             VARIANT_BOOL *isParsed);
        
<fnptr name="get_namespaceURI" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMText * This,
             BSTR *namespaceURI);
        
<fnptr name="get_prefix" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMText * This,
             BSTR *prefixString);
        
<fnptr name="get_baseName" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMText * This,
             BSTR *nameString);
        
<fnptr name="transformNodeToObject" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMText * This,
             IXMLDOMNode *stylesheet,
             VARIANT outputObject);
        
<fnptr name="get_data" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMText * This,
             BSTR *data);
        
<fnptr name="put_data" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMText * This,
             BSTR data);
        
<fnptr name="get_length" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMText * This,
             long *dataLength);
        
<fnptr name="substringData" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMText * This,
             long offset,
             long count,
             BSTR *data);
        
<fnptr name="appendData" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMText * This,
             BSTR data);
        
<fnptr name="insertData" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMText * This,
             long offset,
             BSTR data);
        
<fnptr name="deleteData" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMText * This,
             long offset,
             long count);
        
<fnptr name="replaceData" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMText * This,
             long offset,
             long count,
             BSTR data);
        
<fnptr name="splitText" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMText * This,
             long offset,
             IXMLDOMText **rightHandTextNode);
        
        
    } IXMLDOMTextVtbl;

<struct name="IXMLDOMText">
<vptr>IXMLDOMTextVtbl *</vptr>
</struct>

    
 
extern const IID IID_IXMLDOMComment;
<struct name="IXMLDOMCommentVtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMComment * This,
             const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            IXMLDOMComment * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            IXMLDOMComment * This);
        
<fnptr name="GetTypeInfoCount" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMComment * This,
             UINT *pctinfo);
        
<fnptr name="GetTypeInfo" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMComment * This,
             UINT iTInfo,
             LCID lcid,
             ITypeInfo **ppTInfo);
        
<fnptr name="GetIDsOfNames" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMComment * This,
             const IID * const riid,
             LPOLESTR *rgszNames,
             UINT cNames,
             LCID lcid,
             DISPID *rgDispId);
        
<fnptr name="Invoke" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMComment * This,
             DISPID dispIdMember,
             const IID * const riid,
             LCID lcid,
             WORD wFlags,
             DISPPARAMS *pDispParams,
             VARIANT *pVarResult,
             EXCEPINFO *pExcepInfo,
             UINT *puArgErr);
        
<fnptr name="get_nodeName" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMComment * This,
             BSTR *name);
        
<fnptr name="get_nodeValue" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMComment * This,
             VARIANT *value);
        
<fnptr name="put_nodeValue" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMComment * This,
             VARIANT value);
        
<fnptr name="get_nodeType" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMComment * This,
             DOMNodeType *type);
        
<fnptr name="get_parentNode" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMComment * This,
             IXMLDOMNode **parent);
        
<fnptr name="get_childNodes" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMComment * This,
             IXMLDOMNodeList **childList);
        
<fnptr name="get_firstChild" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMComment * This,
             IXMLDOMNode **firstChild);
        
<fnptr name="get_lastChild" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMComment * This,
             IXMLDOMNode **lastChild);
        
<fnptr name="get_previousSibling" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMComment * This,
             IXMLDOMNode **previousSibling);
        
<fnptr name="get_nextSibling" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMComment * This,
             IXMLDOMNode **nextSibling);
        
<fnptr name="get_attributes" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMComment * This,
             IXMLDOMNamedNodeMap **attributeMap);
        
<fnptr name="insertBefore" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMComment * This,
             IXMLDOMNode *newChild,
             VARIANT refChild,
             IXMLDOMNode **outNewChild);
        
<fnptr name="replaceChild" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMComment * This,
             IXMLDOMNode *newChild,
             IXMLDOMNode *oldChild,
             IXMLDOMNode **outOldChild);
        
<fnptr name="removeChild" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMComment * This,
             IXMLDOMNode *childNode,
             IXMLDOMNode **oldChild);
        
<fnptr name="appendChild" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMComment * This,
             IXMLDOMNode *newChild,
             IXMLDOMNode **outNewChild);
        
<fnptr name="hasChildNodes" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMComment * This,
             VARIANT_BOOL *hasChild);
        
<fnptr name="get_ownerDocument" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMComment * This,
             IXMLDOMDocument **DOMDocument);
        
<fnptr name="cloneNode" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMComment * This,
             VARIANT_BOOL deep,
             IXMLDOMNode **cloneRoot);
        
<fnptr name="get_nodeTypeString" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMComment * This,
             BSTR *nodeType);
        
<fnptr name="get_text" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMComment * This,
             BSTR *text);
        
<fnptr name="put_text" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMComment * This,
             BSTR text);
        
<fnptr name="get_specified" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMComment * This,
             VARIANT_BOOL *isSpecified);
        
<fnptr name="get_definition" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMComment * This,
             IXMLDOMNode **definitionNode);
        
<fnptr name="get_nodeTypedValue" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMComment * This,
             VARIANT *typedValue);
        
<fnptr name="put_nodeTypedValue" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMComment * This,
             VARIANT typedValue);
        
<fnptr name="get_dataType" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMComment * This,
             VARIANT *dataTypeName);
        
<fnptr name="put_dataType" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMComment * This,
             BSTR dataTypeName);
        
<fnptr name="get_xml" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMComment * This,
             BSTR *xmlString);
        
<fnptr name="transformNode" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMComment * This,
             IXMLDOMNode *stylesheet,
             BSTR *xmlString);
        
<fnptr name="selectNodes" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMComment * This,
             BSTR queryString,
             IXMLDOMNodeList **resultList);
        
<fnptr name="selectSingleNode" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMComment * This,
             BSTR queryString,
             IXMLDOMNode **resultNode);
        
<fnptr name="get_parsed" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMComment * This,
             VARIANT_BOOL *isParsed);
        
<fnptr name="get_namespaceURI" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMComment * This,
             BSTR *namespaceURI);
        
<fnptr name="get_prefix" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMComment * This,
             BSTR *prefixString);
        
<fnptr name="get_baseName" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMComment * This,
             BSTR *nameString);
        
<fnptr name="transformNodeToObject" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMComment * This,
             IXMLDOMNode *stylesheet,
             VARIANT outputObject);
        
<fnptr name="get_data" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMComment * This,
             BSTR *data);
        
<fnptr name="put_data" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMComment * This,
             BSTR data);
        
<fnptr name="get_length" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMComment * This,
             long *dataLength);
        
<fnptr name="substringData" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMComment * This,
             long offset,
             long count,
             BSTR *data);
        
<fnptr name="appendData" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMComment * This,
             BSTR data);
        
<fnptr name="insertData" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMComment * This,
             long offset,
             BSTR data);
        
<fnptr name="deleteData" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMComment * This,
             long offset,
             long count);
        
<fnptr name="replaceData" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMComment * This,
             long offset,
             long count,
             BSTR data);
        
        
    } IXMLDOMCommentVtbl;

<struct name="IXMLDOMComment">
<vptr>IXMLDOMCommentVtbl *</vptr>
</struct>

    

 
extern const IID IID_IXMLDOMProcessingInstruction;
<struct name="IXMLDOMProcessingInstructionVtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMProcessingInstruction * This,
             const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            IXMLDOMProcessingInstruction * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            IXMLDOMProcessingInstruction * This);
        
<fnptr name="GetTypeInfoCount" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMProcessingInstruction * This,
             UINT *pctinfo);
        
<fnptr name="GetTypeInfo" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMProcessingInstruction * This,
             UINT iTInfo,
             LCID lcid,
             ITypeInfo **ppTInfo);
        
<fnptr name="GetIDsOfNames" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMProcessingInstruction * This,
             const IID * const riid,
             LPOLESTR *rgszNames,
             UINT cNames,
             LCID lcid,
             DISPID *rgDispId);
        
<fnptr name="Invoke" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMProcessingInstruction * This,
             DISPID dispIdMember,
             const IID * const riid,
             LCID lcid,
             WORD wFlags,
             DISPPARAMS *pDispParams,
             VARIANT *pVarResult,
             EXCEPINFO *pExcepInfo,
             UINT *puArgErr);
        
<fnptr name="get_nodeName" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMProcessingInstruction * This,
             BSTR *name);
        
<fnptr name="get_nodeValue" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMProcessingInstruction * This,
             VARIANT *value);
        
<fnptr name="put_nodeValue" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMProcessingInstruction * This,
             VARIANT value);
        
<fnptr name="get_nodeType" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMProcessingInstruction * This,
             DOMNodeType *type);
        
<fnptr name="get_parentNode" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMProcessingInstruction * This,
             IXMLDOMNode **parent);
        
<fnptr name="get_childNodes" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMProcessingInstruction * This,
             IXMLDOMNodeList **childList);
        
<fnptr name="get_firstChild" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMProcessingInstruction * This,
             IXMLDOMNode **firstChild);
        
<fnptr name="get_lastChild" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMProcessingInstruction * This,
             IXMLDOMNode **lastChild);
        
<fnptr name="get_previousSibling" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMProcessingInstruction * This,
             IXMLDOMNode **previousSibling);
        
<fnptr name="get_nextSibling" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMProcessingInstruction * This,
             IXMLDOMNode **nextSibling);
        
<fnptr name="get_attributes" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMProcessingInstruction * This,
             IXMLDOMNamedNodeMap **attributeMap);
        
<fnptr name="insertBefore" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMProcessingInstruction * This,
             IXMLDOMNode *newChild,
             VARIANT refChild,
             IXMLDOMNode **outNewChild);
        
<fnptr name="replaceChild" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMProcessingInstruction * This,
             IXMLDOMNode *newChild,
             IXMLDOMNode *oldChild,
             IXMLDOMNode **outOldChild);
        
<fnptr name="removeChild" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMProcessingInstruction * This,
             IXMLDOMNode *childNode,
             IXMLDOMNode **oldChild);
        
<fnptr name="appendChild" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMProcessingInstruction * This,
             IXMLDOMNode *newChild,
             IXMLDOMNode **outNewChild);
        
<fnptr name="hasChildNodes" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMProcessingInstruction * This,
             VARIANT_BOOL *hasChild);
        
<fnptr name="get_ownerDocument" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMProcessingInstruction * This,
             IXMLDOMDocument **DOMDocument);
        
<fnptr name="cloneNode" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMProcessingInstruction * This,
             VARIANT_BOOL deep,
             IXMLDOMNode **cloneRoot);
        
<fnptr name="get_nodeTypeString" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMProcessingInstruction * This,
             BSTR *nodeType);
        
<fnptr name="get_text" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMProcessingInstruction * This,
             BSTR *text);
        
<fnptr name="put_text" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMProcessingInstruction * This,
             BSTR text);
        
<fnptr name="get_specified" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMProcessingInstruction * This,
             VARIANT_BOOL *isSpecified);
        
<fnptr name="get_definition" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMProcessingInstruction * This,
             IXMLDOMNode **definitionNode);
        
<fnptr name="get_nodeTypedValue" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMProcessingInstruction * This,
             VARIANT *typedValue);
        
<fnptr name="put_nodeTypedValue" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMProcessingInstruction * This,
             VARIANT typedValue);
        
<fnptr name="get_dataType" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMProcessingInstruction * This,
             VARIANT *dataTypeName);
        
<fnptr name="put_dataType" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMProcessingInstruction * This,
             BSTR dataTypeName);
        
<fnptr name="get_xml" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMProcessingInstruction * This,
             BSTR *xmlString);
        
<fnptr name="transformNode" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMProcessingInstruction * This,
             IXMLDOMNode *stylesheet,
             BSTR *xmlString);
        
<fnptr name="selectNodes" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMProcessingInstruction * This,
             BSTR queryString,
             IXMLDOMNodeList **resultList);
        
<fnptr name="selectSingleNode" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMProcessingInstruction * This,
             BSTR queryString,
             IXMLDOMNode **resultNode);
        
<fnptr name="get_parsed" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMProcessingInstruction * This,
             VARIANT_BOOL *isParsed);
        
<fnptr name="get_namespaceURI" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMProcessingInstruction * This,
             BSTR *namespaceURI);
        
<fnptr name="get_prefix" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMProcessingInstruction * This,
             BSTR *prefixString);
        
<fnptr name="get_baseName" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMProcessingInstruction * This,
             BSTR *nameString);
        
<fnptr name="transformNodeToObject" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMProcessingInstruction * This,
             IXMLDOMNode *stylesheet,
             VARIANT outputObject);
        
<fnptr name="get_target" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMProcessingInstruction * This,
             BSTR *name);
        
<fnptr name="get_data" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMProcessingInstruction * This,
             BSTR *value);
        
<fnptr name="put_data" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMProcessingInstruction * This,
             BSTR value);
        
        
    } IXMLDOMProcessingInstructionVtbl;

<struct name="IXMLDOMProcessingInstruction">
<vptr>IXMLDOMProcessingInstructionVtbl *</vptr>
</struct>

    
 
extern const IID IID_IXMLDOMCDATASection;
<struct name="IXMLDOMCDATASectionVtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMCDATASection * This,
             const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            IXMLDOMCDATASection * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            IXMLDOMCDATASection * This);
        
<fnptr name="GetTypeInfoCount" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMCDATASection * This,
             UINT *pctinfo);
        
<fnptr name="GetTypeInfo" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMCDATASection * This,
             UINT iTInfo,
             LCID lcid,
             ITypeInfo **ppTInfo);
        
<fnptr name="GetIDsOfNames" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMCDATASection * This,
             const IID * const riid,
             LPOLESTR *rgszNames,
             UINT cNames,
             LCID lcid,
             DISPID *rgDispId);
        
<fnptr name="Invoke" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMCDATASection * This,
             DISPID dispIdMember,
             const IID * const riid,
             LCID lcid,
             WORD wFlags,
             DISPPARAMS *pDispParams,
             VARIANT *pVarResult,
             EXCEPINFO *pExcepInfo,
             UINT *puArgErr);
        
<fnptr name="get_nodeName" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMCDATASection * This,
             BSTR *name);
        
<fnptr name="get_nodeValue" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMCDATASection * This,
             VARIANT *value);
        
<fnptr name="put_nodeValue" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMCDATASection * This,
             VARIANT value);
        
<fnptr name="get_nodeType" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMCDATASection * This,
             DOMNodeType *type);
        
<fnptr name="get_parentNode" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMCDATASection * This,
             IXMLDOMNode **parent);
        
<fnptr name="get_childNodes" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMCDATASection * This,
             IXMLDOMNodeList **childList);
        
<fnptr name="get_firstChild" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMCDATASection * This,
             IXMLDOMNode **firstChild);
        
<fnptr name="get_lastChild" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMCDATASection * This,
             IXMLDOMNode **lastChild);
        
<fnptr name="get_previousSibling" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMCDATASection * This,
             IXMLDOMNode **previousSibling);
        
<fnptr name="get_nextSibling" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMCDATASection * This,
             IXMLDOMNode **nextSibling);
        
<fnptr name="get_attributes" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMCDATASection * This,
             IXMLDOMNamedNodeMap **attributeMap);
        
<fnptr name="insertBefore" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMCDATASection * This,
             IXMLDOMNode *newChild,
             VARIANT refChild,
             IXMLDOMNode **outNewChild);
        
<fnptr name="replaceChild" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMCDATASection * This,
             IXMLDOMNode *newChild,
             IXMLDOMNode *oldChild,
             IXMLDOMNode **outOldChild);
        
<fnptr name="removeChild" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMCDATASection * This,
             IXMLDOMNode *childNode,
             IXMLDOMNode **oldChild);
        
<fnptr name="appendChild" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMCDATASection * This,
             IXMLDOMNode *newChild,
             IXMLDOMNode **outNewChild);
        
<fnptr name="hasChildNodes" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMCDATASection * This,
             VARIANT_BOOL *hasChild);
        
<fnptr name="get_ownerDocument" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMCDATASection * This,
             IXMLDOMDocument **DOMDocument);
        
<fnptr name="cloneNode" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMCDATASection * This,
             VARIANT_BOOL deep,
             IXMLDOMNode **cloneRoot);
        
<fnptr name="get_nodeTypeString" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMCDATASection * This,
             BSTR *nodeType);
        
<fnptr name="get_text" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMCDATASection * This,
             BSTR *text);
        
<fnptr name="put_text" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMCDATASection * This,
             BSTR text);
        
<fnptr name="get_specified" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMCDATASection * This,
             VARIANT_BOOL *isSpecified);
        
<fnptr name="get_definition" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMCDATASection * This,
             IXMLDOMNode **definitionNode);
        
<fnptr name="get_nodeTypedValue" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMCDATASection * This,
             VARIANT *typedValue);
        
<fnptr name="put_nodeTypedValue" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMCDATASection * This,
             VARIANT typedValue);
        
<fnptr name="get_dataType" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMCDATASection * This,
             VARIANT *dataTypeName);
        
<fnptr name="put_dataType" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMCDATASection * This,
             BSTR dataTypeName);
        
<fnptr name="get_xml" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMCDATASection * This,
             BSTR *xmlString);
        
<fnptr name="transformNode" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMCDATASection * This,
             IXMLDOMNode *stylesheet,
             BSTR *xmlString);
        
<fnptr name="selectNodes" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMCDATASection * This,
             BSTR queryString,
             IXMLDOMNodeList **resultList);
        
<fnptr name="selectSingleNode" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMCDATASection * This,
             BSTR queryString,
             IXMLDOMNode **resultNode);
        
<fnptr name="get_parsed" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMCDATASection * This,
             VARIANT_BOOL *isParsed);
        
<fnptr name="get_namespaceURI" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMCDATASection * This,
             BSTR *namespaceURI);
        
<fnptr name="get_prefix" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMCDATASection * This,
             BSTR *prefixString);
        
<fnptr name="get_baseName" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMCDATASection * This,
             BSTR *nameString);
        
<fnptr name="transformNodeToObject" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMCDATASection * This,
             IXMLDOMNode *stylesheet,
             VARIANT outputObject);
        
<fnptr name="get_data" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMCDATASection * This,
             BSTR *data);
        
<fnptr name="put_data" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMCDATASection * This,
             BSTR data);
        
<fnptr name="get_length" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMCDATASection * This,
             long *dataLength);
        
<fnptr name="substringData" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMCDATASection * This,
             long offset,
             long count,
             BSTR *data);
        
<fnptr name="appendData" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMCDATASection * This,
             BSTR data);
        
<fnptr name="insertData" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMCDATASection * This,
             long offset,
             BSTR data);
        
<fnptr name="deleteData" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMCDATASection * This,
             long offset,
             long count);
        
<fnptr name="replaceData" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMCDATASection * This,
             long offset,
             long count,
             BSTR data);
        
<fnptr name="splitText" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMCDATASection * This,
             long offset,
             IXMLDOMText **rightHandTextNode);
        
        
    } IXMLDOMCDATASectionVtbl;

<struct name="IXMLDOMCDATASection">
<vptr>IXMLDOMCDATASectionVtbl *</vptr>
</struct>

    

 
extern const IID IID_IXMLDOMDocumentType;
<struct name="IXMLDOMDocumentTypeVtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMDocumentType * This,
             const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            IXMLDOMDocumentType * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            IXMLDOMDocumentType * This);
        
<fnptr name="GetTypeInfoCount" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMDocumentType * This,
             UINT *pctinfo);
        
<fnptr name="GetTypeInfo" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMDocumentType * This,
             UINT iTInfo,
             LCID lcid,
             ITypeInfo **ppTInfo);
        
<fnptr name="GetIDsOfNames" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMDocumentType * This,
             const IID * const riid,
             LPOLESTR *rgszNames,
             UINT cNames,
             LCID lcid,
             DISPID *rgDispId);
        
<fnptr name="Invoke" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMDocumentType * This,
             DISPID dispIdMember,
             const IID * const riid,
             LCID lcid,
             WORD wFlags,
             DISPPARAMS *pDispParams,
             VARIANT *pVarResult,
             EXCEPINFO *pExcepInfo,
             UINT *puArgErr);
        
<fnptr name="get_nodeName" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMDocumentType * This,
             BSTR *name);
        
<fnptr name="get_nodeValue" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMDocumentType * This,
             VARIANT *value);
        
<fnptr name="put_nodeValue" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMDocumentType * This,
             VARIANT value);
        
<fnptr name="get_nodeType" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMDocumentType * This,
             DOMNodeType *type);
        
<fnptr name="get_parentNode" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMDocumentType * This,
             IXMLDOMNode **parent);
        
<fnptr name="get_childNodes" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMDocumentType * This,
             IXMLDOMNodeList **childList);
        
<fnptr name="get_firstChild" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMDocumentType * This,
             IXMLDOMNode **firstChild);
        
<fnptr name="get_lastChild" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMDocumentType * This,
             IXMLDOMNode **lastChild);
        
<fnptr name="get_previousSibling" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMDocumentType * This,
             IXMLDOMNode **previousSibling);
        
<fnptr name="get_nextSibling" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMDocumentType * This,
             IXMLDOMNode **nextSibling);
        
<fnptr name="get_attributes" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMDocumentType * This,
             IXMLDOMNamedNodeMap **attributeMap);
        
<fnptr name="insertBefore" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMDocumentType * This,
             IXMLDOMNode *newChild,
             VARIANT refChild,
             IXMLDOMNode **outNewChild);
        
<fnptr name="replaceChild" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMDocumentType * This,
             IXMLDOMNode *newChild,
             IXMLDOMNode *oldChild,
             IXMLDOMNode **outOldChild);
        
<fnptr name="removeChild" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMDocumentType * This,
             IXMLDOMNode *childNode,
             IXMLDOMNode **oldChild);
        
<fnptr name="appendChild" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMDocumentType * This,
             IXMLDOMNode *newChild,
             IXMLDOMNode **outNewChild);
        
<fnptr name="hasChildNodes" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMDocumentType * This,
             VARIANT_BOOL *hasChild);
        
<fnptr name="get_ownerDocument" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMDocumentType * This,
             IXMLDOMDocument **DOMDocument);
        
<fnptr name="cloneNode" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMDocumentType * This,
             VARIANT_BOOL deep,
             IXMLDOMNode **cloneRoot);
        
<fnptr name="get_nodeTypeString" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMDocumentType * This,
             BSTR *nodeType);
        
<fnptr name="get_text" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMDocumentType * This,
             BSTR *text);
        
<fnptr name="put_text" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMDocumentType * This,
             BSTR text);
        
<fnptr name="get_specified" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMDocumentType * This,
             VARIANT_BOOL *isSpecified);
        
<fnptr name="get_definition" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMDocumentType * This,
             IXMLDOMNode **definitionNode);
        
<fnptr name="get_nodeTypedValue" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMDocumentType * This,
             VARIANT *typedValue);
        
<fnptr name="put_nodeTypedValue" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMDocumentType * This,
             VARIANT typedValue);
        
<fnptr name="get_dataType" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMDocumentType * This,
             VARIANT *dataTypeName);
        
<fnptr name="put_dataType" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMDocumentType * This,
             BSTR dataTypeName);
        
<fnptr name="get_xml" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMDocumentType * This,
             BSTR *xmlString);
        
<fnptr name="transformNode" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMDocumentType * This,
             IXMLDOMNode *stylesheet,
             BSTR *xmlString);
        
<fnptr name="selectNodes" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMDocumentType * This,
             BSTR queryString,
             IXMLDOMNodeList **resultList);
        
<fnptr name="selectSingleNode" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMDocumentType * This,
             BSTR queryString,
             IXMLDOMNode **resultNode);
        
<fnptr name="get_parsed" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMDocumentType * This,
             VARIANT_BOOL *isParsed);
        
<fnptr name="get_namespaceURI" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMDocumentType * This,
             BSTR *namespaceURI);
        
<fnptr name="get_prefix" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMDocumentType * This,
             BSTR *prefixString);
        
<fnptr name="get_baseName" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMDocumentType * This,
             BSTR *nameString);
        
<fnptr name="transformNodeToObject" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMDocumentType * This,
             IXMLDOMNode *stylesheet,
             VARIANT outputObject);
        
<fnptr name="get_name" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMDocumentType * This,
             BSTR *rootName);
        
<fnptr name="get_entities" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMDocumentType * This,
             IXMLDOMNamedNodeMap **entityMap);
        
<fnptr name="get_notations" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMDocumentType * This,
             IXMLDOMNamedNodeMap **notationMap);
        
        
    } IXMLDOMDocumentTypeVtbl;

<struct name="IXMLDOMDocumentType">
<vptr>IXMLDOMDocumentTypeVtbl *</vptr></struct>

    
 
extern const IID IID_IXMLDOMNotation;
<struct name="IXMLDOMNotationVtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMNotation * This,
             const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            IXMLDOMNotation * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            IXMLDOMNotation * This);
        
<fnptr name="GetTypeInfoCount" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMNotation * This,
             UINT *pctinfo);
        
<fnptr name="GetTypeInfo" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMNotation * This,
             UINT iTInfo,
             LCID lcid,
             ITypeInfo **ppTInfo);
        
<fnptr name="GetIDsOfNames" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMNotation * This,
             const IID * const riid,
             LPOLESTR *rgszNames,
             UINT cNames,
             LCID lcid,
             DISPID *rgDispId);
        
<fnptr name="Invoke" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMNotation * This,
             DISPID dispIdMember,
             const IID * const riid,
             LCID lcid,
             WORD wFlags,
             DISPPARAMS *pDispParams,
             VARIANT *pVarResult,
             EXCEPINFO *pExcepInfo,
             UINT *puArgErr);
        
<fnptr name="get_nodeName" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMNotation * This,
             BSTR *name);
        
<fnptr name="get_nodeValue" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMNotation * This,
             VARIANT *value);
        
<fnptr name="put_nodeValue" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMNotation * This,
             VARIANT value);
        
<fnptr name="get_nodeType" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMNotation * This,
             DOMNodeType *type);
        
<fnptr name="get_parentNode" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMNotation * This,
             IXMLDOMNode **parent);
        
<fnptr name="get_childNodes" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMNotation * This,
             IXMLDOMNodeList **childList);
        
<fnptr name="get_firstChild" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMNotation * This,
             IXMLDOMNode **firstChild);
        
<fnptr name="get_lastChild" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMNotation * This,
             IXMLDOMNode **lastChild);
        
<fnptr name="get_previousSibling" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMNotation * This,
             IXMLDOMNode **previousSibling);
        
<fnptr name="get_nextSibling" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMNotation * This,
             IXMLDOMNode **nextSibling);
        
<fnptr name="get_attributes" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMNotation * This,
             IXMLDOMNamedNodeMap **attributeMap);
        
<fnptr name="insertBefore" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMNotation * This,
             IXMLDOMNode *newChild,
             VARIANT refChild,
             IXMLDOMNode **outNewChild);
        
<fnptr name="replaceChild" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMNotation * This,
             IXMLDOMNode *newChild,
             IXMLDOMNode *oldChild,
             IXMLDOMNode **outOldChild);
        
<fnptr name="removeChild" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMNotation * This,
             IXMLDOMNode *childNode,
             IXMLDOMNode **oldChild);
        
<fnptr name="appendChild" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMNotation * This,
             IXMLDOMNode *newChild,
             IXMLDOMNode **outNewChild);
        
<fnptr name="hasChildNodes" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMNotation * This,
             VARIANT_BOOL *hasChild);
        
<fnptr name="get_ownerDocument" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMNotation * This,
             IXMLDOMDocument **DOMDocument);
        
<fnptr name="cloneNode" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMNotation * This,
             VARIANT_BOOL deep,
             IXMLDOMNode **cloneRoot);
        
<fnptr name="get_nodeTypeString" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMNotation * This,
             BSTR *nodeType);
        
<fnptr name="get_text" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMNotation * This,
             BSTR *text);
        
<fnptr name="put_text" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMNotation * This,
             BSTR text);
        
<fnptr name="get_specified" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMNotation * This,
             VARIANT_BOOL *isSpecified);
        
<fnptr name="get_definition" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMNotation * This,
             IXMLDOMNode **definitionNode);
        
<fnptr name="get_nodeTypedValue" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMNotation * This,
             VARIANT *typedValue);
        
<fnptr name="put_nodeTypedValue" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMNotation * This,
             VARIANT typedValue);
        
<fnptr name="get_dataType" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMNotation * This,
             VARIANT *dataTypeName);
        
<fnptr name="put_dataType" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMNotation * This,
             BSTR dataTypeName);
        
<fnptr name="get_xml" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMNotation * This,
             BSTR *xmlString);
        
<fnptr name="transformNode" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMNotation * This,
             IXMLDOMNode *stylesheet,
             BSTR *xmlString);
        
<fnptr name="selectNodes" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMNotation * This,
             BSTR queryString,
             IXMLDOMNodeList **resultList);
        
<fnptr name="selectSingleNode" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMNotation * This,
             BSTR queryString,
             IXMLDOMNode **resultNode);
        
<fnptr name="get_parsed" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMNotation * This,
             VARIANT_BOOL *isParsed);
        
<fnptr name="get_namespaceURI" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMNotation * This,
             BSTR *namespaceURI);
        
<fnptr name="get_prefix" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMNotation * This,
             BSTR *prefixString);
        
<fnptr name="get_baseName" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMNotation * This,
             BSTR *nameString);
        
<fnptr name="transformNodeToObject" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMNotation * This,
             IXMLDOMNode *stylesheet,
             VARIANT outputObject);
        
<fnptr name="get_publicId" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMNotation * This,
             VARIANT *publicID);
        
<fnptr name="get_systemId" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMNotation * This,
             VARIANT *systemID);
        
        
    } IXMLDOMNotationVtbl;

<struct name="IXMLDOMNotation">
<vptr>IXMLDOMNotationVtbl *</vptr>
</struct>

    

 
extern const IID IID_IXMLDOMEntity;
<struct name="IXMLDOMEntityVtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMEntity * This,
             const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            IXMLDOMEntity * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            IXMLDOMEntity * This);
        
<fnptr name="GetTypeInfoCount" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMEntity * This,
             UINT *pctinfo);
        
<fnptr name="GetTypeInfo" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMEntity * This,
             UINT iTInfo,
             LCID lcid,
             ITypeInfo **ppTInfo);
        
<fnptr name="GetIDsOfNames" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMEntity * This,
             const IID * const riid,
             LPOLESTR *rgszNames,
             UINT cNames,
             LCID lcid,
             DISPID *rgDispId);
        
<fnptr name="Invoke" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMEntity * This,
             DISPID dispIdMember,
             const IID * const riid,
             LCID lcid,
             WORD wFlags,
             DISPPARAMS *pDispParams,
             VARIANT *pVarResult,
             EXCEPINFO *pExcepInfo,
             UINT *puArgErr);
        
<fnptr name="get_nodeName" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMEntity * This,
             BSTR *name);
        
<fnptr name="get_nodeValue" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMEntity * This,
             VARIANT *value);
        
<fnptr name="put_nodeValue" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMEntity * This,
             VARIANT value);
        
<fnptr name="get_nodeType" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMEntity * This,
             DOMNodeType *type);
        
<fnptr name="get_parentNode" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMEntity * This,
             IXMLDOMNode **parent);
        
<fnptr name="get_childNodes" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMEntity * This,
             IXMLDOMNodeList **childList);
        
<fnptr name="get_firstChild" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMEntity * This,
             IXMLDOMNode **firstChild);
        
<fnptr name="get_lastChild" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMEntity * This,
             IXMLDOMNode **lastChild);
        
<fnptr name="get_previousSibling" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMEntity * This,
             IXMLDOMNode **previousSibling);
        
<fnptr name="get_nextSibling" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMEntity * This,
             IXMLDOMNode **nextSibling);
        
<fnptr name="get_attributes" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMEntity * This,
             IXMLDOMNamedNodeMap **attributeMap);
        
<fnptr name="insertBefore" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMEntity * This,
             IXMLDOMNode *newChild,
             VARIANT refChild,
             IXMLDOMNode **outNewChild);
        
<fnptr name="replaceChild" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMEntity * This,
             IXMLDOMNode *newChild,
             IXMLDOMNode *oldChild,
             IXMLDOMNode **outOldChild);
        
<fnptr name="removeChild" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMEntity * This,
             IXMLDOMNode *childNode,
             IXMLDOMNode **oldChild);
        
<fnptr name="appendChild" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMEntity * This,
             IXMLDOMNode *newChild,
             IXMLDOMNode **outNewChild);
        
<fnptr name="hasChildNodes" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMEntity * This,
             VARIANT_BOOL *hasChild);
        
<fnptr name="get_ownerDocument" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMEntity * This,
             IXMLDOMDocument **DOMDocument);
        
<fnptr name="cloneNode" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMEntity * This,
             VARIANT_BOOL deep,
             IXMLDOMNode **cloneRoot);
        
<fnptr name="get_nodeTypeString" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMEntity * This,
             BSTR *nodeType);
        
<fnptr name="get_text" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMEntity * This,
             BSTR *text);
        
<fnptr name="put_text" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMEntity * This,
             BSTR text);
        
<fnptr name="get_specified" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMEntity * This,
             VARIANT_BOOL *isSpecified);
        
<fnptr name="get_definition" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMEntity * This,
             IXMLDOMNode **definitionNode);
        
<fnptr name="get_nodeTypedValue" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMEntity * This,
             VARIANT *typedValue);
        
<fnptr name="put_nodeTypedValue" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMEntity * This,
             VARIANT typedValue);
        
<fnptr name="get_dataType" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMEntity * This,
             VARIANT *dataTypeName);
        
<fnptr name="put_dataType" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMEntity * This,
             BSTR dataTypeName);
        
<fnptr name="get_xml" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMEntity * This,
             BSTR *xmlString);
        
<fnptr name="transformNode" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMEntity * This,
             IXMLDOMNode *stylesheet,
             BSTR *xmlString);
        
<fnptr name="selectNodes" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMEntity * This,
             BSTR queryString,
             IXMLDOMNodeList **resultList);
        
<fnptr name="selectSingleNode" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMEntity * This,
             BSTR queryString,
             IXMLDOMNode **resultNode);
        
<fnptr name="get_parsed" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMEntity * This,
             VARIANT_BOOL *isParsed);
        
<fnptr name="get_namespaceURI" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMEntity * This,
             BSTR *namespaceURI);
        
<fnptr name="get_prefix" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMEntity * This,
             BSTR *prefixString);
        
<fnptr name="get_baseName" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMEntity * This,
             BSTR *nameString);
        
<fnptr name="transformNodeToObject" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMEntity * This,
             IXMLDOMNode *stylesheet,
             VARIANT outputObject);
        
<fnptr name="get_publicId" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMEntity * This,
             VARIANT *publicID);
        
<fnptr name="get_systemId" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMEntity * This,
             VARIANT *systemID);
        
<fnptr name="get_notationName" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMEntity * This,
             BSTR *name);
        
        
    } IXMLDOMEntityVtbl;

<struct name="IXMLDOMEntity">
<vptr>IXMLDOMEntityVtbl *</vptr>
</struct>

    
 
extern const IID IID_IXMLDOMEntityReference;
<struct name="IXMLDOMEntityReferenceVtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMEntityReference * This,
             const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            IXMLDOMEntityReference * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            IXMLDOMEntityReference * This);
        
<fnptr name="GetTypeInfoCount" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMEntityReference * This,
             UINT *pctinfo);
        
<fnptr name="GetTypeInfo" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMEntityReference * This,
             UINT iTInfo,
             LCID lcid,
             ITypeInfo **ppTInfo);
        
<fnptr name="GetIDsOfNames" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMEntityReference * This,
             const IID * const riid,
             LPOLESTR *rgszNames,
             UINT cNames,
             LCID lcid,
             DISPID *rgDispId);
        
<fnptr name="Invoke" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMEntityReference * This,
             DISPID dispIdMember,
             const IID * const riid,
             LCID lcid,
             WORD wFlags,
             DISPPARAMS *pDispParams,
             VARIANT *pVarResult,
             EXCEPINFO *pExcepInfo,
             UINT *puArgErr);
        
<fnptr name="get_nodeName" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMEntityReference * This,
             BSTR *name);
        
<fnptr name="get_nodeValue" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMEntityReference * This,
             VARIANT *value);
        
<fnptr name="put_nodeValue" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMEntityReference * This,
             VARIANT value);
        
<fnptr name="get_nodeType" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMEntityReference * This,
             DOMNodeType *type);
        
<fnptr name="get_parentNode" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMEntityReference * This,
             IXMLDOMNode **parent);
        
<fnptr name="get_childNodes" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMEntityReference * This,
             IXMLDOMNodeList **childList);
        
<fnptr name="get_firstChild" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMEntityReference * This,
             IXMLDOMNode **firstChild);
        
<fnptr name="get_lastChild" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMEntityReference * This,
             IXMLDOMNode **lastChild);
        
<fnptr name="get_previousSibling" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMEntityReference * This,
             IXMLDOMNode **previousSibling);
        
<fnptr name="get_nextSibling" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMEntityReference * This,
             IXMLDOMNode **nextSibling);
        
<fnptr name="get_attributes" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMEntityReference * This,
             IXMLDOMNamedNodeMap **attributeMap);
        
<fnptr name="insertBefore" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMEntityReference * This,
             IXMLDOMNode *newChild,
             VARIANT refChild,
             IXMLDOMNode **outNewChild);
        
<fnptr name="replaceChild" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMEntityReference * This,
             IXMLDOMNode *newChild,
             IXMLDOMNode *oldChild,
             IXMLDOMNode **outOldChild);
        
<fnptr name="removeChild" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMEntityReference * This,
             IXMLDOMNode *childNode,
             IXMLDOMNode **oldChild);
        
<fnptr name="appendChild" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMEntityReference * This,
             IXMLDOMNode *newChild,
             IXMLDOMNode **outNewChild);
        
<fnptr name="hasChildNodes" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMEntityReference * This,
             VARIANT_BOOL *hasChild);
        
<fnptr name="get_ownerDocument" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMEntityReference * This,
             IXMLDOMDocument **DOMDocument);
        
<fnptr name="cloneNode" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMEntityReference * This,
             VARIANT_BOOL deep,
             IXMLDOMNode **cloneRoot);
        
<fnptr name="get_nodeTypeString" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMEntityReference * This,
             BSTR *nodeType);
        
<fnptr name="get_text" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMEntityReference * This,
             BSTR *text);
        
<fnptr name="put_text" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMEntityReference * This,
             BSTR text);
        
<fnptr name="get_specified" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMEntityReference * This,
             VARIANT_BOOL *isSpecified);
        
<fnptr name="get_definition" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMEntityReference * This,
             IXMLDOMNode **definitionNode);
        
<fnptr name="get_nodeTypedValue" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMEntityReference * This,
             VARIANT *typedValue);
        
<fnptr name="put_nodeTypedValue" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMEntityReference * This,
             VARIANT typedValue);
        
<fnptr name="get_dataType" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMEntityReference * This,
             VARIANT *dataTypeName);
        
<fnptr name="put_dataType" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMEntityReference * This,
             BSTR dataTypeName);
        
<fnptr name="get_xml" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMEntityReference * This,
             BSTR *xmlString);
        
<fnptr name="transformNode" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMEntityReference * This,
             IXMLDOMNode *stylesheet,
             BSTR *xmlString);
        
<fnptr name="selectNodes" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMEntityReference * This,
             BSTR queryString,
             IXMLDOMNodeList **resultList);
        
<fnptr name="selectSingleNode" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMEntityReference * This,
             BSTR queryString,
             IXMLDOMNode **resultNode);
        
<fnptr name="get_parsed" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMEntityReference * This,
             VARIANT_BOOL *isParsed);
        
<fnptr name="get_namespaceURI" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMEntityReference * This,
             BSTR *namespaceURI);
        
<fnptr name="get_prefix" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMEntityReference * This,
             BSTR *prefixString);
        
<fnptr name="get_baseName" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMEntityReference * This,
             BSTR *nameString);
        
<fnptr name="transformNodeToObject" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMEntityReference * This,
             IXMLDOMNode *stylesheet,
             VARIANT outputObject);
        
        
    } IXMLDOMEntityReferenceVtbl;

<struct name="IXMLDOMEntityReference">
<vptr>IXMLDOMEntityReferenceVtbl *</vptr>
</struct>

    
 
extern const IID IID_IXMLDOMParseError;
<struct name="IXMLDOMParseErrorVtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMParseError * This,
             const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            IXMLDOMParseError * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            IXMLDOMParseError * This);
        
<fnptr name="GetTypeInfoCount" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMParseError * This,
             UINT *pctinfo);
        
<fnptr name="GetTypeInfo" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMParseError * This,
             UINT iTInfo,
             LCID lcid,
             ITypeInfo **ppTInfo);
        
<fnptr name="GetIDsOfNames" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMParseError * This,
             const IID * const riid,
             LPOLESTR *rgszNames,
             UINT cNames,
             LCID lcid,
             DISPID *rgDispId);
        
<fnptr name="Invoke" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMParseError * This,
             DISPID dispIdMember,
             const IID * const riid,
             LCID lcid,
             WORD wFlags,
             DISPPARAMS *pDispParams,
             VARIANT *pVarResult,
             EXCEPINFO *pExcepInfo,
             UINT *puArgErr);
        
<fnptr name="get_errorCode" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMParseError * This,
             long *errorCode);
        
<fnptr name="get_url" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMParseError * This,
             BSTR *urlString);
        
<fnptr name="get_reason" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMParseError * This,
             BSTR *reasonString);
        
<fnptr name="get_srcText" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMParseError * This,
             BSTR *sourceString);
        
<fnptr name="get_line" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMParseError * This,
             long *lineNumber);
        
<fnptr name="get_linepos" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMParseError * This,
             long *linePosition);
        
<fnptr name="get_filepos" ret="HRESULT" convention="__stdcall">
 
            IXMLDOMParseError * This,
             long *filePosition);
        
        
    } IXMLDOMParseErrorVtbl;

<struct name="IXMLDOMParseError">
<vptr>IXMLDOMParseErrorVtbl *</vptr>
</struct>

    
 
extern const IID IID_IXTLRuntime;

<struct name="IXTLRuntimeVtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            IXTLRuntime * This,
             const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            IXTLRuntime * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            IXTLRuntime * This);
        
<fnptr name="GetTypeInfoCount" ret="HRESULT" convention="__stdcall">
 
            IXTLRuntime * This,
             UINT *pctinfo);
        
<fnptr name="GetTypeInfo" ret="HRESULT" convention="__stdcall">
 
            IXTLRuntime * This,
             UINT iTInfo,
             LCID lcid,
             ITypeInfo **ppTInfo);
        
<fnptr name="GetIDsOfNames" ret="HRESULT" convention="__stdcall">
 
            IXTLRuntime * This,
             const IID * const riid,
             LPOLESTR *rgszNames,
             UINT cNames,
             LCID lcid,
             DISPID *rgDispId);
        
<fnptr name="Invoke" ret="HRESULT" convention="__stdcall">
 
            IXTLRuntime * This,
             DISPID dispIdMember,
             const IID * const riid,
             LCID lcid,
             WORD wFlags,
             DISPPARAMS *pDispParams,
             VARIANT *pVarResult,
             EXCEPINFO *pExcepInfo,
             UINT *puArgErr);
        
<fnptr name="get_nodeName" ret="HRESULT" convention="__stdcall">
 
            IXTLRuntime * This,
             BSTR *name);
        
<fnptr name="get_nodeValue" ret="HRESULT" convention="__stdcall">
 
            IXTLRuntime * This,
             VARIANT *value);
        
<fnptr name="put_nodeValue" ret="HRESULT" convention="__stdcall">
 
            IXTLRuntime * This,
             VARIANT value);
        
<fnptr name="get_nodeType" ret="HRESULT" convention="__stdcall">
 
            IXTLRuntime * This,
             DOMNodeType *type);
        
<fnptr name="get_parentNode" ret="HRESULT" convention="__stdcall">
 
            IXTLRuntime * This,
             IXMLDOMNode **parent);
        
<fnptr name="get_childNodes" ret="HRESULT" convention="__stdcall">
 
            IXTLRuntime * This,
             IXMLDOMNodeList **childList);
        
<fnptr name="get_firstChild" ret="HRESULT" convention="__stdcall">
 
            IXTLRuntime * This,
             IXMLDOMNode **firstChild);
        
<fnptr name="get_lastChild" ret="HRESULT" convention="__stdcall">
 
            IXTLRuntime * This,
             IXMLDOMNode **lastChild);
        
<fnptr name="get_previousSibling" ret="HRESULT" convention="__stdcall">
 
            IXTLRuntime * This,
             IXMLDOMNode **previousSibling);
        
<fnptr name="get_nextSibling" ret="HRESULT" convention="__stdcall">
 
            IXTLRuntime * This,
             IXMLDOMNode **nextSibling);
        
<fnptr name="get_attributes" ret="HRESULT" convention="__stdcall">
 
            IXTLRuntime * This,
             IXMLDOMNamedNodeMap **attributeMap);
        
<fnptr name="insertBefore" ret="HRESULT" convention="__stdcall">
 
            IXTLRuntime * This,
             IXMLDOMNode *newChild,
             VARIANT refChild,
             IXMLDOMNode **outNewChild);
        
<fnptr name="replaceChild" ret="HRESULT" convention="__stdcall">
 
            IXTLRuntime * This,
             IXMLDOMNode *newChild,
             IXMLDOMNode *oldChild,
             IXMLDOMNode **outOldChild);
        
<fnptr name="removeChild" ret="HRESULT" convention="__stdcall">
 
            IXTLRuntime * This,
             IXMLDOMNode *childNode,
             IXMLDOMNode **oldChild);
        
<fnptr name="appendChild" ret="HRESULT" convention="__stdcall">
 
            IXTLRuntime * This,
             IXMLDOMNode *newChild,
             IXMLDOMNode **outNewChild);
        
<fnptr name="hasChildNodes" ret="HRESULT" convention="__stdcall">
 
            IXTLRuntime * This,
             VARIANT_BOOL *hasChild);
        
<fnptr name="get_ownerDocument" ret="HRESULT" convention="__stdcall">
 
            IXTLRuntime * This,
             IXMLDOMDocument **DOMDocument);
        
<fnptr name="cloneNode" ret="HRESULT" convention="__stdcall">
 
            IXTLRuntime * This,
             VARIANT_BOOL deep,
             IXMLDOMNode **cloneRoot);
        
<fnptr name="get_nodeTypeString" ret="HRESULT" convention="__stdcall">
 
            IXTLRuntime * This,
             BSTR *nodeType);
        
<fnptr name="get_text" ret="HRESULT" convention="__stdcall">
 
            IXTLRuntime * This,
             BSTR *text);
        
<fnptr name="put_text" ret="HRESULT" convention="__stdcall">
 
            IXTLRuntime * This,
             BSTR text);
        
<fnptr name="get_specified" ret="HRESULT" convention="__stdcall">
 
            IXTLRuntime * This,
             VARIANT_BOOL *isSpecified);
        
<fnptr name="get_definition" ret="HRESULT" convention="__stdcall">
 
            IXTLRuntime * This,
             IXMLDOMNode **definitionNode);
        
<fnptr name="get_nodeTypedValue" ret="HRESULT" convention="__stdcall">
 
            IXTLRuntime * This,
             VARIANT *typedValue);
        
<fnptr name="put_nodeTypedValue" ret="HRESULT" convention="__stdcall">
 
            IXTLRuntime * This,
             VARIANT typedValue);
        
<fnptr name="get_dataType" ret="HRESULT" convention="__stdcall">
 
            IXTLRuntime * This,
             VARIANT *dataTypeName);
        
<fnptr name="put_dataType" ret="HRESULT" convention="__stdcall">
 
            IXTLRuntime * This,
             BSTR dataTypeName);
        
<fnptr name="get_xml" ret="HRESULT" convention="__stdcall">
 
            IXTLRuntime * This,
             BSTR *xmlString);
        
<fnptr name="transformNode" ret="HRESULT" convention="__stdcall">
 
            IXTLRuntime * This,
             IXMLDOMNode *stylesheet,
             BSTR *xmlString);
        
<fnptr name="selectNodes" ret="HRESULT" convention="__stdcall">
 
            IXTLRuntime * This,
             BSTR queryString,
             IXMLDOMNodeList **resultList);
        
<fnptr name="selectSingleNode" ret="HRESULT" convention="__stdcall">
 
            IXTLRuntime * This,
             BSTR queryString,
             IXMLDOMNode **resultNode);
        
<fnptr name="get_parsed" ret="HRESULT" convention="__stdcall">
 
            IXTLRuntime * This,
             VARIANT_BOOL *isParsed);
        
<fnptr name="get_namespaceURI" ret="HRESULT" convention="__stdcall">
 
            IXTLRuntime * This,
             BSTR *namespaceURI);
        
<fnptr name="get_prefix" ret="HRESULT" convention="__stdcall">
 
            IXTLRuntime * This,
             BSTR *prefixString);
        
<fnptr name="get_baseName" ret="HRESULT" convention="__stdcall">
 
            IXTLRuntime * This,
             BSTR *nameString);
        
<fnptr name="transformNodeToObject" ret="HRESULT" convention="__stdcall">
 
            IXTLRuntime * This,
             IXMLDOMNode *stylesheet,
             VARIANT outputObject);
        
<fnptr name="uniqueID" ret="HRESULT" convention="__stdcall">
 
            IXTLRuntime * This,
             IXMLDOMNode *pNode,
             long *pID);
        
<fnptr name="depth" ret="HRESULT" convention="__stdcall">
 
            IXTLRuntime * This,
             IXMLDOMNode *pNode,
             long *pDepth);
        
<fnptr name="childNumber" ret="HRESULT" convention="__stdcall">
 
            IXTLRuntime * This,
             IXMLDOMNode *pNode,
             long *pNumber);
        
<fnptr name="ancestorChildNumber" ret="HRESULT" convention="__stdcall">
 
            IXTLRuntime * This,
             BSTR bstrNodeName,
             IXMLDOMNode *pNode,
             long *pNumber);
        
<fnptr name="absoluteChildNumber" ret="HRESULT" convention="__stdcall">
 
            IXTLRuntime * This,
             IXMLDOMNode *pNode,
             long *pNumber);
        
<fnptr name="formatIndex" ret="HRESULT" convention="__stdcall">
 
            IXTLRuntime * This,
             long lIndex,
             BSTR bstrFormat,
             BSTR *pbstrFormattedString);
        
<fnptr name="formatNumber" ret="HRESULT" convention="__stdcall">
 
            IXTLRuntime * This,
             double dblNumber,
             BSTR bstrFormat,
             BSTR *pbstrFormattedString);
        
<fnptr name="formatDate" ret="HRESULT" convention="__stdcall">
 
            IXTLRuntime * This,
             VARIANT varDate,
             BSTR bstrFormat,
             VARIANT varDestLocale,
             BSTR *pbstrFormattedString);
        
<fnptr name="formatTime" ret="HRESULT" convention="__stdcall">
 
            IXTLRuntime * This,
             VARIANT varTime,
             BSTR bstrFormat,
             VARIANT varDestLocale,
             BSTR *pbstrFormattedString);
        
        
    } IXTLRuntimeVtbl;

<struct name="IXTLRuntime">
<vptr>IXTLRuntimeVtbl *</vptr>
</struct>

    

 
extern const IID DIID_XMLDOMDocumentEvents;
<struct name="XMLDOMDocumentEventsVtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            XMLDOMDocumentEvents * This,
              const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            XMLDOMDocumentEvents * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            XMLDOMDocumentEvents * This);
        
<fnptr name="GetTypeInfoCount" ret="HRESULT" convention="__stdcall">
 
            XMLDOMDocumentEvents * This,
              UINT *pctinfo);
        
<fnptr name="GetTypeInfo" ret="HRESULT" convention="__stdcall">
 
            XMLDOMDocumentEvents * This,
             UINT iTInfo,
             LCID lcid,
              ITypeInfo **ppTInfo);
        
<fnptr name="GetIDsOfNames" ret="HRESULT" convention="__stdcall">
 
            XMLDOMDocumentEvents * This,
              const IID * const riid,
              LPOLESTR *rgszNames,
             UINT cNames,
             LCID lcid,
              DISPID *rgDispId);
        
<fnptr name="Invoke" ret="HRESULT" convention="__stdcall">
 
            XMLDOMDocumentEvents * This,
             DISPID dispIdMember,
             const IID * const riid,
             LCID lcid,
             WORD wFlags,
             DISPPARAMS *pDispParams,
             VARIANT *pVarResult,
             EXCEPINFO *pExcepInfo,
             UINT *puArgErr);
        
        
    } XMLDOMDocumentEventsVtbl;

<struct name="XMLDOMDocumentEvents">
<vptr>XMLDOMDocumentEventsVtbl *</vptr>
</struct>

    
extern const CLSID CLSID_DOMDocument;
extern const CLSID CLSID_DOMFreeThreadedDocument;

 
extern const IID IID_IXMLHttpRequest;
<struct name="IXMLHttpRequestVtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            IXMLHttpRequest * This,
              const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            IXMLHttpRequest * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            IXMLHttpRequest * This);
        
<fnptr name="GetTypeInfoCount" ret="HRESULT" convention="__stdcall">
 
            IXMLHttpRequest * This,
              UINT *pctinfo);
        
<fnptr name="GetTypeInfo" ret="HRESULT" convention="__stdcall">
 
            IXMLHttpRequest * This,
             UINT iTInfo,
             LCID lcid,
              ITypeInfo **ppTInfo);
        
<fnptr name="GetIDsOfNames" ret="HRESULT" convention="__stdcall">
 
            IXMLHttpRequest * This,
              const IID * const riid,
              LPOLESTR *rgszNames,
             UINT cNames,
             LCID lcid,
              DISPID *rgDispId);
        
<fnptr name="Invoke" ret="HRESULT" convention="__stdcall">
 
            IXMLHttpRequest * This,
             DISPID dispIdMember,
             const IID * const riid,
             LCID lcid,
             WORD wFlags,
             DISPPARAMS *pDispParams,
             VARIANT *pVarResult,
             EXCEPINFO *pExcepInfo,
             UINT *puArgErr);
        
<fnptr name="open" ret="HRESULT" convention="__stdcall">
 
            IXMLHttpRequest * This,
              BSTR bstrMethod,
              BSTR bstrUrl,
             VARIANT varAsync,
             VARIANT bstrUser,
             VARIANT bstrPassword);
        
<fnptr name="setRequestHeader" ret="HRESULT" convention="__stdcall">
 
            IXMLHttpRequest * This,
              BSTR bstrHeader,
              BSTR bstrValue);
        
<fnptr name="getResponseHeader" ret="HRESULT" convention="__stdcall">
 
            IXMLHttpRequest * This,
              BSTR bstrHeader,
              BSTR *pbstrValue);
        
<fnptr name="getAllResponseHeaders" ret="HRESULT" convention="__stdcall">
 
            IXMLHttpRequest * This,
              BSTR *pbstrHeaders);
        
<fnptr name="send" ret="HRESULT" convention="__stdcall">
 
            IXMLHttpRequest * This,
             VARIANT varBody);
        
<fnptr name="abort" ret="HRESULT" convention="__stdcall">
 
            IXMLHttpRequest * This);
        
<fnptr name="get_status" ret="HRESULT" convention="__stdcall">
 
            IXMLHttpRequest * This,
              long *plStatus);
        
<fnptr name="get_statusText" ret="HRESULT" convention="__stdcall">
 
            IXMLHttpRequest * This,
              BSTR *pbstrStatus);
        
<fnptr name="get_responseXML" ret="HRESULT" convention="__stdcall">
 
            IXMLHttpRequest * This,
              IDispatch **ppBody);
        
<fnptr name="get_responseText" ret="HRESULT" convention="__stdcall">
 
            IXMLHttpRequest * This,
              BSTR *pbstrBody);
        
<fnptr name="get_responseBody" ret="HRESULT" convention="__stdcall">
 
            IXMLHttpRequest * This,
              VARIANT *pvarBody);
        
<fnptr name="get_responseStream" ret="HRESULT" convention="__stdcall">
 
            IXMLHttpRequest * This,
              VARIANT *pvarBody);
        
<fnptr name="get_readyState" ret="HRESULT" convention="__stdcall">
 
            IXMLHttpRequest * This,
              long *plState);
        
<fnptr name="put_onreadystatechange" ret="HRESULT" convention="__stdcall">
 
            IXMLHttpRequest * This,
              IDispatch *pReadyStateSink);
        
        
    } IXMLHttpRequestVtbl;

<struct name="IXMLHttpRequest">
<vptr>IXMLHttpRequestVtbl *</vptr>
</struct>

    

extern const CLSID CLSID_XMLHTTPRequest;

 
extern const IID IID_IXMLDSOControl;
<struct name="IXMLDSOControlVtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            IXMLDSOControl * This,
             const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            IXMLDSOControl * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            IXMLDSOControl * This);
        
<fnptr name="GetTypeInfoCount" ret="HRESULT" convention="__stdcall">
 
            IXMLDSOControl * This,
             UINT *pctinfo);
        
<fnptr name="GetTypeInfo" ret="HRESULT" convention="__stdcall">
 
            IXMLDSOControl * This,
             UINT iTInfo,
             LCID lcid,
             ITypeInfo **ppTInfo);
        
<fnptr name="GetIDsOfNames" ret="HRESULT" convention="__stdcall">
 
            IXMLDSOControl * This,
             const IID * const riid,
             LPOLESTR *rgszNames,
             UINT cNames,
             LCID lcid,
             DISPID *rgDispId);
        
<fnptr name="Invoke" ret="HRESULT" convention="__stdcall">
 
            IXMLDSOControl * This,
             DISPID dispIdMember,
             const IID * const riid,
             LCID lcid,
             WORD wFlags,
             DISPPARAMS *pDispParams,
             VARIANT *pVarResult,
             EXCEPINFO *pExcepInfo,
             UINT *puArgErr);
        
<fnptr name="get_XMLDocument" ret="HRESULT" convention="__stdcall">
 
            IXMLDSOControl * This,
             IXMLDOMDocument **ppDoc);
        
<fnptr name="put_XMLDocument" ret="HRESULT" convention="__stdcall">
 
            IXMLDSOControl * This,
             IXMLDOMDocument *ppDoc);
        
<fnptr name="get_JavaDSOCompatible" ret="HRESULT" convention="__stdcall">
 
            IXMLDSOControl * This,
             BOOL *fJavaDSOCompatible);
        
<fnptr name="put_JavaDSOCompatible" ret="HRESULT" convention="__stdcall">
 
            IXMLDSOControl * This,
             BOOL fJavaDSOCompatible);
        
<fnptr name="get_readyState" ret="HRESULT" convention="__stdcall">
 
            IXMLDSOControl * This,
             long *state);
        
        
    } IXMLDSOControlVtbl;

<struct name="IXMLDSOControl">
<vptr>IXMLDSOControlVtbl *</vptr>
</struct>

    
extern const CLSID CLSID_XMLDSOControl;

 
extern const IID IID_IXMLElementCollection;
<struct name="IXMLElementCollectionVtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            IXMLElementCollection * This,
             const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            IXMLElementCollection * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            IXMLElementCollection * This);
        
<fnptr name="GetTypeInfoCount" ret="HRESULT" convention="__stdcall">
 
            IXMLElementCollection * This,
             UINT *pctinfo);
        
<fnptr name="GetTypeInfo" ret="HRESULT" convention="__stdcall">
 
            IXMLElementCollection * This,
             UINT iTInfo,
             LCID lcid,
             ITypeInfo **ppTInfo);
        
<fnptr name="GetIDsOfNames" ret="HRESULT" convention="__stdcall">
 
            IXMLElementCollection * This,
             const IID * const riid,
             LPOLESTR *rgszNames,
             UINT cNames,
             LCID lcid,
             DISPID *rgDispId);
        
<fnptr name="Invoke" ret="HRESULT" convention="__stdcall">
 
            IXMLElementCollection * This,
             DISPID dispIdMember,
             const IID * const riid,
             LCID lcid,
             WORD wFlags,
             DISPPARAMS *pDispParams,
             VARIANT *pVarResult,
             EXCEPINFO *pExcepInfo,
             UINT *puArgErr);
        
<fnptr name="put_length" ret="HRESULT" convention="__stdcall">
 
            IXMLElementCollection * This,
             long v);
        
<fnptr name="get_length" ret="HRESULT" convention="__stdcall">
 
            IXMLElementCollection * This,
             long *p);
        
<fnptr name="get__newEnum" ret="HRESULT" convention="__stdcall">
 
            IXMLElementCollection * This,
             IUnknown **ppUnk);
        
<fnptr name="item" ret="HRESULT" convention="__stdcall">
 
            IXMLElementCollection * This,
             VARIANT var1,
             VARIANT var2,
             IDispatch **ppDisp);
        
        
    } IXMLElementCollectionVtbl;

<struct name="IXMLElementCollection">
<vptr>IXMLElementCollectionVtbl *</vptr>
</struct>

    
 
extern const IID IID_IXMLDocument;
<struct name="IXMLDocumentVtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            IXMLDocument * This,
             const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            IXMLDocument * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            IXMLDocument * This);
        
<fnptr name="GetTypeInfoCount" ret="HRESULT" convention="__stdcall">
 
            IXMLDocument * This,
             UINT *pctinfo);
        
<fnptr name="GetTypeInfo" ret="HRESULT" convention="__stdcall">
 
            IXMLDocument * This,
             UINT iTInfo,
             LCID lcid,
             ITypeInfo **ppTInfo);
        
<fnptr name="GetIDsOfNames" ret="HRESULT" convention="__stdcall">
 
            IXMLDocument * This,
             const IID * const riid,
             LPOLESTR *rgszNames,
             UINT cNames,
             LCID lcid,
             DISPID *rgDispId);
        
<fnptr name="Invoke" ret="HRESULT" convention="__stdcall">
 
            IXMLDocument * This,
             DISPID dispIdMember,
             const IID * const riid,
             LCID lcid,
             WORD wFlags,
             DISPPARAMS *pDispParams,
             VARIANT *pVarResult,
             EXCEPINFO *pExcepInfo,
             UINT *puArgErr);
        
<fnptr name="get_root" ret="HRESULT" convention="__stdcall">
 
            IXMLDocument * This,
             IXMLElement **p);
        
<fnptr name="get_fileSize" ret="HRESULT" convention="__stdcall">
 
            IXMLDocument * This,
             BSTR *p);
        
<fnptr name="get_fileModifiedDate" ret="HRESULT" convention="__stdcall">
 
            IXMLDocument * This,
             BSTR *p);
        
<fnptr name="get_fileUpdatedDate" ret="HRESULT" convention="__stdcall">
 
            IXMLDocument * This,
             BSTR *p);
        
<fnptr name="get_URL" ret="HRESULT" convention="__stdcall">
 
            IXMLDocument * This,
             BSTR *p);
        
<fnptr name="put_URL" ret="HRESULT" convention="__stdcall">
 
            IXMLDocument * This,
             BSTR p);
        
<fnptr name="get_mimeType" ret="HRESULT" convention="__stdcall">
 
            IXMLDocument * This,
             BSTR *p);
        
<fnptr name="get_readyState" ret="HRESULT" convention="__stdcall">
 
            IXMLDocument * This,
             long *pl);
        
<fnptr name="get_charset" ret="HRESULT" convention="__stdcall">
 
            IXMLDocument * This,
             BSTR *p);
        
<fnptr name="put_charset" ret="HRESULT" convention="__stdcall">
 
            IXMLDocument * This,
             BSTR p);
        
<fnptr name="get_version" ret="HRESULT" convention="__stdcall">
 
            IXMLDocument * This,
             BSTR *p);
        
<fnptr name="get_doctype" ret="HRESULT" convention="__stdcall">
 
            IXMLDocument * This,
             BSTR *p);
        
<fnptr name="get_dtdURL" ret="HRESULT" convention="__stdcall">
 
            IXMLDocument * This,
             BSTR *p);
        
<fnptr name="createElement" ret="HRESULT" convention="__stdcall">
 
            IXMLDocument * This,
             VARIANT vType,
             VARIANT var1,
             IXMLElement **ppElem);
        
        
    } IXMLDocumentVtbl;

<struct name="IXMLDocument">
<vptr>IXMLDocumentVtbl *</vptr>
</struct>

    
 
extern const IID IID_IXMLDocument2;

<struct name="IXMLDocument2Vtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            IXMLDocument2 * This,
             const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            IXMLDocument2 * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            IXMLDocument2 * This);
        
<fnptr name="GetTypeInfoCount" ret="HRESULT" convention="__stdcall">
 
            IXMLDocument2 * This,
             UINT *pctinfo);
        
<fnptr name="GetTypeInfo" ret="HRESULT" convention="__stdcall">
 
            IXMLDocument2 * This,
             UINT iTInfo,
             LCID lcid,
             ITypeInfo **ppTInfo);
        
<fnptr name="GetIDsOfNames" ret="HRESULT" convention="__stdcall">
 
            IXMLDocument2 * This,
             const IID * const riid,
             LPOLESTR *rgszNames,
             UINT cNames,
             LCID lcid,
             DISPID *rgDispId);
        
<fnptr name="Invoke" ret="HRESULT" convention="__stdcall">
 
            IXMLDocument2 * This,
             DISPID dispIdMember,
             const IID * const riid,
             LCID lcid,
             WORD wFlags,
             DISPPARAMS *pDispParams,
             VARIANT *pVarResult,
             EXCEPINFO *pExcepInfo,
             UINT *puArgErr);
        
<fnptr name="get_root" ret="HRESULT" convention="__stdcall">
 
            IXMLDocument2 * This,
             IXMLElement2 **p);
        
<fnptr name="get_fileSize" ret="HRESULT" convention="__stdcall">
 
            IXMLDocument2 * This,
             BSTR *p);
        
<fnptr name="get_fileModifiedDate" ret="HRESULT" convention="__stdcall">
 
            IXMLDocument2 * This,
             BSTR *p);
        
<fnptr name="get_fileUpdatedDate" ret="HRESULT" convention="__stdcall">
 
            IXMLDocument2 * This,
             BSTR *p);
        
<fnptr name="get_URL" ret="HRESULT" convention="__stdcall">
 
            IXMLDocument2 * This,
             BSTR *p);
        
<fnptr name="put_URL" ret="HRESULT" convention="__stdcall">
 
            IXMLDocument2 * This,
             BSTR p);
        
<fnptr name="get_mimeType" ret="HRESULT" convention="__stdcall">
 
            IXMLDocument2 * This,
             BSTR *p);
        
<fnptr name="get_readyState" ret="HRESULT" convention="__stdcall">
 
            IXMLDocument2 * This,
             long *pl);
        
<fnptr name="get_charset" ret="HRESULT" convention="__stdcall">
 
            IXMLDocument2 * This,
             BSTR *p);
        
<fnptr name="put_charset" ret="HRESULT" convention="__stdcall">
 
            IXMLDocument2 * This,
             BSTR p);
        
<fnptr name="get_version" ret="HRESULT" convention="__stdcall">
 
            IXMLDocument2 * This,
             BSTR *p);
        
<fnptr name="get_doctype" ret="HRESULT" convention="__stdcall">
 
            IXMLDocument2 * This,
             BSTR *p);
        
<fnptr name="get_dtdURL" ret="HRESULT" convention="__stdcall">
 
            IXMLDocument2 * This,
             BSTR *p);
        
<fnptr name="createElement" ret="HRESULT" convention="__stdcall">
 
            IXMLDocument2 * This,
             VARIANT vType,
             VARIANT var1,
             IXMLElement2 **ppElem);
        
<fnptr name="get_async" ret="HRESULT" convention="__stdcall">
 
            IXMLDocument2 * This,
             VARIANT_BOOL *pf);
        
<fnptr name="put_async" ret="HRESULT" convention="__stdcall">
 
            IXMLDocument2 * This,
             VARIANT_BOOL f);
        
        
    } IXMLDocument2Vtbl;

<struct name="IXMLDocument2">
<vptr>IXMLDocument2Vtbl *</vptr>
</struct>

    
 
extern const IID IID_IXMLElement;
<struct name="IXMLElementVtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            IXMLElement * This,
             const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            IXMLElement * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            IXMLElement * This);
        
<fnptr name="GetTypeInfoCount" ret="HRESULT" convention="__stdcall">
 
            IXMLElement * This,
             UINT *pctinfo);
        
<fnptr name="GetTypeInfo" ret="HRESULT" convention="__stdcall">
 
            IXMLElement * This,
             UINT iTInfo,
             LCID lcid,
             ITypeInfo **ppTInfo);
        
<fnptr name="GetIDsOfNames" ret="HRESULT" convention="__stdcall">
 
            IXMLElement * This,
             const IID * const riid,
             LPOLESTR *rgszNames,
             UINT cNames,
             LCID lcid,
             DISPID *rgDispId);
        
<fnptr name="Invoke" ret="HRESULT" convention="__stdcall">
 
            IXMLElement * This,
             DISPID dispIdMember,
             const IID * const riid,
             LCID lcid,
             WORD wFlags,
             DISPPARAMS *pDispParams,
             VARIANT *pVarResult,
             EXCEPINFO *pExcepInfo,
             UINT *puArgErr);
        
<fnptr name="get_tagName" ret="HRESULT" convention="__stdcall">
 
            IXMLElement * This,
             BSTR *p);
        
<fnptr name="put_tagName" ret="HRESULT" convention="__stdcall">
 
            IXMLElement * This,
             BSTR p);
        
<fnptr name="get_parent" ret="HRESULT" convention="__stdcall">
 
            IXMLElement * This,
             IXMLElement **ppParent);
        
<fnptr name="setAttribute" ret="HRESULT" convention="__stdcall">
 
            IXMLElement * This,
             BSTR strPropertyName,
             VARIANT PropertyValue);
        
<fnptr name="getAttribute" ret="HRESULT" convention="__stdcall">
 
            IXMLElement * This,
             BSTR strPropertyName,
             VARIANT *PropertyValue);
        
<fnptr name="removeAttribute" ret="HRESULT" convention="__stdcall">
 
            IXMLElement * This,
             BSTR strPropertyName);
        
<fnptr name="get_children" ret="HRESULT" convention="__stdcall">
 
            IXMLElement * This,
             IXMLElementCollection **pp);
        
<fnptr name="get_type" ret="HRESULT" convention="__stdcall">
 
            IXMLElement * This,
             long *plType);
        
<fnptr name="get_text" ret="HRESULT" convention="__stdcall">
 
            IXMLElement * This,
             BSTR *p);
        
<fnptr name="put_text" ret="HRESULT" convention="__stdcall">
 
            IXMLElement * This,
             BSTR p);
        
<fnptr name="addChild" ret="HRESULT" convention="__stdcall">
 
            IXMLElement * This,
             IXMLElement *pChildElem,
            long lIndex,
            long lReserved);
        
<fnptr name="removeChild" ret="HRESULT" convention="__stdcall">
 
            IXMLElement * This,
             IXMLElement *pChildElem);
        
        
    } IXMLElementVtbl;

<struct name="IXMLElement">
<vptr>IXMLElementVtbl *</vptr>
</struct>

    

 
extern const IID IID_IXMLElement2;

<struct name="IXMLElement2Vtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            IXMLElement2 * This,
             const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            IXMLElement2 * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            IXMLElement2 * This);
        
<fnptr name="GetTypeInfoCount" ret="HRESULT" convention="__stdcall">
 
            IXMLElement2 * This,
             UINT *pctinfo);
        
<fnptr name="GetTypeInfo" ret="HRESULT" convention="__stdcall">
 
            IXMLElement2 * This,
             UINT iTInfo,
             LCID lcid,
             ITypeInfo **ppTInfo);
        
<fnptr name="GetIDsOfNames" ret="HRESULT" convention="__stdcall">
 
            IXMLElement2 * This,
             const IID * const riid,
             LPOLESTR *rgszNames,
             UINT cNames,
             LCID lcid,
             DISPID *rgDispId);
        
<fnptr name="Invoke" ret="HRESULT" convention="__stdcall">
 
            IXMLElement2 * This,
             DISPID dispIdMember,
             const IID * const riid,
             LCID lcid,
             WORD wFlags,
             DISPPARAMS *pDispParams,
             VARIANT *pVarResult,
             EXCEPINFO *pExcepInfo,
             UINT *puArgErr);
        
<fnptr name="get_tagName" ret="HRESULT" convention="__stdcall">
 
            IXMLElement2 * This,
             BSTR *p);
        
<fnptr name="put_tagName" ret="HRESULT" convention="__stdcall">
 
            IXMLElement2 * This,
             BSTR p);
        
<fnptr name="get_parent" ret="HRESULT" convention="__stdcall">
 
            IXMLElement2 * This,
             IXMLElement2 **ppParent);
        
<fnptr name="setAttribute" ret="HRESULT" convention="__stdcall">
 
            IXMLElement2 * This,
             BSTR strPropertyName,
             VARIANT PropertyValue);
        
<fnptr name="getAttribute" ret="HRESULT" convention="__stdcall">
 
            IXMLElement2 * This,
             BSTR strPropertyName,
             VARIANT *PropertyValue);
        
<fnptr name="removeAttribute" ret="HRESULT" convention="__stdcall">
 
            IXMLElement2 * This,
             BSTR strPropertyName);
        
<fnptr name="get_children" ret="HRESULT" convention="__stdcall">
 
            IXMLElement2 * This,
             IXMLElementCollection **pp);
        
<fnptr name="get_type" ret="HRESULT" convention="__stdcall">
 
            IXMLElement2 * This,
             long *plType);
        
<fnptr name="get_text" ret="HRESULT" convention="__stdcall">
 
            IXMLElement2 * This,
             BSTR *p);
        
<fnptr name="put_text" ret="HRESULT" convention="__stdcall">
 
            IXMLElement2 * This,
             BSTR p);
        
<fnptr name="addChild" ret="HRESULT" convention="__stdcall">
 
            IXMLElement2 * This,
             IXMLElement2 *pChildElem,
            long lIndex,
            long lReserved);
        
<fnptr name="removeChild" ret="HRESULT" convention="__stdcall">
 
            IXMLElement2 * This,
             IXMLElement2 *pChildElem);
        
<fnptr name="get_attributes" ret="HRESULT" convention="__stdcall">
 
            IXMLElement2 * This,
             IXMLElementCollection **pp);
        
        
    } IXMLElement2Vtbl;

<struct name="IXMLElement2">
<vptr>IXMLElement2Vtbl *</vptr>
</struct>

    

 
extern const IID IID_IXMLAttribute;
<struct name="IXMLAttributeVtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            IXMLAttribute * This,
             const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            IXMLAttribute * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            IXMLAttribute * This);
        
<fnptr name="GetTypeInfoCount" ret="HRESULT" convention="__stdcall">
 
            IXMLAttribute * This,
             UINT *pctinfo);
        
<fnptr name="GetTypeInfo" ret="HRESULT" convention="__stdcall">
 
            IXMLAttribute * This,
             UINT iTInfo,
             LCID lcid,
             ITypeInfo **ppTInfo);
        
<fnptr name="GetIDsOfNames" ret="HRESULT" convention="__stdcall">
 
            IXMLAttribute * This,
             const IID * const riid,
             LPOLESTR *rgszNames,
             UINT cNames,
             LCID lcid,
             DISPID *rgDispId);
        
<fnptr name="Invoke" ret="HRESULT" convention="__stdcall">
 
            IXMLAttribute * This,
             DISPID dispIdMember,
             const IID * const riid,
             LCID lcid,
             WORD wFlags,
             DISPPARAMS *pDispParams,
             VARIANT *pVarResult,
             EXCEPINFO *pExcepInfo,
             UINT *puArgErr);
        
<fnptr name="get_name" ret="HRESULT" convention="__stdcall">
 
            IXMLAttribute * This,
             BSTR *n);
        
<fnptr name="get_value" ret="HRESULT" convention="__stdcall">
 
            IXMLAttribute * This,
             BSTR *v);
        
        
    } IXMLAttributeVtbl;

<struct name="IXMLAttribute">
<vptr>IXMLAttributeVtbl *</vptr>
</struct>

    

 
extern const IID IID_IXMLError;
<struct name="IXMLErrorVtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            IXMLError * This,
             const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            IXMLError * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            IXMLError * This);
        
<fnptr name="GetErrorInfo" ret="HRESULT" convention="__stdcall">
 
            IXMLError * This,
            XML_ERROR *pErrorReturn);
        
        
    } IXMLErrorVtbl;

<struct name="IXMLError">
<vptr>IXMLErrorVtbl *</vptr>
</struct>

    

extern const CLSID CLSID_XMLDocument;
 
#pragma comment(lib,"uuid.lib")
extern const IID CLSID_SBS_StdURLMoniker;  
extern const IID CLSID_SBS_HttpProtocol;   
extern const IID CLSID_SBS_FtpProtocol;    
extern const IID CLSID_SBS_GopherProtocol; 
extern const IID CLSID_SBS_HttpSProtocol;  
extern const IID CLSID_SBS_FileProtocol;   
extern const IID CLSID_SBS_MkProtocol;     
extern const IID CLSID_SBS_UrlMkBindCtx;   
extern const IID CLSID_SBS_SoftDistExt;  
extern const IID CLSID_SBS_StdEncodingFilterFac; 
extern const IID CLSID_SBS_DeCompMimeFilter;     
extern const IID CLSID_SBS_CdlProtocol;          
extern const IID CLSID_SBS_ClassInstallFilter;   
extern const IID CLSID_SBS_InternetSecurityManager;  
extern const IID CLSID_SBS_InternetZoneManager;  
extern const IID IID_IAsyncMoniker;    
extern const IID CLSID_StdURLMoniker;  
extern const IID CLSID_HttpProtocol;   
extern const IID CLSID_FtpProtocol;    
extern const IID CLSID_GopherProtocol; 
extern const IID CLSID_HttpSProtocol;  
extern const IID CLSID_FileProtocol;   
extern const IID CLSID_MkProtocol;     
extern const IID CLSID_StdURLProtocol; 
extern const IID CLSID_UrlMkBindCtx;   
extern const IID CLSID_StdEncodingFilterFac; 
extern const IID CLSID_DeCompMimeFilter;     
extern const IID CLSID_CdlProtocol;          
extern const IID CLSID_ClassInstallFilter;   
extern const IID IID_IAsyncBindCtx;    
 

 
<function name="CreateURLMoniker" ret="extern HRESULT" convention="__stdcall">
<arg name="pMkCtx">LPMONIKER</arg>
<arg name="szURL">LPCWSTR</arg>
<arg name="ppmk">LPMONIKER  *</arg>
</function>             
<function name="CreateURLMonikerEx" ret="extern HRESULT" convention="__stdcall">
<arg name="pMkCtx">LPMONIKER</arg>
<arg name="szURL">LPCWSTR</arg>
<arg name="ppmk">LPMONIKER  *</arg>
<arg name="dwFlags">DWORD</arg>
</function>             
<function name="GetClassURL" ret="extern HRESULT" convention="__stdcall">
<arg name="szURL">LPCWSTR</arg>
 CLSID *pClsID);                                           
<function name="CreateAsyncBindCtx" ret="extern HRESULT" convention="__stdcall">
<arg name="reserved">DWORD</arg>
<arg name="pBSCb">IBindStatusCallback *</arg>
                       
                                IEnumFORMATETC *pEFetc, IBindCtx **ppBC);                   

<function name="CreateURLMonikerEx2" ret="extern HRESULT" convention="__stdcall">
<arg name="pMkCtx">LPMONIKER</arg>
<arg name="pUri">IUri*</arg>
<arg name="ppmk">LPMONIKER  *</arg>
<arg name="dwFlags">DWORD</arg>
</function>             

<function name="CreateAsyncBindCtxEx" ret="extern HRESULT" convention="__stdcall">
IBindCtx *pbc, DWORD dwOptions, IBindStatusCallback *pBSCb, IEnumFORMATETC *pEnum,   
                            IBindCtx **ppBC, DWORD reserved);                                                     
<function name="MkParseDisplayNameEx" ret="extern HRESULT" convention="__stdcall">
IBindCtx *pbc, LPCWSTR szDisplayName, ULONG *pchEaten,          
                                LPMONIKER *ppmk);                                           
<function name="RegisterBindStatusCallback" ret="extern HRESULT" convention="__stdcall">
<arg name="pBC">LPBC</arg>
<arg name="pBSCb">IBindStatusCallback *</arg>
<arg name="dwReserved">IBindStatusCallback**  ppBSCBPrev, DWORD</arg>
</function>       
<function name="RevokeBindStatusCallback" ret="extern HRESULT" convention="__stdcall">
<arg name="pBC">LPBC</arg>
 IBindStatusCallback *pBSCb);                      
<function name="GetClassFileOrMime" ret="extern HRESULT" convention="__stdcall">
<arg name="pBC">LPBC</arg>
<arg name="szFilename">LPCWSTR</arg>
<arg name="pBuffer">LPVOID</arg>
<arg name="cbSize">DWORD</arg>
<arg name="szMime">LPCWSTR</arg>
<arg name="dwReserved">DWORD</arg>
 CLSID *pclsid); 
<function name="IsValidURL" ret="extern HRESULT" convention="__stdcall">
<arg name="pBC">LPBC</arg>
<arg name="szURL">LPCWSTR</arg>
<arg name="dwReserved">DWORD</arg>
</function>                               
<function name="CoGetClassObjectFromURL" ret="extern HRESULT" convention="__stdcall">
<arg name="rCLASSID">const IID * const</arg>
<arg name="szCODE">LPCWSTR</arg>
<arg name="dwFileVersionMS">DWORD</arg>
 
            DWORD dwFileVersionLS, LPCWSTR szTYPE,
            LPBINDCTX pBindCtx, DWORD dwClsContext,
            LPVOID pvReserved, const IID * const riid, LPVOID * ppv);
<function name="FaultInIEFeature" ret="extern HRESULT" convention="__stdcall">
<arg name="hWnd">HWND</arg>

             uCLSSPEC *pClassSpec,
             QUERYCONTEXT *pQuery, DWORD dwFlags);                                           
<function name="GetComponentIDFromCLSSPEC" ret="extern HRESULT" convention="__stdcall">
<arg name="pClassspec">uCLSSPEC *</arg>
<arg name="ppszComponentID">LPSTR *</arg>
</function>                                                      
                                                 
                                                 
                                                 
 

<function name="IsAsyncMoniker" ret="extern HRESULT" convention="__stdcall">
IMoniker* pmk);                                                       
<function name="CreateURLBinding" ret="extern HRESULT" convention="__stdcall">
<arg name="lpszUrl">LPCWSTR</arg>
<arg name="pbc">IBindCtx *</arg>
  IBinding **ppBdg);
 
<function name="RegisterMediaTypes" ret="extern HRESULT" convention="__stdcall">
<arg name="ctypes">UINT</arg>
<arg name="rgszTypes">const LPCSTR*</arg>
<arg name="rgcfTypes">CLIPFORMAT*</arg>
</function>            
<function name="FindMediaType" ret="extern HRESULT" convention="__stdcall">
<arg name="rgszTypes">LPCSTR</arg>
<arg name="rgcfTypes">CLIPFORMAT*</arg>
</function>                                       
<function name="CreateFormatEnumerator" ret="extern HRESULT" convention="__stdcall">
<arg name="cfmtetc">UINT</arg>
<arg name="rgfmtetc">FORMATETC*</arg>
<arg name="ppenumfmtetc">IEnumFORMATETC**</arg>
</function> 
<function name="RegisterFormatEnumerator" ret="extern HRESULT" convention="__stdcall">
<arg name="pBC">LPBC</arg>
<arg name="pEFetc">IEnumFORMATETC *</arg>
 DWORD reserved);          
<function name="RevokeFormatEnumerator" ret="extern HRESULT" convention="__stdcall">
<arg name="pBC">LPBC</arg>
 IEnumFORMATETC *pEFetc);                            
<function name="RegisterMediaTypeClass" ret="extern HRESULT" convention="__stdcall">
<arg name="pBC">LPBC</arg>
<arg name="ctypes">UINT</arg>
<arg name="rgszTypes">const LPCSTR*</arg>
<arg name="rgclsID">CLSID *</arg>
 DWORD reserved);    
<function name="FindMediaTypeClass" ret="extern HRESULT" convention="__stdcall">
<arg name="pBC">LPBC</arg>
<arg name="szType">LPCSTR</arg>
<arg name="pclsID">CLSID *</arg>
 DWORD reserved);                          
<function name="UrlMkSetSessionOption" ret="extern HRESULT" convention="__stdcall">
<arg name="dwOption">DWORD</arg>
<arg name="pBuffer">LPVOID</arg>
<arg name="dwBufferLength">DWORD</arg>
<arg name="dwReserved">DWORD</arg>
</function>       
<function name="UrlMkGetSessionOption" ret="extern HRESULT" convention="__stdcall">
<arg name="dwOption">DWORD</arg>
<arg name="pBuffer">LPVOID</arg>
<arg name="dwBufferLength">DWORD</arg>
<arg name="pdwBufferLength">DWORD *</arg>
 DWORD dwReserved);       
<function name="FindMimeFromData" ret="extern HRESULT" convention="__stdcall">
                                                                                                                  
                    LPBC    pBC,                   
                    LPCWSTR pwzUrl,                
     LPVOID  pBuffer,               
                            DWORD   cbSize,                
                    LPCWSTR pwzMimeProposed,       
                            DWORD   dwMimeFlags,           
                 LPWSTR  *ppwzMimeOut,          
                  DWORD   dwReserved);           

<function name="ObtainUserAgentString" ret="extern HRESULT" convention="__stdcall">
                           
                                        DWORD dwOption, 
     LPSTR pszUAOut, 
                                 DWORD *cbSize); 
<function name="CompareSecurityIds" ret="extern HRESULT" convention="__stdcall">
<arg name="pbSecurityId1">BYTE*</arg>
<arg name="dwLen1">DWORD</arg>
<arg name="pbSecurityId2">BYTE*</arg>
<arg name="dwLen2">DWORD</arg>
<arg name="dwReserved">DWORD</arg>
</function>    
<function name="CompatFlagsFromClsid" ret="extern HRESULT" convention="__stdcall">
CLSID *pclsid, LPDWORD pdwCompatFlags, LPDWORD pdwMiscStatusFlags);             
 
 

 
                                                                             
                                                                             
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0000_v0_0_s_ifspec;
 

typedef    IPersistMoniker *LPPERSISTMONIKER;
extern const IID IID_IPersistMoniker;
<struct name="IPersistMonikerVtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            IPersistMoniker * This,
              const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            IPersistMoniker * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            IPersistMoniker * This);
        
<fnptr name="GetClassID" ret="HRESULT" convention="__stdcall">
 
            IPersistMoniker * This,
              CLSID *pClassID);
        
<fnptr name="IsDirty" ret="HRESULT" convention="__stdcall">
 
            IPersistMoniker * This);
        
<fnptr name="Load" ret="HRESULT" convention="__stdcall">
 
            IPersistMoniker * This,
             BOOL fFullyAvailable,
              IMoniker *pimkName,
              LPBC pibc,
             DWORD grfMode);
        
<fnptr name="Save" ret="HRESULT" convention="__stdcall">
 
            IPersistMoniker * This,
              IMoniker *pimkName,
              LPBC pbc,
             BOOL fRemember);
        
<fnptr name="SaveCompleted" ret="HRESULT" convention="__stdcall">
 
            IPersistMoniker * This,
              IMoniker *pimkName,
              LPBC pibc);
        
<fnptr name="GetCurMoniker" ret="HRESULT" convention="__stdcall">
 
            IPersistMoniker * This,
              IMoniker **ppimkName);
        
        
    } IPersistMonikerVtbl;

<struct name="IPersistMoniker">
<vptr>IPersistMonikerVtbl *</vptr>
</struct>

    

 
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0001_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0001_v0_0_s_ifspec;
 

typedef    IMonikerProp *LPMONIKERPROP;

typedef  
enum __MIDL_IMonikerProp_0001
    {	MIMETYPEPROP	= 0,
	USE_SRC_URL	= 0x1,
	CLASSIDPROP	= 0x2,
	TRUSTEDDOWNLOADPROP	= 0x3,
	POPUPLEVELPROP	= 0x4
    } 	MONIKERPROPERTY;
extern const IID IID_IMonikerProp;
<struct name="IMonikerPropVtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            IMonikerProp * This,
              const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            IMonikerProp * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            IMonikerProp * This);
        
<fnptr name="PutProperty" ret="HRESULT" convention="__stdcall">
 
            IMonikerProp * This,
             MONIKERPROPERTY mkp,
              LPCWSTR val);
        
        
    } IMonikerPropVtbl;

<struct name="IMonikerProp">
<vptr>IMonikerPropVtbl *</vptr>
</struct>

    

 
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0002_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0002_v0_0_s_ifspec;
 

typedef  IBindProtocol *LPBINDPROTOCOL;
extern const IID IID_IBindProtocol;
<struct name="IBindProtocolVtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            IBindProtocol * This,
             const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            IBindProtocol * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            IBindProtocol * This);
        
<fnptr name="CreateBinding" ret="HRESULT" convention="__stdcall">
 
            IBindProtocol * This,
             LPCWSTR szUrl,
             IBindCtx *pbc,
             IBinding **ppb);
        
        
    } IBindProtocolVtbl;

<struct name="IBindProtocol">
<vptr>IBindProtocolVtbl *</vptr>
</struct>

    

 
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0003_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0003_v0_0_s_ifspec;
 

typedef    IBinding *LPBINDING;
extern const IID IID_IBinding;
<struct name="IBindingVtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            IBinding * This,
              const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            IBinding * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            IBinding * This);
        
<fnptr name="Abort" ret="HRESULT" convention="__stdcall">
 
            IBinding * This);
        
<fnptr name="Suspend" ret="HRESULT" convention="__stdcall">
 
            IBinding * This);
        
<fnptr name="Resume" ret="HRESULT" convention="__stdcall">
 
            IBinding * This);
        
<fnptr name="SetPriority" ret="HRESULT" convention="__stdcall">
 
            IBinding * This,
             LONG nPriority);
        
<fnptr name="GetPriority" ret="HRESULT" convention="__stdcall">
 
            IBinding * This,
              LONG *pnPriority);
        
<fnptr name="GetBindResult" ret="HRESULT" convention="__stdcall">
 
            IBinding * This,
             CLSID *pclsidProtocol,
             DWORD *pdwResult,
             LPOLESTR *pszResult,
             DWORD *pdwReserved);
        
        
    } IBindingVtbl;

<struct name="IBinding">
<vptr>IBindingVtbl *</vptr>
</struct>

    

<function name="IBinding_RemoteGetBindResult_Proxy" ret="HRESULT" convention="__stdcall"> 
    IBinding * This,
      CLSID *pclsidProtocol,
      DWORD *pdwResult,
      LPOLESTR *pszResult,
     DWORD dwReserved);
<function name="IBinding_RemoteGetBindResult_Stub" ret="void" convention="__stdcall">

    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
 
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0004_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0004_v0_0_s_ifspec;
 

typedef    IBindStatusCallback *LPBINDSTATUSCALLBACK;

typedef  
enum __MIDL_IBindStatusCallback_0001
    {	BINDVERB_GET	= 0,
	BINDVERB_POST	= 0x1,
	BINDVERB_PUT	= 0x2,
	BINDVERB_CUSTOM	= 0x3
    } 	BINDVERB;

typedef  
enum __MIDL_IBindStatusCallback_0002
    {	BINDINFOF_URLENCODESTGMEDDATA	= 0x1,
	BINDINFOF_URLENCODEDEXTRAINFO	= 0x2
    } 	BINDINFOF;

typedef  
enum __MIDL_IBindStatusCallback_0003
    {	BINDF_ASYNCHRONOUS	= 0x1,
	BINDF_ASYNCSTORAGE	= 0x2,
	BINDF_NOPROGRESSIVERENDERING	= 0x4,
	BINDF_OFFLINEOPERATION	= 0x8,
	BINDF_GETNEWESTVERSION	= 0x10,
	BINDF_NOWRITECACHE	= 0x20,
	BINDF_NEEDFILE	= 0x40,
	BINDF_PULLDATA	= 0x80,
	BINDF_IGNORESECURITYPROBLEM	= 0x100,
	BINDF_RESYNCHRONIZE	= 0x200,
	BINDF_HYPERLINK	= 0x400,
	BINDF_NO_UI	= 0x800,
	BINDF_SILENTOPERATION	= 0x1000,
	BINDF_PRAGMA_NO_CACHE	= 0x2000,
	BINDF_GETCLASSOBJECT	= 0x4000,
	BINDF_RESERVED_1	= 0x8000,
	BINDF_FREE_THREADED	= 0x10000,
	BINDF_DIRECT_READ	= 0x20000,
	BINDF_FORMS_SUBMIT	= 0x40000,
	BINDF_GETFROMCACHE_IF_NET_FAIL	= 0x80000,
	BINDF_FROMURLMON	= 0x100000,
	BINDF_FWD_BACK	= 0x200000,
	BINDF_PREFERDEFAULTHANDLER	= 0x400000,
	BINDF_ENFORCERESTRICTED	= 0x800000
    } 	BINDF;

typedef  
enum __MIDL_IBindStatusCallback_0004
    {	URL_ENCODING_NONE	= 0,
	URL_ENCODING_ENABLE_UTF8	= 0x10000000,
	URL_ENCODING_DISABLE_UTF8	= 0x20000000
    } 	URL_ENCODING;

<struct name="_tagBINDINFO">
<field name="cbSize">ULONG</field>
<field name="szExtraInfo">LPWSTR</field>
<field name="stgmedData">STGMEDIUM</field>
<field name="grfBindInfoF">DWORD</field>
<field name="dwBindVerb">DWORD</field>
<field name="szCustomVerb">LPWSTR</field>
<field name="cbstgmedData">DWORD</field>
<field name="dwOptions">DWORD</field>
<field name="dwOptionsFlags">DWORD</field>
<field name="dwCodePage">DWORD</field>
<field name="securityAttributes">SECURITY_ATTRIBUTES</field>
<field name="iid">IID</field>
    IUnknown *pUnk;
    DWORD dwReserved;
    } 	BINDINFO;

<struct name="_REMSECURITY_ATTRIBUTES">
<field name="nLength">DWORD</field>
<field name="lpSecurityDescriptor">DWORD</field>
<field name="bInheritHandle">BOOL</field>
    } 	REMSECURITY_ATTRIBUTES;

<typedef name="PREMSECURITY_ATTRIBUTES">_REMSECURITY_ATTRIBUTES *</typedef>

<typedef name="LPREMSECURITY_ATTRIBUTES">_REMSECURITY_ATTRIBUTES *</typedef>

<struct name="_tagRemBINDINFO">
<field name="cbSize">ULONG</field>
<field name="szExtraInfo">LPWSTR</field>
<field name="grfBindInfoF">DWORD</field>
<field name="dwBindVerb">DWORD</field>
<field name="szCustomVerb">LPWSTR</field>
<field name="cbstgmedData">DWORD</field>
<field name="dwOptions">DWORD</field>
<field name="dwOptionsFlags">DWORD</field>
<field name="dwCodePage">DWORD</field>
<field name="securityAttributes">REMSECURITY_ATTRIBUTES</field>
<field name="iid">IID</field>
    IUnknown *pUnk;
    DWORD dwReserved;
    } 	RemBINDINFO;

<struct name="tagRemFORMATETC">
<field name="cfFormat">DWORD</field>
<field name="ptd">DWORD</field>
<field name="dwAspect">DWORD</field>
<field name="lindex">LONG</field>
<field name="tymed">DWORD</field>
    } 	RemFORMATETC;

<typedef name="LPREMFORMATETC">tagRemFORMATETC *</typedef>

typedef  
enum __MIDL_IBindStatusCallback_0005
    {	BINDINFO_OPTIONS_WININETFLAG	= 0x10000,
	BINDINFO_OPTIONS_ENABLE_UTF8	= 0x20000,
	BINDINFO_OPTIONS_DISABLE_UTF8	= 0x40000,
	BINDINFO_OPTIONS_USE_IE_ENCODING	= 0x80000,
	BINDINFO_OPTIONS_BINDTOOBJECT	= 0x100000,
	BINDINFO_OPTIONS_SECURITYOPTOUT	= 0x200000,
	BINDINFO_OPTIONS_IGNOREMIMETEXTPLAIN	= 0x400000,
	BINDINFO_OPTIONS_USEBINDSTRINGCREDS	= 0x800000,
	BINDINFO_OPTIONS_IGNOREHTTPHTTPSREDIRECTS	= 0x1000000,
	BINDINFO_OPTIONS_IGNORE_SSLERRORS_ONCE	= 0x2000000,
	BINDINFO_WPC_DOWNLOADBLOCKED	= 0x8000000,
	BINDINFO_WPC_LOGGING_ENABLED	= 0x10000000,
	BINDINFO_OPTIONS_DISABLEAUTOREDIRECTS	= 0x40000000,
	BINDINFO_OPTIONS_SHDOCVW_NAVIGATE	= 0x80000000
    } 	BINDINFO_OPTIONS;

typedef  
enum __MIDL_IBindStatusCallback_0006
    {	BSCF_FIRSTDATANOTIFICATION	= 0x1,
	BSCF_INTERMEDIATEDATANOTIFICATION	= 0x2,
	BSCF_LASTDATANOTIFICATION	= 0x4,
	BSCF_DATAFULLYAVAILABLE	= 0x8,
	BSCF_AVAILABLEDATASIZEUNKNOWN	= 0x10
    } 	BSCF;

typedef 
enum tagBINDSTATUS
    {	BINDSTATUS_FINDINGRESOURCE	= 1,
	BINDSTATUS_CONNECTING	= ( BINDSTATUS_FINDINGRESOURCE + 1 ) ,
	BINDSTATUS_REDIRECTING	= ( BINDSTATUS_CONNECTING + 1 ) ,
	BINDSTATUS_BEGINDOWNLOADDATA	= ( BINDSTATUS_REDIRECTING + 1 ) ,
	BINDSTATUS_DOWNLOADINGDATA	= ( BINDSTATUS_BEGINDOWNLOADDATA + 1 ) ,
	BINDSTATUS_ENDDOWNLOADDATA	= ( BINDSTATUS_DOWNLOADINGDATA + 1 ) ,
	BINDSTATUS_BEGINDOWNLOADCOMPONENTS	= ( BINDSTATUS_ENDDOWNLOADDATA + 1 ) ,
	BINDSTATUS_INSTALLINGCOMPONENTS	= ( BINDSTATUS_BEGINDOWNLOADCOMPONENTS + 1 ) ,
	BINDSTATUS_ENDDOWNLOADCOMPONENTS	= ( BINDSTATUS_INSTALLINGCOMPONENTS + 1 ) ,
	BINDSTATUS_USINGCACHEDCOPY	= ( BINDSTATUS_ENDDOWNLOADCOMPONENTS + 1 ) ,
	BINDSTATUS_SENDINGREQUEST	= ( BINDSTATUS_USINGCACHEDCOPY + 1 ) ,
	BINDSTATUS_CLASSIDAVAILABLE	= ( BINDSTATUS_SENDINGREQUEST + 1 ) ,
	BINDSTATUS_MIMETYPEAVAILABLE	= ( BINDSTATUS_CLASSIDAVAILABLE + 1 ) ,
	BINDSTATUS_CACHEFILENAMEAVAILABLE	= ( BINDSTATUS_MIMETYPEAVAILABLE + 1 ) ,
	BINDSTATUS_BEGINSYNCOPERATION	= ( BINDSTATUS_CACHEFILENAMEAVAILABLE + 1 ) ,
	BINDSTATUS_ENDSYNCOPERATION	= ( BINDSTATUS_BEGINSYNCOPERATION + 1 ) ,
	BINDSTATUS_BEGINUPLOADDATA	= ( BINDSTATUS_ENDSYNCOPERATION + 1 ) ,
	BINDSTATUS_UPLOADINGDATA	= ( BINDSTATUS_BEGINUPLOADDATA + 1 ) ,
	BINDSTATUS_ENDUPLOADDATA	= ( BINDSTATUS_UPLOADINGDATA + 1 ) ,
	BINDSTATUS_PROTOCOLCLASSID	= ( BINDSTATUS_ENDUPLOADDATA + 1 ) ,
	BINDSTATUS_ENCODING	= ( BINDSTATUS_PROTOCOLCLASSID + 1 ) ,
	BINDSTATUS_VERIFIEDMIMETYPEAVAILABLE	= ( BINDSTATUS_ENCODING + 1 ) ,
	BINDSTATUS_CLASSINSTALLLOCATION	= ( BINDSTATUS_VERIFIEDMIMETYPEAVAILABLE + 1 ) ,
	BINDSTATUS_DECODING	= ( BINDSTATUS_CLASSINSTALLLOCATION + 1 ) ,
	BINDSTATUS_LOADINGMIMEHANDLER	= ( BINDSTATUS_DECODING + 1 ) ,
	BINDSTATUS_CONTENTDISPOSITIONATTACH	= ( BINDSTATUS_LOADINGMIMEHANDLER + 1 ) ,
	BINDSTATUS_FILTERREPORTMIMETYPE	= ( BINDSTATUS_CONTENTDISPOSITIONATTACH + 1 ) ,
	BINDSTATUS_CLSIDCANINSTANTIATE	= ( BINDSTATUS_FILTERREPORTMIMETYPE + 1 ) ,
	BINDSTATUS_IUNKNOWNAVAILABLE	= ( BINDSTATUS_CLSIDCANINSTANTIATE + 1 ) ,
	BINDSTATUS_DIRECTBIND	= ( BINDSTATUS_IUNKNOWNAVAILABLE + 1 ) ,
	BINDSTATUS_RAWMIMETYPE	= ( BINDSTATUS_DIRECTBIND + 1 ) ,
	BINDSTATUS_PROXYDETECTING	= ( BINDSTATUS_RAWMIMETYPE + 1 ) ,
	BINDSTATUS_ACCEPTRANGES	= ( BINDSTATUS_PROXYDETECTING + 1 ) ,
	BINDSTATUS_COOKIE_SENT	= ( BINDSTATUS_ACCEPTRANGES + 1 ) ,
	BINDSTATUS_COMPACT_POLICY_RECEIVED	= ( BINDSTATUS_COOKIE_SENT + 1 ) ,
	BINDSTATUS_COOKIE_SUPPRESSED	= ( BINDSTATUS_COMPACT_POLICY_RECEIVED + 1 ) ,
	BINDSTATUS_COOKIE_STATE_UNKNOWN	= ( BINDSTATUS_COOKIE_SUPPRESSED + 1 ) ,
	BINDSTATUS_COOKIE_STATE_ACCEPT	= ( BINDSTATUS_COOKIE_STATE_UNKNOWN + 1 ) ,
	BINDSTATUS_COOKIE_STATE_REJECT	= ( BINDSTATUS_COOKIE_STATE_ACCEPT + 1 ) ,
	BINDSTATUS_COOKIE_STATE_PROMPT	= ( BINDSTATUS_COOKIE_STATE_REJECT + 1 ) ,
	BINDSTATUS_COOKIE_STATE_LEASH	= ( BINDSTATUS_COOKIE_STATE_PROMPT + 1 ) ,
	BINDSTATUS_COOKIE_STATE_DOWNGRADE	= ( BINDSTATUS_COOKIE_STATE_LEASH + 1 ) ,
	BINDSTATUS_POLICY_HREF	= ( BINDSTATUS_COOKIE_STATE_DOWNGRADE + 1 ) ,
	BINDSTATUS_P3P_HEADER	= ( BINDSTATUS_POLICY_HREF + 1 ) ,
	BINDSTATUS_SESSION_COOKIE_RECEIVED	= ( BINDSTATUS_P3P_HEADER + 1 ) ,
	BINDSTATUS_PERSISTENT_COOKIE_RECEIVED	= ( BINDSTATUS_SESSION_COOKIE_RECEIVED + 1 ) ,
	BINDSTATUS_SESSION_COOKIES_ALLOWED	= ( BINDSTATUS_PERSISTENT_COOKIE_RECEIVED + 1 ) ,
	BINDSTATUS_CACHECONTROL	= ( BINDSTATUS_SESSION_COOKIES_ALLOWED + 1 ) ,
	BINDSTATUS_CONTENTDISPOSITIONFILENAME	= ( BINDSTATUS_CACHECONTROL + 1 ) ,
	BINDSTATUS_MIMETEXTPLAINMISMATCH	= ( BINDSTATUS_CONTENTDISPOSITIONFILENAME + 1 ) ,
	BINDSTATUS_PUBLISHERAVAILABLE	= ( BINDSTATUS_MIMETEXTPLAINMISMATCH + 1 ) ,
	BINDSTATUS_DISPLAYNAMEAVAILABLE	= ( BINDSTATUS_PUBLISHERAVAILABLE + 1 ) ,
	BINDSTATUS_SSLUX_NAVBLOCKED	= ( BINDSTATUS_DISPLAYNAMEAVAILABLE + 1 ) 
    } 	BINDSTATUS;
extern const IID IID_IBindStatusCallback;

<struct name="IBindStatusCallbackVtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            IBindStatusCallback * This,
              const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            IBindStatusCallback * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            IBindStatusCallback * This);
        
<fnptr name="OnStartBinding" ret="HRESULT" convention="__stdcall">
 
            IBindStatusCallback * This,
             DWORD dwReserved,
              IBinding *pib);
        
<fnptr name="GetPriority" ret="HRESULT" convention="__stdcall">
 
            IBindStatusCallback * This,
              LONG *pnPriority);
        
<fnptr name="OnLowResource" ret="HRESULT" convention="__stdcall">
 
            IBindStatusCallback * This,
             DWORD reserved);
        
<fnptr name="OnProgress" ret="HRESULT" convention="__stdcall">
 
            IBindStatusCallback * This,
             ULONG ulProgress,
             ULONG ulProgressMax,
             ULONG ulStatusCode,
              LPCWSTR szStatusText);
        
<fnptr name="OnStopBinding" ret="HRESULT" convention="__stdcall">
 
            IBindStatusCallback * This,
             HRESULT hresult,
              LPCWSTR szError);
        
<fnptr name="GetBindInfo" ret="HRESULT" convention="__stdcall">
 
            IBindStatusCallback * This,
             DWORD *grfBINDF,
             BINDINFO *pbindinfo);
        
<fnptr name="OnDataAvailable" ret="HRESULT" convention="__stdcall">
 
            IBindStatusCallback * This,
             DWORD grfBSCF,
             DWORD dwSize,
             FORMATETC *pformatetc,
             STGMEDIUM *pstgmed);
        
<fnptr name="OnObjectAvailable" ret="HRESULT" convention="__stdcall">
 
            IBindStatusCallback * This,
              const IID * const riid,
              IUnknown *punk);
        
        
    } IBindStatusCallbackVtbl;

<struct name="IBindStatusCallback">
<vptr>IBindStatusCallbackVtbl *</vptr>
</struct>

    

<function name="IBindStatusCallback_RemoteGetBindInfo_Proxy" ret="HRESULT" convention="__stdcall"> 
    IBindStatusCallback * This,
      DWORD *grfBINDF,
      RemBINDINFO *pbindinfo,
      RemSTGMEDIUM *pstgmed);
<function name="IBindStatusCallback_RemoteGetBindInfo_Stub" ret="void" convention="__stdcall">

    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
<function name="IBindStatusCallback_RemoteOnDataAvailable_Proxy" ret="HRESULT" convention="__stdcall"> 
    IBindStatusCallback * This,
     DWORD grfBSCF,
     DWORD dwSize,
      RemFORMATETC *pformatetc,
      RemSTGMEDIUM *pstgmed);
<function name="IBindStatusCallback_RemoteOnDataAvailable_Stub" ret="void" convention="__stdcall">

    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
 
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0005_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0005_v0_0_s_ifspec;
 

typedef    IAuthenticate *LPAUTHENTICATION;
extern const IID IID_IAuthenticate;
<struct name="IAuthenticateVtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            IAuthenticate * This,
              const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            IAuthenticate * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            IAuthenticate * This);
        
<fnptr name="Authenticate" ret="HRESULT" convention="__stdcall">
 
            IAuthenticate * This,
              HWND *phwnd,
              LPWSTR *pszUsername,
              LPWSTR *pszPassword);
        
        
    } IAuthenticateVtbl;

<struct name="IAuthenticate">
<vptr>IAuthenticateVtbl *</vptr>
</struct>

    
 
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0006_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0006_v0_0_s_ifspec;
 

typedef    IHttpNegotiate *LPHTTPNEGOTIATE;
extern const IID IID_IHttpNegotiate;
<struct name="IHttpNegotiateVtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            IHttpNegotiate * This,
              const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            IHttpNegotiate * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            IHttpNegotiate * This);
        
<fnptr name="BeginningTransaction" ret="HRESULT" convention="__stdcall">
 
            IHttpNegotiate * This,
              LPCWSTR szURL,
              LPCWSTR szHeaders,
             DWORD dwReserved,
              LPWSTR *pszAdditionalHeaders);
        
<fnptr name="OnResponse" ret="HRESULT" convention="__stdcall">
 
            IHttpNegotiate * This,
             DWORD dwResponseCode,
              LPCWSTR szResponseHeaders,
              LPCWSTR szRequestHeaders,
              LPWSTR *pszAdditionalRequestHeaders);
        
        
    } IHttpNegotiateVtbl;

<struct name="IHttpNegotiate">
<vptr>IHttpNegotiateVtbl *</vptr>
</struct>

    

 
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0007_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0007_v0_0_s_ifspec;
 

typedef    IHttpNegotiate2 *LPHTTPNEGOTIATE2;
extern const IID IID_IHttpNegotiate2;
<struct name="IHttpNegotiate2Vtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            IHttpNegotiate2 * This,
              const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            IHttpNegotiate2 * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            IHttpNegotiate2 * This);
        
<fnptr name="BeginningTransaction" ret="HRESULT" convention="__stdcall">
 
            IHttpNegotiate2 * This,
              LPCWSTR szURL,
              LPCWSTR szHeaders,
             DWORD dwReserved,
              LPWSTR *pszAdditionalHeaders);
        
<fnptr name="OnResponse" ret="HRESULT" convention="__stdcall">
 
            IHttpNegotiate2 * This,
             DWORD dwResponseCode,
              LPCWSTR szResponseHeaders,
              LPCWSTR szRequestHeaders,
              LPWSTR *pszAdditionalRequestHeaders);
        
<fnptr name="GetRootSecurityId" ret="HRESULT" convention="__stdcall">
 
            IHttpNegotiate2 * This,
              BYTE *pbSecurityId,
              DWORD *pcbSecurityId,
             DWORD_PTR dwReserved);
        
        
    } IHttpNegotiate2Vtbl;

<struct name="IHttpNegotiate2">
<vptr>IHttpNegotiate2Vtbl *</vptr>
</struct>

    
 
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0008_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0008_v0_0_s_ifspec;
 

typedef    IWinInetFileStream *LPWININETFILESTREAM;
extern const IID IID_IWinInetFileStream;

<struct name="IWinInetFileStreamVtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            IWinInetFileStream * This,
              const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            IWinInetFileStream * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            IWinInetFileStream * This);
        
<fnptr name="SetHandleForUnlock" ret="HRESULT" convention="__stdcall">
 
            IWinInetFileStream * This,
             DWORD_PTR hWinInetLockHandle,
             DWORD_PTR dwReserved);
        
<fnptr name="SetDeleteFile" ret="HRESULT" convention="__stdcall">
 
            IWinInetFileStream * This,
             DWORD_PTR dwReserved);
        
        
    } IWinInetFileStreamVtbl;

<struct name="IWinInetFileStream">
<vptr>IWinInetFileStreamVtbl *</vptr>
</struct>

    

 
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0009_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0009_v0_0_s_ifspec;
 

typedef  IWindowForBindingUI *LPWINDOWFORBINDINGUI;
extern const IID IID_IWindowForBindingUI;
<struct name="IWindowForBindingUIVtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            IWindowForBindingUI * This,
             const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            IWindowForBindingUI * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            IWindowForBindingUI * This);
        
<fnptr name="GetWindow" ret="HRESULT" convention="__stdcall">
 
            IWindowForBindingUI * This,
             const GUID * const rguidReason,
             HWND *phwnd);
        
        
    } IWindowForBindingUIVtbl;

<struct name="IWindowForBindingUI">
<vptr>IWindowForBindingUIVtbl *</vptr>
</struct>

    

 
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0010_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0010_v0_0_s_ifspec;
 

typedef  ICodeInstall *LPCODEINSTALL;

typedef  
enum __MIDL_ICodeInstall_0001
    {	CIP_DISK_FULL	= 0,
	CIP_ACCESS_DENIED	= ( CIP_DISK_FULL + 1 ) ,
	CIP_NEWER_VERSION_EXISTS	= ( CIP_ACCESS_DENIED + 1 ) ,
	CIP_OLDER_VERSION_EXISTS	= ( CIP_NEWER_VERSION_EXISTS + 1 ) ,
	CIP_NAME_CONFLICT	= ( CIP_OLDER_VERSION_EXISTS + 1 ) ,
	CIP_TRUST_VERIFICATION_COMPONENT_MISSING	= ( CIP_NAME_CONFLICT + 1 ) ,
	CIP_EXE_SELF_REGISTERATION_TIMEOUT	= ( CIP_TRUST_VERIFICATION_COMPONENT_MISSING + 1 ) ,
	CIP_UNSAFE_TO_ABORT	= ( CIP_EXE_SELF_REGISTERATION_TIMEOUT + 1 ) ,
	CIP_NEED_REBOOT	= ( CIP_UNSAFE_TO_ABORT + 1 ) ,
	CIP_NEED_REBOOT_UI_PERMISSION	= ( CIP_NEED_REBOOT + 1 ) 
    } 	CIP_STATUS;
extern const IID IID_ICodeInstall;
<struct name="ICodeInstallVtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            ICodeInstall * This,
             const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            ICodeInstall * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            ICodeInstall * This);
        
<fnptr name="GetWindow" ret="HRESULT" convention="__stdcall">
 
            ICodeInstall * This,
             const GUID * const rguidReason,
             HWND *phwnd);
        
<fnptr name="OnCodeInstallProblem" ret="HRESULT" convention="__stdcall">
 
            ICodeInstall * This,
             ULONG ulStatusCode,
             LPCWSTR szDestination,
             LPCWSTR szSource,
             DWORD dwReserved);
        
        
    } ICodeInstallVtbl;

<struct name="ICodeInstall">
<vptr>ICodeInstallVtbl *</vptr>
</struct>

    
 
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0011_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0011_v0_0_s_ifspec;
 

typedef  
enum __MIDL_IUri_0001
    {	Uri_PROPERTY_ABSOLUTE_URI	= 0,
	Uri_PROPERTY_STRING_START	= Uri_PROPERTY_ABSOLUTE_URI,
	Uri_PROPERTY_AUTHORITY	= ( Uri_PROPERTY_STRING_START + 1 ) ,
	Uri_PROPERTY_DISPLAY_URI	= ( Uri_PROPERTY_AUTHORITY + 1 ) ,
	Uri_PROPERTY_DOMAIN	= ( Uri_PROPERTY_DISPLAY_URI + 1 ) ,
	Uri_PROPERTY_EXTENSION	= ( Uri_PROPERTY_DOMAIN + 1 ) ,
	Uri_PROPERTY_FRAGMENT	= ( Uri_PROPERTY_EXTENSION + 1 ) ,
	Uri_PROPERTY_HOST	= ( Uri_PROPERTY_FRAGMENT + 1 ) ,
	Uri_PROPERTY_PASSWORD	= ( Uri_PROPERTY_HOST + 1 ) ,
	Uri_PROPERTY_PATH	= ( Uri_PROPERTY_PASSWORD + 1 ) ,
	Uri_PROPERTY_PATH_AND_QUERY	= ( Uri_PROPERTY_PATH + 1 ) ,
	Uri_PROPERTY_QUERY	= ( Uri_PROPERTY_PATH_AND_QUERY + 1 ) ,
	Uri_PROPERTY_RAW_URI	= ( Uri_PROPERTY_QUERY + 1 ) ,
	Uri_PROPERTY_SCHEME_NAME	= ( Uri_PROPERTY_RAW_URI + 1 ) ,
	Uri_PROPERTY_USER_INFO	= ( Uri_PROPERTY_SCHEME_NAME + 1 ) ,
	Uri_PROPERTY_USER_NAME	= ( Uri_PROPERTY_USER_INFO + 1 ) ,
	Uri_PROPERTY_STRING_LAST	= Uri_PROPERTY_USER_NAME,
	Uri_PROPERTY_HOST_TYPE	= ( Uri_PROPERTY_STRING_LAST + 1 ) ,
	Uri_PROPERTY_DWORD_START	= Uri_PROPERTY_HOST_TYPE,
	Uri_PROPERTY_PORT	= ( Uri_PROPERTY_DWORD_START + 1 ) ,
	Uri_PROPERTY_SCHEME	= ( Uri_PROPERTY_PORT + 1 ) ,
	Uri_PROPERTY_ZONE	= ( Uri_PROPERTY_SCHEME + 1 ) ,
	Uri_PROPERTY_DWORD_LAST	= Uri_PROPERTY_ZONE
    } 	Uri_PROPERTY;

typedef  
enum __MIDL_IUri_0002
    {	Uri_HOST_UNKNOWN	= 0,
	Uri_HOST_DNS	= ( Uri_HOST_UNKNOWN + 1 ) ,
	Uri_HOST_IPV4	= ( Uri_HOST_DNS + 1 ) ,
	Uri_HOST_IPV6	= ( Uri_HOST_IPV4 + 1 ) ,
	Uri_HOST_IDN	= ( Uri_HOST_IPV6 + 1 ) 
    } 	Uri_HOST_TYPE;
extern const IID IID_IUri;
<struct name="IUriVtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            IUri * This,
              const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            IUri * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            IUri * This);
        
<fnptr name="GetPropertyBSTR" ret="HRESULT" convention="__stdcall">
 
            IUri * This,
             Uri_PROPERTY uriProp,
              BSTR *pbstrProperty,
             DWORD dwFlags);
        
<fnptr name="GetPropertyLength" ret="HRESULT" convention="__stdcall">
 
            IUri * This,
             Uri_PROPERTY uriProp,
              DWORD *pcchProperty,
             DWORD dwFlags);
        
<fnptr name="GetPropertyDWORD" ret="HRESULT" convention="__stdcall">
 
            IUri * This,
             Uri_PROPERTY uriProp,
              DWORD *pdwProperty,
             DWORD dwFlags);
        
<fnptr name="HasProperty" ret="HRESULT" convention="__stdcall">
 
            IUri * This,
             Uri_PROPERTY uriProp,
              BOOL *pfHasProperty);
        
<fnptr name="GetAbsoluteUri" ret="HRESULT" convention="__stdcall">
 
            IUri * This,
              BSTR *pbstrAbsoluteUri);
        
<fnptr name="GetAuthority" ret="HRESULT" convention="__stdcall">
 
            IUri * This,
              BSTR *pbstrAuthority);
        
<fnptr name="GetDisplayUri" ret="HRESULT" convention="__stdcall">
 
            IUri * This,
              BSTR *pbstrDisplayString);
        
<fnptr name="GetDomain" ret="HRESULT" convention="__stdcall">
 
            IUri * This,
              BSTR *pbstrDomain);
        
<fnptr name="GetExtension" ret="HRESULT" convention="__stdcall">
 
            IUri * This,
              BSTR *pbstrExtension);
        
<fnptr name="GetFragment" ret="HRESULT" convention="__stdcall">
 
            IUri * This,
              BSTR *pbstrFragment);
        
<fnptr name="GetHost" ret="HRESULT" convention="__stdcall">
 
            IUri * This,
              BSTR *pbstrHost);
        
<fnptr name="GetPassword" ret="HRESULT" convention="__stdcall">
 
            IUri * This,
              BSTR *pbstrPassword);
        
<fnptr name="GetPath" ret="HRESULT" convention="__stdcall">
 
            IUri * This,
              BSTR *pbstrPath);
        
<fnptr name="GetPathAndQuery" ret="HRESULT" convention="__stdcall">
 
            IUri * This,
              BSTR *pbstrPathAndQuery);
        
<fnptr name="GetQuery" ret="HRESULT" convention="__stdcall">
 
            IUri * This,
              BSTR *pbstrQuery);
        
<fnptr name="GetRawUri" ret="HRESULT" convention="__stdcall">
 
            IUri * This,
              BSTR *pbstrRawUri);
        
<fnptr name="GetSchemeName" ret="HRESULT" convention="__stdcall">
 
            IUri * This,
              BSTR *pbstrSchemeName);
        
<fnptr name="GetUserInfo" ret="HRESULT" convention="__stdcall">
 
            IUri * This,
              BSTR *pbstrUserInfo);
        
<fnptr name="GetUserNameA" ret="HRESULT" convention="__stdcall">
 
            IUri * This,
              BSTR *pbstrUserName);
        
<fnptr name="GetHostType" ret="HRESULT" convention="__stdcall">
 
            IUri * This,
              DWORD *pdwHostType);
        
<fnptr name="GetPort" ret="HRESULT" convention="__stdcall">
 
            IUri * This,
              DWORD *pdwPort);
        
<fnptr name="GetScheme" ret="HRESULT" convention="__stdcall">
 
            IUri * This,
              DWORD *pdwScheme);
        
<fnptr name="GetZone" ret="HRESULT" convention="__stdcall">
 
            IUri * This,
              DWORD *pdwZone);
        
<fnptr name="GetProperties" ret="HRESULT" convention="__stdcall">
 
            IUri * This,
              LPDWORD pdwFlags);
        
<fnptr name="IsEqual" ret="HRESULT" convention="__stdcall">
 
            IUri * This,
              IUri *pUri,
              BOOL *pfEqual);
        
        
    } IUriVtbl;

<struct name="IUri">
<vptr>IUriVtbl *</vptr>
</struct>

    

 

<function name="CreateUri" ret="extern HRESULT" convention="__stdcall">
<arg name="pwzURI">LPCWSTR</arg>
<arg name="dwFlags">DWORD</arg>
<arg name="dwReserved">DWORD_PTR</arg>
<arg name="ppURI">IUri**</arg>
</function>

<function name="CreateUriWithFragment" ret="extern HRESULT" convention="__stdcall">
<arg name="pwzURI">LPCWSTR</arg>
<arg name="pwzFragment">LPCWSTR</arg>
        
                  DWORD dwFlags,
                   DWORD_PTR dwReserved,   
                  IUri** ppURI);

<function name="CreateUriFromMultiByteString" ret="extern HRESULT" convention="__stdcall">
<arg name="pszANSIInputUri">LPCSTR   </arg>
<arg name="dwEncodingFlags">DWORD    </arg>
 
               DWORD     dwCodePage,
               DWORD     dwCreateFlags,
     DWORD_PTR dwReserved,   
          IUri**    ppUri);
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0012_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0012_v0_0_s_ifspec;
 
extern const IID IID_IUriContainer;
<struct name="IUriContainerVtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            IUriContainer * This,
             const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            IUriContainer * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            IUriContainer * This);
        
<fnptr name="GetIUri" ret="HRESULT" convention="__stdcall">
 
            IUriContainer * This,
             IUri **ppIUri);
        
        
    } IUriContainerVtbl;

<struct name="IUriContainer">
<vptr>IUriContainerVtbl *</vptr>
</struct>

    

 

extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0013_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0013_v0_0_s_ifspec;
 
extern const IID IID_IUriBuilder;
<struct name="IUriBuilderVtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            IUriBuilder * This,
             const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            IUriBuilder * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            IUriBuilder * This);
        
<fnptr name="CreateUriSimple" ret="HRESULT" convention="__stdcall">
 
            IUriBuilder * This,
             DWORD dwAllowEncodingPropertyMask,
             DWORD_PTR dwReserved,
             
              IUri **ppIUri);
        
<fnptr name="CreateUri" ret="HRESULT" convention="__stdcall">
 
            IUriBuilder * This,
             DWORD dwCreateFlags,
             DWORD dwAllowEncodingPropertyMask,
             DWORD_PTR dwReserved,
             
              IUri **ppIUri);
        
<fnptr name="CreateUriWithFlags" ret="HRESULT" convention="__stdcall">
 
            IUriBuilder * This,
             DWORD dwCreateFlags,
             DWORD dwUriBuilderFlags,
             DWORD dwAllowEncodingPropertyMask,
             DWORD_PTR dwReserved,
             
              IUri **ppIUri);
        
<fnptr name="GetIUri" ret="HRESULT" convention="__stdcall">
 
            IUriBuilder * This,
             
              IUri **ppIUri);
        
<fnptr name="SetIUri" ret="HRESULT" convention="__stdcall">
 
            IUriBuilder * This,
             
              IUri *pIUri);
        
<fnptr name="GetFragment" ret="HRESULT" convention="__stdcall">
 
            IUriBuilder * This,
             
              DWORD *pcchFragment,
             
              LPCWSTR *ppwzFragment);
        
<fnptr name="GetHost" ret="HRESULT" convention="__stdcall">
 
            IUriBuilder * This,
             
              DWORD *pcchHost,
             
              LPCWSTR *ppwzHost);
        
<fnptr name="GetPassword" ret="HRESULT" convention="__stdcall">
 
            IUriBuilder * This,
             
              DWORD *pcchPassword,
             
              LPCWSTR *ppwzPassword);
        
<fnptr name="GetPath" ret="HRESULT" convention="__stdcall">
 
            IUriBuilder * This,
             
              DWORD *pcchPath,
             
              LPCWSTR *ppwzPath);
        
<fnptr name="GetPort" ret="HRESULT" convention="__stdcall">
 
            IUriBuilder * This,
             
              BOOL *pfHasPort,
             
              DWORD *pdwPort);
        
<fnptr name="GetQuery" ret="HRESULT" convention="__stdcall">
 
            IUriBuilder * This,
             
              DWORD *pcchQuery,
             
              LPCWSTR *ppwzQuery);
        
<fnptr name="GetSchemeName" ret="HRESULT" convention="__stdcall">
 
            IUriBuilder * This,
             
              DWORD *pcchSchemeName,
             
              LPCWSTR *ppwzSchemeName);
        
<fnptr name="GetUserNameA" ret="HRESULT" convention="__stdcall">
 
            IUriBuilder * This,
             
              DWORD *pcchUserName,
             
              LPCWSTR *ppwzUserName);
        
<fnptr name="SetFragment" ret="HRESULT" convention="__stdcall">
 
            IUriBuilder * This,
             
              LPCWSTR pwzNewValue);
        
<fnptr name="SetHost" ret="HRESULT" convention="__stdcall">
 
            IUriBuilder * This,
             
              LPCWSTR pwzNewValue);
        
<fnptr name="SetPassword" ret="HRESULT" convention="__stdcall">
 
            IUriBuilder * This,
             
              LPCWSTR pwzNewValue);
        
<fnptr name="SetPath" ret="HRESULT" convention="__stdcall">
 
            IUriBuilder * This,
             
              LPCWSTR pwzNewValue);
        
<fnptr name="SetPortA" ret="HRESULT" convention="__stdcall">
 
            IUriBuilder * This,
             BOOL fHasPort,
             DWORD dwNewValue);
        
<fnptr name="SetQuery" ret="HRESULT" convention="__stdcall">
 
            IUriBuilder * This,
             
              LPCWSTR pwzNewValue);
        
<fnptr name="SetSchemeName" ret="HRESULT" convention="__stdcall">
 
            IUriBuilder * This,
             
              LPCWSTR pwzNewValue);
        
<fnptr name="SetUserName" ret="HRESULT" convention="__stdcall">
 
            IUriBuilder * This,
             
              LPCWSTR pwzNewValue);
        
<fnptr name="RemoveProperties" ret="HRESULT" convention="__stdcall">
 
            IUriBuilder * This,
             DWORD dwPropertyMask);
        
<fnptr name="HasBeenModified" ret="HRESULT" convention="__stdcall">
 
            IUriBuilder * This,
             
              BOOL *pfModified);
        
        
    } IUriBuilderVtbl;

<struct name="IUriBuilder">
<vptr>IUriBuilderVtbl *</vptr>
</struct>

    

 
extern const IID IID_IUriBuilderFactory;
<struct name="IUriBuilderFactoryVtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            IUriBuilderFactory * This,
             const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            IUriBuilderFactory * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            IUriBuilderFactory * This);
        
<fnptr name="CreateIUriBuilder" ret="HRESULT" convention="__stdcall">
 
            IUriBuilderFactory * This,
             
              DWORD dwFlags,
             
              DWORD_PTR dwReserved,
             
              IUriBuilder **ppIUriBuilder);
        
<fnptr name="CreateInitializedIUriBuilder" ret="HRESULT" convention="__stdcall">
 
            IUriBuilderFactory * This,
             
              DWORD dwFlags,
             
              DWORD_PTR dwReserved,
             
              IUriBuilder **ppIUriBuilder);
        
        
    } IUriBuilderFactoryVtbl;

<struct name="IUriBuilderFactory">
<vptr>IUriBuilderFactoryVtbl *</vptr>
</struct>

    
 

<function name="CreateIUriBuilder" ret="extern HRESULT" convention="__stdcall">

        IUri         *pIUri,
            DWORD         dwFlags,
            DWORD_PTR     dwReserved,
<arg name="ppIUriBuilder">IUriBuilder **</arg>
</function>
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0015_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0015_v0_0_s_ifspec;
 

typedef    IWinInetInfo *LPWININETINFO;
extern const IID IID_IWinInetInfo;
<struct name="IWinInetInfoVtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            IWinInetInfo * This,
              const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            IWinInetInfo * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            IWinInetInfo * This);
        
<fnptr name="QueryOption" ret="HRESULT" convention="__stdcall">
 
            IWinInetInfo * This,
             DWORD dwOption,
             LPVOID pBuffer,
             DWORD *pcbBuf);
        
        
    } IWinInetInfoVtbl;

<struct name="IWinInetInfo">
<vptr>IWinInetInfoVtbl *</vptr>
</struct>

    
<function name="IWinInetInfo_RemoteQueryOption_Proxy" ret="HRESULT" convention="__stdcall"> 
    IWinInetInfo * This,
     DWORD dwOption,
      BYTE *pBuffer,
      DWORD *pcbBuf);
<function name="IWinInetInfo_RemoteQueryOption_Stub" ret="void" convention="__stdcall">

    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0016_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0016_v0_0_s_ifspec;
 

typedef  IHttpSecurity *LPHTTPSECURITY;
extern const IID IID_IHttpSecurity;
<struct name="IHttpSecurityVtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            IHttpSecurity * This,
             const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            IHttpSecurity * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            IHttpSecurity * This);
        
<fnptr name="GetWindow" ret="HRESULT" convention="__stdcall">
 
            IHttpSecurity * This,
             const GUID * const rguidReason,
             HWND *phwnd);
        
<fnptr name="OnSecurityProblem" ret="HRESULT" convention="__stdcall">
 
            IHttpSecurity * This,
             DWORD dwProblem);
        
        
    } IHttpSecurityVtbl;

<struct name="IHttpSecurity">
<vptr>IHttpSecurityVtbl *</vptr>
</struct>

    
 
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0017_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0017_v0_0_s_ifspec;
 

typedef    IWinInetHttpInfo *LPWININETHTTPINFO;
extern const IID IID_IWinInetHttpInfo;
<struct name="IWinInetHttpInfoVtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            IWinInetHttpInfo * This,
              const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            IWinInetHttpInfo * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            IWinInetHttpInfo * This);
        
<fnptr name="QueryOption" ret="HRESULT" convention="__stdcall">
 
            IWinInetHttpInfo * This,
             DWORD dwOption,
             LPVOID pBuffer,
             DWORD *pcbBuf);
        
<fnptr name="QueryInfo" ret="HRESULT" convention="__stdcall">
 
            IWinInetHttpInfo * This,
             DWORD dwOption,
             LPVOID pBuffer,
             DWORD *pcbBuf,
             DWORD *pdwFlags,
             DWORD *pdwReserved);
        
        
    } IWinInetHttpInfoVtbl;

<struct name="IWinInetHttpInfo">
<vptr>IWinInetHttpInfoVtbl *</vptr>
</struct>

    

<function name="IWinInetHttpInfo_RemoteQueryInfo_Proxy" ret="HRESULT" convention="__stdcall"> 
    IWinInetHttpInfo * This,
     DWORD dwOption,
      BYTE *pBuffer,
      DWORD *pcbBuf,
      DWORD *pdwFlags,
      DWORD *pdwReserved);
<function name="IWinInetHttpInfo_RemoteQueryInfo_Stub" ret="void" convention="__stdcall">

    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0018_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0018_v0_0_s_ifspec;
 

typedef  IWinInetCacheHints *LPWININETCACHEHINTS;
extern const IID IID_IWinInetCacheHints;
<struct name="IWinInetCacheHintsVtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            IWinInetCacheHints * This,
             const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            IWinInetCacheHints * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            IWinInetCacheHints * This);
        
<fnptr name="SetCacheExtension" ret="HRESULT" convention="__stdcall">
 
            IWinInetCacheHints * This,
             LPCWSTR pwzExt,
             LPVOID pszCacheFile,
             DWORD *pcbCacheFile,
             DWORD *pdwWinInetError,
             DWORD *pdwReserved);
        
        
    } IWinInetCacheHintsVtbl;

<struct name="IWinInetCacheHints">
<vptr>IWinInetCacheHintsVtbl *</vptr>
</struct>

    

 
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0019_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0019_v0_0_s_ifspec;
 

typedef  IWinInetCacheHints2 *LPWININETCACHEHINTS2;
extern const IID IID_IWinInetCacheHints2;
<struct name="IWinInetCacheHints2Vtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            IWinInetCacheHints2 * This,
             const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            IWinInetCacheHints2 * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            IWinInetCacheHints2 * This);
        
<fnptr name="SetCacheExtension" ret="HRESULT" convention="__stdcall">
 
            IWinInetCacheHints2 * This,
             LPCWSTR pwzExt,
             LPVOID pszCacheFile,
             DWORD *pcbCacheFile,
             DWORD *pdwWinInetError,
             DWORD *pdwReserved);
        
<fnptr name="SetCacheExtension2" ret="HRESULT" convention="__stdcall">
 
            IWinInetCacheHints2 * This,
             LPCWSTR pwzExt,
             WCHAR *pwzCacheFile,
             DWORD *pcchCacheFile,
             DWORD *pdwWinInetError,
             DWORD *pdwReserved);
        
        
    } IWinInetCacheHints2Vtbl;

<struct name="IWinInetCacheHints2">
<vptr>IWinInetCacheHints2Vtbl *</vptr>
</struct>

    
 

extern const GUID SID_BindHost;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0020_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0020_v0_0_s_ifspec;
 

typedef    IBindHost *LPBINDHOST;
extern const IID IID_IBindHost;
<struct name="IBindHostVtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            IBindHost * This,
              const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            IBindHost * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            IBindHost * This);
        
<fnptr name="CreateMoniker" ret="HRESULT" convention="__stdcall">
 
            IBindHost * This,
              LPOLESTR szName,
              IBindCtx *pBC,
              IMoniker **ppmk,
             DWORD dwReserved);
        
<fnptr name="MonikerBindToStorage" ret="HRESULT" convention="__stdcall">
 
            IBindHost * This,
             IMoniker *pMk,
             IBindCtx *pBC,
             IBindStatusCallback *pBSC,
             const IID * const riid,
             void **ppvObj);
        
<fnptr name="MonikerBindToObject" ret="HRESULT" convention="__stdcall">
 
            IBindHost * This,
             IMoniker *pMk,
             IBindCtx *pBC,
             IBindStatusCallback *pBSC,
             const IID * const riid,
             void **ppvObj);
        
        
    } IBindHostVtbl;

<struct name="IBindHost">
<vptr>IBindHostVtbl *</vptr>
</struct>

    

<function name="IBindHost_RemoteMonikerBindToStorage_Proxy" ret="HRESULT" convention="__stdcall"> 
    IBindHost * This,
      IMoniker *pMk,
      IBindCtx *pBC,
      IBindStatusCallback *pBSC,
      const IID * const riid,
      IUnknown **ppvObj);
<function name="IBindHost_RemoteMonikerBindToStorage_Stub" ret="void" convention="__stdcall">

    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
<function name="IBindHost_RemoteMonikerBindToObject_Proxy" ret="HRESULT" convention="__stdcall"> 
    IBindHost * This,
      IMoniker *pMk,
      IBindCtx *pBC,
      IBindStatusCallback *pBSC,
      const IID * const riid,
      IUnknown **ppvObj);
<function name="IBindHost_RemoteMonikerBindToObject_Stub" ret="void" convention="__stdcall">

    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 
                                                                                                           
                                                                                                           
                                                                                                           
struct IBindStatusCallback;                                                                                
<function name="HlinkSimpleNavigateToString" ret="extern HRESULT" convention="__stdcall">
                                                                        
     LPCWSTR szTarget,         
     LPCWSTR szLocation,       
     LPCWSTR szTargetFrameName,
     IUnknown *pUnk,           
     IBindCtx *pbc,            
     IBindStatusCallback *,                                                                      
     DWORD grfHLNF,            
     DWORD dwReserved          
);                                                                                                         
                                                                                                           
<function name="HlinkSimpleNavigateToMoniker" ret="extern HRESULT" convention="__stdcall">
                                                                       
     IMoniker *pmkTarget,      
     LPCWSTR szLocation,       
     LPCWSTR szTargetFrameName,
     IUnknown *pUnk,           
     IBindCtx *pbc,            
     IBindStatusCallback *,                                                                      
     DWORD grfHLNF,            
     DWORD dwReserved          
);                                                                                                         
                                                                                                           
<function name="URLOpenStreamA" ret="extern HRESULT" convention="__stdcall">
LPUNKNOWN,LPCSTR,DWORD,LPBINDSTATUSCALLBACK);                                        
<function name="URLOpenStreamW" ret="extern HRESULT" convention="__stdcall">
LPUNKNOWN,LPCWSTR,DWORD,LPBINDSTATUSCALLBACK);                                       
<function name="URLOpenPullStreamA" ret="extern HRESULT" convention="__stdcall">
LPUNKNOWN,LPCSTR,DWORD,LPBINDSTATUSCALLBACK);                                    
<function name="URLOpenPullStreamW" ret="extern HRESULT" convention="__stdcall">
LPUNKNOWN,LPCWSTR,DWORD,LPBINDSTATUSCALLBACK);                                   
<function name="URLDownloadToFileA" ret="extern HRESULT" convention="__stdcall">
LPUNKNOWN,LPCSTR,LPCSTR,DWORD,LPBINDSTATUSCALLBACK);                             
<function name="URLDownloadToFileW" ret="extern HRESULT" convention="__stdcall">
LPUNKNOWN,LPCWSTR,LPCWSTR,DWORD,LPBINDSTATUSCALLBACK);                           
<function name="URLDownloadToCacheFileA" ret="extern HRESULT" convention="__stdcall">
 LPUNKNOWN,  LPCSTR,   LPSTR,  DWORD cchFileName, DWORD,  LPBINDSTATUSCALLBACK);                   
<function name="URLDownloadToCacheFileW" ret="extern HRESULT" convention="__stdcall">
 LPUNKNOWN,  LPCWSTR,  LPWSTR, DWORD cchFileName, DWORD,  LPBINDSTATUSCALLBACK);                 
<function name="URLOpenBlockingStreamA" ret="extern HRESULT" convention="__stdcall">
LPUNKNOWN,LPCSTR,LPSTREAM*,DWORD,LPBINDSTATUSCALLBACK);                      
<function name="URLOpenBlockingStreamW" ret="extern HRESULT" convention="__stdcall">
LPUNKNOWN,LPCWSTR,LPSTREAM*,DWORD,LPBINDSTATUSCALLBACK);                     
                                                                                                           

                                                                                                           
                                                                                                           
<function name="HlinkGoBack" ret="extern HRESULT" convention="__stdcall">
IUnknown *pUnk);                                                                        
<function name="HlinkGoForward" ret="extern HRESULT" convention="__stdcall">
IUnknown *pUnk);                                                                     
<function name="HlinkNavigateString" ret="extern HRESULT" convention="__stdcall">
IUnknown *pUnk, LPCWSTR szTarget);                                              
<function name="HlinkNavigateMoniker" ret="extern HRESULT" convention="__stdcall">
IUnknown *pUnk, IMoniker *pmkTarget);                                          
                                                                                                           

extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0021_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0021_v0_0_s_ifspec;
 

typedef  IInternet *LPIINTERNET;
extern const IID IID_IInternet;
<struct name="IInternetVtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            IInternet * This,
             const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            IInternet * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            IInternet * This);
        
        
    } IInternetVtbl;

<struct name="IInternet">
<vptr>IInternetVtbl *</vptr>
</struct>

    
 
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0022_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0022_v0_0_s_ifspec;
 

typedef  IInternetBindInfo *LPIINTERNETBINDINFO;

typedef 
enum tagBINDSTRING
    {	BINDSTRING_HEADERS	= 1,
	BINDSTRING_ACCEPT_MIMES	= ( BINDSTRING_HEADERS + 1 ) ,
	BINDSTRING_EXTRA_URL	= ( BINDSTRING_ACCEPT_MIMES + 1 ) ,
	BINDSTRING_LANGUAGE	= ( BINDSTRING_EXTRA_URL + 1 ) ,
	BINDSTRING_USERNAME	= ( BINDSTRING_LANGUAGE + 1 ) ,
	BINDSTRING_PASSWORD	= ( BINDSTRING_USERNAME + 1 ) ,
	BINDSTRING_UA_PIXELS	= ( BINDSTRING_PASSWORD + 1 ) ,
	BINDSTRING_UA_COLOR	= ( BINDSTRING_UA_PIXELS + 1 ) ,
	BINDSTRING_OS	= ( BINDSTRING_UA_COLOR + 1 ) ,
	BINDSTRING_USER_AGENT	= ( BINDSTRING_OS + 1 ) ,
	BINDSTRING_ACCEPT_ENCODINGS	= ( BINDSTRING_USER_AGENT + 1 ) ,
	BINDSTRING_POST_COOKIE	= ( BINDSTRING_ACCEPT_ENCODINGS + 1 ) ,
	BINDSTRING_POST_DATA_MIME	= ( BINDSTRING_POST_COOKIE + 1 ) ,
	BINDSTRING_URL	= ( BINDSTRING_POST_DATA_MIME + 1 ) ,
	BINDSTRING_IID	= ( BINDSTRING_URL + 1 ) ,
	BINDSTRING_FLAG_BIND_TO_OBJECT	= ( BINDSTRING_IID + 1 ) ,
	BINDSTRING_PTR_BIND_CONTEXT	= ( BINDSTRING_FLAG_BIND_TO_OBJECT + 1 ) 
    } 	BINDSTRING;
extern const IID IID_IInternetBindInfo;
<struct name="IInternetBindInfoVtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            IInternetBindInfo * This,
             const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            IInternetBindInfo * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            IInternetBindInfo * This);
        
<fnptr name="GetBindInfo" ret="HRESULT" convention="__stdcall">
 
            IInternetBindInfo * This,
             DWORD *grfBINDF,
             BINDINFO *pbindinfo);
        
<fnptr name="GetBindString" ret="HRESULT" convention="__stdcall">
 
            IInternetBindInfo * This,
             ULONG ulStringType,
             LPOLESTR *ppwzStr,
             ULONG cEl,
             ULONG *pcElFetched);
        
        
    } IInternetBindInfoVtbl;

<struct name="IInternetBindInfo">
<vptr>IInternetBindInfoVtbl *</vptr>
</struct>

    
 
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0023_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0023_v0_0_s_ifspec;
 

typedef  IInternetProtocolRoot *LPIINTERNETPROTOCOLROOT;

typedef 
enum _tagPI_FLAGS
    {	PI_PARSE_URL	= 0x1,
	PI_FILTER_MODE	= 0x2,
	PI_FORCE_ASYNC	= 0x4,
	PI_USE_WORKERTHREAD	= 0x8,
	PI_MIMEVERIFICATION	= 0x10,
	PI_CLSIDLOOKUP	= 0x20,
	PI_DATAPROGRESS	= 0x40,
	PI_SYNCHRONOUS	= 0x80,
	PI_APARTMENTTHREADED	= 0x100,
	PI_CLASSINSTALL	= 0x200,
	PI_PASSONBINDCTX	= 0x2000,
	PI_NOMIMEHANDLER	= 0x8000,
	PI_LOADAPPDIRECT	= 0x4000,
	PD_FORCE_SWITCH	= 0x10000,
	PI_PREFERDEFAULTHANDLER	= 0x20000
    } 	PI_FLAGS;

<struct name="_tagPROTOCOLDATA">
<field name="grfFlags">DWORD</field>
<field name="dwState">DWORD</field>
<field name="pData">LPVOID</field>
<field name="cbData">ULONG</field>
    } 	PROTOCOLDATA;

<struct name="_tagStartParam">
<field name="iid">IID</field>
    IBindCtx *pIBindCtx;
    IUnknown *pItf;
    } 	StartParam;
extern const IID IID_IInternetProtocolRoot;
<struct name="IInternetProtocolRootVtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            IInternetProtocolRoot * This,
             const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            IInternetProtocolRoot * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            IInternetProtocolRoot * This);
        
<fnptr name="Start" ret="HRESULT" convention="__stdcall">
 
            IInternetProtocolRoot * This,
             LPCWSTR szUrl,
             IInternetProtocolSink *pOIProtSink,
             IInternetBindInfo *pOIBindInfo,
             DWORD grfPI,
             HANDLE_PTR dwReserved);
        
<fnptr name="Continue" ret="HRESULT" convention="__stdcall">
 
            IInternetProtocolRoot * This,
             PROTOCOLDATA *pProtocolData);
        
<fnptr name="Abort" ret="HRESULT" convention="__stdcall">
 
            IInternetProtocolRoot * This,
             HRESULT hrReason,
             DWORD dwOptions);
        
<fnptr name="Terminate" ret="HRESULT" convention="__stdcall">
 
            IInternetProtocolRoot * This,
             DWORD dwOptions);
        
<fnptr name="Suspend" ret="HRESULT" convention="__stdcall">
 
            IInternetProtocolRoot * This);
        
<fnptr name="Resume" ret="HRESULT" convention="__stdcall">
 
            IInternetProtocolRoot * This);
        
        
    } IInternetProtocolRootVtbl;

<struct name="IInternetProtocolRoot">
<vptr>IInternetProtocolRootVtbl *</vptr>
</struct>

    

 
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0024_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0024_v0_0_s_ifspec;
 

typedef  IInternetProtocol *LPIINTERNETPROTOCOL;
extern const IID IID_IInternetProtocol;
<struct name="IInternetProtocolVtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            IInternetProtocol * This,
             const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            IInternetProtocol * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            IInternetProtocol * This);
        
<fnptr name="Start" ret="HRESULT" convention="__stdcall">
 
            IInternetProtocol * This,
             LPCWSTR szUrl,
             IInternetProtocolSink *pOIProtSink,
             IInternetBindInfo *pOIBindInfo,
             DWORD grfPI,
             HANDLE_PTR dwReserved);
        
<fnptr name="Continue" ret="HRESULT" convention="__stdcall">
 
            IInternetProtocol * This,
             PROTOCOLDATA *pProtocolData);
        
<fnptr name="Abort" ret="HRESULT" convention="__stdcall">
 
            IInternetProtocol * This,
             HRESULT hrReason,
             DWORD dwOptions);
        
<fnptr name="Terminate" ret="HRESULT" convention="__stdcall">
 
            IInternetProtocol * This,
             DWORD dwOptions);
        
<fnptr name="Suspend" ret="HRESULT" convention="__stdcall">
 
            IInternetProtocol * This);
        
<fnptr name="Resume" ret="HRESULT" convention="__stdcall">
 
            IInternetProtocol * This);
        
<fnptr name="Read" ret="HRESULT" convention="__stdcall">
 
            IInternetProtocol * This,
             void *pv,
             ULONG cb,
             ULONG *pcbRead);
        
<fnptr name="Seek" ret="HRESULT" convention="__stdcall">
 
            IInternetProtocol * This,
             LARGE_INTEGER dlibMove,
             DWORD dwOrigin,
             ULARGE_INTEGER *plibNewPosition);
        
<fnptr name="LockRequest" ret="HRESULT" convention="__stdcall">
 
            IInternetProtocol * This,
             DWORD dwOptions);
        
<fnptr name="UnlockRequest" ret="HRESULT" convention="__stdcall">
 
            IInternetProtocol * This);
        
        
    } IInternetProtocolVtbl;

<struct name="IInternetProtocol">
<vptr>IInternetProtocolVtbl *</vptr>
</struct>

    

 
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0025_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0025_v0_0_s_ifspec;
 
extern const IID IID_IInternetProtocolEx;
<struct name="IInternetProtocolExVtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            IInternetProtocolEx * This,
             const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            IInternetProtocolEx * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            IInternetProtocolEx * This);
        
<fnptr name="Start" ret="HRESULT" convention="__stdcall">
 
            IInternetProtocolEx * This,
             LPCWSTR szUrl,
             IInternetProtocolSink *pOIProtSink,
             IInternetBindInfo *pOIBindInfo,
             DWORD grfPI,
             HANDLE_PTR dwReserved);
        
<fnptr name="Continue" ret="HRESULT" convention="__stdcall">
 
            IInternetProtocolEx * This,
             PROTOCOLDATA *pProtocolData);
        
<fnptr name="Abort" ret="HRESULT" convention="__stdcall">
 
            IInternetProtocolEx * This,
             HRESULT hrReason,
             DWORD dwOptions);
        
<fnptr name="Terminate" ret="HRESULT" convention="__stdcall">
 
            IInternetProtocolEx * This,
             DWORD dwOptions);
        
<fnptr name="Suspend" ret="HRESULT" convention="__stdcall">
 
            IInternetProtocolEx * This);
        
<fnptr name="Resume" ret="HRESULT" convention="__stdcall">
 
            IInternetProtocolEx * This);
        
<fnptr name="Read" ret="HRESULT" convention="__stdcall">
 
            IInternetProtocolEx * This,
             void *pv,
             ULONG cb,
             ULONG *pcbRead);
        
<fnptr name="Seek" ret="HRESULT" convention="__stdcall">
 
            IInternetProtocolEx * This,
             LARGE_INTEGER dlibMove,
             DWORD dwOrigin,
             ULARGE_INTEGER *plibNewPosition);
        
<fnptr name="LockRequest" ret="HRESULT" convention="__stdcall">
 
            IInternetProtocolEx * This,
             DWORD dwOptions);
        
<fnptr name="UnlockRequest" ret="HRESULT" convention="__stdcall">
 
            IInternetProtocolEx * This);
        
<fnptr name="StartEx" ret="HRESULT" convention="__stdcall">
 
            IInternetProtocolEx * This,
             IUri *pUri,
             IInternetProtocolSink *pOIProtSink,
             IInternetBindInfo *pOIBindInfo,
             DWORD grfPI,
             HANDLE_PTR dwReserved);
        
        
    } IInternetProtocolExVtbl;

<struct name="IInternetProtocolEx">
<vptr>IInternetProtocolExVtbl *</vptr>
</struct>

    
 

extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0026_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0026_v0_0_s_ifspec;
 

typedef  IInternetProtocolSink *LPIINTERNETPROTOCOLSINK;
extern const IID IID_IInternetProtocolSink;
<struct name="IInternetProtocolSinkVtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            IInternetProtocolSink * This,
             const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            IInternetProtocolSink * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            IInternetProtocolSink * This);
        
<fnptr name="Switch" ret="HRESULT" convention="__stdcall">
 
            IInternetProtocolSink * This,
             PROTOCOLDATA *pProtocolData);
        
<fnptr name="ReportProgress" ret="HRESULT" convention="__stdcall">
 
            IInternetProtocolSink * This,
             ULONG ulStatusCode,
             LPCWSTR szStatusText);
        
<fnptr name="ReportData" ret="HRESULT" convention="__stdcall">
 
            IInternetProtocolSink * This,
             DWORD grfBSCF,
             ULONG ulProgress,
             ULONG ulProgressMax);
        
<fnptr name="ReportResult" ret="HRESULT" convention="__stdcall">
 
            IInternetProtocolSink * This,
             HRESULT hrResult,
             DWORD dwError,
             LPCWSTR szResult);
        
        
    } IInternetProtocolSinkVtbl;

<struct name="IInternetProtocolSink">
<vptr>IInternetProtocolSinkVtbl *</vptr>
</struct>

    
 
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0027_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0027_v0_0_s_ifspec;
 

typedef  IInternetProtocolSinkStackable *LPIINTERNETPROTOCOLSINKStackable;
extern const IID IID_IInternetProtocolSinkStackable;
<struct name="IInternetProtocolSinkStackableVtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            IInternetProtocolSinkStackable * This,
             const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            IInternetProtocolSinkStackable * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            IInternetProtocolSinkStackable * This);
        
<fnptr name="SwitchSink" ret="HRESULT" convention="__stdcall">
 
            IInternetProtocolSinkStackable * This,
             IInternetProtocolSink *pOIProtSink);
        
<fnptr name="CommitSwitch" ret="HRESULT" convention="__stdcall">
 
            IInternetProtocolSinkStackable * This);
        
<fnptr name="RollbackSwitch" ret="HRESULT" convention="__stdcall">
 
            IInternetProtocolSinkStackable * This);
        
        
    } IInternetProtocolSinkStackableVtbl;

<struct name="IInternetProtocolSinkStackable">
<vptr>IInternetProtocolSinkStackableVtbl *</vptr>
</struct>

    
 
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0028_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0028_v0_0_s_ifspec;
 

typedef  IInternetSession *LPIINTERNETSESSION;

typedef 
enum _tagOIBDG_FLAGS
    {	OIBDG_APARTMENTTHREADED	= 0x100,
	OIBDG_DATAONLY	= 0x1000
    } 	OIBDG_FLAGS;
extern const IID IID_IInternetSession;
<struct name="IInternetSessionVtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            IInternetSession * This,
             const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            IInternetSession * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            IInternetSession * This);
        
<fnptr name="RegisterNameSpace" ret="HRESULT" convention="__stdcall">
 
            IInternetSession * This,
             IClassFactory *pCF,
             const IID * const rclsid,
             LPCWSTR pwzProtocol,
             ULONG cPatterns,
             const LPCWSTR *ppwzPatterns,
             DWORD dwReserved);
        
<fnptr name="UnregisterNameSpace" ret="HRESULT" convention="__stdcall">
 
            IInternetSession * This,
             IClassFactory *pCF,
             LPCWSTR pszProtocol);
        
<fnptr name="RegisterMimeFilter" ret="HRESULT" convention="__stdcall">
 
            IInternetSession * This,
             IClassFactory *pCF,
             const IID * const rclsid,
             LPCWSTR pwzType);
        
<fnptr name="UnregisterMimeFilter" ret="HRESULT" convention="__stdcall">
 
            IInternetSession * This,
             IClassFactory *pCF,
             LPCWSTR pwzType);
        
<fnptr name="CreateBinding" ret="HRESULT" convention="__stdcall">
 
            IInternetSession * This,
             LPBC pBC,
             LPCWSTR szUrl,
             IUnknown *pUnkOuter,
             IUnknown **ppUnk,
             IInternetProtocol **ppOInetProt,
             DWORD dwOption);
        
<fnptr name="SetSessionOption" ret="HRESULT" convention="__stdcall">
 
            IInternetSession * This,
             DWORD dwOption,
             LPVOID pBuffer,
             DWORD dwBufferLength,
             DWORD dwReserved);
        
<fnptr name="GetSessionOption" ret="HRESULT" convention="__stdcall">
 
            IInternetSession * This,
             DWORD dwOption,
             LPVOID pBuffer,
             DWORD *pdwBufferLength,
             DWORD dwReserved);
        
        
    } IInternetSessionVtbl;

<struct name="IInternetSession">
<vptr>IInternetSessionVtbl *</vptr>
</struct>

    
 
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0029_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0029_v0_0_s_ifspec;
 

typedef  IInternetThreadSwitch *LPIINTERNETTHREADSWITCH;
extern const IID IID_IInternetThreadSwitch;
<struct name="IInternetThreadSwitchVtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            IInternetThreadSwitch * This,
             const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            IInternetThreadSwitch * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            IInternetThreadSwitch * This);
        
<fnptr name="Prepare" ret="HRESULT" convention="__stdcall">
 
            IInternetThreadSwitch * This);
        
<fnptr name="Continue" ret="HRESULT" convention="__stdcall">
 
            IInternetThreadSwitch * This);
        
        
    } IInternetThreadSwitchVtbl;

<struct name="IInternetThreadSwitch">
<vptr>IInternetThreadSwitchVtbl *</vptr>
</struct>

    
 
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0030_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0030_v0_0_s_ifspec;
 

typedef  IInternetPriority *LPIINTERNETPRIORITY;
extern const IID IID_IInternetPriority;
<struct name="IInternetPriorityVtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            IInternetPriority * This,
             const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            IInternetPriority * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            IInternetPriority * This);
        
<fnptr name="SetPriority" ret="HRESULT" convention="__stdcall">
 
            IInternetPriority * This,
             LONG nPriority);
        
<fnptr name="GetPriority" ret="HRESULT" convention="__stdcall">
 
            IInternetPriority * This,
             LONG *pnPriority);
        
        
    } IInternetPriorityVtbl;

<struct name="IInternetPriority">
<vptr>IInternetPriorityVtbl *</vptr>
</struct>

    
 
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0031_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0031_v0_0_s_ifspec;
 

typedef  IInternetProtocolInfo *LPIINTERNETPROTOCOLINFO;

typedef 
enum _tagPARSEACTION
    {	PARSE_CANONICALIZE	= 1,
	PARSE_FRIENDLY	= ( PARSE_CANONICALIZE + 1 ) ,
	PARSE_SECURITY_URL	= ( PARSE_FRIENDLY + 1 ) ,
	PARSE_ROOTDOCUMENT	= ( PARSE_SECURITY_URL + 1 ) ,
	PARSE_DOCUMENT	= ( PARSE_ROOTDOCUMENT + 1 ) ,
	PARSE_ANCHOR	= ( PARSE_DOCUMENT + 1 ) ,
	PARSE_ENCODE	= ( PARSE_ANCHOR + 1 ) ,
	PARSE_DECODE	= ( PARSE_ENCODE + 1 ) ,
	PARSE_PATH_FROM_URL	= ( PARSE_DECODE + 1 ) ,
	PARSE_URL_FROM_PATH	= ( PARSE_PATH_FROM_URL + 1 ) ,
	PARSE_MIME	= ( PARSE_URL_FROM_PATH + 1 ) ,
	PARSE_SERVER	= ( PARSE_MIME + 1 ) ,
	PARSE_SCHEMA	= ( PARSE_SERVER + 1 ) ,
	PARSE_SITE	= ( PARSE_SCHEMA + 1 ) ,
	PARSE_DOMAIN	= ( PARSE_SITE + 1 ) ,
	PARSE_LOCATION	= ( PARSE_DOMAIN + 1 ) ,
	PARSE_SECURITY_DOMAIN	= ( PARSE_LOCATION + 1 ) ,
	PARSE_ESCAPE	= ( PARSE_SECURITY_DOMAIN + 1 ) ,
	PARSE_UNESCAPE	= ( PARSE_ESCAPE + 1 ) 
    } 	PARSEACTION;

typedef 
enum _tagPSUACTION
    {	PSU_DEFAULT	= 1,
	PSU_SECURITY_URL_ONLY	= ( PSU_DEFAULT + 1 ) 
    } 	PSUACTION;

typedef 
enum _tagQUERYOPTION
    {	QUERY_EXPIRATION_DATE	= 1,
	QUERY_TIME_OF_LAST_CHANGE	= ( QUERY_EXPIRATION_DATE + 1 ) ,
	QUERY_CONTENT_ENCODING	= ( QUERY_TIME_OF_LAST_CHANGE + 1 ) ,
	QUERY_CONTENT_TYPE	= ( QUERY_CONTENT_ENCODING + 1 ) ,
	QUERY_REFRESH	= ( QUERY_CONTENT_TYPE + 1 ) ,
	QUERY_RECOMBINE	= ( QUERY_REFRESH + 1 ) ,
	QUERY_CAN_NAVIGATE	= ( QUERY_RECOMBINE + 1 ) ,
	QUERY_USES_NETWORK	= ( QUERY_CAN_NAVIGATE + 1 ) ,
	QUERY_IS_CACHED	= ( QUERY_USES_NETWORK + 1 ) ,
	QUERY_IS_INSTALLEDENTRY	= ( QUERY_IS_CACHED + 1 ) ,
	QUERY_IS_CACHED_OR_MAPPED	= ( QUERY_IS_INSTALLEDENTRY + 1 ) ,
	QUERY_USES_CACHE	= ( QUERY_IS_CACHED_OR_MAPPED + 1 ) ,
	QUERY_IS_SECURE	= ( QUERY_USES_CACHE + 1 ) ,
	QUERY_IS_SAFE	= ( QUERY_IS_SECURE + 1 ) ,
	QUERY_USES_HISTORYFOLDER	= ( QUERY_IS_SAFE + 1 ) 
    } 	QUERYOPTION;
extern const IID IID_IInternetProtocolInfo;
<struct name="IInternetProtocolInfoVtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            IInternetProtocolInfo * This,
             const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            IInternetProtocolInfo * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            IInternetProtocolInfo * This);
        
<fnptr name="ParseUrl" ret="HRESULT" convention="__stdcall">
 
            IInternetProtocolInfo * This,
             LPCWSTR pwzUrl,
             PARSEACTION ParseAction,
             DWORD dwParseFlags,
             LPWSTR pwzResult,
             DWORD cchResult,
             DWORD *pcchResult,
             DWORD dwReserved);
        
<fnptr name="CombineUrl" ret="HRESULT" convention="__stdcall">
 
            IInternetProtocolInfo * This,
             LPCWSTR pwzBaseUrl,
             LPCWSTR pwzRelativeUrl,
             DWORD dwCombineFlags,
             LPWSTR pwzResult,
             DWORD cchResult,
             DWORD *pcchResult,
             DWORD dwReserved);
        
<fnptr name="CompareUrl" ret="HRESULT" convention="__stdcall">
 
            IInternetProtocolInfo * This,
             LPCWSTR pwzUrl1,
             LPCWSTR pwzUrl2,
             DWORD dwCompareFlags);
        
<fnptr name="QueryInfo" ret="HRESULT" convention="__stdcall">
 
            IInternetProtocolInfo * This,
             LPCWSTR pwzUrl,
             QUERYOPTION OueryOption,
             DWORD dwQueryFlags,
             LPVOID pBuffer,
             DWORD cbBuffer,
             DWORD *pcbBuf,
             DWORD dwReserved);
        
        
    } IInternetProtocolInfoVtbl;

<struct name="IInternetProtocolInfo">
<vptr>IInternetProtocolInfoVtbl *</vptr>
</struct>

    
 

<function name="CoInternetParseUrl" ret="extern HRESULT" convention="__stdcall">
                              
                            LPCWSTR      pwzUrl,        
                            PARSEACTION  ParseAction,   
                            DWORD        dwFlags,       
     LPWSTR       pszResult,     
                            DWORD        cchResult,     
                       DWORD       *pcchResult,    
                            DWORD        dwReserved     
    );                                                  

<function name="CoInternetParseIUri" ret="extern HRESULT" convention="__stdcall">
                             
                        IUri        *pIUri,         
                            PARSEACTION  ParseAction,   
                            DWORD        dwFlags,       
     LPWSTR       pwzResult,     
                            DWORD        cchResult,     
                       DWORD       *pcchResult,    
                            DWORD_PTR    dwReserved     
    );                                                  

<function name="CoInternetCombineUrl" ret="extern HRESULT" convention="__stdcall">
                                             
                                               LPCWSTR   pwzBaseUrl,     
                                               LPCWSTR   pwzRelativeUrl, 
                                               DWORD     dwCombineFlags, 
     LPWSTR    pszResult,      
                                               DWORD     cchResult,      
                                      DWORD     *pcchResult,    
                                     DWORD     dwReserved      
    );                                                                   

<function name="CoInternetCombineUrlEx" ret="extern HRESULT" convention="__stdcall">
              
        IUri       *pBaseUri,       
        LPCWSTR     pwzRelativeUrl, 
                DWORD       dwCombineFlags, 
     IUri      **ppCombinedUri,  
        DWORD_PTR   dwReserved      
    );                                      
<function name="CoInternetCombineIUri" ret="extern HRESULT" convention="__stdcall">
              
            IUri       *pBaseUri,       
            IUri       *pRelativeUri,   
                DWORD       dwCombineFlags, 
     IUri      **ppCombinedUri,  
        DWORD_PTR   dwReserved      
    );                                      

<function name="CoInternetCompareUrl" ret="extern HRESULT" convention="__stdcall">
             
    LPCWSTR pwzUrl1,                     
    LPCWSTR pwzUrl2,                     
    DWORD dwFlags                        
    );                                   
<function name="CoInternetGetProtocolFlags" ret="extern HRESULT" convention="__stdcall">
       
    LPCWSTR     pwzUrl,                  
    DWORD      *pdwFlags,                
    DWORD       dwReserved               
    );                                   
<function name="CoInternetQueryInfo" ret="extern HRESULT" convention="__stdcall">
              
    LPCWSTR     pwzUrl,                  
    QUERYOPTION QueryOptions,            
    DWORD       dwQueryFlags,            
    LPVOID      pvBuffer,                
    DWORD       cbBuffer,                
    DWORD      *pcbBuffer,               
    DWORD       dwReserved               
    );                                   
<function name="CoInternetGetSession" ret="extern HRESULT" convention="__stdcall">
             
    DWORD       dwSessionMode,           
     IInternetSession **ppIInternetSession,
    DWORD       dwReserved               
    );                                   
<function name="CoInternetGetSecurityUrl" ret="extern HRESULT" convention="__stdcall">
         
    LPCWSTR pwszUrl,                     
     LPWSTR *ppwszSecUrl,     
     PSUACTION   psuAction,          
     DWORD dwReserved          
    );                                   
<function name="AsyncInstallDistributionUnit" ret="extern HRESULT" convention="__stdcall">
     
    LPCWSTR szDistUnit,                  
    LPCWSTR szTYPE,                      
    LPCWSTR szExt,                       
    DWORD dwFileVersionMS,               
    DWORD dwFileVersionLS,               
    LPCWSTR szURL,                       
    IBindCtx *pbc,                       
    LPVOID   pvReserved,                 
    DWORD   flags                        
    );                                   

<function name="CoInternetGetSecurityUrlEx" ret="extern HRESULT" convention="__stdcall">
       
     IUri         *pUri,             
     IUri **ppSecUri,         
    PSUACTION          psuAction,        
      DWORD_PTR dwReserved 
    
    );                                   

typedef 
enum _tagINTERNETFEATURELIST
    {	FEATURE_OBJECT_CACHING	= 0,
	FEATURE_ZONE_ELEVATION	= ( FEATURE_OBJECT_CACHING + 1 ) ,
	FEATURE_MIME_HANDLING	= ( FEATURE_ZONE_ELEVATION + 1 ) ,
	FEATURE_MIME_SNIFFING	= ( FEATURE_MIME_HANDLING + 1 ) ,
	FEATURE_WINDOW_RESTRICTIONS	= ( FEATURE_MIME_SNIFFING + 1 ) ,
	FEATURE_WEBOC_POPUPMANAGEMENT	= ( FEATURE_WINDOW_RESTRICTIONS + 1 ) ,
	FEATURE_BEHAVIORS	= ( FEATURE_WEBOC_POPUPMANAGEMENT + 1 ) ,
	FEATURE_DISABLE_MK_PROTOCOL	= ( FEATURE_BEHAVIORS + 1 ) ,
	FEATURE_LOCALMACHINE_LOCKDOWN	= ( FEATURE_DISABLE_MK_PROTOCOL + 1 ) ,
	FEATURE_SECURITYBAND	= ( FEATURE_LOCALMACHINE_LOCKDOWN + 1 ) ,
	FEATURE_RESTRICT_ACTIVEXINSTALL	= ( FEATURE_SECURITYBAND + 1 ) ,
	FEATURE_VALIDATE_NAVIGATE_URL	= ( FEATURE_RESTRICT_ACTIVEXINSTALL + 1 ) ,
	FEATURE_RESTRICT_FILEDOWNLOAD	= ( FEATURE_VALIDATE_NAVIGATE_URL + 1 ) ,
	FEATURE_ADDON_MANAGEMENT	= ( FEATURE_RESTRICT_FILEDOWNLOAD + 1 ) ,
	FEATURE_PROTOCOL_LOCKDOWN	= ( FEATURE_ADDON_MANAGEMENT + 1 ) ,
	FEATURE_HTTP_USERNAME_PASSWORD_DISABLE	= ( FEATURE_PROTOCOL_LOCKDOWN + 1 ) ,
	FEATURE_SAFE_BINDTOOBJECT	= ( FEATURE_HTTP_USERNAME_PASSWORD_DISABLE + 1 ) ,
	FEATURE_UNC_SAVEDFILECHECK	= ( FEATURE_SAFE_BINDTOOBJECT + 1 ) ,
	FEATURE_GET_URL_DOM_FILEPATH_UNENCODED	= ( FEATURE_UNC_SAVEDFILECHECK + 1 ) ,
	FEATURE_TABBED_BROWSING	= ( FEATURE_GET_URL_DOM_FILEPATH_UNENCODED + 1 ) ,
	FEATURE_SSLUX	= ( FEATURE_TABBED_BROWSING + 1 ) ,
	FEATURE_DISABLE_NAVIGATION_SOUNDS	= ( FEATURE_SSLUX + 1 ) ,
	FEATURE_DISABLE_LEGACY_COMPRESSION	= ( FEATURE_DISABLE_NAVIGATION_SOUNDS + 1 ) ,
	FEATURE_FORCE_ADDR_AND_STATUS	= ( FEATURE_DISABLE_LEGACY_COMPRESSION + 1 ) ,
	FEATURE_XMLHTTP	= ( FEATURE_FORCE_ADDR_AND_STATUS + 1 ) ,
	FEATURE_DISABLE_TELNET_PROTOCOL	= ( FEATURE_XMLHTTP + 1 ) ,
	FEATURE_FEEDS	= ( FEATURE_DISABLE_TELNET_PROTOCOL + 1 ) ,
	FEATURE_BLOCK_INPUT_PROMPTS	= ( FEATURE_FEEDS + 1 ) ,
	FEATURE_ENTRY_COUNT	= ( FEATURE_BLOCK_INPUT_PROMPTS + 1 ) 
    } 	INTERNETFEATURELIST;

<function name="CoInternetSetFeatureEnabled" ret="extern HRESULT" convention="__stdcall">
      
    INTERNETFEATURELIST FeatureEntry,    
    DWORD dwFlags,                       
    BOOL fEnable                         
    );                                   
<function name="CoInternetIsFeatureEnabled" ret="extern HRESULT" convention="__stdcall">
       
    INTERNETFEATURELIST FeatureEntry,    
    DWORD dwFlags                        
    );                                   
<function name="CoInternetIsFeatureEnabledForUrl" ret="extern HRESULT" convention="__stdcall">
 
    INTERNETFEATURELIST FeatureEntry,    
    DWORD dwFlags,                       
    LPCWSTR szURL,                       
    IInternetSecurityManager *pSecMgr    
    );                                   
<function name="CoInternetIsFeatureEnabledForIUri" ret="extern HRESULT" convention="__stdcall">
 
    INTERNETFEATURELIST FeatureEntry,     
    DWORD dwFlags,                        
    IUri * pIUri,                         
    IInternetSecurityManagerEx2 *pSecMgr  
    );                                    
<function name="CoInternetIsFeatureZoneElevationEnabled" ret="extern HRESULT" convention="__stdcall">
 
    LPCWSTR szFromURL,                          
    LPCWSTR szToURL,                            
    IInternetSecurityManager *pSecMgr,          
    DWORD dwFlags                               
    );                                          

 
<function name="CopyStgMedium" ret="extern HRESULT" convention="__stdcall">
<arg name="pcstgmedSrc">const STGMEDIUM *</arg>
<arg name="pstgmedDest">STGMEDIUM *</arg>
</function> 
<function name="CopyBindInfo" ret="extern HRESULT" convention="__stdcall">
<arg name="pcbiSrc">const BINDINFO *</arg>
   
                           BINDINFO * pbiDest ); 
<function name="ReleaseBindInfo" ret="extern void" convention="__stdcall">
 BINDINFO * pbindinfo );  
 
<function name="CoInternetCreateSecurityManager" ret="extern HRESULT" convention="__stdcall">
IServiceProvider *pSP, IInternetSecurityManager **ppSM, DWORD dwReserved);

<function name="CoInternetCreateZoneManager" ret="extern HRESULT" convention="__stdcall">
IServiceProvider *pSP, IInternetZoneManager **ppZM, DWORD dwReserved);
extern const IID CLSID_InternetSecurityManager;  
extern const IID CLSID_InternetZoneManager;  

extern const IID CLSID_PersistentZoneIdentifier;  
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0032_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0032_v0_0_s_ifspec;
 
extern const IID IID_IInternetSecurityMgrSite;
<struct name="IInternetSecurityMgrSiteVtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            IInternetSecurityMgrSite * This,
             const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            IInternetSecurityMgrSite * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            IInternetSecurityMgrSite * This);
        
<fnptr name="GetWindow" ret="HRESULT" convention="__stdcall">
 
            IInternetSecurityMgrSite * This,
             HWND *phwnd);
        
<fnptr name="EnableModeless" ret="HRESULT" convention="__stdcall">
 
            IInternetSecurityMgrSite * This,
             BOOL fEnable);
        
        
    } IInternetSecurityMgrSiteVtbl;

<struct name="IInternetSecurityMgrSite">
<vptr>IInternetSecurityMgrSiteVtbl *</vptr>
</struct>

    
 
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0033_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0033_v0_0_s_ifspec;
 

typedef  
enum __MIDL_IInternetSecurityManager_0001
    {	PUAF_DEFAULT	= 0,
	PUAF_NOUI	= 0x1,
	PUAF_ISFILE	= 0x2,
	PUAF_WARN_IF_DENIED	= 0x4,
	PUAF_FORCEUI_FOREGROUND	= 0x8,
	PUAF_CHECK_TIFS	= 0x10,
	PUAF_DONTCHECKBOXINDIALOG	= 0x20,
	PUAF_TRUSTED	= 0x40,
	PUAF_ACCEPT_WILDCARD_SCHEME	= 0x80,
	PUAF_ENFORCERESTRICTED	= 0x100,
	PUAF_NOSAVEDFILECHECK	= 0x200,
	PUAF_REQUIRESAVEDFILECHECK	= 0x400,
	PUAF_DONT_USE_CACHE	= 0x1000,
	PUAF_RESERVED1	= 0x2000,
	PUAF_RESERVED2	= 0x4000,
	PUAF_LMZ_UNLOCKED	= 0x10000,
	PUAF_LMZ_LOCKED	= 0x20000,
	PUAF_DEFAULTZONEPOL	= 0x40000,
	PUAF_NPL_USE_LOCKED_IF_RESTRICTED	= 0x80000,
	PUAF_NOUIIFLOCKED	= 0x100000,
	PUAF_DRAGPROTOCOLCHECK	= 0x200000
    } 	PUAF;

typedef  
enum __MIDL_IInternetSecurityManager_0002
    {	PUAFOUT_DEFAULT	= 0,
	PUAFOUT_ISLOCKZONEPOLICY	= 0x1
    } 	PUAFOUT;
typedef  
enum __MIDL_IInternetSecurityManager_0003
    {	SZM_CREATE	= 0,
	SZM_DELETE	= 0x1
    } 	SZM_FLAGS;
extern const IID IID_IInternetSecurityManager;
<struct name="IInternetSecurityManagerVtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            IInternetSecurityManager * This,
              const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            IInternetSecurityManager * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            IInternetSecurityManager * This);
        
<fnptr name="SetSecuritySite" ret="HRESULT" convention="__stdcall">
 
            IInternetSecurityManager * This,
              IInternetSecurityMgrSite *pSite);
        
<fnptr name="GetSecuritySite" ret="HRESULT" convention="__stdcall">
 
            IInternetSecurityManager * This,
              IInternetSecurityMgrSite **ppSite);
        
<fnptr name="MapUrlToZone" ret="HRESULT" convention="__stdcall">
 
            IInternetSecurityManager * This,
              LPCWSTR pwszUrl,
              DWORD *pdwZone,
             DWORD dwFlags);
        
<fnptr name="GetSecurityId" ret="HRESULT" convention="__stdcall">
 
            IInternetSecurityManager * This,
              LPCWSTR pwszUrl,
              BYTE *pbSecurityId,
              DWORD *pcbSecurityId,
             DWORD_PTR dwReserved);
        
<fnptr name="ProcessUrlAction" ret="HRESULT" convention="__stdcall">
 
            IInternetSecurityManager * This,
              LPCWSTR pwszUrl,
             DWORD dwAction,
              BYTE *pPolicy,
             DWORD cbPolicy,
              BYTE *pContext,
             DWORD cbContext,
             DWORD dwFlags,
             DWORD dwReserved);
        
<fnptr name="QueryCustomPolicy" ret="HRESULT" convention="__stdcall">
 
            IInternetSecurityManager * This,
              LPCWSTR pwszUrl,
              const GUID * const guidKey,
              BYTE **ppPolicy,
              DWORD *pcbPolicy,
              BYTE *pContext,
             DWORD cbContext,
             DWORD dwReserved);
        
<fnptr name="SetZoneMapping" ret="HRESULT" convention="__stdcall">
 
            IInternetSecurityManager * This,
             DWORD dwZone,
              LPCWSTR lpszPattern,
             DWORD dwFlags);
        
<fnptr name="GetZoneMappings" ret="HRESULT" convention="__stdcall">
 
            IInternetSecurityManager * This,
             DWORD dwZone,
              IEnumString **ppenumString,
             DWORD dwFlags);
        
        
    } IInternetSecurityManagerVtbl;

<struct name="IInternetSecurityManager">
<vptr>IInternetSecurityManagerVtbl *</vptr>
</struct>

    

 
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0034_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0034_v0_0_s_ifspec;
 
extern const IID IID_IInternetSecurityManagerEx;
<struct name="IInternetSecurityManagerExVtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            IInternetSecurityManagerEx * This,
              const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            IInternetSecurityManagerEx * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            IInternetSecurityManagerEx * This);
        
<fnptr name="SetSecuritySite" ret="HRESULT" convention="__stdcall">
 
            IInternetSecurityManagerEx * This,
              IInternetSecurityMgrSite *pSite);
        
<fnptr name="GetSecuritySite" ret="HRESULT" convention="__stdcall">
 
            IInternetSecurityManagerEx * This,
              IInternetSecurityMgrSite **ppSite);
        
<fnptr name="MapUrlToZone" ret="HRESULT" convention="__stdcall">
 
            IInternetSecurityManagerEx * This,
              LPCWSTR pwszUrl,
              DWORD *pdwZone,
             DWORD dwFlags);
        
<fnptr name="GetSecurityId" ret="HRESULT" convention="__stdcall">
 
            IInternetSecurityManagerEx * This,
              LPCWSTR pwszUrl,
              BYTE *pbSecurityId,
              DWORD *pcbSecurityId,
             DWORD_PTR dwReserved);
        
<fnptr name="ProcessUrlAction" ret="HRESULT" convention="__stdcall">
 
            IInternetSecurityManagerEx * This,
              LPCWSTR pwszUrl,
             DWORD dwAction,
              BYTE *pPolicy,
             DWORD cbPolicy,
              BYTE *pContext,
             DWORD cbContext,
             DWORD dwFlags,
             DWORD dwReserved);
        
<fnptr name="QueryCustomPolicy" ret="HRESULT" convention="__stdcall">
 
            IInternetSecurityManagerEx * This,
              LPCWSTR pwszUrl,
              const GUID * const guidKey,
              BYTE **ppPolicy,
              DWORD *pcbPolicy,
              BYTE *pContext,
             DWORD cbContext,
             DWORD dwReserved);
        
<fnptr name="SetZoneMapping" ret="HRESULT" convention="__stdcall">
 
            IInternetSecurityManagerEx * This,
             DWORD dwZone,
              LPCWSTR lpszPattern,
             DWORD dwFlags);
        
<fnptr name="GetZoneMappings" ret="HRESULT" convention="__stdcall">
 
            IInternetSecurityManagerEx * This,
             DWORD dwZone,
              IEnumString **ppenumString,
             DWORD dwFlags);
        
<fnptr name="ProcessUrlActionEx" ret="HRESULT" convention="__stdcall">
 
            IInternetSecurityManagerEx * This,
              LPCWSTR pwszUrl,
             DWORD dwAction,
              BYTE *pPolicy,
             DWORD cbPolicy,
              BYTE *pContext,
             DWORD cbContext,
             DWORD dwFlags,
             DWORD dwReserved,
              DWORD *pdwOutFlags);
        
        
    } IInternetSecurityManagerExVtbl;

<struct name="IInternetSecurityManagerEx">
<vptr>IInternetSecurityManagerExVtbl *</vptr>
</struct>

    
 
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0035_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0035_v0_0_s_ifspec;
 
extern const IID IID_IInternetSecurityManagerEx2;
<struct name="IInternetSecurityManagerEx2Vtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            IInternetSecurityManagerEx2 * This,
              const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            IInternetSecurityManagerEx2 * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            IInternetSecurityManagerEx2 * This);
        
<fnptr name="SetSecuritySite" ret="HRESULT" convention="__stdcall">
 
            IInternetSecurityManagerEx2 * This,
              IInternetSecurityMgrSite *pSite);
        
<fnptr name="GetSecuritySite" ret="HRESULT" convention="__stdcall">
 
            IInternetSecurityManagerEx2 * This,
              IInternetSecurityMgrSite **ppSite);
        
<fnptr name="MapUrlToZone" ret="HRESULT" convention="__stdcall">
 
            IInternetSecurityManagerEx2 * This,
              LPCWSTR pwszUrl,
              DWORD *pdwZone,
             DWORD dwFlags);
        
<fnptr name="GetSecurityId" ret="HRESULT" convention="__stdcall">
 
            IInternetSecurityManagerEx2 * This,
              LPCWSTR pwszUrl,
              BYTE *pbSecurityId,
              DWORD *pcbSecurityId,
             DWORD_PTR dwReserved);
        
<fnptr name="ProcessUrlAction" ret="HRESULT" convention="__stdcall">
 
            IInternetSecurityManagerEx2 * This,
              LPCWSTR pwszUrl,
             DWORD dwAction,
              BYTE *pPolicy,
             DWORD cbPolicy,
              BYTE *pContext,
             DWORD cbContext,
             DWORD dwFlags,
             DWORD dwReserved);
        
<fnptr name="QueryCustomPolicy" ret="HRESULT" convention="__stdcall">
 
            IInternetSecurityManagerEx2 * This,
              LPCWSTR pwszUrl,
              const GUID * const guidKey,
              BYTE **ppPolicy,
              DWORD *pcbPolicy,
              BYTE *pContext,
             DWORD cbContext,
             DWORD dwReserved);
        
<fnptr name="SetZoneMapping" ret="HRESULT" convention="__stdcall">
 
            IInternetSecurityManagerEx2 * This,
             DWORD dwZone,
              LPCWSTR lpszPattern,
             DWORD dwFlags);
        
<fnptr name="GetZoneMappings" ret="HRESULT" convention="__stdcall">
 
            IInternetSecurityManagerEx2 * This,
             DWORD dwZone,
              IEnumString **ppenumString,
             DWORD dwFlags);
        
<fnptr name="ProcessUrlActionEx" ret="HRESULT" convention="__stdcall">
 
            IInternetSecurityManagerEx2 * This,
              LPCWSTR pwszUrl,
             DWORD dwAction,
              BYTE *pPolicy,
             DWORD cbPolicy,
              BYTE *pContext,
             DWORD cbContext,
             DWORD dwFlags,
             DWORD dwReserved,
              DWORD *pdwOutFlags);
        
<fnptr name="MapUrlToZoneEx2" ret="HRESULT" convention="__stdcall">
 
            IInternetSecurityManagerEx2 * This,
              IUri *pUri,
              DWORD *pdwZone,
             DWORD dwFlags,
              LPWSTR *ppwszMappedUrl,
              DWORD *pdwOutFlags);
        
<fnptr name="ProcessUrlActionEx2" ret="HRESULT" convention="__stdcall">
 
            IInternetSecurityManagerEx2 * This,
              IUri *pUri,
             DWORD dwAction,
              BYTE *pPolicy,
             DWORD cbPolicy,
              BYTE *pContext,
             DWORD cbContext,
             DWORD dwFlags,
             DWORD_PTR dwReserved,
              DWORD *pdwOutFlags);
        
<fnptr name="GetSecurityIdEx2" ret="HRESULT" convention="__stdcall">
 
            IInternetSecurityManagerEx2 * This,
              IUri *pUri,
              BYTE *pbSecurityId,
              DWORD *pcbSecurityId,
             DWORD_PTR dwReserved);
        
<fnptr name="QueryCustomPolicyEx2" ret="HRESULT" convention="__stdcall">
 
            IInternetSecurityManagerEx2 * This,
              IUri *pUri,
              const GUID * const guidKey,
              BYTE **ppPolicy,
              DWORD *pcbPolicy,
              BYTE *pContext,
             DWORD cbContext,
             DWORD_PTR dwReserved);
        
        
    } IInternetSecurityManagerEx2Vtbl;

<struct name="IInternetSecurityManagerEx2">
<vptr>IInternetSecurityManagerEx2Vtbl *</vptr>
</struct>

    

 
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0036_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0036_v0_0_s_ifspec;
 
extern const IID IID_IZoneIdentifier;
<struct name="IZoneIdentifierVtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            IZoneIdentifier * This,
             const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            IZoneIdentifier * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            IZoneIdentifier * This);
        
<fnptr name="GetId" ret="HRESULT" convention="__stdcall">
 
            IZoneIdentifier * This,
             DWORD *pdwZone);
        
<fnptr name="SetId" ret="HRESULT" convention="__stdcall">
 
            IZoneIdentifier * This,
             DWORD dwZone);
        
<fnptr name="Remove" ret="HRESULT" convention="__stdcall">
 
            IZoneIdentifier * This);
        
        
    } IZoneIdentifierVtbl;

<struct name="IZoneIdentifier">
<vptr>IZoneIdentifierVtbl *</vptr>
</struct>

    
 
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0037_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0037_v0_0_s_ifspec;
 
extern const IID IID_IInternetHostSecurityManager;
<struct name="IInternetHostSecurityManagerVtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            IInternetHostSecurityManager * This,
             const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            IInternetHostSecurityManager * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            IInternetHostSecurityManager * This);
        
<fnptr name="GetSecurityId" ret="HRESULT" convention="__stdcall">
 
            IInternetHostSecurityManager * This,
             BYTE *pbSecurityId,
             DWORD *pcbSecurityId,
             DWORD_PTR dwReserved);
        
<fnptr name="ProcessUrlAction" ret="HRESULT" convention="__stdcall">
 
            IInternetHostSecurityManager * This,
             DWORD dwAction,
             BYTE *pPolicy,
             DWORD cbPolicy,
             BYTE *pContext,
             DWORD cbContext,
             DWORD dwFlags,
             DWORD dwReserved);
        
<fnptr name="QueryCustomPolicy" ret="HRESULT" convention="__stdcall">
 
            IInternetHostSecurityManager * This,
             const GUID * const guidKey,
             BYTE **ppPolicy,
             DWORD *pcbPolicy,
             BYTE *pContext,
             DWORD cbContext,
             DWORD dwReserved);
        
        
    } IInternetHostSecurityManagerVtbl;

<struct name="IInternetHostSecurityManager">
<vptr>IInternetHostSecurityManagerVtbl *</vptr>
</struct>

    
 

extern const GUID GUID_CUSTOM_LOCALMACHINEZONEUNLOCKED; 
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0038_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0038_v0_0_s_ifspec;
 

typedef  IInternetZoneManager *LPURLZONEMANAGER;

typedef 
enum tagURLZONE
    {	URLZONE_INVALID	= -1,
	URLZONE_PREDEFINED_MIN	= 0,
	URLZONE_LOCAL_MACHINE	= 0,
	URLZONE_INTRANET	= ( URLZONE_LOCAL_MACHINE + 1 ) ,
	URLZONE_TRUSTED	= ( URLZONE_INTRANET + 1 ) ,
	URLZONE_INTERNET	= ( URLZONE_TRUSTED + 1 ) ,
	URLZONE_UNTRUSTED	= ( URLZONE_INTERNET + 1 ) ,
	URLZONE_PREDEFINED_MAX	= 999,
	URLZONE_USER_MIN	= 1000,
	URLZONE_USER_MAX	= 10000
    } 	URLZONE;
typedef 
enum tagURLTEMPLATE
    {	URLTEMPLATE_CUSTOM	= 0,
	URLTEMPLATE_PREDEFINED_MIN	= 0x10000,
	URLTEMPLATE_LOW	= 0x10000,
	URLTEMPLATE_MEDLOW	= 0x10500,
	URLTEMPLATE_MEDIUM	= 0x11000,
	URLTEMPLATE_MEDHIGH	= 0x11500,
	URLTEMPLATE_HIGH	= 0x12000,
	URLTEMPLATE_PREDEFINED_MAX	= 0x20000
    } 	URLTEMPLATE;
enum __MIDL_IInternetZoneManager_0001
    {	MAX_ZONE_PATH	= 260,
	MAX_ZONE_DESCRIPTION	= 200
    } ;
typedef  
enum __MIDL_IInternetZoneManager_0002
    {	ZAFLAGS_CUSTOM_EDIT	= 0x1,
	ZAFLAGS_ADD_SITES	= 0x2,
	ZAFLAGS_REQUIRE_VERIFICATION	= 0x4,
	ZAFLAGS_INCLUDE_PROXY_OVERRIDE	= 0x8,
	ZAFLAGS_INCLUDE_INTRANET_SITES	= 0x10,
	ZAFLAGS_NO_UI	= 0x20,
	ZAFLAGS_SUPPORTS_VERIFICATION	= 0x40,
	ZAFLAGS_UNC_AS_INTRANET	= 0x80,
	ZAFLAGS_DETECT_INTRANET	= 0x100,
	ZAFLAGS_USE_LOCKED_ZONES	= 0x10000,
	ZAFLAGS_VERIFY_TEMPLATE_SETTINGS	= 0x20000,
	ZAFLAGS_NO_CACHE	= 0x40000
    } 	ZAFLAGS;

<struct name="_ZONEATTRIBUTES">
<field name="cbSize">ULONG</field>
<field name="szDisplayName[ 260 ]">WCHAR</field>
<field name="szDescription[ 200 ]">WCHAR</field>
<field name="szIconPath[ 260 ]">WCHAR</field>
<field name="dwTemplateMinLevel">DWORD</field>
<field name="dwTemplateRecommended">DWORD</field>
<field name="dwTemplateCurrentLevel">DWORD</field>
<field name="dwFlags">DWORD</field>
    } 	ZONEATTRIBUTES;

<typedef name="LPZONEATTRIBUTES">_ZONEATTRIBUTES *</typedef>
typedef 
enum _URLZONEREG
    {	URLZONEREG_DEFAULT	= 0,
	URLZONEREG_HKLM	= ( URLZONEREG_DEFAULT + 1 ) ,
	URLZONEREG_HKCU	= ( URLZONEREG_HKLM + 1 ) 
    } 	URLZONEREG;

extern const IID IID_IInternetZoneManager;

<struct name="IInternetZoneManagerVtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            IInternetZoneManager * This,
             const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            IInternetZoneManager * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            IInternetZoneManager * This);
        
<fnptr name="GetZoneAttributes" ret="HRESULT" convention="__stdcall">
 
            IInternetZoneManager * This,
             DWORD dwZone,
             ZONEATTRIBUTES *pZoneAttributes);
        
<fnptr name="SetZoneAttributes" ret="HRESULT" convention="__stdcall">
 
            IInternetZoneManager * This,
             DWORD dwZone,
             ZONEATTRIBUTES *pZoneAttributes);
        
<fnptr name="GetZoneCustomPolicy" ret="HRESULT" convention="__stdcall">
 
            IInternetZoneManager * This,
             DWORD dwZone,
             const GUID * const guidKey,
             BYTE **ppPolicy,
             DWORD *pcbPolicy,
             URLZONEREG urlZoneReg);
        
<fnptr name="SetZoneCustomPolicy" ret="HRESULT" convention="__stdcall">
 
            IInternetZoneManager * This,
             DWORD dwZone,
             const GUID * const guidKey,
             BYTE *pPolicy,
             DWORD cbPolicy,
             URLZONEREG urlZoneReg);
        
<fnptr name="GetZoneActionPolicy" ret="HRESULT" convention="__stdcall">
 
            IInternetZoneManager * This,
             DWORD dwZone,
             DWORD dwAction,
             BYTE *pPolicy,
             DWORD cbPolicy,
             URLZONEREG urlZoneReg);
        
<fnptr name="SetZoneActionPolicy" ret="HRESULT" convention="__stdcall">
 
            IInternetZoneManager * This,
             DWORD dwZone,
             DWORD dwAction,
             BYTE *pPolicy,
             DWORD cbPolicy,
             URLZONEREG urlZoneReg);
        
<fnptr name="PromptAction" ret="HRESULT" convention="__stdcall">
 
            IInternetZoneManager * This,
             DWORD dwAction,
             HWND hwndParent,
             LPCWSTR pwszUrl,
             LPCWSTR pwszText,
             DWORD dwPromptFlags);
        
<fnptr name="LogAction" ret="HRESULT" convention="__stdcall">
 
            IInternetZoneManager * This,
             DWORD dwAction,
             LPCWSTR pwszUrl,
             LPCWSTR pwszText,
             DWORD dwLogFlags);
        
<fnptr name="CreateZoneEnumerator" ret="HRESULT" convention="__stdcall">
 
            IInternetZoneManager * This,
             DWORD *pdwEnum,
             DWORD *pdwCount,
             DWORD dwFlags);
        
<fnptr name="GetZoneAt" ret="HRESULT" convention="__stdcall">
 
            IInternetZoneManager * This,
             DWORD dwEnum,
             DWORD dwIndex,
             DWORD *pdwZone);
        
<fnptr name="DestroyZoneEnumerator" ret="HRESULT" convention="__stdcall">
 
            IInternetZoneManager * This,
             DWORD dwEnum);
        
<fnptr name="CopyTemplatePoliciesToZone" ret="HRESULT" convention="__stdcall">
 
            IInternetZoneManager * This,
             DWORD dwTemplate,
             DWORD dwZone,
             DWORD dwReserved);
        
        
    } IInternetZoneManagerVtbl;

<struct name="IInternetZoneManager">
<vptr>IInternetZoneManagerVtbl *</vptr>
</struct>

    
 
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0039_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0039_v0_0_s_ifspec;
 
extern const IID IID_IInternetZoneManagerEx;
<struct name="IInternetZoneManagerExVtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            IInternetZoneManagerEx * This,
             const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            IInternetZoneManagerEx * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            IInternetZoneManagerEx * This);
        
<fnptr name="GetZoneAttributes" ret="HRESULT" convention="__stdcall">
 
            IInternetZoneManagerEx * This,
             DWORD dwZone,
             ZONEATTRIBUTES *pZoneAttributes);
        
<fnptr name="SetZoneAttributes" ret="HRESULT" convention="__stdcall">
 
            IInternetZoneManagerEx * This,
             DWORD dwZone,
             ZONEATTRIBUTES *pZoneAttributes);
        
<fnptr name="GetZoneCustomPolicy" ret="HRESULT" convention="__stdcall">
 
            IInternetZoneManagerEx * This,
             DWORD dwZone,
             const GUID * const guidKey,
             BYTE **ppPolicy,
             DWORD *pcbPolicy,
             URLZONEREG urlZoneReg);
        
<fnptr name="SetZoneCustomPolicy" ret="HRESULT" convention="__stdcall">
 
            IInternetZoneManagerEx * This,
             DWORD dwZone,
             const GUID * const guidKey,
             BYTE *pPolicy,
             DWORD cbPolicy,
             URLZONEREG urlZoneReg);
        
<fnptr name="GetZoneActionPolicy" ret="HRESULT" convention="__stdcall">
 
            IInternetZoneManagerEx * This,
             DWORD dwZone,
             DWORD dwAction,
             BYTE *pPolicy,
             DWORD cbPolicy,
             URLZONEREG urlZoneReg);
        
<fnptr name="SetZoneActionPolicy" ret="HRESULT" convention="__stdcall">
 
            IInternetZoneManagerEx * This,
             DWORD dwZone,
             DWORD dwAction,
             BYTE *pPolicy,
             DWORD cbPolicy,
             URLZONEREG urlZoneReg);
        
<fnptr name="PromptAction" ret="HRESULT" convention="__stdcall">
 
            IInternetZoneManagerEx * This,
             DWORD dwAction,
             HWND hwndParent,
             LPCWSTR pwszUrl,
             LPCWSTR pwszText,
             DWORD dwPromptFlags);
        
<fnptr name="LogAction" ret="HRESULT" convention="__stdcall">
 
            IInternetZoneManagerEx * This,
             DWORD dwAction,
             LPCWSTR pwszUrl,
             LPCWSTR pwszText,
             DWORD dwLogFlags);
        
<fnptr name="CreateZoneEnumerator" ret="HRESULT" convention="__stdcall">
 
            IInternetZoneManagerEx * This,
             DWORD *pdwEnum,
             DWORD *pdwCount,
             DWORD dwFlags);
        
<fnptr name="GetZoneAt" ret="HRESULT" convention="__stdcall">
 
            IInternetZoneManagerEx * This,
             DWORD dwEnum,
             DWORD dwIndex,
             DWORD *pdwZone);
        
<fnptr name="DestroyZoneEnumerator" ret="HRESULT" convention="__stdcall">
 
            IInternetZoneManagerEx * This,
             DWORD dwEnum);
        
<fnptr name="CopyTemplatePoliciesToZone" ret="HRESULT" convention="__stdcall">
 
            IInternetZoneManagerEx * This,
             DWORD dwTemplate,
             DWORD dwZone,
             DWORD dwReserved);
        
<fnptr name="GetZoneActionPolicyEx" ret="HRESULT" convention="__stdcall">
 
            IInternetZoneManagerEx * This,
             DWORD dwZone,
             DWORD dwAction,
             BYTE *pPolicy,
             DWORD cbPolicy,
             URLZONEREG urlZoneReg,
             DWORD dwFlags);
        
<fnptr name="SetZoneActionPolicyEx" ret="HRESULT" convention="__stdcall">
 
            IInternetZoneManagerEx * This,
             DWORD dwZone,
             DWORD dwAction,
             BYTE *pPolicy,
             DWORD cbPolicy,
             URLZONEREG urlZoneReg,
             DWORD dwFlags);
        
        
    } IInternetZoneManagerExVtbl;

<struct name="IInternetZoneManagerEx">
<vptr>IInternetZoneManagerExVtbl *</vptr>
</struct>

    
 
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0040_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0040_v0_0_s_ifspec;
 
extern const IID IID_IInternetZoneManagerEx2;
<struct name="IInternetZoneManagerEx2Vtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            IInternetZoneManagerEx2 * This,
             const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            IInternetZoneManagerEx2 * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            IInternetZoneManagerEx2 * This);
        
<fnptr name="GetZoneAttributes" ret="HRESULT" convention="__stdcall">
 
            IInternetZoneManagerEx2 * This,
             DWORD dwZone,
             ZONEATTRIBUTES *pZoneAttributes);
        
<fnptr name="SetZoneAttributes" ret="HRESULT" convention="__stdcall">
 
            IInternetZoneManagerEx2 * This,
             DWORD dwZone,
             ZONEATTRIBUTES *pZoneAttributes);
        
<fnptr name="GetZoneCustomPolicy" ret="HRESULT" convention="__stdcall">
 
            IInternetZoneManagerEx2 * This,
             DWORD dwZone,
             const GUID * const guidKey,
             BYTE **ppPolicy,
             DWORD *pcbPolicy,
             URLZONEREG urlZoneReg);
        
<fnptr name="SetZoneCustomPolicy" ret="HRESULT" convention="__stdcall">
 
            IInternetZoneManagerEx2 * This,
             DWORD dwZone,
             const GUID * const guidKey,
             BYTE *pPolicy,
             DWORD cbPolicy,
             URLZONEREG urlZoneReg);
        
<fnptr name="GetZoneActionPolicy" ret="HRESULT" convention="__stdcall">
 
            IInternetZoneManagerEx2 * This,
             DWORD dwZone,
             DWORD dwAction,
             BYTE *pPolicy,
             DWORD cbPolicy,
             URLZONEREG urlZoneReg);
        
<fnptr name="SetZoneActionPolicy" ret="HRESULT" convention="__stdcall">
 
            IInternetZoneManagerEx2 * This,
             DWORD dwZone,
             DWORD dwAction,
             BYTE *pPolicy,
             DWORD cbPolicy,
             URLZONEREG urlZoneReg);
        
<fnptr name="PromptAction" ret="HRESULT" convention="__stdcall">
 
            IInternetZoneManagerEx2 * This,
             DWORD dwAction,
             HWND hwndParent,
             LPCWSTR pwszUrl,
             LPCWSTR pwszText,
             DWORD dwPromptFlags);
        
<fnptr name="LogAction" ret="HRESULT" convention="__stdcall">
 
            IInternetZoneManagerEx2 * This,
             DWORD dwAction,
             LPCWSTR pwszUrl,
             LPCWSTR pwszText,
             DWORD dwLogFlags);
        
<fnptr name="CreateZoneEnumerator" ret="HRESULT" convention="__stdcall">
 
            IInternetZoneManagerEx2 * This,
             DWORD *pdwEnum,
             DWORD *pdwCount,
             DWORD dwFlags);
        
<fnptr name="GetZoneAt" ret="HRESULT" convention="__stdcall">
 
            IInternetZoneManagerEx2 * This,
             DWORD dwEnum,
             DWORD dwIndex,
             DWORD *pdwZone);
        
<fnptr name="DestroyZoneEnumerator" ret="HRESULT" convention="__stdcall">
 
            IInternetZoneManagerEx2 * This,
             DWORD dwEnum);
        
<fnptr name="CopyTemplatePoliciesToZone" ret="HRESULT" convention="__stdcall">
 
            IInternetZoneManagerEx2 * This,
             DWORD dwTemplate,
             DWORD dwZone,
             DWORD dwReserved);
        
<fnptr name="GetZoneActionPolicyEx" ret="HRESULT" convention="__stdcall">
 
            IInternetZoneManagerEx2 * This,
             DWORD dwZone,
             DWORD dwAction,
             BYTE *pPolicy,
             DWORD cbPolicy,
             URLZONEREG urlZoneReg,
             DWORD dwFlags);
        
<fnptr name="SetZoneActionPolicyEx" ret="HRESULT" convention="__stdcall">
 
            IInternetZoneManagerEx2 * This,
             DWORD dwZone,
             DWORD dwAction,
             BYTE *pPolicy,
             DWORD cbPolicy,
             URLZONEREG urlZoneReg,
             DWORD dwFlags);
        
<fnptr name="GetZoneAttributesEx" ret="HRESULT" convention="__stdcall">
 
            IInternetZoneManagerEx2 * This,
             DWORD dwZone,
             ZONEATTRIBUTES *pZoneAttributes,
             DWORD dwFlags);
        
<fnptr name="GetZoneSecurityState" ret="HRESULT" convention="__stdcall">
 
            IInternetZoneManagerEx2 * This,
             DWORD dwZoneIndex,
             BOOL fRespectPolicy,
             LPDWORD pdwState,
             BOOL *pfPolicyEncountered);
        
<fnptr name="GetIESecurityState" ret="HRESULT" convention="__stdcall">
 
            IInternetZoneManagerEx2 * This,
             BOOL fRespectPolicy,
             LPDWORD pdwState,
             BOOL *pfPolicyEncountered,
             BOOL fNoCache);
        
<fnptr name="FixUnsecureSettings" ret="HRESULT" convention="__stdcall">
 
            IInternetZoneManagerEx2 * This);
        
        
    } IInternetZoneManagerEx2Vtbl;

<struct name="IInternetZoneManagerEx2">
<vptr>IInternetZoneManagerEx2Vtbl *</vptr>
</struct>

    
 
extern const IID CLSID_SoftDistExt;  

<struct name="_tagCODEBASEHOLD">
<field name="cbSize">ULONG</field>
<field name="szDistUnit">LPWSTR</field>
<field name="szCodeBase">LPWSTR</field>
<field name="dwVersionMS">DWORD</field>
<field name="dwVersionLS">DWORD</field>
<field name="dwStyle">DWORD</field>
    } 	CODEBASEHOLD;

<typedef name="LPCODEBASEHOLD">_tagCODEBASEHOLD *</typedef>

<struct name="_tagSOFTDISTINFO">
<field name="cbSize">ULONG</field>
<field name="dwFlags">DWORD</field>
<field name="dwAdState">DWORD</field>
<field name="szTitle">LPWSTR</field>
<field name="szAbstract">LPWSTR</field>
<field name="szHREF">LPWSTR</field>
<field name="dwInstalledVersionMS">DWORD</field>
<field name="dwInstalledVersionLS">DWORD</field>
<field name="dwUpdateVersionMS">DWORD</field>
<field name="dwUpdateVersionLS">DWORD</field>
<field name="dwAdvertisedVersionMS">DWORD</field>
<field name="dwAdvertisedVersionLS">DWORD</field>
<field name="dwReserved">DWORD</field>
    } 	SOFTDISTINFO;

<typedef name="LPSOFTDISTINFO">_tagSOFTDISTINFO *</typedef>
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0041_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0041_v0_0_s_ifspec;
 
extern const IID IID_ISoftDistExt;
<struct name="ISoftDistExtVtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            ISoftDistExt * This,
             const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            ISoftDistExt * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            ISoftDistExt * This);
        
<fnptr name="ProcessSoftDist" ret="HRESULT" convention="__stdcall">
 
            ISoftDistExt * This,
             LPCWSTR szCDFURL,
             IXMLElement *pSoftDistElement,
             LPSOFTDISTINFO lpsdi);
        
<fnptr name="GetFirstCodeBase" ret="HRESULT" convention="__stdcall">
 
            ISoftDistExt * This,
             LPWSTR *szCodeBase,
             LPDWORD dwMaxSize);
        
<fnptr name="GetNextCodeBase" ret="HRESULT" convention="__stdcall">
 
            ISoftDistExt * This,
             LPWSTR *szCodeBase,
             LPDWORD dwMaxSize);
        
<fnptr name="AsyncInstallDistributionUnit" ret="HRESULT" convention="__stdcall">
 
            ISoftDistExt * This,
             IBindCtx *pbc,
             LPVOID pvReserved,
             DWORD flags,
             LPCODEBASEHOLD lpcbh);
        
        
    } ISoftDistExtVtbl;

<struct name="ISoftDistExt">
<vptr>ISoftDistExtVtbl *</vptr>
</struct>

    
 

<function name="GetSoftwareUpdateInfo" ret="extern HRESULT" convention="__stdcall">
<arg name="szDistUnit">LPCWSTR</arg>
 LPSOFTDISTINFO psdi );
<function name="SetSoftwareUpdateAdvertisementState" ret="extern HRESULT" convention="__stdcall">
<arg name="szDistUnit">LPCWSTR</arg>
<arg name="dwAdState">DWORD</arg>
<arg name="dwAdvertisedVersionMS">DWORD</arg>
 DWORD dwAdvertisedVersionLS );
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0042_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0042_v0_0_s_ifspec;
 

typedef  ICatalogFileInfo *LPCATALOGFILEINFO;
extern const IID IID_ICatalogFileInfo;
<struct name="ICatalogFileInfoVtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            ICatalogFileInfo * This,
             const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            ICatalogFileInfo * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            ICatalogFileInfo * This);
        
<fnptr name="GetCatalogFile" ret="HRESULT" convention="__stdcall">
 
            ICatalogFileInfo * This,
             LPSTR *ppszCatalogFile);
        
<fnptr name="GetJavaTrust" ret="HRESULT" convention="__stdcall">
 
            ICatalogFileInfo * This,
             void **ppJavaTrust);
        
        
    } ICatalogFileInfoVtbl;

<struct name="ICatalogFileInfo">
<vptr>ICatalogFileInfoVtbl *</vptr>
</struct>

    
 
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0043_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0043_v0_0_s_ifspec;
 

typedef    IDataFilter *LPDATAFILTER;
extern const IID IID_IDataFilter;
<struct name="IDataFilterVtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            IDataFilter * This,
              const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            IDataFilter * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            IDataFilter * This);
        
<fnptr name="DoEncode" ret="HRESULT" convention="__stdcall">
 
            IDataFilter * This,
             DWORD dwFlags,
             LONG lInBufferSize,
              BYTE *pbInBuffer,
             LONG lOutBufferSize,
              BYTE *pbOutBuffer,
             LONG lInBytesAvailable,
              LONG *plInBytesRead,
              LONG *plOutBytesWritten,
             DWORD dwReserved);
        
<fnptr name="DoDecode" ret="HRESULT" convention="__stdcall">
 
            IDataFilter * This,
             DWORD dwFlags,
             LONG lInBufferSize,
              BYTE *pbInBuffer,
             LONG lOutBufferSize,
              BYTE *pbOutBuffer,
             LONG lInBytesAvailable,
              LONG *plInBytesRead,
              LONG *plOutBytesWritten,
             DWORD dwReserved);
        
<fnptr name="SetEncodingLevel" ret="HRESULT" convention="__stdcall">
 
            IDataFilter * This,
             DWORD dwEncLevel);
        
        
    } IDataFilterVtbl;

<struct name="IDataFilter">
<vptr>IDataFilterVtbl *</vptr>
</struct>

    
 
<struct name="_tagPROTOCOLFILTERDATA">
<field name="cbSize">DWORD</field>
    IInternetProtocolSink *pProtocolSink;
    IInternetProtocol *pProtocol;
    IUnknown *pUnk;
    DWORD dwFilterFlags;
    } 	PROTOCOLFILTERDATA;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0044_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0044_v0_0_s_ifspec;
 

typedef  IEncodingFilterFactory *LPENCODINGFILTERFACTORY;

<struct name="_tagDATAINFO">
<field name="ulTotalSize">ULONG</field>
<field name="ulavrPacketSize">ULONG</field>
<field name="ulConnectSpeed">ULONG</field>
<field name="ulProcessorSpeed">ULONG</field>
    } 	DATAINFO;
extern const IID IID_IEncodingFilterFactory;
<struct name="IEncodingFilterFactoryVtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            IEncodingFilterFactory * This,
             const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            IEncodingFilterFactory * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            IEncodingFilterFactory * This);
        
<fnptr name="FindBestFilter" ret="HRESULT" convention="__stdcall">
 
            IEncodingFilterFactory * This,
             LPCWSTR pwzCodeIn,
             LPCWSTR pwzCodeOut,
             DATAINFO info,
             IDataFilter **ppDF);
        
<fnptr name="GetDefaultFilter" ret="HRESULT" convention="__stdcall">
 
            IEncodingFilterFactory * This,
             LPCWSTR pwzCodeIn,
             LPCWSTR pwzCodeOut,
             IDataFilter **ppDF);
        
        
    } IEncodingFilterFactoryVtbl;

<struct name="IEncodingFilterFactory">
<vptr>IEncodingFilterFactoryVtbl *</vptr>
</struct>

    
 
<function name="IsLoggingEnabledA" ret="BOOL" convention="__stdcall">
<arg name="pszUrl">LPCSTR </arg>
</function>                    
<function name="IsLoggingEnabledW" ret="BOOL" convention="__stdcall">
<arg name="pwszUrl">LPCWSTR </arg>
</function>                  
<struct name="_tagHIT_LOGGING_INFO">
<field name="dwStructSize">DWORD</field>
<field name="lpszLoggedUrlName">LPSTR</field>
<field name="StartTime">SYSTEMTIME</field>
<field name="EndTime">SYSTEMTIME</field>
<field name="lpszExtendedInfo">LPSTR</field>
    } 	HIT_LOGGING_INFO;

<typedef name="LPHIT_LOGGING_INFO">_tagHIT_LOGGING_INFO *</typedef>

<function name="WriteHitLogging" ret="BOOL" convention="__stdcall">
<arg name="lpLogginginfo">LPHIT_LOGGING_INFO</arg>
</function>    

<struct name="CONFIRMSAFETY">
<field name="clsid">CLSID</field>
    IUnknown *pUnk;
    DWORD dwFlags;
    } ;
extern const GUID GUID_CUSTOM_CONFIRMOBJECTSAFETY; 
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0045_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0045_v0_0_s_ifspec;
 

typedef  IWrappedProtocol *LPIWRAPPEDPROTOCOL;
extern const IID IID_IWrappedProtocol;
<struct name="IWrappedProtocolVtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            IWrappedProtocol * This,
             const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            IWrappedProtocol * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            IWrappedProtocol * This);
        
<fnptr name="GetWrapperCode" ret="HRESULT" convention="__stdcall">
 
            IWrappedProtocol * This,
             LONG *pnCode,
             DWORD_PTR dwReserved);
        
        
    } IWrappedProtocolVtbl;

<struct name="IWrappedProtocol">
<vptr>IWrappedProtocolVtbl *</vptr>
</struct>

    

 
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0046_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0046_v0_0_s_ifspec;
<function name="BSTR_UserSize" ret="unsigned long" convention="__stdcall">
     unsigned long *, unsigned long            , BSTR * ); 
<function name="BSTR_UserMarshal" ret="unsigned char *" convention="__stdcall">
  unsigned long *, unsigned char *, BSTR * ); 
<function name="BSTR_UserUnmarshal" ret="unsigned char *" convention="__stdcall">
unsigned long *, unsigned char *, BSTR * ); 
<function name="BSTR_UserFree" ret="void" convention="__stdcall">
     unsigned long *, BSTR * ); 

<function name="HWND_UserSize" ret="unsigned long" convention="__stdcall">
     unsigned long *, unsigned long            , HWND * ); 
<function name="HWND_UserMarshal" ret="unsigned char *" convention="__stdcall">
  unsigned long *, unsigned char *, HWND * ); 
<function name="HWND_UserUnmarshal" ret="unsigned char *" convention="__stdcall">
unsigned long *, unsigned char *, HWND * ); 
<function name="HWND_UserFree" ret="void" convention="__stdcall">
     unsigned long *, HWND * ); 

<function name="BSTR_UserSize64" ret="unsigned long" convention="__stdcall">
     unsigned long *, unsigned long            , BSTR * ); 
<function name="BSTR_UserMarshal64" ret="unsigned char *" convention="__stdcall">
  unsigned long *, unsigned char *, BSTR * ); 
<function name="BSTR_UserUnmarshal64" ret="unsigned char *" convention="__stdcall">
unsigned long *, unsigned char *, BSTR * ); 
<function name="BSTR_UserFree64" ret="void" convention="__stdcall">
     unsigned long *, BSTR * ); 

<function name="HWND_UserSize64" ret="unsigned long" convention="__stdcall">
     unsigned long *, unsigned long            , HWND * ); 
<function name="HWND_UserMarshal64" ret="unsigned char *" convention="__stdcall">
  unsigned long *, unsigned char *, HWND * ); 
<function name="HWND_UserUnmarshal64" ret="unsigned char *" convention="__stdcall">
unsigned long *, unsigned char *, HWND * ); 
<function name="HWND_UserFree64" ret="void" convention="__stdcall">
     unsigned long *, HWND * ); 

<function name="IBinding_GetBindResult_Proxy" ret="HRESULT" convention="__stdcall"> 
    IBinding * This,
     CLSID *pclsidProtocol,
     DWORD *pdwResult,
     LPOLESTR *pszResult,
     DWORD *pdwReserved);
<function name="IBinding_GetBindResult_Stub" ret="HRESULT" convention="__stdcall"> 
    IBinding * This,
      CLSID *pclsidProtocol,
      DWORD *pdwResult,
      LPOLESTR *pszResult,
     DWORD dwReserved);

<function name="IBindStatusCallback_GetBindInfo_Proxy" ret="HRESULT" convention="__stdcall"> 
    IBindStatusCallback * This,
     DWORD *grfBINDF,
     BINDINFO *pbindinfo);
<function name="IBindStatusCallback_GetBindInfo_Stub" ret="HRESULT" convention="__stdcall"> 
    IBindStatusCallback * This,
      DWORD *grfBINDF,
      RemBINDINFO *pbindinfo,
      RemSTGMEDIUM *pstgmed);

<function name="IBindStatusCallback_OnDataAvailable_Proxy" ret="HRESULT" convention="__stdcall"> 
    IBindStatusCallback * This,
     DWORD grfBSCF,
     DWORD dwSize,
     FORMATETC *pformatetc,
     STGMEDIUM *pstgmed);
<function name="IBindStatusCallback_OnDataAvailable_Stub" ret="HRESULT" convention="__stdcall"> 
    IBindStatusCallback * This,
     DWORD grfBSCF,
     DWORD dwSize,
      RemFORMATETC *pformatetc,
      RemSTGMEDIUM *pstgmed);

<function name="IWinInetInfo_QueryOption_Proxy" ret="HRESULT" convention="__stdcall"> 
    IWinInetInfo * This,
     DWORD dwOption,
     LPVOID pBuffer,
     DWORD *pcbBuf);
<function name="IWinInetInfo_QueryOption_Stub" ret="HRESULT" convention="__stdcall"> 
    IWinInetInfo * This,
     DWORD dwOption,
      BYTE *pBuffer,
      DWORD *pcbBuf);

<function name="IWinInetHttpInfo_QueryInfo_Proxy" ret="HRESULT" convention="__stdcall"> 
    IWinInetHttpInfo * This,
     DWORD dwOption,
     LPVOID pBuffer,
     DWORD *pcbBuf,
     DWORD *pdwFlags,
     DWORD *pdwReserved);
<function name="IWinInetHttpInfo_QueryInfo_Stub" ret="HRESULT" convention="__stdcall"> 
    IWinInetHttpInfo * This,
     DWORD dwOption,
      BYTE *pBuffer,
      DWORD *pcbBuf,
      DWORD *pdwFlags,
      DWORD *pdwReserved);

<function name="IBindHost_MonikerBindToStorage_Proxy" ret="HRESULT" convention="__stdcall"> 
    IBindHost * This,
     IMoniker *pMk,
     IBindCtx *pBC,
     IBindStatusCallback *pBSC,
     const IID * const riid,
     void **ppvObj);
<function name="IBindHost_MonikerBindToStorage_Stub" ret="HRESULT" convention="__stdcall"> 
    IBindHost * This,
      IMoniker *pMk,
      IBindCtx *pBC,
      IBindStatusCallback *pBSC,
      const IID * const riid,
      IUnknown **ppvObj);

<function name="IBindHost_MonikerBindToObject_Proxy" ret="HRESULT" convention="__stdcall"> 
    IBindHost * This,
     IMoniker *pMk,
     IBindCtx *pBC,
     IBindStatusCallback *pBSC,
     const IID * const riid,
     void **ppvObj);
<function name="IBindHost_MonikerBindToObject_Stub" ret="HRESULT" convention="__stdcall"> 
    IBindHost * This,
      IMoniker *pMk,
      IBindCtx *pBC,
      IBindStatusCallback *pBSC,
      const IID * const riid,
      IUnknown **ppvObj);
#line 1 "\\program files\\Microsoft SDKs\\Windows\\v6.0A\\Include\\propidl.h"
 
#pragma warning( disable: 4049 )  

#pragma once
 

 
#pragma warning(push)

#pragma warning(disable:4201)    
#pragma warning(disable:4237)    

#pragma once
<struct name="tagVersionedStream">
<field name="guidVersion">GUID</field>
    IStream *pStream;
    } 	VERSIONEDSTREAM;

<typedef name="LPVERSIONEDSTREAM">tagVersionedStream *</typedef>

typedef struct tagPROPVARIANT PROPVARIANT;
<struct name="tagCAC">
<field name="cElems">ULONG</field>
    CHAR *pElems;
    } 	CAC;

<struct name="tagCAUB">
<field name="cElems">ULONG</field>
    UCHAR *pElems;
    } 	CAUB;

<struct name="tagCAI">
<field name="cElems">ULONG</field>
    SHORT *pElems;
    } 	CAI;

<struct name="tagCAUI">
<field name="cElems">ULONG</field>
    USHORT *pElems;
    } 	CAUI;

<struct name="tagCAL">
<field name="cElems">ULONG</field>
    LONG *pElems;
    } 	CAL;

<struct name="tagCAUL">
<field name="cElems">ULONG</field>
    ULONG *pElems;
    } 	CAUL;

<struct name="tagCAFLT">
<field name="cElems">ULONG</field>
    FLOAT *pElems;
    } 	CAFLT;

<struct name="tagCADBL">
<field name="cElems">ULONG</field>
    DOUBLE *pElems;
    } 	CADBL;

<struct name="tagCACY">
<field name="cElems">ULONG</field>
    CY *pElems;
    } 	CACY;

<struct name="tagCADATE">
<field name="cElems">ULONG</field>
    DATE *pElems;
    } 	CADATE;

<struct name="tagCABSTR">
<field name="cElems">ULONG</field>
    BSTR *pElems;
    } 	CABSTR;

<struct name="tagCABSTRBLOB">
<field name="cElems">ULONG</field>
    BSTRBLOB *pElems;
    } 	CABSTRBLOB;

<struct name="tagCABOOL">
<field name="cElems">ULONG</field>
    VARIANT_BOOL *pElems;
    } 	CABOOL;

<struct name="tagCASCODE">
<field name="cElems">ULONG</field>
    SCODE *pElems;
    } 	CASCODE;

<struct name="tagCAPROPVARIANT">
<field name="cElems">ULONG</field>
    PROPVARIANT *pElems;
    } 	CAPROPVARIANT;

<struct name="tagCAH">
<field name="cElems">ULONG</field>
    LARGE_INTEGER *pElems;
    } 	CAH;

<struct name="tagCAUH">
<field name="cElems">ULONG</field>
    ULARGE_INTEGER *pElems;
    } 	CAUH;

<struct name="tagCALPSTR">
<field name="cElems">ULONG</field>
    LPSTR *pElems;
    } 	CALPSTR;

<struct name="tagCALPWSTR">
<field name="cElems">ULONG</field>
    LPWSTR *pElems;
    } 	CALPWSTR;

<struct name="tagCAFILETIME">
<field name="cElems">ULONG</field>
    FILETIME *pElems;
    } 	CAFILETIME;

<struct name="tagCACLIPDATA">
<field name="cElems">ULONG</field>
    CLIPDATA *pElems;
    } 	CACLIPDATA;

<struct name="tagCACLSID">
<field name="cElems">ULONG</field>
    CLSID *pElems;
    } 	CACLSID;

typedef WORD PROPVAR_PAD1;
typedef WORD PROPVAR_PAD2;
typedef WORD PROPVAR_PAD3;
<struct name="tagPROPVARIANT">

  union {

struct 
    {
    VARTYPE vt;
    PROPVAR_PAD1 wReserved1;
    PROPVAR_PAD2 wReserved2;
    PROPVAR_PAD3 wReserved3;
     union 
        {
          
        CHAR cVal;
        UCHAR bVal;
        SHORT iVal;
        USHORT uiVal;
        LONG lVal;
        ULONG ulVal;
        INT intVal;
        UINT uintVal;
        LARGE_INTEGER hVal;
        ULARGE_INTEGER uhVal;
        FLOAT fltVal;
        DOUBLE dblVal;
        VARIANT_BOOL boolVal;
        
        SCODE scode;
        CY cyVal;
        DATE date;
        FILETIME filetime;
        CLSID *puuid;
        CLIPDATA *pclipdata;
        BSTR bstrVal;
        BSTRBLOB bstrblobVal;
        BLOB blob;
        LPSTR pszVal;
        LPWSTR pwszVal;
        IUnknown *punkVal;
        IDispatch *pdispVal;
        IStream *pStream;
        IStorage *pStorage;
        LPVERSIONEDSTREAM pVersionedStream;
        LPSAFEARRAY parray;
        CAC cac;
        CAUB caub;
        CAI cai;
        CAUI caui;
        CAL cal;
        CAUL caul;
        CAH cah;
        CAUH cauh;
        CAFLT caflt;
        CADBL cadbl;
        CABOOL cabool;
        CASCODE cascode;
        CACY cacy;
        CADATE cadate;
        CAFILETIME cafiletime;
        CACLSID cauuid;
        CACLIPDATA caclipdata;
        CABSTR cabstr;
        CABSTRBLOB cabstrblob;
        CALPSTR calpstr;
        CALPWSTR calpwstr;
        CAPROPVARIANT capropvar;
        CHAR *pcVal;
        UCHAR *pbVal;
        SHORT *piVal;
        USHORT *puiVal;
        LONG *plVal;
        ULONG *pulVal;
        INT *pintVal;
        UINT *puintVal;
        FLOAT *pfltVal;
        DOUBLE *pdblVal;
        VARIANT_BOOL *pboolVal;
        DECIMAL *pdecVal;
        SCODE *pscode;
        CY *pcyVal;
        DATE *pdate;
        BSTR *pbstrVal;
        IUnknown **ppunkVal;
        IDispatch **ppdispVal;
        LPSAFEARRAY *pparray;
        PROPVARIANT *pvarVal;
        } 	;
    } ;

    DECIMAL decVal;
  };
};

<typedef name="LPPROPVARIANT">tagPROPVARIANT *</typedef>
enum PIDMSI_STATUS_VALUE
    {	PIDMSI_STATUS_NORMAL	= 0,
	PIDMSI_STATUS_NEW	= ( PIDMSI_STATUS_NORMAL + 1 ) ,
	PIDMSI_STATUS_PRELIM	= ( PIDMSI_STATUS_NEW + 1 ) ,
	PIDMSI_STATUS_DRAFT	= ( PIDMSI_STATUS_PRELIM + 1 ) ,
	PIDMSI_STATUS_INPROGRESS	= ( PIDMSI_STATUS_DRAFT + 1 ) ,
	PIDMSI_STATUS_EDIT	= ( PIDMSI_STATUS_INPROGRESS + 1 ) ,
	PIDMSI_STATUS_REVIEW	= ( PIDMSI_STATUS_EDIT + 1 ) ,
	PIDMSI_STATUS_PROOF	= ( PIDMSI_STATUS_REVIEW + 1 ) ,
	PIDMSI_STATUS_FINAL	= ( PIDMSI_STATUS_PROOF + 1 ) ,
	PIDMSI_STATUS_OTHER	= 0x7fff
    } ;

<struct name="tagPROPSPEC">
<field name="ulKind">ULONG</field>
     union 
        {
        PROPID propid;
        LPOLESTR lpwstr;
          
        } 	;
    } 	PROPSPEC;

<struct name="tagSTATPROPSTG">
<field name="lpwstrName">LPOLESTR</field>
<field name="propid">PROPID</field>
<field name="vt">VARTYPE</field>
    } 	STATPROPSTG;

<struct name="tagSTATPROPSETSTG">
<field name="fmtid">FMTID</field>
<field name="clsid">CLSID</field>
<field name="grfFlags">DWORD</field>
<field name="mtime">FILETIME</field>
<field name="ctime">FILETIME</field>
<field name="atime">FILETIME</field>
<field name="dwOSVersion">DWORD</field>
    } 	STATPROPSETSTG;
extern RPC_IF_HANDLE __MIDL_itf_propidl_0000_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_propidl_0000_0000_v0_0_s_ifspec;
 
extern const IID IID_IPropertyStorage;
<struct name="IPropertyStorageVtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            IPropertyStorage * This,
              const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            IPropertyStorage * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            IPropertyStorage * This);
        
<fnptr name="ReadMultiple" ret="HRESULT" convention="__stdcall">
 
            IPropertyStorage * This,
             ULONG cpspec,
              const PROPSPEC rgpspec[  ],
              PROPVARIANT rgpropvar[  ]);
        
<fnptr name="WriteMultiple" ret="HRESULT" convention="__stdcall">
 
            IPropertyStorage * This,
             ULONG cpspec,
              const PROPSPEC rgpspec[  ],
              const PROPVARIANT rgpropvar[  ],
             PROPID propidNameFirst);
        
<fnptr name="DeleteMultiple" ret="HRESULT" convention="__stdcall">
 
            IPropertyStorage * This,
             ULONG cpspec,
              const PROPSPEC rgpspec[  ]);
        
<fnptr name="ReadPropertyNames" ret="HRESULT" convention="__stdcall">
 
            IPropertyStorage * This,
             ULONG cpropid,
              const PROPID rgpropid[  ],
              LPOLESTR rglpwstrName[  ]);
        
<fnptr name="WritePropertyNames" ret="HRESULT" convention="__stdcall">
 
            IPropertyStorage * This,
             ULONG cpropid,
              const PROPID rgpropid[  ],
              const LPOLESTR rglpwstrName[  ]);
        
<fnptr name="DeletePropertyNames" ret="HRESULT" convention="__stdcall">
 
            IPropertyStorage * This,
             ULONG cpropid,
              const PROPID rgpropid[  ]);
        
<fnptr name="Commit" ret="HRESULT" convention="__stdcall">
 
            IPropertyStorage * This,
             DWORD grfCommitFlags);
        
<fnptr name="Revert" ret="HRESULT" convention="__stdcall">
 
            IPropertyStorage * This);
        
<fnptr name="Enum" ret="HRESULT" convention="__stdcall">
 
            IPropertyStorage * This,
              IEnumSTATPROPSTG **ppenum);
        
<fnptr name="SetTimes" ret="HRESULT" convention="__stdcall">
 
            IPropertyStorage * This,
              const FILETIME *pctime,
              const FILETIME *patime,
              const FILETIME *pmtime);
        
<fnptr name="SetClass" ret="HRESULT" convention="__stdcall">
 
            IPropertyStorage * This,
              const IID * const clsid);
        
<fnptr name="Stat" ret="HRESULT" convention="__stdcall">
 
            IPropertyStorage * This,
              STATPROPSETSTG *pstatpsstg);
        
        
    } IPropertyStorageVtbl;

<struct name="IPropertyStorage">
<vptr>IPropertyStorageVtbl *</vptr>
</struct>

    

 

typedef    IPropertySetStorage *LPPROPERTYSETSTORAGE;
extern const IID IID_IPropertySetStorage;
<struct name="IPropertySetStorageVtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            IPropertySetStorage * This,
              const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            IPropertySetStorage * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            IPropertySetStorage * This);
        
<fnptr name="Create" ret="HRESULT" convention="__stdcall">
 
            IPropertySetStorage * This,
              const IID * const rfmtid,
              const CLSID *pclsid,
             DWORD grfFlags,
             DWORD grfMode,
              IPropertyStorage **ppprstg);
        
<fnptr name="Open" ret="HRESULT" convention="__stdcall">
 
            IPropertySetStorage * This,
              const IID * const rfmtid,
             DWORD grfMode,
              IPropertyStorage **ppprstg);
        
<fnptr name="Delete" ret="HRESULT" convention="__stdcall">
 
            IPropertySetStorage * This,
              const IID * const rfmtid);
        
<fnptr name="Enum" ret="HRESULT" convention="__stdcall">
 
            IPropertySetStorage * This,
              IEnumSTATPROPSETSTG **ppenum);
        
        
    } IPropertySetStorageVtbl;

<struct name="IPropertySetStorage">
<vptr>IPropertySetStorageVtbl *</vptr>
</struct>

    

 

typedef    IEnumSTATPROPSTG *LPENUMSTATPROPSTG;
extern const IID IID_IEnumSTATPROPSTG;
<struct name="IEnumSTATPROPSTGVtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            IEnumSTATPROPSTG * This,
              const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            IEnumSTATPROPSTG * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            IEnumSTATPROPSTG * This);
        
<fnptr name="Next" ret="HRESULT" convention="__stdcall">
 
            IEnumSTATPROPSTG * This,
             ULONG celt,
             STATPROPSTG *rgelt,
             ULONG *pceltFetched);
        
<fnptr name="Skip" ret="HRESULT" convention="__stdcall">
 
            IEnumSTATPROPSTG * This,
             ULONG celt);
        
<fnptr name="Reset" ret="HRESULT" convention="__stdcall">
 
            IEnumSTATPROPSTG * This);
        
<fnptr name="Clone" ret="HRESULT" convention="__stdcall">
 
            IEnumSTATPROPSTG * This,
              IEnumSTATPROPSTG **ppenum);
        
        
    } IEnumSTATPROPSTGVtbl;

<struct name="IEnumSTATPROPSTG">
<vptr>IEnumSTATPROPSTGVtbl *</vptr>
</struct>

    

<function name="IEnumSTATPROPSTG_RemoteNext_Proxy" ret="HRESULT" convention="__stdcall"> 
    IEnumSTATPROPSTG * This,
     ULONG celt,
      STATPROPSTG *rgelt,
      ULONG *pceltFetched);
<function name="IEnumSTATPROPSTG_RemoteNext_Stub" ret="void" convention="__stdcall">

    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 

typedef    IEnumSTATPROPSETSTG *LPENUMSTATPROPSETSTG;
extern const IID IID_IEnumSTATPROPSETSTG;

<struct name="IEnumSTATPROPSETSTGVtbl">
        
        
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
 
            IEnumSTATPROPSETSTG * This,
              const IID * const riid,
             
              void **ppvObject);
        
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
 
            IEnumSTATPROPSETSTG * This);
        
<fnptr name="Release" ret="ULONG" convention="__stdcall">
 
            IEnumSTATPROPSETSTG * This);
        
<fnptr name="Next" ret="HRESULT" convention="__stdcall">
 
            IEnumSTATPROPSETSTG * This,
             ULONG celt,
             STATPROPSETSTG *rgelt,
             ULONG *pceltFetched);
        
<fnptr name="Skip" ret="HRESULT" convention="__stdcall">
 
            IEnumSTATPROPSETSTG * This,
             ULONG celt);
        
<fnptr name="Reset" ret="HRESULT" convention="__stdcall">
 
            IEnumSTATPROPSETSTG * This);
        
<fnptr name="Clone" ret="HRESULT" convention="__stdcall">
 
            IEnumSTATPROPSETSTG * This,
              IEnumSTATPROPSETSTG **ppenum);
        
        
    } IEnumSTATPROPSETSTGVtbl;

<struct name="IEnumSTATPROPSETSTG">
<vptr>IEnumSTATPROPSETSTGVtbl *</vptr>
</struct>

    
<function name="IEnumSTATPROPSETSTG_RemoteNext_Proxy" ret="HRESULT" convention="__stdcall"> 
    IEnumSTATPROPSETSTG * This,
     ULONG celt,
      STATPROPSETSTG *rgelt,
      ULONG *pceltFetched);
<function name="IEnumSTATPROPSETSTG_RemoteNext_Stub" ret="void" convention="__stdcall">

    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
 

typedef    IPropertyStorage *LPPROPERTYSTORAGE;

<function name="PropVariantCopy" ret="HRESULT" convention="__stdcall">
<arg name="pvarDest">PROPVARIANT *</arg>
 const PROPVARIANT * pvarSrc );
<function name="PropVariantClear" ret="HRESULT" convention="__stdcall">
 PROPVARIANT * pvar );
<function name="FreePropVariantArray" ret="HRESULT" convention="__stdcall">
<arg name="cVariants">ULONG</arg>
 PROPVARIANT * rgvars );
<function name="StgCreatePropStg" ret="HRESULT" convention="__stdcall">
<arg name="pUnk">IUnknown*</arg>
<arg name="fmtid">const IID * const</arg>
<arg name="pclsid">const CLSID *</arg>
<arg name="grfFlags">DWORD </arg>
<arg name="dwReserved">DWORD </arg>
 IPropertyStorage **ppPropStg 
</function>
<function name="StgOpenPropStg" ret="HRESULT" convention="__stdcall">
<arg name="pUnk">IUnknown*</arg>
<arg name="fmtid">const IID * const</arg>
<arg name="grfFlags">DWORD</arg>
<arg name="dwReserved">DWORD</arg>
 IPropertyStorage **ppPropStg 
</function>
<function name="StgCreatePropSetStg" ret="HRESULT" convention="__stdcall">
<arg name="pStorage">IStorage *</arg>
<arg name="dwReserved">DWORD </arg>
 IPropertySetStorage **ppPropSetStg
</function>
<function name="FmtIdToPropStgName" ret="HRESULT" convention="__stdcall">
<arg name="pfmtid">const FMTID *</arg>
  LPOLESTR oszName );
<function name="PropStgNameToFmtId" ret="HRESULT" convention="__stdcall">
<arg name="oszName">const LPOLESTR</arg>
 FMTID *pfmtid 
</function>
typedef struct tagSERIALIZEDPROPERTYVALUE		
{
    DWORD	dwType;
    BYTE	rgb[1];
} SERIALIZEDPROPERTYVALUE;

<function name="StgConvertVariantToProperty" ret="extern SERIALIZEDPROPERTYVALUE*" convention="__stdcall">
<arg name="pvar">const PROPVARIANT*</arg>
<arg name="CodePage">USHORT</arg>
<arg name="pprop">SERIALIZEDPROPERTYVALUE*</arg>
<arg name="pcb">ULONG*</arg>
<arg name="pid">PROPID</arg>
<arg name="fReserved">BOOLEAN</arg>
<arg name="pcIndirect">ULONG*</arg>
</function>
#pragma warning(pop)
extern RPC_IF_HANDLE __MIDL_itf_propidl_0000_0004_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_propidl_0000_0004_v0_0_s_ifspec;
<function name="BSTR_UserSize" ret="unsigned long" convention="__stdcall">
     unsigned long *, unsigned long            , BSTR * ); 
<function name="BSTR_UserMarshal" ret="unsigned char *" convention="__stdcall">
  unsigned long *, unsigned char *, BSTR * ); 
<function name="BSTR_UserUnmarshal" ret="unsigned char *" convention="__stdcall">
unsigned long *, unsigned char *, BSTR * ); 
<function name="BSTR_UserFree" ret="void" convention="__stdcall">
     unsigned long *, BSTR * ); 

<function name="LPSAFEARRAY_UserSize" ret="unsigned long" convention="__stdcall">
     unsigned long *, unsigned long            , LPSAFEARRAY * ); 
<function name="LPSAFEARRAY_UserMarshal" ret="unsigned char *" convention="__stdcall">
  unsigned long *, unsigned char *, LPSAFEARRAY * ); 
<function name="LPSAFEARRAY_UserUnmarshal" ret="unsigned char *" convention="__stdcall">
unsigned long *, unsigned char *, LPSAFEARRAY * ); 
<function name="LPSAFEARRAY_UserFree" ret="void" convention="__stdcall">
     unsigned long *, LPSAFEARRAY * ); 

<function name="BSTR_UserSize64" ret="unsigned long" convention="__stdcall">
     unsigned long *, unsigned long            , BSTR * ); 
<function name="BSTR_UserMarshal64" ret="unsigned char *" convention="__stdcall">
  unsigned long *, unsigned char *, BSTR * ); 
<function name="BSTR_UserUnmarshal64" ret="unsigned char *" convention="__stdcall">
unsigned long *, unsigned char *, BSTR * ); 
<function name="BSTR_UserFree64" ret="void" convention="__stdcall">
     unsigned long *, BSTR * ); 

<function name="LPSAFEARRAY_UserSize64" ret="unsigned long" convention="__stdcall">
     unsigned long *, unsigned long            , LPSAFEARRAY * ); 
<function name="LPSAFEARRAY_UserMarshal64" ret="unsigned char *" convention="__stdcall">
  unsigned long *, unsigned char *, LPSAFEARRAY * ); 
<function name="LPSAFEARRAY_UserUnmarshal64" ret="unsigned char *" convention="__stdcall">
unsigned long *, unsigned char *, LPSAFEARRAY * ); 
<function name="LPSAFEARRAY_UserFree64" ret="void" convention="__stdcall">
     unsigned long *, LPSAFEARRAY * ); 

<function name="IEnumSTATPROPSTG_Next_Proxy" ret="HRESULT" convention="__stdcall"> 
    IEnumSTATPROPSTG * This,
     ULONG celt,
     STATPROPSTG *rgelt,
     ULONG *pceltFetched);
<function name="IEnumSTATPROPSTG_Next_Stub" ret="HRESULT" convention="__stdcall"> 
    IEnumSTATPROPSTG * This,
     ULONG celt,
      STATPROPSTG *rgelt,
      ULONG *pceltFetched);

<function name="IEnumSTATPROPSETSTG_Next_Proxy" ret="HRESULT" convention="__stdcall"> 
    IEnumSTATPROPSETSTG * This,
     ULONG celt,
     STATPROPSETSTG *rgelt,
     ULONG *pceltFetched);
<function name="IEnumSTATPROPSETSTG_Next_Stub" ret="HRESULT" convention="__stdcall"> 
    IEnumSTATPROPSETSTG * This,
     ULONG celt,
      STATPROPSETSTG *rgelt,
      ULONG *pceltFetched);
<function name="CreateStdProgressIndicator" ret="HRESULT" convention="__stdcall">
<arg name="hwndParent">HWND</arg>
<arg name="pszTitle">LPCOLESTR</arg>
<arg name="pIbscCaller">IBindStatusCallback *</arg>
<arg name="ppIbsc">IBindStatusCallback **</arg>
</function>
#line 1 "\\program files\\Microsoft SDKs\\Windows\\v6.0A\\Include\\poppack.h"
#pragma warning(disable:4103)

#pragma pack(pop)

#line 1 "\\program files\\Microsoft SDKs\\Windows\\v6.0A\\Include\\oleauto.h"

#pragma once
#line 1 "\\program files\\Microsoft SDKs\\Windows\\v6.0A\\Include\\pshpack8.h"
#pragma warning(disable:4103)

#pragma pack(push,8)

extern const IID IID_StdOle;
<function name="SysAllocString" ret="BSTR" convention="__stdcall">
 const OLECHAR * psz
</function>
<function name="SysReAllocString" ret="INT" convention="__stdcall">
<arg name="pbstr">BSTR*</arg>
<arg name="psz">const OLECHAR*</arg>
</function>
<function name="SysAllocStringLen" ret="BSTR" convention="__stdcall">
<arg name="strIn">const OLECHAR *</arg>
 UINT ui
</function>
<function name="SysReAllocStringLen" ret="INT" convention="__stdcall">
<arg name="pbstr">BSTR*</arg>
<arg name="psz">const OLECHAR*</arg>
<arg name="len">unsigned int</arg>
</function>
<function name="SysFreeString" ret="void" convention="__stdcall">
 BSTR bstrString
</function>
<function name="SysStringLen" ret="UINT" convention="__stdcall">
 BSTR
</function>
<function name="SysStringByteLen" ret="UINT" convention="__stdcall">
 BSTR bstr
</function>
<function name="SysAllocStringByteLen" ret="BSTR" convention="__stdcall">
<arg name="psz">LPCSTR</arg>
  UINT len
</function>

<function name="DosDateTimeToVariantTime" ret="INT" convention="__stdcall">
<arg name="wDosDate">USHORT</arg>
<arg name="wDosTime">USHORT</arg>
  DOUBLE * pvtime
</function>

<function name="VariantTimeToDosDateTime" ret="INT" convention="__stdcall">
<arg name="vtime">DOUBLE</arg>
<arg name="pwDosDate">USHORT *</arg>
  USHORT * pwDosTime
</function>
<function name="SystemTimeToVariantTime" ret="INT" convention="__stdcall">
<arg name="lpSystemTime">LPSYSTEMTIME</arg>
  DOUBLE *pvtime
</function>
<function name="VariantTimeToSystemTime" ret="INT" convention="__stdcall">
<arg name="vtime">DOUBLE</arg>
  LPSYSTEMTIME lpSystemTime
</function>
<function name="SafeArrayAllocDescriptor" ret="HRESULT" convention="__stdcall">
<arg name="cDims">UINT</arg>
  SAFEARRAY ** ppsaOut
</function>
<function name="SafeArrayAllocDescriptorEx" ret="HRESULT" convention="__stdcall">
<arg name="vt">VARTYPE</arg>
<arg name="cDims">UINT</arg>
  SAFEARRAY ** ppsaOut
</function>
<function name="SafeArrayAllocData" ret="HRESULT" convention="__stdcall">
 SAFEARRAY * psa
</function>
<function name="SafeArrayCreate" ret="SAFEARRAY *" convention="__stdcall">
<arg name="vt">VARTYPE</arg>
<arg name="cDims">UINT</arg>
  SAFEARRAYBOUND * rgsabound
</function>
<function name="SafeArrayCreateEx" ret="SAFEARRAY *" convention="__stdcall">
<arg name="vt">VARTYPE</arg>
<arg name="cDims">UINT</arg>
<arg name="rgsabound">SAFEARRAYBOUND *</arg>
  PVOID pvExtra
</function>
<function name="SafeArrayCopyData" ret="HRESULT" convention="__stdcall">
<arg name="psaSource">SAFEARRAY *</arg>
  SAFEARRAY *psaTarget
</function>
<function name="SafeArrayDestroyDescriptor" ret="HRESULT" convention="__stdcall">
 SAFEARRAY * psa
</function>
<function name="SafeArrayDestroyData" ret="HRESULT" convention="__stdcall">
 SAFEARRAY * psa
</function>
<function name="SafeArrayDestroy" ret="HRESULT" convention="__stdcall">
 SAFEARRAY * psa
</function>
<function name="SafeArrayRedim" ret="HRESULT" convention="__stdcall">
<arg name="psa">SAFEARRAY *</arg>
  SAFEARRAYBOUND * psaboundNew
</function>
<function name="SafeArrayGetDim" ret="UINT" convention="__stdcall">
 SAFEARRAY * psa
</function>
<function name="SafeArrayGetElemsize" ret="UINT" convention="__stdcall">
 SAFEARRAY * psa
</function>
<function name="SafeArrayGetUBound" ret="HRESULT" convention="__stdcall">
<arg name="psa">SAFEARRAY *</arg>
<arg name="nDim">UINT</arg>
  LONG * plUbound
</function>
<function name="SafeArrayGetLBound" ret="HRESULT" convention="__stdcall">
<arg name="psa">SAFEARRAY *</arg>
<arg name="nDim">UINT</arg>
  LONG * plLbound
</function>
<function name="SafeArrayLock" ret="HRESULT" convention="__stdcall">
 SAFEARRAY * psa
</function>
<function name="SafeArrayUnlock" ret="HRESULT" convention="__stdcall">
 SAFEARRAY * psa
</function>
<function name="SafeArrayAccessData" ret="HRESULT" convention="__stdcall">
<arg name="psa">SAFEARRAY *</arg>
  void ** ppvData
</function>
<function name="SafeArrayUnaccessData" ret="HRESULT" convention="__stdcall">
 SAFEARRAY * psa
</function>
<function name="SafeArrayGetElement" ret="HRESULT" convention="__stdcall">
<arg name="psa">SAFEARRAY *</arg>
<arg name="rgIndices">LONG *</arg>
  void * pv
</function>
<function name="SafeArrayPutElement" ret="HRESULT" convention="__stdcall">
<arg name="psa">SAFEARRAY *</arg>
<arg name="rgIndices">LONG *</arg>
  void * pv
</function>
<function name="SafeArrayCopy" ret="HRESULT" convention="__stdcall">
<arg name="psa">SAFEARRAY *</arg>
  SAFEARRAY ** ppsaOut
</function>
<function name="SafeArrayPtrOfIndex" ret="HRESULT" convention="__stdcall">
<arg name="psa">SAFEARRAY *</arg>
<arg name="rgIndices">LONG *</arg>
  void ** ppvData
</function>
<function name="SafeArraySetRecordInfo" ret="HRESULT" convention="__stdcall">
<arg name="psa">SAFEARRAY *</arg>
  IRecordInfo * prinfo
</function>
<function name="SafeArrayGetRecordInfo" ret="HRESULT" convention="__stdcall">
<arg name="psa">SAFEARRAY *</arg>
  IRecordInfo ** prinfo
</function>
<function name="SafeArraySetIID" ret="HRESULT" convention="__stdcall">
<arg name="psa">SAFEARRAY *</arg>
  const GUID * const guid
</function>
<function name="SafeArrayGetIID" ret="HRESULT" convention="__stdcall">
<arg name="psa">SAFEARRAY *</arg>
  GUID * pguid
</function>
<function name="SafeArrayGetVartype" ret="HRESULT" convention="__stdcall">
<arg name="psa">SAFEARRAY *</arg>
  VARTYPE * pvt
</function>
<function name="SafeArrayCreateVector" ret="SAFEARRAY *" convention="__stdcall">
<arg name="vt">VARTYPE</arg>
<arg name="lLbound">LONG</arg>
  ULONG cElements
</function>
<function name="SafeArrayCreateVectorEx" ret="SAFEARRAY *" convention="__stdcall">
<arg name="vt">VARTYPE</arg>
<arg name="lLbound">LONG</arg>
<arg name="cElements">ULONG</arg>
  PVOID pvExtra
</function>
<function name="VariantInit" ret="void" convention="__stdcall">
 VARIANTARG * pvarg
</function>
<function name="VariantClear" ret="HRESULT" convention="__stdcall">
 VARIANTARG * pvarg
</function>
<function name="VariantCopy" ret="HRESULT" convention="__stdcall">
<arg name="pvargDest">VARIANTARG *</arg>
  const VARIANTARG * pvargSrc
</function>
<function name="VariantCopyInd" ret="HRESULT" convention="__stdcall">
<arg name="pvarDest">VARIANT *</arg>
  const VARIANTARG * pvargSrc
</function>
<function name="VariantChangeType" ret="HRESULT" convention="__stdcall">
<arg name="pvargDest">VARIANTARG *</arg>
<arg name="pvarSrc">const VARIANTARG *</arg>
<arg name="wFlags">USHORT</arg>
<arg name="vt">VARTYPE</arg>
</function>
<function name="VariantChangeTypeEx" ret="HRESULT" convention="__stdcall">
<arg name="pvargDest">VARIANTARG *</arg>
<arg name="pvarSrc">const VARIANTARG *</arg>
<arg name="lcid">LCID</arg>
<arg name="wFlags">USHORT</arg>
<arg name="vt">VARTYPE</arg>
</function>

                                      
                                      

				      
				      
                                      
                                      
<function name="VectorFromBstr" ret="HRESULT" convention="__stdcall">
<arg name="bstr">BSTR</arg>
<arg name="ppsa">SAFEARRAY **</arg>
</function>
<function name="BstrFromVector" ret="HRESULT" convention="__stdcall">
<arg name="psa">SAFEARRAY *</arg>
  BSTR *pbstr);

<function name="VarUI1FromI2" ret="HRESULT" convention="__stdcall">
<arg name="sIn">SHORT</arg>
  BYTE * pbOut
</function>
<function name="VarUI1FromI4" ret="HRESULT" convention="__stdcall">
<arg name="lIn">LONG</arg>
  BYTE * pbOut
</function>
<function name="VarUI1FromI8" ret="HRESULT" convention="__stdcall">
<arg name="i64In">LONG64</arg>
  BYTE * pbOut
</function>
<function name="VarUI1FromR4" ret="HRESULT" convention="__stdcall">
<arg name="fltIn">FLOAT</arg>
 BYTE * pbOut
</function>
<function name="VarUI1FromR8" ret="HRESULT" convention="__stdcall">
<arg name="dblIn">DOUBLE</arg>
  BYTE * pbOut
</function>
<function name="VarUI1FromCy" ret="HRESULT" convention="__stdcall">
<arg name="cyIn">CY</arg>
  BYTE * pbOut
</function>
<function name="VarUI1FromDate" ret="HRESULT" convention="__stdcall">
<arg name="dateIn">DATE</arg>
  BYTE * pbOut
</function>
<function name="VarUI1FromStr" ret="HRESULT" convention="__stdcall">
<arg name="strIn">LPCOLESTR</arg>
<arg name="lcid">LCID</arg>
<arg name="dwFlags">ULONG</arg>
  BYTE * pbOut
</function>
<function name="VarUI1FromDisp" ret="HRESULT" convention="__stdcall">
<arg name="pdispIn">IDispatch *</arg>
<arg name="lcid">LCID</arg>
  BYTE * pbOut
</function>
<function name="VarUI1FromBool" ret="HRESULT" convention="__stdcall">
<arg name="boolIn">VARIANT_BOOL</arg>
  BYTE * pbOut
</function>
<function name="VarUI1FromI1" ret="HRESULT" convention="__stdcall">
<arg name="cIn">CHAR</arg>
  BYTE *pbOut
</function>
<function name="VarUI1FromUI2" ret="HRESULT" convention="__stdcall">
<arg name="uiIn">USHORT</arg>
  BYTE *pbOut
</function>
<function name="VarUI1FromUI4" ret="HRESULT" convention="__stdcall">
<arg name="ulIn">ULONG</arg>
  BYTE *pbOut
</function>
<function name="VarUI1FromUI8" ret="HRESULT" convention="__stdcall">
<arg name="ui64In">ULONG64</arg>
  BYTE * pbOut
</function>
<function name="VarUI1FromDec" ret="HRESULT" convention="__stdcall">
<arg name="pdecIn">const DECIMAL *</arg>
  BYTE *pbOut
</function>

<function name="VarI2FromUI1" ret="HRESULT" convention="__stdcall">
<arg name="bIn">BYTE</arg>
  SHORT * psOut
</function>
<function name="VarI2FromI4" ret="HRESULT" convention="__stdcall">
<arg name="lIn">LONG</arg>
  SHORT * psOut
</function>
<function name="VarI2FromI8" ret="HRESULT" convention="__stdcall">
<arg name="i64In">LONG64</arg>
  SHORT * psOut
</function>
<function name="VarI2FromR4" ret="HRESULT" convention="__stdcall">
<arg name="fltIn">FLOAT</arg>
  SHORT * psOut
</function>
<function name="VarI2FromR8" ret="HRESULT" convention="__stdcall">
<arg name="dblIn">DOUBLE</arg>
  SHORT * psOut
</function>
<function name="VarI2FromCy" ret="HRESULT" convention="__stdcall">
<arg name="cyIn">CY</arg>
 SHORT * psOut
</function>
<function name="VarI2FromDate" ret="HRESULT" convention="__stdcall">
<arg name="dateIn">DATE</arg>
  SHORT * psOut
</function>
<function name="VarI2FromStr" ret="HRESULT" convention="__stdcall">
<arg name="strIn">LPCOLESTR</arg>
<arg name="lcid">LCID</arg>
<arg name="dwFlags">ULONG</arg>
  SHORT * psOut
</function>
<function name="VarI2FromDisp" ret="HRESULT" convention="__stdcall">
<arg name="pdispIn">IDispatch *</arg>
<arg name="lcid">LCID</arg>
  SHORT * psOut
</function>
<function name="VarI2FromBool" ret="HRESULT" convention="__stdcall">
<arg name="boolIn">VARIANT_BOOL</arg>
  SHORT * psOut
</function>
<function name="VarI2FromI1" ret="HRESULT" convention="__stdcall">
<arg name="cIn">CHAR</arg>
  SHORT *psOut
</function>
<function name="VarI2FromUI2" ret="HRESULT" convention="__stdcall">
<arg name="uiIn">USHORT</arg>
  SHORT *psOut
</function>
<function name="VarI2FromUI4" ret="HRESULT" convention="__stdcall">
<arg name="ulIn">ULONG</arg>
  SHORT *psOut
</function>
<function name="VarI2FromUI8" ret="HRESULT" convention="__stdcall">
<arg name="ui64In">ULONG64</arg>
  SHORT * psOut
</function>
<function name="VarI2FromDec" ret="HRESULT" convention="__stdcall">
<arg name="pdecIn">const DECIMAL *</arg>
  SHORT *psOut
</function>

<function name="VarI4FromUI1" ret="HRESULT" convention="__stdcall">
<arg name="bIn">BYTE</arg>
  LONG * plOut
</function>
<function name="VarI4FromI2" ret="HRESULT" convention="__stdcall">
<arg name="sIn">SHORT</arg>
  LONG * plOut
</function>
<function name="VarI4FromI8" ret="HRESULT" convention="__stdcall">
<arg name="i64In">LONG64</arg>
  LONG * plOut
</function>
<function name="VarI4FromR4" ret="HRESULT" convention="__stdcall">
<arg name="fltIn">FLOAT</arg>
  LONG * plOut
</function>
<function name="VarI4FromR8" ret="HRESULT" convention="__stdcall">
<arg name="dblIn">DOUBLE</arg>
  LONG * plOut
</function>
<function name="VarI4FromCy" ret="HRESULT" convention="__stdcall">
<arg name="cyIn">CY</arg>
  LONG * plOut
</function>
<function name="VarI4FromDate" ret="HRESULT" convention="__stdcall">
<arg name="dateIn">DATE</arg>
  LONG * plOut
</function>
<function name="VarI4FromStr" ret="HRESULT" convention="__stdcall">
<arg name="strIn">LPCOLESTR</arg>
<arg name="lcid">LCID</arg>
<arg name="dwFlags">ULONG</arg>
  LONG * plOut
</function>
<function name="VarI4FromDisp" ret="HRESULT" convention="__stdcall">
<arg name="pdispIn">IDispatch *</arg>
<arg name="lcid">LCID</arg>
  LONG * plOut
</function>
<function name="VarI4FromBool" ret="HRESULT" convention="__stdcall">
<arg name="boolIn">VARIANT_BOOL</arg>
  LONG * plOut
</function>
<function name="VarI4FromI1" ret="HRESULT" convention="__stdcall">
<arg name="cIn">CHAR</arg>
  LONG *plOut
</function>
<function name="VarI4FromUI2" ret="HRESULT" convention="__stdcall">
<arg name="uiIn">USHORT</arg>
  LONG *plOut
</function>
<function name="VarI4FromUI4" ret="HRESULT" convention="__stdcall">
<arg name="ulIn">ULONG</arg>
  LONG *plOut
</function>
<function name="VarI4FromUI8" ret="HRESULT" convention="__stdcall">
<arg name="ui64In">ULONG64</arg>
  LONG * plOut
</function>
<function name="VarI4FromDec" ret="HRESULT" convention="__stdcall">
<arg name="pdecIn">const DECIMAL *</arg>
  LONG *plOut
</function>
<function name="VarI4FromInt" ret="HRESULT" convention="__stdcall">
<arg name="intIn">INT</arg>
  LONG *plOut
</function>
<function name="VarI8FromUI1" ret="HRESULT" convention="__stdcall">
<arg name="bIn">BYTE</arg>
  LONG64 * pi64Out
</function>
<function name="VarI8FromI2" ret="HRESULT" convention="__stdcall">
<arg name="sIn">SHORT</arg>
  LONG64 * pi64Out
</function>
<function name="VarI8FromI4" ret="HRESULT" convention="__stdcall">
<arg name="lIn">LONG</arg>
 LONG64 * pi64Out
</function>
<function name="VarI8FromR4" ret="HRESULT" convention="__stdcall">
<arg name="fltIn">FLOAT</arg>
  LONG64 * pi64Out
</function>
<function name="VarI8FromR8" ret="HRESULT" convention="__stdcall">
<arg name="dblIn">DOUBLE</arg>
  LONG64 * pi64Out
</function>
<function name="VarI8FromCy" ret="HRESULT" convention="__stdcall">
<arg name="cyIn">CY</arg>
  LONG64 * pi64Out
</function>
<function name="VarI8FromDate" ret="HRESULT" convention="__stdcall">
<arg name="dateIn">DATE</arg>
  LONG64 * pi64Out
</function>
<function name="VarI8FromStr" ret="HRESULT" convention="__stdcall">
<arg name="strIn">LPCOLESTR</arg>
<arg name="lcid">LCID</arg>
<arg name="dwFlags">unsigned long</arg>
  LONG64 * pi64Out
</function>
<function name="VarI8FromDisp" ret="HRESULT" convention="__stdcall">
<arg name="pdispIn">IDispatch *</arg>
<arg name="lcid">LCID</arg>
  LONG64 * pi64Out
</function>
<function name="VarI8FromBool" ret="HRESULT" convention="__stdcall">
<arg name="boolIn">VARIANT_BOOL</arg>
  LONG64 * pi64Out
</function>
<function name="VarI8FromI1" ret="HRESULT" convention="__stdcall">
<arg name="cIn">CHAR</arg>
  LONG64 * pi64Out
</function>
<function name="VarI8FromUI2" ret="HRESULT" convention="__stdcall">
<arg name="uiIn">USHORT</arg>
  LONG64 * pi64Out
</function>
<function name="VarI8FromUI4" ret="HRESULT" convention="__stdcall">
<arg name="ulIn">ULONG</arg>
  LONG64 * pi64Out
</function>
<function name="VarI8FromUI8" ret="HRESULT" convention="__stdcall">
<arg name="ui64In">ULONG64</arg>
  LONG64 * pi64Out
</function>
<function name="VarI8FromDec" ret="HRESULT" convention="__stdcall">
<arg name="pdecIn">const DECIMAL *</arg>
  LONG64 * pi64Out
</function>
<function name="VarI8FromInt" ret="HRESULT" convention="__stdcall">
<arg name="intIn">INT</arg>
 LONG64 * pi64Out
</function>
<function name="VarR4FromUI1" ret="HRESULT" convention="__stdcall">
<arg name="bIn">BYTE</arg>
  FLOAT * pfltOut
</function>
<function name="VarR4FromI2" ret="HRESULT" convention="__stdcall">
<arg name="sIn">SHORT</arg>
  FLOAT * pfltOut
</function>
<function name="VarR4FromI4" ret="HRESULT" convention="__stdcall">
<arg name="lIn">LONG</arg>
  FLOAT * pfltOut
</function>
<function name="VarR4FromI8" ret="HRESULT" convention="__stdcall">
<arg name="i64In">LONG64</arg>
  FLOAT * pfltOut
</function>
<function name="VarR4FromR8" ret="HRESULT" convention="__stdcall">
<arg name="dblIn">DOUBLE</arg>
  FLOAT * pfltOut
</function>
<function name="VarR4FromCy" ret="HRESULT" convention="__stdcall">
<arg name="cyIn">CY</arg>
 FLOAT * pfltOut
</function>
<function name="VarR4FromDate" ret="HRESULT" convention="__stdcall">
<arg name="dateIn">DATE</arg>
  FLOAT * pfltOut
</function>
<function name="VarR4FromStr" ret="HRESULT" convention="__stdcall">
<arg name="strIn">LPCOLESTR</arg>
<arg name="lcid">LCID</arg>
<arg name="dwFlags">ULONG</arg>
  FLOAT *pfltOut
</function>
<function name="VarR4FromDisp" ret="HRESULT" convention="__stdcall">
<arg name="pdispIn">IDispatch *</arg>
<arg name="lcid">LCID</arg>
  FLOAT * pfltOut
</function>
<function name="VarR4FromBool" ret="HRESULT" convention="__stdcall">
<arg name="boolIn">VARIANT_BOOL</arg>
  FLOAT * pfltOut
</function>
<function name="VarR4FromI1" ret="HRESULT" convention="__stdcall">
<arg name="cIn">CHAR</arg>
  FLOAT *pfltOut
</function>
<function name="VarR4FromUI2" ret="HRESULT" convention="__stdcall">
<arg name="uiIn">USHORT</arg>
  FLOAT *pfltOut
</function>
<function name="VarR4FromUI4" ret="HRESULT" convention="__stdcall">
<arg name="ulIn">ULONG</arg>
  FLOAT *pfltOut
</function>
<function name="VarR4FromUI8" ret="HRESULT" convention="__stdcall">
<arg name="ui64In">ULONG64</arg>
  FLOAT * pfltOut
</function>
<function name="VarR4FromDec" ret="HRESULT" convention="__stdcall">
<arg name="pdecIn">const DECIMAL *</arg>
  FLOAT *pfltOut
</function>

<function name="VarR8FromUI1" ret="HRESULT" convention="__stdcall">
<arg name="bIn">BYTE</arg>
  DOUBLE * pdblOut
</function>
<function name="VarR8FromI2" ret="HRESULT" convention="__stdcall">
<arg name="sIn">SHORT</arg>
  DOUBLE * pdblOut
</function>
<function name="VarR8FromI4" ret="HRESULT" convention="__stdcall">
<arg name="lIn">LONG</arg>
  DOUBLE * pdblOut
</function>
<function name="VarR8FromI8" ret="HRESULT" convention="__stdcall">
<arg name="i64In">LONG64</arg>
  DOUBLE * pdblOut
</function>
<function name="VarR8FromR4" ret="HRESULT" convention="__stdcall">
<arg name="fltIn">FLOAT</arg>
  DOUBLE * pdblOut
</function>
<function name="VarR8FromCy" ret="HRESULT" convention="__stdcall">
<arg name="cyIn">CY</arg>
 DOUBLE * pdblOut
</function>
<function name="VarR8FromDate" ret="HRESULT" convention="__stdcall">
<arg name="dateIn">DATE</arg>
  DOUBLE * pdblOut
</function>
<function name="VarR8FromStr" ret="HRESULT" convention="__stdcall">
<arg name="strIn">LPCOLESTR</arg>
<arg name="lcid">LCID</arg>
<arg name="dwFlags">ULONG</arg>
  DOUBLE *pdblOut
</function>
<function name="VarR8FromDisp" ret="HRESULT" convention="__stdcall">
<arg name="pdispIn">IDispatch *</arg>
<arg name="lcid">LCID</arg>
  DOUBLE * pdblOut
</function>
<function name="VarR8FromBool" ret="HRESULT" convention="__stdcall">
<arg name="boolIn">VARIANT_BOOL</arg>
  DOUBLE * pdblOut
</function>
<function name="VarR8FromI1" ret="HRESULT" convention="__stdcall">
<arg name="cIn">CHAR</arg>
 DOUBLE *pdblOut
</function>
<function name="VarR8FromUI2" ret="HRESULT" convention="__stdcall">
<arg name="uiIn">USHORT</arg>
  DOUBLE *pdblOut
</function>
<function name="VarR8FromUI4" ret="HRESULT" convention="__stdcall">
<arg name="ulIn">ULONG</arg>
  DOUBLE *pdblOut
</function>
<function name="VarR8FromUI8" ret="HRESULT" convention="__stdcall">
<arg name="ui64In">ULONG64</arg>
  DOUBLE * pdblOut
</function>
<function name="VarR8FromDec" ret="HRESULT" convention="__stdcall">
<arg name="pdecIn">const DECIMAL *</arg>
  DOUBLE *pdblOut
</function>

<function name="VarDateFromUI1" ret="HRESULT" convention="__stdcall">
<arg name="bIn">BYTE</arg>
  DATE * pdateOut
</function>
<function name="VarDateFromI2" ret="HRESULT" convention="__stdcall">
<arg name="sIn">SHORT</arg>
  DATE * pdateOut
</function>
<function name="VarDateFromI4" ret="HRESULT" convention="__stdcall">
<arg name="lIn">LONG</arg>
  DATE * pdateOut
</function>
<function name="VarDateFromI8" ret="HRESULT" convention="__stdcall">
<arg name="i64In">LONG64</arg>
  DATE * pdateOut
</function>
<function name="VarDateFromR4" ret="HRESULT" convention="__stdcall">
<arg name="fltIn">FLOAT</arg>
  DATE * pdateOut
</function>
<function name="VarDateFromR8" ret="HRESULT" convention="__stdcall">
<arg name="dblIn">DOUBLE</arg>
  DATE * pdateOut
</function>
<function name="VarDateFromCy" ret="HRESULT" convention="__stdcall">
<arg name="cyIn">CY</arg>
  DATE * pdateOut
</function>
<function name="VarDateFromStr" ret="HRESULT" convention="__stdcall">
<arg name="strIn">LPCOLESTR</arg>
<arg name="lcid">LCID</arg>
<arg name="dwFlags">ULONG</arg>
  DATE *pdateOut
</function>
<function name="VarDateFromDisp" ret="HRESULT" convention="__stdcall">
<arg name="pdispIn">IDispatch *</arg>
<arg name="lcid">LCID</arg>
  DATE * pdateOut
</function>
<function name="VarDateFromBool" ret="HRESULT" convention="__stdcall">
<arg name="boolIn">VARIANT_BOOL</arg>
  DATE * pdateOut
</function>
<function name="VarDateFromI1" ret="HRESULT" convention="__stdcall">
<arg name="cIn">CHAR</arg>
  DATE *pdateOut
</function>
<function name="VarDateFromUI2" ret="HRESULT" convention="__stdcall">
<arg name="uiIn">USHORT</arg>
  DATE *pdateOut
</function>
<function name="VarDateFromUI4" ret="HRESULT" convention="__stdcall">
<arg name="ulIn">ULONG</arg>
  DATE *pdateOut
</function>
<function name="VarDateFromUI8" ret="HRESULT" convention="__stdcall">
<arg name="ui64In">ULONG64</arg>
  DATE * pdateOut
</function>
<function name="VarDateFromDec" ret="HRESULT" convention="__stdcall">
<arg name="pdecIn">const DECIMAL *</arg>
  DATE *pdateOut
</function>

<function name="VarCyFromUI1" ret="HRESULT" convention="__stdcall">
<arg name="bIn">BYTE</arg>
  CY * pcyOut
</function>
<function name="VarCyFromI2" ret="HRESULT" convention="__stdcall">
<arg name="sIn">SHORT</arg>
  CY * pcyOut
</function>
<function name="VarCyFromI4" ret="HRESULT" convention="__stdcall">
<arg name="lIn">LONG</arg>
  CY * pcyOut
</function>
<function name="VarCyFromI8" ret="HRESULT" convention="__stdcall">
<arg name="i64In">LONG64</arg>
  CY * pcyOut
</function>
<function name="VarCyFromR4" ret="HRESULT" convention="__stdcall">
<arg name="fltIn">FLOAT</arg>
  CY * pcyOut
</function>
<function name="VarCyFromR8" ret="HRESULT" convention="__stdcall">
<arg name="dblIn">DOUBLE</arg>
  CY * pcyOut
</function>
<function name="VarCyFromDate" ret="HRESULT" convention="__stdcall">
<arg name="dateIn">DATE</arg>
  CY * pcyOut
</function>
<function name="VarCyFromStr" ret="HRESULT" convention="__stdcall">
<arg name="strIn">LPCOLESTR</arg>
<arg name="lcid">LCID</arg>
<arg name="dwFlags">ULONG</arg>
  CY * pcyOut
</function>
<function name="VarCyFromDisp" ret="HRESULT" convention="__stdcall">
<arg name="pdispIn">IDispatch *</arg>
<arg name="lcid">LCID</arg>
  CY * pcyOut
</function>
<function name="VarCyFromBool" ret="HRESULT" convention="__stdcall">
<arg name="boolIn">VARIANT_BOOL</arg>
  CY * pcyOut
</function>
<function name="VarCyFromI1" ret="HRESULT" convention="__stdcall">
<arg name="cIn">CHAR</arg>
  CY *pcyOut
</function>
<function name="VarCyFromUI2" ret="HRESULT" convention="__stdcall">
<arg name="uiIn">USHORT</arg>
  CY *pcyOut
</function>
<function name="VarCyFromUI4" ret="HRESULT" convention="__stdcall">
<arg name="ulIn">ULONG</arg>
  CY *pcyOut
</function>
<function name="VarCyFromUI8" ret="HRESULT" convention="__stdcall">
<arg name="ui64In">ULONG64</arg>
  CY * pcyOut
</function>
<function name="VarCyFromDec" ret="HRESULT" convention="__stdcall">
<arg name="pdecIn">const DECIMAL *</arg>
  CY *pcyOut
</function>

<function name="VarBstrFromUI1" ret="HRESULT" convention="__stdcall">
<arg name="bVal">BYTE</arg>
<arg name="lcid">LCID</arg>
<arg name="dwFlags">ULONG</arg>
  BSTR * pbstrOut
</function>
<function name="VarBstrFromI2" ret="HRESULT" convention="__stdcall">
<arg name="iVal">SHORT</arg>
<arg name="lcid">LCID</arg>
<arg name="dwFlags">ULONG</arg>
 BSTR * pbstrOut
</function>
<function name="VarBstrFromI4" ret="HRESULT" convention="__stdcall">
<arg name="lIn">LONG</arg>
<arg name="lcid">LCID</arg>
<arg name="dwFlags">ULONG</arg>
  BSTR * pbstrOut
</function>
<function name="VarBstrFromI8" ret="HRESULT" convention="__stdcall">
<arg name="i64In">LONG64</arg>
<arg name="lcid">LCID</arg>
<arg name="dwFlags">unsigned long</arg>
  BSTR * pbstrOut
</function>
<function name="VarBstrFromR4" ret="HRESULT" convention="__stdcall">
<arg name="fltIn">FLOAT</arg>
<arg name="lcid">LCID</arg>
<arg name="dwFlags">ULONG</arg>
  BSTR * pbstrOut
</function>
<function name="VarBstrFromR8" ret="HRESULT" convention="__stdcall">
<arg name="dblIn">DOUBLE</arg>
<arg name="lcid">LCID</arg>
<arg name="dwFlags">ULONG</arg>
  BSTR * pbstrOut
</function>
<function name="VarBstrFromCy" ret="HRESULT" convention="__stdcall">
<arg name="cyIn">CY</arg>
<arg name="lcid">LCID</arg>
<arg name="dwFlags">ULONG</arg>
  BSTR * pbstrOut
</function>
<function name="VarBstrFromDate" ret="HRESULT" convention="__stdcall">
<arg name="dateIn">DATE</arg>
<arg name="lcid">LCID</arg>
<arg name="dwFlags">ULONG</arg>
  BSTR * pbstrOut
</function>
<function name="VarBstrFromDisp" ret="HRESULT" convention="__stdcall">
<arg name="pdispIn">IDispatch *</arg>
<arg name="lcid">LCID</arg>
<arg name="dwFlags">ULONG</arg>
  BSTR * pbstrOut
</function>
<function name="VarBstrFromBool" ret="HRESULT" convention="__stdcall">
<arg name="boolIn">VARIANT_BOOL</arg>
<arg name="lcid">LCID</arg>
<arg name="dwFlags">ULONG</arg>
  BSTR * pbstrOut
</function>
<function name="VarBstrFromI1" ret="HRESULT" convention="__stdcall">
<arg name="cIn">CHAR</arg>
<arg name="lcid">LCID</arg>
<arg name="dwFlags">ULONG</arg>
  BSTR *pbstrOut
</function>
<function name="VarBstrFromUI2" ret="HRESULT" convention="__stdcall">
<arg name="uiIn">USHORT</arg>
<arg name="lcid">LCID</arg>
<arg name="dwFlags">ULONG</arg>
  BSTR *pbstrOut
</function>
<function name="VarBstrFromUI4" ret="HRESULT" convention="__stdcall">
<arg name="ulIn">ULONG</arg>
<arg name="lcid">LCID</arg>
<arg name="dwFlags">ULONG</arg>
  BSTR *pbstrOut
</function>
<function name="VarBstrFromUI8" ret="HRESULT" convention="__stdcall">
<arg name="ui64In">ULONG64</arg>
<arg name="lcid">LCID</arg>
<arg name="dwFlags">unsigned long</arg>
  BSTR * pbstrOut
</function>
<function name="VarBstrFromDec" ret="HRESULT" convention="__stdcall">
<arg name="pdecIn">const DECIMAL *</arg>
<arg name="lcid">LCID </arg>
<arg name="dwFlags">ULONG </arg>
  BSTR *pbstrOut
</function>

<function name="VarBoolFromUI1" ret="HRESULT" convention="__stdcall">
<arg name="bIn">BYTE</arg>
  VARIANT_BOOL * pboolOut
</function>
<function name="VarBoolFromI2" ret="HRESULT" convention="__stdcall">
<arg name="sIn">SHORT</arg>
<arg name="pboolOut">VARIANT_BOOL *</arg>
</function>
<function name="VarBoolFromI4" ret="HRESULT" convention="__stdcall">
<arg name="lIn">LONG</arg>
  VARIANT_BOOL * pboolOut
</function>
<function name="VarBoolFromI8" ret="HRESULT" convention="__stdcall">
<arg name="i64In">LONG64</arg>
  VARIANT_BOOL * pboolOut
</function>
<function name="VarBoolFromR4" ret="HRESULT" convention="__stdcall">
<arg name="fltIn">FLOAT</arg>
  VARIANT_BOOL * pboolOut
</function>
<function name="VarBoolFromR8" ret="HRESULT" convention="__stdcall">
<arg name="dblIn">DOUBLE</arg>
  VARIANT_BOOL * pboolOut
</function>
<function name="VarBoolFromDate" ret="HRESULT" convention="__stdcall">
<arg name="dateIn">DATE</arg>
  VARIANT_BOOL * pboolOut
</function>
<function name="VarBoolFromCy" ret="HRESULT" convention="__stdcall">
<arg name="cyIn">CY</arg>
  VARIANT_BOOL * pboolOut
</function>
<function name="VarBoolFromStr" ret="HRESULT" convention="__stdcall">
<arg name="strIn">LPCOLESTR</arg>
<arg name="lcid">LCID</arg>
<arg name="dwFlags">ULONG</arg>
  VARIANT_BOOL * pboolOut
</function>
<function name="VarBoolFromDisp" ret="HRESULT" convention="__stdcall">
<arg name="pdispIn">IDispatch *</arg>
<arg name="lcid">LCID</arg>
  VARIANT_BOOL * pboolOut
</function>
<function name="VarBoolFromI1" ret="HRESULT" convention="__stdcall">
<arg name="cIn">CHAR</arg>
  VARIANT_BOOL *pboolOut
</function>
<function name="VarBoolFromUI2" ret="HRESULT" convention="__stdcall">
<arg name="uiIn">USHORT</arg>
  VARIANT_BOOL *pboolOut
</function>
<function name="VarBoolFromUI4" ret="HRESULT" convention="__stdcall">
<arg name="ulIn">ULONG</arg>
  VARIANT_BOOL *pboolOut
</function>
<function name="VarBoolFromUI8" ret="HRESULT" convention="__stdcall">
<arg name="i64In">ULONG64</arg>
  VARIANT_BOOL * pboolOut
</function>
<function name="VarBoolFromDec" ret="HRESULT" convention="__stdcall">
<arg name="pdecIn">const DECIMAL *</arg>
  VARIANT_BOOL *pboolOut
</function>

<function name="VarI1FromUI1" ret="HRESULT" convention="__stdcall">
<arg name="bIn">BYTE</arg>
<arg name="pcOut">CHAR *</arg>
</function>

<function name="VarI1FromI2" ret="HRESULT" convention="__stdcall">
<arg name="uiIn">SHORT</arg>
<arg name="pcOut">CHAR *</arg>
</function>

<function name="VarI1FromI4" ret="HRESULT" convention="__stdcall">
<arg name="lIn">LONG</arg>
<arg name="pcOut">CHAR *</arg>
</function>

<function name="VarI1FromI8" ret="HRESULT" convention="__stdcall">
<arg name="i64In">LONG64</arg>
<arg name="pcOut">CHAR *</arg>
</function>

<function name="VarI1FromR4" ret="HRESULT" convention="__stdcall">
<arg name="fltIn">FLOAT</arg>
<arg name="pcOut">CHAR *</arg>
</function>

<function name="VarI1FromR8" ret="HRESULT" convention="__stdcall">
<arg name="dblIn">DOUBLE</arg>
<arg name="pcOut">CHAR *</arg>
</function>

<function name="VarI1FromDate" ret="HRESULT" convention="__stdcall">
<arg name="dateIn">DATE</arg>
<arg name="pcOut">CHAR *</arg>
</function>

<function name="VarI1FromCy" ret="HRESULT" convention="__stdcall">
<arg name="cyIn">CY</arg>
<arg name="pcOut">CHAR *</arg>
</function>

<function name="VarI1FromStr" ret="HRESULT" convention="__stdcall">
<arg name="strIn">LPCOLESTR</arg>
<arg name="lcid">LCID</arg>
<arg name="dwFlags">ULONG</arg>
<arg name="pcOut">CHAR *</arg>
</function>

<function name="VarI1FromDisp" ret="HRESULT" convention="__stdcall">

     IDispatch *pdispIn,
     LCID lcid,
<arg name="pcOut">CHAR *</arg>
</function>

<function name="VarI1FromBool" ret="HRESULT" convention="__stdcall">
<arg name="boolIn">VARIANT_BOOL</arg>
<arg name="pcOut">CHAR *</arg>
</function>

<function name="VarI1FromUI2" ret="HRESULT" convention="__stdcall">
<arg name="uiIn">USHORT</arg>
<arg name="pcOut">CHAR *</arg>
</function>

<function name="VarI1FromUI4" ret="HRESULT" convention="__stdcall">
<arg name="ulIn">ULONG</arg>
<arg name="pcOut">CHAR *</arg>
</function>

<function name="VarI1FromUI8" ret="HRESULT" convention="__stdcall">
<arg name="i64In">ULONG64</arg>
<arg name="pcOut">CHAR *</arg>
</function>

<function name="VarI1FromDec" ret="HRESULT" convention="__stdcall">

     const DECIMAL *pdecIn,
<arg name="pcOut">CHAR *</arg>
</function>

<function name="VarUI2FromUI1" ret="HRESULT" convention="__stdcall">
<arg name="bIn">BYTE</arg>
  USHORT *puiOut
</function>
<function name="VarUI2FromI2" ret="HRESULT" convention="__stdcall">
<arg name="uiIn">SHORT</arg>
  USHORT *puiOut
</function>
<function name="VarUI2FromI4" ret="HRESULT" convention="__stdcall">
<arg name="lIn">LONG</arg>
  USHORT *puiOut
</function>
<function name="VarUI2FromI8" ret="HRESULT" convention="__stdcall">
<arg name="i64In">LONG64</arg>
  USHORT *puiOut
</function>
<function name="VarUI2FromR4" ret="HRESULT" convention="__stdcall">
<arg name="fltIn">FLOAT</arg>
  USHORT *puiOut
</function>
<function name="VarUI2FromR8" ret="HRESULT" convention="__stdcall">
<arg name="dblIn">DOUBLE</arg>
 USHORT *puiOut
</function>
<function name="VarUI2FromDate" ret="HRESULT" convention="__stdcall">
<arg name="dateIn">DATE</arg>
  USHORT *puiOut
</function>
<function name="VarUI2FromCy" ret="HRESULT" convention="__stdcall">
<arg name="cyIn">CY</arg>
  USHORT *puiOut
</function>
<function name="VarUI2FromStr" ret="HRESULT" convention="__stdcall">
<arg name="strIn">LPCOLESTR</arg>
<arg name="lcid">LCID</arg>
<arg name="dwFlags">ULONG</arg>
  USHORT *puiOut
</function>
<function name="VarUI2FromDisp" ret="HRESULT" convention="__stdcall">
<arg name="pdispIn">IDispatch *</arg>
<arg name="lcid">LCID </arg>
  USHORT *puiOut
</function>
<function name="VarUI2FromBool" ret="HRESULT" convention="__stdcall">
<arg name="boolIn">VARIANT_BOOL</arg>
  USHORT *puiOut
</function>
<function name="VarUI2FromI1" ret="HRESULT" convention="__stdcall">
<arg name="cIn">CHAR</arg>
  USHORT *puiOut
</function>
<function name="VarUI2FromUI4" ret="HRESULT" convention="__stdcall">
<arg name="ulIn">ULONG</arg>
  USHORT *puiOut
</function>
<function name="VarUI2FromUI8" ret="HRESULT" convention="__stdcall">
<arg name="i64In">ULONG64</arg>
  USHORT *puiOut
</function>
<function name="VarUI2FromDec" ret="HRESULT" convention="__stdcall">
<arg name="pdecIn">const DECIMAL *</arg>
  USHORT *puiOut
</function>

<function name="VarUI4FromUI1" ret="HRESULT" convention="__stdcall">
<arg name="bIn">BYTE</arg>
  ULONG *pulOut
</function>
<function name="VarUI4FromI2" ret="HRESULT" convention="__stdcall">
<arg name="uiIn">SHORT</arg>
  ULONG *pulOut
</function>
<function name="VarUI4FromI4" ret="HRESULT" convention="__stdcall">
<arg name="lIn">LONG</arg>
  ULONG *pulOut
</function>
<function name="VarUI4FromI8" ret="HRESULT" convention="__stdcall">
<arg name="i64In">LONG64</arg>
  ULONG *plOut
</function>
<function name="VarUI4FromR4" ret="HRESULT" convention="__stdcall">
<arg name="fltIn">FLOAT</arg>
  ULONG *pulOut
</function>
<function name="VarUI4FromR8" ret="HRESULT" convention="__stdcall">
<arg name="dblIn">DOUBLE</arg>
  ULONG *pulOut
</function>
<function name="VarUI4FromDate" ret="HRESULT" convention="__stdcall">
<arg name="dateIn">DATE</arg>
  ULONG *pulOut
</function>
<function name="VarUI4FromCy" ret="HRESULT" convention="__stdcall">
<arg name="cyIn">CY</arg>
  ULONG *pulOut
</function>
<function name="VarUI4FromStr" ret="HRESULT" convention="__stdcall">
<arg name="strIn">LPCOLESTR</arg>
<arg name="lcid">LCID</arg>
<arg name="dwFlags">ULONG</arg>
  ULONG *pulOut
</function>
<function name="VarUI4FromDisp" ret="HRESULT" convention="__stdcall">
<arg name="pdispIn">IDispatch *</arg>
<arg name="lcid">LCID </arg>
  ULONG *pulOut
</function>
<function name="VarUI4FromBool" ret="HRESULT" convention="__stdcall">
<arg name="boolIn">VARIANT_BOOL</arg>
  ULONG *pulOut
</function>
<function name="VarUI4FromI1" ret="HRESULT" convention="__stdcall">
<arg name="cIn">CHAR</arg>
  ULONG *pulOut
</function>
<function name="VarUI4FromUI2" ret="HRESULT" convention="__stdcall">
<arg name="uiIn">USHORT</arg>
  ULONG *pulOut
</function>
<function name="VarUI4FromUI8" ret="HRESULT" convention="__stdcall">
<arg name="ui64In">ULONG64</arg>
  ULONG *plOut
</function>
<function name="VarUI4FromDec" ret="HRESULT" convention="__stdcall">
<arg name="pdecIn">const DECIMAL *</arg>
  ULONG *pulOut
</function>
<function name="VarUI8FromUI1" ret="HRESULT" convention="__stdcall">
<arg name="bIn">BYTE</arg>
  ULONG64 * pi64Out
</function>
<function name="VarUI8FromI2" ret="HRESULT" convention="__stdcall">
<arg name="sIn">SHORT</arg>
  ULONG64 * pi64Out
</function>
<function name="VarUI8FromI4" ret="HRESULT" convention="__stdcall">
<arg name="lIn">LONG</arg>
  ULONG64 * pi64Out
</function>
<function name="VarUI8FromI8" ret="HRESULT" convention="__stdcall">
<arg name="ui64In">LONG64</arg>
  ULONG64 * pi64Out
</function>
<function name="VarUI8FromR4" ret="HRESULT" convention="__stdcall">
<arg name="fltIn">FLOAT</arg>
  ULONG64 * pi64Out
</function>
<function name="VarUI8FromR8" ret="HRESULT" convention="__stdcall">
<arg name="dblIn">DOUBLE</arg>
  ULONG64 * pi64Out
</function>
<function name="VarUI8FromCy" ret="HRESULT" convention="__stdcall">
<arg name="cyIn">CY</arg>
  ULONG64 * pi64Out
</function>
<function name="VarUI8FromDate" ret="HRESULT" convention="__stdcall">
<arg name="dateIn">DATE</arg>
  ULONG64 * pi64Out
</function>
<function name="VarUI8FromStr" ret="HRESULT" convention="__stdcall">
<arg name="strIn">LPCOLESTR</arg>
<arg name="lcid">LCID</arg>
<arg name="dwFlags">unsigned long</arg>
  ULONG64 * pi64Out
</function>
<function name="VarUI8FromDisp" ret="HRESULT" convention="__stdcall">
<arg name="pdispIn">IDispatch *</arg>
<arg name="lcid">LCID</arg>
  ULONG64 * pi64Out
</function>
<function name="VarUI8FromBool" ret="HRESULT" convention="__stdcall">
<arg name="boolIn">VARIANT_BOOL</arg>
  ULONG64 * pi64Out
</function>
<function name="VarUI8FromI1" ret="HRESULT" convention="__stdcall">
<arg name="cIn">CHAR</arg>
  ULONG64 * pi64Out
</function>
<function name="VarUI8FromUI2" ret="HRESULT" convention="__stdcall">
<arg name="uiIn">USHORT</arg>
  ULONG64 * pi64Out
</function>
<function name="VarUI8FromUI4" ret="HRESULT" convention="__stdcall">
<arg name="ulIn">ULONG</arg>
  ULONG64 * pi64Out
</function>
<function name="VarUI8FromDec" ret="HRESULT" convention="__stdcall">
<arg name="pdecIn">const DECIMAL *</arg>
  ULONG64 * pi64Out
</function>
<function name="VarUI8FromInt" ret="HRESULT" convention="__stdcall">
<arg name="intIn">INT</arg>
 ULONG64 * pi64Out
</function>
<function name="VarDecFromUI1" ret="HRESULT" convention="__stdcall">
<arg name="bIn">BYTE</arg>
  DECIMAL *pdecOut
</function>
<function name="VarDecFromI2" ret="HRESULT" convention="__stdcall">
<arg name="uiIn">SHORT</arg>
  DECIMAL *pdecOut
</function>
<function name="VarDecFromI4" ret="HRESULT" convention="__stdcall">
<arg name="lIn">LONG</arg>
  DECIMAL *pdecOut
</function>
<function name="VarDecFromI8" ret="HRESULT" convention="__stdcall">
<arg name="i64In">LONG64</arg>
  DECIMAL *pdecOut
</function>
<function name="VarDecFromR4" ret="HRESULT" convention="__stdcall">
<arg name="fltIn">FLOAT</arg>
  DECIMAL *pdecOut
</function>
<function name="VarDecFromR8" ret="HRESULT" convention="__stdcall">
<arg name="dblIn">DOUBLE</arg>
  DECIMAL *pdecOut
</function>
<function name="VarDecFromDate" ret="HRESULT" convention="__stdcall">
<arg name="dateIn">DATE</arg>
  DECIMAL *pdecOut
</function>
<function name="VarDecFromCy" ret="HRESULT" convention="__stdcall">
<arg name="cyIn">CY</arg>
  DECIMAL *pdecOut
</function>
<function name="VarDecFromStr" ret="HRESULT" convention="__stdcall">
<arg name="strIn">LPCOLESTR</arg>
<arg name="lcid">LCID</arg>
<arg name="dwFlags">ULONG</arg>
  DECIMAL *pdecOut
</function>
<function name="VarDecFromDisp" ret="HRESULT" convention="__stdcall">
<arg name="pdispIn">IDispatch *</arg>
<arg name="lcid">LCID </arg>
  DECIMAL *pdecOut
</function>
<function name="VarDecFromBool" ret="HRESULT" convention="__stdcall">
<arg name="boolIn">VARIANT_BOOL</arg>
  DECIMAL *pdecOut
</function>
<function name="VarDecFromI1" ret="HRESULT" convention="__stdcall">
<arg name="cIn">CHAR</arg>
  DECIMAL *pdecOut
</function>
<function name="VarDecFromUI2" ret="HRESULT" convention="__stdcall">
<arg name="uiIn">USHORT</arg>
  DECIMAL *pdecOut
</function>
<function name="VarDecFromUI4" ret="HRESULT" convention="__stdcall">
<arg name="ulIn">ULONG</arg>
  DECIMAL *pdecOut
</function>
<function name="VarDecFromUI8" ret="HRESULT" convention="__stdcall">
<arg name="ui64In">ULONG64</arg>
  DECIMAL *pdecOut
</function>

<function name="VarI4FromI8" ret="HRESULT" convention="__stdcall">
<arg name="i64In">LONG64</arg>
 LONG *plOut
</function>
<function name="VarI4FromUI8" ret="HRESULT" convention="__stdcall">
<arg name="ui64In">ULONG64</arg>
 LONG *plOut
</function>

<struct>
<field name="cDig">INT</field>
<field name="dwInFlags">ULONG</field>
<field name="dwOutFlags">ULONG</field>
<field name="cchUsed">INT</field>
<field name="nBaseShift">INT</field>
<field name="nPwr10">INT</field>
} NUMPARSE;

<function name="VarParseNumFromStr" ret="HRESULT" convention="__stdcall">
<arg name="strIn">LPCOLESTR</arg>
<arg name="lcid">LCID</arg>
<arg name="dwFlags">ULONG</arg>
<arg name="pnumprs">NUMPARSE *</arg>
<arg name="rgbDig">BYTE *</arg>
</function>

<function name="VarNumFromParseNum" ret="HRESULT" convention="__stdcall">
<arg name="pnumprs">NUMPARSE *</arg>
<arg name="rgbDig">BYTE *</arg>
<arg name="dwVtBits">ULONG</arg>
<arg name="pvar">VARIANT *</arg>
</function>
<function name="VarAdd" ret="extern HRESULT" convention="__stdcall">
<arg name="pvarLeft">LPVARIANT</arg>
<arg name="pvarRight">LPVARIANT</arg>
<arg name="pvarResult">LPVARIANT</arg>
</function>
<function name="VarAnd" ret="extern HRESULT" convention="__stdcall">
<arg name="pvarLeft">LPVARIANT</arg>
<arg name="pvarRight">LPVARIANT</arg>
<arg name="pvarResult">LPVARIANT</arg>
</function>
<function name="VarCat" ret="extern HRESULT" convention="__stdcall">
<arg name="pvarLeft">LPVARIANT</arg>
<arg name="pvarRight">LPVARIANT</arg>
<arg name="pvarResult">LPVARIANT</arg>
</function>
<function name="VarDiv" ret="extern HRESULT" convention="__stdcall">
<arg name="pvarLeft">LPVARIANT</arg>
<arg name="pvarRight">LPVARIANT</arg>
<arg name="pvarResult">LPVARIANT</arg>
</function>
<function name="VarEqv" ret="extern HRESULT" convention="__stdcall">
<arg name="pvarLeft">LPVARIANT</arg>
<arg name="pvarRight">LPVARIANT</arg>
<arg name="pvarResult">LPVARIANT</arg>
</function>
<function name="VarIdiv" ret="extern HRESULT" convention="__stdcall">
<arg name="pvarLeft">LPVARIANT</arg>
<arg name="pvarRight">LPVARIANT</arg>
<arg name="pvarResult">LPVARIANT</arg>
</function>
<function name="VarImp" ret="extern HRESULT" convention="__stdcall">
<arg name="pvarLeft">LPVARIANT</arg>
<arg name="pvarRight">LPVARIANT</arg>
<arg name="pvarResult">LPVARIANT</arg>
</function>
<function name="VarMod" ret="extern HRESULT" convention="__stdcall">
<arg name="pvarLeft">LPVARIANT</arg>
<arg name="pvarRight">LPVARIANT</arg>
<arg name="pvarResult">LPVARIANT</arg>
</function>
<function name="VarMul" ret="extern HRESULT" convention="__stdcall">
<arg name="pvarLeft">LPVARIANT</arg>
<arg name="pvarRight">LPVARIANT</arg>
<arg name="pvarResult">LPVARIANT</arg>
</function>
<function name="VarOr" ret="extern HRESULT" convention="__stdcall">
<arg name="pvarLeft">LPVARIANT</arg>
<arg name="pvarRight">LPVARIANT</arg>
<arg name="pvarResult">LPVARIANT</arg>
</function>
<function name="VarPow" ret="extern HRESULT" convention="__stdcall">
<arg name="pvarLeft">LPVARIANT</arg>
<arg name="pvarRight">LPVARIANT</arg>
<arg name="pvarResult">LPVARIANT</arg>
</function>
<function name="VarSub" ret="extern HRESULT" convention="__stdcall">
<arg name="pvarLeft">LPVARIANT</arg>
<arg name="pvarRight">LPVARIANT</arg>
<arg name="pvarResult">LPVARIANT</arg>
</function>
<function name="VarXor" ret="extern HRESULT" convention="__stdcall">
<arg name="pvarLeft">LPVARIANT</arg>
<arg name="pvarRight">LPVARIANT</arg>
<arg name="pvarResult">LPVARIANT</arg>
</function>

<function name="VarAbs" ret="extern HRESULT" convention="__stdcall">
<arg name="pvarIn">LPVARIANT</arg>
<arg name="pvarResult">LPVARIANT</arg>
</function>
<function name="VarFix" ret="extern HRESULT" convention="__stdcall">
<arg name="pvarIn">LPVARIANT</arg>
<arg name="pvarResult">LPVARIANT</arg>
</function>
<function name="VarInt" ret="extern HRESULT" convention="__stdcall">
<arg name="pvarIn">LPVARIANT</arg>
<arg name="pvarResult">LPVARIANT</arg>
</function>
<function name="VarNeg" ret="extern HRESULT" convention="__stdcall">
<arg name="pvarIn">LPVARIANT</arg>
<arg name="pvarResult">LPVARIANT</arg>
</function>
<function name="VarNot" ret="extern HRESULT" convention="__stdcall">
<arg name="pvarIn">LPVARIANT</arg>
<arg name="pvarResult">LPVARIANT</arg>
</function>

<function name="VarRound" ret="extern HRESULT" convention="__stdcall">
<arg name="pvarIn">LPVARIANT</arg>
<arg name="cDecimals">int</arg>
<arg name="pvarResult">LPVARIANT</arg>
</function>
<function name="VarCmp" ret="extern HRESULT" convention="__stdcall">
<arg name="pvarLeft">LPVARIANT</arg>
<arg name="pvarRight">LPVARIANT</arg>
<arg name="lcid">LCID</arg>
<arg name="dwFlags">ULONG</arg>
</function>

<function name="VarDecAdd" ret="extern HRESULT" convention="__stdcall">
<arg name="pdecLeft">LPDECIMAL</arg>
<arg name="pdecRight">LPDECIMAL</arg>
<arg name="pdecResult">LPDECIMAL</arg>
</function>
<function name="VarDecDiv" ret="extern HRESULT" convention="__stdcall">
<arg name="pdecLeft">LPDECIMAL</arg>
<arg name="pdecRight">LPDECIMAL</arg>
<arg name="pdecResult">LPDECIMAL</arg>
</function>
<function name="VarDecMul" ret="extern HRESULT" convention="__stdcall">
<arg name="pdecLeft">LPDECIMAL</arg>
<arg name="pdecRight">LPDECIMAL</arg>
<arg name="pdecResult">LPDECIMAL</arg>
</function>
<function name="VarDecSub" ret="extern HRESULT" convention="__stdcall">
<arg name="pdecLeft">LPDECIMAL</arg>
<arg name="pdecRight">LPDECIMAL</arg>
<arg name="pdecResult">LPDECIMAL</arg>
</function>

<function name="VarDecAbs" ret="extern HRESULT" convention="__stdcall">
<arg name="pdecIn">LPDECIMAL</arg>
<arg name="pdecResult">LPDECIMAL</arg>
</function>
<function name="VarDecFix" ret="extern HRESULT" convention="__stdcall">
<arg name="pdecIn">LPDECIMAL</arg>
<arg name="pdecResult">LPDECIMAL</arg>
</function>
<function name="VarDecInt" ret="extern HRESULT" convention="__stdcall">
<arg name="pdecIn">LPDECIMAL</arg>
<arg name="pdecResult">LPDECIMAL</arg>
</function>
<function name="VarDecNeg" ret="extern HRESULT" convention="__stdcall">
<arg name="pdecIn">LPDECIMAL</arg>
<arg name="pdecResult">LPDECIMAL</arg>
</function>

<function name="VarDecRound" ret="extern HRESULT" convention="__stdcall">
<arg name="pdecIn">LPDECIMAL</arg>
<arg name="cDecimals">int</arg>
<arg name="pdecResult">LPDECIMAL</arg>
</function>

<function name="VarDecCmp" ret="extern HRESULT" convention="__stdcall">
<arg name="pdecLeft">LPDECIMAL</arg>
<arg name="pdecRight">LPDECIMAL</arg>
</function>
<function name="VarDecCmpR8" ret="extern HRESULT" convention="__stdcall">
<arg name="pdecLeft">LPDECIMAL</arg>
<arg name="dblRight">double</arg>
</function>

<function name="VarCyAdd" ret="extern HRESULT" convention="__stdcall">
<arg name="cyLeft">CY</arg>
<arg name="cyRight">CY</arg>
<arg name="pcyResult">LPCY</arg>
</function>
<function name="VarCyMul" ret="extern HRESULT" convention="__stdcall">
<arg name="cyLeft">CY</arg>
<arg name="cyRight">CY</arg>
<arg name="pcyResult">LPCY</arg>
</function>
<function name="VarCyMulI4" ret="extern HRESULT" convention="__stdcall">
<arg name="cyLeft">CY</arg>
<arg name="lRight">long</arg>
<arg name="pcyResult">LPCY</arg>
</function>
<function name="VarCyMulI8" ret="extern HRESULT" convention="__stdcall">
<arg name="cyLeft">CY</arg>
<arg name="lRight">LONG64</arg>
<arg name="pcyResult">LPCY</arg>
</function>
<function name="VarCySub" ret="extern HRESULT" convention="__stdcall">
<arg name="cyLeft">CY</arg>
<arg name="cyRight">CY</arg>
<arg name="pcyResult">LPCY</arg>
</function>

<function name="VarCyAbs" ret="extern HRESULT" convention="__stdcall">
<arg name="cyIn">CY</arg>
<arg name="pcyResult">LPCY</arg>
</function>
<function name="VarCyFix" ret="extern HRESULT" convention="__stdcall">
<arg name="cyIn">CY</arg>
<arg name="pcyResult">LPCY</arg>
</function>
<function name="VarCyInt" ret="extern HRESULT" convention="__stdcall">
<arg name="cyIn">CY</arg>
<arg name="pcyResult">LPCY</arg>
</function>
<function name="VarCyNeg" ret="extern HRESULT" convention="__stdcall">
<arg name="cyIn">CY</arg>
<arg name="pcyResult">LPCY</arg>
</function>

<function name="VarCyRound" ret="extern HRESULT" convention="__stdcall">
<arg name="cyIn">CY</arg>
<arg name="cDecimals">int</arg>
<arg name="pcyResult">LPCY</arg>
</function>

<function name="VarCyCmp" ret="extern HRESULT" convention="__stdcall">
<arg name="cyLeft">CY</arg>
<arg name="cyRight">CY</arg>
</function>
<function name="VarCyCmpR8" ret="extern HRESULT" convention="__stdcall">
<arg name="cyLeft">CY</arg>
<arg name="dblRight">double</arg>
</function>

<function name="VarBstrCat" ret="extern HRESULT" convention="__stdcall">
<arg name="bstrLeft">BSTR</arg>
<arg name="bstrRight">BSTR</arg>
<arg name="pbstrResult">LPBSTR</arg>
</function>
<function name="VarBstrCmp" ret="extern HRESULT" convention="__stdcall">
<arg name="bstrLeft">BSTR</arg>
<arg name="bstrRight">BSTR</arg>
<arg name="lcid">LCID</arg>
<arg name="dwFlags">ULONG</arg>
</function> 
<function name="VarR8Pow" ret="extern HRESULT" convention="__stdcall">
<arg name="dblLeft">double</arg>
<arg name="dblRight">double</arg>
  double *pdblResult);
<function name="VarR4CmpR8" ret="extern HRESULT" convention="__stdcall">
<arg name="fltLeft">float</arg>
<arg name="dblRight">double</arg>
</function>
<function name="VarR8Round" ret="extern HRESULT" convention="__stdcall">
<arg name="dblIn">double</arg>
<arg name="cDecimals">int</arg>
  double *pdblResult);
<struct>
<field name="st">SYSTEMTIME</field>
<field name="wDayOfYear">USHORT</field>
} UDATE;
<function name="VarDateFromUdate" ret="HRESULT" convention="__stdcall">
<arg name="pudateIn">UDATE *</arg>
<arg name="dwFlags">ULONG </arg>
  DATE *pdateOut
</function>
<function name="VarDateFromUdateEx" ret="HRESULT" convention="__stdcall">
<arg name="pudateIn">UDATE *</arg>
<arg name="lcid">LCID </arg>
<arg name="dwFlags">ULONG </arg>
  DATE *pdateOut
</function>
<function name="VarUdateFromDate" ret="HRESULT" convention="__stdcall">
<arg name="dateIn">DATE</arg>
<arg name="dwFlags">ULONG</arg>
  UDATE *pudateOut
</function>
   
<function name="GetAltMonthNames" ret="HRESULT" convention="__stdcall">
<arg name="lcid">LCID</arg>
  LPOLESTR * * prgp
</function>
<function name="VarFormat" ret="HRESULT" convention="__stdcall">
<arg name="pvarIn">LPVARIANT</arg>
<arg name="pstrFormat">LPOLESTR</arg>
 
	int iFirstDay, 
	int iFirstWeek, 
	ULONG dwFlags, 
<arg name="pbstrOut">BSTR *</arg>
</function>
	
<function name="VarFormatDateTime" ret="HRESULT" convention="__stdcall">
<arg name="pvarIn">LPVARIANT</arg>
 
	int iNamedFormat, 
	ULONG dwFlags, 
<arg name="pbstrOut">BSTR *</arg>
</function>
	
<function name="VarFormatNumber" ret="HRESULT" convention="__stdcall">
<arg name="pvarIn">LPVARIANT</arg>
 
	int iNumDig, 
	int iIncLead, 
	int iUseParens, 
	int iGroup, 
	ULONG dwFlags, 
<arg name="pbstrOut">BSTR *</arg>
</function>
	
<function name="VarFormatPercent" ret="HRESULT" convention="__stdcall">
<arg name="pvarIn">LPVARIANT</arg>
 
	int iNumDig, 
	int iIncLead, 
	int iUseParens, 
	int iGroup, 
	ULONG dwFlags, 
<arg name="pbstrOut">BSTR *</arg>
</function>
	
<function name="VarFormatCurrency" ret="HRESULT" convention="__stdcall">
<arg name="pvarIn">LPVARIANT</arg>
 
	int iNumDig, 
	int iIncLead,  
	int iUseParens, 
	int iGroup, 
	ULONG dwFlags, 
<arg name="pbstrOut">BSTR *</arg>
</function>

<function name="VarWeekdayName" ret="HRESULT" convention="__stdcall">
<arg name="iWeekday">int</arg>
 
	int fAbbrev, 
	int iFirstDay, 
	ULONG dwFlags, 
<arg name="pbstrOut">BSTR *</arg>
</function>
	
<function name="VarMonthName" ret="HRESULT" convention="__stdcall">
<arg name="iMonth">int</arg>
 
	int fAbbrev, 
	ULONG dwFlags, 
<arg name="pbstrOut">BSTR *</arg>
</function>

<function name="VarFormatFromTokens" ret="HRESULT" convention="__stdcall">
<arg name="pvarIn">LPVARIANT</arg>
 
	 LPOLESTR pstrFormat, 
	LPBYTE pbTokCur, 
	ULONG dwFlags, 
	 BSTR *pbstrOut, 
<arg name="lcid">LCID</arg>
</function>
	
<function name="VarTokenizeFormatString" ret="HRESULT" convention="__stdcall">
<arg name="pstrFormat">LPOLESTR</arg>
 
	 LPBYTE rgbTok, 
	int cbTok, 
	int iFirstDay, 
	int iFirstWeek, 
	LCID lcid, 
<arg name="pcbActual">int *</arg>
</function>
typedef ITypeLib * LPTYPELIB;
typedef LONG DISPID;
typedef DISPID MEMBERID;

typedef ITypeInfo * LPTYPEINFO;

typedef ITypeComp * LPTYPECOMP;

typedef ICreateTypeLib * LPCREATETYPELIB;

typedef ICreateTypeInfo * LPCREATETYPEINFO;

<function name="LHashValOfNameSysA" ret="ULONG" convention="__stdcall">
<arg name="syskind">SYSKIND</arg>
<arg name="lcid">LCID</arg>
<arg name="szName">LPCSTR</arg>
</function>
<function name="LHashValOfNameSys" ret="ULONG" convention="__stdcall">SYSKIND syskind, LCID lcid, const OLECHAR * szName);
<function name="LoadTypeLib" ret="HRESULT" convention="__stdcall">
<arg name="szFile">LPCOLESTR</arg>
 ITypeLib ** pptlib
</function>
typedef enum tagREGKIND
{
    REGKIND_DEFAULT,
    REGKIND_REGISTER,
    REGKIND_NONE
} REGKIND;

<function name="LoadTypeLibEx" ret="HRESULT" convention="__stdcall">
<arg name="szFile">LPCOLESTR</arg>
<arg name="regkind">REGKIND</arg>
<arg name="pptlib">ITypeLib **</arg>
</function>
<function name="LoadRegTypeLib" ret="HRESULT" convention="__stdcall">
<arg name="rguid">const GUID * const</arg>
<arg name="wVerMajor">WORD</arg>
<arg name="wVerMinor">WORD</arg>
<arg name="lcid">LCID</arg>
<arg name="pptlib">ITypeLib **</arg>
</function>
<function name="QueryPathOfRegTypeLib" ret="HRESULT" convention="__stdcall">
<arg name="guid">const GUID * const</arg>
<arg name="wMaj">USHORT</arg>
<arg name="wMin">USHORT</arg>
<arg name="lcid">LCID</arg>
<arg name="lpbstrPathName">LPBSTR</arg>
</function>
<function name="RegisterTypeLib" ret="HRESULT" convention="__stdcall">
<arg name="ptlib">ITypeLib *</arg>
<arg name="szFullPath">LPCOLESTR</arg>
<arg name="szHelpDir">LPCOLESTR</arg>
</function>

<function name="UnRegisterTypeLib" ret="HRESULT" convention="__stdcall">
<arg name="libID">const GUID * const</arg>
<arg name="wVerMajor">WORD</arg>
<arg name="wVerMinor">WORD</arg>
<arg name="lcid">LCID</arg>
<arg name="syskind">SYSKIND</arg>
</function>
<function name="RegisterTypeLibForUser" ret="HRESULT" convention="__stdcall">
ITypeLib *ptlib, OLECHAR  *szFullPath,
			 OLECHAR  *szHelpDir);
<function name="UnRegisterTypeLibForUser" ret="HRESULT" convention="__stdcall">
<arg name="libID">const GUID * const        </arg>
<arg name="wMajorVerNum">WORD  </arg>
 
    WORD   wMinorVerNum, 
    LCID            lcid, 
    SYSKIND         syskind);
			
<function name="CreateTypeLib" ret="HRESULT" convention="__stdcall">
<arg name="syskind">SYSKIND</arg>
<arg name="szFile">LPCOLESTR</arg>
<arg name="ppctlib">ICreateTypeLib **</arg>
</function>

<function name="CreateTypeLib2" ret="HRESULT" convention="__stdcall">
<arg name="syskind">SYSKIND</arg>
<arg name="szFile">LPCOLESTR</arg>

            ICreateTypeLib2 **ppctlib);

typedef IDispatch * LPDISPATCH;

<struct name="tagPARAMDATA">
    OLECHAR * szName;   
    VARTYPE vt;         
} PARAMDATA, * LPPARAMDATA;

<struct name="tagMETHODDATA">
    OLECHAR * szName;   
    PARAMDATA * ppdata; 
    DISPID dispid;      
    UINT iMeth;         
    CALLCONV cc;        
    UINT cArgs;         
    WORD wFlags;        
    VARTYPE vtReturn;
} METHODDATA, * LPMETHODDATA;

<struct name="tagINTERFACEDATA">
    METHODDATA * pmethdata;  
    UINT cMembers;      
} INTERFACEDATA, * LPINTERFACEDATA;

<function name="DispGetParam" ret="HRESULT" convention="__stdcall">
<arg name="pdispparams">DISPPARAMS *</arg>
 
	UINT position,
	VARTYPE vtTarg, 
	 VARIANT * pvarResult, 
<arg name="puArgErr">UINT *</arg>
</function>
<function name="DispGetIDsOfNames" ret="HRESULT" convention="__stdcall">
<arg name="ptinfo">ITypeInfo *</arg>
<arg name="rgszNames">OLECHAR **</arg>
<arg name="cNames">UINT</arg>
<arg name="rgdispid">DISPID *</arg>
</function>
<function name="DispInvoke" ret="HRESULT" convention="__stdcall">
<arg name="_this">void *</arg>
<arg name="ptinfo">ITypeInfo *</arg>
<arg name="dispidMember">DISPID</arg>
<arg name="wFlags">WORD</arg>
<arg name="pparams">DISPPARAMS *</arg>
<arg name="pvarResult">VARIANT *</arg>
<arg name="pexcepinfo">EXCEPINFO *</arg>
<arg name="puArgErr">UINT *</arg>
</function>
<function name="CreateDispTypeInfo" ret="HRESULT" convention="__stdcall">
<arg name="pidata">INTERFACEDATA *</arg>
<arg name="lcid">LCID</arg>
<arg name="pptinfo">ITypeInfo **</arg>
</function>

<function name="CreateStdDispatch" ret="HRESULT" convention="__stdcall">
<arg name="punkOuter">IUnknown *</arg>
<arg name="pvThis">void *</arg>
<arg name="ptinfo">ITypeInfo *</arg>
<arg name="ppunkStdDisp">IUnknown **</arg>
</function>

<function name="DispCallFunc" ret="HRESULT" convention="__stdcall">
<arg name="pvInstance">void *</arg>
<arg name="oVft">ULONG_PTR</arg>
<arg name="cc">CALLCONV</arg>
<arg name="vtReturn">VARTYPE</arg>
<arg name="cActuals">UINT </arg>
<arg name="prgvt">VARTYPE *</arg>
<arg name="prgpvarg">VARIANTARG **</arg>
<arg name="pvargResult">VARIANT *</arg>
</function>
<function name="RegisterActiveObject" ret="HRESULT" convention="__stdcall">
<arg name="punk">IUnknown *</arg>
<arg name="rclsid">const IID * const</arg>
<arg name="dwFlags">DWORD</arg>
<arg name="pdwRegister">DWORD *</arg>
</function>

<function name="RevokeActiveObject" ret="HRESULT" convention="__stdcall">
<arg name="dwRegister">DWORD</arg>
 void * pvReserved
</function>

<function name="GetActiveObject" ret="HRESULT" convention="__stdcall">
<arg name="rclsid">const IID * const</arg>
<arg name="pvReserved">void *</arg>
<arg name="ppunk">IUnknown **</arg>
</function>
<function name="SetErrorInfo" ret="HRESULT" convention="__stdcall">
<arg name="dwReserved">ULONG</arg>
  IErrorInfo * perrinfo
</function>
<function name="GetErrorInfo" ret="HRESULT" convention="__stdcall">
<arg name="dwReserved">ULONG</arg>
  IErrorInfo ** pperrinfo
</function>
<function name="CreateErrorInfo" ret="HRESULT" convention="__stdcall">
 ICreateErrorInfo ** pperrinfo
</function>
<function name="GetRecordInfoFromTypeInfo" ret="HRESULT" convention="__stdcall">
<arg name="pTypeInfo">ITypeInfo *</arg>
<arg name="ppRecInfo">IRecordInfo **</arg>
</function>

<function name="GetRecordInfoFromGuids" ret="HRESULT" convention="__stdcall">
<arg name="rGuidTypeLib">const GUID * const</arg>
<arg name="uVerMajor">ULONG</arg>
<arg name="uVerMinor">ULONG</arg>
<arg name="lcid">LCID</arg>
<arg name="rGuidTypeInfo">const GUID * const</arg>
<arg name="ppRecInfo">IRecordInfo **</arg>
</function>
<function name="OaBuildVersion" ret="ULONG" convention="__stdcall">
void
</function>

<function name="ClearCustData" ret="void" convention="__stdcall">
LPCUSTDATA pCustData
</function>
#line 1 "\\program files\\Microsoft SDKs\\Windows\\v6.0A\\Include\\poppack.h"
#pragma warning(disable:4103)

#pragma pack(pop)
<function name="CreateDataAdviseHolder" ret="HRESULT" convention="__stdcall">
 LPDATAADVISEHOLDER * ppDAHolder
</function>

<function name="OleBuildVersion" ret="DWORD" convention="__stdcall">
 void 
</function>
<function name="ReadClassStg" ret="HRESULT" convention="__stdcall">
<arg name="pStg">LPSTORAGE</arg>
  CLSID * pclsid
</function>
<function name="WriteClassStg" ret="HRESULT" convention="__stdcall">
<arg name="pStg">LPSTORAGE</arg>
  const IID * const rclsid
</function>
<function name="ReadClassStm" ret="HRESULT" convention="__stdcall">
<arg name="pStm">LPSTREAM</arg>
  CLSID * pclsid
</function>
<function name="WriteClassStm" ret="HRESULT" convention="__stdcall">
<arg name="pStm">LPSTREAM</arg>
  const IID * const rclsid
</function>
<function name="WriteFmtUserTypeStg" ret="HRESULT" convention="__stdcall">
<arg name="pstg">LPSTORAGE</arg>
<arg name="cf">CLIPFORMAT</arg>
<arg name="lpszUserType">LPOLESTR</arg>
</function>
<function name="ReadFmtUserTypeStg" ret="HRESULT" convention="__stdcall">
<arg name="pstg">LPSTORAGE</arg>
<arg name="pcf">CLIPFORMAT *</arg>
<arg name="lplpszUserType">LPOLESTR *</arg>
</function>

<function name="OleInitialize" ret="HRESULT" convention="__stdcall">
 LPVOID pvReserved
</function>
<function name="OleUninitialize" ret="void" convention="__stdcall">
void
</function>
<function name="OleQueryLinkFromData" ret="HRESULT" convention="__stdcall">
<arg name="pSrcDataObject">LPDATAOBJECT</arg>
</function>
<function name="OleQueryCreateFromData" ret="HRESULT" convention="__stdcall">
<arg name="pSrcDataObject">LPDATAOBJECT</arg>
</function>

<function name="OleCreate" ret="HRESULT" convention="__stdcall">
<arg name="rclsid">const IID * const</arg>
<arg name="riid">const IID * const</arg>
<arg name="renderopt">DWORD</arg>
<arg name="pFormatEtc">LPFORMATETC</arg>
<arg name="pClientSite">LPOLECLIENTSITE</arg>
<arg name="pStg">LPSTORAGE</arg>
<arg name="ppvObj">LPVOID *</arg>
</function>

<function name="OleCreateEx" ret="HRESULT" convention="__stdcall">
<arg name="rclsid">const IID * const</arg>
<arg name="riid">const IID * const</arg>
<arg name="dwFlags">DWORD</arg>
<arg name="renderopt">DWORD</arg>
<arg name="cFormats">ULONG</arg>
<arg name="rgAdvf">DWORD*</arg>
<arg name="rgFormatEtc">LPFORMATETC</arg>
<arg name="lpAdviseSink">IAdviseSink *</arg>
<arg name="rgdwConnection">DWORD *</arg>
<arg name="pClientSite">LPOLECLIENTSITE</arg>
<arg name="pStg">LPSTORAGE</arg>
<arg name="ppvObj">LPVOID *</arg>
</function>

<function name="OleCreateFromData" ret="HRESULT" convention="__stdcall">
<arg name="pSrcDataObj">LPDATAOBJECT</arg>
<arg name="riid">const IID * const</arg>
<arg name="renderopt">DWORD</arg>
<arg name="pFormatEtc">LPFORMATETC</arg>
<arg name="pClientSite">LPOLECLIENTSITE</arg>
<arg name="pStg">LPSTORAGE</arg>
<arg name="ppvObj">LPVOID *</arg>
</function>

<function name="OleCreateFromDataEx" ret="HRESULT" convention="__stdcall">
<arg name="pSrcDataObj">LPDATAOBJECT</arg>
<arg name="riid">const IID * const</arg>
<arg name="dwFlags">DWORD</arg>
<arg name="renderopt">DWORD</arg>
<arg name="cFormats">ULONG</arg>
<arg name="rgAdvf">DWORD*</arg>
<arg name="rgFormatEtc">LPFORMATETC</arg>
<arg name="lpAdviseSink">IAdviseSink *</arg>
<arg name="rgdwConnection">DWORD *</arg>
<arg name="pClientSite">LPOLECLIENTSITE</arg>
<arg name="pStg">LPSTORAGE</arg>
<arg name="ppvObj">LPVOID *</arg>
</function>

<function name="OleCreateLinkFromData" ret="HRESULT" convention="__stdcall">
<arg name="pSrcDataObj">LPDATAOBJECT</arg>
<arg name="riid">const IID * const</arg>
<arg name="renderopt">DWORD</arg>
<arg name="pFormatEtc">LPFORMATETC</arg>
<arg name="pClientSite">LPOLECLIENTSITE</arg>
<arg name="pStg">LPSTORAGE</arg>
<arg name="ppvObj">LPVOID *</arg>
</function>

<function name="OleCreateLinkFromDataEx" ret="HRESULT" convention="__stdcall">
<arg name="pSrcDataObj">LPDATAOBJECT</arg>
<arg name="riid">const IID * const</arg>
<arg name="dwFlags">DWORD</arg>
<arg name="renderopt">DWORD</arg>
<arg name="cFormats">ULONG</arg>
<arg name="rgAdvf">DWORD*</arg>
<arg name="rgFormatEtc">LPFORMATETC</arg>
<arg name="lpAdviseSink">IAdviseSink *</arg>
<arg name="rgdwConnection">DWORD *</arg>
<arg name="pClientSite">LPOLECLIENTSITE</arg>
<arg name="pStg">LPSTORAGE</arg>
<arg name="ppvObj">LPVOID *</arg>
</function>

<function name="OleCreateStaticFromData" ret="HRESULT" convention="__stdcall">
<arg name="pSrcDataObj">LPDATAOBJECT</arg>
<arg name="iid">const IID * const</arg>
<arg name="renderopt">DWORD</arg>
<arg name="pFormatEtc">LPFORMATETC</arg>
<arg name="pClientSite">LPOLECLIENTSITE</arg>
<arg name="pStg">LPSTORAGE</arg>
<arg name="ppvObj">LPVOID *</arg>
</function>
<function name="OleCreateLink" ret="HRESULT" convention="__stdcall">
<arg name="pmkLinkSrc">LPMONIKER</arg>
<arg name="riid">const IID * const</arg>
<arg name="renderopt">DWORD</arg>
<arg name="lpFormatEtc">LPFORMATETC</arg>
<arg name="pClientSite">LPOLECLIENTSITE</arg>
<arg name="pStg">LPSTORAGE</arg>
<arg name="ppvObj">LPVOID *</arg>
</function>

<function name="OleCreateLinkEx" ret="HRESULT" convention="__stdcall">
<arg name="pmkLinkSrc">LPMONIKER</arg>
<arg name="riid">const IID * const</arg>
<arg name="dwFlags">DWORD</arg>
<arg name="renderopt">DWORD</arg>
<arg name="cFormats">ULONG</arg>
<arg name="rgAdvf">DWORD*</arg>
<arg name="rgFormatEtc">LPFORMATETC</arg>
<arg name="lpAdviseSink">IAdviseSink *</arg>
<arg name="rgdwConnection">DWORD *</arg>
<arg name="pClientSite">LPOLECLIENTSITE</arg>
<arg name="pStg">LPSTORAGE</arg>
<arg name="ppvObj">LPVOID *</arg>
</function>

<function name="OleCreateLinkToFile" ret="HRESULT" convention="__stdcall">
<arg name="lpszFileName">LPCOLESTR</arg>
<arg name="riid">const IID * const</arg>
<arg name="renderopt">DWORD</arg>
<arg name="lpFormatEtc">LPFORMATETC</arg>
<arg name="pClientSite">LPOLECLIENTSITE</arg>
<arg name="pStg">LPSTORAGE</arg>
<arg name="ppvObj">LPVOID *</arg>
</function>

<function name="OleCreateLinkToFileEx" ret="HRESULT" convention="__stdcall">
<arg name="lpszFileName">LPCOLESTR</arg>
<arg name="riid">const IID * const</arg>
<arg name="dwFlags">DWORD</arg>
<arg name="renderopt">DWORD</arg>
<arg name="cFormats">ULONG</arg>
<arg name="rgAdvf">DWORD*</arg>
<arg name="rgFormatEtc">LPFORMATETC</arg>
<arg name="lpAdviseSink">IAdviseSink *</arg>
<arg name="rgdwConnection">DWORD *</arg>
<arg name="pClientSite">LPOLECLIENTSITE</arg>
<arg name="pStg">LPSTORAGE</arg>
<arg name="ppvObj">LPVOID *</arg>
</function>

<function name="OleCreateFromFile" ret="HRESULT" convention="__stdcall">
<arg name="rclsid">const IID * const</arg>
<arg name="lpszFileName">LPCOLESTR</arg>
<arg name="riid">const IID * const</arg>
<arg name="renderopt">DWORD</arg>
<arg name="lpFormatEtc">LPFORMATETC</arg>
<arg name="pClientSite">LPOLECLIENTSITE</arg>
<arg name="pStg">LPSTORAGE</arg>
<arg name="ppvObj">LPVOID *</arg>
</function>

<function name="OleCreateFromFileEx" ret="HRESULT" convention="__stdcall">
<arg name="rclsid">const IID * const</arg>
<arg name="lpszFileName">LPCOLESTR</arg>
<arg name="riid">const IID * const</arg>
<arg name="dwFlags">DWORD</arg>
<arg name="renderopt">DWORD</arg>
<arg name="cFormats">ULONG</arg>
<arg name="rgAdvf">DWORD*</arg>
<arg name="rgFormatEtc">LPFORMATETC</arg>
<arg name="lpAdviseSink">IAdviseSink *</arg>
<arg name="rgdwConnection">DWORD *</arg>
<arg name="pClientSite">LPOLECLIENTSITE</arg>
<arg name="pStg">LPSTORAGE</arg>
<arg name="ppvObj">LPVOID *</arg>
</function>

<function name="OleLoad" ret="HRESULT" convention="__stdcall">
<arg name="pStg">LPSTORAGE</arg>
<arg name="riid">const IID * const</arg>
<arg name="pClientSite">LPOLECLIENTSITE</arg>
<arg name="ppvObj">LPVOID *</arg>
</function>

<function name="OleSave" ret="HRESULT" convention="__stdcall">
<arg name="pPS">LPPERSISTSTORAGE</arg>
<arg name="pStg">LPSTORAGE</arg>
<arg name="fSameAsLoad">BOOL</arg>
</function>

<function name="OleLoadFromStream" ret="HRESULT" convention="__stdcall">
<arg name="pStm">LPSTREAM</arg>
<arg name="iidInterface">const IID * const</arg>
<arg name="ppvObj">LPVOID *</arg>
</function>
<function name="OleSaveToStream" ret="HRESULT" convention="__stdcall">
<arg name="pPStm">LPPERSISTSTREAM</arg>
  LPSTREAM pStm );
<function name="OleSetContainedObject" ret="HRESULT" convention="__stdcall">
<arg name="pUnknown">LPUNKNOWN</arg>
<arg name="fContained">BOOL</arg>
</function>
<function name="OleNoteObjectVisible" ret="HRESULT" convention="__stdcall">
<arg name="pUnknown">LPUNKNOWN</arg>
<arg name="fVisible">BOOL</arg>
</function>

<function name="RegisterDragDrop" ret="HRESULT" convention="__stdcall">
<arg name="hwnd">HWND</arg>
<arg name="pDropTarget">LPDROPTARGET</arg>
</function>
<function name="RevokeDragDrop" ret="HRESULT" convention="__stdcall">
<arg name="hwnd">HWND</arg>
</function>
<function name="DoDragDrop" ret="HRESULT" convention="__stdcall">
<arg name="pDataObj">LPDATAOBJECT</arg>
<arg name="pDropSource">LPDROPSOURCE</arg>
<arg name="dwOKEffects">DWORD</arg>
<arg name="pdwEffect">LPDWORD</arg>
</function>
<function name="OleSetClipboard" ret="HRESULT" convention="__stdcall">
<arg name="pDataObj">LPDATAOBJECT</arg>
</function>
<function name="OleGetClipboard" ret="HRESULT" convention="__stdcall">
<arg name="ppDataObj">LPDATAOBJECT *</arg>
</function>
<function name="OleFlushClipboard" ret="HRESULT" convention="__stdcall">
void);
<function name="OleIsCurrentClipboard" ret="HRESULT" convention="__stdcall">
<arg name="pDataObj">LPDATAOBJECT</arg>
</function>

<function name="OleCreateMenuDescriptor" ret="HOLEMENU" convention="__stdcall">
<arg name="hmenuCombined">HMENU</arg>
<arg name="lpMenuWidths">LPOLEMENUGROUPWIDTHS</arg>
</function>
<function name="OleSetMenuDescriptor" ret="HRESULT" convention="__stdcall">
<arg name="holemenu">HOLEMENU</arg>
<arg name="hwndFrame">HWND</arg>
<arg name="hwndActiveObject">HWND</arg>
<arg name="lpFrame">LPOLEINPLACEFRAME</arg>
<arg name="lpActiveObj">LPOLEINPLACEACTIVEOBJECT</arg>
</function>
<function name="OleDestroyMenuDescriptor" ret="HRESULT" convention="__stdcall">
<arg name="holemenu">HOLEMENU</arg>
</function>

<function name="OleTranslateAccelerator" ret="HRESULT" convention="__stdcall">
<arg name="lpFrame">LPOLEINPLACEFRAME</arg>
<arg name="lpFrameInfo">LPOLEINPLACEFRAMEINFO</arg>
<arg name="lpmsg">LPMSG</arg>
</function>
<function name="OleDuplicateData" ret="HANDLE" convention="__stdcall">
<arg name="hSrc">HANDLE</arg>
<arg name="cfFormat">CLIPFORMAT</arg>
<arg name="uiFlags">UINT</arg>
</function>

<function name="OleDraw" ret="HRESULT" convention="__stdcall">
<arg name="pUnknown">LPUNKNOWN</arg>
<arg name="dwAspect">DWORD</arg>
<arg name="hdcDraw">HDC</arg>
<arg name="lprcBounds">LPCRECT</arg>
</function>

<function name="OleRun" ret="HRESULT" convention="__stdcall">
<arg name="pUnknown">LPUNKNOWN</arg>
</function>
<function name="OleIsRunning" ret="BOOL" convention="__stdcall">
<arg name="pObject">LPOLEOBJECT</arg>
</function>
<function name="OleLockRunning" ret="HRESULT" convention="__stdcall">
<arg name="pUnknown">LPUNKNOWN</arg>
<arg name="fLock">BOOL</arg>
<arg name="fLastUnlockCloses">BOOL</arg>
</function>
<function name="ReleaseStgMedium" ret="void" convention="__stdcall">
 LPSTGMEDIUM);
<function name="CreateOleAdviseHolder" ret="HRESULT" convention="__stdcall">
<arg name="ppOAHolder">LPOLEADVISEHOLDER *</arg>
</function>

<function name="OleCreateDefaultHandler" ret="HRESULT" convention="__stdcall">
<arg name="clsid">const IID * const</arg>
<arg name="pUnkOuter">LPUNKNOWN</arg>
<arg name="riid">const IID * const</arg>
<arg name="lplpObj">LPVOID *</arg>
</function>

<function name="OleCreateEmbeddingHelper" ret="HRESULT" convention="__stdcall">
<arg name="clsid">const IID * const</arg>
<arg name="pUnkOuter">LPUNKNOWN</arg>
<arg name="flags">DWORD</arg>
<arg name="pCF">LPCLASSFACTORY</arg>
<arg name="riid">const IID * const</arg>
<arg name="lplpObj">LPVOID *</arg>
</function>

<function name="IsAccelerator" ret="BOOL" convention="__stdcall">
<arg name="hAccel">HACCEL</arg>
<arg name="cAccelEntries">int</arg>
<arg name="lpMsg">LPMSG</arg>
<arg name="lpwCmd">WORD *</arg>
</function>
<function name="OleGetIconOfFile" ret="HGLOBAL" convention="__stdcall">
<arg name="lpszPath">LPOLESTR</arg>
  BOOL fUseFileAsLabel
</function>

<function name="OleGetIconOfClass" ret="HGLOBAL" convention="__stdcall">
<arg name="rclsid">const IID * const</arg>
<arg name="lpszLabel">LPOLESTR</arg>
<arg name="fUseTypeAsLabel">BOOL</arg>
</function>

<function name="OleMetafilePictFromIconAndLabel" ret="HGLOBAL" convention="__stdcall">
<arg name="hIcon">HICON</arg>
<arg name="lpszLabel">LPOLESTR</arg>
<arg name="lpszSourceFile">LPOLESTR</arg>
<arg name="iIconIndex">UINT</arg>
</function>
<function name="OleRegGetUserType" ret="HRESULT" convention="__stdcall">
<arg name="clsid">const IID * const</arg>
<arg name="dwFormOfType">DWORD</arg>
<arg name="pszUserType">LPOLESTR *</arg>
</function>

<function name="OleRegGetMiscStatus" ret="HRESULT" convention="__stdcall">
<arg name="clsid">const IID * const</arg>
<arg name="dwAspect">DWORD</arg>
<arg name="pdwStatus">DWORD *</arg>
</function>

<function name="OleRegEnumFormatEtc" ret="HRESULT" convention="__stdcall">
<arg name="clsid">const IID * const</arg>
<arg name="dwDirection">DWORD</arg>
<arg name="ppenum">LPENUMFORMATETC *</arg>
</function>

<function name="OleRegEnumVerbs" ret="HRESULT" convention="__stdcall">
<arg name="clsid">const IID * const</arg>
<arg name="ppenum">LPENUMOLEVERB *</arg>
</function>
<typedef name="LPOLESTREAM">_OLESTREAM *</typedef>

<struct name="_OLESTREAMVTBL">
    DWORD (__stdcall* Get)(LPOLESTREAM, void *, DWORD);
    DWORD (__stdcall* Put)(LPOLESTREAM, const void *, DWORD);
} OLESTREAMVTBL;
typedef  OLESTREAMVTBL *  LPOLESTREAMVTBL;

<struct name="_OLESTREAM">
<field name="lpstbl">LPOLESTREAMVTBL</field>
} OLESTREAM;
<function name="OleConvertOLESTREAMToIStorage" ret="HRESULT" convention="__stdcall">
<arg name="lpolestream">LPOLESTREAM               </arg>
<arg name="pstg">LPSTORAGE                  </arg>
<arg name="ptd">const DVTARGETDEVICE *  </arg>
</function>

<function name="OleConvertIStorageToOLESTREAM" ret="HRESULT" convention="__stdcall">
<arg name="pstg">LPSTORAGE     </arg>
<arg name="lpolestream">LPOLESTREAM    </arg>
</function>
<function name="GetHGlobalFromILockBytes" ret="HRESULT" convention="__stdcall">
<arg name="plkbyt">LPLOCKBYTES</arg>
<arg name="phglobal">HGLOBAL *</arg>
</function>
<function name="CreateILockBytesOnHGlobal" ret="HRESULT" convention="__stdcall">
<arg name="hGlobal">HGLOBAL</arg>
<arg name="fDeleteOnRelease">BOOL</arg>
<arg name="pplkbyt">LPLOCKBYTES *</arg>
</function>

<function name="GetHGlobalFromStream" ret="HRESULT" convention="__stdcall">
<arg name="pstm">LPSTREAM</arg>
<arg name="phglobal">HGLOBAL *</arg>
</function>
<function name="CreateStreamOnHGlobal" ret="HRESULT" convention="__stdcall">
<arg name="hGlobal">HGLOBAL</arg>
<arg name="fDeleteOnRelease">BOOL</arg>
<arg name="ppstm">LPSTREAM *</arg>
</function>

<function name="OleDoAutoConvert" ret="HRESULT" convention="__stdcall">
<arg name="pStg">LPSTORAGE</arg>
  LPCLSID pClsidNew
</function>
<function name="OleGetAutoConvert" ret="HRESULT" convention="__stdcall">
<arg name="clsidOld">const IID * const</arg>
  LPCLSID pClsidNew
</function>
<function name="OleSetAutoConvert" ret="HRESULT" convention="__stdcall">
<arg name="clsidOld">const IID * const</arg>
  const IID * const clsidNew
</function>
<function name="GetConvertStg" ret="HRESULT" convention="__stdcall">
 LPSTORAGE pStg
</function>
<function name="SetConvertStg" ret="HRESULT" convention="__stdcall">
<arg name="pStg">LPSTORAGE</arg>
  BOOL fConvert
</function>
<function name="OleConvertIStorageToOLESTREAMEx" ret="HRESULT" convention="__stdcall">
<arg name="pstg">LPSTORAGE         </arg>
      CLIPFORMAT         cfFormat,   
      LONG               lWidth,     
      LONG               lHeight,    
      DWORD              dwSize,     
      LPSTGMEDIUM        pmedium,    
      LPOLESTREAM        polestm);

<function name="OleConvertOLESTREAMToIStorageEx" ret="HRESULT" convention="__stdcall">
<arg name="polestm">LPOLESTREAM       </arg>
<arg name="pstg">LPSTORAGE         </arg>
      CLIPFORMAT *    pcfFormat,  
      LONG *          plwWidth,   
      LONG *          plHeight,   
      DWORD *         pdwSize,    
      LPSTGMEDIUM        pmedium);   

#pragma pack(pop)

extern const GUID  IID_IPrintDialogCallback;

extern const GUID  IID_IPrintDialogServices;

#pragma pack(push,1)
typedef UINT_PTR (__stdcall *LPOFNHOOKPROC) (HWND, UINT, WPARAM, LPARAM);
<struct name="tagOFN_NT4A">
<field name="lStructSize">DWORD</field>
<field name="hwndOwner">HWND</field>
<field name="hInstance">HINSTANCE</field>
<field name="lpstrFilter">LPCSTR</field>
<field name="lpstrCustomFilter">LPSTR</field>
<field name="nMaxCustFilter">DWORD</field>
<field name="nFilterIndex">DWORD</field>
<field name="lpstrFile">LPSTR</field>
<field name="nMaxFile">DWORD</field>
<field name="lpstrFileTitle">LPSTR</field>
<field name="nMaxFileTitle">DWORD</field>
<field name="lpstrInitialDir">LPCSTR</field>
<field name="lpstrTitle">LPCSTR</field>
<field name="Flags">DWORD</field>
<field name="nFileOffset">WORD</field>
<field name="nFileExtension">WORD</field>
<field name="lpstrDefExt">LPCSTR</field>
<field name="lCustData">LPARAM</field>
<field name="lpfnHook">LPOFNHOOKPROC</field>
<field name="lpTemplateName">LPCSTR</field>
</struct>
<typedefprev id="OPENFILENAME_NT4A"/>
<typedefptrprev id="LPOPENFILENAME_NT4A"/>
<struct name="tagOFN_NT4W">
<field name="lStructSize">DWORD</field>
<field name="hwndOwner">HWND</field>
<field name="hInstance">HINSTANCE</field>
<field name="lpstrFilter">LPCWSTR</field>
<field name="lpstrCustomFilter">LPWSTR</field>
<field name="nMaxCustFilter">DWORD</field>
<field name="nFilterIndex">DWORD</field>
<field name="lpstrFile">LPWSTR</field>
<field name="nMaxFile">DWORD</field>
<field name="lpstrFileTitle">LPWSTR</field>
<field name="nMaxFileTitle">DWORD</field>
<field name="lpstrInitialDir">LPCWSTR</field>
<field name="lpstrTitle">LPCWSTR</field>
<field name="Flags">DWORD</field>
<field name="nFileOffset">WORD</field>
<field name="nFileExtension">WORD</field>
<field name="lpstrDefExt">LPCWSTR</field>
<field name="lCustData">LPARAM</field>
<field name="lpfnHook">LPOFNHOOKPROC</field>
<field name="lpTemplateName">LPCWSTR</field>
</struct>
<typedefprev id="OPENFILENAME_NT4W"/>
<typedefptrprev id="LPOPENFILENAME_NT4W"/>

typedef OPENFILENAME_NT4A OPENFILENAME_NT4;
typedef LPOPENFILENAME_NT4A LPOPENFILENAME_NT4;

<struct name="tagOFNA">
<field name="lStructSize">DWORD</field>
<field name="hwndOwner">HWND</field>
<field name="hInstance">HINSTANCE</field>
<field name="lpstrFilter">LPCSTR</field>
<field name="lpstrCustomFilter">LPSTR</field>
<field name="nMaxCustFilter">DWORD</field>
<field name="nFilterIndex">DWORD</field>
<field name="lpstrFile">LPSTR</field>
<field name="nMaxFile">DWORD</field>
<field name="lpstrFileTitle">LPSTR</field>
<field name="nMaxFileTitle">DWORD</field>
<field name="lpstrInitialDir">LPCSTR</field>
<field name="lpstrTitle">LPCSTR</field>
<field name="Flags">DWORD</field>
<field name="nFileOffset">WORD</field>
<field name="nFileExtension">WORD</field>
<field name="lpstrDefExt">LPCSTR</field>
<field name="lCustData">LPARAM</field>
<field name="lpfnHook">LPOFNHOOKPROC</field>
<field name="lpTemplateName">LPCSTR</field>
   void *        pvReserved;
   DWORD        dwReserved;
   DWORD        FlagsEx;
} OPENFILENAMEA, *LPOPENFILENAMEA;
<struct name="tagOFNW">
<field name="lStructSize">DWORD</field>
<field name="hwndOwner">HWND</field>
<field name="hInstance">HINSTANCE</field>
<field name="lpstrFilter">LPCWSTR</field>
<field name="lpstrCustomFilter">LPWSTR</field>
<field name="nMaxCustFilter">DWORD</field>
<field name="nFilterIndex">DWORD</field>
<field name="lpstrFile">LPWSTR</field>
<field name="nMaxFile">DWORD</field>
<field name="lpstrFileTitle">LPWSTR</field>
<field name="nMaxFileTitle">DWORD</field>
<field name="lpstrInitialDir">LPCWSTR</field>
<field name="lpstrTitle">LPCWSTR</field>
<field name="Flags">DWORD</field>
<field name="nFileOffset">WORD</field>
<field name="nFileExtension">WORD</field>
<field name="lpstrDefExt">LPCWSTR</field>
<field name="lCustData">LPARAM</field>
<field name="lpfnHook">LPOFNHOOKPROC</field>
<field name="lpTemplateName">LPCWSTR</field>
   void *        pvReserved;
   DWORD        dwReserved;
   DWORD        FlagsEx;

} OPENFILENAMEW, *LPOPENFILENAMEW;

typedef OPENFILENAMEA OPENFILENAME;
typedef LPOPENFILENAMEA LPOPENFILENAME;

<function name="GetOpenFileNameA" ret="BOOL " convention="__stdcall">
LPOPENFILENAMEA);
<function name="GetOpenFileNameW" ret="BOOL " convention="__stdcall">
LPOPENFILENAMEW);
<function name="GetSaveFileNameA" ret="BOOL " convention="__stdcall">
LPOPENFILENAMEA);
<function name="GetSaveFileNameW" ret="BOOL " convention="__stdcall">
LPOPENFILENAMEW);
<function name="GetFileTitleA" ret="short" convention="__stdcall">
LPCSTR,  LPSTR Buf,  WORD cchSize);
<function name="GetFileTitleW" ret="short" convention="__stdcall">
LPCWSTR,  LPWSTR Buf,  WORD cchSize);

typedef UINT_PTR (__stdcall *LPCCHOOKPROC) (HWND, UINT, WPARAM, LPARAM);
<struct name="_OFNOTIFYA">
<field name="hdr">NMHDR</field>
<field name="lpOFN">LPOPENFILENAMEA</field>
<field name="pszFile">LPSTR</field>
</struct>
<typedefprev id="OFNOTIFYA"/>
<typedefptrprev id="LPOFNOTIFYA"/>

<struct name="_OFNOTIFYW">
<field name="hdr">NMHDR</field>
<field name="lpOFN">LPOPENFILENAMEW</field>
<field name="pszFile">LPWSTR</field>
</struct>
<typedefprev id="OFNOTIFYW"/>
<typedefptrprev id="LPOFNOTIFYW"/>

typedef OFNOTIFYA OFNOTIFY;
typedef LPOFNOTIFYA LPOFNOTIFY;

<struct name="_OFNOTIFYEXA">
<field name="hdr">NMHDR</field>
<field name="lpOFN">LPOPENFILENAMEA</field>
<field name="psf">LPVOID</field>
<field name="pidl">LPVOID</field>
</struct>
<typedefprev id="OFNOTIFYEXA"/>
<typedefptrprev id="LPOFNOTIFYEXA"/>

<struct name="_OFNOTIFYEXW">
<field name="hdr">NMHDR</field>
<field name="lpOFN">LPOPENFILENAMEW</field>
<field name="psf">LPVOID</field>
<field name="pidl">LPVOID</field>
</struct>
<typedefprev id="OFNOTIFYEXW"/>
<typedefptrprev id="LPOFNOTIFYEXW"/>

typedef OFNOTIFYEXA OFNOTIFYEX;
typedef LPOFNOTIFYEXA LPOFNOTIFYEX;
<struct name="tagCHOOSECOLORA">
<field name="lStructSize">DWORD</field>
<field name="hwndOwner">HWND</field>
<field name="hInstance">HWND</field>
<field name="rgbResult">COLORREF</field>
<field name="lpCustColors">COLORREF*</field>
<field name="Flags">DWORD</field>
<field name="lCustData">LPARAM</field>
<field name="lpfnHook">LPCCHOOKPROC</field>
<field name="lpTemplateName">LPCSTR</field>
</struct>
<typedefprev id="CHOOSECOLORA"/>
<typedefptrprev id="LPCHOOSECOLORA"/>
<struct name="tagCHOOSECOLORW">
<field name="lStructSize">DWORD</field>
<field name="hwndOwner">HWND</field>
<field name="hInstance">HWND</field>
<field name="rgbResult">COLORREF</field>
<field name="lpCustColors">COLORREF*</field>
<field name="Flags">DWORD</field>
<field name="lCustData">LPARAM</field>
<field name="lpfnHook">LPCCHOOKPROC</field>
<field name="lpTemplateName">LPCWSTR</field>
</struct>
<typedefprev id="CHOOSECOLORW"/>
<typedefptrprev id="LPCHOOSECOLORW"/>

typedef CHOOSECOLORA CHOOSECOLOR;
typedef LPCHOOSECOLORA LPCHOOSECOLOR;

<function name="ChooseColorA" ret="BOOL" convention="__stdcall">
LPCHOOSECOLORA);
<function name="ChooseColorW" ret="BOOL" convention="__stdcall">
LPCHOOSECOLORW);
typedef UINT_PTR (__stdcall *LPFRHOOKPROC) (HWND, UINT, WPARAM, LPARAM);

<struct name="tagFINDREPLACEA">
<field name="lStructSize">DWORD</field>
<field name="hwndOwner">HWND</field>
<field name="hInstance">HINSTANCE</field>
                                    
   DWORD        Flags;              
   LPSTR        lpstrFindWhat;      
   LPSTR        lpstrReplaceWith;   
   WORD         wFindWhatLen;       
   WORD         wReplaceWithLen;    
   LPARAM       lCustData;          
   LPFRHOOKPROC lpfnHook;           
   LPCSTR       lpTemplateName;     
} FINDREPLACEA, *LPFINDREPLACEA;
<struct name="tagFINDREPLACEW">
<field name="lStructSize">DWORD</field>
<field name="hwndOwner">HWND</field>
<field name="hInstance">HINSTANCE</field>
                                    
   DWORD        Flags;              
   LPWSTR       lpstrFindWhat;      
   LPWSTR       lpstrReplaceWith;   
   WORD         wFindWhatLen;       
   WORD         wReplaceWithLen;    
   LPARAM       lCustData;          
   LPFRHOOKPROC lpfnHook;           
   LPCWSTR      lpTemplateName;     
} FINDREPLACEW, *LPFINDREPLACEW;

typedef FINDREPLACEA FINDREPLACE;
typedef LPFINDREPLACEA LPFINDREPLACE;
<function name="FindTextA" ret="HWND" convention="__stdcall">
LPFINDREPLACEA);
<function name="FindTextW" ret="HWND" convention="__stdcall">
LPFINDREPLACEW);
<function name="ReplaceTextA" ret="HWND" convention="__stdcall">
LPFINDREPLACEA);
<function name="ReplaceTextW" ret="HWND" convention="__stdcall">
LPFINDREPLACEW);
typedef UINT_PTR (__stdcall *LPCFHOOKPROC) (HWND, UINT, WPARAM, LPARAM);

<struct name="tagCHOOSEFONTA">
<field name="lStructSize">DWORD</field>
<field name="hwndOwner">HWND</field>
<field name="hDC">HDC</field>
<field name="lpLogFont">LPLOGFONTA</field>
<field name="iPointSize">INT</field>
<field name="Flags">DWORD</field>
<field name="rgbColors">COLORREF</field>
<field name="lCustData">LPARAM</field>
<field name="lpfnHook">LPCFHOOKPROC</field>
<field name="lpTemplateName">LPCSTR</field>
<field name="hInstance">HINSTANCE</field>
                                       
   LPSTR           lpszStyle;          
                                       
   WORD            nFontType;          
                                       
                                       
   WORD            ___MISSING_ALIGNMENT__;
   INT             nSizeMin;           
   INT             nSizeMax;           
                                       
} CHOOSEFONTA;
<struct name="tagCHOOSEFONTW">
<field name="lStructSize">DWORD</field>
<field name="hwndOwner">HWND</field>
<field name="hDC">HDC</field>
<field name="lpLogFont">LPLOGFONTW</field>
<field name="iPointSize">INT</field>
<field name="Flags">DWORD</field>
<field name="rgbColors">COLORREF</field>
<field name="lCustData">LPARAM</field>
<field name="lpfnHook">LPCFHOOKPROC</field>
<field name="lpTemplateName">LPCWSTR</field>
<field name="hInstance">HINSTANCE</field>
                                       
   LPWSTR          lpszStyle;          
                                       
   WORD            nFontType;          
                                       
                                       
   WORD            ___MISSING_ALIGNMENT__;
   INT             nSizeMin;           
   INT             nSizeMax;           
                                       
} CHOOSEFONTW;
typedef CHOOSEFONTA CHOOSEFONT;

typedef CHOOSEFONTA *LPCHOOSEFONTA;
typedef CHOOSEFONTW *LPCHOOSEFONTW;
typedef LPCHOOSEFONTA LPCHOOSEFONT;

typedef const CHOOSEFONTA *PCCHOOSEFONTA;
typedef const CHOOSEFONTW *PCCHOOSEFONTW;

typedef CHOOSEFONTA CHOOSEFONT;
typedef PCCHOOSEFONTA PCCHOOSEFONT;
<function name="ChooseFontA" ret="BOOL" convention="__stdcall">
LPCHOOSEFONTA);
<function name="ChooseFontW" ret="BOOL" convention="__stdcall">
LPCHOOSEFONTW);
typedef UINT_PTR (__stdcall *LPPRINTHOOKPROC) (HWND, UINT, WPARAM, LPARAM);
typedef UINT_PTR (__stdcall *LPSETUPHOOKPROC) (HWND, UINT, WPARAM, LPARAM);

<struct name="tagPDA">
<field name="lStructSize">DWORD</field>
<field name="hwndOwner">HWND</field>
<field name="hDevMode">HGLOBAL</field>
<field name="hDevNames">HGLOBAL</field>
<field name="hDC">HDC</field>
<field name="Flags">DWORD</field>
<field name="nFromPage">WORD</field>
<field name="nToPage">WORD</field>
<field name="nMinPage">WORD</field>
<field name="nMaxPage">WORD</field>
<field name="nCopies">WORD</field>
<field name="hInstance">HINSTANCE</field>
<field name="lCustData">LPARAM</field>
<field name="lpfnPrintHook">LPPRINTHOOKPROC</field>
<field name="lpfnSetupHook">LPSETUPHOOKPROC</field>
<field name="lpPrintTemplateName">LPCSTR</field>
<field name="lpSetupTemplateName">LPCSTR</field>
<field name="hPrintTemplate">HGLOBAL</field>
<field name="hSetupTemplate">HGLOBAL</field>
</struct>
<typedefprev id="PRINTDLGA"/>
<typedefptrprev id="LPPRINTDLGA"/>
<struct name="tagPDW">
<field name="lStructSize">DWORD</field>
<field name="hwndOwner">HWND</field>
<field name="hDevMode">HGLOBAL</field>
<field name="hDevNames">HGLOBAL</field>
<field name="hDC">HDC</field>
<field name="Flags">DWORD</field>
<field name="nFromPage">WORD</field>
<field name="nToPage">WORD</field>
<field name="nMinPage">WORD</field>
<field name="nMaxPage">WORD</field>
<field name="nCopies">WORD</field>
<field name="hInstance">HINSTANCE</field>
<field name="lCustData">LPARAM</field>
<field name="lpfnPrintHook">LPPRINTHOOKPROC</field>
<field name="lpfnSetupHook">LPSETUPHOOKPROC</field>
<field name="lpPrintTemplateName">LPCWSTR</field>
<field name="lpSetupTemplateName">LPCWSTR</field>
<field name="hPrintTemplate">HGLOBAL</field>
<field name="hSetupTemplate">HGLOBAL</field>
</struct>
<typedefprev id="PRINTDLGW"/>
<typedefptrprev id="LPPRINTDLGW"/>

typedef PRINTDLGA PRINTDLG;
typedef LPPRINTDLGA LPPRINTDLG;
<function name="PrintDlgA" ret="BOOL" convention="__stdcall">
LPPRINTDLGA);
<function name="PrintDlgW" ret="BOOL" convention="__stdcall">
LPPRINTDLGW);

<struct name="IPrintDialogCallback">
  <vptr>IPrintDialogCallbackVtbl</vptr>
  } IPrintDialogCallback; 
typedef struct IPrintDialogCallbackVtbl IPrintDialogCallbackVtbl; 
struct IPrintDialogCallbackVtbl
{
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
<arg name="This">IPrintDialogCallback *</arg>
<arg name="riid">const IID * const</arg>
 LPVOID *ppvObj) ;
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
IPrintDialogCallback * This) ;
<fnptr name="Release" ret="ULONG" convention="__stdcall">
IPrintDialogCallback * This) ;

    
<fnptr name="InitDone" ret="HRESULT" convention="__stdcall">
IPrintDialogCallback * This) ;
<fnptr name="SelectionChange" ret="HRESULT" convention="__stdcall">
IPrintDialogCallback * This) ;
<fnptr name="HandleMessage" ret="HRESULT" convention="__stdcall">
<arg name="This">IPrintDialogCallback *</arg>
<arg name="hDlg">HWND</arg>
<arg name="uMsg">UINT</arg>
<arg name="wParam">WPARAM</arg>
<arg name="lParam">LPARAM</arg>
 LRESULT *pResult) ;
};

<struct name="IPrintDialogServices">
<vptr>IPrintDialogServicesVtbl</vptr>
  } IPrintDialogServices; 
typedef struct IPrintDialogServicesVtbl IPrintDialogServicesVtbl; 
<struct name="IPrintDialogServicesVtbl">
<fnptr name="QueryInterface" ret="HRESULT" convention="__stdcall">
<arg name="This">IPrintDialogServices *</arg>
<arg name="riid">const IID * const</arg>
 LPVOID *ppvObj) ;
<fnptr name="AddRef" ret="ULONG" convention="__stdcall">
IPrintDialogServices * This) ;
<fnptr name="Release" ret="ULONG" convention="__stdcall">
IPrintDialogServices * This) ;

    
<fnptr name="GetCurrentDevMode" ret="HRESULT" convention="__stdcall">
<arg name="This">IPrintDialogServices *</arg>
<arg name="pDevMode">LPDEVMODE</arg>
  UINT *pcbSize) ;
<fnptr name="GetCurrentPrinterName" ret="HRESULT" convention="__stdcall">
<arg name="This">IPrintDialogServices *</arg>
<arg name="pPrinterName">LPWSTR</arg>
  UINT *pcchSize) ;
<fnptr name="GetCurrentPortName" ret="HRESULT" convention="__stdcall">
<arg name="This">IPrintDialogServices *</arg>
<arg name="pPortName">LPWSTR</arg>
  UINT *pcchSize) ;
};
<struct name="tagPRINTPAGERANGE">
<field name="nFromPage">DWORD</field>
<field name="nToPage">DWORD</field>
} PRINTPAGERANGE;
typedef PRINTPAGERANGE *LPPRINTPAGERANGE;
typedef const PRINTPAGERANGE *PCPRINTPAGERANGE;
<struct name="tagPDEXA">
<field name="lStructSize">DWORD</field>
<field name="hwndOwner">HWND</field>
<field name="hDevMode">HGLOBAL</field>
<field name="hDevNames">HGLOBAL</field>
<field name="hDC">HDC</field>
<field name="Flags">DWORD</field>
<field name="Flags2">DWORD</field>
<field name="ExclusionFlags">DWORD</field>
<field name="nPageRanges">DWORD</field>
<field name="nMaxPageRanges">DWORD</field>
<field name="lpPageRanges">LPPRINTPAGERANGE</field>
<field name="nMinPage">DWORD</field>
<field name="nMaxPage">DWORD</field>
<field name="nCopies">DWORD</field>
<field name="hInstance">HINSTANCE</field>
<field name="lpPrintTemplateName">LPCSTR</field>
<field name="lpCallback">LPUNKNOWN</field>
<field name="nPropertyPages">DWORD</field>
   HPROPSHEETPAGE       *lphPropertyPages;     
   DWORD                 nStartPage;           
   DWORD                 dwResultAction;       
} PRINTDLGEXA, *LPPRINTDLGEXA;
<struct name="tagPDEXW">
<field name="lStructSize">DWORD</field>
<field name="hwndOwner">HWND</field>
<field name="hDevMode">HGLOBAL</field>
<field name="hDevNames">HGLOBAL</field>
<field name="hDC">HDC</field>
<field name="Flags">DWORD</field>
<field name="Flags2">DWORD</field>
<field name="ExclusionFlags">DWORD</field>
<field name="nPageRanges">DWORD</field>
<field name="nMaxPageRanges">DWORD</field>
<field name="lpPageRanges">LPPRINTPAGERANGE</field>
<field name="nMinPage">DWORD</field>
<field name="nMaxPage">DWORD</field>
<field name="nCopies">DWORD</field>
<field name="hInstance">HINSTANCE</field>
<field name="lpPrintTemplateName">LPCWSTR</field>
<field name="lpCallback">LPUNKNOWN</field>
<field name="nPropertyPages">DWORD</field>
   HPROPSHEETPAGE       *lphPropertyPages;     
   DWORD                 nStartPage;           
   DWORD                 dwResultAction;       
} PRINTDLGEXW, *LPPRINTDLGEXW;

typedef PRINTDLGEXA PRINTDLGEX;
typedef LPPRINTDLGEXA LPPRINTDLGEX;
<function name="PrintDlgExA" ret="HRESULT" convention="__stdcall">
LPPRINTDLGEXA);
<function name="PrintDlgExW" ret="HRESULT" convention="__stdcall">
LPPRINTDLGEXW);

<struct name="tagDEVNAMES">
<field name="wDriverOffset">WORD</field>
<field name="wDeviceOffset">WORD</field>
<field name="wOutputOffset">WORD</field>
<field name="wDefault">WORD</field>
} DEVNAMES;
typedef DEVNAMES *LPDEVNAMES;
typedef const DEVNAMES *PCDEVNAMES;

<function name="CommDlgExtendedError" ret="DWORD" convention="__stdcall">
void);
typedef UINT_PTR (__stdcall* LPPAGEPAINTHOOK)( HWND, UINT, WPARAM, LPARAM );
typedef UINT_PTR (__stdcall* LPPAGESETUPHOOK)( HWND, UINT, WPARAM, LPARAM );

<struct name="tagPSDA">
<field name="lStructSize">DWORD</field>
<field name="hwndOwner">HWND</field>
<field name="hDevMode">HGLOBAL</field>
<field name="hDevNames">HGLOBAL</field>
<field name="Flags">DWORD</field>
<field name="ptPaperSize">POINT</field>
<field name="rtMinMargin">RECT</field>
<field name="rtMargin">RECT</field>
<field name="hInstance">HINSTANCE</field>
<field name="lCustData">LPARAM</field>
<field name="lpfnPageSetupHook">LPPAGESETUPHOOK</field>
<field name="lpfnPagePaintHook">LPPAGEPAINTHOOK</field>
<field name="lpPageSetupTemplateName">LPCSTR</field>
<field name="hPageSetupTemplate">HGLOBAL</field>
</struct>
<typedefprev id="PAGESETUPDLGA"/>
<typedefptrprev id="LPPAGESETUPDLGA"/>
<struct name="tagPSDW">
<field name="lStructSize">DWORD</field>
<field name="hwndOwner">HWND</field>
<field name="hDevMode">HGLOBAL</field>
<field name="hDevNames">HGLOBAL</field>
<field name="Flags">DWORD</field>
<field name="ptPaperSize">POINT</field>
<field name="rtMinMargin">RECT</field>
<field name="rtMargin">RECT</field>
<field name="hInstance">HINSTANCE</field>
<field name="lCustData">LPARAM</field>
<field name="lpfnPageSetupHook">LPPAGESETUPHOOK</field>
<field name="lpfnPagePaintHook">LPPAGEPAINTHOOK</field>
<field name="lpPageSetupTemplateName">LPCWSTR</field>
<field name="hPageSetupTemplate">HGLOBAL</field>
</struct>
<typedefprev id="PAGESETUPDLGW"/>
<typedefptrprev id="LPPAGESETUPDLGW"/>

typedef PAGESETUPDLGA PAGESETUPDLG;
typedef LPPAGESETUPDLGA LPPAGESETUPDLG;

<function name="PageSetupDlgA" ret="BOOL" convention="__stdcall">
 LPPAGESETUPDLGA );
<function name="PageSetupDlgW" ret="BOOL" convention="__stdcall">
 LPPAGESETUPDLGW );

#line 1 "\\program files\\Microsoft SDKs\\Windows\\v6.0A\\Include\\poppack.h"
#pragma warning(disable:4103)

#pragma pack(pop)

#line 1 "\\program files\\Microsoft SDKs\\Windows\\v6.0A\\Include\\stralign.h"

__inline
PUWSTR
static
__declspec(deprecated)
ua_wcscpy(
     PUWSTR  Destination,
     PCUWSTR Source
    )
{
#pragma warning(push)
#pragma warning(disable:4995)
#pragma warning(disable:4996)
    return wcscpy(Destination, Source);
#pragma warning(pop)
}

    

                                         
                                                      
#line 1 "\\program files\\Microsoft SDKs\\Windows\\v6.0A\\Include\\winsvc.h"

                                                  
<struct name="_SERVICE_DESCRIPTIONA">
<field name="lpDescription">LPSTR</field>
</struct>
<typedefprev id="SERVICE_DESCRIPTIONA"/>
<typedefptrprev id="LPSERVICE_DESCRIPTIONA"/>
<struct name="_SERVICE_DESCRIPTIONW">
<field name="lpDescription">LPWSTR</field>
</struct>
<typedefprev id="SERVICE_DESCRIPTIONW"/>
<typedefptrprev id="LPSERVICE_DESCRIPTIONW"/>

typedef SERVICE_DESCRIPTIONA SERVICE_DESCRIPTION;
typedef LPSERVICE_DESCRIPTIONA LPSERVICE_DESCRIPTION;
typedef enum _SC_ACTION_TYPE {
        SC_ACTION_NONE          = 0,
        SC_ACTION_RESTART       = 1,
        SC_ACTION_REBOOT        = 2,
        SC_ACTION_RUN_COMMAND   = 3
} SC_ACTION_TYPE;

<struct name="_SC_ACTION">
<field name="Type">SC_ACTION_TYPE</field>
<field name="Delay">DWORD</field>
</struct>
<typedefprev id="SC_ACTION"/>
<typedefptrprev id="LPSC_ACTION"/>

<struct name="_SERVICE_FAILURE_ACTIONSA">
<field name="dwResetPeriod">DWORD</field>
<field name="lpRebootMsg">LPSTR</field>
<field name="lpCommand">LPSTR</field>
<field name="cActions">DWORD</field>
    SC_ACTION * lpsaActions;
} SERVICE_FAILURE_ACTIONSA, *LPSERVICE_FAILURE_ACTIONSA;
<struct name="_SERVICE_FAILURE_ACTIONSW">
<field name="dwResetPeriod">DWORD</field>
<field name="lpRebootMsg">LPWSTR</field>
<field name="lpCommand">LPWSTR</field>
<field name="cActions">DWORD</field>
    SC_ACTION * lpsaActions;
} SERVICE_FAILURE_ACTIONSW, *LPSERVICE_FAILURE_ACTIONSW;

typedef SERVICE_FAILURE_ACTIONSA SERVICE_FAILURE_ACTIONS;
typedef LPSERVICE_FAILURE_ACTIONSA LPSERVICE_FAILURE_ACTIONS;
<struct name="_SERVICE_DELAYED_AUTO_START_INFO">
<field name="fDelayedAutostart">BOOL</field>
</struct>
<typedefprev id="SERVICE_DELAYED_AUTO_START_INFO"/>
<typedefptrprev id="LPSERVICE_DELAYED_AUTO_START_INFO"/>

<struct name="_SERVICE_FAILURE_ACTIONS_FLAG">
<field name="fFailureActionsOnNonCrashFailures">BOOL</field>
</struct>
<typedefprev id="SERVICE_FAILURE_ACTIONS_FLAG"/>
<typedefptrprev id="LPSERVICE_FAILURE_ACTIONS_FLAG"/>

<struct name="_SERVICE_SID_INFO">
<field name="dwServiceSidType">DWORD</field>
</struct>
<typedefprev id="SERVICE_SID_INFO"/>
<typedefptrprev id="LPSERVICE_SID_INFO"/>

<struct name="_SERVICE_REQUIRED_PRIVILEGES_INFOA">
<field name="pmszRequiredPrivileges">LPSTR</field>
</struct>
<typedefprev id="SERVICE_REQUIRED_PRIVILEGES_INFOA"/>
<typedefptrprev id="LPSERVICE_REQUIRED_PRIVILEGES_INFOA"/>
<struct name="_SERVICE_REQUIRED_PRIVILEGES_INFOW">
<field name="pmszRequiredPrivileges">LPWSTR</field>
</struct>
<typedefprev id="SERVICE_REQUIRED_PRIVILEGES_INFOW"/>
<typedefptrprev id="LPSERVICE_REQUIRED_PRIVILEGES_INFOW"/>

typedef SERVICE_REQUIRED_PRIVILEGES_INFOA SERVICE_REQUIRED_PRIVILEGES_INFO;
typedef LPSERVICE_REQUIRED_PRIVILEGES_INFOA LPSERVICE_REQUIRED_PRIVILEGES_INFO;
<struct name="_SERVICE_PRESHUTDOWN_INFO">
<field name="dwPreshutdownTimeout">DWORD</field>
</struct>
<typedefprev id="SERVICE_PRESHUTDOWN_INFO"/>
<typedefptrprev id="LPSERVICE_PRESHUTDOWN_INFO"/>
<struct name="SC_HANDLE__">
<field name="unused">int</field>
</struct>
<typedef name="SC_HANDLE">SC_HANDLE__ *</typedef>
typedef SC_HANDLE   *LPSC_HANDLE;

<struct name="SERVICE_STATUS_HANDLE__">
int unused; };
<typedef name="SERVICE_STATUS_HANDLE">SERVICE_STATUS_HANDLE__ *</typedef>
typedef enum _SC_STATUS_TYPE {
    SC_STATUS_PROCESS_INFO      = 0
} SC_STATUS_TYPE;

typedef enum _SC_ENUM_TYPE {
    SC_ENUM_PROCESS_INFO        = 0
} SC_ENUM_TYPE;

<struct name="_SERVICE_STATUS">
<field name="dwServiceType">DWORD</field>
<field name="dwCurrentState">DWORD</field>
<field name="dwControlsAccepted">DWORD</field>
<field name="dwWin32ExitCode">DWORD</field>
<field name="dwServiceSpecificExitCode">DWORD</field>
<field name="dwCheckPoint">DWORD</field>
<field name="dwWaitHint">DWORD</field>
</struct>
<typedefprev id="SERVICE_STATUS"/>
<typedefptrprev id="LPSERVICE_STATUS"/>

<struct name="_SERVICE_STATUS_PROCESS">
<field name="dwServiceType">DWORD</field>
<field name="dwCurrentState">DWORD</field>
<field name="dwControlsAccepted">DWORD</field>
<field name="dwWin32ExitCode">DWORD</field>
<field name="dwServiceSpecificExitCode">DWORD</field>
<field name="dwCheckPoint">DWORD</field>
<field name="dwWaitHint">DWORD</field>
<field name="dwProcessId">DWORD</field>
<field name="dwServiceFlags">DWORD</field>
</struct>
<typedefprev id="SERVICE_STATUS_PROCESS"/>
<typedefptrprev id="LPSERVICE_STATUS_PROCESS"/>

<struct name="_ENUM_SERVICE_STATUSA">
<field name="lpServiceName">LPSTR</field>
<field name="lpDisplayName">LPSTR</field>
<field name="ServiceStatus">SERVICE_STATUS</field>
</struct>
<typedefprev id="ENUM_SERVICE_STATUSA"/>
<typedefptrprev id="LPENUM_SERVICE_STATUSA"/>
<struct name="_ENUM_SERVICE_STATUSW">
<field name="lpServiceName">LPWSTR</field>
<field name="lpDisplayName">LPWSTR</field>
<field name="ServiceStatus">SERVICE_STATUS</field>
</struct>
<typedefprev id="ENUM_SERVICE_STATUSW"/>
<typedefptrprev id="LPENUM_SERVICE_STATUSW"/>

typedef ENUM_SERVICE_STATUSA ENUM_SERVICE_STATUS;
typedef LPENUM_SERVICE_STATUSA LPENUM_SERVICE_STATUS;
<struct name="_ENUM_SERVICE_STATUS_PROCESSA">
<field name="lpServiceName">LPSTR</field>
<field name="lpDisplayName">LPSTR</field>
<field name="ServiceStatusProcess">SERVICE_STATUS_PROCESS</field>
</struct>
<typedefprev id="ENUM_SERVICE_STATUS_PROCESSA"/>
<typedefptrprev id="LPENUM_SERVICE_STATUS_PROCESSA"/>
<struct name="_ENUM_SERVICE_STATUS_PROCESSW">
<field name="lpServiceName">LPWSTR</field>
<field name="lpDisplayName">LPWSTR</field>
<field name="ServiceStatusProcess">SERVICE_STATUS_PROCESS</field>
</struct>
<typedefprev id="ENUM_SERVICE_STATUS_PROCESSW"/>
<typedefptrprev id="LPENUM_SERVICE_STATUS_PROCESSW"/>

typedef ENUM_SERVICE_STATUS_PROCESSA ENUM_SERVICE_STATUS_PROCESS;
typedef LPENUM_SERVICE_STATUS_PROCESSA LPENUM_SERVICE_STATUS_PROCESS;

typedef LPVOID  SC_LOCK;

<struct name="_QUERY_SERVICE_LOCK_STATUSA">
<field name="fIsLocked">DWORD</field>
<field name="lpLockOwner">LPSTR</field>
<field name="dwLockDuration">DWORD</field>
</struct>
<typedefprev id="QUERY_SERVICE_LOCK_STATUSA"/>
<typedefptrprev id="LPQUERY_SERVICE_LOCK_STATUSA"/>
<struct name="_QUERY_SERVICE_LOCK_STATUSW">
<field name="fIsLocked">DWORD</field>
<field name="lpLockOwner">LPWSTR</field>
<field name="dwLockDuration">DWORD</field>
</struct>
<typedefprev id="QUERY_SERVICE_LOCK_STATUSW"/>
<typedefptrprev id="LPQUERY_SERVICE_LOCK_STATUSW"/>

typedef QUERY_SERVICE_LOCK_STATUSA QUERY_SERVICE_LOCK_STATUS;
typedef LPQUERY_SERVICE_LOCK_STATUSA LPQUERY_SERVICE_LOCK_STATUS;

<struct name="_QUERY_SERVICE_CONFIGA">
<field name="dwServiceType">DWORD</field>
<field name="dwStartType">DWORD</field>
<field name="dwErrorControl">DWORD</field>
<field name="lpBinaryPathName">LPSTR</field>
<field name="lpLoadOrderGroup">LPSTR</field>
<field name="dwTagId">DWORD</field>
<field name="lpDependencies">LPSTR</field>
<field name="lpServiceStartName">LPSTR</field>
<field name="lpDisplayName">LPSTR</field>
</struct>
<typedefprev id="QUERY_SERVICE_CONFIGA"/>
<typedefptrprev id="LPQUERY_SERVICE_CONFIGA"/>
<struct name="_QUERY_SERVICE_CONFIGW">
<field name="dwServiceType">DWORD</field>
<field name="dwStartType">DWORD</field>
<field name="dwErrorControl">DWORD</field>
<field name="lpBinaryPathName">LPWSTR</field>
<field name="lpLoadOrderGroup">LPWSTR</field>
<field name="dwTagId">DWORD</field>
<field name="lpDependencies">LPWSTR</field>
<field name="lpServiceStartName">LPWSTR</field>
<field name="lpDisplayName">LPWSTR</field>
</struct>
<typedefprev id="QUERY_SERVICE_CONFIGW"/>
<typedefptrprev id="LPQUERY_SERVICE_CONFIGW"/>

typedef QUERY_SERVICE_CONFIGA QUERY_SERVICE_CONFIG;
typedef LPQUERY_SERVICE_CONFIGA LPQUERY_SERVICE_CONFIG;

typedef<fnptr name="LPSERVICE_MAIN_FUNCTIONW" ret="void" convention="__stdcall">
<arg name="dwNumServicesArgs">DWORD  </arg>
<arg name="lpServiceArgVectors">LPWSTR  *</arg>
</function>

typedef<fnptr name="LPSERVICE_MAIN_FUNCTIONA" ret="void" convention="__stdcall">
<arg name="dwNumServicesArgs">DWORD  </arg>
<arg name="lpServiceArgVectors">LPSTR   *</arg>
</function>
<struct name="_SERVICE_TABLE_ENTRYA">
<field name="lpServiceName">LPSTR</field>
<field name="lpServiceProc">LPSERVICE_MAIN_FUNCTIONA</field>
}SERVICE_TABLE_ENTRYA, *LPSERVICE_TABLE_ENTRYA;
<struct name="_SERVICE_TABLE_ENTRYW">
<field name="lpServiceName">LPWSTR</field>
<field name="lpServiceProc">LPSERVICE_MAIN_FUNCTIONW</field>
}SERVICE_TABLE_ENTRYW, *LPSERVICE_TABLE_ENTRYW;

typedef SERVICE_TABLE_ENTRYA SERVICE_TABLE_ENTRY;
typedef LPSERVICE_TABLE_ENTRYA LPSERVICE_TABLE_ENTRY;

typedef<fnptr name="LPHANDLER_FUNCTION" ret="void" convention="__stdcall">

<arg name="dwControl">DWORD   </arg>
</function>

typedef<fnptr name="LPHANDLER_FUNCTION_EX" ret="DWORD" convention="__stdcall">
<arg name="dwControl">DWORD   </arg>
<arg name="dwEventType">DWORD   </arg>
<arg name="lpEventData">LPVOID  </arg>
<arg name="lpContext">LPVOID  </arg>
</function>

typedef 
void
( __stdcall * PFN_SC_NOTIFY_CALLBACK ) (
     PVOID pParameter 
    );

<struct name="_SERVICE_NOTIFY_1">
<field name="dwVersion">DWORD</field>
<field name="pfnNotifyCallback">PFN_SC_NOTIFY_CALLBACK</field>
<field name="pContext">PVOID</field>
<field name="dwNotificationStatus">DWORD</field>
<field name="ServiceStatus">SERVICE_STATUS_PROCESS</field>
</struct>
<typedefprev id="SERVICE_NOTIFY_1"/>
<typedefptrprev id="PSERVICE_NOTIFY_1"/>

<struct name="_SERVICE_NOTIFY_2A">
<field name="dwVersion">DWORD</field>
<field name="pfnNotifyCallback">PFN_SC_NOTIFY_CALLBACK</field>
<field name="pContext">PVOID</field>
<field name="dwNotificationStatus">DWORD</field>
<field name="ServiceStatus">SERVICE_STATUS_PROCESS</field>
<field name="dwNotificationTriggered">DWORD</field>
<field name="pszServiceNames">LPSTR</field>
</struct>
<typedefprev id="SERVICE_NOTIFY_2A"/>
<typedefptrprev id="PSERVICE_NOTIFY_2A"/>
<struct name="_SERVICE_NOTIFY_2W">
<field name="dwVersion">DWORD</field>
<field name="pfnNotifyCallback">PFN_SC_NOTIFY_CALLBACK</field>
<field name="pContext">PVOID</field>
<field name="dwNotificationStatus">DWORD</field>
<field name="ServiceStatus">SERVICE_STATUS_PROCESS</field>
<field name="dwNotificationTriggered">DWORD</field>
<field name="pszServiceNames">LPWSTR</field>
</struct>
<typedefprev id="SERVICE_NOTIFY_2W"/>
<typedefptrprev id="PSERVICE_NOTIFY_2W"/>

typedef SERVICE_NOTIFY_2A SERVICE_NOTIFY_2;
typedef PSERVICE_NOTIFY_2A PSERVICE_NOTIFY_2;
typedef SERVICE_NOTIFY_2A SERVICE_NOTIFYA, *PSERVICE_NOTIFYA;
typedef SERVICE_NOTIFY_2W SERVICE_NOTIFYW, *PSERVICE_NOTIFYW;

typedef SERVICE_NOTIFYA SERVICE_NOTIFY;
typedef PSERVICE_NOTIFYA PSERVICE_NOTIFY;
<struct name="_SERVICE_CONTROL_STATUS_REASON_PARAMSA">
<field name="dwReason">DWORD</field>
<field name="pszComment">LPSTR</field>
<field name="ServiceStatus">SERVICE_STATUS_PROCESS</field>
</struct>
<typedefprev id="SERVICE_CONTROL_STATUS_REASON_PARAMSA"/>
<typedefptrprev id="PSERVICE_CONTROL_STATUS_REASON_PARAMSA"/>
<struct name="_SERVICE_CONTROL_STATUS_REASON_PARAMSW">
<field name="dwReason">DWORD</field>
<field name="pszComment">LPWSTR</field>
<field name="ServiceStatus">SERVICE_STATUS_PROCESS</field>
</struct>
<typedefprev id="SERVICE_CONTROL_STATUS_REASON_PARAMSW"/>
<typedefptrprev id="PSERVICE_CONTROL_STATUS_REASON_PARAMSW"/>

typedef SERVICE_CONTROL_STATUS_REASON_PARAMSA SERVICE_CONTROL_STATUS_REASON_PARAMS;
typedef PSERVICE_CONTROL_STATUS_REASON_PARAMSA PSERVICE_CONTROL_STATUS_REASON_PARAMS;
<function name="ChangeServiceConfigA" ret="BOOL" convention="__stdcall">
<arg name="hService">SC_HANDLE   </arg>
<arg name="dwServiceType">DWORD       </arg>
<arg name="dwStartType">DWORD       </arg>
<arg name="dwErrorControl">DWORD       </arg>
<arg name="lpBinaryPathName">LPCSTR    </arg>
<arg name="lpLoadOrderGroup">LPCSTR    </arg>
<arg name="lpdwTagId">LPDWORD     </arg>
<arg name="lpDependencies">LPCSTR    </arg>
<arg name="lpServiceStartName">LPCSTR    </arg>
<arg name="lpPassword">LPCSTR    </arg>
<arg name="lpDisplayName">LPCSTR    </arg>
</function>
<function name="ChangeServiceConfigW" ret="BOOL" convention="__stdcall">
<arg name="hService">SC_HANDLE   </arg>
<arg name="dwServiceType">DWORD       </arg>
<arg name="dwStartType">DWORD       </arg>
<arg name="dwErrorControl">DWORD       </arg>
<arg name="lpBinaryPathName">LPCWSTR    </arg>
<arg name="lpLoadOrderGroup">LPCWSTR    </arg>
<arg name="lpdwTagId">LPDWORD     </arg>
<arg name="lpDependencies">LPCWSTR    </arg>
<arg name="lpServiceStartName">LPCWSTR    </arg>
<arg name="lpPassword">LPCWSTR    </arg>
<arg name="lpDisplayName">LPCWSTR    </arg>
</function>
<function name="ChangeServiceConfig2A" ret="BOOL" convention="__stdcall">
<arg name="hService">SC_HANDLE   </arg>
<arg name="dwInfoLevel">DWORD       </arg>
<arg name="lpInfo">LPVOID      </arg>
</function>
<function name="ChangeServiceConfig2W" ret="BOOL" convention="__stdcall">
<arg name="hService">SC_HANDLE   </arg>
<arg name="dwInfoLevel">DWORD       </arg>
<arg name="lpInfo">LPVOID      </arg>
</function>
<function name="CloseServiceHandle" ret="BOOL" convention="__stdcall">
<arg name="hSCObject">SC_HANDLE  </arg>
</function>

<function name="ControlService" ret="BOOL" convention="__stdcall">
<arg name="hService">SC_HANDLE          </arg>
<arg name="dwControl">DWORD              </arg>
<arg name="lpServiceStatus">LPSERVICE_STATUS   </arg>
</function>
<function name="CreateServiceA" ret="SC_HANDLE" convention="__stdcall">
<arg name="hSCManager">SC_HANDLE   </arg>
<arg name="lpServiceName">LPCSTR    </arg>
<arg name="lpDisplayName">LPCSTR    </arg>
<arg name="dwDesiredAccess">DWORD       </arg>
<arg name="dwServiceType">DWORD       </arg>
<arg name="dwStartType">DWORD       </arg>
<arg name="dwErrorControl">DWORD       </arg>
<arg name="lpBinaryPathName">LPCSTR    </arg>
<arg name="lpLoadOrderGroup">LPCSTR    </arg>
<arg name="lpdwTagId">LPDWORD     </arg>
<arg name="lpDependencies">LPCSTR    </arg>
<arg name="lpServiceStartName">LPCSTR    </arg>
<arg name="lpPassword">LPCSTR    </arg>
</function>

<function name="CreateServiceW" ret="SC_HANDLE" convention="__stdcall">
<arg name="hSCManager">SC_HANDLE   </arg>
<arg name="lpServiceName">LPCWSTR    </arg>
<arg name="lpDisplayName">LPCWSTR    </arg>
<arg name="dwDesiredAccess">DWORD       </arg>
<arg name="dwServiceType">DWORD       </arg>
<arg name="dwStartType">DWORD       </arg>
<arg name="dwErrorControl">DWORD       </arg>
<arg name="lpBinaryPathName">LPCWSTR    </arg>
<arg name="lpLoadOrderGroup">LPCWSTR    </arg>
<arg name="lpdwTagId">LPDWORD     </arg>
<arg name="lpDependencies">LPCWSTR    </arg>
<arg name="lpServiceStartName">LPCWSTR    </arg>
<arg name="lpPassword">LPCWSTR    </arg>
</function>
<function name="DeleteService" ret="BOOL" convention="__stdcall">
<arg name="hService">SC_HANDLE  </arg>
</function>
<function name="EnumDependentServicesA" ret="BOOL" convention="__stdcall">
<arg name="hService">SC_HANDLE              </arg>
<arg name="dwServiceState">DWORD                  </arg>

         
                    LPENUM_SERVICE_STATUSA  lpServices,
                DWORD                   cbBufSize,
               LPDWORD                 pcbBytesNeeded,
<arg name="lpServicesReturned">LPDWORD                </arg>
</function>

<function name="EnumDependentServicesW" ret="BOOL" convention="__stdcall">
<arg name="hService">SC_HANDLE              </arg>
<arg name="dwServiceState">DWORD                  </arg>

         
                    LPENUM_SERVICE_STATUSW  lpServices,
                DWORD                   cbBufSize,
               LPDWORD                 pcbBytesNeeded,
<arg name="lpServicesReturned">LPDWORD                </arg>
</function>
<function name="EnumServicesStatusA" ret="BOOL" convention="__stdcall">
<arg name="hSCManager">SC_HANDLE              </arg>
<arg name="dwServiceType">DWORD                  </arg>
<arg name="dwServiceState">DWORD                  </arg>

    
                    LPENUM_SERVICE_STATUSA  lpServices,
                DWORD                   cbBufSize,
               LPDWORD                 pcbBytesNeeded,
               LPDWORD                 lpServicesReturned,
<arg name="lpResumeHandle">LPDWORD                </arg>
</function>

<function name="EnumServicesStatusW" ret="BOOL" convention="__stdcall">
<arg name="hSCManager">SC_HANDLE              </arg>
<arg name="dwServiceType">DWORD                  </arg>
<arg name="dwServiceState">DWORD                  </arg>

    
                    LPENUM_SERVICE_STATUSW  lpServices,
                DWORD                   cbBufSize,
               LPDWORD                 pcbBytesNeeded,
               LPDWORD                 lpServicesReturned,
<arg name="lpResumeHandle">LPDWORD                </arg>
</function>
<function name="EnumServicesStatusExA" ret="BOOL" convention="__stdcall">
<arg name="hSCManager">SC_HANDLE              </arg>
<arg name="InfoLevel">SC_ENUM_TYPE           </arg>
<arg name="dwServiceType">DWORD                  </arg>
<arg name="dwServiceState">DWORD                  </arg>

     
                    LPBYTE                  lpServices,
                DWORD                   cbBufSize,
               LPDWORD                 pcbBytesNeeded,
               LPDWORD                 lpServicesReturned,
         LPDWORD                 lpResumeHandle,
<arg name="pszGroupName">LPCSTR               </arg>
</function>

<function name="EnumServicesStatusExW" ret="BOOL" convention="__stdcall">
<arg name="hSCManager">SC_HANDLE              </arg>
<arg name="InfoLevel">SC_ENUM_TYPE           </arg>
<arg name="dwServiceType">DWORD                  </arg>
<arg name="dwServiceState">DWORD                  </arg>

     
                    LPBYTE                  lpServices,
                DWORD                   cbBufSize,
               LPDWORD                 pcbBytesNeeded,
               LPDWORD                 lpServicesReturned,
         LPDWORD                 lpResumeHandle,
<arg name="pszGroupName">LPCWSTR               </arg>
</function>
<function name="GetServiceKeyNameA" ret="BOOL" convention="__stdcall">
<arg name="hSCManager">SC_HANDLE              </arg>
<arg name="lpDisplayName">LPCSTR               </arg>

    
                    LPSTR                 lpServiceName,
<arg name="lpcchBuffer">LPDWORD                </arg>
</function>

<function name="GetServiceKeyNameW" ret="BOOL" convention="__stdcall">
<arg name="hSCManager">SC_HANDLE              </arg>
<arg name="lpDisplayName">LPCWSTR               </arg>

    
                    LPWSTR                 lpServiceName,
<arg name="lpcchBuffer">LPDWORD                </arg>
</function>
<function name="GetServiceDisplayNameA" ret="BOOL" convention="__stdcall">
<arg name="hSCManager">SC_HANDLE              </arg>
<arg name="lpServiceName">LPCSTR               </arg>

     
                    LPSTR                 lpDisplayName,
<arg name="lpcchBuffer">LPDWORD                </arg>
</function>

<function name="GetServiceDisplayNameW" ret="BOOL" convention="__stdcall">
<arg name="hSCManager">SC_HANDLE              </arg>
<arg name="lpServiceName">LPCWSTR               </arg>

     
                    LPWSTR                 lpDisplayName,
<arg name="lpcchBuffer">LPDWORD                </arg>
</function>
<function name="LockServiceDatabase" ret="SC_LOCK" convention="__stdcall">
<arg name="hSCManager">SC_HANDLE              </arg>
</function>

<function name="NotifyBootConfigStatus" ret="BOOL" convention="__stdcall">
<arg name="BootAcceptable">BOOL                   </arg>
</function>
<function name="OpenSCManagerA" ret="SC_HANDLE" convention="__stdcall">
<arg name="lpMachineName">LPCSTR               </arg>
<arg name="lpDatabaseName">LPCSTR               </arg>
<arg name="dwDesiredAccess">DWORD                  </arg>
</function>

<function name="OpenSCManagerW" ret="SC_HANDLE" convention="__stdcall">
<arg name="lpMachineName">LPCWSTR               </arg>
<arg name="lpDatabaseName">LPCWSTR               </arg>
<arg name="dwDesiredAccess">DWORD                  </arg>
</function>

<function name="OpenServiceA" ret="SC_HANDLE" convention="__stdcall">
<arg name="hSCManager">SC_HANDLE              </arg>
<arg name="lpServiceName">LPCSTR               </arg>
<arg name="dwDesiredAccess">DWORD                  </arg>
</function>

<function name="OpenServiceW" ret="SC_HANDLE" convention="__stdcall">
<arg name="hSCManager">SC_HANDLE              </arg>
<arg name="lpServiceName">LPCWSTR               </arg>
<arg name="dwDesiredAccess">DWORD                  </arg>
</function>

<function name="QueryServiceConfigA" ret="BOOL" convention="__stdcall">
<arg name="hService">SC_HANDLE              </arg>

          
                    LPQUERY_SERVICE_CONFIGA lpServiceConfig,
                DWORD                   cbBufSize,
<arg name="pcbBytesNeeded">LPDWORD                </arg>
</function>

<function name="QueryServiceConfigW" ret="BOOL" convention="__stdcall">
<arg name="hService">SC_HANDLE              </arg>

          
                    LPQUERY_SERVICE_CONFIGW lpServiceConfig,
                DWORD                   cbBufSize,
<arg name="pcbBytesNeeded">LPDWORD                </arg>
</function>

<function name="QueryServiceConfig2A" ret="BOOL" convention="__stdcall">
<arg name="hService">SC_HANDLE              </arg>
<arg name="dwInfoLevel">DWORD                  </arg>

     
                    LPBYTE                  lpBuffer,
                DWORD                   cbBufSize,
<arg name="pcbBytesNeeded">LPDWORD                </arg>
</function>

<function name="QueryServiceConfig2W" ret="BOOL" convention="__stdcall">
<arg name="hService">SC_HANDLE              </arg>
<arg name="dwInfoLevel">DWORD                  </arg>

     
                    LPBYTE                  lpBuffer,
                DWORD                   cbBufSize,
<arg name="pcbBytesNeeded">LPDWORD                </arg>
</function>

<function name="QueryServiceLockStatusA" ret="BOOL" convention="__stdcall">
<arg name="hSCManager">SC_HANDLE                      </arg>

     
                    LPQUERY_SERVICE_LOCK_STATUSA    lpLockStatus,
                DWORD                           cbBufSize,
<arg name="pcbBytesNeeded">LPDWORD                        </arg>
</function>

<function name="QueryServiceLockStatusW" ret="BOOL" convention="__stdcall">
<arg name="hSCManager">SC_HANDLE                      </arg>

     
                    LPQUERY_SERVICE_LOCK_STATUSW    lpLockStatus,
                DWORD                           cbBufSize,
<arg name="pcbBytesNeeded">LPDWORD                        </arg>
</function>

<function name="QueryServiceObjectSecurity" ret="BOOL" convention="__stdcall">
<arg name="hService">SC_HANDLE              </arg>
<arg name="dwSecurityInformation">SECURITY_INFORMATION   </arg>

     
                    PSECURITY_DESCRIPTOR    lpSecurityDescriptor,
                DWORD                   cbBufSize,
<arg name="pcbBytesNeeded">LPDWORD                </arg>
</function>
<function name="QueryServiceStatus" ret="BOOL" convention="__stdcall">
<arg name="hService">SC_HANDLE          </arg>
<arg name="lpServiceStatus">LPSERVICE_STATUS   </arg>
</function>
<function name="QueryServiceStatusEx" ret="BOOL" convention="__stdcall">
<arg name="hService">SC_HANDLE          </arg>
<arg name="InfoLevel">SC_STATUS_TYPE     </arg>

     
                    LPBYTE              lpBuffer,
                DWORD               cbBufSize,
<arg name="pcbBytesNeeded">LPDWORD            </arg>
</function>
<function name="RegisterServiceCtrlHandlerA" ret="SERVICE_STATUS_HANDLE" convention="__stdcall">
<arg name="lpServiceName">LPCSTR                   </arg>

          
<arg name="lpHandlerProc">LPHANDLER_FUNCTION         </arg>
</function>

<function name="RegisterServiceCtrlHandlerW" ret="SERVICE_STATUS_HANDLE" convention="__stdcall">
<arg name="lpServiceName">LPCWSTR                   </arg>

          
<arg name="lpHandlerProc">LPHANDLER_FUNCTION         </arg>
</function>

<function name="RegisterServiceCtrlHandlerExA" ret="SERVICE_STATUS_HANDLE" convention="__stdcall">
<arg name="lpServiceName">LPCSTR                   </arg>

        
            LPHANDLER_FUNCTION_EX       lpHandlerProc,
<arg name="lpContext">LPVOID                    </arg>
</function>

<function name="RegisterServiceCtrlHandlerExW" ret="SERVICE_STATUS_HANDLE" convention="__stdcall">
<arg name="lpServiceName">LPCWSTR                   </arg>

        
            LPHANDLER_FUNCTION_EX       lpHandlerProc,
<arg name="lpContext">LPVOID                    </arg>
</function>
<function name="SetServiceObjectSecurity" ret="BOOL" convention="__stdcall">
<arg name="hService">SC_HANDLE              </arg>
<arg name="dwSecurityInformation">SECURITY_INFORMATION   </arg>
<arg name="lpSecurityDescriptor">PSECURITY_DESCRIPTOR   </arg>
</function>

<function name="SetServiceStatus" ret="BOOL" convention="__stdcall">
<arg name="hServiceStatus">SERVICE_STATUS_HANDLE  </arg>
<arg name="lpServiceStatus">LPSERVICE_STATUS       </arg>
</function>

<function name="StartServiceCtrlDispatcherA" ret="BOOL" convention="__stdcall">
<arg name="lpServiceStartTable">const  SERVICE_TABLE_ENTRYA    *</arg>
</function>
<function name="StartServiceCtrlDispatcherW" ret="BOOL" convention="__stdcall">
<arg name="lpServiceStartTable">const  SERVICE_TABLE_ENTRYW    *</arg>
</function>

<function name="StartServiceA" ret="BOOL" convention="__stdcall">
<arg name="hService">SC_HANDLE           </arg>
<arg name="dwNumServiceArgs">DWORD               </arg>

           
<arg name="lpServiceArgVectors">LPCSTR             *</arg>
</function>
<function name="StartServiceW" ret="BOOL" convention="__stdcall">
<arg name="hService">SC_HANDLE           </arg>
<arg name="dwNumServiceArgs">DWORD               </arg>

           
<arg name="lpServiceArgVectors">LPCWSTR             *</arg>
</function>
<function name="UnlockServiceDatabase" ret="BOOL" convention="__stdcall">
<arg name="ScLock">SC_LOCK            </arg>
</function>

<function name="NotifyServiceStatusChangeA" ret="DWORD" convention="__stdcall">
<arg name="hService">SC_HANDLE              </arg>
<arg name="dwNotifyMask">DWORD                  </arg>
 
<arg name="pNotifyBuffer">PSERVICE_NOTIFYA       </arg>
</function>
<function name="NotifyServiceStatusChangeW" ret="DWORD" convention="__stdcall">
<arg name="hService">SC_HANDLE              </arg>
<arg name="dwNotifyMask">DWORD                  </arg>
 
<arg name="pNotifyBuffer">PSERVICE_NOTIFYW       </arg>
</function>
<function name="ControlServiceExA" ret="BOOL" convention="__stdcall">
<arg name="hService">SC_HANDLE              </arg>
<arg name="dwControl">DWORD                  </arg>
<arg name="dwInfoLevel">DWORD                  </arg>
<arg name="pControlParams">PVOID                  </arg>
</function>
<function name="ControlServiceExW" ret="BOOL" convention="__stdcall">
<arg name="hService">SC_HANDLE              </arg>
<arg name="dwControl">DWORD                  </arg>
<arg name="dwInfoLevel">DWORD                  </arg>
<arg name="pControlParams">PVOID                  </arg>
</function>

    
#line 1 "\\program files\\Microsoft SDKs\\Windows\\v6.0A\\Include\\mcx.h"
#pragma once

<struct name="_MODEMDEVCAPS">
<field name="dwActualSize">DWORD</field>
<field name="dwRequiredSize">DWORD</field>
<field name="dwDevSpecificOffset">DWORD</field>
<field name="dwDevSpecificSize">DWORD</field>
    
    DWORD   dwModemProviderVersion;
    DWORD   dwModemManufacturerOffset;
    DWORD   dwModemManufacturerSize;
    DWORD   dwModemModelOffset;
    DWORD   dwModemModelSize;
    DWORD   dwModemVersionOffset;
    DWORD   dwModemVersionSize;

    
    DWORD   dwDialOptions;          
    DWORD   dwCallSetupFailTimer;   
    DWORD   dwInactivityTimeout;    
    DWORD   dwSpeakerVolume;        
    DWORD   dwSpeakerMode;          
    DWORD   dwModemOptions;         
    DWORD   dwMaxDTERate;           
    DWORD   dwMaxDCERate;           

    
    BYTE    abVariablePortion [1];
} MODEMDEVCAPS, *PMODEMDEVCAPS, *LPMODEMDEVCAPS;

<struct name="_MODEMSETTINGS">
<field name="dwActualSize">DWORD</field>
<field name="dwRequiredSize">DWORD</field>
<field name="dwDevSpecificOffset">DWORD</field>
<field name="dwDevSpecificSize">DWORD</field>
    
    DWORD   dwCallSetupFailTimer;       
    DWORD   dwInactivityTimeout;        
    DWORD   dwSpeakerVolume;            
    DWORD   dwSpeakerMode;              
    DWORD   dwPreferredModemOptions;    

    
    DWORD   dwNegotiatedModemOptions;   
    DWORD   dwNegotiatedDCERate;        

    
    BYTE    abVariablePortion [1];
} MODEMSETTINGS, *PMODEMSETTINGS, *LPMODEMSETTINGS;
#line 1 "\\program files\\Microsoft SDKs\\Windows\\v6.0A\\Include\\imm.h"
<struct name="HIMC__">
int unused; };
<typedef name="HIMC">HIMC__ *</typedef>
<struct name="HIMCC__">
int unused; };
<typedef name="HIMCC">HIMCC__ *</typedef>
typedef HKL   *LPHKL;
typedef UINT  *LPUINT;

<struct name="tagCOMPOSITIONFORM">
<field name="dwStyle">DWORD</field>
<field name="ptCurrentPos">POINT</field>
<field name="rcArea">RECT</field>
} COMPOSITIONFORM, *PCOMPOSITIONFORM,  *NPCOMPOSITIONFORM,  *LPCOMPOSITIONFORM;
<struct name="tagCANDIDATEFORM">
<field name="dwIndex">DWORD</field>
<field name="dwStyle">DWORD</field>
<field name="ptCurrentPos">POINT</field>
<field name="rcArea">RECT</field>
} CANDIDATEFORM, *PCANDIDATEFORM,  *NPCANDIDATEFORM,  *LPCANDIDATEFORM;
<struct name="tagCANDIDATELIST">
<field name="dwSize">DWORD</field>
<field name="dwStyle">DWORD</field>
<field name="dwCount">DWORD</field>
<field name="dwSelection">DWORD</field>
<field name="dwPageStart">DWORD</field>
<field name="dwPageSize">DWORD</field>
<field name="dwOffset[1]">DWORD</field>
} CANDIDATELIST, *PCANDIDATELIST,  *NPCANDIDATELIST,  *LPCANDIDATELIST;

<struct name="tagREGISTERWORDA">
<field name="lpReading">LPSTR</field>
<field name="lpWord">LPSTR</field>
} REGISTERWORDA, *PREGISTERWORDA,  *NPREGISTERWORDA,  *LPREGISTERWORDA;
<struct name="tagREGISTERWORDW">
<field name="lpReading">LPWSTR</field>
<field name="lpWord">LPWSTR</field>
} REGISTERWORDW, *PREGISTERWORDW,  *NPREGISTERWORDW,  *LPREGISTERWORDW;

typedef REGISTERWORDA REGISTERWORD;
typedef PREGISTERWORDA PREGISTERWORD;
typedef NPREGISTERWORDA NPREGISTERWORD;
typedef LPREGISTERWORDA LPREGISTERWORD;

<struct name="tagRECONVERTSTRING">
<field name="dwSize">DWORD</field>
<field name="dwVersion">DWORD</field>
<field name="dwStrLen">DWORD</field>
<field name="dwStrOffset">DWORD</field>
<field name="dwCompStrLen">DWORD</field>
<field name="dwCompStrOffset">DWORD</field>
<field name="dwTargetStrLen">DWORD</field>
<field name="dwTargetStrOffset">DWORD</field>
} RECONVERTSTRING, *PRECONVERTSTRING,  *NPRECONVERTSTRING,  *LPRECONVERTSTRING;
<struct name="tagSTYLEBUFA">
<field name="dwStyle">DWORD</field>
<field name="szDescription[32]">CHAR</field>
} STYLEBUFA, *PSTYLEBUFA,  *NPSTYLEBUFA,  *LPSTYLEBUFA;
<struct name="tagSTYLEBUFW">
<field name="dwStyle">DWORD</field>
<field name="szDescription[32]">WCHAR</field>
} STYLEBUFW, *PSTYLEBUFW,  *NPSTYLEBUFW,  *LPSTYLEBUFW;

typedef STYLEBUFA STYLEBUF;
typedef PSTYLEBUFA PSTYLEBUF;
typedef NPSTYLEBUFA NPSTYLEBUF;
typedef LPSTYLEBUFA LPSTYLEBUF;

<struct name="tagIMEMENUITEMINFOA">
<field name="cbSize">UINT</field>
<field name="fType">UINT</field>
<field name="fState">UINT</field>
<field name="wID">UINT</field>
<field name="hbmpChecked">HBITMAP</field>
<field name="hbmpUnchecked">HBITMAP</field>
<field name="dwItemData">DWORD</field>
<field name="szString[80]">CHAR</field>
<field name="hbmpItem">HBITMAP</field>
} IMEMENUITEMINFOA, *PIMEMENUITEMINFOA,  *NPIMEMENUITEMINFOA,  *LPIMEMENUITEMINFOA;
<struct name="tagIMEMENUITEMINFOW">
<field name="cbSize">UINT</field>
<field name="fType">UINT</field>
<field name="fState">UINT</field>
<field name="wID">UINT</field>
<field name="hbmpChecked">HBITMAP</field>
<field name="hbmpUnchecked">HBITMAP</field>
<field name="dwItemData">DWORD</field>
<field name="szString[80]">WCHAR</field>
<field name="hbmpItem">HBITMAP</field>
} IMEMENUITEMINFOW, *PIMEMENUITEMINFOW,  *NPIMEMENUITEMINFOW,  *LPIMEMENUITEMINFOW;

typedef IMEMENUITEMINFOA IMEMENUITEMINFO;
typedef PIMEMENUITEMINFOA PIMEMENUITEMINFO;
typedef NPIMEMENUITEMINFOA NPIMEMENUITEMINFO;
typedef LPIMEMENUITEMINFOA LPIMEMENUITEMINFO;

<struct name="tagIMECHARPOSITION">
<field name="dwSize">DWORD</field>
<field name="dwCharPos">DWORD</field>
<field name="pt">POINT</field>
<field name="cLineHeight">UINT</field>
<field name="rcDocument">RECT</field>
} IMECHARPOSITION, *PIMECHARPOSITION,  *NPIMECHARPOSITION,  *LPIMECHARPOSITION;

typedef BOOL    (__stdcall* IMCENUMPROC)(HIMC, LPARAM);

<function name="ImmInstallIMEA" ret="HKL" convention="__stdcall">
<arg name="lpszIMEFileName">LPCSTR</arg>
<arg name="lpszLayoutText">LPCSTR</arg>
</function>
<function name="ImmInstallIMEW" ret="HKL" convention="__stdcall">
<arg name="lpszIMEFileName">LPCWSTR</arg>
<arg name="lpszLayoutText">LPCWSTR</arg>
</function>
<function name="ImmGetDefaultIMEWnd" ret="HWND" convention="__stdcall">
 HWND);

<function name="ImmGetDescriptionA" ret="UINT" convention="__stdcall">
 HKL,  LPSTR lpszDescription,  UINT uBufLen);
<function name="ImmGetDescriptionW" ret="UINT" convention="__stdcall">
 HKL,  LPWSTR lpszDescription,  UINT uBufLen);
<function name="ImmGetIMEFileNameA" ret="UINT" convention="__stdcall">
 HKL,  LPSTR lpszFileName,  UINT uBufLen);
<function name="ImmGetIMEFileNameW" ret="UINT" convention="__stdcall">
 HKL,  LPWSTR lpszFileName,  UINT uBufLen);
<function name="ImmGetProperty" ret="DWORD" convention="__stdcall">
 HKL,  DWORD);

<function name="ImmIsIME" ret="BOOL" convention="__stdcall">
 HKL);

<function name="ImmSimulateHotKey" ret="BOOL" convention="__stdcall">
 HWND,  DWORD);

<function name="ImmCreateContext" ret="HIMC" convention="__stdcall">
void);
<function name="ImmDestroyContext" ret="BOOL" convention="__stdcall">
 HIMC);
<function name="ImmGetContext" ret="HIMC" convention="__stdcall">
 HWND);
<function name="ImmReleaseContext" ret="BOOL" convention="__stdcall">
 HWND,  HIMC);
<function name="ImmAssociateContext" ret="HIMC" convention="__stdcall">
 HWND,  HIMC);

<function name="ImmAssociateContextEx" ret="BOOL" convention="__stdcall">
 HWND,  HIMC,  DWORD);
<function name="ImmGetCompositionStringA" ret="LONG" convention="__stdcall">
 HIMC,  DWORD,  LPVOID lpBuf,  DWORD dwBufLen);
<function name="ImmGetCompositionStringW" ret="LONG" convention="__stdcall">
 HIMC,  DWORD,  LPVOID lpBuf,  DWORD dwBufLen);
<function name="ImmSetCompositionStringA" ret="BOOL" convention="__stdcall">
 HIMC,  DWORD dwIndex,  LPVOID lpComp,  DWORD dwCompLen,  LPVOID lpRead,  DWORD dwReadLen);
<function name="ImmSetCompositionStringW" ret="BOOL" convention="__stdcall">
 HIMC,  DWORD dwIndex,  LPVOID lpComp,  DWORD dwCompLen,  LPVOID lpRead,  DWORD dwReadLen);
<function name="ImmGetCandidateListCountA" ret="DWORD" convention="__stdcall">
 HIMC,  LPDWORD lpdwListCount);
<function name="ImmGetCandidateListCountW" ret="DWORD" convention="__stdcall">
 HIMC,  LPDWORD lpdwListCount);
<function name="ImmGetCandidateListA" ret="DWORD" convention="__stdcall">
 HIMC,  DWORD deIndex,  LPCANDIDATELIST lpCandList,  DWORD dwBufLen);
<function name="ImmGetCandidateListW" ret="DWORD" convention="__stdcall">
 HIMC,  DWORD deIndex,  LPCANDIDATELIST lpCandList,  DWORD dwBufLen);
<function name="ImmGetGuideLineA" ret="DWORD" convention="__stdcall">
 HIMC,  DWORD dwIndex,  LPSTR lpBuf,  DWORD dwBufLen);
<function name="ImmGetGuideLineW" ret="DWORD" convention="__stdcall">
 HIMC,  DWORD dwIndex,  LPWSTR lpBuf,  DWORD dwBufLen);
<function name="ImmGetConversionStatus" ret="BOOL" convention="__stdcall">
 HIMC,  LPDWORD lpfdwConversion,  LPDWORD lpfdwSentence);
<function name="ImmSetConversionStatus" ret="BOOL" convention="__stdcall">
 HIMC,  DWORD,  DWORD);
<function name="ImmGetOpenStatus" ret="BOOL" convention="__stdcall">
 HIMC);
<function name="ImmSetOpenStatus" ret="BOOL" convention="__stdcall">
 HIMC,  BOOL);
<function name="ImmGetCompositionFontA" ret="BOOL" convention="__stdcall">
 HIMC,  LPLOGFONTA lplf);
<function name="ImmGetCompositionFontW" ret="BOOL" convention="__stdcall">
 HIMC,  LPLOGFONTW lplf);
<function name="ImmSetCompositionFontA" ret="BOOL" convention="__stdcall">
 HIMC,  LPLOGFONTA lplf);
<function name="ImmSetCompositionFontW" ret="BOOL" convention="__stdcall">
 HIMC,  LPLOGFONTW lplf);

<function name="ImmConfigureIMEA" ret="BOOL" convention="__stdcall">
 HKL,  HWND,  DWORD,  LPVOID);
<function name="ImmConfigureIMEW" ret="BOOL" convention="__stdcall">
 HKL,  HWND,  DWORD,  LPVOID);
<function name="ImmEscapeA" ret="LRESULT" convention="__stdcall">
 HKL,  HIMC,  UINT,  LPVOID);
<function name="ImmEscapeW" ret="LRESULT" convention="__stdcall">
 HKL,  HIMC,  UINT,  LPVOID);
<function name="ImmGetConversionListA" ret="DWORD" convention="__stdcall">
 HKL,  HIMC,  LPCSTR lpSrc,  LPCANDIDATELIST lpDst,  DWORD dwBufLen,  UINT uFlag);
<function name="ImmGetConversionListW" ret="DWORD" convention="__stdcall">
 HKL,  HIMC,  LPCWSTR lpSrc,  LPCANDIDATELIST lpDst,  DWORD dwBufLen,  UINT uFlag);
<function name="ImmNotifyIME" ret="BOOL" convention="__stdcall">
 HIMC,  DWORD dwAction,  DWORD dwIndex,  DWORD dwValue);

<function name="ImmGetStatusWindowPos" ret="BOOL" convention="__stdcall">
 HIMC,  LPPOINT lpptPos);
<function name="ImmSetStatusWindowPos" ret="BOOL" convention="__stdcall">
 HIMC,  LPPOINT lpptPos);
<function name="ImmGetCompositionWindow" ret="BOOL" convention="__stdcall">
 HIMC,  LPCOMPOSITIONFORM lpCompForm);
<function name="ImmSetCompositionWindow" ret="BOOL" convention="__stdcall">
 HIMC,  LPCOMPOSITIONFORM lpCompForm);
<function name="ImmGetCandidateWindow" ret="BOOL" convention="__stdcall">
 HIMC,  DWORD,  LPCANDIDATEFORM lpCandidate);
<function name="ImmSetCandidateWindow" ret="BOOL" convention="__stdcall">
 HIMC,  LPCANDIDATEFORM lpCandidate);

<function name="ImmIsUIMessageA" ret="BOOL" convention="__stdcall">
 HWND,  UINT,  WPARAM,  LPARAM);
<function name="ImmIsUIMessageW" ret="BOOL" convention="__stdcall">
 HWND,  UINT,  WPARAM,  LPARAM);
<function name="ImmGetVirtualKey" ret="UINT" convention="__stdcall">
 HWND);

typedef<fnptr name="REGISTERWORDENUMPROCA" ret="int" convention="__stdcall">
<arg name="lpszReading">LPCSTR</arg>
 DWORD,  LPCSTR lpszString, LPVOID);
typedef<fnptr name="REGISTERWORDENUMPROCW" ret="int" convention="__stdcall">
<arg name="lpszReading">LPCWSTR</arg>
 DWORD,  LPCWSTR lpszString, LPVOID);
<function name="ImmRegisterWordA" ret="BOOL" convention="__stdcall">
 HKL,  LPCSTR lpszReading,  DWORD,  LPCSTR lpszRegister);
<function name="ImmRegisterWordW" ret="BOOL" convention="__stdcall">
 HKL,  LPCWSTR lpszReading,  DWORD,  LPCWSTR lpszRegister);
<function name="ImmUnregisterWordA" ret="BOOL" convention="__stdcall">
 HKL,  LPCSTR lpszReading,  DWORD,  LPCSTR lpszUnregister);
<function name="ImmUnregisterWordW" ret="BOOL" convention="__stdcall">
 HKL,  LPCWSTR lpszReading,  DWORD,  LPCWSTR lpszUnregister);
<function name="ImmGetRegisterWordStyleA" ret="UINT" convention="__stdcall">
 HKL,  UINT nItem,  LPSTYLEBUFA lpStyleBuf);
<function name="ImmGetRegisterWordStyleW" ret="UINT" convention="__stdcall">
 HKL,  UINT nItem,  LPSTYLEBUFW lpStyleBuf);
<function name="ImmEnumRegisterWordA" ret="UINT" convention="__stdcall">
 HKL,  REGISTERWORDENUMPROCA,  LPCSTR lpszReading,  DWORD,  LPCSTR lpszRegister,  LPVOID);
<function name="ImmEnumRegisterWordW" ret="UINT" convention="__stdcall">
 HKL,  REGISTERWORDENUMPROCW,  LPCWSTR lpszReading,  DWORD,  LPCWSTR lpszRegister,  LPVOID);
<function name="ImmDisableIME" ret="BOOL" convention="__stdcall">
 DWORD);
<function name="ImmEnumInputContext" ret="BOOL" convention="__stdcall">
<arg name="idThread">DWORD</arg>
<arg name="lpfn">IMCENUMPROC</arg>
<arg name="lParam">LPARAM</arg>
</function>
<function name="ImmGetImeMenuItemsA" ret="DWORD" convention="__stdcall">
 HIMC,  DWORD,  DWORD,  LPIMEMENUITEMINFOA lpImeParentMenu,  LPIMEMENUITEMINFOA lpImeMenu,  DWORD dwSize);
<function name="ImmGetImeMenuItemsW" ret="DWORD" convention="__stdcall">
 HIMC,  DWORD,  DWORD,  LPIMEMENUITEMINFOW lpImeParentMenu,  LPIMEMENUITEMINFOW lpImeMenu,  DWORD dwSize);
<function name="ImmDisableTextFrameService" ret="BOOL" convention="__stdcall">
DWORD idThread);
#pragma warning(pop)

</library>