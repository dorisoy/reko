= fn0C00_0000 ========================
Mem0: Mem0:Global memory, def: {def Mem0}
fp: fp:Temporary, def: {def fp}
eax: eax:Register eax, def: {def eax}, uses: {eax_7 = eax + eax * 0x00000004}{eax_7 = eax + eax * 0x00000004}
ds: ds:Register ds, def: {def ds}, uses: {store(Mem8[ds:0x02FC:word32]) = eax_7}{eax_9 = Mem8[ds:si:word32]}{store(Mem11[ds:0x0300:word32]) = eax_9}{eax_12 = Mem11[ds:si_10:word32]}{store(Mem14[ds:0x0304:word32]) = eax_12}{ax_15 = Mem14[ds:si_13:word16]}{store(Mem17[ds:0x0308:word16]) = ax_15}{ax_18 = Mem17[ds:si_16:word16]}{store(Mem21[ds:0x030A:word16]) = ax_18}{fn0C00_0026(es, ds)}
si: si:Register si, def: {def si}, uses: {eax_9 = Mem8[ds:si:word32]}{si_10 = si + 0x0004}
ax: ax:Register ax, def: {def ax}
es: es:Register es, def: {def es}, uses: {fn0C00_0026(es, ds)}
eax_7: orig: eax, def: {eax_7 = eax + eax * 0x00000004}, uses: {store(Mem8[ds:0x02FC:word32]) = eax_7}
Mem8: orig: Mem0, def: {store(Mem8[ds:0x02FC:word32]) = eax_7}, uses: {eax_9 = Mem8[ds:si:word32]}
eax_9: orig: eax, def: {eax_9 = Mem8[ds:si:word32]}, uses: {store(Mem11[ds:0x0300:word32]) = eax_9}
si_10: orig: si, def: {si_10 = si + 0x0004}, uses: {eax_12 = Mem11[ds:si_10:word32]}{si_13 = si_10 + 0x0004}
Mem11: orig: Mem0, def: {store(Mem11[ds:0x0300:word32]) = eax_9}, uses: {eax_12 = Mem11[ds:si_10:word32]}
eax_12: orig: eax, def: {eax_12 = Mem11[ds:si_10:word32]}, uses: {store(Mem14[ds:0x0304:word32]) = eax_12}{eax_19 = DPB(eax_12, ax_18, 0, 16) (alias)}
si_13: orig: si, def: {si_13 = si_10 + 0x0004}, uses: {ax_15 = Mem14[ds:si_13:word16]}{si_16 = si_13 + 0x0002}
Mem14: orig: Mem0, def: {store(Mem14[ds:0x0304:word32]) = eax_12}, uses: {ax_15 = Mem14[ds:si_13:word16]}
ax_15: orig: ax, def: {ax_15 = Mem14[ds:si_13:word16]}, uses: {store(Mem17[ds:0x0308:word16]) = ax_15}
si_16: orig: si, def: {si_16 = si_13 + 0x0002}, uses: {ax_18 = Mem17[ds:si_16:word16]}{si_20 = si_16 + 0x0002}
Mem17: orig: Mem0, def: {store(Mem17[ds:0x0308:word16]) = ax_15}, uses: {ax_18 = Mem17[ds:si_16:word16]}
ax_18: orig: ax, def: {ax_18 = Mem17[ds:si_16:word16]}, uses: {eax_19 = DPB(eax_12, ax_18, 0, 16) (alias)}{store(Mem21[ds:0x030A:word16]) = ax_18}
eax_19: orig: eax, def: {eax_19 = DPB(eax_12, ax_18, 0, 16) (alias)}
si_20: orig: si, def: {si_20 = si_16 + 0x0002}
Mem21: orig: Mem0, def: {store(Mem21[ds:0x030A:word16]) = ax_18}
// fn0C00_0000
void fn0C00_0000(word32 eax, word16 si, segment es, segment ds)
fn0C00_0000_entry:		// block 0, pred:
	def Mem0
	def fp
	def eax
	def ds
	def si
	def ax
	def es
	// succ:  1
l0C00_0000:		// block 1, pred: 0
	eax_7 = eax + eax * 0x00000004
	store(Mem8[ds:0x02FC:word32]) = eax_7
	eax_9 = Mem8[ds:si:word32]
	si_10 = si + 0x0004
	store(Mem11[ds:0x0300:word32]) = eax_9
	eax_12 = Mem11[ds:si_10:word32]
	si_13 = si_10 + 0x0004
	store(Mem14[ds:0x0304:word32]) = eax_12
	ax_15 = Mem14[ds:si_13:word16]
	si_16 = si_13 + 0x0002
	store(Mem17[ds:0x0308:word16]) = ax_15
	ax_18 = Mem17[ds:si_16:word16]
	eax_19 = DPB(eax_12, ax_18, 0, 16) (alias)
	si_20 = si_16 + 0x0002
	store(Mem21[ds:0x030A:word16]) = ax_18
	fn0C00_0026(es, ds)
	return
	// succ:  2
fn0C00_0000_exit:		// block 2, pred: 1
	// succ: 

Mem0: Mem0:Global memory
fp: fp:Temporary
eax: eax:Register eax, def: {def eax}, uses: {store(Mem8[ds:0x02FC:word32]) = eax * 0x00000005}
ds: ds:Register ds, def: {def ds}, uses: {store(Mem8[ds:0x02FC:word32]) = eax * 0x00000005}{eax_9 = Mem8[ds:si:word32]}{store(Mem11[ds:0x0300:word32]) = eax_9}{eax_12 = Mem11[ds:si + 0x0004:word32]}{store(Mem14[ds:0x0304:word32]) = eax_12}{ax_15 = Mem14[ds:si + 0x0008:word16]}{store(Mem17[ds:0x0308:word16]) = ax_15}{ax_18 = Mem17[ds:si + 0x000A:word16]}{store(Mem21[ds:0x030A:word16]) = ax_18}{fn0C00_0026(es, ds)}
si: si:Register si, def: {def si}, uses: {eax_9 = Mem8[ds:si:word32]}{eax_12 = Mem11[ds:si + 0x0004:word32]}{ax_15 = Mem14[ds:si + 0x0008:word16]}{ax_18 = Mem17[ds:si + 0x000A:word16]}
ax: ax:Register ax
es: es:Register es, def: {def es}, uses: {fn0C00_0026(es, ds)}
eax_7: orig: eax
Mem8: orig: Mem0, def: {store(Mem8[ds:0x02FC:word32]) = eax * 0x00000005}, uses: {eax_9 = Mem8[ds:si:word32]}
eax_9: orig: eax, def: {eax_9 = Mem8[ds:si:word32]}, uses: {store(Mem11[ds:0x0300:word32]) = eax_9}
si_10: orig: si
Mem11: orig: Mem0, def: {store(Mem11[ds:0x0300:word32]) = eax_9}, uses: {eax_12 = Mem11[ds:si + 0x0004:word32]}
eax_12: orig: eax, def: {eax_12 = Mem11[ds:si + 0x0004:word32]}, uses: {store(Mem14[ds:0x0304:word32]) = eax_12}
si_13: orig: si
Mem14: orig: Mem0, def: {store(Mem14[ds:0x0304:word32]) = eax_12}, uses: {ax_15 = Mem14[ds:si + 0x0008:word16]}
ax_15: orig: ax, def: {ax_15 = Mem14[ds:si + 0x0008:word16]}, uses: {store(Mem17[ds:0x0308:word16]) = ax_15}
si_16: orig: si
Mem17: orig: Mem0, def: {store(Mem17[ds:0x0308:word16]) = ax_15}, uses: {ax_18 = Mem17[ds:si + 0x000A:word16]}
ax_18: orig: ax, def: {ax_18 = Mem17[ds:si + 0x000A:word16]}, uses: {store(Mem21[ds:0x030A:word16]) = ax_18}
eax_19: orig: eax
si_20: orig: si
Mem21: orig: Mem0, def: {store(Mem21[ds:0x030A:word16]) = ax_18}
// fn0C00_0000
void fn0C00_0000(word32 eax, word16 si, segment es, segment ds)
fn0C00_0000_entry:		// block 0, pred:
	def eax
	def ds
	def si
	def es
	// succ:  1
l0C00_0000:		// block 1, pred: 0
	store(Mem8[ds:0x02FC:word32]) = eax * 0x00000005
	eax_9 = Mem8[ds:si:word32]
	store(Mem11[ds:0x0300:word32]) = eax_9
	eax_12 = Mem11[ds:si + 0x0004:word32]
	store(Mem14[ds:0x0304:word32]) = eax_12
	ax_15 = Mem14[ds:si + 0x0008:word16]
	store(Mem17[ds:0x0308:word16]) = ax_15
	ax_18 = Mem17[ds:si + 0x000A:word16]
	store(Mem21[ds:0x030A:word16]) = ax_18
	fn0C00_0026(es, ds)
	return
	// succ:  2
fn0C00_0000_exit:		// block 2, pred: 1
	// succ: 
= fn0C00_0026 ========================
Mem0: Mem0:Global memory, def: {def Mem0}, uses: {cx_10 = Mem0[ds:0x0400:word16]}{di_12 = Mem0[ds:0x0402:word16]}{SCZO_18 = cond(al_11 - Mem0[es:di_15:byte])}
fp: fp:Temporary, def: {def fp}
ds: ds:Register ds, def: {def ds}, uses: {cx_10 = Mem0[ds:0x0400:word16]}{di_12 = Mem0[ds:0x0402:word16]}{store(Mem25[ds:0x0404:word16]) = di_23}
cx: cx:Register cx, def: {def cx}
al: al:Register al, def: {def al}
di: di:Register di, def: {def di}
v6: v6:Temporary, def: {def v6}
SCZO: SCZO:Flags, def: {def SCZO}, uses: {SCZO_14 = PHI(SCZO, SCZO_18)}
es: es:Register es, def: {def es}, uses: {SCZO_18 = cond(al_11 - Mem0[es:di_15:byte])}
Z: Z:Flags, def: {def Z}, uses: {Z_13 = PHI(Z, Z_19)}
cx_10: orig: cx, def: {cx_10 = Mem0[ds:0x0400:word16]}, uses: {cx_16 = PHI(cx_10, cx_17)}
al_11: orig: al, def: {al_11 = 0x00}, uses: {SCZO_18 = cond(al_11 - Mem0[es:di_15:byte])}
di_12: orig: di, def: {di_12 = Mem0[ds:0x0402:word16]}, uses: {di_15 = PHI(di_12, di_20)}
Z_13: orig: Z, def: {Z_13 = PHI(Z, Z_19)}, uses: {Z_21 = PHI(Z_13, Z_19)}
SCZO_14: orig: SCZO, def: {SCZO_14 = PHI(SCZO, SCZO_18)}, uses: {SCZO_22 = PHI(SCZO_14, SCZO_18)}
di_15: orig: di, def: {di_15 = PHI(di_12, di_20)}, uses: {di_23 = PHI(di_15, di_20)}{SCZO_18 = cond(al_11 - Mem0[es:di_15:byte])}{di_20 = di_15 + 0x0001}
cx_16: orig: cx, def: {cx_16 = PHI(cx_10, cx_17)}, uses: {branch cx_16 == 0x0000}{cx_24 = PHI(cx_16, cx_17)}{cx_17 = cx_16 - 0x0001}
cx_17: orig: cx, def: {cx_17 = cx_16 - 0x0001}, uses: {cx_24 = PHI(cx_16, cx_17)}{cx_16 = PHI(cx_10, cx_17)}
SCZO_18: orig: SCZO, def: {SCZO_18 = cond(al_11 - Mem0[es:di_15:byte])}, uses: {Z_19 = SCZO_18 (alias)}{SCZO_22 = PHI(SCZO_14, SCZO_18)}{SCZO_14 = PHI(SCZO, SCZO_18)}
Z_19: orig: Z, def: {Z_19 = SCZO_18 (alias)}, uses: {branch Test(EQ,Z_19)}{Z_21 = PHI(Z_13, Z_19)}{Z_13 = PHI(Z, Z_19)}
di_20: orig: di, def: {di_20 = di_15 + 0x0001}, uses: {di_23 = PHI(di_15, di_20)}{di_15 = PHI(di_12, di_20)}
Z_21: orig: Z, def: {Z_21 = PHI(Z_13, Z_19)}
SCZO_22: orig: SCZO, def: {SCZO_22 = PHI(SCZO_14, SCZO_18)}
di_23: orig: di, def: {di_23 = PHI(di_15, di_20)}, uses: {store(Mem25[ds:0x0404:word16]) = di_23}
cx_24: orig: cx, def: {cx_24 = PHI(cx_16, cx_17)}
Mem25: orig: Mem0, def: {store(Mem25[ds:0x0404:word16]) = di_23}
// fn0C00_0026
void fn0C00_0026(segment es, segment ds)
fn0C00_0026_entry:		// block 0, pred:
	def Mem0
	def fp
	def ds
	def cx
	def al
	def di
	def v6
	def SCZO
	def es
	def Z
	// succ:  1
l0C00_0026:		// block 1, pred: 0
	cx_10 = Mem0[ds:0x0400:word16]
	al_11 = 0x00
	di_12 = Mem0[ds:0x0402:word16]
	// succ:  2
l0C00_0030:		// block 2, pred: 1 3
	Z_13 = PHI(Z, Z_19)
	SCZO_14 = PHI(SCZO, SCZO_18)
	di_15 = PHI(di_12, di_20)
	cx_16 = PHI(cx_10, cx_17)
	branch cx_16 == 0x0000
	// succ:  4 3
l0C00_0030_rep:		// block 3, pred: 2
	cx_17 = cx_16 - 0x0001
	SCZO_18 = cond(al_11 - Mem0[es:di_15:byte])
	Z_19 = SCZO_18 (alias)
	di_20 = di_15 + 0x0001
	branch Test(EQ,Z_19)
	// succ:  4 2
l0C00_0032:		// block 4, pred: 2 3
	Z_21 = PHI(Z_13, Z_19)
	SCZO_22 = PHI(SCZO_14, SCZO_18)
	di_23 = PHI(di_15, di_20)
	cx_24 = PHI(cx_16, cx_17)
	store(Mem25[ds:0x0404:word16]) = di_23
	return
	// succ:  5
fn0C00_0026_exit:		// block 5, pred: 4
	// succ: 

Mem0: Mem0:Global memory, def: {def Mem0}, uses: {cx_10 = Mem0[ds:0x0400:word16]}{di_12 = Mem0[ds:0x0402:word16]}{SCZO_18 = cond(0x00 - Mem0[es:di_15:byte])}
fp: fp:Temporary
ds: ds:Register ds, def: {def ds}, uses: {cx_10 = Mem0[ds:0x0400:word16]}{di_12 = Mem0[ds:0x0402:word16]}{store(Mem25[ds:0x0404:word16]) = di_23}
cx: cx:Register cx
al: al:Register al
di: di:Register di
v6: v6:Temporary
SCZO: SCZO:Flags
es: es:Register es, def: {def es}, uses: {SCZO_18 = cond(0x00 - Mem0[es:di_15:byte])}
Z: Z:Flags
cx_10: orig: cx, def: {cx_10 = Mem0[ds:0x0400:word16]}, uses: {cx_16 = PHI(cx_10, cx_17)}
al_11: orig: al
di_12: orig: di, def: {di_12 = Mem0[ds:0x0402:word16]}, uses: {di_15 = PHI(di_12, di_20)}
Z_13: orig: Z
SCZO_14: orig: SCZO
di_15: orig: di, def: {di_15 = PHI(di_12, di_20)}, uses: {di_23 = PHI(di_15, di_20)}{SCZO_18 = cond(0x00 - Mem0[es:di_15:byte])}{di_20 = di_15 + 0x0001}
cx_16: orig: cx, def: {cx_16 = PHI(cx_10, cx_17)}, uses: {branch cx_16 == 0x0000}{cx_17 = cx_16 - 0x0001}
cx_17: orig: cx, def: {cx_17 = cx_16 - 0x0001}, uses: {cx_16 = PHI(cx_10, cx_17)}
SCZO_18: orig: SCZO, def: {SCZO_18 = cond(0x00 - Mem0[es:di_15:byte])}, uses: {branch Test(EQ,SCZO_18)}
Z_19: orig: Z
di_20: orig: di, def: {di_20 = di_15 + 0x0001}, uses: {di_23 = PHI(di_15, di_20)}{di_15 = PHI(di_12, di_20)}
Z_21: orig: Z
SCZO_22: orig: SCZO
di_23: orig: di, def: {di_23 = PHI(di_15, di_20)}, uses: {store(Mem25[ds:0x0404:word16]) = di_23}
cx_24: orig: cx
Mem25: orig: Mem0, def: {store(Mem25[ds:0x0404:word16]) = di_23}
// fn0C00_0026
void fn0C00_0026(segment es, segment ds)
fn0C00_0026_entry:		// block 0, pred:
	def Mem0
	def ds
	def es
	// succ:  1
l0C00_0026:		// block 1, pred: 0
	cx_10 = Mem0[ds:0x0400:word16]
	di_12 = Mem0[ds:0x0402:word16]
	// succ:  2
l0C00_0030:		// block 2, pred: 1 3
	di_15 = PHI(di_12, di_20)
	cx_16 = PHI(cx_10, cx_17)
	branch cx_16 == 0x0000
	// succ:  4 3
l0C00_0030_rep:		// block 3, pred: 2
	cx_17 = cx_16 - 0x0001
	SCZO_18 = cond(0x00 - Mem0[es:di_15:byte])
	di_20 = di_15 + 0x0001
	branch Test(EQ,SCZO_18)
	// succ:  4 2
l0C00_0032:		// block 4, pred: 2 3
	di_23 = PHI(di_15, di_20)
	store(Mem25[ds:0x0404:word16]) = di_23
	return
	// succ:  5
fn0C00_0026_exit:		// block 5, pred: 4
	// succ: 
