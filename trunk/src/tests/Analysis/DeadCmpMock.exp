Mem0: Mem0:Global memory
fp: fp:Temporary
r0: r0:Register r0, def: {def r0}, uses: {r0_7 = PHI(r0, r0_6)}{r0_6 = r0 + r1}{branch r0 == 0x00000000}
r1: r1:Register r1, def: {def r1}, uses: {r0_6 = r0 + r1}
Z: Z:Flags
Z_5: orig: Z
r0_6: orig: r0, def: {r0_6 = r0 + r1}, uses: {r0_7 = PHI(r0, r0_6)}
r0_7: orig: r0, def: {r0_7 = PHI(r0, r0_6)}, uses: {store(Mem8[0x10003000:word32]) = r0_7}
Mem8: orig: Mem0, def: {store(Mem8[0x10003000:word32]) = r0_7}
// CmpMock
void CmpMock(word32 r0, word32 r1)
CmpMock_entry:		// block 0, pred:
	def r0
	def r1
	// succ:  1
l1:		// block 1, pred: 0
	branch r0 == 0x00000000
	// succ:  2 3
l2:		// block 2, pred: 1
	r0_6 = r0 + r1
	// succ:  3
skip:		// block 3, pred: 1 2
	r0_7 = PHI(r0, r0_6)
	store(Mem8[0x10003000:word32]) = r0_7
	return
	// succ:  4
CmpMock_exit:		// block 4, pred: 3
	// succ: 
