// fn0C00_0000 /////////////////////
	LiveOut:  
	MayUseIn:  ds
	BypassIn: 
	Trashed:   SCZO ax cx dx al cl dl ah ch dh
	Preserved: sp
// fn0C00_0000
void fn0C00_0000()
fn0C00_0000_entry:
// DataOut: ds
// DataOut (flags): 
// SymbolicIn: sp:fp

l0C00_0000:
	cx = 0x0005
	call fn0C00_000B (retsize: 2; depth: 2)
	Mem0[ds:0x0064:word16] = ax
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

fn0C00_0000_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp cx:<invalid> ax:<invalid> dx:<invalid>

// fn0C00_000B /////////////////////
	LiveOut:   ax ds
	MayUseIn:  cx
	BypassIn: 
	Trashed:   SCZO ax cx dx al cl dl ah ch dh
	Preserved: sp si
// fn0C00_000B
void fn0C00_000B()
fn0C00_000B_entry:
// DataOut: cx ds
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: Temporary(16)

l0C00_000B:
	sp = fp - 0x0002
	wLoc02 = si
	SCZO = cond(cx - 0x0001)
	branch Test(LE,SZO) l0C00_001C
// DataOut: cx ds
// DataOut (flags): 
// SymbolicIn: sp:fp

l0C00_0011:
	si = cx
	cx = cx - 0x0001
	SZO = cond(cx)
	call fn0C00_000B (retsize: 2; depth: 4)
	dx_ax = si *s ax
	SCZO = cond(dx_ax)
// DataOut: ax ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0002 -2:si

l0C00_001C:
	ax = 0x0001
// DataOut: ax ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0002 -2:si

l0C00_001F:
	si = wLoc02
	sp = fp
	return
// DataOut: ax ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0002 ax:<invalid> si:cx cx:<invalid> Sequence dx:ax:<invalid> dx:<invalid> -2:si

fn0C00_000B_exit:
// DataOut: ax ds
// DataOut (flags): 
// SymbolicIn: sp:fp ax:<invalid> si:si cx:<invalid> Sequence dx:ax:<invalid> dx:<invalid> -2:si

