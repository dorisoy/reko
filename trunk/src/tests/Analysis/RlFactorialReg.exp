// fn0C00_0000 /////////////////////
	LiveOut:  
	MayUseIn:  ds
	BypassIn: 
	Trashed:   SCZO ax cx dx al cl dl ah ch dh
	Preserved:
// fn0C00_0000
void fn0C00_0000()
fn0C00_0000_entry:		// block 0, pred:
	// succ:  1
// DataOut: ds
l0C00_0000:		// block 1, pred: 0
	cx = 0x0005
	call fn0C00_000B (depth: 2;)
	store(Mem0[ds:0x0064:word16]) = ax
	return
	// succ:  2
// DataOut:
fn0C00_0000_exit:		// block 2, pred: 1
	// succ: 
// DataOut:
// fn0C00_000B /////////////////////
	LiveOut:   ax ds
	MayUseIn:  cx
	BypassIn: 
	Trashed:   SCZO ax cx dx al cl dl ah ch dh
	Preserved: si
// fn0C00_000B
void fn0C00_000B()
fn0C00_000B_entry:		// block 0, pred:
	// succ:  1
// DataOut: cx ds
l0C00_000B:		// block 1, pred: 0
	wLoc04 = si
	SCZO = cond(cx - 0x0001)
	branch Test(LE,SZO)
	// succ:  3 2
// DataOut: cx ds
l0C00_001C:		// block 2, pred: 1
	ax = 0x0001
	// succ:  4
// DataOut: ax ds
l0C00_0011:		// block 3, pred: 1
	si = cx
	cx = cx - 0x0001
	SZO = cond(cx)
	call fn0C00_000B (depth: 4;)
	dx_ax = si *s ax
	SCZO = cond(dx_ax)
	// succ:  4
// DataOut: ax ds
l0C00_001F:		// block 4, pred: 3 2
	si = wLoc04
	return
	// succ:  5
// DataOut: ax ds
fn0C00_000B_exit:		// block 5, pred: 4
	// succ: 
// DataOut: ax ds
