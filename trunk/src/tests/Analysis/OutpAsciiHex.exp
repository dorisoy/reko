// fn0C00_0000
// Return size: 0
void fn0C00_0000(byte al, selector ds)
fn0C00_0000_entry:
	def fp
	def al
	def ds
	// succ:  l0C00_0000
l0C00_0000:
	sp_1 = fp
	C_4 = fn0C00_000A(al, out al_3)
	branch Test(ULT,C_4) l0C00_0009
	// succ:  l0C00_0005 l0C00_0009
l0C00_0005:
	Mem5[ds:0x0300:byte] = al_3
	// succ:  l0C00_0009
l0C00_0009:
	return
	// succ:  fn0C00_0000_exit
fn0C00_0000_exit:

// fn0C00_0000
// Return size: 0
void fn0C00_0000(byte al, selector ds)
fn0C00_0000_entry:
	def al
	def ds
	// succ:  l0C00_0000
l0C00_0000:
	C_4 = fn0C00_000A(al, out al_3)
	branch Test(ULT,C_4) l0C00_0009
	// succ:  l0C00_0005 l0C00_0009
l0C00_0005:
	Mem5[ds:0x0300:byte] = al_3
	// succ:  l0C00_0009
l0C00_0009:
	return
	// succ:  fn0C00_0000_exit
fn0C00_0000_exit:
====================
// fn0C00_000A
// Return size: 0
byte fn0C00_000A(byte al, ptr16 alOut)
fn0C00_000A_entry:
	def fp
	def al
	def alOut
	// succ:  l0C00_000A
l0C00_000A:
	sp_1 = fp
	SCZO_3 = cond(al - 0x30)
	C_4 = SCZO_3 (alias)
	CZ_5 = SCZO_3 (alias)
	branch Test(ULT,C_4) l0C00_0032
	// succ:  l0C00_000E l0C00_0032
l0C00_000E:
	SCZO_14 = cond(al - 0x39)
	C_15 = SCZO_14 (alias)
	CZ_16 = SCZO_14 (alias)
	branch Test(ULE,CZ_16) l0C00_0022
	// succ:  l0C00_0012 l0C00_0022
l0C00_0012:
	SCZO_33 = cond(al - 0x41)
	C_34 = SCZO_33 (alias)
	CZ_35 = SCZO_33 (alias)
	branch Test(ULT,C_34) l0C00_0032
	// succ:  l0C00_0016 l0C00_0032
l0C00_0016:
	SCZO_36 = cond(al - 0x46)
	C_37 = SCZO_36 (alias)
	CZ_38 = SCZO_36 (alias)
	branch Test(ULE,CZ_38) l0C00_0022
	// succ:  l0C00_001A l0C00_0022
l0C00_001A:
	SCZO_39 = cond(al - 0x61)
	C_40 = SCZO_39 (alias)
	CZ_41 = SCZO_39 (alias)
	branch Test(ULT,C_40) l0C00_0032
	// succ:  l0C00_001E l0C00_0032
l0C00_001E:
	SCZO_42 = cond(al - 0x66)
	C_43 = SCZO_42 (alias)
	CZ_44 = SCZO_42 (alias)
	branch Test(UGT,CZ_44) l0C00_0032
	// succ:  l0C00_0022 l0C00_0032
l0C00_0022:
	al_17 = al - 0x30
	SCZO_18 = cond(al_17 - 0x0A)
	C_19 = SCZO_18 (alias)
	CZ_20 = SCZO_18 (alias)
	branch Test(ULT,C_19) l0C00_0030
	// succ:  l0C00_0028 l0C00_0030
l0C00_0028:
	al_25 = al_17 - 0x07
	SCZO_26 = cond(al_25 - 0x10)
	C_27 = SCZO_26 (alias)
	CZ_28 = SCZO_26 (alias)
	branch Test(ULT,C_27) l0C00_0030
	// succ:  l0C00_002E l0C00_0030
l0C00_002E:
	al_29 = al_25 - 0x20
	SCZO_30 = cond(al_29)
	C_31 = SCZO_30 (alias)
	CZ_32 = SCZO_30 (alias)
	// succ:  l0C00_0030
l0C00_0030:
	al_21 = PHI(al_17, al_25, al_29)
	C_22 = false
	SCZO_23 = C_22 (alias)
	CZ_24 = C_22 (alias)
	return C_22
	// succ:  fn0C00_000A_exit
l0C00_0032:
	C_11 = true
	SCZO_12 = C_11 (alias)
	CZ_13 = C_11 (alias)
	return C_11
	// succ:  fn0C00_000A_exit
fn0C00_000A_exit:
	al_6 = PHI(al, al_21)
	C_7 = PHI(C_11, C_22)
	SCZO_8 = PHI(SCZO_12, SCZO_23)
	CZ_9 = PHI(CZ_13, CZ_24)
	use al_6 (=> alOut)

// fn0C00_000A
// Return size: 0
byte fn0C00_000A(byte al, ptr16 alOut)
fn0C00_000A_entry:
	def al
	*alOut = al
	def alOut
	// succ:  l0C00_000A
l0C00_000A:
	SCZO_3 = cond(al - 0x30)
	C_4 = SCZO_3 (alias)
	branch Test(ULT,C_4) l0C00_0032
	// succ:  l0C00_000E l0C00_0032
l0C00_000E:
	SCZO_14 = cond(al - 0x39)
	CZ_16 = SCZO_14 (alias)
	branch Test(ULE,CZ_16) l0C00_0022
	// succ:  l0C00_0012 l0C00_0022
l0C00_0012:
	SCZO_33 = cond(al - 0x41)
	C_34 = SCZO_33 (alias)
	branch Test(ULT,C_34) l0C00_0032
	// succ:  l0C00_0016 l0C00_0032
l0C00_0016:
	SCZO_36 = cond(al - 0x46)
	CZ_38 = SCZO_36 (alias)
	branch Test(ULE,CZ_38) l0C00_0022
	// succ:  l0C00_001A l0C00_0022
l0C00_001A:
	SCZO_39 = cond(al - 0x61)
	C_40 = SCZO_39 (alias)
	branch Test(ULT,C_40) l0C00_0032
	// succ:  l0C00_001E l0C00_0032
l0C00_001E:
	SCZO_42 = cond(al - 0x66)
	CZ_44 = SCZO_42 (alias)
	branch Test(UGT,CZ_44) l0C00_0032
	// succ:  l0C00_0022 l0C00_0032
l0C00_0022:
	al_17 = al - 0x30
	*alOut = al_17
	SCZO_18 = cond(al_17 - 0x0A)
	C_19 = SCZO_18 (alias)
	branch Test(ULT,C_19) l0C00_0030
	// succ:  l0C00_0028 l0C00_0030
l0C00_0028:
	al_25 = al_17 - 0x07
	*alOut = al_25
	SCZO_26 = cond(al_25 - 0x10)
	C_27 = SCZO_26 (alias)
	branch Test(ULT,C_27) l0C00_0030
	// succ:  l0C00_002E l0C00_0030
l0C00_002E:
	al_29 = al_25 - 0x20
	*alOut = al_29
	// succ:  l0C00_0030
l0C00_0030:
	C_22 = false
	return C_22
	// succ:  fn0C00_000A_exit
l0C00_0032:
	C_11 = true
	return C_11
	// succ:  fn0C00_000A_exit
fn0C00_000A_exit:
====================
