// fn0C00_0000
void fn0C00_0000(byte al, selector ds)
fn0C00_0000_entry:		// pred:
	def Mem0
	def fp
	def C
	def al
	def ds
	// succ:  l0C00_0000
l0C00_0000:		// pred: fn0C00_0000_entry
	C_6 = fn0C00_000A(al, &al_5)
	branch Test(ULT,C_6) l0C00_0009
	// succ:  l0C00_0005 l0C00_0009
l0C00_0005:		// pred: l0C00_0000
	Mem7[ds:0x0300:byte] = al_5
	// succ:  l0C00_0009
l0C00_0009:		// pred: l0C00_0000 l0C00_0005
	Mem8 = PHI(Mem0, Mem7)
	return
	// succ:  fn0C00_0000_exit
fn0C00_0000_exit:		// pred: l0C00_0009
	// succ: 

// fn0C00_0000
void fn0C00_0000(byte al, selector ds)
fn0C00_0000_entry:		// pred:
	def al
	def ds
	// succ:  l0C00_0000
l0C00_0000:		// pred: fn0C00_0000_entry
	C_6 = fn0C00_000A(al, &al_5)
	branch Test(ULT,C_6) l0C00_0009
	// succ:  l0C00_0005 l0C00_0009
l0C00_0005:		// pred: l0C00_0000
	Mem7[ds:0x0300:byte] = al_5
	// succ:  l0C00_0009
l0C00_0009:		// pred: l0C00_0000 l0C00_0005
	return
	// succ:  fn0C00_0000_exit
fn0C00_0000_exit:		// pred: l0C00_0009
	// succ: 
====================
// fn0C00_000A
byte fn0C00_000A(byte al, ptr16 alOut)
fn0C00_000A_entry:		// pred:
	def Mem0
	def fp
	def al
	def SCZO
	def C
	def CZ
	def alOut
	// succ:  l0C00_000A
l0C00_000A:		// pred: fn0C00_000A_entry
	SCZO_7 = cond(al - 0x30)
	C_8 = SCZO_7 (alias)
	CZ_9 = SCZO_7 (alias)
	branch Test(ULT,C_8) l0C00_0032
	// succ:  l0C00_000E l0C00_0032
l0C00_000E:		// pred: l0C00_000A
	SCZO_10 = cond(al - 0x39)
	C_11 = SCZO_10 (alias)
	CZ_12 = SCZO_10 (alias)
	branch Test(ULE,CZ_12) l0C00_0022
	// succ:  l0C00_0012 l0C00_0022
l0C00_0012:		// pred: l0C00_000E
	SCZO_13 = cond(al - 0x41)
	C_14 = SCZO_13 (alias)
	CZ_15 = SCZO_13 (alias)
	branch Test(ULT,C_14) l0C00_0032
	// succ:  l0C00_0016 l0C00_0032
l0C00_0016:		// pred: l0C00_0012
	SCZO_16 = cond(al - 0x46)
	C_17 = SCZO_16 (alias)
	CZ_18 = SCZO_16 (alias)
	branch Test(ULE,CZ_18) l0C00_0022
	// succ:  l0C00_001A l0C00_0022
l0C00_001A:		// pred: l0C00_0016
	SCZO_19 = cond(al - 0x61)
	C_20 = SCZO_19 (alias)
	CZ_21 = SCZO_19 (alias)
	branch Test(ULT,C_20) l0C00_0032
	// succ:  l0C00_001E l0C00_0032
l0C00_001E:		// pred: l0C00_001A
	SCZO_22 = cond(al - 0x66)
	C_23 = SCZO_22 (alias)
	CZ_24 = SCZO_22 (alias)
	branch Test(UGT,CZ_24) l0C00_0032
	// succ:  l0C00_0022 l0C00_0032
l0C00_0022:		// pred: l0C00_000E l0C00_0016 l0C00_001E
	al_25 = al - 0x30
	SCZO_26 = cond(al_25 - 0x0A)
	C_27 = SCZO_26 (alias)
	CZ_28 = SCZO_26 (alias)
	branch Test(ULT,C_27) l0C00_0030
	// succ:  l0C00_0028 l0C00_0030
l0C00_0028:		// pred: l0C00_0022
	al_29 = al_25 - 0x07
	SCZO_30 = cond(al_29 - 0x10)
	C_31 = SCZO_30 (alias)
	CZ_32 = SCZO_30 (alias)
	branch Test(ULT,C_31) l0C00_0030
	// succ:  l0C00_002E l0C00_0030
l0C00_002E:		// pred: l0C00_0028
	al_33 = al_29 - 0x20
	SCZO_34 = cond(al_33)
	C_35 = SCZO_34 (alias)
	CZ_36 = SCZO_34 (alias)
	// succ:  l0C00_0030
l0C00_0030:		// pred: l0C00_0022 l0C00_0028 l0C00_002E
	al_37 = PHI(al_25, al_29, al_33)
	C_38 = false
	SCZO_39 = C_38 (alias)
	CZ_40 = C_38 (alias)
	return C_38
	// succ:  fn0C00_000A_exit
fn0C00_000A_exit:		// pred: l0C00_0032 l0C00_0030
	CZ_44 = PHI(CZ_43, CZ_40)
	C_45 = PHI(C_41, C_38)
	SCZO_46 = PHI(SCZO_42, SCZO_39)
	al_47 = PHI(al, al_37)
	use al_47 (=> alOut)
	// succ: 
l0C00_0032:		// pred: l0C00_000A l0C00_0012 l0C00_001A l0C00_001E
	C_41 = true
	SCZO_42 = C_41 (alias)
	CZ_43 = C_41 (alias)
	return C_41
	// succ:  fn0C00_000A_exit

// fn0C00_000A
byte fn0C00_000A(byte al, ptr16 alOut)
fn0C00_000A_entry:		// pred:
	def Mem0
	def al
	Mem0[alOut:byte] = al
	def alOut
	// succ:  l0C00_000A
l0C00_000A:		// pred: fn0C00_000A_entry
	SCZO_7 = cond(al - 0x30)
	C_8 = SCZO_7 (alias)
	branch Test(ULT,C_8) l0C00_0032
	// succ:  l0C00_000E l0C00_0032
l0C00_000E:		// pred: l0C00_000A
	SCZO_10 = cond(al - 0x39)
	CZ_12 = SCZO_10 (alias)
	branch Test(ULE,CZ_12) l0C00_0022
	// succ:  l0C00_0012 l0C00_0022
l0C00_0012:		// pred: l0C00_000E
	SCZO_13 = cond(al - 0x41)
	C_14 = SCZO_13 (alias)
	branch Test(ULT,C_14) l0C00_0032
	// succ:  l0C00_0016 l0C00_0032
l0C00_0016:		// pred: l0C00_0012
	SCZO_16 = cond(al - 0x46)
	CZ_18 = SCZO_16 (alias)
	branch Test(ULE,CZ_18) l0C00_0022
	// succ:  l0C00_001A l0C00_0022
l0C00_001A:		// pred: l0C00_0016
	SCZO_19 = cond(al - 0x61)
	C_20 = SCZO_19 (alias)
	branch Test(ULT,C_20) l0C00_0032
	// succ:  l0C00_001E l0C00_0032
l0C00_001E:		// pred: l0C00_001A
	SCZO_22 = cond(al - 0x66)
	CZ_24 = SCZO_22 (alias)
	branch Test(UGT,CZ_24) l0C00_0032
	// succ:  l0C00_0022 l0C00_0032
l0C00_0022:		// pred: l0C00_000E l0C00_0016 l0C00_001E
	al_25 = al - 0x30
	Mem0[alOut:byte] = al_25
	SCZO_26 = cond(al_25 - 0x0A)
	C_27 = SCZO_26 (alias)
	branch Test(ULT,C_27) l0C00_0030
	// succ:  l0C00_0028 l0C00_0030
l0C00_0028:		// pred: l0C00_0022
	al_29 = al_25 - 0x07
	Mem0[alOut:byte] = al_29
	SCZO_30 = cond(al_29 - 0x10)
	C_31 = SCZO_30 (alias)
	branch Test(ULT,C_31) l0C00_0030
	// succ:  l0C00_002E l0C00_0030
l0C00_002E:		// pred: l0C00_0028
	al_33 = al_29 - 0x20
	Mem0[alOut:byte] = al_33
	// succ:  l0C00_0030
l0C00_0030:		// pred: l0C00_0022 l0C00_0028 l0C00_002E
	C_38 = false
	return C_38
	// succ:  fn0C00_000A_exit
fn0C00_000A_exit:		// pred: l0C00_0032 l0C00_0030
	// succ: 
l0C00_0032:		// pred: l0C00_000A l0C00_0012 l0C00_001A l0C00_001E
	C_41 = true
	return C_41
	// succ:  fn0C00_000A_exit
====================
