// fn0C00_0000 /////////////////////
	LiveOut:  
	MayUseIn:  ds
	BypassIn: 
	Trashed:   SCZO ax bx al bl ah bh es
	Preserved: sp bp
// fn0C00_0000
void fn0C00_0000()
fn0C00_0000_entry:
// DataOut: ds
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: Local -0008(16) Stack +0004(32) Temporary(16)

l0C00_0000:
	sp = fp - 0x0002
	wLoc02 = bp
	bp = fp - 0x0002
	es_bx = ptrArg04
	sp = fp - 0x0004
	wLoc04 = es
	sp = fp - 0x0006
	wLoc06 = bx
	call fn0C00_0020 (retsize: 2; depth: 8)
	sp = fp - 0x0002
	SCZO = cond(sp)
	sp = fp - 0x0004
	wLoc04 = ax
	es_bx = ptrArg04
	sp = fp - 0x0006
	wLoc06 = es
	sp = fp - 0x0008
	wLoc08 = bx
	call fn0C00_002E (retsize: 2; depth: 10)
	sp = fp - 0x0002
	SCZO = cond(sp)
	Mem0[ds:0x0200:word16] = ax
	bp = wLoc02
	sp = fp
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

fn0C00_0000_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp bp:bp Sequence es:bx:<invalid> ax:<invalid> bx:<invalid> es:<invalid> -8:bx -6:es -4:ax -2:bp

// fn0C00_0020 /////////////////////
	LiveOut:   ax ds
	MayUseIn: 
	BypassIn: 
	Trashed:   ax bx al bl ah bh es
	Preserved: sp bp
// fn0C00_0020
void fn0C00_0020()
fn0C00_0020_entry:
// DataOut: ds
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: Stack +0002(32) Temporary(16)

l0C00_0020:
	sp = fp - 0x0002
	wLoc02 = bp
	bp = fp - 0x0002
	es_bx = ptrArg02
	ax = Mem0[es:bx + 0x0004:word16]
	sp = fp - 0x0002
	bp = wLoc02
	sp = fp
	return
// DataOut: ax ds
// DataOut (flags): 
// SymbolicIn: sp:fp

fn0C00_0020_exit:
// DataOut: ax ds
// DataOut (flags): 
// SymbolicIn: sp:fp bp:bp Sequence es:bx:<invalid> ax:<invalid> -2:bp

// fn0C00_002E /////////////////////
	LiveOut:   ax ds
	MayUseIn: 
	BypassIn: 
	Trashed:   SCZO ax bx al bl ah bh es
	Preserved: sp bp
// fn0C00_002E
void fn0C00_002E()
fn0C00_002E_entry:
// DataOut: ds
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: Stack +0002(32) Stack +0006(16) Temporary(16)

l0C00_002E:
	sp = fp - 0x0002
	wLoc02 = bp
	bp = fp - 0x0002
	es_bx = ptrArg02
	ax = wArg06
	ax = ax + Mem0[es:bx + 0x0006:word16]
	SCZO = cond(ax)
	sp = fp - 0x0002
	bp = wLoc02
	sp = fp
	return
// DataOut: ax ds
// DataOut (flags): 
// SymbolicIn: sp:fp

fn0C00_002E_exit:
// DataOut: ax ds
// DataOut (flags): 
// SymbolicIn: sp:fp bp:bp Sequence es:bx:<invalid> ax:<invalid> -2:bp

