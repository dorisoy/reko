// fn0C00_0000 /////////////////////
	LiveOut:  
	MayUseIn:  ds
	BypassIn: 
	Trashed:   SCZO ax bx al bl ah bh es
	Preserved: bp
// fn0C00_0000
void fn0C00_0000()
fn0C00_0000_entry:		// pred:
	// succ:  l0C00_0000
// DataOut: ds
// LocalsOut: Stack +0002(32)

l0C00_0000:
	sp = fp - 0x0002
	wLoc02 = bp
	bp = fp - 0x0002
	es_bx = ptrArg04
	sp = fp - 0x0004
	wLoc04 = es
	sp = fp - 0x0006
	wLoc06 = bx
	call fn0C00_0020 (retsize: 2; depth: 8)
	sp = fp - 0x0002
	SCZO = cond(sp)
	wLoc04 = ax
	es_bx = ptrArg04
	wLoc06 = es
	wLoc08 = bx
	call fn0C00_002E (retsize: 2; depth: 10)
	sp = fp - 0x0002
	SCZO = cond(sp)
	Mem0[ds:0x0200:word16] = ax
	bp = wLoc02
	sp = fp	
	return
// DataOut:
fn0C00_0000_exit:
// DataOut:
// fn0C00_0020 /////////////////////
	LiveOut:   ax ds
	MayUseIn: 
	BypassIn: 
	Trashed:   ax bx al bl ah bh es
	Preserved: bp
// fn0C00_0020
void fn0C00_0020()
fn0C00_0020_entry:
// DataOut: ds
// LocalsOut: Stack +0000(32)

l0C00_0020:
	sp = fp - 0x0002
	wLoc02 = bp
	bp = fp - 0x0002
	es_bx = ptrArg02
	ax = Mem0[es:bx + 0x0004:word16]
	sp = fp - 0x0002
	bp = wLoc02
	sp = fp
	return
// DataOut: ax ds
fn0C00_0020_exit:
	// succ: 
// DataOut: ax ds
// fn0C00_002E /////////////////////
	LiveOut:   ax ds
	MayUseIn: 
	BypassIn: 
	Trashed:   SCZO ax bx al bl ah bh es
	Preserved: bp
// fn0C00_002E
void fn0C00_002E()
fn0C00_002E_entry:
// DataOut: ds
// LocalsOut: Stack +0000(32) Stack +0004(16)

l0C00_002E:
	sp = fp - 0x0002
	wLoc02 = bp
	bp = fp - 0x0002
	es_bx = ptrArg02
	ax = wArg06
	ax = ax + Mem0[es:bx + 0x0006:word16]
	SCZO = cond(ax)
	sp = fp - 0x0002
	bp = wLoc02
	sp = fp
	return
// DataOut: ax ds
fn0C00_002E_exit:
// DataOut: ax ds
