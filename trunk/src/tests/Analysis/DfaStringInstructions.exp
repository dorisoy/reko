// void fn0C00_0000(Register word32 eax, Register word16 si, Register selector es, Register selector ds)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: 0
// MayUse:  eax si es ds
// LiveOut:
// Trashed: SCZO eax ax cx si di al cl ah ch
// Preserved:
// fn0C00_0000
void fn0C00_0000(word32 eax, word16 si, selector es, selector ds)
fn0C00_0000_entry:		// block 0, pred:
	// succ:  1
l0C00_0000:		// block 1, pred: 0
	store(Mem8[ds:0x02FC:word32]) = eax * 0x00000005
	store(Mem11[ds:0x0300:word32]) = Mem8[ds:si:word32]
	store(Mem14[ds:0x0304:word32]) = Mem11[ds:si + 0x0004:word32]
	store(Mem17[ds:0x0308:word16]) = Mem14[ds:si + 0x0008:word16]
	store(Mem20[ds:0x030A:word16]) = Mem17[ds:si + 0x000A:word16]
	fn0C00_0026(es, ds)
	return
	// succ:  2
fn0C00_0000_exit:		// block 2, pred: 1
	// succ: 

// void fn0C00_0026(Register selector es, Register selector ds)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: 0
// MayUse:  es ds
// LiveOut:
// Trashed: SCZO ax cx di al cl ch
// Preserved:
// fn0C00_0026
void fn0C00_0026(selector es, selector ds)
fn0C00_0026_entry:		// block 0, pred:
	// succ:  1
l0C00_0026:		// block 1, pred: 0
	word16 cx_10 = Mem0[ds:0x0400:word16]
	word16 di_12 = Mem0[ds:0x0402:word16]
	// succ:  2
l0C00_0030:		// block 2, pred: 1 3
	branch cx_10 == 0x0000 l0C00_0030_rep
	// succ:  4 3
l0C00_0030_rep:		// block 3, pred: 2
	cx_10 = cx_10 - 0x0001
	di_12 = di_12 + 0x0001
	branch 0x00 == Mem0[es:di_12:byte] l0C00_0030
	// succ:  4 2
l0C00_0032:		// block 4, pred: 2 3
	store(Mem25[ds:0x0404:word16]) = di_12
	return
	// succ:  5
fn0C00_0026_exit:		// block 5, pred: 4
	// succ: 

