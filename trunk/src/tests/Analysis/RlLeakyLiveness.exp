// fn0C00_0000 /////////////////////
	LiveOut:  
	MayUseIn:  ds
	BypassIn: 
	Trashed:   SCZO ax si al ah
	Preserved:
// fn0C00_0000
void fn0C00_0000()
fn0C00_0000_entry:		// block 0, pred:
	// succ:  1
// DataOut: ds
l0C00_0000:		// block 1, pred: 0
	call fn0C00_000A (depth: 2;)
	branch Test(ULT,C) l0C00_0009
	// succ:  2 3
// DataOut: ax ds
l0C00_0005:		// block 2, pred: 1
	v5 = Mem0[ds:0x0300:word16] + ax
	Mem0[ds:0x0300:word16] = v5
	SCZO = cond(v5)
	// succ:  3
// DataOut:
l0C00_0009:		// block 3, pred: 1 2
	return
	// succ:  4
// DataOut:
fn0C00_0000_exit:		// block 4, pred: 3
	// succ: 
// DataOut:
// fn0C00_000A /////////////////////
	LiveOut:   C ax ds
	MayUseIn:  ds
	BypassIn: 
	Trashed:   SCZO ax si al ah
	Preserved:
// fn0C00_000A
void fn0C00_000A()
fn0C00_000A_entry:		// block 0, pred:
	// succ:  1
// DataOut: ax ds
l0C00_000A:		// block 1, pred: 0
	si = Mem0[ds:0x0100:word16]
	SCZO = cond(si - Mem0[ds:0x0102:word16])
	branch Test(EQ,Z) l0C00_001E
	// succ:  3 2
// DataOut: ax si ds
l0C00_001E:		// block 2, pred: 1
	C = true
	return
	// succ:  4
// DataOut: ax ds// DataOut (flags): C

l0C00_0014:		// block 3, pred: 1
	ax = Mem0[ds:si:word16]
	si = si + 0x0001
	si = si + 0x0001
	SZO = cond(si)
	Mem0[ds:0x0100:word16] = si
	C = false
	return
	// succ:  4
// DataOut: ax ds// DataOut (flags): C

fn0C00_000A_exit:		// block 4, pred: 2 3
	// succ: 
// DataOut: ax ds// DataOut (flags): C

