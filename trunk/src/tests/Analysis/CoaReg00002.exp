Mem0:Global memory
fp:Temporary
edx:Register edx
    def:  def edx
    uses: Mem9[ds:0x7960:word32] = edx
          Mem15[ds:si + 0x00C8:word32] = -edx
ds:Register ds
    def:  def ds
    uses: Mem9[ds:0x7960:word32] = edx
          Mem10[ds:0x7964:byte] = cl
          Mem15[ds:si + 0x00C8:word32] = -edx
cl:Register cl
    def:  def cl
    uses: Mem10[ds:0x7964:byte] = cl
eax:Register eax
SZO:Flags
C:Flags
si:Register si
    def:  def si
    uses: Mem15[ds:si + 0x00C8:word32] = -edx
Mem9: orig: Mem0
    def:  Mem9[ds:0x7960:word32] = edx
Mem10: orig: Mem0
    def:  Mem10[ds:0x7964:byte] = cl
eax_11: orig: eax
eax_12: orig: eax
    uses: Mem15[ds:si + 0x00C8:word32] = -edx
SZO_13: orig: SZO
C_14: orig: C
Mem15: orig: Mem0
    def:  Mem15[ds:si + 0x00C8:word32] = -edx
// fn0C00_0000
void fn0C00_0000(word32 edx, word16 si, byte cl, selector ds)
fn0C00_0000_entry:		// pred:
	def edx
	def ds
	def cl
	def si
	// succ:  l0C00_0000
l0C00_0000:		// pred: fn0C00_0000_entry
	Mem9[ds:0x7960:word32] = edx
	Mem10[ds:0x7964:byte] = cl
	Mem15[ds:si + 0x00C8:word32] = -edx
	return
	// succ:  fn0C00_0000_exit
fn0C00_0000_exit:		// pred: l0C00_0000
	// succ: 

