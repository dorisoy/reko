void fn0C00_0000(Register segment ds)
// MayUse:  ds
// LiveOut:
// Trashed: SCZO ax cx dx al cl dl ah ch dh
// Preserved:
// fn0C00_0000
// Mem0:Global memory
// fp:Temporary
// cx:Register
// wLoc02:Local -0002
// ax:Register
// ds:Register
// return address size: 2
void fn0C00_0000(segment ds)
fn0C00_0000_entry:		// block 0, pred:
	// succ:  1
l0C00_0000:		// block 1, pred: 0
	cx = 0x0064
	wLoc02 = cx
	ax = fn0C00_000F(wLoc02)
	store(Mem0[ds:0x0064:word16]) = ax
	return
	// succ:  2
fn0C00_0000_exit:		// block 2, pred: 1
	// succ: 
Register word16 fn0C00_000F(Stack word16 wArg02)
// MayUse: 
// LiveOut: ax
// Trashed: SCZO ax dx al dl ah dh
// Preserved: bp
// Stack args: Stack +0002(16)
// fn0C00_000F
// Mem0:Global memory
// fp:Temporary
// bp:Register
// wLoc02:Local -0002
// wArg02:Stack +0002
// ax:Register
// SZO:Flags
// Z:Flags
// wLoc04:Local -0004
// dx:Register
// dx_ax:Sequence dx:ax
// SCZO:Flags
// return address size: 2
word16 fn0C00_000F(word16 wArg02)
fn0C00_000F_entry:		// block 0, pred:
	// succ:  1
l0C00_000F:		// block 1, pred: 0
	ax = wArg02
	ax = ax - 0x0001
	SZO = cond(ax)
	branch Test(EQ,Z)
	// succ:  3 2
l0C00_0026:		// block 2, pred: 1
	ax = 0x0001
	// succ:  4
l0C00_0018:		// block 3, pred: 1
	wLoc04 = ax
	ax = fn0C00_000F(wLoc04)
	dx = wArg02
	dx_ax = dx * ax
	SCZO = cond(dx_ax)
	// succ:  4
l0C00_0029:		// block 4, pred: 3 2
	return ax
	// succ:  5
fn0C00_000F_exit:		// block 5, pred: 4
	// succ: 
