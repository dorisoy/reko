= fn0C00_0000 ========================
Mem0: Mem0:Global memory, def: {def Mem0}
fp: fp:Temporary, def: {def fp}
dx: dx:Register, def: {def dx}
ax: ax:Register, def: {def ax}
ds: ds:Register, def: {def ds}, uses: {store(Mem7[ds:0x012C:word16]) = ax_6}
dx_5: orig: dx, def: {dx_5 = 0x001E}, uses: {ax_6 = fn0C00_000B(dx_5)}
ax_6: orig: ax, def: {ax_6 = fn0C00_000B(dx_5)}, uses: {store(Mem7[ds:0x012C:word16]) = ax_6}
Mem7: orig: Mem0, def: {store(Mem7[ds:0x012C:word16]) = ax_6}
// fn0C00_0000
void fn0C00_0000(segment ds)
fn0C00_0000_entry:		// block 0, pred:
	def Mem0
	def fp
	def dx
	def ax
	def ds
	// succ:  1
l0C00_0000:		// block 1, pred: 0
	dx_5 = 0x001E
	ax_6 = fn0C00_000B(dx_5)
	store(Mem7[ds:0x012C:word16]) = ax_6
	return
	// succ:  2
fn0C00_0000_exit:		// block 2, pred: 1
	// succ: 

Mem0: Mem0:Global memory
fp: fp:Temporary
dx: dx:Register
ax: ax:Register
ds: ds:Register, def: {def ds}, uses: {store(Mem7[ds:0x012C:word16]) = ax_6}
dx_5: orig: dx
ax_6: orig: ax, def: {ax_6 = fn0C00_000B(0x001E)}, uses: {store(Mem7[ds:0x012C:word16]) = ax_6}
Mem7: orig: Mem0, def: {store(Mem7[ds:0x012C:word16]) = ax_6}
// fn0C00_0000
void fn0C00_0000(segment ds)
fn0C00_0000_entry:		// block 0, pred:
	def ds
	// succ:  1
l0C00_0000:		// block 1, pred: 0
	ax_6 = fn0C00_000B(0x001E)
	store(Mem7[ds:0x012C:word16]) = ax_6
	return
	// succ:  2
fn0C00_0000_exit:		// block 2, pred: 1
	// succ: 
= fn0C00_000B ========================
Mem0: Mem0:Global memory, def: {def Mem0}
fp: fp:Temporary, def: {def fp}
dx: dx:Register, def: {def dx}, uses: {ax_4 = fn0C00_000F(dx)}
ax: ax:Register, def: {def ax}
ax_4: orig: ax, def: {ax_4 = fn0C00_000F(dx)}, uses: {return ax_4}
// fn0C00_000B
word16 fn0C00_000B(word16 dx)
fn0C00_000B_entry:		// block 0, pred:
	def Mem0
	def fp
	def dx
	def ax
	// succ:  1
l0C00_000B:		// block 1, pred: 0
	ax_4 = fn0C00_000F(dx)
	return ax_4
	// succ:  2
fn0C00_000B_exit:		// block 2, pred: 1
	// succ: 

Mem0: Mem0:Global memory
fp: fp:Temporary
dx: dx:Register, def: {def dx}, uses: {ax_4 = fn0C00_000F(dx)}
ax: ax:Register
ax_4: orig: ax, def: {ax_4 = fn0C00_000F(dx)}, uses: {return ax_4}
// fn0C00_000B
word16 fn0C00_000B(word16 dx)
fn0C00_000B_entry:		// block 0, pred:
	def dx
	// succ:  1
l0C00_000B:		// block 1, pred: 0
	ax_4 = fn0C00_000F(dx)
	return ax_4
	// succ:  2
fn0C00_000B_exit:		// block 2, pred: 1
	// succ: 
= fn0C00_000F ========================
Mem0: Mem0:Global memory, def: {def Mem0}
fp: fp:Temporary, def: {def fp}
si: si:Register, def: {def si}
wLoc02: wLoc02:Local -0002, def: {def wLoc02}
SCZO: SCZO:Flags, def: {def SCZO}
dx: dx:Register, def: {def dx}, uses: {dx_13 = PHI(dx, dx_20)}
SO: SO:Flags, def: {def SO}
ax: ax:Register, def: {def ax}
SZO: SZO:Flags, def: {def SZO}
si_9: orig: si, def: {si_9 = 0x0000}, uses: {SCZO_10 = cond(si_9)}{si_14 = PHI(si_9, si_18)}
SCZO_10: orig: SCZO, def: {SCZO_10 = cond(si_9)}, uses: {SO_11 = SCZO_10 (alias)}{SZO_12 = SCZO_10 (alias)}
SO_11: orig: SO, def: {SO_11 = SCZO_10 (alias)}
SZO_12: orig: SZO, def: {SZO_12 = SCZO_10 (alias)}
dx_13: orig: dx, def: {dx_13 = PHI(dx, dx_20)}, uses: {SCZO_15 = cond(dx_13 - 0x0000)}{si_18 = si_14 + dx_13}{dx_20 = dx_13 - 0x0001}
si_14: orig: si, def: {si_14 = PHI(si_9, si_18)}, uses: {si_18 = si_14 + dx_13}{ax_24 = si_14}
SCZO_15: orig: SCZO, def: {SCZO_15 = cond(dx_13 - 0x0000)}, uses: {SO_16 = SCZO_15 (alias)}{SZO_17 = SCZO_15 (alias)}
SO_16: orig: SO, def: {SO_16 = SCZO_15 (alias)}, uses: {branch Test(GE,SO_16)}
SZO_17: orig: SZO, def: {SZO_17 = SCZO_15 (alias)}
si_18: orig: si, def: {si_18 = si_14 + dx_13}, uses: {SCZO_19 = cond(si_18)}{si_14 = PHI(si_9, si_18)}
SCZO_19: orig: SCZO, def: {SCZO_19 = cond(si_18)}
dx_20: orig: dx, def: {dx_20 = dx_13 - 0x0001}, uses: {SZO_21 = cond(dx_20)}{dx_13 = PHI(dx, dx_20)}
SZO_21: orig: SZO, def: {SZO_21 = cond(dx_20)}, uses: {SCZO_22 = SZO_21 (alias)}{SO_23 = SZO_21 (alias)}
SCZO_22: orig: SCZO, def: {SCZO_22 = SZO_21 (alias)}
SO_23: orig: SO, def: {SO_23 = SZO_21 (alias)}
ax_24: orig: ax, def: {ax_24 = si_14}, uses: {return ax_24}
// fn0C00_000F
word16 fn0C00_000F(word16 dx)
fn0C00_000F_entry:		// block 0, pred:
	def Mem0
	def fp
	def si
	def wLoc02
	def SCZO
	def dx
	def SO
	def ax
	def SZO
	// succ:  1
l0C00_000F:		// block 1, pred: 0
	si_9 = 0x0000
	SCZO_10 = cond(si_9)
	SO_11 = SCZO_10 (alias)
	SZO_12 = SCZO_10 (alias)
	// succ:  2
l0C00_0018:		// block 2, pred: 1 3
	dx_13 = PHI(dx, dx_20)
	si_14 = PHI(si_9, si_18)
	SCZO_15 = cond(dx_13 - 0x0000)
	SO_16 = SCZO_15 (alias)
	SZO_17 = SCZO_15 (alias)
	branch Test(GE,SO_16)
	// succ:  4 3
l0C00_0015:		// block 3, pred: 2
	si_18 = si_14 + dx_13
	SCZO_19 = cond(si_18)
	dx_20 = dx_13 - 0x0001
	SZO_21 = cond(dx_20)
	SCZO_22 = SZO_21 (alias)
	SO_23 = SZO_21 (alias)
	// succ:  2
l0C00_001D:		// block 4, pred: 2
	ax_24 = si_14
	return ax_24
	// succ:  5
fn0C00_000F_exit:		// block 5, pred: 4
	// succ: 

Mem0: Mem0:Global memory
fp: fp:Temporary
si: si:Register
wLoc02: wLoc02:Local -0002
SCZO: SCZO:Flags
dx: dx:Register, def: {def dx}, uses: {dx_13 = PHI(dx, dx_20)}
SO: SO:Flags
ax: ax:Register
SZO: SZO:Flags
si_9: orig: si, def: {si_9 = 0x0000}, uses: {si_14 = PHI(si_9, si_18)}
SCZO_10: orig: SCZO
SO_11: orig: SO
SZO_12: orig: SZO
dx_13: orig: dx, def: {dx_13 = PHI(dx, dx_20)}, uses: {SCZO_15 = cond(dx_13)}{si_18 = si_14 + dx_13}{dx_20 = dx_13 - 0x0001}
si_14: orig: si, def: {si_14 = PHI(si_9, si_18)}, uses: {si_18 = si_14 + dx_13}{return si_14}
SCZO_15: orig: SCZO, def: {SCZO_15 = cond(dx_13)}, uses: {branch Test(GE,SCZO_15)}
SO_16: orig: SO
SZO_17: orig: SZO
si_18: orig: si, def: {si_18 = si_14 + dx_13}, uses: {si_14 = PHI(si_9, si_18)}
SCZO_19: orig: SCZO
dx_20: orig: dx, def: {dx_20 = dx_13 - 0x0001}, uses: {dx_13 = PHI(dx, dx_20)}
SZO_21: orig: SZO
SCZO_22: orig: SCZO
SO_23: orig: SO
ax_24: orig: ax
// fn0C00_000F
word16 fn0C00_000F(word16 dx)
fn0C00_000F_entry:		// block 0, pred:
	def dx
	// succ:  1
l0C00_000F:		// block 1, pred: 0
	si_9 = 0x0000
	// succ:  2
l0C00_0018:		// block 2, pred: 1 3
	dx_13 = PHI(dx, dx_20)
	si_14 = PHI(si_9, si_18)
	SCZO_15 = cond(dx_13)
	branch Test(GE,SCZO_15)
	// succ:  4 3
l0C00_0015:		// block 3, pred: 2
	si_18 = si_14 + dx_13
	dx_20 = dx_13 - 0x0001
	// succ:  2
l0C00_001D:		// block 4, pred: 2
	return si_14
	// succ:  5
fn0C00_000F_exit:		// block 5, pred: 4
	// succ: 
