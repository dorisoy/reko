// fn0C00_0000 /////////////////////
	LiveOut:  
	MayUseIn:  ds
	BypassIn: 
	Trashed:   SCZO ax cx dx al cl dl ah ch dh
	Preserved:
// fn0C00_0000
void fn0C00_0000()
fn0C00_0000_entry:		// pred:
	// succ:  l0C00_0000
// DataOut: ds
l0C00_0000:		// pred: fn0C00_0000_entry
	cx = 0x0064
	wLoc04 = cx
	call fn0C00_000F (depth: 4;)
	store(Mem0[ds:0x0064:word16]) = ax
	return
	// succ:  fn0C00_0000_exit
// DataOut:
fn0C00_0000_exit:		// pred: l0C00_0000
	// succ: 
// DataOut:
// fn0C00_000F /////////////////////
	LiveOut:   ax ds
	MayUseIn: 
	BypassIn: 
	Trashed:   SCZO ax dx al dl ah dh
	Preserved: bp
// fn0C00_000F
void fn0C00_000F()
fn0C00_000F_entry:		// pred:
	// succ:  l0C00_000F
// DataOut: ds
// LocalsOut: Stack +0000(16)

l0C00_000F:		// pred: fn0C00_000F_entry
	wLoc04 = bp
	ax = wArg00
	ax = ax - 0x0001
	SZO = cond(ax)
	branch Test(EQ,Z) l0C00_0026
	// succ:  l0C00_0018 l0C00_0026
// DataOut: ax ds
// LocalsOut: Stack +0000(16)

l0C00_0026:		// pred: l0C00_000F
	ax = 0x0001
	// succ:  l0C00_0029
// DataOut: ax ds
l0C00_0018:		// pred: l0C00_000F
	wLoc06 = ax
	call fn0C00_000F (depth: 6;)
	dx = wArg00
	dx_ax = dx *s ax
	SCZO = cond(dx_ax)
	// succ:  l0C00_0029
// DataOut: ax ds
l0C00_0029:		// pred: l0C00_0026 l0C00_0018
	bp = wLoc04
	return
	// succ:  fn0C00_000F_exit
// DataOut: ax ds
fn0C00_000F_exit:		// pred: l0C00_0029
	// succ: 
// DataOut: ax ds
