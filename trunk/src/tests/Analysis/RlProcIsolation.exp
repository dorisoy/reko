// fn0C00_0000 /////////////////////
	LiveOut:  
	MayUseIn:  di ss ds
	BypassIn: 
	Trashed:
	Preserved:
// fn0C00_0000
void fn0C00_0000()
fn0C00_0000_entry:
// DataOut: di ss ds
// DataOut (flags):
// SymbolicIn: sp:fp

l0C00_0000:
	call fn0C00_000F (retsize: 2; depth: 2)
	sp = sp - 0x0002
	wLoc04 = di
	ax = 0x0100
	call fn0C00_0014 (depth: 4;)
	Mem0[ds:0x0300:word16] = ax
	di = wLoc04
	call fn0C00_000F (retsize: 2; depth: 2)
	return
// DataOut: di ss ds
// DataOut (flags):
// SymbolicIn: sp:fp

fn0C00_0000_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn: sp:fp

// fn0C00_000F /////////////////////
	LiveOut:   di ds
	MayUseIn:  di ds
	BypassIn: 
	Trashed:   SCZO ax di al ah
	Preserved: di sp
// fn0C00_000F
void fn0C00_000F()
fn0C00_000F_entry:
// DataOut: di ss ds
// DataOut (flags):
// SymbolicIn: sp:fp

l0C00_000F:
	Mem0[ds:di:word16] = 0x0000
	return
// DataOut: di ss ds
// DataOut (flags):
// SymbolicIn: sp:fp
fn0C00_000F_exit:
// DataOut: di ds
// DataOut (flags):
// SymbolicIn: sp:fp

// fn0C00_0014 /////////////////////
	LiveOut:   ax ds
	MayUseIn:  ax
	BypassIn: 
	Trashed:   SCZO ax di al ah
	Preserved:
// fn0C00_0014
void fn0C00_0014()
fn0C00_0014_entry:		// pred:
	// succ:  l0C00_0014
// DataOut: ax ds
l0C00_0014:		// pred: fn0C00_0014_entry
	di = 0x0000
	SZO = cond(di)
	C = false
	ax = ax - 0x0001
	SZO = cond(ax)
	return
// DataOut: ax ds
// DataOut (flags):
// SymbolicIn: sp:fp

fn0C00_0014_exit:
// DataOut: ax ds
// DataOut (flags):
// SymbolicIn: sp:fp di:0x0000 ax:ax - 0x0001
