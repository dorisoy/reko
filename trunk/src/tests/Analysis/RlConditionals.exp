// fn0C00_0000 /////////////////////
	LiveOut:  
	MayUseIn:  bp ss ds
	BypassIn: 
	Trashed:   SCZO ax bp al ah
	Preserved:
// fn0C00_0000
void fn0C00_0000()
fn0C00_0000_entry:		// block 0, pred:
	// succ:  1
// DataOut: bp ss ds
l0C00_0000:		// block 1, pred: 0
	ax = Mem0[ds:0x0100:word16]
	SCZO = cond(Mem0[ds:0x0102:word16] - ax)
	branch Test(EQ,Z) l0C00_000F
	// succ:  2 3
// DataOut: bp ss ds
l0C00_000A:		// block 2, pred: 1
	store(Mem0[ds:0x0F00:byte]) = 0x01
	// succ:  3
// DataOut: bp ss ds
l0C00_000F:		// block 3, pred: 2 1
	ax = Mem0[ds:0x0104:word16]
	v6 = Mem0[ds:0x0106:word16] - ax
	store(Mem0[ds:0x0106:word16]) = v6
	SCZO = cond(v6)
	branch Test(LE,SZO) l0C00_001E
	// succ:  4 5
// DataOut: bp ss ds
l0C00_0019:		// block 4, pred: 3
	store(Mem0[ds:0x0F01:byte]) = 0x01
	// succ:  5
// DataOut: bp ss ds
l0C00_001E:		// block 5, pred: 4 3
	ax = Mem0[ds:0x0106:word16]
	ax = ax & Mem0[ds:0x0108:word16]
	SCZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0C00_002D
	// succ:  6 7
// DataOut: bp ss ds
l0C00_0028:		// block 6, pred: 5
	store(Mem0[ds:0x0F02:byte]) = 0x01
	// succ:  7
// DataOut: bp ss ds
l0C00_002D:		// block 7, pred: 6 5
	ax = Mem0[ds:0x010A:word16]
	SCZO = cond(ax - Mem0[ds:0x010C:word16])
	C = !C
	branch Test(ULT,C) l0C00_003D
	// succ:  8 9
// DataOut: bp ss ds
l0C00_0038:		// block 8, pred: 7
	store(Mem0[ds:0x0F03:byte]) = 0x01
	// succ:  9
// DataOut: bp ss ds
l0C00_003D:		// block 9, pred: 8 7
	wLoc04 = 0x0003
	call fn0C00_0069 (depth: 4;)
	branch Test(UGE,C) l0C00_0049
	// succ:  10 11
// DataOut: bp ss ds
l0C00_0044:		// block 10, pred: 9
	store(Mem0[ds:0x0F04:byte]) = 0x01
	// succ:  11
// DataOut: bp ss ds
l0C00_0049:		// block 11, pred: 10 9
	SCZO = cond(Mem0[ds:0x010E:word16] & 0x01FF)
	C = false
	branch Test(EQ,Z) l0C00_0056
	// succ:  12 13
// DataOut: bp ss ds
l0C00_0051:		// block 12, pred: 11
	store(Mem0[ds:0x0F05:byte]) = 0x01
	// succ:  13
// DataOut: bp ss ds
l0C00_0056:		// block 13, pred: 12 11
	bp = bp - 0x0010
	SCZO = cond(bp)
	branch Test(LT,SO) l0C00_005F
	// succ:  14 15
// DataOut: bp ss ds
l0C00_005B:		// block 14, pred: 13
	store(Mem0[ss:bp + 0x0006:byte]) = 0x01
	// succ:  15
// DataOut: bp ds
l0C00_005F:		// block 15, pred: 14 13
	bp = bp + bp
	SCZO = cond(bp)
	branch Test(NO,O) l0C00_0068
	// succ:  16 17
// DataOut: ds
l0C00_0063:		// block 16, pred: 15
	store(Mem0[ds:0x0F07:byte]) = 0x01
	// succ:  17
// DataOut:
l0C00_0068:		// block 17, pred: 16 15
	return
	// succ:  18
// DataOut:
fn0C00_0000_exit:		// block 18, pred: 17
	// succ: 
// DataOut:
// fn0C00_0069 /////////////////////
	LiveOut:   C ss ds
	MayUseIn: 
	BypassIn: 
	Trashed:   SCZO
	Preserved: bp
// fn0C00_0069
void fn0C00_0069()
fn0C00_0069_entry:		// block 0, pred:
	// succ:  1
// DataOut: ss ds
// LocalsOut: Stack +0000(16)

l0C00_0069:		// block 1, pred: 0
	wLoc04 = bp
	SCZO = cond(wArg00 - 0x0000)
	bp = wLoc04
	return
	// succ:  2
// DataOut: ss ds// DataOut (flags): C

fn0C00_0069_exit:		// block 2, pred: 1
	// succ: 
// DataOut: ss ds// DataOut (flags): C

