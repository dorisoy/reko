Mem0: Mem0:Global memory
fp: fp:Temporary
cx: cx:Register cx
ax: ax:Register ax
ds: ds:Register ds, def: {def ds}, uses: {store(Mem7[ds:0x0064:word16]) = ax_6}
cx_5: orig: cx, def: {cx_5 = 0x0005}, uses: {ax_6 = fn0C00_000B(cx_5)}
ax_6: orig: ax, def: {ax_6 = fn0C00_000B(cx_5)}, uses: {store(Mem7[ds:0x0064:word16]) = ax_6}
Mem7: orig: Mem0, def: {store(Mem7[ds:0x0064:word16]) = ax_6}
// fn0C00_0000
void fn0C00_0000(segment ds)
fn0C00_0000_entry:		// block 0, pred:
	def ds
	// succ:  1
l0C00_0000:		// block 1, pred: 0
	cx_5 = 0x0005
	ax_6 = fn0C00_000B(cx_5)
	store(Mem7[ds:0x0064:word16]) = ax_6
	return
	// succ:  2
fn0C00_0000_exit:		// block 2, pred: 1
	// succ: 
Mem0: Mem0:Global memory
fp: fp:Temporary
si: si:Register si
wLoc04: wLoc04:Local -0004
cx: cx:Register cx, def: {def cx}, uses: {si_15 = cx}{cx_16 = cx - 0x0001}{branch cx <= 0x0001}
SCZO: SCZO:Flags
SZO: SZO:Flags
ax: ax:Register ax
dx: dx:Register dx
dx_ax: dx_ax:Sequence dx:ax
wLoc04_10: orig: wLoc04
SCZO_11: orig: SCZO
SZO_12: orig: SZO
ax_13: orig: ax, def: {ax_13 = 0x0001}, uses: {ax_26 = PHI(ax_20, ax_13)}
dx_ax_14: orig: dx_ax
si_15: orig: si, def: {si_15 = cx}, uses: {dx_ax_19 = si_15 * ax_18}
cx_16: orig: cx, def: {cx_16 = cx - 0x0001}, uses: {ax_18 = fn0C00_000B(cx_16)}
SZO_17: orig: SZO
ax_18: orig: ax, def: {ax_18 = fn0C00_000B(cx_16)}, uses: {dx_ax_19 = si_15 * ax_18}
dx_ax_19: orig: dx_ax, def: {dx_ax_19 = si_15 * ax_18}, uses: {ax_20 = (word16) dx_ax_19 (alias)}
ax_20: orig: ax, def: {ax_20 = (word16) dx_ax_19 (alias)}, uses: {ax_26 = PHI(ax_20, ax_13)}
dx_21: orig: dx
SCZO_22: orig: SCZO
SZO_23: orig: SZO
dx_ax_24: orig: dx_ax
dx_25: orig: dx
ax_26: orig: ax, def: {ax_26 = PHI(ax_20, ax_13)}, uses: {return ax_26}
SZO_27: orig: SZO
SCZO_28: orig: SCZO
cx_29: orig: cx
si_30: orig: si
// fn0C00_000B
word16 fn0C00_000B(word16 cx)
fn0C00_000B_entry:		// block 0, pred:
	def cx
	// succ:  1
l0C00_000B:		// block 1, pred: 0
	branch cx <= 0x0001
	// succ:  3 2
l0C00_001C:		// block 2, pred: 1
	ax_13 = 0x0001
	// succ:  4
l0C00_0011:		// block 3, pred: 1
	si_15 = cx
	cx_16 = cx - 0x0001
	ax_18 = fn0C00_000B(cx_16)
	dx_ax_19 = si_15 * ax_18
	ax_20 = (word16) dx_ax_19 (alias)
	// succ:  4
l0C00_001F:		// block 4, pred: 3 2
	ax_26 = PHI(ax_20, ax_13)
	return ax_26
	// succ:  5
fn0C00_000B_exit:		// block 5, pred: 4
	// succ: 
