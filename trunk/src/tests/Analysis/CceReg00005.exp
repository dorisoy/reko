Mem0:Global memory
fp:fp
sp:sp
ds:ds
    def:  def ds
    uses: bx_7 = fn0C00_000C(ds, &cl_6)
          Mem8[ds:0x0300:word16] = bx_7
          Mem9[ds:0x0302:byte] = cl_6
bx:bx
cl:cl
cl_6: orig: cl
    def:  bx_7 = fn0C00_000C(ds, &cl_6)
    uses: Mem9[ds:0x0302:byte] = cl_6
bx_7: orig: bx
    def:  bx_7 = fn0C00_000C(ds, &cl_6)
    uses: Mem8[ds:0x0300:word16] = bx_7
Mem8: orig: Mem0
    def:  Mem8[ds:0x0300:word16] = bx_7
Mem9: orig: Mem0
    def:  Mem9[ds:0x0302:byte] = cl_6
// fn0C00_0000
void fn0C00_0000(selector ds)
fn0C00_0000_entry:
	def ds
	// succ:  l0C00_0000
l0C00_0000:
	bx_7 = fn0C00_000C(ds, &cl_6)
	Mem8[ds:0x0300:word16] = bx_7
	Mem9[ds:0x0302:byte] = cl_6
	return
	// succ:  fn0C00_0000_exit
fn0C00_0000_exit:

Mem0:Global memory
    def:  def Mem0
    uses: ah_51 = Mem0[ds:di_40 + 0x0001:byte]
          SCZO_68 = cond(0x00 - Mem0[ds:di_33:byte])
          branch 0x00 != Mem0[ds:di_33:byte] l0C00_0019
fp:Temporary
sp:sp
cx:cx
ds:ds
    def:  def ds
    uses: ah_51 = Mem0[ds:di_40 + 0x0001:byte]
          SCZO_68 = cond(0x00 - Mem0[ds:di_33:byte])
          branch 0x00 != Mem0[ds:di_33:byte] l0C00_0019
es:es
di:di
al:al
SZO:Flags
C:Flags
SCZO:Flags
Z:Flags
ah:ah
ax:ax
    def:  def ax
    uses: ax_23 = DPB(ax, 0x00, 0, 8) (alias)
bx:bx
cl:cl
clOut:Out:cl
cx_17: orig: cx
es_18: orig: es
di_19: orig: di
    def:  di_19 = 0x7E0F
    uses: di_33 = PHI(di_19, di_72)
cx_20: orig: cx
    def:  cx_20 = 0x000C
    uses: cx_34 = PHI(cx_20, cx_73)
cl_21: orig: cl
al_22: orig: al
ax_23: orig: ax
    def:  ax_23 = DPB(ax, 0x00, 0, 8) (alias)
    uses: ax_52 = DPB(ax_23, ah_51, 8, 8) (alias)
SZO_24: orig: SZO
    def:  SZO_24 = cond(0x00)
    uses: Z_25 = SZO_24 (alias)
Z_25: orig: Z
    def:  Z_25 = SZO_24 (alias)
    uses: Z_29 = PHI(Z_25, Z_71)
C_26: orig: C
SCZO_27: orig: SCZO
cl_28: orig: cl
Z_29: orig: Z
    def:  Z_29 = PHI(Z_25, Z_71)
    uses: Z_36 = PHI(Z_29, Z_71)
SCZO_30: orig: SCZO
C_31: orig: C
SZO_32: orig: SZO
di_33: orig: di
    def:  di_33 = PHI(di_19, di_72)
    uses: di_40 = PHI(di_33, di_72)
          SCZO_68 = cond(0x00 - Mem0[ds:di_33:byte])
          di_72 = di_33 + 0x0001
          branch 0x00 != Mem0[ds:di_33:byte] l0C00_0019
cx_34: orig: cx
    def:  cx_34 = PHI(cx_20, cx_73)
    uses: branch cx_34 == 0x0000 l0C00_001B
          cx_73 = cx_34 - 0x0001
cl_35: orig: cl
Z_36: orig: Z
    def:  Z_36 = PHI(Z_29, Z_71)
    uses: branch Z_36 l0C00_002D
SCZO_37: orig: SCZO
C_38: orig: C
SZO_39: orig: SZO
di_40: orig: di
    def:  di_40 = PHI(di_33, di_72)
    uses: ah_51 = Mem0[ds:di_40 + 0x0001:byte]
          return di_40 - 0x7E03
cx_41: orig: cx
cl_42: orig: cl
    def:  cl_42 = PHI(cl_56, cl_64)
    uses: use cl_42 (=> clOut)
bx_43: orig: bx
ax_44: orig: ax
ah_45: orig: ah
Z_46: orig: Z
SCZO_47: orig: SCZO
C_48: orig: C
SZO_49: orig: SZO
cx_50: orig: cx
ah_51: orig: ah
    def:  ah_51 = Mem0[ds:di_40 + 0x0001:byte]
    uses: ax_52 = DPB(ax_23, ah_51, 8, 8) (alias)
ax_52: orig: ax
    def:  ax_52 = DPB(ax_23, ah_51, 8, 8) (alias)
    uses: cx_54 = __bsr(ax_52)
Z_53: orig: Z
cx_54: orig: cx
    def:  cx_54 = __bsr(ax_52)
    uses: cl_56 = (byte) (cx_54 - 0x0008) (alias)
cx_55: orig: cx
cl_56: orig: cl
    def:  cl_56 = (byte) (cx_54 - 0x0008) (alias)
    uses: cl_42 = PHI(cl_56, cl_64)
SCZO_57: orig: SCZO
bx_58: orig: bx
bx_59: orig: bx
SCZO_60: orig: SCZO
bx_61: orig: bx
SZO_62: orig: SZO
C_63: orig: C
cl_64: orig: cl
    def:  cl_64 = 0x00
    uses: cl_42 = PHI(cl_56, cl_64)
cx_65: orig: cx
SZO_66: orig: SZO
C_67: orig: C
SCZO_68: orig: SCZO
    def:  SCZO_68 = cond(0x00 - Mem0[ds:di_33:byte])
    uses: Z_71 = SCZO_68 (alias)
SZO_69: orig: SZO
C_70: orig: C
Z_71: orig: Z
    def:  Z_71 = SCZO_68 (alias)
    uses: Z_36 = PHI(Z_29, Z_71)
          Z_29 = PHI(Z_25, Z_71)
di_72: orig: di
    def:  di_72 = di_33 + 0x0001
    uses: di_40 = PHI(di_33, di_72)
          di_33 = PHI(di_19, di_72)
cx_73: orig: cx
    def:  cx_73 = cx_34 - 0x0001
    uses: cx_34 = PHI(cx_20, cx_73)
cl_74: orig: cl
// fn0C00_000C
word16 fn0C00_000C(selector ds, ptr16 clOut)
fn0C00_000C_entry:
	def Mem0
	def ds
	def ax
	// succ:  l0C00_000C
l0C00_000C:
	di_18 = 0x7E0F
	cx_19 = 0x000C
	ax_22 = DPB(ax, 0x00, 0, 8) (alias)
	SZO_23 = cond(0x00)
	Z_24 = SZO_23 (alias)
	// succ:  l0C00_0019
l0C00_0019:
	Z_28 = PHI(Z_24, Z_63)
	di_32 = PHI(di_18, di_64)
	cx_33 = PHI(cx_19, cx_65)
	branch cx_33 == 0x0000 l0C00_001B
	// succ:  l0C00_0019_1 l0C00_001B
l0C00_0019_1:
	SCZO_60 = cond(0x00 - Mem0[ds:di_32:byte])
	Z_63 = SCZO_60 (alias)
	di_64 = di_32 + 0x0001
	cx_65 = cx_33 - 0x0001
	branch 0x00 != Mem0[ds:di_32:byte] l0C00_0019
	// succ:  l0C00_001B l0C00_0019
l0C00_001B:
	Z_35 = PHI(Z_28, Z_63)
	di_39 = PHI(di_32, di_64)
	branch Z_35 l0C00_002D
	// succ:  l0C00_001D l0C00_002D
l0C00_001D:
	ah_49 = Mem0[ds:di_39 + 0x0001:byte]
	ax_50 = DPB(ax_23, ah_51, 8, 8) (alias)
	cx_51 = __bsr(ax_50)
	cl_56 = (byte) (cx_41 - 0x0008) (alias)
	return di_39 - 0x7E03
	// succ:  fn0C00_000C_exit
l0C00_002D:
	cl_64 = 0x00
	return 0x0000
	// succ:  fn0C00_000C_exit
fn0C00_000C_exit:
	cl_42 = PHI(cl_56, cl_64)
	use cl_42 (=> clOut)

