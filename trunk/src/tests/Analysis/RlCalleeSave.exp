fn0C00_0000
	LiveOut:  
	MayUseIn:  ds
	BypassIn: 
	Trashed:   ax si al ah
	Preserved:
// fn0C00_0000
void fn0C00_0000()
fn0C00_0000_entry:		// block 0, pred:
	// succ:  1
// DataOut: ds
l0C00_0000:		// block 1, pred: 0
	call fn0C00_000D (depth: 0;)
	si = ax
	call fn0C00_001A (depth: 0;)
	store(Mem0[ds:0x0400:word16]) = ax
	return
	// succ:  2
// DataOut:
fn0C00_0000_exit:		// block 2, pred: 1
	// succ: 
// DataOut:
fn0C00_000D
	LiveOut:   ax ds
	MayUseIn:  ds
	BypassIn: 
	Trashed:   ax al ah
	Preserved: si
// fn0C00_000D
void fn0C00_000D()
fn0C00_000D_entry:		// block 0, pred:
	// succ:  1
// DataOut: ds
l0C00_000D:		// block 1, pred: 0
	si = Mem0[ds:0x007A:word16]
	si = Mem0[ds:si + 0x0004:word16]
	ax = si + 0x0008
	return
	// succ:  2
// DataOut: ax ds
fn0C00_000D_exit:		// block 2, pred: 1
	// succ: 
// DataOut: ax ds
fn0C00_001A
	LiveOut:   ax ds
	MayUseIn:  si ds
	BypassIn: 
	Trashed:   ax al ah
	Preserved: si
// fn0C00_001A
void fn0C00_001A()
fn0C00_001A_entry:		// block 0, pred:
	// succ:  1
// DataOut: si ds
l0C00_001A:		// block 1, pred: 0
	ax = Mem0[ds:si:word16]
	return
	// succ:  2
// DataOut: ax ds
fn0C00_001A_exit:		// block 2, pred: 1
	// succ: 
// DataOut: ax ds
