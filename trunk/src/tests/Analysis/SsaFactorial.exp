Mem0: Mem0:Global memory, def: {def Mem0}
fp: fp:Temporary, def: {def fp}
cx: cx:Register, def: {def cx}
wLoc02: wLoc02:Local -0002, def: {def wLoc02}
ax: ax:Register, def: {def ax}, uses: {call fn0C00_000F (depth: 2;)}{store(Mem8[ds:0x0064:word16]) = ax}
ds: ds:Register, def: {def ds}, uses: {call fn0C00_000F (depth: 2;)}{store(Mem8[ds:0x0064:word16]) = ax}
cx_6: orig: cx, def: {cx_6 = 0x0064}, uses: {wLoc02_7 = cx_6}{call fn0C00_000F (depth: 2;)}
wLoc02_7: orig: wLoc02, def: {wLoc02_7 = cx_6}
Mem8: orig: Mem0, def: {store(Mem8[ds:0x0064:word16]) = ax}
// fn0C00_0000
void fn0C00_0000()
fn0C00_0000_entry:		// block 0, pred:
	def Mem0
	def fp
	def cx
	def wLoc02
	def ax
	def ds
	// succ:  1
l0C00_0000:		// block 1, pred: 0
	cx_6 = 0x0064
	wLoc02_7 = cx_6
	call fn0C00_000F (depth: 2;)
	store(Mem8[ds:0x0064:word16]) = ax
	return
	// succ:  2
fn0C00_0000_exit:		// block 2, pred: 1
	// succ: 

Mem0: Mem0:Global memory, def: {def Mem0}
fp: fp:Temporary, def: {def fp}
bp: bp:Register, def: {def bp}, uses: {wLoc02_12 = bp}{call fn0C00_000F (depth: 4;)}
wLoc02: wLoc02:Local -0002, def: {def wLoc02}
wArg02: wArg02:Stack +0002, def: {def wArg02}, uses: {ax_13 = wArg02}{dx_22 = wArg02}
ax: ax:Register, def: {def ax}
SZO: SZO:Flags, def: {def SZO}
Z: Z:Flags, def: {def Z}
wLoc04: wLoc04:Local -0004, def: {def wLoc04}, uses: {wLoc04_32 = PHI(wLoc04_21, wLoc04)}
dx: dx:Register, def: {def dx}, uses: {dx_ax_15 = SEQ(dx, ax_14) (alias)}{dx_ax_20 = SEQ(dx, ax_19) (alias)}{dx_31 = PHI(dx_25, dx)}{call fn0C00_000F (depth: 4;)}
dx_ax: dx_ax:Sequence dx:ax, def: {def dx_ax}
SCZO: SCZO:Flags, def: {def SCZO}
wLoc02_12: orig: wLoc02, def: {wLoc02_12 = bp}, uses: {bp_36 = wLoc02_12}
ax_13: orig: ax, def: {ax_13 = wArg02}, uses: {ax_14 = ax_13 - 0x0001}
ax_14: orig: ax, def: {ax_14 = ax_13 - 0x0001}, uses: {dx_ax_15 = SEQ(dx, ax_14) (alias)}{SZO_16 = cond(ax_14)}{wLoc04_21 = ax_14}{call fn0C00_000F (depth: 4;)}{dx_ax_23 = dx_22 * ax_14}
dx_ax_15: orig: dx_ax, def: {dx_ax_15 = SEQ(dx, ax_14) (alias)}
SZO_16: orig: SZO, def: {SZO_16 = cond(ax_14)}, uses: {Z_17 = SZO_16 (alias)}{SCZO_18 = SZO_16 (alias)}{SZO_34 = PHI(SZO_27, SZO_16)}{call fn0C00_000F (depth: 4;)}
Z_17: orig: Z, def: {Z_17 = SZO_16 (alias)}, uses: {branch Test(EQ,Z_17)}{Z_33 = PHI(Z_28, Z_17)}{call fn0C00_000F (depth: 4;)}
SCZO_18: orig: SCZO, def: {SCZO_18 = SZO_16 (alias)}, uses: {SCZO_29 = PHI(SCZO_26, SCZO_18)}{call fn0C00_000F (depth: 4;)}
ax_19: orig: ax, def: {ax_19 = 0x0001}, uses: {dx_ax_20 = SEQ(dx, ax_19) (alias)}{ax_35 = PHI(ax_24, ax_19)}
dx_ax_20: orig: dx_ax, def: {dx_ax_20 = SEQ(dx, ax_19) (alias)}, uses: {dx_ax_30 = PHI(dx_ax_23, dx_ax_20)}
wLoc04_21: orig: wLoc04, def: {wLoc04_21 = ax_14}, uses: {wLoc04_32 = PHI(wLoc04_21, wLoc04)}
dx_22: orig: dx, def: {dx_22 = wArg02}, uses: {dx_ax_23 = dx_22 * ax_14}
dx_ax_23: orig: dx_ax, def: {dx_ax_23 = dx_22 * ax_14}, uses: {ax_24 = (word16) dx_ax_23 (alias)}{dx_25 = SLICE(dx_ax_23, word16, 16) (alias)}{SCZO_26 = cond(dx_ax_23)}{dx_ax_30 = PHI(dx_ax_23, dx_ax_20)}
ax_24: orig: ax, def: {ax_24 = (word16) dx_ax_23 (alias)}, uses: {ax_35 = PHI(ax_24, ax_19)}
dx_25: orig: dx, def: {dx_25 = SLICE(dx_ax_23, word16, 16) (alias)}, uses: {dx_31 = PHI(dx_25, dx)}
SCZO_26: orig: SCZO, def: {SCZO_26 = cond(dx_ax_23)}, uses: {SZO_27 = SCZO_26 (alias)}{Z_28 = SCZO_26 (alias)}{SCZO_29 = PHI(SCZO_26, SCZO_18)}
SZO_27: orig: SZO, def: {SZO_27 = SCZO_26 (alias)}, uses: {SZO_34 = PHI(SZO_27, SZO_16)}
Z_28: orig: Z, def: {Z_28 = SCZO_26 (alias)}, uses: {Z_33 = PHI(Z_28, Z_17)}
SCZO_29: orig: SCZO, def: {SCZO_29 = PHI(SCZO_26, SCZO_18)}
dx_ax_30: orig: dx_ax, def: {dx_ax_30 = PHI(dx_ax_23, dx_ax_20)}
dx_31: orig: dx, def: {dx_31 = PHI(dx_25, dx)}
wLoc04_32: orig: wLoc04, def: {wLoc04_32 = PHI(wLoc04_21, wLoc04)}
Z_33: orig: Z, def: {Z_33 = PHI(Z_28, Z_17)}
SZO_34: orig: SZO, def: {SZO_34 = PHI(SZO_27, SZO_16)}
ax_35: orig: ax, def: {ax_35 = PHI(ax_24, ax_19)}
bp_36: orig: bp, def: {bp_36 = wLoc02_12}
// fn0C00_000F
void fn0C00_000F()
fn0C00_000F_entry:		// block 0, pred:
	def Mem0
	def fp
	def bp
	def wLoc02
	def wArg02
	def ax
	def SZO
	def Z
	def wLoc04
	def dx
	def dx_ax
	def SCZO
	// succ:  1
l0C00_000F:		// block 1, pred: 0
	wLoc02_12 = bp
	ax_13 = wArg02
	ax_14 = ax_13 - 0x0001
	dx_ax_15 = SEQ(dx, ax_14) (alias)
	SZO_16 = cond(ax_14)
	Z_17 = SZO_16 (alias)
	SCZO_18 = SZO_16 (alias)
	branch Test(EQ,Z_17)
	// succ:  3 2
l0C00_0026:		// block 2, pred: 1
	ax_19 = 0x0001
	dx_ax_20 = SEQ(dx, ax_19) (alias)
	// succ:  4
l0C00_0018:		// block 3, pred: 1
	wLoc04_21 = ax_14
	call fn0C00_000F (depth: 4;)
	dx_22 = wArg02
	dx_ax_23 = dx_22 * ax_14
	ax_24 = (word16) dx_ax_23 (alias)
	dx_25 = SLICE(dx_ax_23, word16, 16) (alias)
	SCZO_26 = cond(dx_ax_23)
	SZO_27 = SCZO_26 (alias)
	Z_28 = SCZO_26 (alias)
	// succ:  4
l0C00_0029:		// block 4, pred: 3 2
	SCZO_29 = PHI(SCZO_26, SCZO_18)
	dx_ax_30 = PHI(dx_ax_23, dx_ax_20)
	dx_31 = PHI(dx_25, dx)
	wLoc04_32 = PHI(wLoc04_21, wLoc04)
	Z_33 = PHI(Z_28, Z_17)
	SZO_34 = PHI(SZO_27, SZO_16)
	ax_35 = PHI(ax_24, ax_19)
	bp_36 = wLoc02_12
	return
	// succ:  5
fn0C00_000F_exit:		// block 5, pred: 4
	// succ: 

