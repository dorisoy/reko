void fn0C00_0000(Register word16 di, Register selector ds)
// MayUse:  di ds
// LiveOut:
// Trashed: ax bx si al bl ah bh
// Preserved:
// fn0C00_0000
// Mem0:Global memory
// fp:Temporary
// si:Register si
// wLoc04:Local -0004
// di:Register di
// ds:Register ds
// return address size: 2
void fn0C00_0000(word16 di, selector ds)
fn0C00_0000_entry:		// pred:
	// succ:  l0C00_0000
l0C00_0000:		// pred: fn0C00_0000_entry
	si = 0x0100
	fn0C00_0010(si, di, ds)
	wLoc04 = 0x0100
	fn0C00_0017(di, ds, wLoc04)
	return
	// succ:  fn0C00_0000_exit
fn0C00_0000_exit:		// pred: l0C00_0000
	// succ: 
void fn0C00_0010(Register word16 si, Register word16 di, Register selector ds)
// MayUse:  si di ds
// LiveOut:
// Trashed: ax al ah
// Preserved:
// fn0C00_0010
// Mem0:Global memory
// fp:Temporary
// si:Register si
// ds:Register ds
// ax:Register ax
// di:Register di
// return address size: 2
void fn0C00_0010(word16 si, word16 di, selector ds)
fn0C00_0010_entry:		// pred:
	// succ:  l0C00_0010
l0C00_0010:		// pred: fn0C00_0010_entry
	ax = Mem0[ds:si + 0x0002:word16]
	fn0C00_0029(ax, di, ds)
	return
	// succ:  fn0C00_0010_exit
fn0C00_0010_exit:		// pred: l0C00_0010
	// succ: 
void fn0C00_0017(Register word16 di, Register selector ds, Stack word16 wArg00)
// MayUse:  di ds
// LiveOut:
// Trashed: ax bx al bl ah bh
// Preserved: bp
// Stack args: Stack +0000(16)
// fn0C00_0017
// Mem0:Global memory
// fp:Temporary
// bp:Register bp
// wLoc04:Local -0004
// wArg00:Stack +0000
// bx:Register bx
// ds:Register ds
// ax:Register ax
// wLoc06:Local -0006
// di:Register di
// return address size: 2
void fn0C00_0017(word16 di, selector ds, word16 wArg00)
fn0C00_0017_entry:		// pred:
	// succ:  l0C00_0017
l0C00_0017:		// pred: fn0C00_0017_entry
	wLoc04 = bp
	bx = wArg00
	ax = Mem0[ds:bx + 0x0002:word16]
	wLoc06 = ax
	fn0C00_002C(di, ds, wLoc06)
	bp = wLoc04
	return
	// succ:  fn0C00_0017_exit
fn0C00_0017_exit:		// pred: l0C00_0017
	// succ: 
void fn0C00_0029(Register word16 ax, Register word16 di, Register selector ds)
// MayUse:  ax di ds
// LiveOut:
// Trashed:
// Preserved:
// fn0C00_0029
// Mem0:Global memory
// fp:Temporary
// ax:Register ax
// di:Register di
// ds:Register ds
// return address size: 2
void fn0C00_0029(word16 ax, word16 di, selector ds)
fn0C00_0029_entry:		// pred:
	// succ:  l0C00_0029
l0C00_0029:		// pred: fn0C00_0029_entry
	Mem0[ds:di:word16] = ax
	return
	// succ:  fn0C00_0029_exit
fn0C00_0029_exit:		// pred: l0C00_0029
	// succ: 
void fn0C00_002C(Register word16 di, Register selector ds, Stack word16 wArg00)
// MayUse:  di ds
// LiveOut:
// Trashed: ax al ah
// Preserved: bp
// Stack args: Stack +0000(16)
// fn0C00_002C
// Mem0:Global memory
// fp:Temporary
// bp:Register bp
// wLoc04:Local -0004
// wArg00:Stack +0000
// ax:Register ax
// di:Register di
// ds:Register ds
// return address size: 2
void fn0C00_002C(word16 di, selector ds, word16 wArg00)
fn0C00_002C_entry:		// pred:
	// succ:  l0C00_002C
l0C00_002C:		// pred: fn0C00_002C_entry
	wLoc04 = bp
	ax = wArg00
	Mem0[ds:di:word16] = ax
	bp = wLoc04
	return
	// succ:  fn0C00_002C_exit
fn0C00_002C_exit:		// pred: l0C00_002C
	// succ: 
