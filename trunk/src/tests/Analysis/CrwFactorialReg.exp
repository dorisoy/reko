void fn0C00_0000(Register segment ds)
// MayUse:  ds
// LiveOut:
// Trashed: SCZO ax cx dx al cl dl ah ch dh
// Preserved:
// fn0C00_0000
// Mem0:Global memory
// fp:Temporary
// cx:Register
// ax:Register
// ds:Register
// return address size: 2
void fn0C00_0000(segment ds)
fn0C00_0000_entry:		// block 0, pred:
	// succ:  1
l0C00_0000:		// block 1, pred: 0
	cx = 0x0005
	ax = fn0C00_000B(cx)
	store(Mem0[ds:0x0064:word16]) = ax
	return
	// succ:  2
fn0C00_0000_exit:		// block 2, pred: 1
	// succ: 
Register word16 fn0C00_000B(Register word16 cx)
// MayUse:  cx
// LiveOut: ax
// Trashed: SCZO ax cx dx al cl dl ah ch dh
// Preserved: si
// fn0C00_000B
// Mem0:Global memory
// fp:Temporary
// si:Register
// wLoc02:Local -0002
// cx:Register
// SCZO:Flags
// SZO:Flags
// ax:Register
// dx:Register
// dx_ax:Sequence dx:ax
// return address size: 2
word16 fn0C00_000B(word16 cx)
fn0C00_000B_entry:		// block 0, pred:
	// succ:  1
l0C00_000B:		// block 1, pred: 0
	SCZO = cond(cx - 0x0001)
	branch Test(LE,SZO)
	// succ:  3 2
l0C00_001C:		// block 2, pred: 1
	ax = 0x0001
	// succ:  4
l0C00_0011:		// block 3, pred: 1
	si = cx
	cx = cx - 0x0001
	SZO = cond(cx)
	ax = fn0C00_000B(cx)
	dx_ax = si * ax
	SCZO = cond(dx_ax)
	// succ:  4
l0C00_001F:		// block 4, pred: 3 2
	return ax
	// succ:  5
fn0C00_000B_exit:		// block 5, pred: 4
	// succ: 
