void fn0C00_0000(Register selector ds)
// MayUse:  ds
// LiveOut:
// Trashed: SCZO ax cx dx al cl dl ah ch dh
// Preserved: sp
// fn0C00_0000
// Return size: 0
// Mem0:Global memory
// fp:fp
// sp:sp
// cx:cx
// ds:ds
// ax:ax
// return address size: 2
void fn0C00_0000(selector ds)
fn0C00_0000_entry:
	// succ:  l0C00_0000
l0C00_0000:
	sp = fp
	cx = 0x0005
	ax = fn0C00_000B(cx)
	Mem0[ds:0x0064:word16] = ax
	return
	// succ:  fn0C00_0000_exit
fn0C00_0000_exit:
Register word16 fn0C00_000B(Register word16 cx)
// MayUse:  cx
// LiveOut: ax
// Trashed: SCZO ax cx dx al cl dl ah ch dh
// Preserved: sp si
// fn0C00_000B
// Return size: 0
// Mem0:Global memory
// fp:fp
// sp:sp
// si:si
// ss:ss
// cx:cx
// SCZO:Flags
// SZO:Flags
// ax:ax
// dx:dx
// dx_ax:Sequence dx:ax
// wLoc02:Local -0002
// return address size: 2
word16 fn0C00_000B(word16 cx)
fn0C00_000B_entry:
	// succ:  l0C00_000B
l0C00_000B:
	sp = fp
	sp = fp - 0x0002
	wLoc02 = si
	SCZO = cond(cx - 0x0001)
	branch Test(LE,SZO) l0C00_001C
	// succ:  l0C00_0011 l0C00_001C
l0C00_0011:
	si = cx
	cx = cx - 0x0001
	SZO = cond(cx)
	ax = fn0C00_000B(cx)
	dx_ax = si *s ax
	SCZO = cond(dx_ax)
	goto l0C00_001F
	// succ:  l0C00_001F
l0C00_001C:
	ax = 0x0001
	// succ:  l0C00_001F
l0C00_001F:
	si = wLoc02
	sp = fp
	return ax
	// succ:  fn0C00_000B_exit
fn0C00_000B_exit:
