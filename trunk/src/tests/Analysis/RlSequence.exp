// fn0C00_0000 /////////////////////
	LiveOut:  
	MayUseIn:  es ss ds
	BypassIn: 
	Trashed:   SCZO ax si di al ah
	Preserved: sp
// fn0C00_0000
void fn0C00_0000()
fn0C00_0000_entry:
// DataOut: es ss ds

// SymbolicIn: sp:fp

fn0C00_0000_exit:
// DataOut:

// SymbolicIn: sp:fp si:0x1234 ax:<invalid> di:<invalid>

l0C00_0000:
	si = 0x1234
	call fn0C00_000B (retsize: 2; depth: 2)
	Mem0[ds:0x4321:word16] = ax
	return
// DataOut:
// SymbolicIn: sp:fp

// fn0C00_000B /////////////////////
	LiveOut:   ax ds
	MayUseIn:  si es ss ds
	BypassIn: 
	Trashed:   SCZO ax di al ah
	Preserved: sp si
// fn0C00_000B
void fn0C00_000B()
fn0C00_000B_entry:
// DataOut: si es ss ds
l0C00_000B:
	sp = fp - 0x0002
	Mem0[ss:fp - 0x0002:word16] = si
	call fn0C00_0026 (retsize: 2;depth: 4)
	di = ax
	Mem0[ds:ax:word16] = 0x0000
	Mem0[ds:ax + 0x0002:word16] = 0x0000
	Mem0[ds:ax + 0x0004:word16] = 0x0000
	call fn0C00_0035 (retsize: 2;depth: 4)
	ax = si
	si = Mem0[ss:fp - 0x0002:word16]
	sp = fp
	return
// DataOut: ax ds

// SymbolicIn: sp:fp

fn0C00_000B_exit:

// DataOut: ax ds
// fn0C00_0026 /////////////////////
	LiveOut:   ax es ds
	MayUseIn:  si ds
	BypassIn: 
	Trashed:   ax al ah
	Preserved: si
// fn0C00_0026
void fn0C00_0026()
fn0C00_0026_entry:
// DataOut: si es ss ds

// SymbolicIn: sp:fp
l0C00_0026:
	sp = fp - 0x0002
	Mem0[ss:fp - 0x0002:word16] = si
	Mem0[ds:si:word16] = 0x0001
	Mem0[ds:si + 0x0002:word16] = 0x0000
	ax = si + 0x0004
	si = Mem0[ss:fp - 0x0002:word16]
	sp = fp
	return
// DataOut: ax es ds
fn0C00_0026_exit:		// pred: l0C00_0026
	// succ: 
// DataOut: ax es ds
// fn0C00_0035 /////////////////////
	LiveOut:   si ss ds
	MayUseIn:  si di es ss ds
	BypassIn: 
	Trashed:   SCZO ax di al ah
	Preserved:	sp
// fn0C00_0035
void fn0C00_0035()
fn0C00_0035_entry:
// DataOut: si di es ss ds
l0C00_0035:
	sp = fp - 0x0002
	Mem0[ss:fp - 0x0002:word16] = di
	v7 = Mem0[ds:si + 0x0002:word16] + 0x0001
	Mem0[ds:si + 0x0002:word16] = v7
	SCZO = cond(v7)	
	ax = Mem0[ds:si + 0x0002:word16]
	ax = ax << 0x0002
	SCZO = cond(ax)	
	di = si + 0x0004 + (ax << 0x0002)
	SCZO = cond(di)
	ax = Mem0[ss:fp - 0x0002:word16]
	sp = fp
	Mem0[es:di:word16] = ax
	di = di + 0x0002
	return
// DataOut: si ss ds

// SymbolicIn: sp:fp

fn0C00_0035_exit:

// DataOut: si ss ds

// SymbolicIn: sp:fp ax:di di:di + 0x0002 -2:di


