Mem0:Global memory (aliases:)
fp:fp (aliases:)
sp:sp (aliases:)
ax:ax (aliases: dx_ax)
ds:ds (aliases:)
dx:dx (aliases: dx_ax)
cx:cx (aliases: es_cx cl bx_cx)
bx:bx (aliases: bx_cx)
SCZO:Flags (aliases: SZO C)
C:Flags (aliases: SCZO)
es:es (aliases: es_cx)
es_cx:Sequence es:cx (aliases: cx es cl)
SZO:Flags (aliases: SCZO)
cl:cl (aliases: cx es_cx bx_cx)
dx_ax:Sequence dx:ax (aliases: ax dx)
bx_cx:Sequence bx:cx (aliases: bx cx cl)
// fn0C00_0000
// Return size: 2
void fn0C00_0000()
fn0C00_0000_entry:
	// succ:  l0C00_0000
l0C00_0000:
	sp = fp
	ax = Mem0[ds:0x0200:word16]
	dx = Mem0[ds:0x0202:word16]
	cx = Mem0[ds:0x0204:word16]
	bx = Mem0[ds:0x0206:word16]
	bx_cx = SEQ(bx, cx) (alias)
	ax = ax + cx
	dx_ax = SEQ(dx, ax) (alias)
	SCZO = cond(ax)
	dx_ax = dx_ax + bx_cx
	ax = (word16) dx_ax (alias)
	dx = SLICE(dx_ax, word16, 16) (alias)
	SCZO = cond(dx_ax)
	Mem0[ds:0x0208:word16] = ax
	Mem0[ds:0x020A:word16] = dx
	ax = Mem0[ds:0x0210:word16]
	dx = Mem0[ds:0x0212:word16]
	es_cx = Mem0[ds:0x0214:segptr32]
	cx = (word16) es_cx (alias)
	es = SLICE(es_cx, selector, 16) (alias)
	bx = es
	bx_cx = SEQ(bx, cx) (alias)
	ax = ax - cx
	dx_ax = SEQ(dx, ax) (alias)
	SCZO = cond(ax)
	Mem0[ds:0x0218:word16] = ax
	dx_ax = dx_ax - bx_cx
	dx = SLICE(dx_ax, word16, 16) (alias)
	SCZO = cond(dx_ax)
	Mem0[ds:0x021A:word16] = dx
	ax = 0x0000
	SZO = cond(0x0000)
	C = false
	cl = Mem0[ds:0x0220:byte]
	SCZO = cond(cl - 0x30)
	C = SCZO (alias)
	ax = 0x0000 + C
	SCZO = cond(ax)
	cl = Mem0[ds:0x0221:byte]
	SCZO = cond(cl - 0x3A)
	C = SCZO (alias)
	C = !C
	ax = ax + ax + C
	SCZO = cond(ax)
	Mem0[ds:0x0222:word16] = ax
	return
	// succ:  fn0C00_0000_exit
fn0C00_0000_exit:

