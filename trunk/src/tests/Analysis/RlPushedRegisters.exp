// fn0C00_0000 /////////////////////
	LiveOut:  
	MayUseIn:  ds
	BypassIn: 
	Trashed:   SCZO ax cx al cl ah ch
	Preserved:
// fn0C00_0000
void fn0C00_0000()
fn0C00_0000_entry:
// DataOut: ds
l0C00_0000:
	cx = 0x002A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = 0x0002
	call fn0C00_0023 (retsize: 2;)
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0C00_0034 (retsize: 2;)
	sp = sp + 0x000C
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = 0x0002
	call fn0C00_005D (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	return
// DataOut:
fn0C00_0000_exit:
	// succ: 
// DataOut:
// fn0C00_0026 /////////////////////
	LiveOut:   ds
	MayUseIn: 
	BypassIn: 
	Trashed:   SCZO ax al ah
	Preserved: cx bp
// fn0C00_0026
void fn0C00_0026()
fn0C00_0026_entry:		// pred:
	// succ:  l0C00_0026
// DataOut: ds
// LocalsOut: Stack +0000(16) Stack +0002(16)

l0C00_0026:		// pred: fn0C00_0026_entry
	wLoc04 = cx
	wLoc06 = bp
	cx = wArg00
	ax = wArg02
	ax = ax + cx
	SCZO = cond(ax)
	bp = wLoc06
	cx = wLoc04
	return
	// succ:  fn0C00_0026_exit
// DataOut: ds
fn0C00_0026_exit:		// pred: l0C00_0026
	// succ: 
// DataOut: ds
// fn0C00_0035 /////////////////////
	LiveOut:  
	MayUseIn:  ds
	BypassIn: 
	Trashed:   SCZO ax al ah
	Preserved: cx dx bx bp
// fn0C00_0035
void fn0C00_0035()
fn0C00_0035_entry:		// pred:
	// succ:  l0C00_0035
// DataOut: ds
// LocalsOut: Stack +0004(16)

l0C00_0035:		// pred: fn0C00_0035_entry
	wLoc04 = bx
	wLoc06 = cx
	wLoc08 = dx
	wLoc0A = bp
	bx = &wArg04
	// succ:  l0C00_003E
// DataOut: bx ds
// LocalsOut: Stack +0004(16)

l0C00_003D:
	ax = Mem0[ds:bx:word16]
	bx = bx + 0x0002
	SCZO = cond(bx)
	SZO = cond(ax & ax)
	C = false
	branch Test(NE,Z) l0C00_003D
	// succ:  l0C00_0046 l0C00_003D
// DataOut: bx ds
// LocalsOut: Stack +0004(16)

l0C00_0046:
	dx = Mem0[ss:bp + 0x000C:word16]
	bx = bx + 0x0002
	SCZO = cond(bx)
	ax = Mem0[ss:bp + 0x000A:word16]
	cx = Mem0[ds:bx - 0x0002:word16]
	bx = bp + 0x000E
	call fn0C00_006A (retsize: 2;)
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	ds = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	cx = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bx = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	return
// DataOut:
fn0C00_0035_exit:
// DataOut:
// fn0C00_005D /////////////////////
	LiveOut:  
	MayUseIn:  cx
	BypassIn: 
	Trashed:   SCZO ax al ah
	Preserved: cx bp
// fn0C00_005D
void fn0C00_005D()
fn0C00_005D_entry:
	// succ:  l0C00_005D
// DataOut: cx
// LocalsOut: Stack +0002(16)

l0C00_005D:		
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	ax = Mem0[ss:bp + 0x0008:word16]
	ax = ax + cx
	SCZO = cond(ax)
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	cx = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	return
// DataOut:
fn0C00_005D_exit:
// DataOut:
// fn0C00_0069 /////////////////////
	LiveOut:  
	MayUseIn:  cx bx ds
	BypassIn: 
	Trashed:  
	Preserved:
// fn0C00_00699
void fn0C00_0069()
fn0C00_0069_entry:
// DataOut: cx bx ds
l0C00_0069:
	Mem0[ds:0x0200:word16] = bx
	Mem0[ds:0x0300:word16] = cx
	return
	// succ:  fn0C00_006A_exit
// DataOut:
fn0C00_006A_exit:
// DataOut:
