// fn0C00_0000 /////////////////////
	LiveOut:  
	MayUseIn:  ds
	BypassIn: 
	Trashed:   SCZO ax cx al cl ah ch
	Preserved:
// fn0C00_0000
void fn0C00_0000()
fn0C00_0000_entry:		// pred:
	// succ:  l0C00_0000
// DataOut: ds
l0C00_0000:		// pred: fn0C00_0000_entry
	cx = 0x002A
	wLoc04 = 0x0001
	wLoc06 = 0x0002
	call fn0C00_0026 (depth: 6;)
	ax = 0x0000
	wLoc04 = ax
	wLoc06 = ax
	wLoc08 = ax
	wLoc0A = ax
	wLoc0C = ax
	wLoc0E = ax
	call fn0C00_0035 (depth: 14;)
	wLoc04 = 0x0001
	wLoc06 = 0x0002
	call fn0C00_005E (depth: 6;)
	return
	// succ:  fn0C00_0000_exit
// DataOut:
fn0C00_0000_exit:		// pred: l0C00_0000
	// succ: 
// DataOut:
// fn0C00_0026 /////////////////////
	LiveOut:   ds
	MayUseIn: 
	BypassIn: 
	Trashed:   SCZO ax al ah
	Preserved: cx bp
// fn0C00_0026
void fn0C00_0026()
fn0C00_0026_entry:		// pred:
	// succ:  l0C00_0026
// DataOut: ds
// LocalsOut: Stack +0000(16) Stack +0002(16)

l0C00_0026:		// pred: fn0C00_0026_entry
	wLoc04 = cx
	wLoc06 = bp
	cx = wArg00
	ax = wArg02
	ax = ax + cx
	SCZO = cond(ax)
	bp = wLoc06
	cx = wLoc04
	return
	// succ:  fn0C00_0026_exit
// DataOut: ds
fn0C00_0026_exit:		// pred: l0C00_0026
	// succ: 
// DataOut: ds
// fn0C00_0035 /////////////////////
	LiveOut:  
	MayUseIn:  ds
	BypassIn: 
	Trashed:   SCZO ax al ah
	Preserved: cx dx bx bp
// fn0C00_0035
void fn0C00_0035()
fn0C00_0035_entry:		// pred:
	// succ:  l0C00_0035
// DataOut: ds
// LocalsOut: Stack +0004(16)

l0C00_0035:		// pred: fn0C00_0035_entry
	wLoc04 = bx
	wLoc06 = cx
	wLoc08 = dx
	wLoc0A = bp
	bx = &wArg04
	// succ:  l0C00_003E
// DataOut: bx ds
// LocalsOut: Stack +0004(16)

l0C00_003E:		// pred: l0C00_0035 l0C00_003E
	ax = Mem0[ds:bx:word16]
	bx = bx + 0x0002
	SCZO = cond(ax - 0x0000)
	C = false
	branch Test(NE,Z) l0C00_003E
	// succ:  l0C00_0047 l0C00_003E
// DataOut: bx ds
// LocalsOut: Stack +0004(16)

l0C00_0047:		// pred: l0C00_003E
	dx = wArg02
	bx = bx + 0x0002
	SCZO = cond(bx)
	ax = wArg00
	cx = Mem0[ds:bx - 0x0002:word16]
	bx = &wArg04
	call fn0C00_006A (depth: 10;)
	bp = wLoc0A
	dx = wLoc08
	cx = wLoc06
	bx = wLoc04
	return
	// succ:  fn0C00_0035_exit
// DataOut:
fn0C00_0035_exit:		// pred: l0C00_0047
	// succ: 
// DataOut:
// fn0C00_005E /////////////////////
	LiveOut:  
	MayUseIn:  cx
	BypassIn: 
	Trashed:   SCZO ax al ah
	Preserved: cx bp
// fn0C00_005E
void fn0C00_005E()
fn0C00_005E_entry:		// pred:
	// succ:  l0C00_005E
// DataOut: cx
// LocalsOut: Stack +0002(16)

l0C00_005E:		// pred: fn0C00_005E_entry
	wLoc04 = cx
	wLoc06 = bp
	ax = wArg02
	ax = ax + cx
	SCZO = cond(ax)
	bp = wLoc06
	cx = wLoc04
	return
	// succ:  fn0C00_005E_exit
// DataOut:
fn0C00_005E_exit:		// pred: l0C00_005E
	// succ: 
// DataOut:
// fn0C00_006A /////////////////////
	LiveOut:  
	MayUseIn:  cx bx ds
	BypassIn: 
	Trashed:  
	Preserved:
// fn0C00_006A
void fn0C00_006A()
fn0C00_006A_entry:		// pred:
	// succ:  l0C00_006A
// DataOut: cx bx ds
l0C00_006A:		// pred: fn0C00_006A_entry
	store(Mem0[ds:0x0200:word16]) = bx
	store(Mem0[ds:0x0300:word16]) = cx
	return
	// succ:  fn0C00_006A_exit
// DataOut:
fn0C00_006A_exit:		// pred: l0C00_006A
	// succ: 
// DataOut:
