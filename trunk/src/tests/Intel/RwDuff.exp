// fn0C00_0000
// Mem0:Global memory
// fp:Temporary
// ds:Register ds
// bx:Register bx
// cx:Register cx
// SZO:Flags
// C:Flags
// si:Register si
// SCZO:Flags
// di:Register di
// v10:Temporary
// es:Register es
// v12:Temporary
// v13:Temporary
// v14:Temporary
// v15:Temporary
// v16:Temporary
// v17:Temporary
// v18:Temporary
// v19:Temporary
// v20:Temporary
// v21:Temporary
// v22:Temporary
// v23:Temporary
// v24:Temporary
// v25:Temporary
// return address size: 2
void fn0C00_0000()
fn0C00_0000_entry:
l0C00_0000:
	bx = Mem0[ds:0x003E:word16]
	cx = Mem0[ds:0x003E:word16]
	bx = bx & 0x0007
	SZO = cond(bx)
	C = false
	si = Mem0[ds:0x0040:word16]
	bx = bx + bx
	SCZO = cond(bx)
	cx = cx + 0x0007
	SCZO = cond(cx)
	di = Mem0[ds:0x0042:word16]
	cx = cx >>u 0x0003
	SCZO = cond(cx)
	switch (bx) { l0C00_0020 l0C00_0027 l0C00_0026 l0C00_0025 l0C00_0024 l0C00_0023 l0C00_0022 l0C00_0021 }
l0C00_0020:
	v10 = Mem0[ds:si:word16]
	store(Mem0[es:di:word16]) = v10
	si = si + 0x0002
	di = di + 0x0002
l0C00_0021:
	v16 = Mem0[ds:si:word16]
	store(Mem0[es:di:word16]) = v16
	si = si + 0x0002
	di = di + 0x0002
l0C00_0022:
	v18 = Mem0[ds:si:word16]
	store(Mem0[es:di:word16]) = v18
	si = si + 0x0002
	di = di + 0x0002
l0C00_0023:
	v20 = Mem0[ds:si:word16]
	store(Mem0[es:di:word16]) = v20
	si = si + 0x0002
	di = di + 0x0002
l0C00_0024:
	v22 = Mem0[ds:si:word16]
	store(Mem0[es:di:word16]) = v22
	si = si + 0x0002
	di = di + 0x0002
l0C00_0025:
	v14 = Mem0[ds:si:word16]
	store(Mem0[es:di:word16]) = v14
	si = si + 0x0002
	di = di + 0x0002
l0C00_0026:
	v24 = Mem0[ds:si:word16]
	store(Mem0[es:di:word16]) = v24
	si = si + 0x0002
	di = di + 0x0002
l0C00_0027:
	v13 = Mem0[ds:si:word16]
	store(Mem0[es:di:word16]) = v13
	si = si + 0x0002
	di = di + 0x0002
	cx = cx - 0x0001
	SZO = cond(cx)
	branch Test(GT,SZO) l0C00_0020
l0C00_002B:
	return
fn0C00_0000_exit:
