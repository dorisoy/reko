// fn0C00_0000
// Mem0:Global memory
// fp:Temporary
// ds:Register ds
// bx:Register bx
// cx:Register cx
// C:Flags
// si:Register si
// di:Register di
// SCZO:Flags
// v9:Temporary
// es:Register es
// v11:Temporary
// v12:Temporary
// v13:Temporary
// v14:Temporary
// v15:Temporary
// v16:Temporary
// SZO:Flags
// v18:Temporary
// return address size: 2
void fn0C00_0000()
fn0C00_0000_entry:		// pred:
	// succ:  l0C00_0000
l0C00_0000:		// pred: fn0C00_0000_entry
	bx = Mem0[ds:0x003E:word16]
	cx = Mem0[ds:0x003E:word16]
	bx = bx & 0x0007
	C = false
	si = Mem0[ds:0x0040:word16]
	bx = bx + bx
	cx = cx + 0x0007
	di = Mem0[ds:0x0042:word16]
	cx = cx >>u 0x0003
	SCZO = cond(cx)
	switch (bx) { l0C00_0020 l0C00_0027 l0C00_0026 l0C00_0025 l0C00_0024 l0C00_0023 l0C00_0022 l0C00_0021 }
	// succ:  l0C00_0020 l0C00_0027 l0C00_0026 l0C00_0025 l0C00_0024 l0C00_0023 l0C00_0022 l0C00_0021
l0C00_0020:		// pred: l0C00_0000 l0C00_0027
	v18 = Mem0[ds:si:word16]
	store(Mem0[es:di:word16]) = v18
	si = si + 0x0002
	di = di + 0x0002
	// succ:  l0C00_0021
l0C00_0021:		// pred: l0C00_0000 l0C00_0020
	v9 = Mem0[ds:si:word16]
	store(Mem0[es:di:word16]) = v9
	si = si + 0x0002
	di = di + 0x0002
	// succ:  l0C00_0022
l0C00_0022:		// pred: l0C00_0000 l0C00_0021
	v11 = Mem0[ds:si:word16]
	store(Mem0[es:di:word16]) = v11
	si = si + 0x0002
	di = di + 0x0002
	// succ:  l0C00_0023
l0C00_0023:		// pred: l0C00_0000 l0C00_0022
	v12 = Mem0[ds:si:word16]
	store(Mem0[es:di:word16]) = v12
	si = si + 0x0002
	di = di + 0x0002
	// succ:  l0C00_0024
l0C00_0024:		// pred: l0C00_0000 l0C00_0023
	v13 = Mem0[ds:si:word16]
	store(Mem0[es:di:word16]) = v13
	si = si + 0x0002
	di = di + 0x0002
	// succ:  l0C00_0025
l0C00_0025:		// pred: l0C00_0000 l0C00_0024
	v14 = Mem0[ds:si:word16]
	store(Mem0[es:di:word16]) = v14
	si = si + 0x0002
	di = di + 0x0002
	// succ:  l0C00_0026
l0C00_0026:		// pred: l0C00_0000 l0C00_0025
	v15 = Mem0[ds:si:word16]
	store(Mem0[es:di:word16]) = v15
	si = si + 0x0002
	di = di + 0x0002
	// succ:  l0C00_0027
l0C00_0027:		// pred: l0C00_0000 l0C00_0026
	v16 = Mem0[ds:si:word16]
	store(Mem0[es:di:word16]) = v16
	si = si + 0x0002
	di = di + 0x0002
	cx = cx - 0x0001
	SZO = cond(cx)
	branch Test(GT,SZO) l0C00_0020
	// succ:  l0C00_002B l0C00_0020
l0C00_002B:		// pred: l0C00_0027
	return
	// succ:  fn0C00_0000_exit
fn0C00_0000_exit:		// pred: l0C00_002B
	// succ: 
