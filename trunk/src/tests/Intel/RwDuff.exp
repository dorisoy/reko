// fn0C00_0000
// Mem0:Global memory
// fp:Temporary
// ds:Register ds
// bx:Register bx
// cx:Register cx
// C:Flags
// si:Register si
// di:Register di
// SCZO:Flags
// v9:Temporary
// es:Register es
// v11:Temporary
// v12:Temporary
// v13:Temporary
// v14:Temporary
// v15:Temporary
// v16:Temporary
// v17:Temporary
// SZO:Flags
// return address size: 2
void fn0C00_0000()
fn0C00_0000_entry:		// block 0, pred:
	// succ:  1
l0C00_0000:		// block 1, pred: 0
	bx = Mem0[ds:0x003E:word16]
	cx = Mem0[ds:0x003E:word16]
	bx = bx & 0x0007
	C = false
	si = Mem0[ds:0x0040:word16]
	bx = bx + bx
	cx = cx + 0x0007
	di = Mem0[ds:0x0042:word16]
	cx = cx >>u 0x0003
	SCZO = cond(cx)
	switch (bx) { 2 9 8 7 6 5 4 3 }
	// succ:  2 9 8 7 6 5 4 3
l0C00_0020:		// block 2, pred: 1 9
	v9 = Mem0[ds:si:word16]
	store(Mem0[es:di:word16]) = v9
	si = si + 0x0002
	di = di + 0x0002
	// succ:  3
l0C00_0021:		// block 3, pred: 2 1
	v11 = Mem0[ds:si:word16]
	store(Mem0[es:di:word16]) = v11
	si = si + 0x0002
	di = di + 0x0002
	// succ:  4
l0C00_0022:		// block 4, pred: 3 1
	v12 = Mem0[ds:si:word16]
	store(Mem0[es:di:word16]) = v12
	si = si + 0x0002
	di = di + 0x0002
	// succ:  5
l0C00_0023:		// block 5, pred: 4 1
	v13 = Mem0[ds:si:word16]
	store(Mem0[es:di:word16]) = v13
	si = si + 0x0002
	di = di + 0x0002
	// succ:  6
l0C00_0024:		// block 6, pred: 5 1
	v14 = Mem0[ds:si:word16]
	store(Mem0[es:di:word16]) = v14
	si = si + 0x0002
	di = di + 0x0002
	// succ:  7
l0C00_0025:		// block 7, pred: 6 1
	v15 = Mem0[ds:si:word16]
	store(Mem0[es:di:word16]) = v15
	si = si + 0x0002
	di = di + 0x0002
	// succ:  8
l0C00_0026:		// block 8, pred: 7 1
	v16 = Mem0[ds:si:word16]
	store(Mem0[es:di:word16]) = v16
	si = si + 0x0002
	di = di + 0x0002
	// succ:  9
l0C00_0027:		// block 9, pred: 8 1
	v17 = Mem0[ds:si:word16]
	store(Mem0[es:di:word16]) = v17
	si = si + 0x0002
	di = di + 0x0002
	cx = cx - 0x0001
	SZO = cond(cx)
	branch Test(GT,SZO) l0C00_0020
	// succ:  10 2
l0C00_002B:		// block 10, pred: 9
	return
	// succ:  11
fn0C00_0000_exit:		// block 11, pred: 10
	// succ: 
