// fn0C00_0000
// Mem0:Global memory
// fp:Temporary
// ds:Register
// ax:Register
// dx:Register
// dx_ax:Sequence dx:ax
// SCZO:Flags
// si:Register
// bx:Register
// cx:Register
// bx_cx:Sequence bx:cx
// edx:Register
// eax:Register
// edx_eax:Sequence edx:eax
// return address size: 2
void fn0C00_0000()
fn0C00_0000_entry:		// block 0, pred:
	// succ:  1
l0C00_0000:		// block 1, pred: 0
	ax = Mem0[ds:0x0300:word16]
	dx = Mem0[ds:0x0302:word16]
	dx_ax = dx_ax + Mem0[ds:0x0304:word32]
	SCZO = cond(dx_ax)
	ax = Mem0[ds:si + 0x0308:word16]
	dx_ax = dx_ax + bx_cx
	SCZO = cond(dx_ax)
	dx = Mem0[ds:si + 0x030A:word16]
	store(Mem0[ds:0x0200:word64]) = Mem0[ds:0x0200:word64] + edx_eax
	SCZO = cond(Mem0[ds:0x0200:word64])
	cx = Mem0[ds:si + 0x030C:word16]
	dx_ax = dx_ax - bx_cx
	SCZO = cond(dx_ax)
	bx = Mem0[ds:si + 0x030E:word16]
	return
	// succ:  2
fn0C00_0000_exit:		// block 2, pred: 1
	// succ: 

