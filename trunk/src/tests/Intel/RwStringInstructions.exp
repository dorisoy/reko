// fn0C00_0000
// Mem0:Global memory
// fp:Temporary
// eax:Register
// ds:Register
// si:Register
// ax:Register
// return address size: 2
void fn0C00_0000()
fn0C00_0000_entry:		// block 0, pred:
	// succ:  1
l0C00_0000:		// block 1, pred: 0
	eax = eax + eax * 0x00000004
	store(Mem0[ds:0x02FC:word32]) = eax
	eax = Mem0[ds:si:word32]
	si = si + 0x0004
	store(Mem0[ds:0x0300:word32]) = eax
	eax = Mem0[ds:si:word32]
	si = si + 0x0004
	store(Mem0[ds:0x0304:word32]) = eax
	ax = Mem0[ds:si:word16]
	si = si + 0x0002
	store(Mem0[ds:0x0308:word16]) = ax
	ax = Mem0[ds:si:word16]
	si = si + 0x0002
	store(Mem0[ds:0x030A:word16]) = ax
	call fn0C00_0026 (depth: 0;)
	return
	// succ:  2
fn0C00_0000_exit:		// block 2, pred: 1
	// succ: 
// fn0C00_0026
// Mem0:Global memory
// fp:Temporary
// ds:Register
// cx:Register
// al:Register
// di:Register
// v6:Temporary
// SCZO:Flags
// es:Register
// Z:Flags
// return address size: 2
void fn0C00_0026()
fn0C00_0026_entry:		// block 0, pred:
	// succ:  1
l0C00_0026:		// block 1, pred: 0
	cx = Mem0[ds:0x0400:word16]
	al = 0x00
	di = Mem0[ds:0x0402:word16]
	// succ:  2
l0C00_0030:		// block 2, pred: 1 3
	branch cx == 0x0000
	// succ:  4 3
l0C00_0030_rep:		// block 3, pred: 2
	cx = cx - 0x0001
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 0x0001
	branch Test(EQ,Z)
	// succ:  4 2
l0C00_0032:		// block 4, pred: 2 3
	store(Mem0[ds:0x0404:word16]) = di
	return
	// succ:  5
fn0C00_0026_exit:		// block 5, pred: 4
	// succ: 
