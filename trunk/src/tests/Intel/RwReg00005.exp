// fn0C00_0000
// Mem0:Global memory
// fp:Temporary
// bx:Register
// ds:Register
// cl:Register
// return address size: 2
void fn0C00_0000()
fn0C00_0000_entry:		// block 0, pred:
	// succ:  1
l0C00_0000:		// block 1, pred: 0
	call fn0C00_000C (depth: 0;)
	store(Mem0[ds:0x0300:word16]) = bx
	store(Mem0[ds:0x0302:byte]) = cl
	return
	// succ:  2
fn0C00_0000_exit:		// block 2, pred: 1
	// succ: 

// fn0C00_000C
// Mem0:Global memory
// fp:Temporary
// ds:Register
// cx:Register
// es:Register
// di:Register
// al:Register
// SCZO:Flags
// v8:Temporary
// Z:Flags
// ah:Register
// ax:Register
// bx:Register
// cl:Register
// return address size: 2
void fn0C00_000C()
fn0C00_000C_entry:		// block 0, pred:
	// succ:  1
l0C00_000C:		// block 1, pred: 0
	cx = ds
	es = cx
	di = 0x7E0F
	cx = 0x000C
	al = 0x00
	SCZO = cond(al)
	// succ:  2
l0C00_0019:		// block 2, pred: 1 3
	branch cx == 0x0000
	// succ:  4 3
l0C00_0019_rep:		// block 3, pred: 2
	cx = cx - 0x0001
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 0x0001
	branch Test(EQ,Z)
	// succ:  4 2
l0C00_001B:		// block 4, pred: 2 3
	branch Test(EQ,Z)
	// succ:  6 5
l0C00_002D:		// block 5, pred: 4
	bx = 0x0000
	cl = 0x00
	SCZO = cond(cl)
	return
	// succ:  7
l0C00_001D:		// block 6, pred: 4
	ah = Mem0[ds:di + 0x0001:byte]
	cx = __bsr(ax)
	Z = ax == 0x0000
	cx = cx - 0x0008
	bx = di
	bx = bx - 0x7E03
	SCZO = cond(bx)
	return
	// succ:  7
fn0C00_000C_exit:		// block 7, pred: 6 5
	// succ: 

