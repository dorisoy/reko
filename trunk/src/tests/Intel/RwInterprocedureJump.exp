// fn0C00_0000
// Mem0:Global memory
// fp:Temporary
// bx:Register
// return address size: 2
void fn0C00_0000()
fn0C00_0000_entry:		// block 0, pred:
	// succ:  1
l0C00_0000:		// block 1, pred: 0
	bx = 0x1234
	call fn0C00_000C (depth: 0;)
	bx = 0x5678
	call fn0C00_0018 (depth: 0;)
	call fn0C00_000C (depth: 0;)
	return
	// succ:  2
fn0C00_0000_exit:		// block 2, pred: 1
	// succ: 
// fn0C00_000C
// Mem0:Global memory
// fp:Temporary
// bx:Register
// ds:Register
// SCZO:Flags
// SZO:Flags
// ax:Register
// return address size: 2
void fn0C00_000C()
fn0C00_000C_entry:		// block 0, pred:
	// succ:  1
l0C00_000C:		// block 1, pred: 0
	SCZO = cond(Mem0[ds:bx:word16] - 0x007B)
	branch Test(LE,SZO)
	// succ:  3 2
l0C00_000F_branch:		// block 2, pred: 1
	call fn0C00_0014 (depth: 0;)
	return
	// succ:  4
l0C00_0011:		// block 3, pred: 1
	ax = 0x0000
	SCZO = cond(ax)
	return
	// succ:  4
fn0C00_000C_exit:		// block 4, pred: 3 2
	// succ: 
// fn0C00_0014
// Mem0:Global memory
// fp:Temporary
// bx:Register
// ds:Register
// ax:Register
// SZO:Flags
// return address size: 2
void fn0C00_0014()
fn0C00_0014_entry:		// block 0, pred:
	// succ:  1
l0C00_0014:		// block 1, pred: 0
	ax = Mem0[ds:bx:word16]
	ax = ax + 0x0001
	SZO = cond(ax)
	return
	// succ:  2
fn0C00_0014_exit:		// block 2, pred: 1
	// succ: 
// fn0C00_0018
// Mem0:Global memory
// fp:Temporary
// bx:Register
// SCZO:Flags
// return address size: 2
void fn0C00_0018()
fn0C00_0018_entry:		// block 0, pred:
	// succ:  1
l0C00_0018:		// block 1, pred: 0
	bx = bx + 0x0004
	SCZO = cond(bx)
	call fn0C00_0014 (depth: 0;)
	return
	// succ:  2
fn0C00_0018_exit:		// block 2, pred: 1
	// succ: 
