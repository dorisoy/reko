// fn0C00_0000
// Mem0:Global memory
// fp:Temporary
// sp:Register sp
// ss:Register ss
// SCZO:Flags
// return address size: 2
void fn0C00_0000()
fn0C00_0000_entry:
l0C00_0000:
	sp = sp - 0x0002
	store(Mem0[ss:sp:word16]) = 0x0320
	sp = sp - 0x0002
	store(Mem0[ss:sp:word16]) = 0x0300
	call fn0C00_0010 (depth: 0;)
	call fn0C00_0037 (depth: 0;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	return
fn0C00_0000_exit:

// fn0C00_0010
// Mem0:Global memory
// fp:Temporary
// bp:Register bp
// sp:Register sp
// ss:Register ss
// bx:Register bx
// rLoc1:FPU stack
// ds:Register ds
// rLoc2:FPU stack
// return address size: 2
void fn0C00_0010()
fn0C00_0010_entry:
l0C00_0010:
	sp = sp - 0x0002
	store(Mem0[ss:sp:word16]) = bp
	bp = sp
	bx = Mem0[ss:bp + 0x0004:word16]
	rLoc1 = Mem0[ds:bx:real64]
	rLoc1 = rLoc1 *s rLoc1
	rLoc2 = Mem0[ds:bx + 0x0008:real64]
	rLoc2 = rLoc2 *s rLoc2
	rLoc1 = rLoc1 + rLoc2
	rLoc2 = Mem0[ds:bx + 0x0010:real64]
	rLoc2 = rLoc2 *s rLoc2
	rLoc1 = rLoc1 + rLoc2
	bx = Mem0[ss:bp + 0x0006:word16]
	store(Mem0[ds:bx:real64]) = rLoc1
	rLoc1 = (real64) Mem0[ds:bx + 0x0020:int16]
	store(Mem0[ds:bx + 0x0028:real64]) = rLoc1
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	return
fn0C00_0010_exit:

// fn0C00_0037
// Mem0:Global memory
// fp:Temporary
// rLoc1:FPU stack
// ds:Register ds
// return address size: 2
void fn0C00_0037()
fn0C00_0037_entry:
l0C00_0037:
	rLoc1 = 0
	store(Mem0[ds:0x0400:real64]) = rLoc1
	rLoc1 = 1
	store(Mem0[ds:0x0408:int32]) = (int32) rLoc1
	return
fn0C00_0037_exit:

