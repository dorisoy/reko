// fn0C00_0000
// Mem0:Global memory
// fp:Temporary
// cx:Register cx
// sp:Register sp
// ss:Register ss
// SCZO:Flags
// ax:Register ax
// ds:Register ds
// return address size: 2
void fn0C00_0000()
fn0C00_0000_entry:
l0C00_0000:
	cx = 0x0064
	sp = sp - 0x0002
	store(Mem0[ss:sp:word16]) = cx
	call fn0C00_000F (retsize: 2;)
	sp = sp + 0x0002
	SCZO = cond(sp)
	store(Mem0[ds:0x0064:word16]) = ax
	return
fn0C00_0000_exit:
// fn0C00_000F
// Mem0:Global memory
// fp:Temporary
// bp:Register bp
// sp:Register sp
// ss:Register ss
// ax:Register ax
// SZO:Flags
// Z:Flags
// dx:Register dx
// dx_ax:Sequence dx:ax
// SCZO:Flags
// return address size: 2
void fn0C00_000F()
fn0C00_000F_entry:
l0C00_000F:
	sp = sp - 0x0002
	store(Mem0[ss:sp:word16]) = bp
	bp = sp
	ax = Mem0[ss:bp + 0x0004:word16]
	ax = ax - 0x0001
	SZO = cond(ax)
	branch Test(EQ,Z) l0C00_0026
l0C00_0018:
	sp = sp - 0x0002
	store(Mem0[ss:sp:word16]) = ax
	call fn0C00_000F (retsize: 2;)
	sp = sp + 0x0001
	SZO = cond(sp)
	sp = sp + 0x0001
	SZO = cond(sp)
	dx = Mem0[ss:bp + 0x0004:word16]
	dx_ax = dx *s ax
	SCZO = cond(dx_ax)
	goto l0C00_0029
l0C00_0026:
	ax = 0x0001
l0C00_0029:
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	return
fn0C00_000F_exit:
