// fn10000000
// Mem0:Global memory
// fp:Temporary
// esp:esp
// ebx:ebx
// ebp:ebp
// esi:esi
// edi:edi
// di:di
// bl:bl
// SZO:Flags
// C:Flags
// Z:Flags
// eax:eax
// SCZO:Flags
// ecx:ecx
// bp:bp
// edx:edx
// cx:cx
// dx:dx
// ax:ax
// return address size: 4
void fn10000000()
fn10000000_entry:
	// succ:  l10000000
l10000000:
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	di = Mem0[esp + 0x00000014:word16]
	bl = bl ^ bl
	SZO = cond(bl)
	C = false
	SZO = cond(di & di)
	C = false
	branch Test(NE,Z) l10000021
	// succ:  l10000010 l10000021
l10000010:
	Mem0[0x1006B8E0:byte] = 0x00
	call fn100002A8 (retsize: 4;)
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn10000000_exit
l10000021:
	eax = Mem0[esp + 0x0000001C:word32]
	SCZO = cond(Mem0[eax:word32] - 0x00000000)
	branch Test(NE,Z) l1000002C
	// succ:  l1000002A l1000002C
l1000002A:
	bl = 0x01
	// succ:  l1000002C
l1000002C:
	ebp = Mem0[esp + 0x00000020:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x1000A700
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	eax = Mem0[esp + 0x00000020:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00003158
	ecx = Mem0[eax + 0x000000D0:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	call fn10000277 (retsize: 4;)
	esi = eax
	esp = esp + 0x00000018
	SCZO = cond(esp)
	SZO = cond(esi & esi)
	C = false
	branch Test(NE,Z) l10000061
	// succ:  l10000056 l10000061
l10000056:
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	Mem0[ebp + 0x00000000:word16] = 0xFF94
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn10000000_exit
l10000061:
	SCZO = cond(di - 0x0001)
	branch Test(NE,Z) l1000006D
	// succ:  l10000067 l1000006D
l10000067:
	Mem0[esi + 0x00000204:byte] = bl
	// succ:  l1000006D
l1000006D:
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn1000023D (retsize: 4;)
	eax = Mem0[esi:word32]
	ebp = ebp ^ ebp
	SZO = cond(ebp)
	C = false
	esp = esp + 0x00000004
	SCZO = cond(esp)
	SCZO = cond(Mem0[eax:word16] - bp)
	branch Test(NE,Z) l1000022E
	// succ:  l10000083 l1000022E
l10000083:
	SCZO = cond(di - bp)
	branch Test(LE,SZO) l1000020C
	// succ:  l1000008C l1000020C
l1000008C:
	SCZO = cond(di - 0x0005)
	branch Test(GT,SZO) l1000020C
	// succ:  l10000096 l1000020C
l10000096:
	SCZO = cond(di - 0x0001)
	branch Test(NE,Z) l100000BC
	// succ:  l100000A0 l100000BC
l100000A0:
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn1000023D (retsize: 4;)
	edx = Mem0[esi + 0x00000004:word32]
	esp = esp + 0x00000004
	SCZO = cond(esp)
	eax = Mem0[edx + 0x0000000C:word32]
	ecx = Mem0[eax:word32]
	Mem0[ecx:word32] = 0x00000001
	goto l10000211
	// succ:  l10000211
l100000BC:
	SCZO = cond(di - 0x0002)
	branch Test(NE,Z) l10000132
	// succ:  l100000C2 l10000132
l100000C2:
	edx = Mem0[esi + 0x00000004:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	Mem0[edx + 0x00000030:word32] = ebp
	call fn1000023D (retsize: 4;)
	eax = Mem0[esi + 0x00000004:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000001
	Mem0[eax + 0x00000030:word32] = ebp
	eax = Mem0[esi + 0x00000004:word32]
	eax = eax + 0x00000010
	SCZO = cond(eax)
	cx = Mem0[eax + 0x00000002:word16]
	Mem0[esi + 0x000000B4:word16] = cx
	dx = Mem0[eax:word16]
	Mem0[esi + 0x000000B2:word16] = dx
	cx = Mem0[eax + 0x00000006:word16]
	Mem0[esi + 0x000000B8:word16] = cx
	// succ:  l100000F8
l100000F8:
	dx = Mem0[eax + 0x00000004:word16]
	Mem0[esi + 0x000000B6:word16] = dx
	eax = Mem0[esi + 0x00000004:word32]
	eax = eax + 0x00000010
	SCZO = cond(eax)
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn10000260 (retsize: 4;)
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn1000025B (retsize: 4;)
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn10000269 (retsize: 4;)
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn10000242 (retsize: 4;)
	esp = esp + 0x0000001C
	SCZO = cond(esp)
	goto l10000211
	// succ:  l10000211
l10000132:
	SCZO = cond(di - 0x0003)
	branch Test(NE,Z) l10000146
	// succ:  l10000138 l10000146
l10000138:
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn10000233 (retsize: 4;)
	esp = esp + 0x00000004
	SCZO = cond(esp)
	goto l10000211
	// succ:  l10000211
l10000146:
	SCZO = cond(di - 0x0004)
	branch Test(NE,Z) l100000F8
	// succ:  l1000014C l100000F8
l1000014C:
	ecx = Mem0[esi + 0x00000004:word32]
	SCZO = cond(Mem0[ecx + 0x000000E0:word32] - ebp)
	bl = Test(NE,Z)
	// succ:  l10000158
l10000158:
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn10000251 (retsize: 4;)
	eax = Mem0[esi:word32]
	esp = esp + 0x00000004
	SCZO = cond(esp)
	SCZO = cond(Mem0[eax:word16] - bp)
	branch Test(EQ,Z) l1000016F
	// succ:  l10000168 l1000016F
l10000168:
	Mem0[esi + 0x000000AC:byte] = 0x00
	// succ:  l1000016F
l1000016F:
	SCZO = cond(Mem0[esi + 0x000000AD:byte] - 0x01)
	branch Test(NE,Z) l1000017D
	// succ:  l10000178 l1000017D
l10000178:
	SCZO = cond(Mem0[eax:word16] - bp)
	branch Test(EQ,Z) l10000158
	// succ:  l1000017D l10000158
l1000017D:
	SCZO = cond(Mem0[eax:word16] - bp)
	branch Test(NE,Z) l1000018B
	// succ:  l10000182 l1000018B
l10000182:
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn10000238 (retsize: 4;)
	esp = esp + 0x00000004
	SCZO = cond(esp)
	// succ:  l1000018B
l1000018B:
	SCZO = cond(Mem0[esi + 0x000000AC:byte] - 0x01)
	branch Test(NE,Z) l100001B2
	// succ:  l10000194 l100001B2
l10000194:
	SZO = cond(bl & bl)
	C = false
	branch Test(EQ,Z) l10000211
	// succ:  l10000198 l10000211
l10000198:
	edx = Mem0[esi + 0x00000004:word32]
	icall Mem0[edx + 0x000000E0:word32]
	ecx = Mem0[esi:word32]
	Mem0[ecx:word16] = ax
	edx = Mem0[esi:word32]
	SCZO = cond(Mem0[edx:word16] - bp)
	branch Test(NE,Z) l10000211
	// succ:  l100001AD l10000211
l100001AD:
	goto l10000158
	// succ:  l10000158
l100001B2:
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn1000024C (retsize: 4;)
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn10000256 (retsize: 4;)
	eax = Mem0[esi + 0x00000004:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	eax = eax + 0x00000034
	SCZO = cond(eax)
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	call fn100002A9 (retsize: 4;)
	ecx = Mem0[esi + 0x00000004:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	ecx = ecx + 0x00000040
	SCZO = cond(ecx)
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	call fn100002A9 (retsize: 4;)
	edx = Mem0[esi + 0x00000004:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	edx = edx + 0x00000060
	SCZO = cond(edx)
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	call fn100002A9 (retsize: 4;)
	esp = esp + 0x00000044
	SCZO = cond(esp)
	goto l10000211
	// succ:  l10000211
l1000020C:
	Mem0[eax:word16] = 0x8A6C
	// succ:  l10000211
l10000211:
	eax = Mem0[esp + 0x0000001C:word32]
	eax = Mem0[eax:word32]
	SCZO = cond(eax - ebp)
	branch Test(EQ,Z) l1000022E
	// succ:  l1000021B l1000022E
l1000021B:
	ecx = Mem0[esi + 0x00000004:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	edx = Mem0[ecx + 0x000000D0:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	call fn1000026E (retsize: 4;)
	esp = esp + 0x00000008
	SCZO = cond(esp)
	// succ:  l1000022E
l1000022E:
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn10000000_exit
fn10000000_exit:

// fn10000233
// Mem0:Global memory
// fp:Temporary
// esp:esp
// eax:eax
// return address size: 4
void fn10000233()
fn10000233_entry:
	// succ:  l10000233
l10000233:
	eax = Mem0[esp + 0x00000004:word32]
	return
	// succ:  fn10000233_exit
fn10000233_exit:

// fn10000238
// Mem0:Global memory
// fp:Temporary
// esp:esp
// eax:eax
// return address size: 4
void fn10000238()
fn10000238_entry:
	// succ:  l10000238
l10000238:
	eax = Mem0[esp + 0x00000004:word32]
	return
	// succ:  fn10000238_exit
fn10000238_exit:

// fn1000023D
// Mem0:Global memory
// fp:Temporary
// esp:esp
// eax:eax
// return address size: 4
void fn1000023D()
fn1000023D_entry:
	// succ:  l1000023D
l1000023D:
	eax = Mem0[esp + 0x00000004:word32]
	return
	// succ:  fn1000023D_exit
fn1000023D_exit:

// fn10000242
// Mem0:Global memory
// fp:Temporary
// esp:esp
// eax:eax
// return address size: 4
void fn10000242()
fn10000242_entry:
	// succ:  l10000242
l10000242:
	eax = Mem0[esp + 0x00000004:word32]
	return
	// succ:  fn10000242_exit
fn10000242_exit:

// fn1000024C
// Mem0:Global memory
// fp:Temporary
// esp:esp
// eax:eax
// return address size: 4
void fn1000024C()
fn1000024C_entry:
	// succ:  l1000024C
l1000024C:
	eax = Mem0[esp + 0x00000004:word32]
	return
	// succ:  fn1000024C_exit
fn1000024C_exit:

// fn10000251
// Mem0:Global memory
// fp:Temporary
// esp:esp
// eax:eax
// return address size: 4
void fn10000251()
fn10000251_entry:
	// succ:  l10000251
l10000251:
	eax = Mem0[esp + 0x00000004:word32]
	return
	// succ:  fn10000251_exit
fn10000251_exit:

// fn10000256
// Mem0:Global memory
// fp:Temporary
// esp:esp
// eax:eax
// return address size: 4
void fn10000256()
fn10000256_entry:
	// succ:  l10000256
l10000256:
	eax = Mem0[esp + 0x00000004:word32]
	return
	// succ:  fn10000256_exit
fn10000256_exit:

// fn1000025B
// Mem0:Global memory
// fp:Temporary
// esp:esp
// eax:eax
// return address size: 4
void fn1000025B()
fn1000025B_entry:
	// succ:  l1000025B
l1000025B:
	eax = Mem0[esp + 0x00000004:word32]
	return
	// succ:  fn1000025B_exit
fn1000025B_exit:

// fn10000260
// Mem0:Global memory
// fp:Temporary
// esp:esp
// eax:eax
// SCZO:Flags
// return address size: 4
void fn10000260()
fn10000260_entry:
	// succ:  l10000260
l10000260:
	eax = Mem0[esp + 0x00000008:word32]
	eax = eax + Mem0[esp + 0x00000004:word32]
	SCZO = cond(eax)
	return
	// succ:  fn10000260_exit
fn10000260_exit:

// fn10000269
// Mem0:Global memory
// fp:Temporary
// esp:esp
// eax:eax
// return address size: 4
void fn10000269()
fn10000269_entry:
	// succ:  l10000269
l10000269:
	eax = Mem0[esp + 0x00000004:word32]
	return
	// succ:  fn10000269_exit
fn10000269_exit:

// fn1000026E
// Mem0:Global memory
// fp:Temporary
// esp:esp
// eax:eax
// SCZO:Flags
// return address size: 4
void fn1000026E()
fn1000026E_entry:
	// succ:  l1000026E
l1000026E:
	eax = Mem0[esp + 0x00000008:word32]
	eax = eax + Mem0[esp + 0x00000004:word32]
	SCZO = cond(eax)
	return
	// succ:  fn1000026E_exit
fn1000026E_exit:

// fn10000277
// Mem0:Global memory
// fp:Temporary
// esp:esp
// edx:edx
// eax:eax
// return address size: 4
void fn10000277()
fn10000277_entry:
	// succ:  l10000277
l10000277:
	edx = Mem0[0x20000000:word32]
	eax = Mem0[esp + 0x00000004:word32]
	Mem0[edx + 0x00000004:word32] = eax
	eax = Mem0[esp + 0x00000008:word32]
	Mem0[edx + 0x00000008:word32] = eax
	eax = Mem0[esp + 0x0000000C:word32]
	Mem0[edx + 0x0000000C:word32] = eax
	eax = Mem0[esp + 0x00000010:word32]
	Mem0[edx + 0x00000010:word32] = eax
	eax = Mem0[esp + 0x00000014:word32]
	Mem0[edx + 0x00000014:word32] = eax
	eax = Mem0[esp + 0x00000018:word32]
	Mem0[edx + 0x0000001C:word32] = eax
	return
	// succ:  fn10000277_exit
fn10000277_exit:

// fn100002A8
// Mem0:Global memory
// fp:Temporary
// esp:esp
// return address size: 4
void fn100002A8()
fn100002A8_entry:
	// succ:  l100002A8
l100002A8:
	return
	// succ:  fn100002A8_exit
fn100002A8_exit:

// fn100002A9
// Mem0:Global memory
// fp:Temporary
// esp:esp
// edx:edx
// eax:eax
// return address size: 4
void fn100002A9()
fn100002A9_entry:
	// succ:  l100002A9
l100002A9:
	edx = Mem0[0x20000000:word32]
	eax = Mem0[esp + 0x00000004:word32]
	Mem0[edx + 0x00000004:word32] = eax
	eax = Mem0[esp + 0x00000008:word32]
	Mem0[edx + 0x00000008:word32] = eax
	eax = Mem0[esp + 0x0000000C:word32]
	Mem0[edx + 0x0000000C:word32] = eax
	eax = Mem0[esp + 0x00000010:word32]
	Mem0[edx + 0x00000010:word32] = eax
	eax = Mem0[esp + 0x00000014:word32]
	Mem0[edx + 0x00000014:word32] = eax
	return
	// succ:  fn100002A9_exit
fn100002A9_exit:

