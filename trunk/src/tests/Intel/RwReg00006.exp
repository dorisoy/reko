// fn10000000
// Mem0:Global memory
// fp:Temporary
// ebx:Register ebx
// dwLoc08:Local -0008
// ebp:Register ebp
// dwLoc0C:Local -000C
// esi:Register esi
// dwLoc10:Local -0010
// edi:Register edi
// dwLoc14:Local -0014
// wArg00:Stack +0000
// di:Register di
// bl:Register bl
// SCZO:Flags
// C:Flags
// Z:Flags
// dwArg08:Stack +0008
// eax:Register eax
// dwArg0C:Stack +000C
// dwLoc18:Local -0018
// dwLoc1C:Local -001C
// dwArg04:Stack +0004
// dwLoc20:Local -0020
// ecx:Register ecx
// dwLoc24:Local -0024
// dwLoc28:Local -0028
// dwLoc2C:Local -002C
// bp:Register bp
// SZO:Flags
// edx:Register edx
// dx:Register dx
// dwLoc30:Local -0030
// dwLoc34:Local -0034
// dwLoc38:Local -0038
// dwLoc3C:Local -003C
// dwLoc40:Local -0040
// dwLoc44:Local -0044
// dwLoc48:Local -0048
// dwLoc4C:Local -004C
// dwLoc50:Local -0050
// dwLoc54:Local -0054
// dwLoc58:Local -0058
// ax:Register ax
// cx:Register cx
// return address size: 4
void fn10000000()
fn10000000_entry:		// pred:
	// succ:  l10000000
l10000000:		// pred: fn10000000_entry
	dwLoc08 = ebx
	dwLoc0C = ebp
	dwLoc10 = esi
	dwLoc14 = edi
	di = wArg00
	bl = 0x00
	SCZO = cond(di - 0x0000)
	C = false
	branch Test(NE,Z) l10000021
	// succ:  l10000010 l10000021
l10000010:		// pred: l10000000
	store(Mem0[0x1006B8E0:byte]) = 0x00
	call fn100002A8 (depth: 20;)
	edi = dwLoc14
	esi = dwLoc10
	ebp = dwLoc0C
	ebx = dwLoc08
	return
	// succ:  fn10000000_exit
fn10000000_exit:		// pred: l1000022E l10000056 l10000010
	// succ: 
l10000021:		// pred: l10000000
	eax = dwArg08
	SCZO = cond(Mem0[eax:word32] - 0x00000000)
	branch Test(NE,Z) l1000002C
	// succ:  l1000002A l1000002C
l1000002A:		// pred: l10000021
	bl = 0x01
	// succ:  l1000002C
l1000002C:		// pred: l10000021 l1000002A
	ebp = dwArg0C
	dwLoc18 = 0x1000A700
	dwLoc1C = eax
	eax = dwArg04
	dwLoc20 = 0x00003158
	ecx = Mem0[eax + 0x000000D0:word32]
	dwLoc24 = ecx
	dwLoc28 = eax
	dwLoc2C = ebp
	call fn10000277 (depth: 44;)
	esi = eax
	SCZO = cond(esi - 0x00000000)
	C = false
	branch Test(NE,Z) l10000061
	// succ:  l10000056 l10000061
l10000056:		// pred: l1000002C
	edi = dwLoc14
	store(Mem0[ebp + 0x00000000:word16]) = 0xFF94
	esi = dwLoc10
	ebp = dwLoc0C
	ebx = dwLoc08
	return
l10000061:
	SCZO = cond(di - 0x0001)
	branch Test(NE,Z) l1000006D
l10000067:
	store(Mem0[esi + 0x00000204:byte]) = bl
l1000006D:
	esp = esp - 0x00000004
	store(Mem0[esp:word32]) = esi
	call fn1000023D (depth: 0;)
	eax = Mem0[esi:word32]
	ebp = ebp ^ ebp
	SZO = cond(ebp)
	C = false
	esp = esp + 0x00000004
	SCZO = cond(esp)
	SCZO = cond(Mem0[eax:word16] - bp)
	branch Test(NE,Z) l1000022E
l10000083:
	SCZO = cond(di - bp)
	branch Test(LE,SZO) l1000020C
l1000008C:
	SCZO = cond(di - 0x0005)
	branch Test(GT,SZO) l1000020C
	// succ:  l10000096 l1000020C
l10000096:		// pred: l1000008C
	SCZO = cond(di - 0x0001)
	branch Test(NE,Z) l100000BC
l100000A0:
	dwLoc18 = esi
	call fn1000023D (depth: 24;)
	edx = Mem0[esi + 0x00000004:word32]
	eax = Mem0[edx + 0x0000000C:word32]
	ecx = Mem0[eax:word32]
	store(Mem0[ecx:word32]) = 0x00000001
	goto l10000211
l10000211:
	eax = dwArg08
	eax = Mem0[eax:word32]
	SCZO = cond(eax - ebp)
	branch Test(EQ,Z) l1000022E
	// succ:  l1000021B l1000022E
l1000021B:		// pred: l10000211
	ecx = Mem0[esi + 0x00000004:word32]
	dwLoc18 = eax
	edx = Mem0[ecx + 0x000000D0:word32]
	dwLoc1C = edx
	call fn1000026E (depth: 28;)
	// succ:  l1000022E
l1000022E:		// pred: l1000006D l10000211 l1000021B
	edi = dwLoc14
	esi = dwLoc10
	ebp = dwLoc0C
	ebx = dwLoc08
	return
	// succ:  fn10000000_exit
l100000BC:		// pred: l10000096
	SCZO = cond(di - 0x0002)
	branch Test(NE,Z) l10000132
	// succ:  l100000C2 l10000132
l100000C2:		// pred: l100000BC
	edx = Mem0[esi + 0x00000004:word32]
	dwLoc18 = esi
	store(Mem0[edx + 0x00000030:word32]) = ebp
	call fn1000023D (depth: 24;)
	eax = Mem0[esi + 0x00000004:word32]
	dwLoc1C = 0x00000001
	store(Mem0[eax + 0x00000030:word32]) = ebp
	eax = Mem0[esi + 0x00000004:word32]
	eax = eax + 0x00000010
	SCZO = cond(eax)
	cx = Mem0[eax + 0x00000002:word16]
	store(Mem0[esi + 0x000000B4:word16]) = cx
	dx = Mem0[eax:word16]
	store(Mem0[esi + 0x000000B2:word16]) = dx
	cx = Mem0[eax + 0x00000006:word16]
	store(Mem0[esi + 0x000000B8:word16]) = cx
	// succ:  l100000F8
l100000F8:		// pred: l10000146 l100000C2
	store(Mem0[esi + 0x000000B8:word32]) = ecx
	dx = Mem0[eax + 0x00000004:word16]
	store(Mem0[esi + 0x000000B6:word16]) = dx
	eax = Mem0[esi + 0x00000004:word32]
	eax = eax + 0x00000010
	dwLoc18 = eax
	dwLoc1C = esi
	call fn10000260 (depth: 28;)
	dwLoc20 = esi
	call fn1000025B (depth: 32;)
	dwLoc24 = esi
	call fn10000269 (depth: 36;)
	dwLoc28 = esi
	call fn10000242 (depth: 40;)
	// succ:  l10000211
l10000132:		// pred: l100000BC
	SCZO = cond(di - 0x0003)
	branch Test(NE,Z) l10000146
	// succ:  l10000138 l10000146
l10000138:		// pred: l10000132
	dwLoc18 = esi
	call fn10000233 (depth: 24;)
	// succ:  l10000211
l10000146:		// pred: l10000132
	SCZO = cond(di - 0x0004)
	branch Test(NE,Z) l100000F8
	// succ:  l1000014C l100000F8
l1000014C:		// pred: l10000146
	ecx = Mem0[esi + 0x00000004:word32]
	SCZO = cond(Mem0[ecx + 0x000000E0:word32] - ebp)
	bl = Test(NE,Z)
	// succ:  l10000158
l10000158:		// pred: l1000014C l100001AD l10000178
	dwLoc18 = esi
	call fn10000251 (depth: 24;)
	eax = Mem0[esi:word32]
	SCZO = cond(Mem0[eax:word16] - bp)
	branch Test(EQ,Z) l1000016F
	// succ:  l10000168 l1000016F
l10000168:		// pred: l10000158
	store(Mem0[esi + 0x000000AC:byte]) = 0x00
	// succ:  l1000016F
l1000016F:		// pred: l10000158 l10000168
	SCZO = cond(Mem0[esi + 0x000000AD:byte] - 0x01)
	branch Test(NE,Z) l1000017D
	// succ:  l10000178 l1000017D
l10000178:		// pred: l1000016F
	SCZO = cond(Mem0[eax:word16] - bp)
	branch Test(EQ,Z) l10000158
	// succ:  l1000017D l10000158
l1000017D:		// pred: l1000016F l10000178
	SCZO = cond(Mem0[eax:word16] - bp)
	branch Test(NE,Z) l1000018B
	// succ:  l10000182 l1000018B
l10000182:		// pred: l1000017D
	dwLoc18 = esi
	call fn10000238 (depth: 24;)
	// succ:  l1000018B
l1000018B:		// pred: l1000017D l10000182
	SCZO = cond(Mem0[esi + 0x000000AC:byte] - 0x01)
	branch Test(NE,Z) l100001B2
	// succ:  l10000194 l100001B2
l10000194:		// pred: l1000018B
	SCZO = cond(bl - 0x00000000)
	C = false
	branch Test(EQ,Z) l10000211
	// succ:  l10000198 l10000211
l10000198:		// pred: l10000194
	edx = Mem0[esi + 0x00000004:word32]
	icall Mem0[edx + 0x000000E0:word32]
	ecx = Mem0[esi:word32]
	store(Mem0[ecx:word16]) = ax
	edx = Mem0[esi:word32]
	SCZO = cond(Mem0[edx:word16] - bp)
	branch Test(NE,Z) l10000211
	// succ:  l100001AD l10000211
l100001AD:		// pred: l10000198
	// succ:  l10000158
l100001B2:		// pred: l1000018B
	dwLoc18 = esi
	call fn1000024C (depth: 24;)
	dwLoc1C = esi
	call fn10000256 (depth: 28;)
	eax = Mem0[esi + 0x00000004:word32]
	dwLoc20 = ebp
	dwLoc24 = ebp
	dwLoc28 = ebp
	eax = eax + 0x00000034
	dwLoc2C = ebp
	dwLoc30 = eax
	call fn100002A9 (depth: 48;)
	ecx = Mem0[esi + 0x00000004:word32]
	dwLoc34 = ebp
	dwLoc38 = ebp
	dwLoc3C = ebp
	ecx = ecx + 0x00000040
	dwLoc40 = ebp
	dwLoc44 = ecx
	call fn100002A9 (depth: 68;)
	edx = Mem0[esi + 0x00000004:word32]
	dwLoc48 = ebp
	dwLoc4C = ebp
	dwLoc50 = ebp
	edx = edx + 0x00000060
	dwLoc54 = ebp
	dwLoc58 = edx
	call fn100002A9 (depth: 88;)
	// succ:  l10000211
l1000020C:		// pred: l10000083 l1000008C
	store(Mem0[eax:word16]) = 0x8A6C
	// succ:  l10000211

// fn10000233
// Mem0:Global memory
// fp:Temporary
// dwArg00:Stack +0000
// eax:Register eax
// return address size: 4
void fn10000233()
fn10000233_entry:		// pred:
	// succ:  l10000233
l10000233:		// pred: fn10000233_entry
	eax = dwArg00
	return
	// succ:  fn10000233_exit
fn10000233_exit:		// pred: l10000233
	// succ: 

// fn10000238
// Mem0:Global memory
// fp:Temporary
// dwArg00:Stack +0000
// eax:Register eax
// return address size: 4
void fn10000238()
fn10000238_entry:		// pred:
	// succ:  l10000238
l10000238:		// pred: fn10000238_entry
	eax = dwArg00
	return
	// succ:  fn10000238_exit
fn10000238_exit:		// pred: l10000238
	// succ: 

// fn1000023D
// Mem0:Global memory
// fp:Temporary
// dwArg00:Stack +0000
// eax:Register eax
// return address size: 4
void fn1000023D()
fn1000023D_entry:		// pred:
	// succ:  l1000023D
l1000023D:		// pred: fn1000023D_entry
	eax = dwArg00
	return
	// succ:  fn1000023D_exit
fn1000023D_exit:		// pred: l1000023D
	// succ: 

// fn10000242
// Mem0:Global memory
// fp:Temporary
// dwArg00:Stack +0000
// eax:Register eax
// return address size: 4
void fn10000242()
fn10000242_entry:		// pred:
	// succ:  l10000242
l10000242:		// pred: fn10000242_entry
	eax = dwArg00
	return
	// succ:  fn10000242_exit
fn10000242_exit:		// pred: l10000242
	// succ: 

// fn1000024C
// Mem0:Global memory
// fp:Temporary
// dwArg00:Stack +0000
// eax:Register eax
// return address size: 4
void fn1000024C()
fn1000024C_entry:		// pred:
	// succ:  l1000024C
l1000024C:		// pred: fn1000024C_entry
	eax = dwArg00
	return
	// succ:  fn1000024C_exit
fn1000024C_exit:		// pred: l1000024C
	// succ: 

// fn10000251
// Mem0:Global memory
// fp:Temporary
// dwArg00:Stack +0000
// eax:Register eax
// return address size: 4
void fn10000251()
fn10000251_entry:		// pred:
	// succ:  l10000251
l10000251:		// pred: fn10000251_entry
	eax = dwArg00
	return
	// succ:  fn10000251_exit
fn10000251_exit:		// pred: l10000251
	// succ: 

// fn10000256
// Mem0:Global memory
// fp:Temporary
// dwArg00:Stack +0000
// eax:Register eax
// return address size: 4
void fn10000256()
fn10000256_entry:		// pred:
	// succ:  l10000256
l10000256:		// pred: fn10000256_entry
	eax = dwArg00
	return
	// succ:  fn10000256_exit
fn10000256_exit:		// pred: l10000256
	// succ: 

// fn1000025B
// Mem0:Global memory
// fp:Temporary
// dwArg00:Stack +0000
// eax:Register eax
// return address size: 4
void fn1000025B()
fn1000025B_entry:		// pred:
	// succ:  l1000025B
l1000025B:		// pred: fn1000025B_entry
	eax = dwArg00
	return
	// succ:  fn1000025B_exit
fn1000025B_exit:		// pred: l1000025B
	// succ: 

// fn10000260
// Mem0:Global memory
// fp:Temporary
// dwArg04:Stack +0004
// eax:Register eax
// dwArg00:Stack +0000
// SCZO:Flags
// return address size: 4
void fn10000260()
fn10000260_entry:		// pred:
	// succ:  l10000260
l10000260:		// pred: fn10000260_entry
	eax = dwArg04
	eax = eax + dwArg00
	SCZO = cond(eax)
	return
	// succ:  fn10000260_exit
fn10000260_exit:		// pred: l10000260
	// succ: 

// fn10000269
// Mem0:Global memory
// fp:Temporary
// dwArg00:Stack +0000
// eax:Register eax
// return address size: 4
void fn10000269()
fn10000269_entry:		// pred:
	// succ:  l10000269
l10000269:		// pred: fn10000269_entry
	eax = dwArg00
	return
	// succ:  fn10000269_exit
fn10000269_exit:		// pred: l10000269
	// succ: 

// fn1000026E
// Mem0:Global memory
// fp:Temporary
// dwArg04:Stack +0004
// eax:Register eax
// dwArg00:Stack +0000
// SCZO:Flags
// return address size: 4
void fn1000026E()
fn1000026E_entry:		// pred:
	// succ:  l1000026E
l1000026E:		// pred: fn1000026E_entry
	eax = dwArg04
	eax = eax + dwArg00
	SCZO = cond(eax)
	return
	// succ:  fn1000026E_exit
fn1000026E_exit:		// pred: l1000026E
	// succ: 

// fn10000277
// Mem0:Global memory
// fp:Temporary
// edx:Register edx
// dwArg00:Stack +0000
// eax:Register eax
// dwArg04:Stack +0004
// dwArg08:Stack +0008
// dwArg0C:Stack +000C
// dwArg10:Stack +0010
// dwArg14:Stack +0014
// return address size: 4
void fn10000277()
fn10000277_entry:		// pred:
	// succ:  l10000277
l10000277:		// pred: fn10000277_entry
	edx = Mem0[0x20000000:word32]
	eax = dwArg00
	store(Mem0[edx + 0x00000004:word32]) = eax
	eax = dwArg04
	store(Mem0[edx + 0x00000008:word32]) = eax
	eax = dwArg08
	store(Mem0[edx + 0x0000000C:word32]) = eax
	eax = dwArg0C
	store(Mem0[edx + 0x00000010:word32]) = eax
	eax = dwArg10
	store(Mem0[edx + 0x00000014:word32]) = eax
	eax = dwArg14
	store(Mem0[edx + 0x0000001C:word32]) = eax
	return
	// succ:  fn10000277_exit
fn10000277_exit:		// pred: l10000277
	// succ: 

// fn100002A8
// Mem0:Global memory
// fp:Temporary
// return address size: 4
void fn100002A8()
fn100002A8_entry:		// pred:
	// succ:  l100002A8
l100002A8:		// pred: fn100002A8_entry
	return
	// succ:  fn100002A8_exit
fn100002A8_exit:		// pred: l100002A8
	// succ: 

// fn100002A9
// Mem0:Global memory
// fp:Temporary
// edx:Register edx
// dwArg00:Stack +0000
// eax:Register eax
// dwArg04:Stack +0004
// dwArg08:Stack +0008
// dwArg0C:Stack +000C
// dwArg10:Stack +0010
// return address size: 4
void fn100002A9()
fn100002A9_entry:		// pred:
	// succ:  l100002A9
l100002A9:		// pred: fn100002A9_entry
	edx = Mem0[0x20000000:word32]
	eax = dwArg00
	store(Mem0[edx + 0x00000004:word32]) = eax
	eax = dwArg04
	store(Mem0[edx + 0x00000008:word32]) = eax
	eax = dwArg08
	store(Mem0[edx + 0x0000000C:word32]) = eax
	eax = dwArg0C
	store(Mem0[edx + 0x00000010:word32]) = eax
	eax = dwArg10
	store(Mem0[edx + 0x00000014:word32]) = eax
	return
	// succ:  fn100002A9_exit
fn100002A9_exit:		// pred: l100002A9
	// succ: 

