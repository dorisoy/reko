= Before ==========
// fn04000000
// Mem0:Global memory
// fp:Temporary
// eax:Register eax
// ecx:Register ecx
// SCZO:Flags
// dwLoc0C:Local -000C
// dwLoc08:Local -0008
// dwLoc04:Local -0004
// SZO:Flags
// dwArg04:Stack +0004
// edi:Register edi
// esp:Register esp
// fn04000000_frame:Temporary
// Frame escapes
// return address size: 0
void fn04000000()
fn04000000_entry:		// block 0, pred:
	// succ:  1
fn04000000_frame_asgn:		// block 1, pred: 0
	fp = &fn04000000_frame
	// succ:  2
l04000000:		// block 2, pred: 1
	eax = 0x00000000
	ecx = 0x00000000
	SCZO = cond(ecx)
	Mem0[fp - 12:word32] = 0x00000001
	Mem0[fp - 8:word32] = 0x00000002
	Mem0[fp - 4:word32] = 0x00000003
	// succ:  3
l04000027:		// block 3, pred: 2 4
	SCZO = cond(ecx - 0x00000003)
	branch Test(LE,SZO)
	// succ:  5 4
l04000023:		// block 4, pred: 3
	eax = eax + Mem0[fp + 0xFFFFFFF4 + ecx * 0x00000004:word32]
	SCZO = cond(eax)
	ecx = ecx + 0x00000001
	SZO = cond(ecx)
	// succ:  3
l0400002C:		// block 5, pred: 3
	edi = dwArg04
	Mem0[edi:word32] = eax
	return
	// succ:  6
fn04000000_exit:		// block 6, pred: 5
	// succ: 
The frame of procedure fn04000000 escapes
= After ==========
// fn04000000
// Mem0:Global memory
// fp:Temporary
// eax:Register eax
// ecx:Register ecx
// SCZO:Flags
// dwLoc0C:Local -000C
// dwLoc08:Local -0008
// dwLoc04:Local -0004
// SZO:Flags
// dwArg04:Stack +0004
// edi:Register edi
// esp:Register esp
// fn04000000_frame:Temporary
// Frame escapes
// return address size: 0
void fn04000000()
fn04000000_entry:		// block 0, pred:
	// succ:  1
fn04000000_frame_asgn:		// block 1, pred: 0
	fp = &fn04000000_frame
	// succ:  2
l04000000:		// block 2, pred: 1
	eax = 0x00000000
	ecx = 0x00000000
	SCZO = cond(ecx)
	Mem0[fp - 12:word32] = 0x00000001
	Mem0[fp - 8:word32] = 0x00000002
	Mem0[fp - 4:word32] = 0x00000003
	// succ:  3
l04000027:		// block 3, pred: 2 4
	SCZO = cond(ecx - 0x00000003)
	branch Test(LE,SZO)
	// succ:  5 4
l04000023:		// block 4, pred: 3
	eax = eax + Mem0[fp + 0xFFFFFFF4 + ecx * 0x00000004:word32]
	SCZO = cond(eax)
	ecx = ecx + 0x00000001
	SZO = cond(ecx)
	// succ:  3
l0400002C:		// block 5, pred: 3
	edi = dwArg04
	Mem0[edi:word32] = eax
	return
	// succ:  6
fn04000000_exit:		// block 6, pred: 5
	// succ: 

