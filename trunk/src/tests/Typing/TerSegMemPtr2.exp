// SegmentedMemoryPointerMock2
void SegmentedMemoryPointerMock2()
SegmentedMemoryPointerMock2_entry:		// block 0, pred:
	// succ:  1
l1:		// block 1, pred: 0
	ax = (ds->*bx).w0000;
	ax = (ds->*bx).w0004;
	// succ: 

// Equivalence classes ////////////
Eq_2: (segment "Eq_2")
	T_2 (in ds : segment)
Eq_3: (struct "Eq_3" (0 word16 w0000) (4 word16 w0004))
	T_3 (in bx : word16)
// Type Variables ////////////
Globals:(in globals)
  Class: Eq_1
  DataType: Eq_1
  OrigDataType: 
T_2:(in ds)
  Class: Eq_2
  DataType: (ptr Eq_2)
  OrigDataType: (ptr (segment))
T_3:(in bx)
  Class: Eq_3
  DataType: (memptr (ptr Eq_2) Eq_3)
  OrigDataType: (memptr T_2 (struct (0 T_4 t0000) (4 T_8 t0004)))
T_4:(in Mem0[ds:bx:word16])
  Class: Eq_4
  DataType: word16
  OrigDataType: word16
T_5:(in ax)
  Class: Eq_4
  DataType: word16
  OrigDataType: word16
T_6:(in 0x0004)
  Class: Eq_6
  DataType: word16
  OrigDataType: word16
T_7:(in bx + 0x0004)
  Class: Eq_7
  DataType: word16
  OrigDataType: word16
T_8:(in Mem0[ds:bx + 0x0004:word16])
  Class: Eq_4
  DataType: word16
  OrigDataType: word16
