// SegmentedMemoryPointerMock
void SegmentedMemoryPointerMock()
SegmentedMemoryPointerMock_entry:		// block 0, pred:
	// succ:  1
l1:		// block 1, pred: 0
	si = &Eq_4::w0001;
	ax = cs->*si;
	si2 = &Eq_4::w0005;
	ax = cs->*si2;
	// succ: 

// Equivalence classes ////////////
Eq_4: (struct "Eq_4" (1 word16 w0001) (5 word16 w0005))
	T_4 (in cs : segment)
// Type Variables ////////////
Globals:(in globals)
  Class: Eq_1
  DataType: Eq_1
  OrigDataType: 
T_2:(in 0x0001)
  Class: Eq_2
  DataType: (memptr (ptr Eq_4) word16)
  OrigDataType: word16
T_3:(in si)
  Class: Eq_2
  DataType: (memptr (ptr Eq_4) word16)
  OrigDataType: (memptr T_4 (struct (0 T_5 t0000)))
T_4:(in cs)
  Class: Eq_4
  DataType: (ptr Eq_4)
  OrigDataType: (ptr (struct (1 T_5 t0001) (5 T_9 t0005)))
T_5:(in Mem0[cs:si:word16])
  Class: Eq_5
  DataType: word16
  OrigDataType: word16
T_6:(in ax)
  Class: Eq_5
  DataType: word16
  OrigDataType: word16
T_7:(in 0x0005)
  Class: Eq_7
  DataType: (memptr (ptr Eq_4) word16)
  OrigDataType: word16
T_8:(in si2)
  Class: Eq_7
  DataType: (memptr (ptr Eq_4) word16)
  OrigDataType: (memptr T_4 (struct (0 T_9 t0000)))
T_9:(in Mem0[cs:si2:word16])
  Class: Eq_5
  DataType: word16
  OrigDataType: word16
