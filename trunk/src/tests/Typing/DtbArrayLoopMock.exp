// ArrayLoopMock
void ArrayLoopMock()
ArrayLoopMock_entry:
	goto l1
	// succ:  l1
done:
	return
	// succ:  ArrayLoopMock_exit
l1:
	word32 ptr_3 = 0x04000000
	goto looptest
	// succ:  looptest
l2:
	Mem5[ptr_3 + 0x00000000:word32] = 0x00000000
	ptr_3 = ptr_3 + 0x00000004
	// succ:  looptest
looptest:
	branch ptr_3 >=u 0x04001000 done
	goto l2
	// succ:  l2 done

ArrayLoopMock_exit:

// Equivalence classes ////////////
Eq_1: (ptr (struct (4000000 (arr (struct 4 (0 T_7 t0000)) 1024) a4000000)))
	Globals (in globals : ptr0)
Eq_2: (ptr (struct 4 (0 T_7 t0000)))
	T_2 (in ptr_3 : word32)
	T_3 (in 0x04000000 : word32)
	T_4 (in 0x04001000 : word32)
	T_9 (in ptr_3 + 0x00000004 : word32)
Eq_5: bool
	T_5 (in ptr_3 >=u 0x04001000 : bool)
Eq_6: word32
	T_6 (in 0x00000000 : word32)
	T_7 (in Mem6[ptr_3:word32] : word32)
Eq_8: word32
	T_8 (in 0x00000004 : word32)
// Type Variables ////////////
Globals: (in globals : ptr0)
  Class: Eq_1
  DataType: (ptr (struct (4000000 (arr (struct 4 (0 T_7 t0000)) 1024) a4000000)))
  OrigDataType: (ptr (struct (4000000 (arr (struct 4 (0 T_7 t0000)) 1024) a4000000)))
T_2: (in ptr_3 : word32)
  Class: Eq_2
  DataType: (ptr (struct 4 (0 T_7 t0000)))
  OrigDataType: (ptr (struct 4 (0 T_7 t0000)))
T_3: (in 0x04000000 : word32)
  Class: Eq_2
  DataType: (ptr (struct 4 (0 T_7 t0000)))
  OrigDataType: word32
T_4: (in 0x04001000 : word32)
  Class: Eq_2
  DataType: (ptr (struct 4 (0 T_7 t0000)))
  OrigDataType: up32
T_5: (in ptr_3 >=u 0x04001000 : bool)
  Class: Eq_5
  DataType: bool
  OrigDataType: bool
T_6: (in 0x00000000 : word32)
  Class: Eq_6
  DataType: word32
  OrigDataType: word32
T_7: (in Mem6[ptr_3:word32] : word32)
  Class: Eq_6
  DataType: word32
  OrigDataType: word32
T_8: (in 0x00000004 : word32)
  Class: Eq_8
  DataType: word32
  OrigDataType: word32
T_9: (in ptr_3 + 0x00000004 : word32)
  Class: Eq_2
  DataType: (ptr (struct 4 (0 T_7 t0000)))
  OrigDataType: word32
