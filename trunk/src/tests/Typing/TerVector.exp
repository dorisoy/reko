// Before ///////
// VectorFragment
// Return size: 0
void VectorFragment()
VectorFragment_entry:
	// succ:  l1
l1:
	mod = Mem0[v:real32] + (Mem0[v + 0x00000004:real32] + Mem0[v + 0x00000008:real32])
VectorFragment_exit:

// After ///////
// VectorFragment
// Return size: 0
void VectorFragment()
VectorFragment_entry:
	// succ:  l1
l1:
	mod = v->r0000 + (v->r0004 + v->r0008);
VectorFragment_exit:

// Equivalence classes ////////////
Eq_1: (struct "Eq_1")
	globals_t (in globals : (ptr (struct "Globals")))
Eq_2: (struct "Eq_2" (0 real32 r0000) (4 real32 r0004) (8 real32 r0008))
	T_2 (in v : word32)
// Type Variables ////////////
globals_t: (in globals : (ptr (struct "Globals")))
  Class: Eq_1
  DataType: (ptr Eq_1)
  OrigDataType: (ptr (struct))
T_2: (in v : word32)
  Class: Eq_2
  DataType: (ptr Eq_2)
  OrigDataType: (ptr (struct (0 T_5 t0000) (4 T_8 t0004) (8 T_11 t0008)))
T_3: (in 0x00000000 : word32)
  Class: Eq_3
  DataType: word32
  OrigDataType: word32
T_4: (in v + 0x00000000 : word32)
  Class: Eq_4
  DataType: word32
  OrigDataType: word32
T_5: (in Mem0[v + 0x00000000:real32] : real32)
  Class: Eq_5
  DataType: real32
  OrigDataType: real32
T_6: (in 0x00000004 : word32)
  Class: Eq_6
  DataType: word32
  OrigDataType: word32
T_7: (in v + 0x00000004 : word32)
  Class: Eq_7
  DataType: word32
  OrigDataType: word32
T_8: (in Mem0[v + 0x00000004:real32] : real32)
  Class: Eq_8
  DataType: real32
  OrigDataType: real32
T_9: (in 0x00000008 : word32)
  Class: Eq_9
  DataType: word32
  OrigDataType: word32
T_10: (in v + 0x00000008 : word32)
  Class: Eq_10
  DataType: word32
  OrigDataType: word32
T_11: (in Mem0[v + 0x00000008:real32] : real32)
  Class: Eq_11
  DataType: real32
  OrigDataType: real32
T_12: (in v->r0004 + v->r0008 : real32)
  Class: Eq_12
  DataType: real32
  OrigDataType: real32
T_13: (in v->r0000 + (v->r0004 + v->r0008) : real32)
  Class: Eq_13
  DataType: real32
  OrigDataType: real32
T_14: (in mod : word32)
  Class: Eq_13
  DataType: real32
  OrigDataType: real32
