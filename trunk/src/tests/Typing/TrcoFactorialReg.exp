// fn0C00_0000
void fn0C00_0000(segment ds)
fn0C00_0000_entry:		// block 0, pred:
	// succ:  1
l0C00_0000:		// block 1, pred: 0
	store(Mem7[ds:0x0064:word16]) = fn0C00_000B(0x0005)
	return
	// succ:  2
fn0C00_0000_exit:		// block 2, pred: 1
	// succ: 

// fn0C00_000B
word16 fn0C00_000B(word16 cx)
fn0C00_000B_entry:		// block 0, pred:
	// succ:  1
l0C00_000B:		// block 1, pred: 0
	word16 ax_13
	branch cx <= 0x0001
	// succ:  3 2
l0C00_001C:		// block 2, pred: 1
	ax_13 = 0x0001
	// succ:  4
l0C00_0011:		// block 3, pred: 1
	ax_13 = (word16) (cx *s fn0C00_000B(cx - 0x0001)) (alias)
	// succ:  4
l0C00_001F:		// block 4, pred: 3 2
	return ax_13
	// succ:  5
fn0C00_000B_exit:		// block 5, pred: 4
	// succ: 

T_2 (in fn0C00_000B)
	trait_func(T_5 -> T_6)
T_4 (in cx)
	trait_primitive(word16)
	trait_equal(T_11)
	trait_primitive(int16)
	trait_primitive(word16)
	trait_primitive(word16)
	trait_primitive(int16)
T_5 (in 0x0005)
	trait_primitive(word16)
T_6 (in fn0C00_000B(0x0005))
	trait_primitive(word16)
T_7 (in ds)
	trait_primitive(segment)
	trait_mem(T_9, 64)
T_8 (in 0x0064)
	trait_primitive(word16)
	trait_mem(T_7:T_9, 0)
T_9 (in Mem7[ds:0x0064:word16])
	trait_primitive(word16)
	trait_equal(T_6)
T_10 (in ax_13)
	trait_primitive(word16)
	trait_equal(T_13)
	trait_primitive(word16)
	trait_equal(T_19)
	trait_primitive(word16)
T_11 (in 0x0001)
	trait_primitive(word16)
	trait_primitive(int16)
T_12 (in cx <= 0x0001)
	trait_primitive(bool)
T_13 (in 0x0001)
	trait_primitive(word16)
T_14 (in fn0C00_000B)
	trait_func(T_16 -> T_17)
T_15 (in 0x0001)
	trait_primitive(word16)
T_16 (in cx - 0x0001)
	trait_primitive(word16)
T_17 (in fn0C00_000B(cx - 0x0001))
	trait_primitive(word16)
	trait_primitive(int16)
T_18 (in cx *s fn0C00_000B(cx - 0x0001))
	trait_primitive(int32)
T_19 (in (word16) (cx *s fn0C00_000B(cx - 0x0001)))
	trait_primitive(word16)
