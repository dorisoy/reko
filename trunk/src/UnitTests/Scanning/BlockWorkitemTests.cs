#region License
/* 
 * Copyright (C) 1999-2010 John Källén.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2, or (at your option)
 * any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; see the file COPYING.  If not, write to
 * the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.
 */
#endregion

using Decompiler.Arch.Intel;
using Decompiler.Core;
using Decompiler.Core.Code;
using Decompiler.Core.Types;
using Decompiler.Scanning;
using Decompiler.UnitTests.Mocks;
using NUnit.Framework;
using Rhino.Mocks;
using System;
using System.Collections.Generic;
using System.Text;

namespace Decompiler.UnitTests.Scanning
{
    [TestFixture]
    public class BlockWorkitemTests
    {
        private MockRepository repository;
        private IScanner scanner;
        private IProcessorArchitecture arch;
        private Rewriter2 rewriter;
        private Program prog;
        private Procedure proc;
        private Block block;
        private LowLevelStatementStream m;

        [SetUp]
        public void Setup()
        {
            repository = new MockRepository();
            prog = new Program();
            proc = new Procedure("testProc", new Frame(null));
            block = new Block(proc, "test");
            m = new LowLevelStatementStream(0x1000, block);

            scanner = repository.DynamicMock<IScanner>();
            arch = repository.DynamicMock<IProcessorArchitecture>();
            rewriter = repository.Stub<Rewriter2>();
        }

        private BlockWorkitem2 CreateWorkItem(Address addr)
        {
            return new BlockWorkitem2(scanner, null, arch, addr, proc.Frame, block);
        }

        [Test]
        public void RewriteReturn()
        {
            var addr = new Address(0x1000);

            m.Return();
            m.Fn(m.Int32(0x49242));

            using (repository.Record())
            {
                arch.Stub(x => x.CreateRewriter2(
                    Arg<ImageReader>.Is.Anything,
                    Arg<Frame>.Is.Anything,
                    Arg<IRewriterHost2>.Is.Anything)).Return(rewriter);
                rewriter.Stub(x => x.GetEnumerator()).Return(m.GetRewrittenInstructions());
            }

            var wi = CreateWorkItem(new Address(0x1000));
            wi.Process();
            Assert.AreEqual(1, block.Statements.Count);
            Assert.IsTrue(proc.ControlGraph.ContainsEdge(block, proc.ExitBlock), "Expected return to add an edge to the Exit block");
        }

        [Test]
        public void RewritersMustNotSendBranches()
        {
            var addr = new Address(0x1000);

            using (repository.Record())
            {
                arch.Stub(x => x.CreateRewriter2(
                    Arg<ImageReader>.Is.Anything,
                    Arg<Frame>.Is.Anything,
                    Arg<IRewriterHost2>.Is.Anything)).Return(rewriter);
                rewriter.Stub(x => x.GetEnumerator()).Return(m.GetRewrittenInstructions());
            }

            m.Emit(new Branch(m.Eq0(m.Register(0)), null));
            var wi = CreateWorkItem(new Address(0x1000));
            try
            {
                wi.Process();
                Assert.Fail("Expected an exception to be thrown.");
            }
            catch (InvalidOperationException ex)
            {
                Assert.AreEqual("Branch instructions should not be generated by rewriters: return a GotoStatement with a condition instead.", ex.Message);
            }
        }



        [Test]
        public void StopOnGoto()
        {
            m.Assign(m.Register(0), 3);
            m.Goto(0x4000);

            Block next = new Block(block.Procedure, "next");
            using (repository.Record())
            {
                arch.Stub(x => x.CreateRewriter2(
                    Arg<ImageReader>.Is.Anything,
                    Arg<Frame>.Is.Anything,
                    Arg<IRewriterHost2>.Is.Anything)).Return(rewriter);
                rewriter.Stub(x => x.GetEnumerator()).Return(m.GetRewrittenInstructions());
                scanner.Expect(x => x.EnqueueJumpTarget(
                    Arg<Address>.Is.Anything,
                    Arg<Procedure>.Is.Same(block.Procedure))).Return(next);
            }

            var wi = CreateWorkItem(new Address(0x1000));
            wi.Process();
            Assert.AreEqual(0, block.Statements.Count);
            Assert.AreEqual(1, proc.ControlGraph.Successors(block).Count);
            var items = new List<Block>(proc.ControlGraph.Successors(block));
            Assert.AreSame(next, items[0]);
            repository.VerifyAll();
        }

        [Test]
        public void HandleBranch()
        {
            m.IfGoto(m.Register(1), new Address(0x4000));
            m.Assign(m.Register(1), m.Register(2));

            using (repository.Record())
            {
                arch.Stub(x => x.CreateRewriter2(
                    Arg<ImageReader>.Is.Anything,
                    Arg<Frame>.Is.Anything,
                    Arg<IRewriterHost2>.Is.Anything)).Return(rewriter);
                rewriter.Stub(x => x.GetEnumerator()).Return(m.GetRewrittenInstructions());
                scanner.Expect(x => x.EnqueueJumpTarget(
                    Arg<Address>.Matches(arg => arg.Offset == 0x1004),
                    Arg<Procedure>.Is.Same(block.Procedure))).Return(null);
                scanner.Expect(x => x.EnqueueJumpTarget(
                    Arg<Address>.Matches(arg => arg.Offset == 0x4000),
                    Arg<Procedure>.Is.Same(block.Procedure))).Return(null);
            }
            var wi = CreateWorkItem(new Address(0x1000));
            wi.Process();
            Assert.AreEqual(1, block.Statements.Count);

            repository.VerifyAll();
        }

        [Test]
        public void CallInstructionShouldAddNodeToCallgraph()
        {
            m.Call(new Address(0x1200));
            m.Store(m.Word32(0x4000), m.Word32(0));
            m.Return();

            var cg = new CallGraph();
            using (repository.Record())
            {
                arch.Stub(x => x.CreateRewriter2(
                    Arg<ImageReader>.Is.Anything,
                    Arg<Frame>.Is.Anything,
                    Arg<IRewriterHost2>.Is.Anything)).Return(rewriter);
                rewriter.Stub(x => x.GetEnumerator()).Return(m.GetRewrittenInstructions());
                scanner.Stub(x => x.CallGraph).Return(cg);
                scanner.Expect(x => x.EnqueueProcedure(
                    Arg<Scanner2.WorkItem2>.Is.Anything,
                    Arg<Address>.Matches(arg => arg.Offset == 0x1200),
                    Arg<string>.Is.Null,
                    Arg<ProcessorState>.Is.Anything))
                        .Return(new Procedure("fn1200", new Frame(null)));
            }
            var wi = CreateWorkItem(new Address(0x1000));
            wi.Process();
            var callees = new List<Procedure>(cg.Callees(block.Procedure));
            Assert.AreEqual(1, callees.Count);
            Assert.AreEqual("fn1200", callees[0].Name);
        }

        [Test]
        [Ignore("Need split to work in scanner first")]
        public void SplitBlock()
        {
            m.Assign(m.Register(0), 0);
            m.Add(m.Register(0), 1);
            m.IfGoto(m.Lt(m.Register(0), 10), new Address(0x1004));
            m.Return();

            using (repository.Record())
            {
                arch.Stub(x => x.CreateRewriter2(
                    Arg<ImageReader>.Is.Anything,
                    Arg<Frame>.Is.Anything,
                    Arg<IRewriterHost2>.Is.Anything)).Return(rewriter);
                rewriter.Stub(x => x.GetEnumerator()).Return(m.GetRewrittenInstructions());
            }
            var wi = CreateWorkItem(new Address(0x1000));
            wi.Process();
        }


#if NOT_READY_YET
        [Test]
        public void WalkServiceCall()
        {
            // Checks to see if a sequence return value (es:bx) trashes the state appropriately.
            IntelState state = new IntelState();
            state.Set(Registers.es, Constant.Word16(0));
            state.Set(Registers.es, Constant.Word16(0));

            state.Set(Registers.ah, new Constant(PrimitiveType.Word16, 0x2F));

            IntelInstruction instr = new IntelInstruction(Opcode.@int, PrimitiveType.Word16, PrimitiveType.Word16,
                new ImmediateOperand(Constant.Byte(0x21)));

            IntelArchitecture arch = new IntelArchitecture(ProcessorMode.Real);
            TestCodeWalkerListener listener = new TestCodeWalkerListener();
            IntelCodeWalker cw = new IntelCodeWalker(arch, new MsdosPlatform(arch), null, state);
            cw.WalkInstruction(new Address(0x100, 0x100), instr, null, listener);
            Assert.IsFalse(state.Get(Registers.es).IsValid, "should have trashed ES");
            Assert.IsFalse(state.Get(Registers.bx).IsValid, "should have trashed BX");
            Assert.AreEqual(1, listener.SystemCalls.Count);
        }

        [Test]
        public void WalkBswap()
        {
            IntelState state = new IntelState();
            state.Set(Registers.ebp, new Constant(PrimitiveType.Word32, 0x12345678));
            IntelInstruction instr = new IntelInstruction(Opcode.bswap, PrimitiveType.Word32, PrimitiveType.Word32,
                new RegisterOperand(Registers.ebp));

            IntelArchitecture arch = new IntelArchitecture(ProcessorMode.ProtectedFlat);
            IntelCodeWalker cw = new IntelCodeWalker(arch, null, null, state);
            cw.WalkInstruction(new Address(0x100000), instr, null, null);
            Assert.AreSame(Constant.Invalid, state.Get(Registers.ebp));
        }

        [Test]
        public void WalkMovConst()
        {
            IntelState state = new IntelState();
            state.Set(Registers.esi, new Constant(PrimitiveType.Word32, 0x42424242));
            IntelInstruction instr = new IntelInstruction(Opcode.mov, PrimitiveType.Word16, PrimitiveType.Word32,
                new RegisterOperand(Registers.si),
                new ImmediateOperand(new Constant(0x0606)));

            IntelArchitecture arch = new IntelArchitecture(ProcessorMode.ProtectedFlat);
            IntelCodeWalker cw = new IntelCodeWalker(arch, null, null, state);
            cw.WalkInstruction(new Address(0x0100000), instr, null, null);
            Assert.AreEqual(0x42420606, state.Get(Registers.esi).ToInt32());
        }

#endif
    }
}
